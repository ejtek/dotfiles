{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"IITC: Ingress intel map total conversion","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556866407,"data":{}},"enabled":true,"position":1,"file_url":"https://iitc.app/build/release/total-conversion-build.user.js","uuid":"6f610489-3f62-4b28-bf51-149d5fb9eaef","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGF1dGhvciAgICAgICAgIGpvbmF0a2lucwovLyBAbmFtZSAgICAgICAgICAgSUlUQzogSW5ncmVzcyBpbnRlbCBtYXAgdG90YWwgY29udmVyc2lvbgovLyBAdmVyc2lvbiAgICAgICAgMC40MC4wCi8vIEBkZXNjcmlwdGlvbiAgICBUb3RhbCBjb252ZXJzaW9uIGZvciB0aGUgaW5ncmVzcyBpbnRlbCBtYXAuCi8vIEBydW4tYXQgICAgICAgICBkb2N1bWVudC1lbmQKLy8gQGlkICAgICAgICAgICAgIHRvdGFsLWNvbnZlcnNpb24tYnVpbGQKLy8gQG5hbWVzcGFjZSAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9JSVRDLUNFL2luZ3Jlc3MtaW50ZWwtdG90YWwtY29udmVyc2lvbgovLyBAdXBkYXRlVVJMICAgICAgaHR0cHM6Ly9paXRjLmFwcC9idWlsZC9yZWxlYXNlL3RvdGFsLWNvbnZlcnNpb24tYnVpbGQubWV0YS5qcwovLyBAZG93bmxvYWRVUkwgICAgaHR0cHM6Ly9paXRjLmFwcC9idWlsZC9yZWxlYXNlL3RvdGFsLWNvbnZlcnNpb24tYnVpbGQudXNlci5qcwovLyBAbWF0Y2ggICAgICAgICAgaHR0cHM6Ly9pbnRlbC5pbmdyZXNzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICBodHRwczovL2ludGVsLXguaW5ncmVzcy5jb20vKgovLyBAaWNvbiAgICAgICAgICAgaHR0cHM6Ly9paXRjLmFwcC9leHRyYXMvcGx1Z2luLWljb25zL3RvdGFsLWNvbnZlcnNpb24tYnVpbGQuc3ZnCi8vIEBncmFudCAgICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gd3JhcHBlcihwbHVnaW5faW5mbykgewovLyBlbnN1cmUgcGx1Z2luIGZyYW1ld29yayBpcyB0aGVyZSwgZXZlbiBpZiBpaXRjIGlzIG5vdCB5ZXQgbG9hZGVkCmlmKHR5cGVvZiB3aW5kb3cucGx1Z2luICE9PSAnZnVuY3Rpb24nKSB3aW5kb3cucGx1Z2luID0gZnVuY3Rpb24oKSB7fTsKCi8vUExVR0lOIEFVVEhPUlM6IHdyaXRpbmcgYSBwbHVnaW4gb3V0c2lkZSBvZiB0aGUgSUlUQyBidWlsZCBlbnZpcm9ubWVudD8gaWYgc28sIGRlbGV0ZSB0aGVzZSBsaW5lcyEhCi8vKGxlYXZpbmcgdGhlbSBpbiBwbGFjZSBtaWdodCBicmVhayB0aGUgJ0Fib3V0IElJVEMnIHBhZ2Ugb3IgYnJlYWsgdXBkYXRlIGNoZWNrcykKcGx1Z2luX2luZm8uYnVpbGROYW1lID0gJ3JlbGVhc2UnOwpwbHVnaW5faW5mby5kYXRlVGltZVZlcnNpb24gPSAnMjAyNS0wNC0xOS0xMjQ1NTMnOwpwbHVnaW5faW5mby5wbHVnaW5JZCA9ICd0b3RhbC1jb252ZXJzaW9uLWJ1aWxkJzsKLy9FTkQgUExVR0lOIEFVVEhPUlMgTk9URQoKLyogZ2xvYmFsIHBsdWdpbl9pbmZvLCBQTEFZRVIgLS0gZXNsaW50ICovCgovKioKICogQG5hbWVzcGFjZSBJSVRDCiAqLwoKLy8gY3JlYXRlIElJVEMgc2NvcGUKY29uc3QgSUlUQyA9IHt9Owp3aW5kb3cuSUlUQyA9IElJVEM7Cgp3aW5kb3cuc2NyaXB0X2luZm8gPSBwbHVnaW5faW5mbzsKd2luZG93LnNjcmlwdF9pbmZvLmNoYW5nZWxvZyA9IFsKICB7CiAgICB2ZXJzaW9uOiAnMC40MC4wJywKICAgIGNoYW5nZXM6IFsKICAgICAgJ0FkZGVkIGludGVyZmFjZSBjb250cm9scyBmb3IgdGhlIG1vYmlsZSB2ZXJzaW9uIG9mIElJVEMgd2l0aG91dCB0aGUgbmVlZCBmb3IgYW4gYXBwIGluc3RhbGxhdGlvbicsCiAgICAgICdJbnRyb2R1Y2VkIHRoZSBJSVRDLnV0aWxzIEFQSSDigJQgYSBzZXQgb2YgdXRpbGl0eSBmdW5jdGlvbnMgKHNlZSBtb3JlOiBodHRwczovL2dpdGh1Yi5jb20vSUlUQy1DRS9pbmdyZXNzLWludGVsLXRvdGFsLWNvbnZlcnNpb24vd2lraS9JSVRDLXBsdWdpbi1taWdyYXRpb24tZ3VpZGUjdXRpbHMtYXBpKScsCiAgICAgICdJbXBsZW1lbnRlZCBwb3J0YWwgb2JqZWN0IHBlcnNpc3RlbmNlOiBwb3J0YWwgbWFya2VycyBhcmUgcmV0YWluZWQgYW5kIHVwZGF0ZWQgdW50aWwgZXhwbGljaXRseSByZW1vdmVkIGZyb20gcmVuZGVyaW5nIChlLmcuLCB3aGVuIHpvb21pbmcgb3V0IHNpZ25pZmljYW50bHkpJywKICAgICAgJ0VsZW1lbnQgcG9zaXRpb25pbmcgaW4gTGVhZmxldCBpcyBub3cgZG9uZSB1c2luZyBDU1MgR3JpZCDigJQgYW4gaW50ZXJuYWwgY29kZSBpbXByb3ZlbWVudCB3aXRoIG5vIGltcGFjdCBvbiB0aGUgaW50ZXJmYWNlJywKICAgICAgJ0FkZGVkIHRoZSBJSVRDLnNlYXJjaCBBUEkg4oCUIHByb3ZpZGluZyBzZWFyY2ggY2FwYWJpbGl0aWVzIChzZWUgbW9yZTogaHR0cHM6Ly9naXRodWIuY29tL0lJVEMtQ0UvaW5ncmVzcy1pbnRlbC10b3RhbC1jb252ZXJzaW9uL3dpa2kvSUlUQy1wbHVnaW4tbWlncmF0aW9uLWd1aWRlI3NlYXJjaC1hcGkpJywKICAgICAgJ1JlZ2lvbiBTY29yZTogZml4ZWQgZGlzcGxheSBvZiB0aGUgbmV4dCBjb250cm9sIHBlcmlvZCAoQ1ApIHRpbWUgZm9yIHRpbWUgem9uZXMgd2l0aCBhIDMwLW1pbnV0ZSBvZmZzZXQg4oCUIG5vdyBzaG93cyB0aGUgY29ycmVjdCB0aW1lJywKICAgICAgJ0Rpc2FibGVkIHJpZ2h0LXRvLWxlZnQgKFJUTCkgdGV4dCBzdXBwb3J0IGZvciBwb3J0YWwgbmFtZXMnLAogICAgXSwKICB9LAogIHsKICAgIHZlcnNpb246ICcwLjM5LjEnLAogICAgY2hhbmdlczogWydGaXggTWFjaGluYSBjb2xvciBpbiBjaGF0J10sCiAgfSwKICB7CiAgICB2ZXJzaW9uOiAnMC4zOS4wJywKICAgIGNoYW5nZXM6IFsKICAgICAgJ0FkZCBmYXZpY29uLmljbyBmb3IgSW50ZWwgcGFnZScsCiAgICAgICdGaXggYWNjZXNzS2V5IGFuZCBtb3VzZW92ZXIgaW4gVG9vbGJveCBBUEkgKGZpeCBwZXJtYWxpbmspJywKICAgICAgJ1JlZmFjdG9yZWQgY29tbSB0YWIgY29kZSwgYWRkZWQgQ29tbSBBUEkgYW5kIHByb3h5IGJldHdlZW4gY2hhdCBhbmQgQ29tbSBBUEknLAogICAgICAnQXJ0aWZhY3QgY29kZSByZWZhY3RvcmluZycsCiAgICAgICdBZGQgY29uZGl0aW9uYWwgY2hlY2sgZm9yIFN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZSBwb2x5ZmlsbCcsCiAgICBdLAogIH0sCiAgewogICAgdmVyc2lvbjogJzAuMzguMScsCiAgICBjaGFuZ2VzOiBbJ0ZpeCB0b29sYmFyIGZvciBzb21lIGRlcHJlY2F0ZWQgcGx1Z2lucycsICdGaXggZGlhbG9ncyBvbiBpaXRjIGJvb3QnXSwKICB9LAogIHsKICAgIHZlcnNpb246ICcwLjM4LjAnLAogICAgY2hhbmdlczogWwogICAgICAnRnVuY3Rpb24gbWFya2VkIGRlcHJlY2F0ZWQ6IHBvcnRhbEFwR2Fpbk1hdGhzLCBnZXRQb3J0YWxBcEdhaW4sIHBvdGVudGlhbFBvcnRhbExldmVsLCBmaW5kUG9ydGFsTGF0TG5nJywKICAgICAgJ0FkZGVkIEZpbHRlcnMgQVBJIChgSUlUQy5maWx0ZXJzYCknLAogICAgICAnQWRkZWQgVG9vbGJveCBBUEkgKGBJSVRDLnRvb2xib3hgKScsCiAgICAgICdBZGRlZCBHb29nbGUgTWFwcyBSb2FkcytUcmFuc2l0IG1hcCcsCiAgICAgICdBZGRlZCB0aGUgYWJpbGl0eSB0byBzZWFyY2ggdXNpbmcgYSBzY2FubmVyIGxpbmsgb3IgR1VJRCcsCiAgICAgICdBZGRlZCBjb252ZXJzaW9uIG9mIG5ldyBjb21tIG1lc3NhZ2VzIHRvIHRoZSBvbGQgc3R5bGUnLAogICAgXSwKICB9LAogIHsKICAgIHZlcnNpb246ICcwLjM3LjEnLAogICAgY2hhbmdlczogWydOZXcgbWFjaGluYSByYW5nZXMgYWNjb3JkaW5nIHRvIGxhdGVzdCByZXNlYXJjaCAtIGh0dHBzOi8vbGlua3RyLmVlL21hY2hpbmEucmVzZWFyY2gnXSwKICB9LAogIHsKICAgIHZlcnNpb246ICcwLjM3LjAnLAogICAgY2hhbmdlczogWydLZWVwIENPTU0gbWVzc2FnZSB0ZWFtIGluIHBhcnNlZCBkYXRhIGFzIHBsYXllci50ZWFtIG1heSBkaWZmZXIgZnJvbSB0ZWFtJ10sCiAgfSwKICB7CiAgICB2ZXJzaW9uOiAnMC4zNi4xJywKICAgIGNoYW5nZXM6IFsnUmV2ZXJ0IHNvcnRlZCBzaWRlYmFyIGxpbmtzJ10sCiAgfSwKICB7CiAgICB2ZXJzaW9uOiAnMC4zNi4wJywKICAgIGNoYW5nZXM6IFsKICAgICAgJ0FiaWxpdHkgdG8gZGVmaW5lIGFuZCBkaXNwbGF5IGNoYW5nZWxvZycsCiAgICAgICdJbXByb3ZlZCBpbmZvIHBhbmVsIHN0eWxpbmcnLAogICAgICAnVGltZXN0YW1wIGFkZGVkIHRvIGxpbmsgYW5kIGZpZWxkIGRhdGEnLAogICAgICAnQWRkZWQgc2Nhbm5lciBsaW5rIHRvIGluZm8gcGFuZWwnLAogICAgICAnU29ydGVkIHNpZGViYXIgbGlua3MnLAogICAgICAnQWRkZWQgd2luZG93LmZvcm1hdERpc3RhbmNlIGZ1bmN0aW9uIGZvciBnbG9iYWwgdXNlLCB3aGljaCB3YXMgcHJldmlvdXNseSBpbiB0aGUgYm9va21hcmtzIHBsdWdpbicsCiAgICBdLAogIH0sCl07CgovKioKICogUExBWUVSCiAqIEBuYW1lc3BhY2UgcGxheWVyCiAqLwoKLyoqCiAqIHdpbmRvdy5QTEFZRVIKICogUmVwcmVzZW50cyB0aGUgY3VycmVudCBwbGF5ZXIncyBzdGF0dXMgaW4gdGhlIGdhbWUuIFRoaXMgb2JqZWN0IGlzIGRlZmluZWQgYnkgc3RvY2sgYW5kIGlzIHN0YXRpYywKICogbWVhbmluZyBpdCByZXF1aXJlcyBhIHBhZ2UgcmVsb2FkIHRvIHVwZGF0ZS4gVGhlIFBMQVlFUiBvYmplY3Qgc3RvcmVzIHZhcmlvdXMgcGllY2VzIG9mIGluZm9ybWF0aW9uCiAqIGFib3V0IHRoZSBwbGF5ZXIsIHdoaWNoIGFyZSBkZXRhaWxlZCBiZWxvdy4KICoKICogQWRkaXRpb25hbCBwcm9wZXJ0aWVzIChgbmlja01hdGNoZXJgIGFuZCBgbGV2ZWxgKSBhZGRlZCBieSBJSVRDIGluIHtAbGluayBzaWRlYmFyLnNldHVwUGxheWVyU3RhdH0KICoKICogQHByb3BlcnR5IHtzdHJpbmd9IGFwIC0gVGhlIGFtb3VudCBvZiBBUCAoQWNjZXNzIFBvaW50cykgdGhlIHBsYXllciBjdXJyZW50bHkgaGFzLgogKiBAcHJvcGVydHkge251bWJlcn0gYXZhaWxhYmxlX2ludml0ZXMgLSBUaGUgbnVtYmVyIG9mIGludml0YXRpb25zIHRoZSBwbGF5ZXIgY2FuIHNlbmQuCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlbmVyZ3kgLSBUaGUgYW1vdW50IG9mIFhNIChFeG90aWMgTWF0dGVyKSB0aGUgcGxheWVyIGN1cnJlbnRseSBob2xkcy4KICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbl9hcF9mb3JfY3VycmVudF9sZXZlbCAtIFRoZSBBUCByZXF1aXJlZCBmb3IgdGhlIHBsYXllcidzIGN1cnJlbnQgbGV2ZWwsIHVzZWQgZm9yIHRyYWNraW5nIGxldmVsIHByb2dyZXNzLgogKiBAcHJvcGVydHkge251bWJlcn0gbWluX2FwX2Zvcl9uZXh0X2xldmVsIC0gVGhlIEFQIHJlcXVpcmVkIGZvciB0aGUgbmV4dCBsZXZlbCwgdXNlZCBmb3IgdHJhY2tpbmcgbGV2ZWwgcHJvZ3Jlc3MuCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuaWNrbmFtZSAtIFRoZSBhZ2VudCBuYW1lIG9mIHRoZSBwbGF5ZXIuCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0ZWFtIC0gVGhlIGZhY3Rpb24gb2YgdGhlIHBsYXllciwgd2hpY2ggY2FuIGJlIGVpdGhlciAiRU5MSUdIVEVORUQiIG9yICJSRVNJU1RBTkNFIi4KICogQHByb3BlcnR5IHtudW1iZXJ9IHZlcmlmaWVkX2xldmVsIC0gQ3VycmVudCBwbGF5ZXIgbGV2ZWwuCiAqCiAqIEFkZGl0aW9uYWwgcHJvcGVydGllcwogKiBAcHJvcGVydHkge1JlZ0V4cH0gbmlja01hdGNoZXIgLSBBIHJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIG1hdGNoIHRoZSBwbGF5ZXIncyBhZ2VudCBuYW1lIGluIGNoYXQuIEFkZGVkIGJ5IElJVEMuCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsZXZlbCAtIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHByb3BlcnR5LCBlcXVpdmFsZW50IHRvIGB2ZXJpZmllZF9sZXZlbGAuIEFkZGVkIGJ5IElJVEMuCiAqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFBMQVlFUgogKiBAbWVtYmVyb2YgcGxheWVyCiAqLwoKLy8gUkVQTEFDRSBPUklHIFNJVEUgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCmlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpdGVtc2NvcGUnKSAhPT0gbnVsbCkgewogIHRocm93IG5ldyBFcnJvcignSW5ncmVzcyBJbnRlbCBXZWJzaXRlIGlzIGRvd24sIG5vdCBhIHVzZXJzY3JpcHQgaXNzdWUuJyk7Cn0Kd2luZG93LmlpdGNCdWlsZERhdGUgPSAnMjAyNS0wNC0xOS0xMjQ1NTMnOwoKLy8gZGlzYWJsZSB2YW5pbGxhIEpTCndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7fTsKZG9jdW1lbnQuYm9keS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7fTsKCi8vIG9yaWdpbmFsbHkgY29kZSBoZXJlIHBhcnNlZCB0aGUgPFNjcmlwdD4gdGFncyBmcm9tIHRoZSBwYWdlIHRvIGZpbmQgdGhlIG9uZSB0aGF0IGRlZmluZWQgdGhlIFBMQVlFUiBvYmplY3QKLy8gaG93ZXZlciwgdGhhdCdzIGFscmVhZHkgYmVlbiBleGVjdXRlZCwgc28gd2UgY2FuIGp1c3QgYWNjZXNzIFBMQVlFUiAtIG5vIG1lc3NpbmcgYXJvdW5kIG5lZWRlZCEKCmlmICghd2luZG93LlBMQVlFUiB8fCAhUExBWUVSLm5pY2tuYW1lKSB7CiAgLy8gcGFnZSBkb2VzbuKAmXQgaGF2ZSBhIHNjcmlwdCB0YWcgd2l0aCBwbGF5ZXIgaW5mb3JtYXRpb24uCiAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkZXJfZW1haWwnKSkgewogICAgLy8gaG93ZXZlciwgd2UgYXJlIGxvZ2dlZCBpbi4KICAgIC8vIGl0IHVzZWQgdG8gYmUgcmVndWxhcmx5IGNvbW1vbiB0byBnZXQgdGVtcG9yYXJ5ICdhY2NvdW50IG5vdCBlbmFibGVkJyBtZXNzYWdlcyBmcm9tIHRoZSBpbnRlbCBzaXRlLgogICAgLy8gaG93ZXZlciwgdGhpcyBpcyBubyBsb25nZXIgY29tbW9uLiBtb3JlIGNvbW1vbiBpcyB1c2VycyBnZXR0aW5nIGFjY291bnQgc3VzcGVuZGVkL2Jhbm5lZCAtIGFuZCB0aGlzCiAgICAvLyBjdXJyZW50bHkgc2hvd3MgdGhlICdub3QgZW5hYmxlZCcgbWVzc2FnZS4gc28gaXQncyBzYWZlciB0byBub3QgcmVwZWF0ZWRseSByZWxvYWQgaW4gdGhpcyBjYXNlCiAgICAvLyAvL3NldFRpbWVvdXQoJ2xvY2F0aW9uLnJlbG9hZCgpOycsIDMqMTAwMCk7CiAgICB0aHJvdyBuZXcgRXJyb3IoIkxvZ2dlZCBpbiBidXQgcGFnZSBkb2Vzbid0IGhhdmUgcGxheWVyIGRhdGEiKTsKICB9CiAgLy8gRklYTUU6IGhhbmRsZSBuaWEgdGFrZWRvd24gaW4gcHJvZ3Jlc3MKCiAgLy8gYWRkIGxvZ2luIGZvcm0gc3R5bGVzaGVldAogIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXApodG1sLCBib2R5IHtcCiAgICBiYWNrZ3JvdW5kOiAjMGIzMDNlO1wKfVwKXAojZGFzaGJvYXJkX2NvbnRhaW5lciB7XAogICAgZGlzcGxheTogZmxleDtcCiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1wKICAgIG1pbi13aWR0aDogMjQ1cHg7XAogICAgbWluLWhlaWdodDogMzY1cHg7XAp9XApcCi5idXR0b24ge1wKICAgIG1hcmdpbjogNXB4IDEwJTtcCiAgICBwYWRkaW5nOiAwO1wKfVwKXAojZGFzaGJvYXJkX2NvbnRhaW5lciBhIHtcCiAgICBkaXNwbGF5OiBibG9jaztcCiAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XAp9XAonKSk7CiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CgogIHRocm93IG5ldyBFcnJvcigiQ291bGRuJ3QgcmV0cmlldmUgcGxheWVyIGRhdGEuIEFyZSB5b3UgbG9nZ2VkIGluPyIpOwp9CgovLyBwbGF5ZXIgaW5mb3JtYXRpb24gaXMgbm93IGF2YWlsYWJsZSBpbiBhIGhhc2ggbGlrZSB0aGlzOgovLyB3aW5kb3cuUExBWUVSID0geyJhcCI6ICIxMjMiLCAiZW5lcmd5IjogMTIzLCAiYXZhaWxhYmxlX2ludml0ZXMiOiAxMjMsICJuaWNrbmFtZSI6ICJzb21lbmljayIsICJ0ZWFtIjogIkVOTElHSFRFTkVEfHxSRVNJU1RBTkNFIn07CgovLyByZW1vdmUgY29tcGxldGUgcGFnZS4gV2Ugb25seSB3YW50ZWQgdGhlIHVzZXItZGF0YSBhbmQgdGhlIHBhZ2XigJlzCi8vIHNlY3VyaXR5IGNvbnRleHQgc28gd2UgY2FuIGFjY2VzcyB0aGUgQVBJIGVhc2lseS4gU2V0dXAgYXMgbXVjaCBhcwovLyBwb3NzaWJsZSB3aXRob3V0IHJlcXVpcmluZyBzY3JpcHRzLgpkb2N1bWVudC5oZWFkLmlubmVySFRNTCA9CiAgJzx0aXRsZT5JbmdyZXNzIEludGVsIE1hcDwvdGl0bGU+JyArCiAgJzxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL2ltZy9mYXZpY29uLmljbyIgLz4nICsKICAnPHN0eWxlPicgKwogICdcCi8qIVwKICogalF1ZXJ5IFVJIFJlc2l6YWJsZSAxLjEyLjFcCiAqIGh0dHA6Ly9qcXVlcnl1aS5jb21cCiAqXAogKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1wKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlwKICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVwKICovXAoudWktcmVzaXphYmxlIHtcCglwb3NpdGlvbjogcmVsYXRpdmU7XAp9XAoudWktcmVzaXphYmxlLWhhbmRsZSB7XAoJcG9zaXRpb246IGFic29sdXRlO1wKCWZvbnQtc2l6ZTogMC4xcHg7XAoJZGlzcGxheTogYmxvY2s7XAoJLW1zLXRvdWNoLWFjdGlvbjogbm9uZTtcCgl0b3VjaC1hY3Rpb246IG5vbmU7XAp9XAoudWktcmVzaXphYmxlLWRpc2FibGVkIC51aS1yZXNpemFibGUtaGFuZGxlLFwKLnVpLXJlc2l6YWJsZS1hdXRvaGlkZSAudWktcmVzaXphYmxlLWhhbmRsZSB7XAoJZGlzcGxheTogbm9uZTtcCn1cCi51aS1yZXNpemFibGUtbiB7XAoJY3Vyc29yOiBuLXJlc2l6ZTtcCgloZWlnaHQ6IDdweDtcCgl3aWR0aDogMTAwJTtcCgl0b3A6IC01cHg7XAoJbGVmdDogMDtcCn1cCi51aS1yZXNpemFibGUtcyB7XAoJY3Vyc29yOiBzLXJlc2l6ZTtcCgloZWlnaHQ6IDdweDtcCgl3aWR0aDogMTAwJTtcCglib3R0b206IC01cHg7XAoJbGVmdDogMDtcCn1cCi51aS1yZXNpemFibGUtZSB7XAoJY3Vyc29yOiBlLXJlc2l6ZTtcCgl3aWR0aDogN3B4O1wKCXJpZ2h0OiAtNXB4O1wKCXRvcDogMDtcCgloZWlnaHQ6IDEwMCU7XAp9XAoudWktcmVzaXphYmxlLXcge1wKCWN1cnNvcjogdy1yZXNpemU7XAoJd2lkdGg6IDdweDtcCglsZWZ0OiAtNXB4O1wKCXRvcDogMDtcCgloZWlnaHQ6IDEwMCU7XAp9XAoudWktcmVzaXphYmxlLXNlIHtcCgljdXJzb3I6IHNlLXJlc2l6ZTtcCgl3aWR0aDogMTJweDtcCgloZWlnaHQ6IDEycHg7XAoJcmlnaHQ6IDFweDtcCglib3R0b206IDFweDtcCn1cCi51aS1yZXNpemFibGUtc3cge1wKCWN1cnNvcjogc3ctcmVzaXplO1wKCXdpZHRoOiA5cHg7XAoJaGVpZ2h0OiA5cHg7XAoJbGVmdDogLTVweDtcCglib3R0b206IC01cHg7XAp9XAoudWktcmVzaXphYmxlLW53IHtcCgljdXJzb3I6IG53LXJlc2l6ZTtcCgl3aWR0aDogOXB4O1wKCWhlaWdodDogOXB4O1wKCWxlZnQ6IC01cHg7XAoJdG9wOiAtNXB4O1wKfVwKLnVpLXJlc2l6YWJsZS1uZSB7XAoJY3Vyc29yOiBuZS1yZXNpemU7XAoJd2lkdGg6IDlweDtcCgloZWlnaHQ6IDlweDtcCglyaWdodDogLTVweDtcCgl0b3A6IC01cHg7XAp9XAonICsKICAnPC9zdHlsZT4nICsKICAnPHN0eWxlPicgKwogICdcCi8qIHJlcXVpcmVkIHN0eWxlcyAqL1wKXAoubGVhZmxldC1wYW5lLFwKLmxlYWZsZXQtdGlsZSxcCi5sZWFmbGV0LW1hcmtlci1pY29uLFwKLmxlYWZsZXQtbWFya2VyLXNoYWRvdyxcCi5sZWFmbGV0LXRpbGUtY29udGFpbmVyLFwKLmxlYWZsZXQtcGFuZSA+IHN2ZyxcCi5sZWFmbGV0LXBhbmUgPiBjYW52YXMsXAoubGVhZmxldC16b29tLWJveCxcCi5sZWFmbGV0LWltYWdlLWxheWVyLFwKLmxlYWZsZXQtbGF5ZXIge1wKCXBvc2l0aW9uOiBhYnNvbHV0ZTtcCglsZWZ0OiAwO1wKCXRvcDogMDtcCgl9XAoubGVhZmxldC1jb250YWluZXIge1wKCW92ZXJmbG93OiBoaWRkZW47XAoJfVwKLmxlYWZsZXQtdGlsZSxcCi5sZWFmbGV0LW1hcmtlci1pY29uLFwKLmxlYWZsZXQtbWFya2VyLXNoYWRvdyB7XAoJLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcCgkgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1wKCSAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XAoJICAtd2Via2l0LXVzZXItZHJhZzogbm9uZTtcCgl9XAovKiBQcmV2ZW50cyBJRTExIGZyb20gaGlnaGxpZ2h0aW5nIHRpbGVzIGluIGJsdWUgKi9cCi5sZWFmbGV0LXRpbGU6OnNlbGVjdGlvbiB7XAoJYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XAp9XAovKiBTYWZhcmkgcmVuZGVycyBub24tcmV0aW5hIHRpbGUgb24gcmV0aW5hIGJldHRlciB3aXRoIHRoaXMsIGJ1dCBDaHJvbWUgaXMgd29yc2UgKi9cCi5sZWFmbGV0LXNhZmFyaSAubGVhZmxldC10aWxlIHtcCglpbWFnZS1yZW5kZXJpbmc6IC13ZWJraXQtb3B0aW1pemUtY29udHJhc3Q7XAoJfVwKLyogaGFjayB0aGF0IHByZXZlbnRzIGh3IGxheWVycyAic3RyZXRjaGluZyIgd2hlbiBsb2FkaW5nIG5ldyB0aWxlcyAqL1wKLmxlYWZsZXQtc2FmYXJpIC5sZWFmbGV0LXRpbGUtY29udGFpbmVyIHtcCgl3aWR0aDogMTYwMHB4O1wKCWhlaWdodDogMTYwMHB4O1wKCS13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1wKCX1cCi5sZWFmbGV0LW1hcmtlci1pY29uLFwKLmxlYWZsZXQtbWFya2VyLXNoYWRvdyB7XAoJZGlzcGxheTogYmxvY2s7XAoJfVwKLyogLmxlYWZsZXQtY29udGFpbmVyIHN2ZzogcmVzZXQgc3ZnIG1heC13aWR0aCBkZWNsZXJhdGlvbiBzaGlwcGVkIGluIEpvb21sYSEgKGpvb21sYS5vcmcpIDMueCAqL1wKLyogLmxlYWZsZXQtY29udGFpbmVyIGltZzogbWFwIGlzIGJyb2tlbiBpbiBGRiBpZiB5b3UgaGF2ZSBtYXgtd2lkdGg6IDEwMCUgb24gdGlsZXMgKi9cCi5sZWFmbGV0LWNvbnRhaW5lciAubGVhZmxldC1vdmVybGF5LXBhbmUgc3ZnIHtcCgltYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudDtcCgltYXgtaGVpZ2h0OiBub25lICFpbXBvcnRhbnQ7XAoJfVwKLmxlYWZsZXQtY29udGFpbmVyIC5sZWFmbGV0LW1hcmtlci1wYW5lIGltZyxcCi5sZWFmbGV0LWNvbnRhaW5lciAubGVhZmxldC1zaGFkb3ctcGFuZSBpbWcsXAoubGVhZmxldC1jb250YWluZXIgLmxlYWZsZXQtdGlsZS1wYW5lIGltZyxcCi5sZWFmbGV0LWNvbnRhaW5lciBpbWcubGVhZmxldC1pbWFnZS1sYXllcixcCi5sZWFmbGV0LWNvbnRhaW5lciAubGVhZmxldC10aWxlIHtcCgltYXgtd2lkdGg6IG5vbmUgIWltcG9ydGFudDtcCgltYXgtaGVpZ2h0OiBub25lICFpbXBvcnRhbnQ7XAoJd2lkdGg6IGF1dG87XAoJcGFkZGluZzogMDtcCgl9XApcCi5sZWFmbGV0LWNvbnRhaW5lci5sZWFmbGV0LXRvdWNoLXpvb20ge1wKCS1tcy10b3VjaC1hY3Rpb246IHBhbi14IHBhbi15O1wKCXRvdWNoLWFjdGlvbjogcGFuLXggcGFuLXk7XAoJfVwKLmxlYWZsZXQtY29udGFpbmVyLmxlYWZsZXQtdG91Y2gtZHJhZyB7XAoJLW1zLXRvdWNoLWFjdGlvbjogcGluY2gtem9vbTtcCgkvKiBGYWxsYmFjayBmb3IgRkYgd2hpY2ggZG9lc25cJ3Qgc3VwcG9ydCBwaW5jaC16b29tICovXAoJdG91Y2gtYWN0aW9uOiBub25lO1wKCXRvdWNoLWFjdGlvbjogcGluY2gtem9vbTtcCn1cCi5sZWFmbGV0LWNvbnRhaW5lci5sZWFmbGV0LXRvdWNoLWRyYWcubGVhZmxldC10b3VjaC16b29tIHtcCgktbXMtdG91Y2gtYWN0aW9uOiBub25lO1wKCXRvdWNoLWFjdGlvbjogbm9uZTtcCn1cCi5sZWFmbGV0LWNvbnRhaW5lciB7XAoJLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcCn1cCi5sZWFmbGV0LWNvbnRhaW5lciBhIHtcCgktd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoNTEsIDE4MSwgMjI5LCAwLjQpO1wKfVwKLmxlYWZsZXQtdGlsZSB7XAoJZmlsdGVyOiBpbmhlcml0O1wKCXZpc2liaWxpdHk6IGhpZGRlbjtcCgl9XAoubGVhZmxldC10aWxlLWxvYWRlZCB7XAoJdmlzaWJpbGl0eTogaW5oZXJpdDtcCgl9XAoubGVhZmxldC16b29tLWJveCB7XAoJd2lkdGg6IDA7XAoJaGVpZ2h0OiAwO1wKCS1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcCgkgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XAoJei1pbmRleDogODAwO1wKCX1cCi8qIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg4ODMxOSAqL1wKLmxlYWZsZXQtb3ZlcmxheS1wYW5lIHN2ZyB7XAoJLW1vei11c2VyLXNlbGVjdDogbm9uZTtcCgl9XApcCi5sZWFmbGV0LXBhbmUgICAgICAgICB7IHotaW5kZXg6IDQwMDsgfVwKXAoubGVhZmxldC10aWxlLXBhbmUgICAgeyB6LWluZGV4OiAyMDA7IH1cCi5sZWFmbGV0LW92ZXJsYXktcGFuZSB7IHotaW5kZXg6IDQwMDsgfVwKLmxlYWZsZXQtc2hhZG93LXBhbmUgIHsgei1pbmRleDogNTAwOyB9XAoubGVhZmxldC1tYXJrZXItcGFuZSAgeyB6LWluZGV4OiA2MDA7IH1cCi5sZWFmbGV0LXRvb2x0aXAtcGFuZSAgIHsgei1pbmRleDogNjUwOyB9XAoubGVhZmxldC1wb3B1cC1wYW5lICAgeyB6LWluZGV4OiA3MDA7IH1cClwKLmxlYWZsZXQtbWFwLXBhbmUgY2FudmFzIHsgei1pbmRleDogMTAwOyB9XAoubGVhZmxldC1tYXAtcGFuZSBzdmcgICAgeyB6LWluZGV4OiAyMDA7IH1cClwKLmxlYWZsZXQtdm1sLXNoYXBlIHtcCgl3aWR0aDogMXB4O1wKCWhlaWdodDogMXB4O1wKCX1cCi5sdm1sIHtcCgliZWhhdmlvcjogdXJsKCNkZWZhdWx0I1ZNTCk7XAoJZGlzcGxheTogaW5saW5lLWJsb2NrO1wKCXBvc2l0aW9uOiBhYnNvbHV0ZTtcCgl9XApcClwKLyogY29udHJvbCBwb3NpdGlvbmluZyAqL1wKXAoubGVhZmxldC1jb250cm9sIHtcCglwb3NpdGlvbjogcmVsYXRpdmU7XAoJei1pbmRleDogODAwO1wKCXBvaW50ZXItZXZlbnRzOiB2aXNpYmxlUGFpbnRlZDsgLyogSUUgOS0xMCBkb2VzblwndCBoYXZlIGF1dG8gKi9cCglwb2ludGVyLWV2ZW50czogYXV0bztcCgl9XAoubGVhZmxldC10b3AsXAoubGVhZmxldC1ib3R0b20ge1wKCXBvc2l0aW9uOiBhYnNvbHV0ZTtcCgl6LWluZGV4OiAxMDAwO1wKCXBvaW50ZXItZXZlbnRzOiBub25lO1wKCX1cCi5sZWFmbGV0LXRvcCB7XAoJdG9wOiAwO1wKCX1cCi5sZWFmbGV0LXJpZ2h0IHtcCglyaWdodDogMDtcCgl9XAoubGVhZmxldC1ib3R0b20ge1wKCWJvdHRvbTogMDtcCgl9XAoubGVhZmxldC1sZWZ0IHtcCglsZWZ0OiAwO1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wge1wKCWZsb2F0OiBsZWZ0O1wKCWNsZWFyOiBib3RoO1wKCX1cCi5sZWFmbGV0LXJpZ2h0IC5sZWFmbGV0LWNvbnRyb2wge1wKCWZsb2F0OiByaWdodDtcCgl9XAoubGVhZmxldC10b3AgLmxlYWZsZXQtY29udHJvbCB7XAoJbWFyZ2luLXRvcDogMTBweDtcCgl9XAoubGVhZmxldC1ib3R0b20gLmxlYWZsZXQtY29udHJvbCB7XAoJbWFyZ2luLWJvdHRvbTogMTBweDtcCgl9XAoubGVhZmxldC1sZWZ0IC5sZWFmbGV0LWNvbnRyb2wge1wKCW1hcmdpbi1sZWZ0OiAxMHB4O1wKCX1cCi5sZWFmbGV0LXJpZ2h0IC5sZWFmbGV0LWNvbnRyb2wge1wKCW1hcmdpbi1yaWdodDogMTBweDtcCgl9XApcClwKLyogem9vbSBhbmQgZmFkZSBhbmltYXRpb25zICovXApcCi5sZWFmbGV0LWZhZGUtYW5pbSAubGVhZmxldC1wb3B1cCB7XAoJb3BhY2l0eTogMDtcCgktd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBsaW5lYXI7XAoJICAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgbGluZWFyO1wKCSAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGxpbmVhcjtcCgl9XAoubGVhZmxldC1mYWRlLWFuaW0gLmxlYWZsZXQtbWFwLXBhbmUgLmxlYWZsZXQtcG9wdXAge1wKCW9wYWNpdHk6IDE7XAoJfVwKLmxlYWZsZXQtem9vbS1hbmltYXRlZCB7XAoJLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XAoJICAgIC1tcy10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XAoJICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XAoJfVwKc3ZnLmxlYWZsZXQtem9vbS1hbmltYXRlZCB7XAoJd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcCn1cClwKLmxlYWZsZXQtem9vbS1hbmltIC5sZWFmbGV0LXpvb20tYW5pbWF0ZWQge1wKCS13ZWJraXQtdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC4yNXMgY3ViaWMtYmV6aWVyKDAsMCwwLjI1LDEpO1wKCSAgIC1tb3otdHJhbnNpdGlvbjogICAgLW1vei10cmFuc2Zvcm0gMC4yNXMgY3ViaWMtYmV6aWVyKDAsMCwwLjI1LDEpO1wKCSAgICAgICAgdHJhbnNpdGlvbjogICAgICAgICB0cmFuc2Zvcm0gMC4yNXMgY3ViaWMtYmV6aWVyKDAsMCwwLjI1LDEpO1wKCX1cCi5sZWFmbGV0LXpvb20tYW5pbSAubGVhZmxldC10aWxlLFwKLmxlYWZsZXQtcGFuLWFuaW0gLmxlYWZsZXQtdGlsZSB7XAoJLXdlYmtpdC10cmFuc2l0aW9uOiBub25lO1wKCSAgIC1tb3otdHJhbnNpdGlvbjogbm9uZTtcCgkgICAgICAgIHRyYW5zaXRpb246IG5vbmU7XAoJfVwKXAoubGVhZmxldC16b29tLWFuaW0gLmxlYWZsZXQtem9vbS1oaWRlIHtcCgl2aXNpYmlsaXR5OiBoaWRkZW47XAoJfVwKXApcCi8qIGN1cnNvcnMgKi9cClwKLmxlYWZsZXQtaW50ZXJhY3RpdmUge1wKCWN1cnNvcjogcG9pbnRlcjtcCgl9XAoubGVhZmxldC1ncmFiIHtcCgljdXJzb3I6IC13ZWJraXQtZ3JhYjtcCgljdXJzb3I6ICAgIC1tb3otZ3JhYjtcCgljdXJzb3I6ICAgICAgICAgZ3JhYjtcCgl9XAoubGVhZmxldC1jcm9zc2hhaXIsXAoubGVhZmxldC1jcm9zc2hhaXIgLmxlYWZsZXQtaW50ZXJhY3RpdmUge1wKCWN1cnNvcjogY3Jvc3NoYWlyO1wKCX1cCi5sZWFmbGV0LXBvcHVwLXBhbmUsXAoubGVhZmxldC1jb250cm9sIHtcCgljdXJzb3I6IGF1dG87XAoJfVwKLmxlYWZsZXQtZHJhZ2dpbmcgLmxlYWZsZXQtZ3JhYixcCi5sZWFmbGV0LWRyYWdnaW5nIC5sZWFmbGV0LWdyYWIgLmxlYWZsZXQtaW50ZXJhY3RpdmUsXAoubGVhZmxldC1kcmFnZ2luZyAubGVhZmxldC1tYXJrZXItZHJhZ2dhYmxlIHtcCgljdXJzb3I6IG1vdmU7XAoJY3Vyc29yOiAtd2Via2l0LWdyYWJiaW5nO1wKCWN1cnNvcjogICAgLW1vei1ncmFiYmluZztcCgljdXJzb3I6ICAgICAgICAgZ3JhYmJpbmc7XAoJfVwKXAovKiBtYXJrZXIgJiBvdmVybGF5cyBpbnRlcmFjdGl2aXR5ICovXAoubGVhZmxldC1tYXJrZXItaWNvbixcCi5sZWFmbGV0LW1hcmtlci1zaGFkb3csXAoubGVhZmxldC1pbWFnZS1sYXllcixcCi5sZWFmbGV0LXBhbmUgPiBzdmcgcGF0aCxcCi5sZWFmbGV0LXRpbGUtY29udGFpbmVyIHtcCglwb2ludGVyLWV2ZW50czogbm9uZTtcCgl9XApcCi5sZWFmbGV0LW1hcmtlci1pY29uLmxlYWZsZXQtaW50ZXJhY3RpdmUsXAoubGVhZmxldC1pbWFnZS1sYXllci5sZWFmbGV0LWludGVyYWN0aXZlLFwKLmxlYWZsZXQtcGFuZSA+IHN2ZyBwYXRoLmxlYWZsZXQtaW50ZXJhY3RpdmUsXApzdmcubGVhZmxldC1pbWFnZS1sYXllci5sZWFmbGV0LWludGVyYWN0aXZlIHBhdGgge1wKCXBvaW50ZXItZXZlbnRzOiB2aXNpYmxlUGFpbnRlZDsgLyogSUUgOS0xMCBkb2VzblwndCBoYXZlIGF1dG8gKi9cCglwb2ludGVyLWV2ZW50czogYXV0bztcCgl9XApcCi8qIHZpc3VhbCB0d2Vha3MgKi9cClwKLmxlYWZsZXQtY29udGFpbmVyIHtcCgliYWNrZ3JvdW5kOiAjZGRkO1wKCW91dGxpbmUtb2Zmc2V0OiAxcHg7XAoJfVwKLmxlYWZsZXQtY29udGFpbmVyIGEge1wKCWNvbG9yOiAjMDA3OEE4O1wKCX1cCi5sZWFmbGV0LXpvb20tYm94IHtcCglib3JkZXI6IDJweCBkb3R0ZWQgIzM4ZjtcCgliYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LDAuNSk7XAoJfVwKXApcCi8qIGdlbmVyYWwgdHlwb2dyYXBoeSAqL1wKLmxlYWZsZXQtY29udGFpbmVyIHtcCglmb250LWZhbWlseTogIkhlbHZldGljYSBOZXVlIiwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcCglmb250LXNpemU6IDEycHg7XAoJZm9udC1zaXplOiAwLjc1cmVtO1wKCWxpbmUtaGVpZ2h0OiAxLjU7XAoJfVwKXApcCi8qIGdlbmVyYWwgdG9vbGJhciBzdHlsZXMgKi9cClwKLmxlYWZsZXQtYmFyIHtcCglib3gtc2hhZG93OiAwIDFweCA1cHggcmdiYSgwLDAsMCwwLjY1KTtcCglib3JkZXItcmFkaXVzOiA0cHg7XAoJfVwKLmxlYWZsZXQtYmFyIGEge1wKCWJhY2tncm91bmQtY29sb3I6ICNmZmY7XAoJYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2M7XAoJd2lkdGg6IDI2cHg7XAoJaGVpZ2h0OiAyNnB4O1wKCWxpbmUtaGVpZ2h0OiAyNnB4O1wKCWRpc3BsYXk6IGJsb2NrO1wKCXRleHQtYWxpZ246IGNlbnRlcjtcCgl0ZXh0LWRlY29yYXRpb246IG5vbmU7XAoJY29sb3I6IGJsYWNrO1wKCX1cCi5sZWFmbGV0LWJhciBhLFwKLmxlYWZsZXQtY29udHJvbC1sYXllcnMtdG9nZ2xlIHtcCgliYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MCUgNTAlO1wKCWJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XAoJZGlzcGxheTogYmxvY2s7XAoJfVwKLmxlYWZsZXQtYmFyIGE6aG92ZXIsXAoubGVhZmxldC1iYXIgYTpmb2N1cyB7XAoJYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcCgl9XAoubGVhZmxldC1iYXIgYTpmaXJzdC1jaGlsZCB7XAoJYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNHB4O1wKCWJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XAoJfVwKLmxlYWZsZXQtYmFyIGE6bGFzdC1jaGlsZCB7XAoJYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNHB4O1wKCWJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7XAoJYm9yZGVyLWJvdHRvbTogbm9uZTtcCgl9XAoubGVhZmxldC1iYXIgYS5sZWFmbGV0LWRpc2FibGVkIHtcCgljdXJzb3I6IGRlZmF1bHQ7XAoJYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcCgljb2xvcjogI2JiYjtcCgl9XApcCi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWJhciBhIHtcCgl3aWR0aDogMzBweDtcCgloZWlnaHQ6IDMwcHg7XAoJbGluZS1oZWlnaHQ6IDMwcHg7XAoJfVwKLmxlYWZsZXQtdG91Y2ggLmxlYWZsZXQtYmFyIGE6Zmlyc3QtY2hpbGQge1wKCWJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDJweDtcCglib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMnB4O1wKCX1cCi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWJhciBhOmxhc3QtY2hpbGQge1wKCWJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDJweDtcCglib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMnB4O1wKCX1cClwKLyogem9vbSBjb250cm9sICovXApcCi5sZWFmbGV0LWNvbnRyb2wtem9vbS1pbixcCi5sZWFmbGV0LWNvbnRyb2wtem9vbS1vdXQge1wKCWZvbnQ6IGJvbGQgMThweCBcJ0x1Y2lkYSBDb25zb2xlXCcsIE1vbmFjbywgbW9ub3NwYWNlO1wKCXRleHQtaW5kZW50OiAxcHg7XAoJfVwKXAoubGVhZmxldC10b3VjaCAubGVhZmxldC1jb250cm9sLXpvb20taW4sIC5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWNvbnRyb2wtem9vbS1vdXQgIHtcCglmb250LXNpemU6IDIycHg7XAoJfVwKXApcCi8qIGxheWVycyBjb250cm9sICovXApcCi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzIHtcCglib3gtc2hhZG93OiAwIDFweCA1cHggcmdiYSgwLDAsMCwwLjQpO1wKCWJhY2tncm91bmQ6ICNmZmY7XAoJYm9yZGVyLXJhZGl1czogNXB4O1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXRvZ2dsZSB7XAoJYmFja2dyb3VuZC1pbWFnZTogdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQm9BQUFBYUNBUUFBQUFEUTRSRkFBQUNmMGxFUVZSNEFZMVVNM2drQVJUZVBkdmRvVHhYS2MrcVRsM2FVNVU2YjJLYmt6M0d0cTNadzZ6aUxHTlB6cll4Nzk0NlRyNi9lZS9YZUNRNEQzeWtQdEw1dEhubzRuMGQvaDMreGZ1V0hHTFg4MWNuN3IwaVROempyN0xybHhDcVB0a2JUUUVIZXFPclR5NFl5dDNWQ2kvSU9CMHY3clZDN3E0NVEzR3I1SzZqdCszR2w1bkNvREQ0TXRPK2o5Nld1OGF0bWhHcWNOR0hPYnVmOE9NL3gzQU14MzgrNFoyc1BxekN4UkZLMmFGMmU1Sm9sNTZYVEx5Z2dBTVRMNTZYT01vUzFXNHBPeWpVY0dHUWRaeFU2cVJoN0I5WnArUGZwT0ZscXQwenlEWmNrUGkxdHRtSXAwM2pYOGd5SjhhL1BHMnl1dHBTL1ZvbDdwZVpJYlpjS0JBRUVoZUVJQWdGYkRrejVINlpya20yaFZXR2lYS2lGNFljdzBSV0tkdEMxNlE3cWUzWDRpT014cnVvbnplZ0p6V2FYRnJVOXV0T1NzTFVtcmMwWWplV1lqQ1c0UERNQURFbHBKU1NRMHZRdkExVG02L0psS25xRnMxRUd5WmlGQ3FuUlpURUpKSmlLUll6Vll6SmNrMlJtNlA0aUgrY21TWTBZemltWWE4bDBFdFRPREZXaGNNSU1WcWRzSTJ1aVR2S21UaXNJREhKM29kNUdJTFZoQkNhckNmVlJtbzR1VGpraHJoemtpQlY3U3NhcVMrVHpyek0xcXBHR1VGdDI4cEl5U1FIUjZoN0Y2S1N3R1dtOTdheStaK1pxTWNFakVXZWJFN3d4Q1NRd3BraEpxb1pBNWl2Q2RaRGpKZXB1SjlJUWpHR1VtdVhKZEJGVXlneFZxVnN4RnNMTWJEZThaYkRZVkNHS3hzK1cwODBtYXgxaEZDYXJDZlYrQzFLQVR3Y252RTlnUlJ1TVAycHJkYldHb3dtMUtCMXkrendNTUVOa003NTVjSjJ5UER0cWhUSTZFRDFNLzgyeUlEdEMvNGo0QmlqamVPYmZscE85STlNd1hUQ3NTWDhqV0FGZUhyMDVXb0xUSjVHOElRVlMvN3Z3UjZvaGlyWU03ZjZIellwb2dmUzNSMk9BQUFBQUVsRlRrU3VRbUNDKTtcCgl3aWR0aDogMzZweDtcCgloZWlnaHQ6IDM2cHg7XAoJfVwKLmxlYWZsZXQtcmV0aW5hIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXRvZ2dsZSB7XAoJYmFja2dyb3VuZC1pbWFnZTogdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRFFBQUFBMENBUUFBQUJ2Y2ROZ0FBQUVza2xFUVZSNEFXTDRUeWRJaHBaSzFrcFdPbGcwdzNaWFA2RDJzb0J0RzQyamVJNlptUVRIekF4aVRiU0pzWUxqTzlIaFArV09tY3VoY2lWbm1IVlFjSm5wN0RGdlNjb3dab3JhZC8rVi9mVnpNZE1UMmc5Q3Y5Z3VYR3YvN3BZT3JYaDJVK1JSUjNkU2Q5SlJ4NmJJRmMvZWtxSEkyOUpDNnBKNVpFaDF5V2toa2JjRmVTanhneDNMMm0xY2IxQzdiY2V5eEErQ05qVC9JZmZmKy9rRGsydS93LzMzL0llQ01PU2FXWjRnbG9zcVQzRE5uTlpRN0NzNTgvM0NlNUhMNzhpWkgvdktWSWFZbHF6ZmRMdThWaTdkbnZVYkV6YTVJZHQzNnRxdVpGbGRsNk41Wi9QT0xvZjBYTEs2MW1aQ21KU1dqVkY5dEVqVWx1dTc0SVVYdmd0dHVWSUhFN1l4U2thWWhKWmFtN3lpTTlQdjgySllmbDlucHR4WmF4TUpFNFlTUHR5K3ZGMCtZMnVwOWQzd3dpamZqWmJhYnFtLzNiWjllY0tIc2lHbVJmbG5uMU1XNHBqSGY5b0x1ZnluMnozeTFENm44ZzhUWmh4eXppcExOUG5BVXBzT2l1V2ltZzUycHNyVFpZbk9XWU5EVE11V0JXYTB0SmI0cmdxMVV2bXV0cGFZRWJabHdVM0NMSm0vYXlZakhXNS9oN3hXTG45SGgxdmVwRGt5ZjdkRTdNdFQ1TFI0ZTd5WXBIcmtoT1VwRWZzc0JMcTJwUGhBcW9TV0tVa2s3RURxa21LNlJyQ0V6cURqaE5EV05FK1hTTXZrSlJEV2xaVG1DVzBsMFBIUUdSWlk1dDFMODNrVDBZM2wyU0l0azVKQVdIbDJkQ09CbStmUHUzZm81LzN2NjFSTUNPOUp4MkVFWVloYjBybU5RTVgvdm03Z3FPRUpMY1hUR3czQ0F1Uk5leWFQV3dqUjhQUnFLUTFQREEvZHB2K29uOVNob3g1MldGbngwS1k4b25IYXlySnptODdpNWg5eEd3L3Rma2V2MGpHc1FpenFlelVLamsxMmhCTUtKNGtiQ3FHUFZOWHVkeXlyU2hvdkd3NUNneHNSSUN4RjZhUm1TamxCbkhSemc3R3g4ZktxRXViSTJyYWhRWWRSMVlnRElSUU83SnZReUQ1MmhvSVF4MG14YTBPRHRXMklvem4xbGUyaUlSZHp3V2V3ZWR5Wnpld2lkdWVPR3Fsc24xTXZjblFwdVZ3TEdHMy9JUjFoSUt4Q2plbElEWjhsZHFXejI1aldBc25sZEVuSzBaeHJvMTlUR1ZiMmZmSVpFc0lPODlFSUVEdktNUHJ6bUJPUWNLUStycm95ZTZOZ1JSeHFSNFU4RUFrejBDTDZ1U0dPbTZLUUNkV2p2alJpU1AxQlBhbENSUzVpUVlpRUl2eHVCTUpFV2d6U29IQURjVk11TjdJdXFxVGV5VVBxMjJxRmltRnR4RHlCQkpFd055dDZUTTg4YmxGSGFvLzZ0V1dodXVPTTRTQUs0RUk0UW1GSEErU0V5V2xwNEVRb0oxM2NZR3pNdTd5c3pFSUJPbTJyVm1IVU5xd0FJUWFiSVNOTVJzdG1kaE5XY0ZMc1NtKzB0akpIMU1kUnhPNU54MFdETWhDdGdENk9LZ1plbGpKcUpLYzlwbzhqdXNrUjlYTjBZMWxaM21XakxSOUpDTzFqUkRNZDBmcFlDMlZudmpCU0VGZzd3QkVOYzBSOUhGbGIweHZGMStUQkVwRjY4ZCtESFI2SU9XVnYyQkVDdHhvNDZoT0ZVQmQvQVBVNTdXSW9Fd0poSWkyQ2RweVpYMG05M0JaaWNrdE1qMUFTOWRDbHRlVUZBVU5VSUV5Z1JaQ3RpazV6U3hJOU11YlRCSDFHT2lIc2lMSjNPQ29TWmtJTGE5UHhpTjBFYnZoc0FvOHRkQWY5U2VlcGQzNmxHV0htdE5BTlR2NUpkMHo0UVl5ZW8vVUVKcXhLUnBnNUxaeDZidExQc09hRW1kTXl4WWRsYzhMTWFKbmlrRGxoY2xxbVBpUW5URXBMVUlaRXdrUmFnallrRWliUUVyd2hrVEFLQ0xRRWJVZ2t6SlFXYy8wUHN0SEhjZkVkUStVQUFBQUFTVVZPUks1Q1lJST0pO1wKCWJhY2tncm91bmQtc2l6ZTogMjZweCAyNnB4O1wKCX1cCi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXRvZ2dsZSB7XAoJd2lkdGg6IDQ0cHg7XAoJaGVpZ2h0OiA0NHB4O1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzIC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLWxpc3QsXAoubGVhZmxldC1jb250cm9sLWxheWVycy1leHBhbmRlZCAubGVhZmxldC1jb250cm9sLWxheWVycy10b2dnbGUge1wKCWRpc3BsYXk6IG5vbmU7XAoJfVwKLmxlYWZsZXQtY29udHJvbC1sYXllcnMtZXhwYW5kZWQgLmxlYWZsZXQtY29udHJvbC1sYXllcnMtbGlzdCB7XAoJZGlzcGxheTogYmxvY2s7XAoJcG9zaXRpb246IHJlbGF0aXZlO1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLWV4cGFuZGVkIHtcCglwYWRkaW5nOiA2cHggMTBweCA2cHggNnB4O1wKCWNvbG9yOiAjMzMzO1wKCWJhY2tncm91bmQ6ICNmZmY7XAoJfVwKLmxlYWZsZXQtY29udHJvbC1sYXllcnMtc2Nyb2xsYmFyIHtcCglvdmVyZmxvdy15OiBzY3JvbGw7XAoJb3ZlcmZsb3cteDogaGlkZGVuO1wKCXBhZGRpbmctcmlnaHQ6IDVweDtcCgl9XAoubGVhZmxldC1jb250cm9sLWxheWVycy1zZWxlY3RvciB7XAoJbWFyZ2luLXRvcDogMnB4O1wKCXBvc2l0aW9uOiByZWxhdGl2ZTtcCgl0b3A6IDFweDtcCgl9XAoubGVhZmxldC1jb250cm9sLWxheWVycyBsYWJlbCB7XAoJZGlzcGxheTogYmxvY2s7XAoJZm9udC1zaXplOiAxM3B4O1wKCWZvbnQtc2l6ZTogMS4wODMzM2VtO1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXNlcGFyYXRvciB7XAoJaGVpZ2h0OiAwO1wKCWJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1wKCW1hcmdpbjogNXB4IC0xMHB4IDVweCAtNnB4O1wKCX1cClwKLyogRGVmYXVsdCBpY29uIFVSTHMgKi9cCi5sZWFmbGV0LWRlZmF1bHQtaWNvbi1wYXRoIHsgLyogdXNlZCBvbmx5IGluIHBhdGgtZ3Vlc3NpbmcgaGV1cmlzdGljLCBzZWUgTC5JY29uLkRlZmF1bHQgKi9cCgliYWNrZ3JvdW5kLWltYWdlOiB1cmwoZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCa0FBQUFwQ0FZQUFBREFrNExPQUFBRmdVbEVRVlI0QWExWEE1QmpXUlROMm9XMTdkM1lhWnRyMjk2MkhVemJETnBqc3pXMjRtUnQyOHA0N3Y3enEvYlhadHJwL2xXblhyMzM3ajNuUENlODVOY3lwZ1NGZHVnQ3BXNVlvREFNUmFJTXFSaTZhS3E1RTNZcURRTzNxQXdqVldyRDhOY3EvUkJweWtkOG9aVWIva2FKdXRvdzhyMWFQOUlJMFdtTEtMSXNKeXYxdy9rcXc5Q2gyTVlkQisrMTJPbnhlZS9RTXd2ZjQvRGsvTGZwL2k0bnhUWHRPb1E0cFc1QWo3d3BpY2kxQTllcmRBTjJPSDY0eDhPU1A5ajNGdDNiN2FXa1RnL0ZtOTFzaVRyYTBmOW9uNXNRcjlJTmVqSDZDVVVVcGF2akZOcTFCK09hZGh4bW5mYThSZkVtTjhWTkFzUWhQcUY1NXhIa016ejNqU21DaFdVNmY3L1haS05IKzkraEJMT0hZb3p1S1FQeHlNUFVLa3JYL0swdVduZkZhSkdTMVFQUnRac09QdHIzTnNXMHV5aDZOTkNPa1UzWXorYlhiVDNJOEczeEU1RVhMWHRDWGJicXdDTzl6UFFZUFJUWjV2SURYRDdVK3c3ckZERW9VVWY3aWJISVI0eTZiTFZQWHJ6OEpWWkVxbDEzdHJ4d3VlL3VEaXZkM2ZrV1JiUzYvSUEyYklENHVrMFVwRjFOOHFMbGJCbFhzNEVlN0hMVGZWMWo1NEFQdk9EblNmT1dCcXRLVnZqZ0xLekY1WWRFazVld1JrR2xLMGkzM0VvZmZmYzdIVDU2akQ3LzZVK3FIM0N4N1NCTE5udEg1WUlQdk9EbnlmSVhaWVJWRFBxZ0h0THM1QUJIRDNZekx1ZXNwYjd0NzlGWTM0RGpNd3JWcmNUdXdsVDU1WU1Qdk9CblJySjRWWFRkTm5ZdWc1dWNITEJqRXB0MzA3MDFBM1RzK0hFYTczdTZkVDNGTld3ZmxZODZlTUhQaytZdStpNnB6VXBSclc3U05EZzVKSFI0S2FwbU01V3YyRThUZmNiMUhvcXFITUhVK3VXREQ3emc1NG16NS8yQlNuaXppOVQxRGc0UVFYTFRvR05Da2I2dGIxTlUrUUFsR3IxKytlQURyemhuL3U4UTJZWmhRVmxaNStDQU90cWZiaG1hVUNTMWV6TkZWbTJpbURiUG1Qbmc1d216K2d3aCtvSERjZTBlVXRRNk9HREl5UjB1VWhVc29PM3ZmRG1tZ09lekgwbVpONTl4N01CaSsrV0RMMWcvZUVpVTNhdmxpZE82NzFia0xmd2J3NVhWMlA4UHpvMHlkeTR0Mi8wZXUzM3hZU09NT0Q4aFRmNENyQnRHTVNvWGZQTGNoWCtKMHJ1U2VQdzNMWmVLMGp1UEpiWXpyaGtIMGlvN0IzazE2NGhpR3Zhd2hPS01Ma3JRTHlWcFpnOHJIRlc3RTJ1SE9MODg4SUJQbE5aMUZQenN0U0pNNjk0ZldyNlJ3cHZjSks2MCswSENJTFRCelpMRk5kdEF6SmFvaHplNjBUOHFCenloNVp1T2c1ZTd1d1FwcG9mRW1mMisrRFl2bXlTcUdCdUthaWNGMWJsUWpodUhkdkNJTXZwOHdoVFRmWnpJN1JsZHB3dFN6TCtGMSt3a2RaMlRCT1cyZ0lGODhQQlR6RC9ncGVSRUFNRWJ4bkpjYUpITkhycHpqaTBnUUNTNmhka0VlWXQ5REYvMnFQY0VDOFJNMjhId21yM3NkTnlodDAwYnlBdXQyazNndWZXTnRndE9FT0ZHVXdjWFdORGJkTmJwZ0JHeEV2S2tPUXN4aXZKeDMzaW93MFZ3NVM2U1ZUcnBWcTExeXNBMlJwN2dUZlBma3RjNnpodFhCQkMrYWRSTHNoZjZzRzJSZkhQWjVFQWM0c1ZaODN5Q04wMEZrLzRrZ2d1NDBaVHZJRW01ZzI0cXRVNEtqQnJ4L0JUVEg4aWZWQVNBRzdnS3JuV3hKRGNVN3g4WDZFY2N6aG0zbzZZaWN2c0xYV2ZoM0NoMVcwazh4MG5YRiswZkZ4Z3Q0cGh6OFF2eXBpd0NDRktNcVhDbnFYRXhqcTEwYmVIK1VVQTcrbkc2bWRHL1B1MGYzTGdGY0dybDJzMGtOTmpwbW9KOW80QjI5Q01POGRNVDRRNW94OHVpdEY2ZnFzckpPcjhxbndOYlJ6djZoU25HNXdQKzY0QzdoOWxwMzBoS050S2RXanRka2J1UEExOW5KN1R6M3pSL2liZ0FSYmhiNEFsaGF2Y0JlYm1USGNGbDJmdllFblcwb3g5eE14S0JTOGJ0SitLaUVicTl6QTRSdGhRWERoUGEwVDlURWU2OWdXdXB3YzZ1QlVwaHF1WGdmKy9Gcklqd2VIUVM0L3BkdU1lNUVSVU1IVWQ5eHY4WlI5OEN4a1M0RjJuM0VVclVaMTBFWU53N0JXbTl4MUdpUHNzaTNHZ2lHUkRLV1JZWmZYbE9OK2RmTmJNK0dnSXdZZHdBQUFBQVNVVk9SSzVDWUlJPSk7XAoJfVwKXApcCi8qIGF0dHJpYnV0aW9uIGFuZCBzY2FsZSBjb250cm9scyAqL1wKXAoubGVhZmxldC1jb250YWluZXIgLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiB7XAoJYmFja2dyb3VuZDogI2ZmZjtcCgliYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XAoJbWFyZ2luOiAwO1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wtYXR0cmlidXRpb24sXAoubGVhZmxldC1jb250cm9sLXNjYWxlLWxpbmUge1wKCXBhZGRpbmc6IDAgNXB4O1wKCWNvbG9yOiAjMzMzO1wKCWxpbmUtaGVpZ2h0OiAxLjQ7XAoJfVwKLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiBhIHtcCgl0ZXh0LWRlY29yYXRpb246IG5vbmU7XAoJfVwKLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiBhOmhvdmVyLFwKLmxlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbiBhOmZvY3VzIHtcCgl0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcCgl9XAoubGVhZmxldC1jb250cm9sLWF0dHJpYnV0aW9uIHN2ZyB7XAoJZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7XAoJfVwKLmxlYWZsZXQtbGVmdCAubGVhZmxldC1jb250cm9sLXNjYWxlIHtcCgltYXJnaW4tbGVmdDogNXB4O1wKCX1cCi5sZWFmbGV0LWJvdHRvbSAubGVhZmxldC1jb250cm9sLXNjYWxlIHtcCgltYXJnaW4tYm90dG9tOiA1cHg7XAoJfVwKLmxlYWZsZXQtY29udHJvbC1zY2FsZS1saW5lIHtcCglib3JkZXI6IDJweCBzb2xpZCAjNzc3O1wKCWJvcmRlci10b3A6IG5vbmU7XAoJbGluZS1oZWlnaHQ6IDEuMTtcCglwYWRkaW5nOiAycHggNXB4IDFweDtcCgl3aGl0ZS1zcGFjZTogbm93cmFwO1wKCW92ZXJmbG93OiBoaWRkZW47XAoJLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKCSAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcClwKCWJhY2tncm91bmQ6ICNmZmY7XAoJYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wtc2NhbGUtbGluZTpub3QoOmZpcnN0LWNoaWxkKSB7XAoJYm9yZGVyLXRvcDogMnB4IHNvbGlkICM3Nzc7XAoJYm9yZGVyLWJvdHRvbTogbm9uZTtcCgltYXJnaW4tdG9wOiAtMnB4O1wKCX1cCi5sZWFmbGV0LWNvbnRyb2wtc2NhbGUtbGluZTpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpIHtcCglib3JkZXItYm90dG9tOiAycHggc29saWQgIzc3NztcCgl9XApcCi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWNvbnRyb2wtYXR0cmlidXRpb24sXAoubGVhZmxldC10b3VjaCAubGVhZmxldC1jb250cm9sLWxheWVycyxcCi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWJhciB7XAoJYm94LXNoYWRvdzogbm9uZTtcCgl9XAoubGVhZmxldC10b3VjaCAubGVhZmxldC1jb250cm9sLWxheWVycyxcCi5sZWFmbGV0LXRvdWNoIC5sZWFmbGV0LWJhciB7XAoJYm9yZGVyOiAycHggc29saWQgcmdiYSgwLDAsMCwwLjIpO1wKCWJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XAoJfVwKXApcCi8qIHBvcHVwICovXApcCi5sZWFmbGV0LXBvcHVwIHtcCglwb3NpdGlvbjogYWJzb2x1dGU7XAoJdGV4dC1hbGlnbjogY2VudGVyO1wKCW1hcmdpbi1ib3R0b206IDIwcHg7XAoJfVwKLmxlYWZsZXQtcG9wdXAtY29udGVudC13cmFwcGVyIHtcCglwYWRkaW5nOiAxcHg7XAoJdGV4dC1hbGlnbjogbGVmdDtcCglib3JkZXItcmFkaXVzOiAxMnB4O1wKCX1cCi5sZWFmbGV0LXBvcHVwLWNvbnRlbnQge1wKCW1hcmdpbjogMTNweCAyNHB4IDEzcHggMjBweDtcCglsaW5lLWhlaWdodDogMS4zO1wKCWZvbnQtc2l6ZTogMTNweDtcCglmb250LXNpemU6IDEuMDgzMzNlbTtcCgltaW4taGVpZ2h0OiAxcHg7XAoJfVwKLmxlYWZsZXQtcG9wdXAtY29udGVudCBwIHtcCgltYXJnaW46IDE3cHggMDtcCgltYXJnaW46IDEuM2VtIDA7XAoJfVwKLmxlYWZsZXQtcG9wdXAtdGlwLWNvbnRhaW5lciB7XAoJd2lkdGg6IDQwcHg7XAoJaGVpZ2h0OiAyMHB4O1wKCXBvc2l0aW9uOiBhYnNvbHV0ZTtcCglsZWZ0OiA1MCU7XAoJbWFyZ2luLXRvcDogLTFweDtcCgltYXJnaW4tbGVmdDogLTIwcHg7XAoJb3ZlcmZsb3c6IGhpZGRlbjtcCglwb2ludGVyLWV2ZW50czogbm9uZTtcCgl9XAoubGVhZmxldC1wb3B1cC10aXAge1wKCXdpZHRoOiAxN3B4O1wKCWhlaWdodDogMTdweDtcCglwYWRkaW5nOiAxcHg7XApcCgltYXJnaW46IC0xMHB4IGF1dG8gMDtcCglwb2ludGVyLWV2ZW50czogYXV0bztcClwKCS13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1wKCSAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1wKCSAgICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1wKCSAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1wKCX1cCi5sZWFmbGV0LXBvcHVwLWNvbnRlbnQtd3JhcHBlcixcCi5sZWFmbGV0LXBvcHVwLXRpcCB7XAoJYmFja2dyb3VuZDogd2hpdGU7XAoJY29sb3I6ICMzMzM7XAoJYm94LXNoYWRvdzogMCAzcHggMTRweCByZ2JhKDAsMCwwLDAuNCk7XAoJfVwKLmxlYWZsZXQtY29udGFpbmVyIGEubGVhZmxldC1wb3B1cC1jbG9zZS1idXR0b24ge1wKCXBvc2l0aW9uOiBhYnNvbHV0ZTtcCgl0b3A6IDA7XAoJcmlnaHQ6IDA7XAoJYm9yZGVyOiBub25lO1wKCXRleHQtYWxpZ246IGNlbnRlcjtcCgl3aWR0aDogMjRweDtcCgloZWlnaHQ6IDI0cHg7XAoJZm9udDogMTZweC8yNHB4IFRhaG9tYSwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcCgljb2xvcjogIzc1NzU3NTtcCgl0ZXh0LWRlY29yYXRpb246IG5vbmU7XAoJYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XAoJfVwKLmxlYWZsZXQtY29udGFpbmVyIGEubGVhZmxldC1wb3B1cC1jbG9zZS1idXR0b246aG92ZXIsXAoubGVhZmxldC1jb250YWluZXIgYS5sZWFmbGV0LXBvcHVwLWNsb3NlLWJ1dHRvbjpmb2N1cyB7XAoJY29sb3I6ICM1ODU4NTg7XAoJfVwKLmxlYWZsZXQtcG9wdXAtc2Nyb2xsZWQge1wKCW92ZXJmbG93OiBhdXRvO1wKCWJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1wKCWJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1wKCX1cClwKLmxlYWZsZXQtb2xkaWUgLmxlYWZsZXQtcG9wdXAtY29udGVudC13cmFwcGVyIHtcCgktbXMtem9vbTogMTtcCgl9XAoubGVhZmxldC1vbGRpZSAubGVhZmxldC1wb3B1cC10aXAge1wKCXdpZHRoOiAyNHB4O1wKCW1hcmdpbjogMCBhdXRvO1wKXAoJLW1zLWZpbHRlcjogInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5NYXRyaXgoTTExPTAuNzA3MTA2NzgsIE0xMj0wLjcwNzEwNjc4LCBNMjE9LTAuNzA3MTA2NzgsIE0yMj0wLjcwNzEwNjc4KSI7XAoJZmlsdGVyOiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KE0xMT0wLjcwNzEwNjc4LCBNMTI9MC43MDcxMDY3OCwgTTIxPS0wLjcwNzEwNjc4LCBNMjI9MC43MDcxMDY3OCk7XAoJfVwKXAoubGVhZmxldC1vbGRpZSAubGVhZmxldC1jb250cm9sLXpvb20sXAoubGVhZmxldC1vbGRpZSAubGVhZmxldC1jb250cm9sLWxheWVycyxcCi5sZWFmbGV0LW9sZGllIC5sZWFmbGV0LXBvcHVwLWNvbnRlbnQtd3JhcHBlcixcCi5sZWFmbGV0LW9sZGllIC5sZWFmbGV0LXBvcHVwLXRpcCB7XAoJYm9yZGVyOiAxcHggc29saWQgIzk5OTtcCgl9XApcClwKLyogZGl2IGljb24gKi9cClwKLmxlYWZsZXQtZGl2LWljb24ge1wKCWJhY2tncm91bmQ6ICNmZmY7XAoJYm9yZGVyOiAxcHggc29saWQgIzY2NjtcCgl9XApcClwKLyogVG9vbHRpcCAqL1wKLyogQmFzZSBzdHlsZXMgZm9yIHRoZSBlbGVtZW50IHRoYXQgaGFzIGEgdG9vbHRpcCAqL1wKLmxlYWZsZXQtdG9vbHRpcCB7XAoJcG9zaXRpb246IGFic29sdXRlO1wKCXBhZGRpbmc6IDZweDtcCgliYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1wKCWJvcmRlcjogMXB4IHNvbGlkICNmZmY7XAoJYm9yZGVyLXJhZGl1czogM3B4O1wKCWNvbG9yOiAjMjIyO1wKCXdoaXRlLXNwYWNlOiBub3dyYXA7XAoJLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcCgktbW96LXVzZXItc2VsZWN0OiBub25lO1wKCS1tcy11c2VyLXNlbGVjdDogbm9uZTtcCgl1c2VyLXNlbGVjdDogbm9uZTtcCglwb2ludGVyLWV2ZW50czogbm9uZTtcCglib3gtc2hhZG93OiAwIDFweCAzcHggcmdiYSgwLDAsMCwwLjQpO1wKCX1cCi5sZWFmbGV0LXRvb2x0aXAubGVhZmxldC1pbnRlcmFjdGl2ZSB7XAoJY3Vyc29yOiBwb2ludGVyO1wKCXBvaW50ZXItZXZlbnRzOiBhdXRvO1wKCX1cCi5sZWFmbGV0LXRvb2x0aXAtdG9wOmJlZm9yZSxcCi5sZWFmbGV0LXRvb2x0aXAtYm90dG9tOmJlZm9yZSxcCi5sZWFmbGV0LXRvb2x0aXAtbGVmdDpiZWZvcmUsXAoubGVhZmxldC10b29sdGlwLXJpZ2h0OmJlZm9yZSB7XAoJcG9zaXRpb246IGFic29sdXRlO1wKCXBvaW50ZXItZXZlbnRzOiBub25lO1wKCWJvcmRlcjogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1wKCWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1wKCWNvbnRlbnQ6ICIiO1wKCX1cClwKLyogRGlyZWN0aW9ucyAqL1wKXAoubGVhZmxldC10b29sdGlwLWJvdHRvbSB7XAoJbWFyZ2luLXRvcDogNnB4O1wKfVwKLmxlYWZsZXQtdG9vbHRpcC10b3Age1wKCW1hcmdpbi10b3A6IC02cHg7XAp9XAoubGVhZmxldC10b29sdGlwLWJvdHRvbTpiZWZvcmUsXAoubGVhZmxldC10b29sdGlwLXRvcDpiZWZvcmUge1wKCWxlZnQ6IDUwJTtcCgltYXJnaW4tbGVmdDogLTZweDtcCgl9XAoubGVhZmxldC10b29sdGlwLXRvcDpiZWZvcmUge1wKCWJvdHRvbTogMDtcCgltYXJnaW4tYm90dG9tOiAtMTJweDtcCglib3JkZXItdG9wLWNvbG9yOiAjZmZmO1wKCX1cCi5sZWFmbGV0LXRvb2x0aXAtYm90dG9tOmJlZm9yZSB7XAoJdG9wOiAwO1wKCW1hcmdpbi10b3A6IC0xMnB4O1wKCW1hcmdpbi1sZWZ0OiAtNnB4O1wKCWJvcmRlci1ib3R0b20tY29sb3I6ICNmZmY7XAoJfVwKLmxlYWZsZXQtdG9vbHRpcC1sZWZ0IHtcCgltYXJnaW4tbGVmdDogLTZweDtcCn1cCi5sZWFmbGV0LXRvb2x0aXAtcmlnaHQge1wKCW1hcmdpbi1sZWZ0OiA2cHg7XAp9XAoubGVhZmxldC10b29sdGlwLWxlZnQ6YmVmb3JlLFwKLmxlYWZsZXQtdG9vbHRpcC1yaWdodDpiZWZvcmUge1wKCXRvcDogNTAlO1wKCW1hcmdpbi10b3A6IC02cHg7XAoJfVwKLmxlYWZsZXQtdG9vbHRpcC1sZWZ0OmJlZm9yZSB7XAoJcmlnaHQ6IDA7XAoJbWFyZ2luLXJpZ2h0OiAtMTJweDtcCglib3JkZXItbGVmdC1jb2xvcjogI2ZmZjtcCgl9XAoubGVhZmxldC10b29sdGlwLXJpZ2h0OmJlZm9yZSB7XAoJbGVmdDogMDtcCgltYXJnaW4tbGVmdDogLTEycHg7XAoJYm9yZGVyLXJpZ2h0LWNvbG9yOiAjZmZmO1wKCX1cClwKLyogUHJpbnRpbmcgKi9cCglcCkBtZWRpYSBwcmludCB7XAoJLyogUHJldmVudCBwcmludGVycyBmcm9tIHJlbW92aW5nIGJhY2tncm91bmQtaW1hZ2VzIG9mIGNvbnRyb2xzLiAqL1wKCS5sZWFmbGV0LWNvbnRyb2wge1wKCQktd2Via2l0LXByaW50LWNvbG9yLWFkanVzdDogZXhhY3Q7XAoJCWNvbG9yLWFkanVzdDogZXhhY3Q7XAoJCX1cCgl9XAonICsKICAnPC9zdHlsZT4nICsKICAnPHN0eWxlPicgKwogICdcCi8qIGdlbmVyYWwgcnVsZXMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1wKXAovKiBmb3IgcHJpbnRpbmcgZGlyZWN0bHkgZnJvbSB0aGUgYnJvd3NlciwgaGlkZSBhbGwgVUkgY29tcG9uZW50c1wKICogTk9URTogQG1lZGlhIG5lZWRzIHRvIGJlIGZpcnN0P1wKICovXApAbWVkaWEgcHJpbnQge1wKICAubGVhZmxldC1jb250cm9sLWNvbnRhaW5lciB7IGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVwKICAjY2hhdGNvbnRyb2xzLCAjY2hhdCwgI2NoYXRpbnB1dCB7IGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVwKICAjc2lkZWJhcnRvZ2dsZSwgI3NpZGViYXIgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cCiAgI3VwZGF0ZXN0YXR1cyB7IGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVwKICAjcG9ydGFsX2hpZ2hsaWdodF9zZWxlY3QgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cCn1cClwKLnRleHQtb3ZlcmZsb3ctZWxsaXBzaXMge1wKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XAogIG92ZXJmbG93OiBoaWRkZW47XAogIHdoaXRlLXNwYWNlOiBub3dyYXA7XAogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1wKICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XAogIHdpZHRoOiAxMDAlO1wKfVwKXApcCmh0bWwsIGJvZHkge1wKICBoZWlnaHQ6IDEwMCU7XAogIHdpZHRoOiAxMDAlO1wKICBvdmVyZmxvdzogaGlkZGVuOyAvKiB3b3JrYXJvdW5kIGZvciAjMzczICovXAogIGJhY2tncm91bmQ6ICMwZTNkNGU7XAp9XApcCiNtYXAge1wKICBvdmVyZmxvdzogdmlzaWJsZTtcCiAgaGVpZ2h0OiAxMDAlO1wKICB3aWR0aDogMTAwJTtcCn1cClwKXApib2R5IHtcCiAgZm9udC1zaXplOiAxNHB4O1wKICBmb250LWZhbWlseTogUm9ib3RvLCAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XAogIG1hcmdpbjogMDtcCn1cClwKLyogTWF0ZXJpYWwgSWNvbnMgKi9cCi5tYXRlcmlhbC1pY29ucyB7XAogIHdpZHRoOiAyNHB4O1wKICBoZWlnaHQ6IDI0cHg7XAp9XApcCi5pY29uLWJ1dHRvbiB7XAogIGN1cnNvcjogcG9pbnRlcjtcCn1cClwKaS50aW55IHsgZm9udC1zaXplOiAxcmVtOyB9XAppLnNtYWxsIHsgZm9udC1zaXplOiAycmVtOyB9XAppLm1lZGl1bSB7IGZvbnQtc2l6ZTogNHJlbTsgfVwKaS5sYXJnZSB7IGZvbnQtc2l6ZTogNnJlbTsgfVwKXAojc2Nyb2xsd3JhcHBlciB7XAogIG92ZXJmbG93LXg6IGhpZGRlbjtcCiAgb3ZlcmZsb3cteTogYXV0bztcCiAgcG9zaXRpb246IGZpeGVkO1wKICByaWdodDogLTM4cHg7XAogIHRvcDogMDtcCiAgd2lkdGg6IDM0MHB4O1wKICBib3R0b206IDQ1cHg7XAogIHotaW5kZXg6IDMwMDE7XAogIHBvaW50ZXItZXZlbnRzOiBub25lO1wKfVwKXAojc2lkZWJhciB7XAogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoOCwgNDgsIDc4LCAwLjkpO1wKICBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyMEE4QjE7XAogIGNvbG9yOiAjODg4O1wKICBwb3NpdGlvbjogcmVsYXRpdmU7XAogIGxlZnQ6IDA7XAogIHRvcDogMDtcCiAgbWF4LWhlaWdodDogMTAwJTtcCiAgb3ZlcmZsb3cteTpzY3JvbGw7XAogIG92ZXJmbG93LXg6aGlkZGVuO1wKICBwb2ludGVyLWV2ZW50czogYXV0bztcCn1cClwKI3NpZGViYXJ0b2dnbGUge1wKICBkaXNwbGF5OiBibG9jaztcCiAgcGFkZGluZzogMjBweCA1cHg7XAogIG1hcmdpbi10b3A6IC0zMXB4OyAvKiAtKHRvZ2dsZSBoZWlnaHQgLyAyKSAqL1wKICBsaW5lLWhlaWdodDogMTBweDtcCiAgcG9zaXRpb246IGFic29sdXRlO1wKICB0b3A6IDEwOHB4O1wKICB6LWluZGV4OiAzMDAyO1wKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgsIDQ4LCA3OCwgMC45KTtcCiAgY29sb3I6ICNGRkNFMDA7XAogIGJvcmRlcjogMXB4IHNvbGlkICMyMEE4QjE7XAogIGJvcmRlci1yaWdodDogbm9uZTtcCiAgYm9yZGVyLXJhZGl1czogNXB4IDAgMCA1cHg7XAogIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcCiAgcmlnaHQ6IC01MHB4OyAvKiBvdmVyd3JpdHRlbiBsYXRlciBieSB0aGUgc2NyaXB0IHdpdGggU0lERUJBUl9XSURUSCAqL1wKfVwKXAouZW5sIHtcCiAgY29sb3I6ICMwM2ZlMDM7XAp9XApcCi5yZXMge1wKICBjb2xvcjogIzAwYzVmZjtcCn1cClwKLm1hYyB7XAogIGNvbG9yOiAjZmYyMDIwO1wKfVwKXAoubm9uZSB7XAogIGNvbG9yOiAjZmZmO1wKfVwKXAoubmlja25hbWUge1wKICBjdXJzb3I6IHBvaW50ZXI7XAp9XApcCmEge1wKICBjb2xvcjogI2ZmY2UwMDtcCiAgY3Vyc29yOiBwb2ludGVyO1wKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XAp9XApcCmE6aG92ZXIge1wKICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcCn1cClwKLmxlYWZsZXQtY29udHJvbC1sYXllcnMtb3ZlcmxheXMgbGFiZWwuZGlzYWJsZWQge1wKICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcCiAgY3Vyc29yOiBoZWxwO1wKfVwKXAovKiBiYXNlIGxheWVyIHNlbGVjdGlvbiAtIGZpcnN0IGNvbHVtbiAqL1wKLmxlYWZsZXQtY29udHJvbC1sYXllcnMtYmFzZSB7XAogIGZsb2F0OiBsZWZ0O1wKICBvdmVyZmxvdy15OiBhdXRvO1wKICBtYXgtaGVpZ2h0OiA2MDBweDtcCn1cClwKLyogb3ZlcmxheXMgbGF5ZXIgc2VsZWN0aW9uIC0gMm5kIGNvbHVtbiAqL1wKLmxlYWZsZXQtY29udHJvbC1sYXllcnMtb3ZlcmxheXMge1wKICBmbG9hdDogbGVmdDtcCiAgbWFyZ2luLWxlZnQ6IDhweDtcCiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjREREREREO1wKICBwYWRkaW5nLWxlZnQ6IDhweDtcCiAgb3ZlcmZsb3cteTogYXV0bztcCiAgbWF4LWhlaWdodDogNjAwcHg7XAp9XApcCi8qIGhpZGUgdGhlIHVzdWFsIHNlcGFyYXRvciAqL1wKLmxlYWZsZXQtY29udHJvbC1sYXllcnMtc2VwYXJhdG9yIHtcCiAgZGlzcGxheTogbm9uZTtcCn1cClwKXAovKiBzaGlmdCBjb250cm9scyB3aGVuIGNoYXQgaXMgZXhwYW5kZWQgKi9cCi5sZWFmbGV0LWxlZnQgLmxlYWZsZXQtY29udHJvbC5jaGF0LWV4cGFuZCB7XAogIG1hcmdpbi1sZWZ0OiA3MjBweDtcCn1cClwKLyogbGVhZmxldCBjb250cm9scyAqL1wKLmxlYWZsZXQtbGVmdCwgLmxlYWZsZXQtcmlnaHQge1wKICBkaXNwbGF5OiBncmlkO1wKICBncmlkLWdhcDogMTBweDtcCiAganVzdGlmeS1pdGVtczogYmFzZWxpbmU7XAp9XApcCi5sZWFmbGV0LXJpZ2h0IHtcCiAganVzdGlmeS1pdGVtczogZW5kO1wKfVwKXAoubGVhZmxldC1sZWZ0IC5sZWFmbGV0LWNvbnRyb2wsXAoubGVhZmxldC1yaWdodCAubGVhZmxldC1jb250cm9sIHtcCiAgbWFyZ2luOiAwO1wKfVwKXAoubGVhZmxldC10b3Age1wKICB0b3A6IDEwcHg7XAp9XAoubGVhZmxldC1yaWdodCB7XAogIHJpZ2h0OiAxMHB4O1wKfVwKLmxlYWZsZXQtYm90dG9tIHtcCiAgYm90dG9tOiAxMHB4O1wKfVwKLmxlYWZsZXQtbGVmdCB7XAogIGxlZnQ6IDEwcHg7XAp9XApcCi5oZWxwIHtcCiAgY3Vyc29yOiBoZWxwO1wKfVwKXAoudG9nZ2xlIHtcCiAgZGlzcGxheTogYmxvY2s7XAogIGhlaWdodDogMDtcCiAgd2lkdGg6IDA7XAp9XApcCi8qIGZpZWxkIG11IGNvdW50ICovXAouZmllbGRtdSB7XAogIGNvbG9yOiAjRkZDRTAwO1wKICBmb250LXNpemU6IDEzcHg7XAogIGZvbnQtZmFtaWx5OiBSb2JvdG8sICJIZWx2ZXRpY2EgTmV1ZSIsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsgLypvdmVycmlkZSBsZWFmbGV0LWNvbnRhaW5lciAqL1wKICB0ZXh0LWFsaWduOiBjZW50ZXI7XAogIHRleHQtc2hhZG93OiAwIDAgMC4yZW0gYmxhY2ssIDAgMCAwLjJlbSBibGFjaywgMCAwIDAuMmVtIGJsYWNrO1wKICBwb2ludGVyLWV2ZW50czogbm9uZTtcCn1cClwKXAovKiBjaGF0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cClwKI2NoYXRjb250cm9scyB7XAogIGNvbG9yOiAjRkZDRTAwO1wKICBiYWNrZ3JvdW5kOiByZ2JhKDgsIDQ4LCA3OCwgMC45KTtcCiAgcG9zaXRpb246IGFic29sdXRlO1wKICBsZWZ0OiAwO1wKICB6LWluZGV4OiAzMDAwO1wKICBoZWlnaHQ6IDI2cHg7XAogIHBhZGRpbmctbGVmdDoxcHg7XAp9XApcCiNjaGF0Y29udHJvbHMuZXhwYW5kIHtcCiAgdG9wOiAwO1wKICBib3R0b206IGF1dG87XAp9XApcCiNjaGF0Y29udHJvbHMgYSB7XAogIG1hcmdpbi1sZWZ0OiAtMXB4O1wKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XAogIHdpZHRoOiA5NHB4O1wKICB0ZXh0LWFsaWduOiBjZW50ZXI7XAogIGhlaWdodDogMjRweDtcCiAgbGluZS1oZWlnaHQ6IDI0cHg7XAogIGJvcmRlcjogMXB4IHNvbGlkICMyMEE4QjE7XAogIHZlcnRpY2FsLWFsaWduOiB0b3A7XAp9XApcCiNjaGF0Y29udHJvbHMgYTpmaXJzdC1jaGlsZCB7XAogIGxldHRlci1zcGFjaW5nOi0xcHg7XAogIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcCn1cClwKI2NoYXRjb250cm9scyBhLmFjdGl2ZSB7XAogIGJvcmRlci1jb2xvcjogI0ZGQ0UwMDtcCiAgYm9yZGVyLWJvdHRvbS13aWR0aDowcHg7XAogIGZvbnQtd2VpZ2h0OmJvbGQ7XAogIGJhY2tncm91bmQ6IHJnYig4LCA0OCwgNzgpO1wKfVwKXAojY2hhdGNvbnRyb2xzIGEuYWN0aXZlICsgYSB7XAogIGJvcmRlci1sZWZ0LWNvbG9yOiAjRkZDRTAwXAp9XApcClwKI2NoYXRjb250cm9scyAudG9nZ2xlIHtcCiAgYm9yZGVyLWxlZnQ6IDEwcHggc29saWQgdHJhbnNwYXJlbnQ7XAogIGJvcmRlci1yaWdodDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcCiAgYm9yZGVyLWJvdHRvbTogMTBweCBzb2xpZCAjRkZDRTAwO1wKICBtYXJnaW46IDZweCBhdXRvIGF1dG87XAp9XApcCiNjaGF0Y29udHJvbHMuZXhwYW5kIC50b2dnbGUge1wKICBib3JkZXItdG9wOiAxMHB4IHNvbGlkICNGRkNFMDA7XAogIGJvcmRlci1ib3R0b206IG5vbmU7XAp9XApcCiNjaGF0Y29udHJvbHMgLmxvYWRpbmcge1wKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwwLDAsMC4zKTtcCiAgLXdlYmtpdC1hbmltYXRpb246IGNoYXRsb2FkaW5nIDEuMnMgaW5maW5pdGUgbGluZWFyO1wKICAtbW96LWFuaW1hdGlvbjogY2hhdGxvYWRpbmcgMS4ycyBpbmZpbml0ZSBsaW5lYXI7XAogIGFuaW1hdGlvbjogY2hhdGxvYWRpbmcgMS4ycyBpbmZpbml0ZSBsaW5lYXI7XAp9XApcCkAtd2Via2l0LWtleWZyYW1lcyBjaGF0bG9hZGluZyB7XAogICAgMCUgeyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwwLDAsMC40KSB9XAogICA1MCUgeyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwwLDAsMC4xKSB9XAogIDEwMCUgeyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwwLDAsMC40KSB9XAp9XApcCkAtbW96LWtleWZyYW1lcyBjaGF0bG9hZGluZyB7XAogICAgMCUgeyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwwLDAsMC40KSB9XAogICA1MCUgeyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwwLDAsMC4xKSB9XAogIDEwMCUgeyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwwLDAsMC40KSB9XAp9XApcCkBrZXlmcmFtZXMgY2hhdGxvYWRpbmcge1wKICAgIDAlIHsgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMCwwLDAuNCkgfVwKICAgNTAlIHsgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMCwwLDAuMSkgfVwKICAxMDAlIHsgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMCwwLDAuNCkgfVwKfVwKXApcClwKI2NoYXQge1wKICBwb3NpdGlvbjogYWJzb2x1dGU7XAogIHdpZHRoOiA3MDhweDtcCiAgYm90dG9tOiAyM3B4O1wKICBsZWZ0OiAwO1wKICB6LWluZGV4OiAzMDAwO1wKICBiYWNrZ3JvdW5kOiByZ2JhKDgsIDQ4LCA3OCwgMC45KTtcCiAgbGluZS1oZWlnaHQ6IDE1cHg7XAogIGNvbG9yOiAjZWVlO1wKICBib3JkZXI6IDFweCBzb2xpZCAjMjBBOEIxO1wKICBib3JkZXItYm90dG9tOiAwO1wKICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcCn1cClwKZW0ge1wKICBjb2xvcjogcmVkO1wKICBmb250LXN0eWxlOiBub3JtYWw7XAp9XApcCiNjaGF0LmV4cGFuZCB7XAogIGhlaWdodDphdXRvO1wKICB0b3A6IDI1cHg7XAp9XApcClwKI2NoYXQgPiBkaXYge1wKICBvdmVyZmxvdy14OmhpZGRlbjtcCiAgb3ZlcmZsb3cteTpzY3JvbGw7XAogIGhlaWdodDogMTAwJTtcCiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIHBhZGRpbmc6IDJweDtcCiAgcG9zaXRpb246cmVsYXRpdmU7XAp9XApcCiNjaGF0IHRhYmxlLCAjY2hhdGlucHV0IHRhYmxlIHtcCiAgd2lkdGg6IDEwMCU7XAogIHRhYmxlLWxheW91dDogZml4ZWQ7XAogIGJvcmRlci1zcGFjaW5nOiAwO1wKICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1wKICAvKiBtYWtlIHRoZSB0YWJsZSBhbHdheXMgc2Nyb2xsYWJsZSAqL1wKICBtaW4taGVpZ2h0OiAxMDAlO1wKICBtYXJnaW4tYm90dG9tOiAxcHg7XAp9XApcCi8qIGV4cGFuZCBsYXN0IHJvdyBpZiBuZWVkZWQgKi9cCiNjaGF0IHRhYmxlIHRyOmxhc3QtY2hpbGQge1wKICAgIGhlaWdodDogMTAwJTtcCn1cClwKI2NoYXRpbnB1dCB0YWJsZSB7XAogIGhlaWdodDogMTAwJTtcCn1cClwKI2NoYXRpbnB1dC5wdWJsaWMgbWFyayxcCiNjaGF0aW5wdXQucHVibGljIGlucHV0IHtcCiAgY29sb3I6ICNmNjY7XAp9XApcCiNjaGF0aW5wdXQuYWxlcnRzIG1hcmsge1wKICBjb2xvcjogI2JiYjtcCn1cClwKI2NoYXQgdGQsICNjaGF0aW5wdXQgdGQge1wKICBmb250LXNpemU6IDEzcHg7XAogIHZlcnRpY2FsLWFsaWduOiB0b3A7XAogIHBhZGRpbmctYm90dG9tOiAzcHg7XAp9XApcCiNjaGF0IC5kaXZpZGVyIHtcCiAgY29sb3I6ICNiYmI7XAp9XApcCiNjaGF0IC5kaXZpZGVyIHRkOm50aC1jaGlsZCgyKSB7XAogIHRleHQtYWxpZ246IGNlbnRlcjtcCn1cClwKLyogdGltZSAqL1wKI2NoYXQgdGQ6Zmlyc3QtY2hpbGQsICNjaGF0aW5wdXQgdGQ6Zmlyc3QtY2hpbGQge1wKICB3aWR0aDogNDRweDtcCiAgb3ZlcmZsb3c6IGhpZGRlbjtcCiAgcGFkZGluZy1sZWZ0OiAycHg7XAogIGNvbG9yOiAjYmJiO1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKfVwKXAojY2hhdCB0aW1lIHtcCiAgY3Vyc29yOiBoZWxwO1wKfVwKXAovKiBuaWNrICovXAojY2hhdCB0ZDpudGgtY2hpbGQoMiksICNjaGF0aW5wdXQgdGQ6bnRoLWNoaWxkKDIpIHtcCiAgd2lkdGg6IDkxcHg7XAogIG92ZXJmbG93OiBoaWRkZW47XAogIHBhZGRpbmctbGVmdDogMnB4O1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKfVwKXAojY2hhdCB0ZC5zeXN0ZW1fbmFycm93Y2FzdCB7XAogIGNvbG9yOiAjZjY2O1wKfVwKXAojY2hhdGFsbCB0ci5mYWN0aW9uIHRkOm50aC1jaGlsZCgzKTpiZWZvcmUsXAojY2hhdGFsZXJ0cyB0ci5mYWN0aW9uIHRkOm50aC1jaGlsZCgzKTpiZWZvcmUge1wKICBjb250ZW50OiBcJ1tmYWN0aW9uXVwnO1wKICBjb2xvcjogI2Y4ODtcCiAgYmFja2dyb3VuZC1jb2xvcjogIzUwMDtcCiAgbWFyZ2luLXJpZ2h0OiAuMnJlbTtcCn1cClwKI2NoYXRhbGwgdHIucHVibGljIHRkOm50aC1jaGlsZCgzKTpiZWZvcmUsXAojY2hhdGFsZXJ0cyB0ci5wdWJsaWMgdGQ6bnRoLWNoaWxkKDMpOmJlZm9yZSB7XAogIGNvbnRlbnQ6IFwnW3B1YmxpY11cJztcCiAgY29sb3I6ICNmZjY7XAogIGJhY2tncm91bmQtY29sb3I6ICM1NTA7XAogIG1hcmdpbi1yaWdodDogLjJyZW07XAp9XApcCm1hcmsge1wKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcCn1cClwKLmludmlzZXAge1wKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XAogIHdpZHRoOiAxcHg7XAogIGhlaWdodDogMXB4O1wKICBvdmVyZmxvdzpoaWRkZW47XAogIGNvbG9yOiB0cmFuc3BhcmVudDtcCn1cClwKLyogZGl2aWRlciAqL1wKc3VtbWFyeSB7XAogIGNvbG9yOiAjYmJiO1wKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XAogIGhlaWdodDogMTZweDtcCiAgb3ZlcmZsb3c6IGhpZGRlbjtcCiAgcGFkZGluZzogMCAycHg7XAogIHdoaXRlLXNwYWNlOiBub3dyYXA7XAogIHdpZHRoOiAxMDAlO1wKfVwKXAojY2hhdGlucHV0IHtcCiAgcG9zaXRpb246IGFic29sdXRlO1wKICBib3R0b206IDA7XAogIGxlZnQ6IDA7XAogIHBhZGRpbmc6IDAgMnB4O1wKICBiYWNrZ3JvdW5kOiByZ2JhKDgsIDQ4LCA3OCwgMC45KTtcCiAgd2lkdGg6IDcwOHB4O1wKICBoZWlnaHQ6IDIzcHg7XAogIGJvcmRlcjogMXB4IHNvbGlkICMyMEE4QjE7XAogIHotaW5kZXg6IDMwMDE7XAogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICBib3gtc2l6aW5nOiBib3JkZXItYm94O1wKfVwKXAojY2hhdGlucHV0IHRkIHtcCiAgcGFkZGluZy1ib3R0b206IDFweDtcCiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcCn1cClwKXAojY2hhdGlucHV0IGlucHV0IHtcCiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XAogIGNvbG9yOiAjRUVFRUVFO1wKICB3aWR0aDogMTAwJTtcCiAgaGVpZ2h0OiAxMDAlO1wKICBwYWRkaW5nOjNweCA0cHggMXB4IDRweDtcCn1cClwKLmJpZGktaXNvbGF0ZSB7XAogICAgdW5pY29kZS1iaWRpOiBpc29sYXRlO1wKfVwKXApcCi8qIHNpZGViYXIgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1wKXAojc2lkZWJhciA+ICoge1wKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzIwQThCMTtcCiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XAp9XApcClwKXAojc2lkZWJhcnRvZ2dsZSAudG9nZ2xlIHtcCiAgYm9yZGVyLWJvdHRvbTogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcCiAgYm9yZGVyLXRvcDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcCn1cClwKI3NpZGViYXJ0b2dnbGUgLm9wZW4ge1wKICBib3JkZXItcmlnaHQ6IDEwcHggc29saWQgI0ZGQ0UwMDtcCn1cClwKI3NpZGViYXJ0b2dnbGUgLmNsb3NlIHtcCiAgYm9yZGVyLWxlZnQ6IDEwcHggc29saWQgI0ZGQ0UwMDtcCn1cClwKLyogcGxheWVyIHN0YXRzICovXAojcGxheWVyc3RhdCB7XAogIGhlaWdodDogMzBweDtcCn1cClwKaDIge1wKICBjb2xvcjogI2ZmY2UwMDtcCiAgZm9udC1zaXplOiAyMXB4O1wKICBwYWRkaW5nOiAwIDRweDtcCiAgbWFyZ2luOiAwO1wKICBjdXJzb3I6aGVscDtcCiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIHdpZHRoOiAxMDAlO1wKfVwKXApoMiAjbmFtZSB7XAogIGZvbnQtd2VpZ2h0OiAzMDA7XAogIGRpc3BsYXk6IGlubGluZTtcCiAgdmVydGljYWwtYWxpZ246IHRvcDtcCiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcCn1cClwKaDIgI25hbWUgLnBsYXllcm5hbWUge1wKICBtYXgtd2lkdGg6IDcwJTtcCiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1wKICBvdmVyZmxvdzogaGlkZGVuO1wKICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcCn1cClwKaDIgI3N0YXRzIHtcCiAgZmxvYXQ6IHJpZ2h0O1wKICBoZWlnaHQ6IDEwMCU7XAogIG92ZXJmbG93OiBoaWRkZW47XAp9XApcCiNzaWdub3V0IHtcCiAgZm9udC1zaXplOiAxMnB4O1wKICBmb250LXdlaWdodDogbm9ybWFsO1wKICBwYWRkaW5nOiAwIDRweDtcCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4LCA0OCwgNzgsIDAuNSk7XAogIGRpc3BsYXk6IG5vbmU7IC8qIHN0YXJ0cyBoaWRkZW4gKi9cCiAgdmVydGljYWwtYWxpZ246IHRleHQtdG9wO1wKfVwKI25hbWU6aG92ZXIgLnBsYXllcm5hbWUge1wKICBtYXgtd2lkdGg6IDUwJTtcCn1cCiNuYW1lOmhvdmVyICNzaWdub3V0IHtcCiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1wKfVwKXApoMiBzdXAsIGgyIHN1YiB7XAogIGRpc3BsYXk6IGJsb2NrO1wKICBmb250LXNpemU6IDExcHg7XAogIG1hcmdpbi1ib3R0b206IC0ycHg7XAp9XApcClwKLyogZ2FtZXN0YXRzICovXAojZ2FtZXN0YXQgc3BhbiB7XAogIGRpc3BsYXk6IGlubGluZS1ibG9jaztcCiAgZm9udC13ZWlnaHQ6IGJvbGQ7XAogIGN1cnNvcjpoZWxwO1wKICBwYWRkaW5nOiAwIDNweDtcCiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcCn1cClwKI2dhbWVzdGF0IC5yZXMge1wKICBiYWNrZ3JvdW5kOiAjMDA1Njg0O1wKfVwKXAojZ2FtZXN0YXQgLmVubCB7XAogIGJhY2tncm91bmQ6ICMwMTdmMDE7XAp9XApcClwKLyogc2VhcmNoIGlucHV0LCBhbmQgb3RoZXJzICovXAppbnB1dDpub3QoW3R5cGVdKSwgLmlucHV0LFwKaW5wdXRbdHlwZT0idGV4dCJdLCBpbnB1dFt0eXBlPSJwYXNzd29yZCJdLFwKaW5wdXRbdHlwZT0ibnVtYmVyIl0sIGlucHV0W3R5cGU9ImVtYWlsIl0sXAppbnB1dFt0eXBlPSJzZWFyY2giXSwgaW5wdXRbdHlwZT0idXJsIl0ge1wKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMyk7XAogIGNvbG9yOiAjZmZjZTAwO1wKICBoZWlnaHQ6IDI0cHg7XAogIHBhZGRpbmc6MHB4IDRweCAwcHggNHB4O1wKICBmb250LXNpemU6IDEycHg7XAogIGJvcmRlcjowO1wKICBmb250LWZhbWlseTppbmhlcml0O1wKICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcCn1cClwKI3NlYXJjaHdyYXBwZXIge1wKICBwb3NpdGlvbjogcmVsYXRpdmU7XAp9XAojc2VhcmNoIHtcCiAgd2lkdGg6IDEwMCU7XAogIHBhZGRpbmctbGVmdDogMjRweDtcCiAgcGFkZGluZy1yaWdodDogMzZweDtcCn1cCiNzZWFyY2g6Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24ge1wKICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XAp9XAojc2VhcmNoaWNvbiwgI3NlYXJjaGNhbmNlbCwgI2J1dHRvbmdlb2xvY2F0aW9uIHtcCiAgZGlzcGxheTogZmxleDtcCiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcCiAgcG9zaXRpb246IGFic29sdXRlO1wKICBtYXJnaW46IDA7XAogIGJvcmRlcjogMCBub25lIHRyYW5zcGFyZW50O1wKICBwYWRkaW5nOiAwIDJweDtcCiAgaGVpZ2h0OiAyNHB4O1wKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcCn1cCiNzZWFyY2hpY29uIGltZywgI3NlYXJjaGNhbmNlbCBpbWcsICNidXR0b25nZW9sb2NhdGlvbiBpbWcge1wKICBoZWlnaHQ6IDIwcHg7XAp9XAojc2VhcmNoaWNvbiB7XAogIGxlZnQ6IDA7XAp9XAojc2VhcmNoY2FuY2VsIHtcCiAgcmlnaHQ6IDI0cHg7XAogIGN1cnNvcjogcG9pbnRlcjtcCiAgb3BhY2l0eTogMDtcCiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XAogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlO1wKfVwKI3NlYXJjaGNhbmNlbC52aXNpYmxlIHtcCiAgb3BhY2l0eTogMTtcCiAgcG9pbnRlci1ldmVudHM6IGF1dG87XAp9XAojYnV0dG9uZ2VvbG9jYXRpb24ge1wKICByaWdodDogMDtcCiAgY3Vyc29yOiBwb2ludGVyO1wKfVwKI2J1dHRvbmdlb2xvY2F0aW9uOmZvY3VzIHtcCiAgb3V0bGluZTogMXB4IGRvdHRlZCAjZmZjZTAwO1wKfVwKLnNlYXJjaHF1ZXJ5IHtcCiAgbWF4LWhlaWdodDogMjVlbTtcCiAgb3ZlcmZsb3cteTogYXV0bztcCn1cCiNzZWFyY2h3cmFwcGVyIGgzIHtcCiAgcGFkZGluZzogMCAwIDAgMjVweDtcCiAgcG9zaXRpb246IHJlbGF0aXZlO1wKICBmb250LXNpemU6IDFlbTtcCiAgaGVpZ2h0OiBhdXRvO1wKICBjdXJzb3I6IHBvaW50ZXI7XAp9XAojc2VhcmNod3JhcHBlciBoMzo6YmVmb3JlIHtcCiAgcG9zaXRpb246IGFic29sdXRlO1wKICBsZWZ0OiA1cHg7XAogIGZvbnQtc2l6ZTogMTRweDtcCiAgbWFyZ2luLXJpZ2h0OiAycHg7XAogIGZvbnQtd2VpZ2h0OiBub3JtYWw7XAogIGNvbnRlbnQ6ICLilrIiO1wKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyBlYXNlO1wKfVwKI3NlYXJjaHdyYXBwZXIgLnNlYXJjaHF1ZXJ5LmNvbGxhcHNlZCBoMzo6YmVmb3JlIHtcCiAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcCn1cCiNzZWFyY2h3cmFwcGVyIHVsIHtcCiAgbWF4LWhlaWdodDogMTAwJTtcCiAgcGFkZGluZy1sZWZ0OiAxNnB4O1wKICBvdmVyZmxvdzogaGlkZGVuO1wKfVwKI3NlYXJjaHdyYXBwZXIgbGkge1wKICBjdXJzb3I6IHBvaW50ZXI7XAp9XAojc2VhcmNod3JhcHBlciAuc2VhcmNocXVlcnkuY29sbGFwc2VkIHVsIHtcCiAgbWF4LWhlaWdodDogMDtcCn1cCiNzZWFyY2h3cmFwcGVyIGxpIGEge1wKICBtYXJnaW4tbGVmdDogLTE0cHg7XAogIHBhZGRpbmctbGVmdDogMTRweDtcCiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMXB4IGNlbnRlcjtcCiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcCiAgYmFja2dyb3VuZC1zaXplOiAxMnB4IDEycHg7XAp9XAojc2VhcmNod3JhcHBlciBsaTpmb2N1cyBhLCAjc2VhcmNod3JhcHBlciBsaTpob3ZlciBhIHtcCiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XAp9XAojc2VhcmNod3JhcHBlciBsaSBlbSB7XAogIGNvbG9yOiAjY2NjO1wKICBmb250LXNpemU6IDAuOWVtO1wKfVwKXAo6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1wKICBmb250LXN0eWxlOiBpdGFsaWM7XAp9XApcCjotbW96LXBsYWNlaG9sZGVyIHtcCiAgZm9udC1zdHlsZTogaXRhbGljO1wKfVwKXAo6Oi1tb3otcGxhY2Vob2xkZXIge1wKICBmb250LXN0eWxlOiBpdGFsaWM7XAp9XApcCi5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzIGlucHV0IHtcCiAgaGVpZ2h0OiBhdXRvO1wKICBwYWRkaW5nOiAwO1wKfVwKXApcCi8qIHBvcnRhbCB0aXRsZSBhbmQgaW1hZ2UgKi9cCmgzLnRpdGxlIHtcCiAgcGFkZGluZy1yaWdodDogMTdweDsgLyogdG8gbm90IG92ZXJsYXAgd2l0aCBjbG9zZSBidXR0b24gKi9cCiAgbWFyZ2luOiAycHggMDtcCiAgbGluZS1oZWlnaHQ6IDI0cHg7XAogIG92ZXJmbG93OiBoaWRkZW47XAogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKfVwKXAouaW1ncHJldmlldyB7XAogIGhlaWdodDogMTkwcHg7XAogIGJhY2tncm91bmQ6IG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyO1wKICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XAogIGN1cnNvcjogaGVscDtcCiAgb3ZlcmZsb3c6IGhpZGRlbjtcCiAgcG9zaXRpb246IHJlbGF0aXZlO1wKfVwKXAouaW1ncHJldmlldyBpbWcuaGlkZSB7XAogIGRpc3BsYXk6IG5vbmU7XAp9XApcCi5pbWdwcmV2aWV3IC5wb3J0YWxEZXRhaWxzIHtcCiAgZGlzcGxheTogbm9uZTtcCn1cClwKI2xldmVsIHtcCiAgZm9udC1zaXplOiA0MHB4O1wKICB0ZXh0LXNoYWRvdzogLTFweCAtMXB4ICMwMDAsIDFweCAtMXB4ICMwMDAsIC0xcHggMXB4ICMwMDAsIDFweCAxcHggIzAwMCwgMCAwIDVweCAjZmZmO1wKICBkaXNwbGF5OiBibG9jaztcCiAgbWFyZ2luLXJpZ2h0OiAxNXB4O1wKICB0ZXh0LWFsaWduOnJpZ2h0O1wKICBmbG9hdDogcmlnaHQ7XAp9XApcCi8qIHBvcnRhbCBtb2RzICovXAoubW9kcyB7XAogIG1hcmdpbjogM3B4IGF1dG8gMXB4IGF1dG87XAogIHdpZHRoOiAyOTZweDtcCiAgaGVpZ2h0OiA2N3B4O1wKICB0ZXh0LWFsaWduOiBjZW50ZXI7XAp9XApcCi5tb2RzIHNwYW4ge1wKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMyk7XAogIC8qIGNhbuKAmXQgdXNlIGlubGluZS1ibG9jayBiZWNhdXNlIFdlYmtpdFwncyBpbXBsZW1lbnRhdGlvbiBpcyBidWdneSBhbmRcCiAgICogaW50cm9kdWNlcyBhZGRpdGlvbmFsIG1hcmdpbnMgaW4gcmFuZG9tIGNhc2VzLiBObyBjbGVhciBuZWNlc3NhcnksXAogICAqIGFzIHRoYXTigJlzIHNvbHZlZCBieSBzZXR0aW5nIGhlaWdodCBvbiAubW9kcy4gKi9cCiAgZGlzcGxheTogYmxvY2s7XAogIGZsb2F0OmxlZnQ7XAogIGhlaWdodDogNjNweDtcCiAgbWFyZ2luOiAwIDJweDtcCiAgb3ZlcmZsb3c6IGhpZGRlbjtcCiAgcGFkZGluZzogMnB4O1wKICB0ZXh0LWFsaWduOiBjZW50ZXI7XAogIHdpZHRoOiA2M3B4O1wKICBjdXJzb3I6aGVscDtcCiAgYm9yZGVyOiAxcHggc29saWQgIzY2NjtcCn1cClwKLm1vZHMgc3Bhbjpub3QoW3RpdGxlXSkge1wKICBjdXJzb3I6IGF1dG87XAp9XApcCi5yZXMgLm1vZHMgc3BhbiwgLnJlcyAubWV0ZXIge1wKICBib3JkZXI6IDFweCBzb2xpZCAjMDA3NmI2O1wKfVwKLmVubCAubW9kcyBzcGFuLCAuZW5sIC5tZXRlciB7XAogIGJvcmRlcjogMXB4IHNvbGlkICMwMTdmMDE7XAp9XApcCi8qIHJhbmRvbSBkZXRhaWxzLCByZXNvbmF0b3IgZGV0YWlscyAqL1wKI3JhbmRkZXRhaWxzLCAjcmVzb2RldGFpbHMge1wKICB3aWR0aDogMTAwJTtcCiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIHBhZGRpbmc6IDAgNHB4O1wKICB0YWJsZS1sYXlvdXQ6IGZpeGVkO1wKICBib3JkZXItc3BhY2luZzogMG07XAogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XAp9XApcCiNyYW5kZGV0YWlscyB0ZCwgI3Jlc29kZXRhaWxzIHRkIHtcCiAgb3ZlcmZsb3c6IGhpZGRlbjtcCiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XAogIHZlcnRpY2FsLWFsaWduOiB0b3A7XAogIHdoaXRlLXNwYWNlOiBub3dyYXA7XAogIHdpZHRoOiA1MCU7XAp9XApcCiNyYW5kZGV0YWlscyB0aCwgI3Jlc29kZXRhaWxzIHRoIHtcCiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcCiAgdGV4dC1hbGlnbjogcmlnaHQ7XAogIHdpZHRoOiA2MnB4O1wKICBwYWRkaW5nOjBweDtcCiAgcGFkZGluZy1yaWdodDo0cHg7XAogIHBhZGRpbmctbGVmdDo0cHg7XAp9XApcCiNyYW5kZGV0YWlscyB0aCArIHRoLCAjcmVzb2RldGFpbHMgdGggKyB0aCB7XAogIHRleHQtYWxpZ246IGxlZnQ7XAogIHBhZGRpbmctcmlnaHQ6IDRweDtcCiAgcGFkZGluZy1sZWZ0OiA0cHg7XAp9XApcCiNyYW5kZGV0YWlscyB0ZDpmaXJzdC1jaGlsZCwgI3Jlc29kZXRhaWxzIHRkOmZpcnN0LWNoaWxkIHtcCiAgdGV4dC1hbGlnbjogcmlnaHQ7XAogIHBhZGRpbmctbGVmdDogMnB4O1wKfVwKXAojcmFuZGRldGFpbHMgdGQ6bGFzdC1jaGlsZCwgI3Jlc29kZXRhaWxzIHRkOmxhc3QtY2hpbGQge1wKICB0ZXh0LWFsaWduOiBsZWZ0O1wKICBwYWRkaW5nLXJpZ2h0OiAycHg7XAp9XApcClwKI3JhbmRkZXRhaWxzIHtcCiAgbWFyZ2luLXRvcDogNHB4O1wKICBtYXJnaW4tYm90dG9tOiA1cHg7XAp9XApcClwKI3JhbmRkZXRhaWxzIHR0IHtcCiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XAogIGN1cnNvcjogaGVscDtcCn1cClwKI2FydGlmYWN0X3RhcmdldCwgI2FydGlmYWN0X2ZyYWdtZW50cyB7XAogIG1hcmdpbi10b3A6IDRweDtcCiAgbWFyZ2luLWJvdHRvbTogNHB4O1wKXAogIG1hcmdpbi1sZWZ0OiA4cHg7XAogIG1hcmdpbi1yaWdodDogOHB4O1wKfVwKXApcCi8qIHJlc29uYXRvcnMgKi9cCiNyZXNvZGV0YWlscyB7XAogIG1hcmdpbi1ib3R0b206IDBweDtcCn1cClwKLm1ldGVyIHtcCiAgYmFja2dyb3VuZDogIzAwMDtcCiAgY3Vyc29yOiBoZWxwO1wKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XAogIGhlaWdodDogMThweDtcCiAgcGFkZGluZzogMXB4O1wKICB3aWR0aDogMTAwJTtcCiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIHBvc2l0aW9uOiByZWxhdGl2ZTtcCiAgbGVmdDogMDtcCiAgdG9wOiAwO1wKfVwKXAoubWV0ZXIubm9ydGgge1wKICBvdmVyZmxvdzogaGlkZGVuO1wKfVwKLm1ldGVyLm5vcnRoOmJlZm9yZSB7XAogIGNvbnRlbnQ6ICIiO1wKICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XAogIGJvcmRlcjogMXB4IHNvbGlkICMwMDAwMDA7XAogIGJvcmRlci1yYWRpdXM6IDEwMCU7XAogIGRpc3BsYXk6IGJsb2NrO1wKICBoZWlnaHQ6IDZweDtcCiAgd2lkdGg6IDZweDtcCiAgbGVmdDogNTAlO1wKICB0b3A6IC0zcHg7XAogIG1hcmdpbi1sZWZ0OiAtNHB4O1wKICBwb3NpdGlvbjogYWJzb2x1dGU7XAp9XApcCi5tZXRlciBzcGFuIHtcCiAgZGlzcGxheTogYmxvY2s7XAogIGhlaWdodDogMTRweDtcCn1cClwKLm1ldGVyLWxldmVsIHtcCiAgcG9zaXRpb246IGFic29sdXRlO1wKICBsZWZ0OiAwO1wKICByaWdodDogMDtcCiAgdG9wOiAtMnB4O1wKICB0ZXh0LXNoYWRvdzogMC4wZW0gMC4wZW0gMC4zZW0gIzgwODA4MDtcCiAgdGV4dC1hbGlnbjogY2VudGVyO1wKICB3b3JkLXNwYWNpbmc6IDRweDsgLyogdG8gbGVhdmUgc29tZSBzcGFjZSBmb3IgdGhlIG5vcnRoIGluZGljYXRvciAqL1wKfVwKXAovKiBsaW5rcyBiZWxvdyByZXNvcyAqL1wKXAoubGlua2RldGFpbHMge1wKICBtYXJnaW4tYm90dG9tOiAwcHg7XAogIHRleHQtYWxpZ246IGNlbnRlcjtcCn1cClwKLmxpbmtkZXRhaWxzIGFzaWRlIHtcCiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKICBtYXJnaW4tbGVmdDogNXB4O1wKICBtYXJnaW4tcmlnaHQ6IDVweDtcCn1cClwKI3Rvb2xib3gge1wKICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XAp9XApcCiN0b29sYm94LCAjdG9vbGJveF9jb21wb25lbnQge1wKICB0ZXh0LWFsaWduOiBsZWZ0OyAgICAvKiBjZW50cmUgZGlkblwndCBsb29rIGFzIG5pY2UgaGVyZSBhcyBpdCBkaWQgYWJvdmUgaW4gLmxpbmtkZXRhaWxzICovXAp9XApcCiN0b29sYm94ID4gYSwgI3Rvb2xib3hfY29tcG9uZW50ID4gYSB7XAogIG1hcmdpbi1sZWZ0OiA1cHg7XAogIG1hcmdpbi1yaWdodDogNXB4O1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XAp9XApcCi8qIGEgY29tbW9uIHBvcnRhbCBkaXNwbGF5IHRha2VzIHRoaXMgbXVjaCBzcGFjZSAocHJldmVudHMgbW92aW5nXAogKiBjb250ZW50IHdoZW4gZmlyc3Qgc2VsZWN0aW5nIGEgcG9ydGFsKSAqL1wKXAojcG9ydGFsZGV0YWlscyB7XAogIG1pbi1oZWlnaHQ6IDYzcHg7XAogIHBvc2l0aW9uOiByZWxhdGl2ZTsgLyogc28gdGhlIGJlbG93IFwnI3BvcnRhbGRldGFpbHMgLmNsb3NlXCcgaXMgcmVsYXRpdmUgdG8gdGhpcyAqL1wKfVwKXAojcG9ydGFsZGV0YWlscyAuY2xvc2Uge1wKICBwb3NpdGlvbjogYWJzb2x1dGU7XAogIHRvcDogLTJweDtcCiAgcmlnaHQ6IDJweDtcCiAgY3Vyc29yOiBwb2ludGVyO1wKICBjb2xvcjogI0ZGQ0UwMDtcCiAgZm9udC1zaXplOiAxNnB4O1wKfVwKXAovKiBoaXN0b3J5IGRldGFpbHMgKi9cCiNoaXN0b3J5ZGV0YWlscyB7XAogIHRleHQtYWxpZ246IGNlbnRlcjtcCiAgY29sb3I6ICNmZmNlMDA7XAp9XApcCiNoaXN0b3J5ZGV0YWlscyAubWlzc2luZyB7XAp9XApcCiNoaXN0b3J5ZGV0YWlscyBzcGFuIHtcCiAgY29sb3I6ICNmZjRhNGE7XAp9XApcCiNoaXN0b3J5ZGV0YWlscyBzcGFuLmNvbXBsZXRlZCB7XAogIGNvbG9yOiAjMDNmZTAzO1wKfVwKXAovKiB1cGRhdGUgc3RhdHVzICovXAojdXBkYXRlc3RhdHVzIHtcCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4LCA0OCwgNzgsIDAuOSk7XAogIGJvcmRlci1ib3R0b206IDA7XAogIGJvcmRlci10b3A6IDFweCBzb2xpZCAjMjBBOEIxO1wKICBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyMEE4QjE7XAogIGJvdHRvbTogMDtcCiAgY29sb3I6ICNmZmNlMDA7XAogIGZvbnQtc2l6ZToxM3B4O1wKICBwYWRkaW5nOiA0cHg7XAogIHBvc2l0aW9uOiBmaXhlZDtcCiAgcmlnaHQ6IDA7XAogIHotaW5kZXg6IDMwMDI7XAogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICBib3gtc2l6aW5nOiBib3JkZXItYm94O1wKfVwKXAojdXBkYXRlc3RhdHVzIC5tYXAge1wKICBtYXJnaW4tbGVmdDogOHB4O1wKfVwKXAojbG9hZGxldmVsIHtcCiAgYmFja2dyb3VuZDogI0ZGRjtcCiAgY29sb3I6ICMwMDAwMDA7XAogIGRpc3BsYXk6IGlubGluZS1ibG9jaztcCiAgbWluLXdpZHRoOiAxLjhlbTtcCiAgYm9yZGVyOiAxcHggc29saWQgIzIwQThCMTtcCiAgYm9yZGVyLXdpZHRoOiAwIDFweDtcCiAgbWFyZ2luOiAtNHB4IDA7XAogIHBhZGRpbmc6IDRweCAwLjJlbTtcCn1cClwKLyogRGlhbG9nc1wKICovXAoudWktdG9vbHRpcCwgLnVpLWRpYWxvZyB7XAogIHBvc2l0aW9uOiBhYnNvbHV0ZTtcCiAgei1pbmRleDogOTUwMDtcCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4LCA0OCwgNzgsIDAuOSk7XAogIGJvcmRlcjogMXB4IHNvbGlkICMyMEE4QjE7XAogIGNvbG9yOiAjZWVlO1wKICBmb250LXNpemU6IDEzcHg7XAogIGxpbmUtaGVpZ2h0OiAxNXB4O1wKICBwYWRkaW5nOiAycHggNHB4O1wKfVwKXAoudWktdG9vbHRpcCB7XAogIG1heC13aWR0aDogMzAwcHg7XAp9XApcCi51aS13aWRnZXQtb3ZlcmxheSB7XAogIGhlaWdodDogMTAwJTtcCiAgbGVmdDogMDtcCiAgcG9zaXRpb246IGZpeGVkO1wKICB0b3A6IDA7XAogIHdpZHRoOiAxMDAlO1wKICB6LWluZGV4OiAxMDAwMDtcCiAgYmFja2dyb3VuZDogICM0NDQ7XAogIG9wYWNpdHk6IDAuNjtcCn1cClwKLnVpLW1vZGFsIHtcCiAgei1pbmRleDogMTAwMDEgIWltcG9ydGFudDtcCn1cClwKLnVpLXRvb2x0aXAge1wKICB6LWluZGV4OiAxMDAwMiAhaW1wb3J0YW50O1wKfVwKXAoudWktdG9vbHRpcCwgLnVpLWRpYWxvZyBhIHtcCiAgY29sb3I6ICNGRkNFMDA7XAp9XApcCi51aS1kaWFsb2cge1wKICBwYWRkaW5nOiAwO1wKICBib3JkZXItcmFkaXVzOiAycHg7XAp9XApcCi51aS1kaWFsb2ctbW9kYWwgLnVpLWRpYWxvZy10aXRsZWJhci1jbG9zZSB7XAogIGRpc3BsYXk6IG5vbmU7XAp9XApcCi51aS1kaWFsb2ctdGl0bGViYXIge1wKICBmb250LXNpemU6IDEzcHg7XAogIGxpbmUtaGVpZ2h0OiAxNXB4O1wKICB0ZXh0LWFsaWduOiBjZW50ZXI7XAogIHBhZGRpbmc6IDRweDtcCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4LCA2MCwgNzgsIDAuOSk7XAp9XApcCi51aS1kaWFsb2ctdGl0bGUge1wKICBmb250LXdlaWdodDogYm9sZDtcCiAgbWFyZ2luLWxlZnQ6IDhweDtcCiAgbWFyZ2luLXJpZ2h0OiA0NXB4O1wKICB3aWR0aDogY2FsYygxMDAlIC0gNDVweCk7XAp9XApcCi51aS1kaWFsb2ctdGl0bGUtYWN0aXZlIHtcCiAgY29sb3I6ICNmZmNlMDA7XAp9XApcCi51aS1kaWFsb2ctdGl0bGUtaW5hY3RpdmUge1wKICBjb2xvcjogI2ZmZmZmZjtcCn1cClwKLnVpLWRpYWxvZy10aXRsZWJhci1idXR0b24ge1wKICBwb3NpdGlvbjogYWJzb2x1dGU7XAogIGRpc3BsYXk6IHRhYmxlLWNlbGw7XAogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XAogIHRleHQtYWxpZ246IGNlbnRlcjtcCiAgd2lkdGg6IDE3cHg7XAogIGhlaWdodDogMTdweDtcCiAgdG9wOiAzcHg7XAogIGN1cnNvcjogcG9pbnRlcjtcCiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDMyLCAxNjgsIDE3Nyk7XAogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XAogIHBhZGRpbmc6IDA7XAp9XApcCi51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uOmFjdGl2ZSB7XAogIGJhY2tncm91bmQtY29sb3I6IHJnYigzMiwgMTY4LCAxNzcpO1wKfVwKXAoudWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jbG9zZSB7XAogIHJpZ2h0OiA0cHg7XAp9XApcCi51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uLWNvbGxhcHNlIHtcCiAgcmlnaHQ6IDI1cHg7XAp9XApcCi51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uLWNvbGxhcHNlLWV4cGFuZGVkIHtcCiAgLyogRm9yIGZ1dHVyZSBjaGFuZ2VzICovXAp9XApcCi51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uLWNvbGxhcHNlLWNvbGxhcHNlZCB7XAogIGJhY2tncm91bmQtY29sb3I6IHJnYigzMiwgMTY4LCAxNzcpO1wKfVwKXAoudWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jb2xsYXBzZTo6YWZ0ZXIsXAoudWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jbG9zZTo6YWZ0ZXIsXAoudWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jbG9zZTo6YmVmb3JlIHtcCiAgY29udGVudDogIiI7XAogIHBvc2l0aW9uOiBhYnNvbHV0ZTtcCiAgdG9wOiAzcHg7XAogIGxlZnQ6IDUwJTtcCiAgd2lkdGg6IDExcHg7XAogIG1hcmdpbi1sZWZ0OiAtNnB4O1wKICBoZWlnaHQ6IDA7XAogIGJvcmRlci10b3A6IDJweCBzb2xpZCByZ2IoMzIsIDE2OCwgMTc3KTtcCn1cCi51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uLWNsb3NlOjphZnRlciB7XAogIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzLjVweCkgcm90YXRlKDQ1ZGVnKTtcCiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMy41cHgpIHJvdGF0ZSg0NWRlZyk7XAp9XAoudWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jbG9zZTo6YmVmb3JlIHtcCiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDMuNXB4KSByb3RhdGUoLTQ1ZGVnKTtcCiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMy41cHgpIHJvdGF0ZSgtNDVkZWcpO1wKfVwKLnVpLWRpYWxvZy10aXRsZWJhci1idXR0b24udWktc3RhdGUtYWN0aXZlOjphZnRlcixcCi51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uLnVpLXN0YXRlLWFjdGl2ZTo6YmVmb3JlLFwKLnVpLWRpYWxvZy10aXRsZWJhci1idXR0b24udWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jb2xsYXBzZS1jb2xsYXBzZWQ6OmFmdGVyLFwKLnVpLWRpYWxvZy10aXRsZWJhci1idXR0b24udWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jb2xsYXBzZS1jb2xsYXBzZWQ6OmJlZm9yZSxcCi51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uOmFjdGl2ZTo6YWZ0ZXIsXAoudWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbjphY3RpdmU6OmJlZm9yZSB7XAogIGJvcmRlci10b3AtY29sb3I6IHJnYmEoOCwgNjAsIDc4LCAwLjkpO1wKfVwKXAoudWktZGlhbG9nLWNvbnRlbnQge1wKICBwYWRkaW5nOiAxMnB4O1wKICBvdmVyZmxvdzogYXV0bztcCiAgcG9zaXRpb246IHJlbGF0aXZlO1wKXAogIC8qIExpbWl0aW5nIHRoZSBoZWlnaHQgb2YgZGlhbG9nIGNvbnRlbnQgb24gc21hbGwgc2NyZWVucyAqL1wKICAvKiA1N3B4IOKAkyBoZWlnaHQgLnVpLWRpYWxvZy10aXRsZWJhciArIC51aS1kaWFsb2ctYnV0dG9ucGFuZSAqL1wKICAvKiAyNHB4IOKAkyBwYWRkaW5nIDEycHggKiAyICovXAogIC8qICAycHgg4oCTIGJvcmRlciAxcHggKiAyICovXAogIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSA1N3B4IC0gMjRweCAtIDJweCkgIWltcG9ydGFudDtcCn1cClwKLnVpLWRpYWxvZyB7XAogIG1heC13aWR0aDogY2FsYygxMDB2dyAtIDJweCk7XAp9XApcCkBtZWRpYSAobWluLXdpZHRoOiA3MDBweCkge1wKICAudWktZGlhbG9nIHtcCiAgICBtYXgtd2lkdGg6IDYwMHB4O1wKICB9XAp9XApcCi51aS1kaWFsb2ctY29udGVudC1oaWRkZW4ge1wKICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XAp9XApcCi51aS1kaWFsb2ctYnV0dG9ucGFuZSB7XAogIHBhZGRpbmc6IDZweDtcCiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICMyMEE4QjE7XAp9XApcCi51aS1kaWFsb2ctYnV0dG9uc2V0IHtcCiAgdGV4dC1hbGlnbjogcmlnaHQ7XAp9XApcCi51aS1kaWFsb2ctYnV0dG9uc2V0IGJ1dHRvbixcCi51aS1kaWFsb2ctY29udGVudCBidXR0b24ge1wKICBwYWRkaW5nOiAycHg7XAogIG1pbi13aWR0aDogNDBweDtcCiAgY29sb3I6ICNGRkNFMDA7XAogIGJvcmRlcjogMXB4IHNvbGlkICNGRkNFMDA7XAogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoOCwgNDgsIDc4LCAwLjkpO1wKfVwKXAoudWktZGlhbG9nLWJ1dHRvbnNldCBidXR0b246aG92ZXIge1wKICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcCn1cClwKdGQge1wKICBwYWRkaW5nOiAwO1wKICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1wKfVwKXAp0ZCArIHRkIHtcCiAgcGFkZGluZy1sZWZ0OiA0cHg7XAp9XApcCiNxcmNvZGUgPiBjYW52YXMge1wKICBib3JkZXI6IDhweCBzb2xpZCB3aGl0ZTtcCn1cClwKLyogcmVkZWVtIHJlc3VsdHMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXAoucmVkZWVtUmV3YXJkIHtcCiAgZm9udC1mYW1pbHk6IEluY29uc29sYXRhLCBDb25zb2xhcywgTWVubG8sICJDb3VyaWVyIE5ldyIsIG1vbm9zcGFjZTtcCiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1wKICBwYWRkaW5nOiAwO1wKICBmb250LXNpemU6IDE0cHg7XAp9XAoucmVkZWVtUmV3YXJkIC5pdGVtbGV2ZWwge1wKICBmb250LXdlaWdodDogYm9sZDtcCiAgdGV4dC1zaGFkb3c6IDAgMCAxcHggIzAwMDsgLyogTDggaXMgaGFyZCB0byByZWFkIG9uIGJsdWUgYmFja2dyb3VuZCAqL1wKfVwKLypcCi5yZWRlZW0tcmVzdWx0LXRhYmxlIHtcCiAgZm9udC1zaXplOiAxNHB4O1wKICB0YWJsZS1sYXlvdXQ6IGZpeGVkO1wKfVwKXAoucmVkZWVtLXJlc3VsdCB0ciA+IHRkOmZpcnN0LWNoaWxkIHtcCiAgd2lkdGg6IDUwcHg7XAogIHRleHQtYWxpZ246IHJpZ2h0O1wKfVwKXAoucmVkZWVtLXJlc3VsdC1odG1sIHtcCiAgZm9udC1mYW1pbHk6IEluY29uc29sYXRhLCBDb25zb2xhcywgTWVubG8sICJDb3VyaWVyIE5ldyIsIG1vbm9zcGFjZTtcCn1cCiovXApcCi5wbF9udWRnZV9kYXRlOmFmdGVyIHtcCiAgYmFja2dyb3VuZDogbm8tcmVwZWF0IHVybCgvL2NvbW1vbmRhdGFzdG9yYWdlLmdvb2dsZWFwaXMuY29tL2luZ3Jlc3MuY29tL2ltZy9udWRnZV9wb2ludHkucG5nKTtcCiAgcG9zaXRpb246YWJzb2x1dGU7XAogIGNvbnRlbnQ6IiI7XAogIGhlaWdodDoyMHB4O1wKICB3aWR0aDogNXB4O1wKICByaWdodDotNXB4O1wKICB0b3A6LTFweFwKfVwKXAoucGxfbnVkZ2VfZGF0ZSB7XAogIGJhY2tncm91bmQtY29sb3I6ICM3MjQ1MTA7XAogIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2ZmZDY1MjtcCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmZmQ2NTI7XAogIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZmZkNjUyO1wKICBjb2xvcjogI2ZmZDY1MjtcCiAgZGlzcGxheTogYmxvY2s7XAogIHBvc2l0aW9uOnJlbGF0aXZlO1wKICBoZWlnaHQ6IDE4cHg7XAogIHdpZHRoOiAzNnB4O1wKICBwYWRkaW5nLWxlZnQ6IDJweDtcCiAgbGVmdDogLTJweDtcCn1cClwKLnBsX251ZGdlX3BsYXllciB7XAogIGN1cnNvcjogcG9pbnRlcjtcCn1cClwKLnBsX251ZGdlX21lIHtcCiAgY29sb3I6ICNmZmQ2NTI7XAp9XApcCi5SRVNJU1RBTkNFIHtcCiAgY29sb3I6ICMwMGMyZmY7XAp9XApcCi5BTElFTlMsIC5FTkxJR0hURU5FRCB7XAogIGNvbG9yOiAjMjhmNDI4O1wKfVwKXAojcG9ydGFsX2hpZ2hsaWdodF9zZWxlY3Qge1wKICB6LWluZGV4OiAyNTAwO1wKICBmb250LXNpemU6MTFweDtcCiAgYmFja2dyb3VuZC1jb2xvcjojMEUzQzQ2O1wKICBjb2xvcjojZmZjZTAwO1wKICBvcmRlcjogLTEwMDtcCn1cClwKLmxlYWZsZXQtY29udHJvbC1zY2FsZSB7XAogIG9yZGVyOiAtOTA7XAp9XApcCi5sZWFmbGV0LWJhciB7XAogIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4yKTtcCiAgYm94LXNoYWRvdzogbm9uZTtcCn1cClwKLmxlYWZsZXQtYmFyIGEge1wKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XAp9XApcCi5sZWFmbGV0LWNvbnRyb2wtem9vbS1pbiwgLmxlYWZsZXQtY29udHJvbC16b29tLW91dCB7XAogIGJhY2tncm91bmQtc2l6ZTogMThweDtcCiAgZm9udC1zaXplOiAwICFpbXBvcnRhbnQ7XAp9XApcCi5sZWFmbGV0LWNvbnRyb2wtem9vbS1pbiB7XAogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz1cJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCcgdmlld0JveD1cJzAgMCAxOCAxOFwnJTNFJTNDcGF0aCBkPVwnTTkgM3YxMk0zIDloMTJcJyBzdHJva2U9XCdibGFja1wnIHN0cm9rZS13aWR0aD1cJzIuMlwnIGZpbGw9XCdub25lXCcvJTNFJTNDL3N2ZyUzRSIpO1wKfVwKXAoubGVhZmxldC1jb250cm9sLXpvb20tb3V0IHtcCiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPVwnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcJyB2aWV3Qm94PVwnMCAwIDE4IDE4XCclM0UlM0NwYXRoIGQ9XCdNMy41IDloMTFcJyBzdHJva2U9XCdibGFja1wnIHN0cm9rZS13aWR0aD1cJzIuMlwnIGZpbGw9XCdub25lXCcvJTNFJTNDL3N2ZyUzRSIpO1wKfVwKXApcCi5wb3J0YWxfZGV0YWlscyB0aCwgLnBvcnRhbF9kZXRhaWxzIHRkIHtcCiAgdmVydGljYWwtYWxpZ246IHRvcDtcCiAgdGV4dC1hbGlnbjogbGVmdDtcCn1cClwKLnBvcnRhbF9kZXRhaWxzIHRoIHtcCiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcCiAgcGFkZGluZy1yaWdodDogMWVtO1wKfVwKXAoucG9ydGFsX2RldGFpbHMgdHIucGFkZGluZy10b3AgdGgsIC5wb3J0YWxfZGV0YWlscyB0ci5wYWRkaW5nLXRvcCB0ZCB7XAogIHBhZGRpbmctdG9wOiAwLjdlbTtcCn1cClwKI3BsYXlfYnV0dG9uIHtcCiAgZGlzcGxheTogbm9uZTtcCn1cClwKXAovKiogYXJ0aWZhY3QgZGlhbG9nICoqKioqKioqKioqKioqKioqL1wKdGFibGUuYXJ0aWZhY3QgdHIgPiAqIHtcCiAgYmFja2dyb3VuZDogcmdiYSg4LCA0OCwgNzgsIDAuOSk7XAp9XApcCnRhYmxlLmFydGlmYWN0IHRkLmluZm8ge1wKICBtaW4td2lkdGg6IDExMHB4OyAvKiBtaW4td2lkdGggZm9yIGluZm8gY29sdW1uLCB0byBlbnN1cmUgcmVhbGx5IGxvbmcgcG9ydGFsIG5hbWVzIGRvblwndCBjcm93ZCB0aGluZ3Mgb3V0ICovXAp9XApcCnRhYmxlLmFydGlmYWN0IC5wb3J0YWwge1wKICBtaW4td2lkdGg6IDIwMHB4OyAvKiBtaW4td2lkdGggZm9yIHBvcnRhbCBuYW1lcywgdG8gZW5zdXJlIHJlYWxseSBsb25nIGxpc3RzIG9mIGFydGlmYWN0cyBkb25cJ3QgY3Jvd2QgbmFtZXMgb3V0ICovXAp9XApcClwKLyogbGVhZmxldCBwb3B1cHMgLSByZXN0eWxlIHRvIG1hdGNoIHRoZSB0aGVtZSBvZiBJSVRDICovXAojbWFwIC5sZWFmbGV0LXBvcHVwIHtcCiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XAp9XApcCiNtYXAgLmxlYWZsZXQtcG9wdXAtY29udGVudC13cmFwcGVyIHtcCiAgYm9yZGVyLXJhZGl1czogMHB4O1wKICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDBweDtcCiAgYm9yZGVyOiAxcHggc29saWQgIzIwQThCMTtcCiAgYmFja2dyb3VuZDogIzBlM2Q0ZTtcCiAgcG9pbnRlci1ldmVudHM6IGF1dG87XAp9XApcCiNtYXAgLmxlYWZsZXQtcG9wdXAtY29udGVudCB7XAogIGNvbG9yOiAjZmZjZTAwO1wKICBtYXJnaW46IDVweCA4cHg7XAp9XApcCiNtYXAgLmxlYWZsZXQtcG9wdXAtY2xvc2UtYnV0dG9uIHtcCiAgcGFkZGluZzogMnB4IDFweCAwIDA7XAogIGZvbnQtc2l6ZTogMTJweDtcCiAgbGluZS1oZWlnaHQ6IDhweDtcCiAgd2lkdGg6IDEwcHg7XAogIGhlaWdodDogMTBweDtcCiAgcG9pbnRlci1ldmVudHM6IGF1dG87XAp9XApcClwKI21hcCAubGVhZmxldC1wb3B1cC10aXAge1wKICAvKiBjaGFuZ2UgdGhlIHRpcCBmcm9tIGFuIGFycm93IHRvIGEgc2ltcGxlIGxpbmUgKi9cCiAgYmFja2dyb3VuZDogIzIwQThCMTtcCiAgd2lkdGg6IDFweDtcCiAgaGVpZ2h0OiAyMHB4O1wKICBwYWRkaW5nOiAwO1wKICBtYXJnaW46IDAgMCAwIDIwcHg7XAogIC13ZWJraXQtdHJhbnNmb3JtOiBub25lO1wKICAtbW96LXRyYW5zZm9ybTogbm9uZTtcCiAgLW1zLXRyYW5zZm9ybTogbm9uZTtcCiAgLW8tdHJhbnNmb3JtOiBub25lO1wKICB0cmFuc2Zvcm06IG5vbmU7XAp9XApcClwKLyogbWlzYyAqL1wKLmxheWVyX29mZl93YXJuaW5nIHtcCiAgY29sb3I6ICNGRkNFMDA7XAogIG1hcmdpbjogOHB4O1wKICB0ZXh0LWFsaWduOiBjZW50ZXI7XAp9XApcCi5jdXJzb3JfaGVscCB7XAogIGN1cnNvcjogaGVscDtcCn1cClwKLyogcmVnaW9uIHNjb3JlcyAqL1wKLmNlbGxzY29yZSAudWktYWNjb3JkaW9uLWhlYWRlciwgLmNlbGxzY29yZSAudWktYWNjb3JkaW9uLWNvbnRlbnQge1wKCWJvcmRlcjogMXB4IHNvbGlkICMyMGE4YjE7XAoJbWFyZ2luLXRvcDogLTFweDtcCglkaXNwbGF5OiBibG9jaztcCn1cCi5jZWxsc2NvcmUgLnVpLWFjY29yZGlvbi1oZWFkZXIge1wKCWNvbG9yOiAjZmZjZTAwO1wKCW91dGxpbmU6IG5vbmVcCn1cCi5jZWxsc2NvcmUgLnVpLWFjY29yZGlvbi1oZWFkZXI6YmVmb3JlIHtcCglmb250LXNpemU6IDE4cHg7XAoJbWFyZ2luLXJpZ2h0OiAycHg7XAoJY29udGVudDogIuKKniI7XAp9XAouY2VsbHNjb3JlIC51aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZTpiZWZvcmUge1wKCWNvbnRlbnQ6ICLiip8iO1wKfVwKLmNlbGxzY29yZSB0YWJsZSB7XAoJd2lkdGg6IDkwJTtcCgltYXgtd2lkdGg6IDM2MHB4OyAvKiBwcmV2ZW50IHdpZHRoIGNoYW5nZSBvbiBzY3JvbGxiYXIgYXBwZWFyYW5jZSAoYWZ0ZXIgYW5pbWF0aW9uKSAqL1wKfVwKXAovKiBwcmV2ZW50IG5vbmZ1bmN0aW9uYWwgaG9yaXpvbnRhbCBzY3JvbGxiYXIgaW4gQ2hyb21lIChwZXJoYXBzIGpRdWVyeSBpc3N1ZSkgKi9cCi5jZWxsc2NvcmUgLmhpc3RvcnljaGFydCA+IGRpdiB7XAogIG92ZXJmbG93OiBhdXRvO1wKfVwKXAouY2VsbHNjb3JlIC5sb2dzY2FsZSB7XAogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XAogIG1hcmdpbi10b3A6IDA7XAp9XApcCkAtbW96LWRvY3VtZW50IHVybC1wcmVmaXgoKSB7XAogLmNlbGxzY29yZSAubG9nc2NhbGUge1wKICAgIHRyYW5zZm9ybTogc2NhbGUoMC44KTtcCiAgfVwKXAogIC8qIHByZXZlbnQgbm9uZnVuY3Rpb25hbCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gRmlyZWZveCAocGVyaGFwcyBqUXVlcnkgaXNzdWUpICovXAogIC5jZWxsc2NvcmUgPiAuaGlzdG9yeWNoYXJ0IHtcCiAgICBvdmVyZmxvdy15OiBoaWRkZW4gIWltcG9ydGFudDtcCiAgfVwKfVwKXApnLmNoZWNrcG9pbnQ6aG92ZXIgY2lyY2xlIHtcCiAgZmlsbC1vcGFjaXR5OiAxO1wKICBzdHJva2Utd2lkdGg6IDJweDtcCn1cClwKLmNlbGxzY29yZSB0aCwgLmNlbGxzY29yZSB0ZCB7XAoJdGV4dC1hbGlnbjogbGVmdDtcCglwYWRkaW5nLWxlZnQ6IDVweDtcCn1cCi5jaGVja3BvaW50X3RhYmxlIHtcCglib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1wKfVwKLmNoZWNrcG9pbnRfdGFibGUgdGgsIC5jaGVja3BvaW50X3RhYmxlIHRkIHtcCgl0ZXh0LWFsaWduOiByaWdodDtcCn1cClwKLmNlbGxzY29yZSAjb3ZlcnZpZXcge1wKICB3aWR0aDogMTAwJTtcCn1cClwKLmNlbGxzY29yZSAjb3ZlcnZpZXcgdGQge1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKICB3aWR0aDogMSU7XAogIHRleHQtYWxpZ246IHJpZ2h0O1wKfVwKXAouY2VsbHNjb3JlICNvdmVydmlldyB0aCB7XAogIHdoaXRlLXNwYWNlOiBub3dyYXA7XAogIHdpZHRoOiAxJTtcCiAgdGV4dC1hbGlnbjogbGVmdDtcCiAgcGFkZGluZy1sZWZ0OiA0cHg7XAp9XApcCi5jaGVja3BvaW50dG9vbHRpcCB7XAogIG1pbi13aWR0aDogMTgwcHg7XAp9XApcCi5jaGVja3BvaW50X3RpbWVycyB0YWJsZSB7XAogIHBhZGRpbmctdG9wOiA0cHg7XAogIHdpZHRoOiAxMDAlO1wKfVwKXAovKiB0YWJzICovXAoudWktdGFicy1uYXYge1wKCWRpc3BsYXk6IGJsb2NrO1wKCWJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMjBhOGIxO1wKCWJvcmRlci10b3A6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcCgltYXJnaW46IDNweCAwIDA7XAoJcGFkZGluZzogMDtcCn1cCi51aS10YWJzLW5hdjo6YWZ0ZXIge1wKCWNvbnRlbnQ6IFwnXCc7XAoJY2xlYXI6IGxlZnQ7XAoJZGlzcGxheTogYmxvY2s7XAoJaGVpZ2h0OiAwO1wKCXdpZHRoOiAwO1wKfVwKLnVpLXRhYnMtbmF2IGxpIHtcCglsaXN0LXN0eWxlOiBub25lO1wKCWRpc3BsYXk6IGJsb2NrO1wKCWZsb2F0OmxlZnQ7XAoJbWFyZ2luOiAwIDAgLTFweDtcCglib3JkZXI6IDFweCBzb2xpZCAjMjBhOGIxO1wKfVwKLnVpLXRhYnMtbmF2IGxpLnVpLXRhYnMtYWN0aXZlIHtcCglib3JkZXItYm90dG9tLWNvbG9yOiAjMEYyQzNGO1wKCWJhY2tncm91bmQ6ICMwRjJDM0Y7XAoJYm9yZGVyLXdpZHRoOiAycHggMnB4IDFweDtcCglmb250LXdlaWdodDogYm9sZDtcCgltYXJnaW46IC0xcHggMXB4O1wKfVwKLnVpLXRhYnMtbmF2IGEge1wKCWRpc3BsYXk6IGlubGluZS1ibG9jaztcCglwYWRkaW5nOiAwLjJlbSAwLjdlbTtcCn1cCi51aS10YWJzLW5hdiAudWktaWNvbiB7XAoJZGlzcGxheTogaW5saW5lLWJsb2NrO1wKCWZvbnQtc2l6ZTogMDtcCgloZWlnaHQ6IDIycHg7XAoJb3ZlcmZsb3c6IGhpZGRlbjtcCglwb3NpdGlvbjogcmVsYXRpdmU7XAoJdmVydGljYWwtYWxpZ246IHRvcDtcCgl3aWR0aDogMTZweDtcCn1cCi51aS10YWJzLW5hdiAudWktaWNvbi1jbG9zZTo6YmVmb3JlIHtcCgljb250ZW50OiAiw5ciO1wKCWZvbnQtc2l6ZTogMTZweDtcCgloZWlnaHQ6IDE2cHg7XAoJcG9zaXRpb246IGFic29sdXRlO1wKCXRleHQtYWxpZ246IGNlbnRlcjtcCgl0b3A6IDJweDtcCgl2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XAoJd2lkdGg6IDE2cHg7XAoJY3Vyc29yOiBwb2ludGVyO1wKfVwKXApzdmcuaWNvbi1idXR0b24ge1wKCWZpbGw6IGN1cnJlbnRDb2xvcjtcCn1cClwKLmxlYWZsZXQtbWFya2VyLWljb24gPiBzdmcge1wKCWhlaWdodDogaW5oZXJpdDtcCgl3aWR0aDogaW5oZXJpdDtcCn1cClwKLyogV2FybmluZyB0ZXh0ICovXAoud2FybmluZyB7XAogIGNvbG9yOiAjZjc3O1wKICBmb250LXdlaWdodDogYm9sZDtcCiAgdGV4dC1zaGFkb3c6IDFweCAxcHggYmxhY2ssIC0xcHggLTFweCBibGFjaztcCiAgdGV4dC1hbGlnbjogY2VudGVyO1wKfVwKXAoudWktZGlhbG9nLWFib3V0SUlUQyAucGx1Z2luLWlzLXN0YW5kYXJkIHtcCiAgY29sb3I6IGRhcmtncmF5O1wKfVwKXAoudWktZGlhbG9nLWFib3V0SUlUQyAucGx1Z2luLWVycm9yIHtcCiAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XAp9XApcCi51aS1kaWFsb2ctbm9uLXN0YW5kYXJkLWludGVsIC51aS1kaWFsb2ctYnV0dG9uc2V0IGJ1dHRvbjpmaXJzdC1jaGlsZCB7XAogIGRpc3BsYXk6IG5vbmU7XAp9XApcCi51aS1kaWFsb2ctbm9uLXN0YW5kYXJkLWludGVsIC51aS1kaWFsb2ctYnV0dG9uc2V0IGJ1dHRvbjpudGgtY2hpbGQoMikge1wKICBmbG9hdDogbGVmdDtcCn1cCicgKwogICc8L3N0eWxlPicgKwogIC8vIG5vdGU6IHNtYXJ0cGhvbmUuY3NzIGluamVjdGlvbiBtb3ZlZCBpbnRvIGNvZGUvc21hcnRwaG9uZS5qcwogICc8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSIvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvOjEwMCwxMDBpdGFsaWMsMzAwLDMwMGl0YWxpYyw0MDAsNDAwaXRhbGljLDUwMCw1MDBpdGFsaWMsNzAwLDcwMGl0YWxpYyZzdWJzZXQ9bGF0aW4sY3lyaWxsaWMtZXh0LGdyZWVrLWV4dCxncmVlayx2aWV0bmFtZXNlLGxhdGluLWV4dCxjeXJpbGxpYyIvPic7CgovLyByZW1vdmUgYm9keSBlbGVtZW50IGVudGlyZWx5IHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMKZG9jdW1lbnQuYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTsKZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPQogICc8ZGl2IGlkPSJtYXAiPkxvYWRpbmcsIHBsZWFzZSB3YWl0PC9kaXY+JyArCiAgJzxkaXYgaWQ9ImNoYXRjb250cm9scyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+JyArCiAgJzxhIGFjY2Vzc2tleT0iMCIgdGl0bGU9IlswXSI+PHNwYW4gY2xhc3M9InRvZ2dsZSI+PC9zcGFuPjwvYT4nICsKICAnPC9kaXY+JyArCiAgJzxkaXYgaWQ9ImNoYXQiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPjwvZGl2PicgKwogICc8Zm9ybSBpZD0iY2hhdGlucHV0IiBzdHlsZT0iZGlzcGxheTpub25lIj48dGFibGU+PHRyPicgKwogICcgIDx0ZD48dGltZT48L3RpbWU+PC90ZD4nICsKICAnICA8dGQ+PG1hcms+dGVsbCBmYWN0aW9uOjwvbWFyaz48L3RkPicgKwogICcgIDx0ZD48aW5wdXQgaWQ9ImNoYXR0ZXh0IiB0eXBlPSJ0ZXh0IiBtYXhsZW5ndGg9IjI1NiIgYWNjZXNza2V5PSJjIiB0aXRsZT0iW2NdIiAvPjwvdGQ+JyArCiAgJzwvdHI+PC90YWJsZT48L2Zvcm0+JyArCiAgJzxhIGlkPSJzaWRlYmFydG9nZ2xlIiBhY2Nlc3NrZXk9ImkiIHRpdGxlPSJUb2dnbGUgc2lkZWJhciBbaV0iPjxzcGFuIGNsYXNzPSJ0b2dnbGUgY2xvc2UiPjwvc3Bhbj48L2E+JyArCiAgJzxkaXYgaWQ9InNjcm9sbHdyYXBwZXIiPicgKyAvLyBlbmFibGUgc2Nyb2xsaW5nIGZvciBzbWFsbCBzY3JlZW5zCiAgJyAgPGRpdiBpZD0ic2lkZWJhciIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPicgKwogICcgICAgPGRpdiBpZD0icGxheWVyc3RhdCI+dDwvZGl2PicgKwogICcgICAgPGRpdiBpZD0iZ2FtZXN0YXQiPiZuYnNwO2xvYWRpbmcgZ2xvYmFsIGNvbnRyb2wgc3RhdHM8L2Rpdj4nICsKICAnICAgIDxkaXYgaWQ9InNlYXJjaHdyYXBwZXIiPicgKwogICcgICAgICA8ZGl2IGlkPSJzZWFyY2hib3giPicgKwogICcgICAgICAgIDxkaXYgaWQ9InNlYXJjaGljb24iPjxpbWcgc3JjPSInICsKICAnZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUdobGFXZG9kRDBpTWpSd2VDSWdkbWxsZDBKdmVEMGlNQ0F0T1RZd0lEazJNQ0E1TmpBaUlIZHBaSFJvUFNJeU5IQjRJaUJtYVd4c1BTSWpRa0pDUWtKQ0lqNDhjR0YwYUNCa1BTSk5OemcwTFRFeU1DQTFNekl0TXpjeWNTMHpNQ0F5TkMwMk9TQXpPSFF0T0RNZ01UUnhMVEV3T1NBd0xURTROQzQxTFRjMUxqVlVNVEl3TFRVNE1IRXdMVEV3T1NBM05TNDFMVEU0TkM0MVZETTRNQzA0TkRCeE1UQTVJREFnTVRnMExqVWdOelV1TlZRMk5EQXROVGd3Y1RBZ05EUXRNVFFnT0ROMExUTTRJRFk1YkRJMU1pQXlOVEl0TlRZZ05UWmFUVE00TUMwME1EQnhOelVnTUNBeE1qY3VOUzAxTWk0MVZEVTJNQzAxT0RCeE1DMDNOUzAxTWk0MUxURXlOeTQxVkRNNE1DMDNOakJ4TFRjMUlEQXRNVEkzTGpVZ05USXVOVlF5TURBdE5UZ3djVEFnTnpVZ05USXVOU0F4TWpjdU5WUXpPREF0TkRBd1dpSXZQand2YzNablBnPT0nICsKICAnIiBhbHQ9IlNlYXJjaCIvPjwvZGl2PicgKwogICcgICAgICAgIDxkaXYgaWQ9InNlYXJjaGNhbmNlbCI+PGltZyBzcmM9IicgKwogICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJR2hsYVdkb2REMGlNalJ3ZUNJZ2RtbGxkMEp2ZUQwaU1DQXRPVFl3SURrMk1DQTVOakFpSUhkcFpIUm9QU0l5TkhCNElpQm1hV3hzUFNJalFrSkNRa0pDSWo0OGNHRjBhQ0JrUFNKdE16TTJMVEk0TUMwMU5pMDFOaUF4TkRRdE1UUTBMVEUwTkMweE5ETWdOVFl0TlRZZ01UUTBJREUwTkNBeE5ETXRNVFEwSURVMklEVTJMVEUwTkNBeE5ETWdNVFEwSURFME5DMDFOaUExTmkweE5ETXRNVFEwTFRFME5DQXhORFJhSWk4K1BDOXpkbWMrJyArCiAgJyIgYWx0PSJDYW5jZWwgc2VhcmNoIi8+PC9kaXY+JyArCiAgJyAgICAgICAgPGJ1dHRvbiB0aXRsZT0iQ3VycmVudCBsb2NhdGlvbiIgaWQ9ImJ1dHRvbmdlb2xvY2F0aW9uIj48aW1nIHNyYz0iJyArCiAgJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlHaGxhV2RvZEQwaU1qUndlQ0lnZG1sbGQwSnZlRDBpTUNBdE9UWXdJRGsyTUNBNU5qQWlJSGRwWkhSb1BTSXlOSEI0SWlCbWFXeHNQU0lqUWtKQ1FrSkNJajQ4Y0dGMGFDQmtQU0pOTkRRd0xUUXlkaTA0TUhFdE1USTFMVEUwTFRJeE5DNDFMVEV3TXk0MVZERXlNaTAwTkRCSU5ESjJMVGd3YURnd2NURTBMVEV5TlNBeE1ETXVOUzB5TVRRdU5WUTBOREF0T0RNNGRpMDRNR2c0TUhZNE1IRXhNalVnTVRRZ01qRTBMalVnTVRBekxqVlVPRE00TFRVeU1HZzRNSFk0TUdndE9EQnhMVEUwSURFeU5TMHhNRE11TlNBeU1UUXVOVlExTWpBdE1USXlkamd3YUMwNE1GcHROREF0TVRVNGNURXhOaUF3SURFNU9DMDRNblE0TWkweE9UaHhNQzB4TVRZdE9ESXRNVGs0ZEMweE9UZ3RPREp4TFRFeE5pQXdMVEU1T0NBNE1uUXRPRElnTVRrNGNUQWdNVEUySURneUlERTVPSFF4T1RnZ09ESmFiVEF0TVRJd2NTMDJOaUF3TFRFeE15MDBOM1F0TkRjdE1URXpjVEF0TmpZZ05EY3RNVEV6ZERFeE15MDBOM0UyTmlBd0lERXhNeUEwTjNRME55QXhNVE54TUNBMk5pMDBOeUF4TVROMExURXhNeUEwTjFwdE1DMDRNSEV6TXlBd0lEVTJMalV0TWpNdU5WUTFOakF0TkRnd2NUQXRNek10TWpNdU5TMDFOaTQxVkRRNE1DMDFOakJ4TFRNeklEQXROVFl1TlNBeU15NDFWRFF3TUMwME9EQnhNQ0F6TXlBeU15NDFJRFUyTGpWVU5EZ3dMVFF3TUZwdE1DMDRNRm9pTHo0OEwzTjJaejQ9JyArCiAgJyIgYWx0PSJDdXJyZW50IGxvY2F0aW9uIi8+PC9idXR0b24+JyArCiAgJyAgICAgICAgPGlucHV0IGlkPSJzZWFyY2giIHBsYWNlaG9sZGVyPSJTZWFyY2ggbG9jYXRpb27igKYiIHR5cGU9InNlYXJjaCIgYWNjZXNza2V5PSJmIiB0aXRsZT0iU2VhcmNoIGZvciBhIHBsYWNlIFtmXSIvPicgKwogICcgICAgICA8L2Rpdj4nICsKICAnICAgIDwvZGl2PicgKwogICcgICAgPGRpdiBpZD0icG9ydGFsZGV0YWlscyI+PC9kaXY+JyArCiAgJyAgICA8aW5wdXQgaWQ9InJlZGVlbSIgcGxhY2Vob2xkZXI9IlJlZGVlbSBjb2Rl4oCmIiB0eXBlPSJ0ZXh0Ii8+JyArCiAgJyAgICA8ZGl2IGlkPSJ0b29sYm94X2NvbXBvbmVudCI+PC9kaXY+JyArCiAgJyAgICA8ZGl2IGlkPSJ0b29sYm94Ij48L2Rpdj4nICsKICAnICA8L2Rpdj4nICsKICAnPC9kaXY+JyArCiAgJzxkaXYgaWQ9InVwZGF0ZXN0YXR1cyI+PGRpdiBpZD0iaW5uZXJzdGF0dXMiPjwvZGl2PjwvZGl2PicgKwogIC8vIGF2b2lkIGVycm9yIGJ5IHN0b2NrIEpTCiAgJzxkaXYgaWQ9InBsYXlfYnV0dG9uIj48L2Rpdj4nICsKICAnPGRpdiBpZD0iaGVhZGVyIj48ZGl2IGlkPSJuYXYiPjwvZGl2PjwvZGl2Pic7CgovKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8KCi8qKgogKiBDT05GSUcgT1BUSU9OUwogKiBAbmFtZXNwYWNlIGNvbmZpZ19vcHRpb25zCiAqLwoKLyoqCiAqIENvbnRyb2xzIGhvdyBvZnRlbiB0aGUgbWFwIHNob3VsZCByZWZyZXNoLCBpbiBzZWNvbmRzLCBkZWZhdWx0IDMwLgogKiBAdHlwZSB7bnVtYmVyfQogKiBAbWVtYmVyb2YgY29uZmlnX29wdGlvbnMKICovCndpbmRvdy5SRUZSRVNIID0gMzA7CgovKioKICogQ29udHJvbHMgdGhlIGV4dHJhIHJlZnJlc2ggZGVsYXkgcGVyIHpvb20gbGV2ZWwsIGluIHNlY29uZHMsIGRlZmF1bHQgNS4KICogQHR5cGUge251bWJlcn0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuWk9PTV9MRVZFTF9BREogPSA1OwoKLyoqCiAqIFdhaXQgdGhpcyBsb25nIGJlZm9yZSByZWZyZXNoaW5nIHRoZSB2aWV3IGFmdGVyIHRoZSBtYXAgaGFzIGJlZW4gbW92ZWQsIGluIHNlY29uZHMsIGRlZmF1bHQgMi41CiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBtZW1iZXJvZiBjb25maWdfb3B0aW9ucwogKi8Kd2luZG93Lk9OX01PVkVfUkVGUkVTSCA9IDIuNTsKCi8qKgogKiBMaW1pdCBvbiByZWZyZXNoIHRpbWUgc2luY2UgcHJldmlvdXMgcmVmcmVzaCwgbGltaXRpbmcgcmVwZWF0ZWQgbW92ZSByZWZyZXNoIHJhdGUsIGluIHNlY29uZHMsIGRlZmF1bHQgMTAKICogQHR5cGUge251bWJlcn0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuTUlOSU1VTV9PVkVSUklERV9SRUZSRVNIID0gMTA7CgovKioKICogQ29udHJvbHMgaG93IGxvbmcgdG8gd2FpdCBiZXR3ZWVuIHJlZnJlc2hpbmcgdGhlIGdsb2JhbCBzY29yZSwgaW4gc2Vjb25kcywgZGVmYXVsdCAxNSo2MCAoMTUgbWlucykKICogQHR5cGUge251bWJlcn0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuUkVGUkVTSF9HQU1FX1NDT1JFID0gMTUgKiA2MDsKCi8qKgogKiBUaGUgbWF4aW11bSBpZGxlIHRpbWUgaW4gc2Vjb25kcyBiZWZvcmUgdGhlIG1hcCBzdG9wcyB1cGRhdGluZywgaW4gc2Vjb25kcywgZGVmYXVsdCAxNSo2MCAoMTUgbWlucykKICogQHR5cGUge251bWJlcn0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuTUFYX0lETEVfVElNRSA9IDE1ICogNjA7CgovKioKICogSG93IG11Y2ggc3BhY2UgdG8gbGVhdmUgZm9yIHNjcm9sbGJhcnMsIGluIHBpeGVscywgZGVmYXVsdCAyMC4KICogQHR5cGUge251bWJlcn0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuSElEREVOX1NDUk9MTEJBUl9BU1NVTUVEX1dJRFRIID0gMjA7CgovKioKICogSG93IHdpZGUgc2hvdWxkIHRoZSBzaWRlYmFyIGJlLCBpbiBwaXhlbHMsIGRlZmF1bHQgMzAwLgogKiBAdHlwZSB7bnVtYmVyfQogKiBAbWVtYmVyb2YgY29uZmlnX29wdGlvbnMKICovCndpbmRvdy5TSURFQkFSX1dJRFRIID0gMzAwOwoKLyoqCiAqIENvbnRyb2xzIHJlcXVlc3RpbmcgY2hhdCBkYXRhIGJhc2VkIG9uIHRoZSBwaXhlbCBkaXN0YW5jZSBmcm9tIHRoZSBsaW5lIGN1cnJlbnRseSBpbiB2aWV3CiAqIGFuZCB0aGUgdG9wIG9mIGhpc3RvcnksIGluIHBpeGVscywgZGVmYXVsdCAyMDAKICogQHR5cGUge251bWJlcn0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuQ0hBVF9SRVFVRVNUX1NDUk9MTF9UT1AgPSAyMDA7CgovKioKICogQ29udHJvbHMgaGVpZ2h0IG9mIGNoYXQgd2hlbiBjaGF0IGlzIGNvbGxhcHNlZCwgaW4gcGl4ZWxzLCBkZWZhdWx0IDYwCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBtZW1iZXJvZiBjb25maWdfb3B0aW9ucwogKi8Kd2luZG93LkNIQVRfU0hSSU5LRUQgPSA2MDsKCi8qKgogKiBXaGF0IGNvbG91ciBzaG91bGQgdGhlIHNlbGVjdGVkIHBvcnRhbCBiZSwgc3RyaW5nKGNzcyBoZXggY29kZSksIGRlZmF1bHQg4oCYI2YwZuKAmSAoaG90IHBpbmspCiAqIEB0eXBlIHtzdHJpbmd9CiAqIEBtZW1iZXJvZiBjb25maWdfb3B0aW9ucwogKi8Kd2luZG93LkNPTE9SX1NFTEVDVEVEX1BPUlRBTCA9ICcjZjBmJzsKCi8qKgogKiBEZWZpbmVzIHRoZSBjb2xvciB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIGRpZmZlcmVudCB0ZWFtcywgdXNlZCBpbiB2YXJpb3VzIGVsZW1lbnRzIHN1Y2ggYXMgcG9ydGFscywgcGxheWVyIG5hbWVzLCBldGMuCiAqIFRoZSBjb2xvcnMgYXJlIHJlcHJlc2VudGVkIGluIGEgQ1NTIGhleCBjb2RlIGZvcm1hdC4KICogVGhlIGFycmF5IGZvcm1hdCByZXByZXNlbnRzOiBbbm9uZSwgcmVzLCBlbmwsIG1hY10uCiAqIEB0eXBlIHtzdHJpbmdbXX0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuQ09MT1JTID0gWycjRkY2NjAwJywgJyMwMDg4RkYnLCAnIzAzREMwMycsICcjRkYwMDI4J107CgovKioKICogQ29sb3VyIHZhbHVlcyBmb3IgbGV2ZWxzLCBjb25zaXN0ZW50IHdpdGggSW5ncmVzcywgd2l0aCBpbmRleCAwIGJlaW5nIHdoaXRlIGZvciBuZXV0cmFsIHBvcnRhbHMuCiAqIEB0eXBlIHtzdHJpbmdbXX0KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuQ09MT1JTX0xWTCA9IFsnIzAwMCcsICcjRkVDRTVBJywgJyNGRkE2MzAnLCAnI0ZGNzMxNScsICcjRTQwMDAwJywgJyNGRDI5OTInLCAnI0VCMjZDRCcsICcjQzEyNEUwJywgJyM5NjI3RjQnXTsKCi8qKgogKiBDb2xvdXIgdmFsdWVzIGZvciBkaXNwbGF5aW5nIG1vZHMsIGNvbnNpc3RlbnQgd2l0aCBJbmdyZXNzLiBWZXJ5IFJhcmUgYWxzbyB1c2VkIGZvciBBWEEgc2hpZWxkcyBhbmQgVWx0cmEgTGlua3MuCiAqIEB0eXBlIHtvYmplY3R9CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWRVJZX1JBUkU9I2IwOGNmZgogKiBAcHJvcGVydHkge3N0cmluZ30gUkFSRT0jNzNhOGZmCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBDT01NT049IzhjZmZiZgogKiBAbWVtYmVyb2YgY29uZmlnX29wdGlvbnMKICovCndpbmRvdy5DT0xPUlNfTU9EID0geyBWRVJZX1JBUkU6ICcjYjA4Y2ZmJywgUkFSRTogJyM3M2E4ZmYnLCBDT01NT046ICcjOGNmZmJmJyB9OwoKLyoqCiAqIFdoYXQgY29sb3VyIHNob3VsZCB0aGUgaGFja2luZyByYW5nZSBjaXJjbGUgYmUgKHRoZSBzbWFsbCBjaXJjbGUgdGhhdCBhcHBlYXJzIGFyb3VuZCBhIHNlbGVjdGVkIHBvcnRhbCwKICogbWFya2luZyBhIH40MCBtZXRyZSByYWRpdXMpLCBzdHJpbmcoY3NzIGNvbG91ciB2YWx1ZSksIGRlZmF1bHQg4oCYb3Jhbmdl4oCZCiAqIEB0eXBlIHtzdHJpbmd9CiAqIEBtZW1iZXJvZiBjb25maWdfb3B0aW9ucwogKi8Kd2luZG93LkFDQ0VTU19JTkRJQ0FUT1JfQ09MT1IgPSAnb3JhbmdlJzsKCi8qKgogKiBXaGF0IGNvbG91ciBzaG91bGQgdGhlIGxpbmthYmxlIHJhbmdlIGNpcmNsZSBiZSwgc3RyaW5nKGNzcyBjb2xvdXIgdmFsdWUpLCBkZWZhdWx0IOKAmHJlZOKAmQogKiBAdHlwZSB7c3RyaW5nfQogKiBAbWVtYmVyb2YgY29uZmlnX29wdGlvbnMKICovCndpbmRvdy5SQU5HRV9JTkRJQ0FUT1JfQ09MT1IgPSAncmVkJzsKCi8qKgogKiBNaW4gem9vbSBmb3IgaW50ZWwgbWFwIC0gc2hvdWxkIG1hdGNoIHRoYXQgdXNlZCBieSBzdG9jayBpbnRlbCwgZGVmYXVsdCAzCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBtZW1iZXJvZiBjb25maWdfb3B0aW9ucwogKi8Kd2luZG93Lk1JTl9aT09NID0gMzsKCi8qKgogKiBVc2VkIHdoZW4gem9vbSBsZXZlbCBpcyBub3Qgc3BlY2lmaWVkIGV4cGxpY2l0bHkgKG11c3QgY29udGFpbiBhbGwgdGhlIHBvcnRhbHMpCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBtZW1iZXJvZiBjb25maWdfb3B0aW9ucwogKi8Kd2luZG93LkRFRkFVTFRfWk9PTSA9IDE1OwoKLyoqCiAqIFVSTCBvZiB0aGUgZGVmYXVsdCBpbWFnZSBmb3IgdGhlIHBvcnRhbAogKiBAdHlwZSB7c3RyaW5nfQogKiBAbWVtYmVyb2YgY29uZmlnX29wdGlvbnMKICovCndpbmRvdy5ERUZBVUxUX1BPUlRBTF9JTUcgPSAnLy9jb21tb25kYXRhc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9pbmdyZXNzLmNvbS9pbWcvZGVmYXVsdC1wb3J0YWwtaW1hZ2UucG5nJzsKCi8qKgogKiBVUkwgdG8gY2FsbCB0aGUgTm9taW5hdGltIGdlb2NvZGVyIHNlcnZpY2UsIHN0cmluZy4KICogQHR5cGUge3N0cmluZ30KICogQG1lbWJlcm9mIGNvbmZpZ19vcHRpb25zCiAqLwp3aW5kb3cuTk9NSU5BVElNID0gJy8vbm9taW5hdGltLm9wZW5zdHJlZXRtYXAub3JnL3NlYXJjaD9mb3JtYXQ9anNvbiZwb2x5Z29uX2dlb2pzb249MSZxPSc7CgovKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8KCi8qKgogKiBJTkdSRVNTIENPTlNUQU5UUwogKiBodHRwOi8vZGVjb2RlaW5ncmVzcy5tZS8yMDEyLzExLzE4L2luZ3Jlc3MtcG9ydGFsLWxldmVscy1hbmQtbGluay1yYW5nZS8KICogQG5hbWVzcGFjZSBpbmdyZXNzX2NvbnN0YW50cwogKi8KCi8qKgogKiBSZXNvbmF0b3IgZW5lcmd5IHBlciBsZXZlbCwgMS1iYXNlZCBhcnJheSwgWE0KICogQHR5cGUge251bWJlcltdfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuUkVTT19OUkcgPSBbMCwgMTAwMCwgMTUwMCwgMjAwMCwgMjUwMCwgMzAwMCwgNDAwMCwgNTAwMCwgNjAwMF07CgovKioKICogTWF4aW11bSByYWRpdXMgYXJvdW5kIGEgcG9ydGFsIGZyb20gd2hpY2ggdGhlIHBvcnRhbCBpcyBoYWNrYWJsZSwgbWV0cmVzLgogKiBAdHlwZSB7bnVtYmVyfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuSEFDS19SQU5HRSA9IDQwOwoKLyoqCiAqIFRoZSBtYXhpbXVtIHJhZGl1cyBhcm91bmQgdGhlIHBvcnRhbCBmcm9tIHdoaWNoIHRoZSBNYWNoaW5lIGNhbiBsaW5rCiAqIEB0eXBlIHtudW1iZXJbXX0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBpbmdyZXNzX2NvbnN0YW50cwogKi8Kd2luZG93LkxJTktfUkFOR0VfTUFDID0gWzAsIDIwMCwgMjUwLCAzNTAsIDQwMCwgNTAwLCA2MDAsIDcwMCwgMTAwMCwgMTAwMF07IC8vIGluIG1ldGVycwoKLyoqCiAqIFJlc29uYXRvciBvY3RhbnQgY2FyZGluYWwgZGlyZWN0aW9ucwogKiBAdHlwZSB7c3RyaW5nW119CiAqIEBjb25zdAogKiBAbWVtYmVyb2YgaW5ncmVzc19jb25zdGFudHMKICovCndpbmRvdy5PQ1RBTlRTID0gWydFJywgJ05FJywgJ04nLCAnTlcnLCAnVycsICdTVycsICdTJywgJ1NFJ107CgovKioKICogUmVzb25hdG9yIG9jdGFudCBhcnJvd3MKICogQHR5cGUge3N0cmluZ1tdfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuT0NUQU5UU19BUlJPVyA9IFsn4oaSJywgJ+KGlycsICfihpEnLCAn4oaWJywgJ+KGkCcsICfihpknLCAn4oaTJywgJ+KGmCddOwoKLyoqCiAqIEFQIGZvciBkZXN0cm95aW5nIHBvcnRhbAogKiBAdHlwZSB7bnVtYmVyfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuREVTVFJPWV9SRVNPTkFUT1IgPSA3NTsKCi8qKgogKiBBUCBmb3IgZGVzdHJveWluZyBsaW5rCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBjb25zdAogKiBAbWVtYmVyb2YgaW5ncmVzc19jb25zdGFudHMKICovCndpbmRvdy5ERVNUUk9ZX0xJTksgPSAxODc7CgovKioKICogQVAgZm9yIGRlc3Ryb3lpbmcgZmllbGQKICogQHR5cGUge251bWJlcn0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBpbmdyZXNzX2NvbnN0YW50cwogKi8Kd2luZG93LkRFU1RST1lfRklFTEQgPSA3NTA7CgovKioKICogQVAgZm9yIGNhcHR1cmluZyBhIHBvcnRhbAogKiBAdHlwZSB7bnVtYmVyfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuQ0FQVFVSRV9QT1JUQUwgPSA1MDA7CgovKioKICogQVAgZm9yIGRlcGxveWluZyBhIHJlc29uYXRvcgogKiBAdHlwZSB7bnVtYmVyfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuREVQTE9ZX1JFU09OQVRPUiA9IDEyNTsKCi8qKgogKiBBUCBmb3IgZGVwbG95aW5nIGFsbCByZXNvbmF0b3JzIG9uIHBvcnRhbAogKiBAdHlwZSB7bnVtYmVyfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuQ09NUExFVElPTl9CT05VUyA9IDI1MDsKCi8qKgogKiBBUCBmb3IgdXBncmFkaW5nIGFub3RoZXIncyByZXNvbmF0b3IKICogQHR5cGUge251bWJlcn0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBpbmdyZXNzX2NvbnN0YW50cwogKi8Kd2luZG93LlVQR1JBREVfQU5PVEhFUlNfUkVTT05BVE9SID0gNjU7CgovKioKICogTWF4aW11bSBwb3J0YWwgbGV2ZWwuCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBjb25zdAogKiBAbWVtYmVyb2YgaW5ncmVzc19jb25zdGFudHMKICovCndpbmRvdy5NQVhfUE9SVEFMX0xFVkVMID0gODsKCi8qKgogKiBIb3cgbWFueSByZXNvbmF0b3JzIG9mIGEgZ2l2ZW4gbGV2ZWwgY2FuIG9uZSBkZXBsb3k7IDEtYmFzZWQgYXJyYXkgd2hlcmUgdGhlIGluZGV4IGlzIHRoZSByZXNvbmF0b3IgbGV2ZWwuCiAqIEB0eXBlIHtudW1iZXJbXX0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBpbmdyZXNzX2NvbnN0YW50cwogKi8Kd2luZG93Lk1BWF9SRVNPX1BFUl9QTEFZRVIgPSBbMCwgOCwgNCwgNCwgNCwgMiwgMiwgMSwgMV07CgovKioKICogVGhlIGJhc2UgdmFsdWUgb2YgaG93IGxvbmcgeW91IG5lZWQgdG8gd2FpdCBiZXR3ZWVuIHBvcnRhbCBoYWNrcywgaW4gc2Vjb25kcy4KICogQHR5cGUge251bWJlcn0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBpbmdyZXNzX2NvbnN0YW50cwogKi8Kd2luZG93LkJBU0VfSEFDS19DT09MRE9XTiA9IDMwMDsgLy8gNSBtaW5zIC0gMzAwIHNlY29uZHMKCi8qKgogKiBCYXNlIHZhbHVlLCBob3cgbWFueSB0aW1lcyBhdCBtb3N0IHlvdSBjYW4gaGFjayB0aGUgcG9ydGFsLgogKiBAdHlwZSB7bnVtYmVyfQogKiBAY29uc3QKICogQG1lbWJlcm9mIGluZ3Jlc3NfY29uc3RhbnRzCiAqLwp3aW5kb3cuQkFTRV9IQUNLX0NPVU5UID0gNDsKCi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLwoKLyoqCiAqIE9USEVSIE1PUkUtT1ItTEVTUyBDT05TVEFOVFMKICogQG5hbWVzcGFjZSBvdGhlcl9jb25zdGFudHMKICovCgovKioKICogQHR5cGUge251bWJlcn0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBvdGhlcl9jb25zdGFudHMKICovCndpbmRvdy5URUFNX05PTkUgPSAwOwoKLyoqCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBjb25zdAogKiBAbWVtYmVyb2Ygb3RoZXJfY29uc3RhbnRzCiAqLwp3aW5kb3cuVEVBTV9SRVMgPSAxOwoKLyoqCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBjb25zdAogKiBAbWVtYmVyb2Ygb3RoZXJfY29uc3RhbnRzCiAqLwp3aW5kb3cuVEVBTV9FTkwgPSAyOwoKLyoqCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBjb25zdAogKiBAbWVtYmVyb2Ygb3RoZXJfY29uc3RhbnRzCiAqLwp3aW5kb3cuVEVBTV9NQUMgPSAzOwoKLyoqCiAqIEB0eXBlIHtzdHJpbmdbXX0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBvdGhlcl9jb25zdGFudHMKICovCndpbmRvdy5URUFNX1RPX0NTUyA9IFsnbm9uZScsICdyZXMnLCAnZW5sJywgJ21hYyddOwoKLyoqCiAqIEB0eXBlIHtzdHJpbmdbXX0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBvdGhlcl9jb25zdGFudHMKICovCndpbmRvdy5URUFNX05BTUVTID0gWydOZXV0cmFsJywgJ1Jlc2lzdGFuY2UnLCAnRW5saWdodGVuZWQnLCAnX19NQUNISU5BX18nXTsKCi8qKgogKiBAdHlwZSB7c3RyaW5nW119CiAqIEBjb25zdAogKiBAbWVtYmVyb2Ygb3RoZXJfY29uc3RhbnRzCiAqLwp3aW5kb3cuVEVBTV9DT0RFUyA9IFsnTicsICdSJywgJ0UnLCAnTSddOwoKLyoqCiAqIEB0eXBlIHtzdHJpbmdbXX0KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBvdGhlcl9jb25zdGFudHMKICovCndpbmRvdy5URUFNX0NPREVOQU1FUyA9IFsnTkVVVFJBTCcsICdSRVNJU1RBTkNFJywgJ0VOTElHSFRFTkVEJywgJ01BQ0hJTkEnXTsKd2luZG93LlRFQU1fU0hPUlROQU1FUyA9IFsnTkVVJywgJ1JFUycsICdFTkwnLCAnTUFDJ107CgovKioKICogQHR5cGUge3N0cmluZ30KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBvdGhlcl9jb25zdGFudHMKICovCndpbmRvdy5URUFNX05BTUVfTk9ORSA9IHdpbmRvdy5URUFNX05BTUVTW3dpbmRvdy5URUFNX05PTkVdOwoKLyoqCiAqIEB0eXBlIHtzdHJpbmd9CiAqIEBjb25zdAogKiBAbWVtYmVyb2Ygb3RoZXJfY29uc3RhbnRzCiAqLwp3aW5kb3cuVEVBTV9OQU1FX1JFUyA9IHdpbmRvdy5URUFNX05BTUVTW3dpbmRvdy5URUFNX1JFU107CgovKioKICogQHR5cGUge3N0cmluZ30KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBvdGhlcl9jb25zdGFudHMKICovCndpbmRvdy5URUFNX05BTUVfRU5MID0gd2luZG93LlRFQU1fTkFNRVNbd2luZG93LlRFQU1fRU5MXTsKCi8qKgogKiBAdHlwZSB7c3RyaW5nfQogKiBAY29uc3QKICogQG1lbWJlcm9mIG90aGVyX2NvbnN0YW50cwogKi8Kd2luZG93LlRFQU1fTkFNRV9NQUMgPSB3aW5kb3cuVEVBTV9OQU1FU1t3aW5kb3cuVEVBTV9NQUNdOwoKLyoqCiAqIEB0eXBlIHtzdHJpbmd9CiAqIEBjb25zdAogKiBAbWVtYmVyb2Ygb3RoZXJfY29uc3RhbnRzCiAqLwp3aW5kb3cuVEVBTV9DT0RFX05PTkUgPSB3aW5kb3cuVEVBTV9DT0RFU1t3aW5kb3cuVEVBTV9OT05FXTsKCi8qKgogKiBAdHlwZSB7c3RyaW5nfQogKiBAY29uc3QKICogQG1lbWJlcm9mIG90aGVyX2NvbnN0YW50cwogKi8Kd2luZG93LlRFQU1fQ09ERV9SRVMgPSB3aW5kb3cuVEVBTV9DT0RFU1t3aW5kb3cuVEVBTV9SRVNdOwoKLyoqCiAqIEB0eXBlIHtzdHJpbmd9CiAqIEBjb25zdAogKiBAbWVtYmVyb2Ygb3RoZXJfY29uc3RhbnRzCiAqLwp3aW5kb3cuVEVBTV9DT0RFX0VOTCA9IHdpbmRvdy5URUFNX0NPREVTW3dpbmRvdy5URUFNX0VOTF07CgovKioKICogQHR5cGUge3N0cmluZ30KICogQGNvbnN0CiAqIEBtZW1iZXJvZiBvdGhlcl9jb25zdGFudHMKICovCndpbmRvdy5URUFNX0NPREVfTUFDID0gd2luZG93LlRFQU1fQ09ERVNbd2luZG93LlRFQU1fTUFDXTsKCi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLwoKLyoqCiAqIEdsb2JhbCB2YXJpYWJsZXMgdXNlZCBmb3Igc3RvcmFnZS4gTW9zdCBsaWtlbHkgUkVBRCBPTkxZLiBQcm9wZXIgYXkgd291bGQgYmUgdG8gZW5jYXBzdWxhdGUgdGhlbSBpbiBhbiBhbm9ueW1vdXMKICogZnVuY3Rpb24gYW5kIHdyaXRlIGdldHRlcnMvc2V0dGVycywgYnV0IGlmIHlvdSBhcmUgY2FyZWZ1bCBlbm91Z2gsIHRoaXMgd29ya3MuCiAqIEBuYW1lc3BhY2Ugc3RvcmFnZV92YXJpYWJsZXMKICovCgovKioKICogU3RvcmVzIHRoZSBpZCBvZiB0aGUgdGltZW91dCB0aGF0IGtpY2tzIG9mZiB0aGUgbmV4dCByZWZyZXNoIChpZSB2YWx1ZSByZXR1cm5lZCBieSBgYHNldFRpbWVvdXQoKWBgKQogKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH0KICogQG1lbWJlcm9mIHN0b3JhZ2VfdmFyaWFibGVzCiAqLwp3aW5kb3cucmVmcmVzaFRpbWVvdXQgPSB1bmRlZmluZWQ7CgovKioKICogUG9ydGFsIEdVSUQgaWYgdGhlIG9yaWdpbmFsIFVSTCBoYWQgaXQuCiAqIEB0eXBlIHtzdHJpbmd8bnVsbH0KICogQG1lbWJlcm9mIHN0b3JhZ2VfdmFyaWFibGVzCiAqLwp3aW5kb3cudXJsUG9ydGFsID0gbnVsbDsKCi8qKgogKiBQb3J0YWwgbG5nL2xhdCBpZiB0aGUgb3JpZ25pYWwgVVJMIGhhZCBpdC4KICogQHR5cGUge29iamVjdHxudWxsfQogKiBAbWVtYmVyb2Ygc3RvcmFnZV92YXJpYWJsZXMKICovCndpbmRvdy51cmxQb3J0YWxMTCA9IG51bGw7CgovKioKICogU3RvcmVzIHRoZSBHVUlEIG9mIHRoZSBzZWxlY3RlZCBwb3J0YWwsIG9yIGlzIGBudWxsYCBpZiB0aGVyZSBpcyBub25lLgogKiBAdHlwZSB7c3RyaW5nfG51bGx9CiAqIEBtZW1iZXJvZiBzdG9yYWdlX3ZhcmlhYmxlcwogKi8Kd2luZG93LnNlbGVjdGVkUG9ydGFsID0gbnVsbDsKCi8qKgogKiBSZWZlcmVuY2UgdG8gdGhlIGxpbmtpbmcgcmFuZ2UgaW5kaWNhdG9yIG9mIHRoZSBzZWxlY3RlZCBwb3J0YWwuIFRoaXMgaXMgYSBMZWFmbGV0IGxheWVyLgogKiBAdHlwZSB7b2JqZWN0fG51bGx9CiAqIEBtZW1iZXJvZiBzdG9yYWdlX3ZhcmlhYmxlcwogKi8Kd2luZG93LnBvcnRhbFJhbmdlSW5kaWNhdG9yID0gbnVsbDsKCi8qKgogKiBSZWZlcmVuY2UgdG8gdGhlIGhhY2tpbmcgcmFuZ2UgaW5kaWNhdG9yIG9mIHRoZSBzZWxlY3RlZCBwb3J0YWwuIFRoaXMgaXMgYSBMZWFmbGV0IGxheWVyLgogKiBAdHlwZSB7b2JqZWN0fG51bGx9CiAqIEBtZW1iZXJvZiBzdG9yYWdlX3ZhcmlhYmxlcwogKi8Kd2luZG93LnBvcnRhbEFjY2Vzc0luZGljYXRvciA9IG51bGw7CgovKioKICogUmVmZXJlbmNlcyB0byBMZWFmbGV0IG9iamVjdHMgcmVwcmVzZW50aW5nIHBvcnRhbHMsIGluZGV4ZWQgYnkgZW50aXR5IElELgogKiBUaGlzIG9iamVjdCBzdG9yZXMgdGhlIG1hcHBpbmcgaW4gdGhlIGZvcm1hdCBgeyBpZDE6IGZlYXR1cmUxLCAuLi4gfWAuCiAqIE5vdGU6IFdoaWxlIHRoZXNlIGFyZSBMZWFmbGV0IG9iamVjdHMsIG5vdCBhbGwgbWF5IGJlIGFkZGVkIHRvIHRoZSBtYXAgZHVlIHRvIHJlbmRlciBsaW1pdHMuCiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgb2JqZWN0Pn0KICogQG1lbWJlcm9mIHN0b3JhZ2VfdmFyaWFibGVzCiAqLwp3aW5kb3cucG9ydGFscyA9IHt9OwoKLyoqCiAqIFJlZmVyZW5jZXMgdG8gTGVhZmxldCBvYmplY3RzIHJlcHJlc2VudGluZyBsaW5rcywgaW5kZXhlZCBieSBlbnRpdHkgSUQuCiAqIFRoaXMgb2JqZWN0IHN0b3JlcyB0aGUgbWFwcGluZyBpbiB0aGUgZm9ybWF0IGB7IGlkMTogZmVhdHVyZTEsIC4uLiB9YC4KICogTm90ZTogV2hpbGUgdGhlc2UgYXJlIExlYWZsZXQgb2JqZWN0cywgbm90IGFsbCBtYXkgYmUgYWRkZWQgdG8gdGhlIG1hcCBkdWUgdG8gcmVuZGVyIGxpbWl0cy4KICogQHR5cGUge09iamVjdC48c3RyaW5nLCBvYmplY3Q+fQogKiBAbWVtYmVyb2Ygc3RvcmFnZV92YXJpYWJsZXMKICovCndpbmRvdy5saW5rcyA9IHt9OwoKLyoqCiAqIFJlZmVyZW5jZXMgdG8gTGVhZmxldCBvYmplY3RzIHJlcHJlc2VudGluZyBmaWVsZHMsIGluZGV4ZWQgYnkgZW50aXR5IElELgogKiBUaGlzIG9iamVjdCBzdG9yZXMgdGhlIG1hcHBpbmcgaW4gdGhlIGZvcm1hdCBgeyBpZDE6IGZlYXR1cmUxLCAuLi4gfWAuCiAqIE5vdGU6IFdoaWxlIHRoZXNlIGFyZSBMZWFmbGV0IG9iamVjdHMsIG5vdCBhbGwgbWF5IGJlIGFkZGVkIHRvIHRoZSBtYXAgZHVlIHRvIHJlbmRlciBsaW1pdHMuCiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgb2JqZWN0Pn0KICogQG1lbWJlcm9mIHN0b3JhZ2VfdmFyaWFibGVzCiAqLwp3aW5kb3cuZmllbGRzID0ge307CgovKioKICogQGNsYXNzIEwKICogQGRlc2NyaXB0aW9uIFJvb3QgY2xhc3MgZm9yIGFsbCBMZWFmbGV0LXJlbGF0ZWQgZnVuY3Rpb25hbGl0aWVzLCBleHRlbmRlZCB3aXRoIGN1c3RvbSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzLgogKi8KCi8vIHBsdWdpbiBmcmFtZXdvcmsuIFBsdWdpbnMgbWF5IGxvYWQgZWFybGllciB0aGFuIGlpdGMsIHNvIGRvbuKAmXQKLy8gb3ZlcndyaXRlIGRhdGEKaWYgKHR5cGVvZiB3aW5kb3cucGx1Z2luICE9PSAnZnVuY3Rpb24nKSB3aW5kb3cucGx1Z2luID0gZnVuY3Rpb24gKCkge307CgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKY29uc3QgdWxvZyA9IChmdW5jdGlvbiAobW9kdWxlKSB7CiAgLy8gKioqIGluY2x1ZGVkOiBleHRlcm5hbC91bG9nLm1pbi5qcyAqKioKIWZ1bmN0aW9uKGUsbix0KXsiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShuLFtdLHQpOmVbbl09dCgpfSh0aGlzLCJ1bG9nIixmdW5jdGlvbigpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBsKGUpe3JldHVybiBlP2FbZV18fChhW2VdPW4oZnVuY3Rpb24oZSxuKXtuPW5ldyBGdW5jdGlvbigibiIsImxvZyIsInJldHVybiB7JyIrZSsiJzpmdW5jdGlvbigpe2xvZy5pbnZva2UobixbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpfX1bbl0iKShlLGwpO3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkobiwibmFtZSIse2dldDpmdW5jdGlvbigpe3JldHVybiBlfX0pfWNhdGNoKGUpe31yZXR1cm4gbn0oZSksbCkpOm4obCl9bC5mb3JtYXRzPVtdLGwuZXh0ZW5kcz1bXSxsLmVuYWJsZT1mdW5jdGlvbihlKXt2YXIgbix0PShlfHwiIikuc3BsaXQoL1tccyxdKy8pO2ZvcihuPTA7bjx0Lmxlbmd0aDtuKyspdFtuXSYmKCItIj09PShlPXRbbl0ucmVwbGFjZSgvXCovZywiLio/IikpWzBdP28ucHVzaChuZXcgUmVnRXhwKCJeIitlLnN1YnN0cigxKSsiJCIpKTpyLnB1c2gobmV3IFJlZ0V4cCgiXiIrZSsiJCIpKSk7Zm9yKG4gaW4gYSlmKGFbbl0pfSxsLmVuYWJsZWQ9ZnVuY3Rpb24oZSl7dmFyIG47Zm9yKG49MDtuPG8ubGVuZ3RoO24rKylpZihvW25dLnRlc3QoZSkpcmV0dXJuO2ZvcihuPTA7bjxyLmxlbmd0aDtuKyspaWYocltuXS50ZXN0KGUpKXJldHVybiEwfSxsLmludm9rZT1mdW5jdGlvbihlLG4pe2Zvcih2YXIgdD0xPG4ubGVuZ3RoJiZpW25bMF1dP24uc2hpZnQoKToiZGVidWciLHI9MDtyPGwuZm9ybWF0cy5sZW5ndGg7cisrKWwuZm9ybWF0c1tyXShhW2VdLHQsbik7YVtlXVt0XS5hcHBseShhW2VdLG4pfSxsLmRpc2FibGU9bC5lbmFibGUuYmluZChsLCIiKTt2YXIgdD17RVJST1I6MSxXQVJOOjIsSU5GTzozLExPRzo0LERFQlVHOjUsVFJBQ0U6Nn0saT17ZXJyb3I6MSx3YXJuOjIsaW5mbzozLGxvZzo0LHZlcmJvc2U6NCxkZWJ1Zzo1LHRyYWNlOjYsc2lsbHk6NixkaXI6MCx0YWJsZTowLHRpbWU6MCx0aW1lRW5kOjAsYXNzZXJ0OjB9LGE9e30scj1bXSxvPVtdO2Z1bmN0aW9uIG4ocixvLGkpe2lmKCFyLmxvZyl7Zm9yKHZhciBlIGluIHIuTk9ORT0wLHIudWxvZz17dmVyc2lvbjoiMi4wLjAtYmV0YS43In0sdClyW2VdPXRbZV07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsImxldmVsIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PWk/aTpvJiZvLmxldmVsfSxzZXQ6ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSYmbylpPXZvaWQgMDtlbHNle3ZhciBuPWUmJihOdW1iZXIoZSkhPU51bWJlcihlKT9yW2UudG9VcHBlckNhc2UoKV06TnVtYmVyKGUpKTswPD1uJiZuPD02JiYoaT1uKX1pZihmKHIpLCFvKWZvcih2YXIgdCBpbiBhKWYoYVt0XSl9fSksZihyKTtmb3IodmFyIG49MDtuPGwuZXh0ZW5kcy5sZW5ndGg7bisrKWwuZXh0ZW5kc1tuXShyLG8pO3JldHVybiByfX1mdW5jdGlvbiBmKGUpe3ZhciBuLHQscj1NYXRoLm1heChlLm5hbWUmJmwuZW5hYmxlZChlLm5hbWUpJiZlLkRFQlVHfHxlLmxldmVsLGUubGV2ZWwpO2Zvcih2YXIgbyBpbiBpKWVbb109cjxpW29dP3U6KG49byx0PXZvaWQgMCwodD1sLmNvbigpKSYmKHRbbl18fHQubG9nKS5iaW5kKHQpfHwiZnVuY3Rpb24iPT10eXBlb2YgcHJpbnQmJnByaW50fHx1KX1mdW5jdGlvbiB1KCl7fW1vZHVsZS5leHBvcnRzPWw7dmFyIGUsYyxzLGcsZD1sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLHY9ZCYmZC5zcGxpdCgiJiIpO3RyeXtlPWxvY2FsU3RvcmFnZS5nZXRJdGVtKCJsb2ciKSxjPWxvY2FsU3RvcmFnZS5nZXRJdGVtKCJkZWJ1ZyIpfWNhdGNoKGUpe31mb3Iocz0wO2c9diYmdltzXSYmdltzXS5zcGxpdCgiPSIpO3MrKykibG9nIj09Z1swXSYmKGU9Z1sxXSksImRlYnVnIj09Z1swXSYmKGM9Z1sxXSk7cmV0dXJuIGwuY29uPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5jb25zb2xlfSxjJiZsLmVuYWJsZShjKSxsKCksbC5sZXZlbD1lfHxsLldBUk4sbH0pOwoKOwogIHJldHVybiBtb2R1bGU7Cn0pKHt9KS5leHBvcnRzOwoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgovLyAqKiogbW9kdWxlOiBfZGVwcmVjYXRlZC5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ19kZXByZWNhdGVkJyk7Ci8qIGdsb2JhbCBJSVRDLCBMIC0tIGVzbGludCAqLwoKLyoqCiAqIEBmaWxlIFRoaXMgZmlsZSBjb250YWlucyBmdW5jdGlvbnMgdGhhdCBhcmUgbm90IHVzZSBieSBJSVRDIGl0c2VsZgogKiBhbmQgd29uJ3QgbW9zdCBsaWtlbHkgbm90IHJlY2VpdmUgYW55IHVwZGF0ZWQKICogQG1vZHVsZSBfZGVwcmVjYXRlZAogKi8KCi8qKgogKiBDYWxjdWxhdGVzIHRoZSBwb3RlbnRpYWwgQVAgZ2FpbiBmb3IgY2FwdHVyaW5nIG9yIGRlc3Ryb3lpbmcgYSBwb3J0YWwsIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgcmVzb25hdG9ycywKICogbGlua3MsIGFuZCBmaWVsZHMuIEl0IGRvZXMgbm90IGFjY291bnQgZm9yIEFQIGdhaW5lZCBmcm9tIHJlc29uYXRvciB1cGdyYWRlcyBvciBtb2QgZGVwbG95bWVudC4KICoKICogQGRlcHJlY2F0ZWQKICogQGZ1bmN0aW9uIHBvcnRhbEFwR2Fpbk1hdGhzCiAqIEBwYXJhbSB7bnVtYmVyfSByZXNDb3VudCAtIFRoZSBudW1iZXIgb2YgcmVzb25hdG9ycyBvbiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge251bWJlcn0gbGlua0NvdW50IC0gVGhlIG51bWJlciBvZiBsaW5rcyBjb25uZWN0ZWQgdG8gdGhlIHBvcnRhbC4KICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkQ291bnQgLSBUaGUgbnVtYmVyIG9mIGZpZWxkcyB1c2luZyB0aGUgcG9ydGFsIGFzIGEgdmVydGV4LgogKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyBkZXRhaWxlZCBBUCBnYWluIHZhbHVlcyBmb3IgdmFyaW91cyBhY3Rpb25zIHN1Y2ggYXMgZGVwbG95aW5nIHJlc29uYXRvcnMsCiAqICAgICAgICAgICAgICAgICAgIGRlc3Ryb3lpbmcgcmVzb25hdG9ycywgY3JlYXRpbmcgZmllbGRzLCBkZXN0cm95aW5nIGxpbmtzLCBjYXB0dXJpbmcgdGhlIHBvcnRhbCwgYW5kIHRvdGFsCiAqICAgICAgICAgICAgICAgICAgIEFQIGZvciBkZXN0cm95aW5nIGFuZCBjYXB0dXJpbmcuCiAqLwp3aW5kb3cucG9ydGFsQXBHYWluTWF0aHMgPSBmdW5jdGlvbiAocmVzQ291bnQsIGxpbmtDb3VudCwgZmllbGRDb3VudCkgewogIHZhciBkZXBsb3lBcCA9ICg4IC0gcmVzQ291bnQpICogd2luZG93LkRFUExPWV9SRVNPTkFUT1I7CiAgaWYgKHJlc0NvdW50ID09PSAwKSBkZXBsb3lBcCArPSB3aW5kb3cuQ0FQVFVSRV9QT1JUQUw7CiAgaWYgKHJlc0NvdW50ICE9PSA4KSBkZXBsb3lBcCArPSB3aW5kb3cuQ09NUExFVElPTl9CT05VUzsKICAvLyB0aGVyZSBjb3VsZCBhbHNvIGJlIEFQIGZvciB1cGdyYWRpbmcgZXhpc3RpbmcgcmVzb25hdG9ycywgYW5kIGZvciBkZXBsb3lpbmcgbW9kcyAtIGJ1dCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIHRoYXQKICB2YXIgZnJpZW5kbHlBcCA9IGRlcGxveUFwOwoKICB2YXIgZGVzdHJveVJlc29BcCA9IHJlc0NvdW50ICogd2luZG93LkRFU1RST1lfUkVTT05BVE9SOwogIHZhciBkZXN0cm95TGlua0FwID0gbGlua0NvdW50ICogd2luZG93LkRFU1RST1lfTElOSzsKICB2YXIgZGVzdHJveUZpZWxkQXAgPSBmaWVsZENvdW50ICogd2luZG93LkRFU1RST1lfRklFTEQ7CiAgdmFyIGNhcHR1cmVBcCA9IHdpbmRvdy5DQVBUVVJFX1BPUlRBTCArIDggKiB3aW5kb3cuREVQTE9ZX1JFU09OQVRPUiArIHdpbmRvdy5DT01QTEVUSU9OX0JPTlVTOwogIHZhciBkZXN0cm95QXAgPSBkZXN0cm95UmVzb0FwICsgZGVzdHJveUxpbmtBcCArIGRlc3Ryb3lGaWVsZEFwOwogIHZhciBlbmVteUFwID0gZGVzdHJveUFwICsgY2FwdHVyZUFwOwoKICByZXR1cm4gewogICAgZnJpZW5kbHlBcDogZnJpZW5kbHlBcCwKICAgIGVuZW15QXA6IGVuZW15QXAsCiAgICBkZXN0cm95QXA6IGRlc3Ryb3lBcCwKICAgIGRlc3Ryb3lSZXNvQXA6IGRlc3Ryb3lSZXNvQXAsCiAgICBjYXB0dXJlQXA6IGNhcHR1cmVBcCwKICB9Owp9OwoKLyoqCiAqIEVzdGltYXRlcyB0aGUgQVAgZ2FpbiBmcm9tIGEgcG9ydGFsLCBiYXNlZCBvbmx5IG9uIHN1bW1hcnkgZGF0YSBmcm9tIHBvcnRhbHMsIGxpbmtzLCBhbmQgZmllbGRzLgogKiBOb3QgZW50aXJlbHkgYWNjdXJhdGUgLSBidXQgYXZhaWxhYmxlIGZvciBhbGwgcG9ydGFscyBvbiB0aGUgc2NyZWVuCiAqCiAqIEBkZXByZWNhdGVkCiAqIEBmdW5jdGlvbiBnZXRQb3J0YWxBcEdhaW4KICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsLgogKiBAcmV0dXJucyB7T2JqZWN0fHVuZGVmaW5lZH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdmFyaW91cyBBUCBnYWluIHZhbHVlcywgb3IgdW5kZWZpbmVkIGlmIHRoZSBwb3J0YWwgaXMgbm90IGZvdW5kLgogKi8Kd2luZG93LmdldFBvcnRhbEFwR2FpbiA9IGZ1bmN0aW9uIChndWlkKSB7CiAgdmFyIHAgPSB3aW5kb3cucG9ydGFsc1tndWlkXTsKICBpZiAocCkgewogICAgdmFyIGRhdGEgPSBwLm9wdGlvbnMuZGF0YTsKCiAgICB2YXIgbGlua0NvdW50ID0gd2luZG93LmdldFBvcnRhbExpbmtzQ291bnQoZ3VpZCk7CiAgICB2YXIgZmllbGRDb3VudCA9IHdpbmRvdy5nZXRQb3J0YWxGaWVsZHNDb3VudChndWlkKTsKCiAgICB2YXIgcmVzdWx0ID0gd2luZG93LnBvcnRhbEFwR2Fpbk1hdGhzKGRhdGEucmVzQ291bnQsIGxpbmtDb3VudCwgZmllbGRDb3VudCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgcmV0dXJuIHVuZGVmaW5lZDsKfTsKCi8qKgogKiBDYWxjdWxhdGVzIHRoZSBwb3RlbnRpYWwgbGV2ZWwgYSBwbGF5ZXIgY2FuIHVwZ3JhZGUgYSBwb3J0YWwgdG8uCiAqCiAqIEBkZXByZWNhdGVkCiAqIEBmdW5jdGlvbiBwb3RlbnRpYWxQb3J0YWxMZXZlbAogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIHJlc29uYXRvciBhbmQgb3duZXJzaGlwIGluZm9ybWF0aW9uLgogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcG90ZW50aWFsIGxldmVsIHRvIHdoaWNoIHRoZSBwbGF5ZXIgY2FuIHVwZ3JhZGUgdGhlIHBvcnRhbC4KICovCndpbmRvdy5wb3RlbnRpYWxQb3J0YWxMZXZlbCA9IGZ1bmN0aW9uIChkKSB7CiAgdmFyIGN1cnJlbnRfbGV2ZWwgPSB3aW5kb3cuZ2V0UG9ydGFsTGV2ZWwoZCk7CiAgdmFyIHBvdGVudGlhbF9sZXZlbCA9IGN1cnJlbnRfbGV2ZWw7CgogIGlmICh3aW5kb3cuUExBWUVSLnRlYW0gPT09IGQudGVhbSkgewogICAgdmFyIHJlc29uYXRvcnNfb25fcG9ydGFsID0gZC5yZXNvbmF0b3JzOwogICAgdmFyIHJlc29uYXRvcl9sZXZlbHMgPSBuZXcgQXJyYXkoKTsKCiAgICAvLyBmaWd1cmUgb3V0IGhvdyBtYW55IG9mIGVhY2ggb2YgdGhlc2UgcmVzb25hdG9ycyBjYW4gYmUgcGxhY2VkIGJ5IHRoZSBwbGF5ZXIKICAgIHZhciBwbGF5ZXJfcmVzb250YXRvcnMgPSBuZXcgQXJyYXkoKTsKICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHdpbmRvdy5NQVhfUE9SVEFMX0xFVkVMOyBpKyspIHsKICAgICAgcGxheWVyX3Jlc29udGF0b3JzW2ldID0gaSA+IHdpbmRvdy5QTEFZRVIubGV2ZWwgPyAwIDogd2luZG93Lk1BWF9SRVNPX1BFUl9QTEFZRVJbaV07CiAgICB9CiAgICAkLmVhY2gocmVzb25hdG9yc19vbl9wb3J0YWwsIGZ1bmN0aW9uIChpbmQsIHJlc28pIHsKICAgICAgaWYgKHJlc28gIT09IG51bGwgJiYgcmVzby5vd25lciA9PT0gd2luZG93LlBMQVlFUi5uaWNrbmFtZSkgewogICAgICAgIHBsYXllcl9yZXNvbnRhdG9yc1tyZXNvLmxldmVsXS0tOwogICAgICB9CiAgICAgIHJlc29uYXRvcl9sZXZlbHMucHVzaChyZXNvID09PSBudWxsID8gMCA6IHJlc28ubGV2ZWwpOwogICAgfSk7CgogICAgcmVzb25hdG9yX2xldmVscy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBhIC0gYjsKICAgIH0pOwoKICAgIC8vIE1heCBvdXQgcG9ydGFsCiAgICB2YXIgaW5zdGFsbF9pbmRleCA9IDA7CiAgICBmb3IgKHZhciBqID0gd2luZG93Lk1BWF9QT1JUQUxfTEVWRUw7IGogPj0gMTsgai0tKSB7CiAgICAgIGZvciAodmFyIGluc3RhbGwgPSBwbGF5ZXJfcmVzb250YXRvcnNbal07IGluc3RhbGwgPiAwOyBpbnN0YWxsLS0pIHsKICAgICAgICBpZiAocmVzb25hdG9yX2xldmVsc1tpbnN0YWxsX2luZGV4XSA8IGopIHsKICAgICAgICAgIHJlc29uYXRvcl9sZXZlbHNbaW5zdGFsbF9pbmRleF0gPSBqOwogICAgICAgICAgaW5zdGFsbF9pbmRleCsrOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHBvdGVudGlhbF9sZXZlbCA9CiAgICAgIHJlc29uYXRvcl9sZXZlbHMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGEgKyBiOwogICAgICB9KSAvIDg7CiAgfQogIHJldHVybiBwb3RlbnRpYWxfbGV2ZWw7Cn07CgovKioKICogRmluZHMgdGhlIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgZm9yIGEgcG9ydGFsIHVzaW5nIGFsbCBhdmFpbGFibGUgZGF0YSBzb3VyY2VzLgogKiBUaGlzIGluY2x1ZGVzIHRoZSBsaXN0IG9mIHBvcnRhbHMsIGNhY2hlZCBwb3J0YWwgZGV0YWlscywgYW5kIGluZm9ybWF0aW9uIGZyb20gbGlua3MgYW5kIGZpZWxkcy4KICoKICogQGRlcHJlY2F0ZWQKICogQGZ1bmN0aW9uIGZpbmRQb3J0YWxMYXRMbmcKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsLgogKiBAcmV0dXJucyB7TC5MYXRMbmd8dW5kZWZpbmVkfSBUaGUgTGF0TG5nIGxvY2F0aW9uIG9mIHRoZSBwb3J0YWwsIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmQuCiAqLwp3aW5kb3cuZmluZFBvcnRhbExhdExuZyA9IGZ1bmN0aW9uIChndWlkKSB7CiAgaWYgKHdpbmRvdy5wb3J0YWxzW2d1aWRdKSB7CiAgICByZXR1cm4gd2luZG93LnBvcnRhbHNbZ3VpZF0uZ2V0TGF0TG5nKCk7CiAgfQoKICAvLyBub3QgZm91bmQgaW4gcG9ydGFscyAtIHRyeSB0aGUgY2FjaGVkIChhbmQgcG9zc2libHkgc3RhbGUpIGRldGFpbHMgLSBnb29kIGVub3VnaCBmb3IgbG9jYXRpb24KICB2YXIgZGV0YWlscyA9IHdpbmRvdy5wb3J0YWxEZXRhaWwuZ2V0KGd1aWQpOwogIGlmIChkZXRhaWxzKSB7CiAgICByZXR1cm4gTC5sYXRMbmcoZGV0YWlscy5sYXRFNiAvIDFlNiwgZGV0YWlscy5sbmdFNiAvIDFlNik7CiAgfQoKICAvLyBub3cgdHJ5IHNlYXJjaGluZyB0aHJvdWdoIGZpZWxkcwogIGZvciAodmFyIGZndWlkIGluIHdpbmRvdy5maWVsZHMpIHsKICAgIHZhciBmID0gd2luZG93LmZpZWxkc1tmZ3VpZF0ub3B0aW9ucy5kYXRhOwoKICAgIGZvciAodmFyIGkgaW4gZi5wb2ludHMpIHsKICAgICAgaWYgKGYucG9pbnRzW2ldLmd1aWQgPT09IGd1aWQpIHsKICAgICAgICByZXR1cm4gTC5sYXRMbmcoZi5wb2ludHNbaV0ubGF0RTYgLyAxZTYsIGYucG9pbnRzW2ldLmxuZ0U2IC8gMWU2KTsKICAgICAgfQogICAgfQogIH0KCiAgLy8gYW5kIGZpbmFsbHkgc2VhcmNoIHRocm91Z2ggbGlua3MKICBmb3IgKHZhciBsZ3VpZCBpbiB3aW5kb3cubGlua3MpIHsKICAgIHZhciBsID0gd2luZG93LmxpbmtzW2xndWlkXS5vcHRpb25zLmRhdGE7CiAgICBpZiAobC5vR3VpZCA9PT0gZ3VpZCkgewogICAgICByZXR1cm4gTC5sYXRMbmcobC5vTGF0RTYgLyAxZTYsIGwub0xuZ0U2IC8gMWU2KTsKICAgIH0KICAgIGlmIChsLmRHdWlkID09PSBndWlkKSB7CiAgICAgIHJldHVybiBMLmxhdExuZyhsLmRMYXRFNiAvIDFlNiwgbC5kTG5nRTYgLyAxZTYpOwogICAgfQogIH0KCiAgLy8gbm8gbHVjayBmaW5kaW5nIHBvcnRhbCBsYXQvbG5nCiAgcmV0dXJuIHVuZGVmaW5lZDsKfTsKCi8vIHRvIGJlIG92ZXdyaXR0ZW4gaW4gYXBwLmpzCi8qKgogKiBGaW5kcyB0aGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBmb3IgYSBwb3J0YWwgdXNpbmcgYWxsIGF2YWlsYWJsZSBkYXRhIHNvdXJjZXMuCiAqIFRoaXMgaW5jbHVkZXMgdGhlIGxpc3Qgb2YgcG9ydGFscywgY2FjaGVkIHBvcnRhbCBkZXRhaWxzLCBhbmQgaW5mb3JtYXRpb24gZnJvbSBsaW5rcyBhbmQgZmllbGRzLgogKgogKiBAZGVwcmVjYXRlZAogKiBAZnVuY3Rpb24gYW5kcm9pZENvcHkKICovCndpbmRvdy5hbmRyb2lkQ29weSA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gdHJ1ZTsgLy8gaS5lLiBleGVjdXRlIG90aGVyIGFjdGlvbnMKfTsKCi8qKgogKiBHaXZlbiB0aGUgZW50aXR5IGRldGFpbCBkYXRhLCByZXR1cm5zIHRoZSB0ZWFtIHRoZSBlbnRpdHkgYmVsb25ncyB0by4KICogVXNlcyBURUFNXyogZW51bSB2YWx1ZXMuCiAqCiAqIEBkZXByZWNhdGVkCiAqIEBmdW5jdGlvbiBnZXRUZWFtCiAqIEBwYXJhbSB7T2JqZWN0fSBkZXRhaWxzIC0gVGhlIGRldGFpbHMgaGFzaCBvZiBhbiBlbnRpdHkuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB0ZWFtIElEIHRoZSBlbnRpdHkgYmVsb25ncyB0by4KICovCndpbmRvdy5nZXRUZWFtID0gZnVuY3Rpb24gKGRldGFpbHMpIHsKICByZXR1cm4gSUlUQy51dGlscy5nZXRUZWFtSWQoZGV0YWlscy50ZWFtKTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGFwcC5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ2FwcCcpOwovKiBnbG9iYWwgTCAtLSBlc2xpbnQgKi8KCi8qKgogKiBAZmlsZSBUaGlzIGZpbGUgY29udGFpbnMgdGhlIG1haW4gSmF2YVNjcmlwdCBjb2RlIGZvciB0aGUgYXBwLCBpbmNsdWRpbmcgdXRpbGl0eSBmdW5jdGlvbnMsCiAqICAgICAgIGFwcC1zcGVjaWZpYyBiZWhhdmlvcnMsIGFuZCBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBBbmRyb2lkIGVudmlyb25tZW50LgogKiBAbW9kdWxlIGFwcAogKi8KCi8qKgogKiBHbG9iYWwgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGFwcCBpcyBydW5uaW5nIGFzIGEgc3RhbmRhbG9uZSBhcHAgb3Igd2l0aGluIGEgYnJvd3Nlci4KICogQHR5cGUge2Jvb2xlYW59CiAqIEBtZW1iZXJvZiBtb2R1bGU6YXBwCiAqLwp2YXIgaXNBcHAgPSB0eXBlb2YgYXBwICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgYW5kcm9pZCAhPT0gJ3VuZGVmaW5lZCc7CndpbmRvdy5pc0FwcCA9IGlzQXBwOwoKLyoqCiAqIERldGVybWluZXMgd2hldGhlciB0byB1c2UgdGhlIGludGVyZmFjZSBmb3IgbW9iaWxlIGRldmljZXMgZGVwZW5kaW5nIG9uIHRoZSBhcHBsaWNhdGlvbiBlbnZpcm9ubWVudCBhbmQgZGV2aWNlIHR5cGUuCiAqCiAqIEBmdW5jdGlvbiB1c2VBcHBQYW5lcwogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFwcCBwYW5lcyBzaG91bGQgYmUgdXNlZCwgZmFsc2Ugb3RoZXJ3aXNlLgogKi8Kd2luZG93LnVzZUFwcFBhbmVzID0gZnVuY3Rpb24gKCkgewogIC8vIGlzU21hcnRwaG9uZSBpcyBpbXBvcnRhbnQgdG8gZGlzYWJsZSBwYW5lcyBpbiBkZXNrdG9wIG1vZGUKICByZXR1cm4gaXNBcHAgJiYgd2luZG93LmFwcC5hZGRQYW5lICYmIHdpbmRvdy5pc1NtYXJ0cGhvbmUoKTsKfTsKd2luZG93LnVzZUFuZHJvaWRQYW5lcyA9IHdpbmRvdy51c2VBcHBQYW5lczsgLy8gY29tcGF0aWJpbGl0eQoKaWYgKGlzQXBwKSB7CiAgaWYgKHR5cGVvZiBhcHAgPT09ICd1bmRlZmluZWQnKSB7CiAgICAvLyBjb21wYXRpYmlsaXR5CiAgICB3aW5kb3cuYXBwID0gd2luZG93LmFuZHJvaWQ7CiAgfSBlbHNlIHsKICAgIHdpbmRvdy5hbmRyb2lkID0gd2luZG93LmFwcDsKICB9CgogIHdpbmRvdy5yZXF1ZXN0RmlsZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgLy8gZGVwcmVjYXRlZAogICAgTC5GaWxlTGlzdExvYWRlci5sb2FkRmlsZXMoKS5vbignbG9hZCcsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGNhbGxiYWNrKGUuZmlsZS5uYW1lLCBlLnJlYWRlci5yZXN1bHQpOwogICAgfSk7CiAgfTsKfQoKLyoqCiAqIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3QgYmUgdHJpZ2dlcmVkLgogKiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvciBOIG1pbGxpc2Vjb25kcy4KICogc291cmNlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ubXNkdmlkLzg4MDcyMDUjZ2lzdGNvbW1lbnQtMjY0MTM1NgogKgogKiBAZnVuY3Rpb24gZGVib3VuY2UKICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuCiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gVGhlIGRlYm91bmNlIHRpbWUgaW4gbWlsbGlzZWNvbmRzLgogKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiB0aGUgZ2l2ZW4gZnVuY3Rpb24uCiAqLwpmdW5jdGlvbiBkZWJvdW5jZShjYWxsYmFjaywgdGltZSkgewogIHZhciB0aW1lb3V0OwogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY29udGV4dCA9IHRoaXM7CiAgICB2YXIgYXJncyA9IGFyZ3VtZW50czsKICAgIGlmICh0aW1lb3V0KSB7CiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgIH0KICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgdGltZW91dCA9IG51bGw7CiAgICAgIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgfSwgdGltZSk7CiAgfTsKfQoKZnVuY3Rpb24gZXh0ZW5kTGF5ZXJDaG9vc2VyKCkgewogIGlmICh3aW5kb3cuYXBwLnNldExheWVycykgewogICAgLy8gaG9vayBzb21lIGFkZGl0aW9uYWwgY29kZSBpbnRvIHRoZSBMYXllckNvbnRyb2wgc28gaXQncyBlYXN5IGZvciB0aGUgbW9iaWxlIGFwcCB0byBpbnRlcmZhY2Ugd2l0aCBpdAogICAgd2luZG93LkxheWVyQ2hvb3Nlci5pbmNsdWRlKHsKICAgICAgX3NldEFwcExheWVyczogZGVib3VuY2UoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBsID0gdGhpcy5nZXRMYXllcnMoKTsKICAgICAgICB3aW5kb3cuYXBwLnNldExheWVycyhKU09OLnN0cmluZ2lmeShsLmJhc2VMYXllcnMpLCBKU09OLnN0cmluZ2lmeShsLm92ZXJsYXlMYXllcnMpKTsKICAgICAgfSwgMTAwMCksCgogICAgICBzZXRMYWJlbDogKGZ1bmN0aW9uIChzZXRMYWJlbCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB0aGlzLl9zZXRBcHBMYXllcnMoKTsKICAgICAgICAgIHJldHVybiBzZXRMYWJlbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0pKHdpbmRvdy5MYXllckNob29zZXIucHJvdG90eXBlLnNldExhYmVsKSwKCiAgICAgIF91cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLl9zZXRBcHBMYXllcnMoKTsKICAgICAgICByZXR1cm4gTC5Db250cm9sLkxheWVycy5wcm90b3R5cGUuX3VwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9LAogICAgfSk7CiAgfQp9Cgp3aW5kb3cucnVuT25BcHBCZWZvcmVCb290ID0gZnVuY3Rpb24gKCkgewogIGlmICghaXNBcHApIHsKICAgIHJldHVybjsKICB9CgogIGlmICh3aW5kb3cuYXBwLnNob3dab29tKSB7CiAgICB3aW5kb3cubWFwT3B0aW9ucy56b29tQ29udHJvbCA9IHdpbmRvdy5hcHAuc2hvd1pvb20oKTsKICB9CgogIGV4dGVuZExheWVyQ2hvb3NlcigpOwoKICAvLyBhZGQganF1ZXJ5IGxpc3RlbmVycyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICBpZiAod2luZG93LmFwcC5kaWFsb2dPcGVuZWQgJiYgd2luZG93LmFwcC5kaWFsb2dGb2N1c2VkKSB7CiAgICAkKGRvY3VtZW50LmJvZHkpLm9uKHsKICAgICAgLy8gaGludHMgZm9yIGlpdGMgbW9iaWxlCiAgICAgIGRpYWxvZ29wZW46IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIGlkID0gJChlLnRhcmdldCkuZGF0YSgnaWQnKTsKICAgICAgICB3aW5kb3cuYXBwLmRpYWxvZ09wZW5lZChpZCwgdHJ1ZSk7CiAgICAgIH0sCiAgICAgIGRpYWxvZ2Nsb3NlOiBmdW5jdGlvbiAoZSkgewogICAgICAgIHZhciBpZCA9ICQoZS50YXJnZXQpLmRhdGEoJ2lkJyk7CiAgICAgICAgd2luZG93LmFwcC5kaWFsb2dPcGVuZWQoaWQsIGZhbHNlKTsKICAgICAgfSwKICAgICAgZGlhbG9nZm9jdXM6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIGlkID0gJChlLnRhcmdldCkuZGF0YSgnaWQnKTsKICAgICAgICB3aW5kb3cuYXBwLmRpYWxvZ0ZvY3VzZWQoaWQpOwogICAgICB9LAogICAgfSk7CiAgfQogIC8vIG5vdGlmeSBhcHAgdGhhdCBhIHNlbGVjdCBzcGlubmVyIGlzIGVuYWJsZWQuCiAgLy8gdGhpcyBkaXNhYmxlcyBqYXZhc2NyaXB0IGluamVjdGlvbiBvbiBhcHAncyBzaWRlLgogIC8vIGlmIGFwcCBpcyBub3Qgbm90aWZpZWQsIHRoZSBzcGlubmVyIGNsb3NlcyBvbiB0aGUgbmV4dCBKUyBjYWxsCiAgaWYgKHdpbmRvdy5hcHAuc3Bpbm5lckVuYWJsZWQpIHsKICAgICQoZG9jdW1lbnQuYm9keSkub24oJ2NsaWNrJywgJ3NlbGVjdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgd2luZG93LmFwcC5zcGlubmVyRW5hYmxlZCh0cnVlKTsKICAgIH0pOwogIH0KCiAgLy8gYWRkIGlpdGMgaG9va3MgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgaWYgKHdpbmRvdy5hcHAuc3dpdGNoVG9QYW5lKSB7CiAgICB3aW5kb3cuYWRkSG9vaygncGFuZUNoYW5nZWQnLCBmdW5jdGlvbiAobmFtZSkgewogICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTkxNTg5NTIvMjUyMDI0NwogICAgICB3aW5kb3cuYXBwLnN3aXRjaFRvUGFuZShuYW1lKTsKICAgIH0pOwogIH0KCiAgLy8gb3ZlcndyaXRlIHNvbWUgZnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgaWYgKHdpbmRvdy5hcHAuY29weSkgewogICAgd2luZG93LmFuZHJvaWRDb3B5ID0gZnVuY3Rpb24gKHRleHQpIHsKICAgICAgd2luZG93LmFwcC5jb3B5KHRleHQpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwogIH0KCiAgaWYgKHdpbmRvdy5hcHAuc2F2ZUZpbGUpIHsKICAgIHdpbmRvdy5zYXZlRmlsZSA9IGZ1bmN0aW9uIChkYXRhLCBmaWxlbmFtZSwgZGF0YVR5cGUpIHsKICAgICAgd2luZG93LmFwcC5zYXZlRmlsZShmaWxlbmFtZSB8fCAnJywgZGF0YVR5cGUgfHwgJyovKicsIGRhdGEpOwogICAgfTsKICB9CgogIGlmICh3aW5kb3cuYXBwLmludGVudFBvc0xpbmspIHsKICAgIHdpbmRvdy5yZW5kZXJQb3J0YWxVcmwgPSBmdW5jdGlvbiAobGF0LCBsbmcsIHRpdGxlLCBndWlkKSB7CiAgICAgIC8vIG9uZSBzaGFyZSBsaW5rIG9wdGlvbiAtIGFuZCB0aGUgYXBwIHByb3ZpZGVzIGFuIGludGVyZmFjZSB0byBzaGFyZSB0aGUgVVJMLAogICAgICAvLyBzaGFyZSBhcyBhIGdlbzogaW50ZW50IChuYXZpZ2F0aW9uIHZpYSBnb29nbGUgbWFwcyksIGV0YwoKICAgICAgdmFyIHNoYXJlTGluayA9ICQoJzxhPicpCiAgICAgICAgLnRleHQoJ1NoYXJlIHBvcnRhbCcpCiAgICAgICAgLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHdpbmRvdy5hcHAuaW50ZW50UG9zTGluayhsYXQsIGxuZywgd2luZG93Lm1hcC5nZXRab29tKCksIHRpdGxlLCB0cnVlLCBndWlkKTsKICAgICAgICB9KTsKICAgICAgJCgnLmxpbmtkZXRhaWxzJykuYXBwZW5kKCQoJzxhc2lkZT4nKS5hcHBlbmQoc2hhcmVMaW5rKSk7CiAgICB9OwogIH0KfTsKCndpbmRvdy5ydW5PbkFwcEFmdGVyQm9vdCA9IGZ1bmN0aW9uICgpIHsKICBpZiAoIWlzQXBwKSB7CiAgICByZXR1cm47CiAgfQoKICBpZiAod2luZG93LmFwcC5pbnRlbnRQb3NMaW5rKSB7CiAgICAkKCcjcGVybWFsaW5rJykuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB2YXIgY2VudGVyID0gd2luZG93Lm1hcC5nZXRDZW50ZXIoKTsKICAgICAgd2luZG93LmFwcC5pbnRlbnRQb3NMaW5rKGNlbnRlci5sYXQsIGNlbnRlci5sbmcsIHdpbmRvdy5tYXAuZ2V0Wm9vbSgpLCAnU2VsZWN0ZWQgbWFwIHZpZXcnLCBmYWxzZSk7CiAgICB9KTsKICB9CgogIC8vIGFkZCBsZWFmbGV0IGxpc3RlbmVycyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogIGlmICh3aW5kb3cuYXBwLnNldFBlcm1hbGluaykgewogICAgdmFyIHNldEFwcFBlcm1hbGluayA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIHAgPSB3aW5kb3cuc2VsZWN0ZWRQb3J0YWwgJiYgd2luZG93LnBvcnRhbHNbd2luZG93LnNlbGVjdGVkUG9ydGFsXTsKICAgICAgdmFyIGhyZWYgPSB3aW5kb3cubWFrZVBlcm1hbGluayhwICYmIHAuZ2V0TGF0TG5nKCksIHsKICAgICAgICBmdWxsVVJMOiB0cnVlLAogICAgICAgIGluY2x1ZGVNYXBWaWV3OiB0cnVlLAogICAgICB9KTsKICAgICAgd2luZG93LmFwcC5zZXRQZXJtYWxpbmsoaHJlZik7CiAgICB9OwoKICAgIHdpbmRvdy5tYXAub24oJ21vdmVlbmQnLCBzZXRBcHBQZXJtYWxpbmspOwogICAgd2luZG93LmFkZEhvb2soJ3BvcnRhbFNlbGVjdGVkJywgc2V0QXBwUGVybWFsaW5rKTsKICB9CgogIC8vIGhpZGUgbGF5ZXIgY2hvb3NlciBpZiBib290ZWQgd2l0aCB0aGUgaWl0Y20gYXBwCiAgaWYgKHdpbmRvdy5hcHAuc2V0TGF5ZXJzKSB7CiAgICAkKCcubGVhZmxldC1jb250cm9sLWxheWVycycpLmhpZGUoKTsKICB9CgogIC8qICEhVGhpcyBibG9jayBpcyBjb21tZW50ZWQgb3V0IGFzIGl0J3MgdW5saWtlbHkgdGhhdCB3ZSBzdGlsbCBuZWVkIHRoaXMgd29ya2Fyb3VuZAogIC8vCiAgLy8gZm9yIHNvbWUgcmVhc29uLCBsZWFmbGV0IG1pc3NlcyB0aGUgV2ViVmlldyBzaXplIGJlaW5nIHNldCBhdCBzdGFydHVwIG9uIElJVEMgTW9iaWxlCiAgLy8gY3JlYXRlIGEgc2hvcnQgdGltZXIgdGhhdCBjaGVja3MgZm9yIHRoaXMgaXNzdWUKICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgbWFwLmludmFsaWRhdGVTaXplKCk7IH0sIDAuMioxMDAwKTsKICAqLwoKICBpZiAod2luZG93LmFwcC5ib290RmluaXNoZWQpIHsKICAgIHdpbmRvdy5hcHAuYm9vdEZpbmlzaGVkKCk7CiAgfQp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogYXJ0aWZhY3QuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdhcnRpZmFjdCcpOwovKiBnbG9iYWwgSUlUQywgTCwgbG9nIC0tIGVzbGludCAqLwoKLyoqCiAqIEBmaWxlIFByb3ZpZGVzIGZ1bmN0aW9ucyByZWxhdGVkIHRvIEluZ3Jlc3MgYXJ0aWZhY3RzLCBpbmNsdWRpbmcgc2V0dXAsIGRhdGEgcmVxdWVzdCwgYW5kIHByb2Nlc3NpbmcgZnVuY3Rpb25zLgogKiBBZGRlZCBhcyBwYXJ0IG9mIHRoZSBpbmdyZXNzICMxM21hZ251cyBpbiBub3ZlbWJlciAyMDEzLCBhcnRpZmFjdHMKICogYXJlIGFkZGl0aW9uYWwgZ2FtZSBlbGVtZW50cyBvdmVybGF5ZWQgb24gdGhlIGludGVsIG1hcAogKgogKiBjdXJyZW50bHkgdGhlcmUgYXJlIG9ubHkgamFydmlzLXJlbGF0ZWQgZW50aXRpZXMKICogLSBgc2hhcmRzYDogbW92ZSBiZXR3ZWVuIHBvcnRhbHMgKGFsb25nIGxpbmtzKSBlYWNoIGhvdXIuIG1vcmUgdGhhbiBvbmUgY2FuIGJlIGF0IGEgcG9ydGFsLgogKiAtIGB0YXJnZXRzYDogc3BlY2lmaWMgcG9ydGFscyAtIG9uZSBwZXIgdGVhbS4KICoKICogVGhlIGFydGlmYWN0IGRhdGEgaW5jbHVkZXMgZGV0YWlscyBmb3IgdGhlIHNwZWNpZmljIHBvcnRhbHMsIHNvIGNhbiBiZSB1c2VmdWwuCiAqIDIwMTQtMDItMDY6IGludGVsIHNpdGUgdXBkYXRlcyBoaW50IGF0IG5ldyAnYW1hciBhcnRpZmFjdHMnLCBsaWtlbHkgZm9sbG93aW5nIHRoZSBzYW1lIHN5c3RlbSBhcyBhYm92ZQogKgogKiBAbmFtZXNwYWNlIHdpbmRvdy5hcnRpZmFjdAogKi8KCndpbmRvdy5hcnRpZmFjdCA9IGZ1bmN0aW9uICgpIHt9OwoKLyoqCiAqIFNldHMgdXAgYXJ0aWZhY3QgZGF0YSBmZXRjaGluZywgbGF5ZXIgY3JlYXRpb24sIGFuZCBVSSBlbGVtZW50cy4KICogQGZ1bmN0aW9uIHdpbmRvdy5hcnRpZmFjdC5zZXR1cAogKi8Kd2luZG93LmFydGlmYWN0LnNldHVwID0gZnVuY3Rpb24gKCkgewogIHdpbmRvdy5hcnRpZmFjdC5SRUZSRVNIX0pJVFRFUiA9IDIgKiA2MDsgLy8gMiBtaW51dGUgcmFuZG9tIHBlcmlvZCBzbyBub3QgYWxsIHVzZXJzIHJlZnJlc2ggYXQgb25jZQogIHdpbmRvdy5hcnRpZmFjdC5SRUZSRVNIX1NVQ0NFU1MgPSA2MCAqIDYwOyAvLyA2MCBtaW51dGVzIG9uIHN1Y2Nlc3MKICB3aW5kb3cuYXJ0aWZhY3QuUkVGUkVTSF9GQUlMVVJFID0gMiAqIDYwOyAvLyAyIG1pbnV0ZSByZXRyeSBvbiBmYWlsdXJlCgogIHdpbmRvdy5hcnRpZmFjdC5pZGxlID0gZmFsc2U7CiAgd2luZG93LmFydGlmYWN0LmNsZWFyRGF0YSgpOwoKICB3aW5kb3cuYWRkUmVzdW1lRnVuY3Rpb24od2luZG93LmFydGlmYWN0LmlkbGVSZXN1bWUpOwoKICAvLyBtb3ZlIHRoZSBpbml0aWFsIGRhdGEgcmVxdWVzdCBvbnRvIGEgdmVyeSBzaG9ydCB0aW1lci4gcHJldmVudHMgdGhyb3duIGV4Y2VwdGlvbnMgY2F1c2luZyBJSVRDIGJvb3QgZmFpbHVyZXMKICBzZXRUaW1lb3V0KHdpbmRvdy5hcnRpZmFjdC5yZXF1ZXN0RGF0YSwgMSk7CgogIHdpbmRvdy5hcnRpZmFjdC5fbGF5ZXIgPSBuZXcgTC5MYXllckdyb3VwKCk7CiAgd2luZG93LmxheWVyQ2hvb3Nlci5hZGRPdmVybGF5KHdpbmRvdy5hcnRpZmFjdC5fbGF5ZXIsICdBcnRpZmFjdHMnKTsKCiAgSUlUQy50b29sYm94LmFkZEJ1dHRvbih7CiAgICBpZDogJ2FydGlmYWN0cy10b29sYm94LWxpbmsnLAogICAgbGFiZWw6ICdBcnRpZmFjdHMnLAogICAgdGl0bGU6ICdTaG93IGFydGlmYWN0IHBvcnRhbCBsaXN0JywKICAgIGFjdGlvbjogd2luZG93LmFydGlmYWN0LnNob3dBcnRpZmFjdExpc3QsCiAgfSk7CgogIHdpbmRvdy5hZGRIb29rKCdtYXBEYXRhRW50aXR5SW5qZWN0Jywgd2luZG93LmFydGlmYWN0LmVudGl0eUluamVjdCk7Cn07CgovKioKICogUmVxdWVzdHMgYXJ0aWZhY3QgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuIElmIHRoZSBtYXAgaXMgaW4gaWRsZSBtb2RlLCBzZXRzIGEgZmxhZyBpbnN0ZWFkIG9mIHNlbmRpbmcgYSByZXF1ZXN0LgogKiBAZnVuY3Rpb24gd2luZG93LmFydGlmYWN0LnJlcXVlc3REYXRhCiAqLwp3aW5kb3cuYXJ0aWZhY3QucmVxdWVzdERhdGEgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHdpbmRvdy5pc0lkbGUoKSkgewogICAgd2luZG93LmFydGlmYWN0LmlkbGUgPSB0cnVlOwogIH0gZWxzZSB7CiAgICB3aW5kb3cucG9zdEFqYXgoJ2dldEFydGlmYWN0UG9ydGFscycsIHt9LCB3aW5kb3cuYXJ0aWZhY3QuaGFuZGxlU3VjY2Vzcywgd2luZG93LmFydGlmYWN0LmhhbmRsZUZhaWx1cmUpOwogIH0KfTsKCi8qKgogKiBSZXN1bWVzIGFydGlmYWN0IGRhdGEgcmVxdWVzdHMgd2hlbiBjb21pbmcgb3V0IG9mIGlkbGUgbW9kZS4KICogQGZ1bmN0aW9uIHdpbmRvdy5hcnRpZmFjdC5pZGxlUmVzdW1lCiAqLwp3aW5kb3cuYXJ0aWZhY3QuaWRsZVJlc3VtZSA9IGZ1bmN0aW9uICgpIHsKICBpZiAod2luZG93LmFydGlmYWN0LmlkbGUpIHsKICAgIHdpbmRvdy5hcnRpZmFjdC5pZGxlID0gZmFsc2U7CiAgICB3aW5kb3cuYXJ0aWZhY3QucmVxdWVzdERhdGEoKTsKICB9Cn07CgovKioKICogSGFuZGxlcyBzdWNjZXNzZnVsIGFydGlmYWN0IGRhdGEgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyLgogKiBAZnVuY3Rpb24gd2luZG93LmFydGlmYWN0LmhhbmRsZVN1Y2Nlc3MKICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBcnRpZmFjdCBkYXRhIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci4KICovCndpbmRvdy5hcnRpZmFjdC5oYW5kbGVTdWNjZXNzID0gZnVuY3Rpb24gKGRhdGEpIHsKICB3aW5kb3cuYXJ0aWZhY3QucHJvY2Vzc0RhdGEoZGF0YSk7CgogIC8vIHN0YXJ0IHRoZSBuZXh0IHJlZnJlc2ggYXQgYSBtdWx0aXBsZSBvZiBSRUZSRVNIX1NVQ0NFU1Mgc2Vjb25kcywgcGx1cyBhIHJhbmRvbSBSRUZSRVNIX0pJVFRFUiBhbW91bnQgdG8gcHJldmVudCBleGNlc3NpdmUgc2VydmVyIGhpdHMgYXQgb25lIHRpbWUKICB2YXIgbm93ID0gRGF0ZS5ub3coKTsKICB2YXIgbmV4dFRpbWUgPQogICAgTWF0aC5jZWlsKG5vdyAvICh3aW5kb3cuYXJ0aWZhY3QuUkVGUkVTSF9TVUNDRVNTICogMTAwMCkpICogKHdpbmRvdy5hcnRpZmFjdC5SRUZSRVNIX1NVQ0NFU1MgKiAxMDAwKSArCiAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB3aW5kb3cuYXJ0aWZhY3QuUkVGUkVTSF9KSVRURVIgKiAxMDAwKTsKCiAgc2V0VGltZW91dCh3aW5kb3cuYXJ0aWZhY3QucmVxdWVzdERhdGEsIG5leHRUaW1lIC0gbm93KTsKfTsKCi8qKgogKiBIYW5kbGVzIGZhaWx1cmUgaW4gYXJ0aWZhY3QgZGF0YSByZXF1ZXN0LiBTY2hlZHVsZXMgYSBuZXcgcmVxdWVzdCBhZnRlciBhIHNob3J0IGRlbGF5LgogKiBAZnVuY3Rpb24gd2luZG93LmFydGlmYWN0LmhhbmRsZUZhaWx1cmUKICovCndpbmRvdy5hcnRpZmFjdC5oYW5kbGVGYWlsdXJlID0gZnVuY3Rpb24gKCkgewogIHNldFRpbWVvdXQod2luZG93LmFydGlmYWN0LnJlcXVlc3REYXRhLCB3aW5kb3cuYXJ0aWZhY3QuUkVGUkVTSF9GQUlMVVJFICogMTAwMCk7Cn07CgovKioKICogUHJvY2Vzc2VzIGFydGlmYWN0IGRhdGEuIENsZWFycyBwcmV2aW91cyBkYXRhLCBwcm9jZXNzZXMgbmV3IHJlc3VsdHMsIHJ1bnMgaG9va3MsIGFuZCB1cGRhdGVzIHRoZSBhcnRpZmFjdCBsYXllci4KICogQGZ1bmN0aW9uIHdpbmRvdy5hcnRpZmFjdC5wcm9jZXNzRGF0YQogKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEFydGlmYWN0IGRhdGEgdG8gcHJvY2Vzcy4KICovCndpbmRvdy5hcnRpZmFjdC5wcm9jZXNzRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgaWYgKGRhdGEuZXJyb3IgfHwgIWRhdGEucmVzdWx0KSB7CiAgICBsb2cud2FybignRmFpbGVkIHRvIGZpbmQgcmVzdWx0IGluIGdldEFydGlmYWN0UG9ydGFscyByZXNwb25zZScpOwogICAgcmV0dXJuOwogIH0KCiAgdmFyIG9sZEFydGlmYWN0cyA9IHdpbmRvdy5hcnRpZmFjdC5lbnRpdGllczsKICB3aW5kb3cuYXJ0aWZhY3QuY2xlYXJEYXRhKCk7CgogIHdpbmRvdy5hcnRpZmFjdC5wcm9jZXNzUmVzdWx0KGRhdGEucmVzdWx0KTsKICB3aW5kb3cucnVuSG9va3MoJ2FydGlmYWN0c1VwZGF0ZWQnLCB7IG9sZDogb2xkQXJ0aWZhY3RzLCBuZXc6IHdpbmRvdy5hcnRpZmFjdC5lbnRpdGllcyB9KTsKCiAgLy8gcmVkcmF3IHRoZSBhcnRpZmFjdCBsYXllcgogIHdpbmRvdy5hcnRpZmFjdC51cGRhdGVMYXllcigpOwp9OwoKLyoqCiAqIENsZWFycyBhbGwgc3RvcmVkIGFydGlmYWN0IGRhdGEuCiAqIEBmdW5jdGlvbiB3aW5kb3cuYXJ0aWZhY3QuY2xlYXJEYXRhCiAqLwp3aW5kb3cuYXJ0aWZhY3QuY2xlYXJEYXRhID0gZnVuY3Rpb24gKCkgewogIHdpbmRvdy5hcnRpZmFjdC5wb3J0YWxJbmZvID0ge307CiAgd2luZG93LmFydGlmYWN0LmFydGlmYWN0VHlwZXMgPSB7fTsKCiAgd2luZG93LmFydGlmYWN0LmVudGl0aWVzID0gW107Cn07CgovKioKICogUHJvY2Vzc2VzIHRoZSByZXN1bHRzIGZyb20gYXJ0aWZhY3QgcG9ydGFsIGRhdGEuIEV4dHJhY3RzIGFuZCBzdG9yZXMgcG9ydGFsIGRhdGEgZm9yIGVhY2ggYXJ0aWZhY3QgdHlwZS4KICogQGZ1bmN0aW9uIHdpbmRvdy5hcnRpZmFjdC5wcm9jZXNzUmVzdWx0CiAqIEBwYXJhbSB7T2JqZWN0fSBwb3J0YWxzIC0gVGhlIGFydGlmYWN0IHBvcnRhbCBkYXRhLgogKi8Kd2luZG93LmFydGlmYWN0LnByb2Nlc3NSZXN1bHQgPSBmdW5jdGlvbiAocG9ydGFscykgewogIC8vIHBvcnRhbHMgaXMgYW4gb2JqZWN0LCBrZXllZCBmcm9tIHRoZSBwb3J0YWwgR1VJRCwgY29udGFpbmluZyB0aGUgcG9ydGFsIGVudGl0eSBhcnJheQoKICBmb3IgKHZhciBndWlkIGluIHBvcnRhbHMpIHsKICAgIHZhciBlbnQgPSBwb3J0YWxzW2d1aWRdOwogICAgdmFyIGRhdGEgPSB3aW5kb3cuZGVjb2RlQXJyYXkucG9ydGFsKGVudCwgJ3N1bW1hcnknKTsKCiAgICBpZiAoIWRhdGEuYXJ0aWZhY3RCcmllZikgewogICAgICAvLyAyLzEyLzIwMTcgLSBTaGFyZCByZW1vdmVkIGZyb20gYSBwb3J0YWwgbGVhdmVzIGl0IGluIGFydGlmYWN0IHJlc3VsdHMgYnV0IGhhcyBubyBhcnRpZmFjdEJyaWVmCiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIHdlIG5vIGxvbmdlciBrbm93IHRoZSBmYWN0aW9uIGZvciB0aGUgdGFyZ2V0IHBvcnRhbHMsIGFuZCB3ZSBkb24ndCBrbm93IHdoaWNoIGZyYWdtZW50IG51bWJlcnMgYXJlIGF0IHRoZSBwb3J0YWxzCiAgICAvLyBhbGwgd2Uga25vdywgZnJvbSB0aGUgcG9ydGFsIHN1bW1hcnkgZGF0YSwgZm9yIGVhY2ggdHlwZSBvZiBhcnRpZmFjdCwgaXMgdGhhdCBlYWNoIGFydGlmYWN0IHBvcnRhbCBpcwogICAgLy8gLSBhIHRhcmdldCBwb3J0YWwgb3Igbm90IC0gbm8gaWRlYSBmb3Igd2hpY2ggZmFjdGlvbgogICAgLy8gLSBoYXMgb25lIChvciBtb3JlKSBmcmFnbWVudHMsIG9yIG5vdAoKICAgIGlmICghd2luZG93LmFydGlmYWN0LnBvcnRhbEluZm9bZ3VpZF0pIHdpbmRvdy5hcnRpZmFjdC5wb3J0YWxJbmZvW2d1aWRdID0ge307CgogICAgLy8gc3RvcmUgdGhlIGRlY29kZWQgZGF0YSAtIG5lZWRlZCBmb3IgbGF0L2xuZyBmb3IgbGF5ZXIgbWFya2VycwogICAgd2luZG93LmFydGlmYWN0LnBvcnRhbEluZm9bZ3VpZF0uX2RhdGEgPSBkYXRhOwoKICAgIGZvciAobGV0IHR5cGUgaW4gZGF0YS5hcnRpZmFjdEJyaWVmLnRhcmdldCkgewogICAgICBpZiAoIXdpbmRvdy5hcnRpZmFjdC5hcnRpZmFjdFR5cGVzW3R5cGVdKSB3aW5kb3cuYXJ0aWZhY3QuYXJ0aWZhY3RUeXBlc1t0eXBlXSA9IHt9OwoKICAgICAgaWYgKCF3aW5kb3cuYXJ0aWZhY3QucG9ydGFsSW5mb1tndWlkXVt0eXBlXSkgd2luZG93LmFydGlmYWN0LnBvcnRhbEluZm9bZ3VpZF1bdHlwZV0gPSB7fTsKCiAgICAgIHdpbmRvdy5hcnRpZmFjdC5wb3J0YWxJbmZvW2d1aWRdW3R5cGVdLnRhcmdldCA9IHdpbmRvdy5URUFNX05PTkU7IC8vIGFzIHdlIG5vIGxvbmdlciBrbm93IHRoZSB0ZWFtLi4uCiAgICB9CgogICAgZm9yIChsZXQgdHlwZSBpbiBkYXRhLmFydGlmYWN0QnJpZWYuZnJhZ21lbnQpIHsKICAgICAgaWYgKCF3aW5kb3cuYXJ0aWZhY3QuYXJ0aWZhY3RUeXBlc1t0eXBlXSkgd2luZG93LmFydGlmYWN0LmFydGlmYWN0VHlwZXNbdHlwZV0gPSB7fTsKCiAgICAgIGlmICghd2luZG93LmFydGlmYWN0LnBvcnRhbEluZm9bZ3VpZF1bdHlwZV0pIHdpbmRvdy5hcnRpZmFjdC5wb3J0YWxJbmZvW2d1aWRdW3R5cGVdID0ge307CgogICAgICB3aW5kb3cuYXJ0aWZhY3QucG9ydGFsSW5mb1tndWlkXVt0eXBlXS5mcmFnbWVudHMgPSB0cnVlOyAvLyBhcyB3ZSBubyBsb25nZXIgaGF2ZSBhIGxpc3Qgb2YgdGhlIGZyYWdtZW50cyB0aGVyZQogICAgfQoKICAgIC8vIGxldCdzIHByZS1nZW5lcmF0ZSB0aGUgZW50aXRpZXMgbmVlZGVkIHRvIHJlbmRlciB0aGUgbWFwIC0gYXJyYXkgb2YgW2d1aWQsIHRpbWVzdGFtcCwgZW50X2FycmF5XQogICAgd2luZG93LmFydGlmYWN0LmVudGl0aWVzLnB1c2goW2d1aWQsIGRhdGEudGltZXN0YW1wLCBlbnRdKTsKICB9Cn07CgovKioKICogUmV0dXJucyB0aGUgdHlwZXMgb2YgYXJ0aWZhY3RzIGN1cnJlbnRseSBrbm93bi4KICogQGZ1bmN0aW9uIHdpbmRvdy5hcnRpZmFjdC5nZXRBcnRpZmFjdFR5cGVzCiAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgb2YgYXJ0aWZhY3QgdHlwZSBzdHJpbmdzLgogKi8Kd2luZG93LmFydGlmYWN0LmdldEFydGlmYWN0VHlwZXMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIE9iamVjdC5rZXlzKHdpbmRvdy5hcnRpZmFjdC5hcnRpZmFjdFR5cGVzKTsKfTsKCi8qKgogKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gdHlwZSBpcyBhIGtub3dhYmxlIGFydGlmYWN0LgogKiBAZnVuY3Rpb24gd2luZG93LmFydGlmYWN0LmlzQXJ0aWZhY3QKICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHR5cGUgaXMgYW4gYXJ0aWZhY3QsIGZhbHNlIG90aGVyd2lzZS4KICovCndpbmRvdy5hcnRpZmFjdC5pc0FydGlmYWN0ID0gZnVuY3Rpb24gKHR5cGUpIHsKICByZXR1cm4gdHlwZSBpbiB3aW5kb3cuYXJ0aWZhY3QuYXJ0aWZhY3RUeXBlczsKfTsKCi8qKgogKiBVc2VkIHRvIHJlbmRlciBwb3J0YWxzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGJlIGJlbG93IHRoZSB2aXNpYmxlIGxldmVsLgogKiBAZnVuY3Rpb24gd2luZG93LmFydGlmYWN0LmdldEFydGlmYWN0RW50aXRpZXMKICogQHJldHVybnMge0FycmF5fSBhcnJheSBvZiBQb3J0YWwgZW50aXRpZXMgd2l0aCBzaGFyZHMgb3Igc2hhcmQgdGFyZ2V0cwogKgogKiB1bnVzZWQgYnkgSUlUQwogKi8Kd2luZG93LmFydGlmYWN0LmdldEFydGlmYWN0RW50aXRpZXMgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHdpbmRvdy5hcnRpZmFjdC5lbnRpdGllczsKfTsKCi8qKgogKiBJbmplY3QgYXJ0aWZhY3QgcG9ydGFscyBpbnRvIHJlbmRlciBwcm9jZXNzCiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhCiAqLwp3aW5kb3cuYXJ0aWZhY3QuZW50aXR5SW5qZWN0ID0gZnVuY3Rpb24gKGRhdGEpIHsKICBkYXRhLmNhbGxiYWNrKHdpbmRvdy5hcnRpZmFjdC5lbnRpdGllcywgJ3N1bW1hcnknKTsKfTsKCi8qKgogKiBHZXRzIHRoZSBwb3J0YWxzIHRoYXQgYXJlIHJlbGV2YW50IHRvIHRoZSBhcnRpZmFjdHMuCiAqIEBmdW5jdGlvbiB3aW5kb3cuYXJ0aWZhY3QuZ2V0SW50ZXJlc3RpbmdQb3J0YWxzCiAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgb2YgcG9ydGFsIEdVSURzLgogKi8Kd2luZG93LmFydGlmYWN0LmdldEludGVyZXN0aW5nUG9ydGFscyA9IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gT2JqZWN0LmtleXMod2luZG93LmFydGlmYWN0LnBvcnRhbEluZm8pOwp9OwoKLyoqCiAqIFF1aWNrbHkgY2hlY2tzIGlmIGEgcG9ydGFsIGlzIHJlbGV2YW50IHRvIGFueSB0eXBlIG9mIGFydGlmYWN0cy4KICogQGZ1bmN0aW9uIHdpbmRvdy5hcnRpZmFjdC5pc0ludGVyZXN0aW5nUG9ydGFsCiAqIEBwYXJhbSB7c3RyaW5nfSBndWlkIC0gVGhlIEdVSUQgb2YgdGhlIHBvcnRhbCB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBvcnRhbCBpcyBpbnZvbHZlZCBpbiBhcnRpZmFjdHMsIGZhbHNlIG90aGVyd2lzZS4KICovCndpbmRvdy5hcnRpZmFjdC5pc0ludGVyZXN0aW5nUG9ydGFsID0gZnVuY3Rpb24gKGd1aWQpIHsKICByZXR1cm4gZ3VpZCBpbiB3aW5kb3cuYXJ0aWZhY3QucG9ydGFsSW5mbzsKfTsKCi8qKgogKiBSZXRyaWV2ZXMgdGhlIGFydGlmYWN0IGRhdGEgZm9yIGEgc3BlY2lmaWVkIGFydGlmYWN0IGlkIChlLmcuICdqYXJ2aXMnKSwgaWYgYXZhaWxhYmxlLgogKiBAZnVuY3Rpb24gd2luZG93LmFydGlmYWN0LmdldFBvcnRhbERhdGEKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge3N0cmluZ30gYXJ0aWZhY3RJZCAtIFRoZSBJRCBvZiB0aGUgYXJ0aWZhY3QgdHlwZS4KICogQHJldHVybnMge09iamVjdHxmYWxzZX0gQXJ0aWZhY3QgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCBwb3J0YWwgYW5kIHR5cGUsIG9yIHVuZGVmaW5lZCBpZiBub3QgYXZhaWxhYmxlLgogKgogKiB1bnVzZWQgYnkgSUlUQwogKi8Kd2luZG93LmFydGlmYWN0LmdldFBvcnRhbERhdGEgPSBmdW5jdGlvbiAoZ3VpZCwgYXJ0aWZhY3RJZCkgewogIHJldHVybiB3aW5kb3cuYXJ0aWZhY3QucG9ydGFsSW5mb1tndWlkXSAmJiB3aW5kb3cuYXJ0aWZhY3QucG9ydGFsSW5mb1tndWlkXVthcnRpZmFjdElkXTsKfTsKCi8qKgogKiBVcGRhdGVzIHRoZSBhcnRpZmFjdCBsYXllciBvbiB0aGUgbWFwIGJhc2VkIG9uIHRoZSBjdXJyZW50IGFydGlmYWN0IGRhdGEuCiAqIEBmdW5jdGlvbiB3aW5kb3cuYXJ0aWZhY3QudXBkYXRlTGF5ZXIKICovCndpbmRvdy5hcnRpZmFjdC51cGRhdGVMYXllciA9IGZ1bmN0aW9uICgpIHsKICB3aW5kb3cuYXJ0aWZhY3QuX2xheWVyLmNsZWFyTGF5ZXJzKCk7CgogICQuZWFjaCh3aW5kb3cuYXJ0aWZhY3QucG9ydGFsSW5mbywgZnVuY3Rpb24gKGd1aWQsIGRhdGEpIHsKICAgIHZhciBsYXRsbmcgPSBMLmxhdExuZyhbZGF0YS5fZGF0YS5sYXRFNiAvIDFlNiwgZGF0YS5fZGF0YS5sbmdFNiAvIDFlNl0pOwoKICAgICQuZWFjaChkYXRhLCBmdW5jdGlvbiAodHlwZSkgewogICAgICAvLyB3ZSdsbCBjb25zdHJ1Y3QgdGhlIFVSTCBmb3JtIHRoZSB0eXBlIC0gc3RvY2sgc2VlbXMgdG8gZG8gdGhhdCBub3cKCiAgICAgIGxldCBpY29uVXJsLCBpY29uU2l6ZSwgb3BhY2l0eTsKICAgICAgaWYgKGRhdGFbdHlwZV0udGFyZ2V0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAvLyB0YXJnZXQgcG9ydGFsCiAgICAgICAgaWNvblVybCA9ICcvL2NvbW1vbmRhdGFzdG9yYWdlLmdvb2dsZWFwaXMuY29tL2luZ3Jlc3MuY29tL2ltZy9tYXBfaWNvbnMvbWFya2VyX2ltYWdlcy8nICsgdHlwZSArICdfc2hhcmRfdGFyZ2V0LnBuZyc7CiAgICAgICAgaWNvblNpemUgPSAxMDAgLyAyOwogICAgICAgIG9wYWNpdHkgPSAxLjA7CgogICAgICAgIGNvbnN0IGljb24gPSBMLmljb24oewogICAgICAgICAgaWNvblVybDogaWNvblVybCwKICAgICAgICAgIGljb25TaXplOiBbaWNvblNpemUsIGljb25TaXplXSwKICAgICAgICAgIGljb25BbmNob3I6IFtpY29uU2l6ZSAvIDIsIGljb25TaXplIC8gMl0sCiAgICAgICAgfSk7CgogICAgICAgIGNvbnN0IG1hcmtlciA9IEwubWFya2VyKGxhdGxuZywgeyBpY29uOiBpY29uLCBpbnRlcmFjdGl2ZTogZmFsc2UsIGtleWJvYXJkOiBmYWxzZSwgb3BhY2l0eTogb3BhY2l0eSB9KTsKCiAgICAgICAgd2luZG93LmFydGlmYWN0Ll9sYXllci5hZGRMYXllcihtYXJrZXIpOwogICAgICB9IGVsc2UgaWYgKGRhdGFbdHlwZV0uZnJhZ21lbnRzKSB7CiAgICAgICAgLy8gZnJhZ21lbnQocykgYXQgcG9ydGFsCgogICAgICAgIGljb25VcmwgPSAnLy9jb21tb25kYXRhc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9pbmdyZXNzLmNvbS9pbWcvbWFwX2ljb25zL21hcmtlcl9pbWFnZXMvJyArIHR5cGUgKyAnX3NoYXJkLnBuZyc7CiAgICAgICAgaWNvblNpemUgPSA2MCAvIDI7CiAgICAgICAgb3BhY2l0eSA9IDAuNjsKCiAgICAgICAgY29uc3QgaWNvbiA9IEwuaWNvbih7CiAgICAgICAgICBpY29uVXJsOiBpY29uVXJsLAogICAgICAgICAgaWNvblNpemU6IFtpY29uU2l6ZSwgaWNvblNpemVdLAogICAgICAgICAgaWNvbkFuY2hvcjogW2ljb25TaXplIC8gMiwgaWNvblNpemUgLyAyXSwKICAgICAgICB9KTsKCiAgICAgICAgY29uc3QgbWFya2VyID0gTC5tYXJrZXIobGF0bG5nLCB7IGljb246IGljb24sIGludGVyYWN0aXZlOiBmYWxzZSwga2V5Ym9hcmQ6IGZhbHNlLCBvcGFjaXR5OiBvcGFjaXR5IH0pOwoKICAgICAgICB3aW5kb3cuYXJ0aWZhY3QuX2xheWVyLmFkZExheWVyKG1hcmtlcik7CiAgICAgIH0KICAgIH0pOyAvLyBlbmQgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uKHR5cGUsZGV0YWlsKQogIH0pOyAvLyBlbmQgJC5lYWNoKGFydGlmYWN0LnBvcnRhbEluZm8sIGZ1bmN0aW9uKGd1aWQsZGF0YSkKfTsKCi8qKgogKiBEaXNwbGF5cyBhIGRpYWxvZyBsaXN0aW5nIGFsbCBwb3J0YWxzIGludm9sdmVkIHdpdGggYXJ0aWZhY3RzLCBvcmdhbml6ZWQgYnkgYXJ0aWZhY3QgdHlwZXMuCiAqIEBmdW5jdGlvbiB3aW5kb3cuYXJ0aWZhY3Quc2hvd0FydGlmYWN0TGlzdAogKi8Kd2luZG93LmFydGlmYWN0LnNob3dBcnRpZmFjdExpc3QgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGh0bWwgPSAnJzsKCiAgaWYgKE9iamVjdC5rZXlzKHdpbmRvdy5hcnRpZmFjdC5hcnRpZmFjdFR5cGVzKS5sZW5ndGggPT09IDApIHsKICAgIGh0bWwgKz0gJzxpPk5vIGFydGlmYWN0cyBhdCB0aGlzIHRpbWU8L2k+JzsKICB9CgogIHZhciBmaXJzdCA9IHRydWU7CiAgJC5lYWNoKHdpbmRvdy5hcnRpZmFjdC5hcnRpZmFjdFR5cGVzLCBmdW5jdGlvbiAodHlwZSkgewogICAgLy8gbm8gbmljZSB3YXkgdG8gY29udmVydCB0aGUgTmlhbnRpYyBpbnRlcm5hbCBuYW1lIGludG8gdGhlIGNvcnJlY3QgZGlzcGxheSBuYW1lCiAgICAvLyAod2UgZG8gZ2V0IHRoZSBkZXNjcmlwdGlvbiBzdHJpbmcgb25jZSBhIHBvcnRhbCB3aXRoIHRoYXQgc2hhcmQgdHlwZSBpcyBzZWxlY3RlZCAtIGNvdWxkIGNhY2hlIHRoYXQgc29tZXdoZXJlPykKICAgIHZhciBuYW1lID0gdHlwZS5jYXBpdGFsaXplKCkgKyAnIHNoYXJkcyc7CgogICAgaWYgKCFmaXJzdCkgaHRtbCArPSAnPGhyPic7CiAgICBmaXJzdCA9IGZhbHNlOwogICAgaHRtbCArPSAnPGRpdj48Yj4nICsgbmFtZSArICc8L2I+PC9kaXY+JzsKCiAgICBodG1sICs9ICc8dGFibGUgY2xhc3M9ImFydGlmYWN0IGFydGlmYWN0LScgKyB0eXBlICsgJyI+JzsKICAgIGh0bWwgKz0gJzx0cj48dGg+UG9ydGFsPC90aD48dGg+RGV0YWlsczwvdGg+PC90cj4nOwoKICAgIHZhciB0YWJsZVJvd3MgPSBbXTsKCiAgICAkLmVhY2god2luZG93LmFydGlmYWN0LnBvcnRhbEluZm8sIGZ1bmN0aW9uIChndWlkLCBkYXRhKSB7CiAgICAgIGlmICh0eXBlIGluIGRhdGEpIHsKICAgICAgICAvLyB0aGlzIHBvcnRhbCBoYXMgZGF0YSBmb3IgdGhpcyBhcnRpZmFjdCB0eXBlIC0gYWRkIGl0IHRvIHRoZSB0YWJsZQoKICAgICAgICB2YXIgb25jbGljayA9ICJ6b29tVG9BbmRTaG93UG9ydGFsKCciICsgZ3VpZCArICInLFsiICsgZGF0YS5fZGF0YS5sYXRFNiAvIDFlNiArICcsJyArIGRhdGEuX2RhdGEubG5nRTYgLyAxZTYgKyAnXSknOwogICAgICAgIHZhciByb3cgPSAnPHRyPjx0ZCBjbGFzcz0icG9ydGFsIj48YSBvbmNsaWNrPSInICsgb25jbGljayArICciPicgKyB3aW5kb3cuZXNjYXBlSHRtbFNwZWNpYWxDaGFycyhkYXRhLl9kYXRhLnRpdGxlKSArICc8L2E+PC90ZD4nOwoKICAgICAgICByb3cgKz0gJzx0ZCBjbGFzcz0iaW5mbyI+JzsKCiAgICAgICAgaWYgKGRhdGFbdHlwZV0udGFyZ2V0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGlmIChkYXRhW3R5cGVdLnRhcmdldCA9PT0gd2luZG93LlRFQU1fTk9ORSkgewogICAgICAgICAgICByb3cgKz0gJzxzcGFuIGNsYXNzPSJ0YXJnZXQiPlRhcmdldCBQb3J0YWw8L3NwYW4+ICc7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByb3cgKz0gYDxzcGFuIGNsYXNzPSJ0YXJnZXQgJHt3aW5kb3cuVEVBTV9UT19DU1NbZGF0YVt0eXBlXS50YXJnZXRdfSI+JHsKICAgICAgICAgICAgICBkYXRhW3R5cGVdLnRhcmdldCA9PT0gd2luZG93LlRFQU1fUkVTID8gJ1Jlc2lzdGFuY2UnIDogJ0VubGlnaHRlbmVkJwogICAgICAgICAgICB9IHRhcmdldDwvc3Bhbj4gYDsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChkYXRhW3R5cGVdLmZyYWdtZW50cykgewogICAgICAgICAgaWYgKGRhdGFbdHlwZV0udGFyZ2V0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcm93ICs9ICc8YnI+JzsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBmcmFnbWVudE5hbWUgPSAnc2hhcmQnOwogICAgICAgICAgLy8gcm93ICs9ICc8c3BhbiBjbGFzcz0iZnJhZ21lbnRzJysoZGF0YVt0eXBlXS50YXJnZXQ/JyAnK1RFQU1fVE9fQ1NTW2RhdGFbdHlwZV0udGFyZ2V0XTonJykrJyI+JytmcmFnbWVudE5hbWUrJzogIycrZGF0YVt0eXBlXS5mcmFnbWVudHMuam9pbignLCAjJykrJzwvc3Bhbj4gJzsKICAgICAgICAgIHJvdyArPSAnPHNwYW4gY2xhc3M9ImZyYWdtZW50cycgKyAoZGF0YVt0eXBlXS50YXJnZXQgPyAnICcgKyB3aW5kb3cuVEVBTV9UT19DU1NbZGF0YVt0eXBlXS50YXJnZXRdIDogJycpICsgJyI+JyArIGZyYWdtZW50TmFtZSArICc6IHllczwvc3Bhbj4gJzsKICAgICAgICB9CgogICAgICAgIHJvdyArPSAnPC90ZD48L3RyPic7CgogICAgICAgIC8vIHNvcnQgYnkgdGFyZ2V0IHBvcnRhbHMgZmlyc3QsIHRoZW4gYnkgcG9ydGFsIEdVSUQKICAgICAgICB2YXIgc29ydFZhbCA9IChkYXRhW3R5cGVdLnRhcmdldCAhPT0gdW5kZWZpbmVkID8gJ0EnIDogJ1onKSArIGd1aWQ7CgogICAgICAgIHRhYmxlUm93cy5wdXNoKFtzb3J0VmFsLCByb3ddKTsKICAgICAgfQogICAgfSk7CgogICAgLy8gY2hlY2sgZm9yIG5vIHJvd3MsIGFuZCBhZGQgYSBub3RlIHRvIHRoZSB0YWJsZSBpbnN0ZWFkCiAgICBpZiAodGFibGVSb3dzLmxlbmd0aCA9PT0gMCkgewogICAgICBodG1sICs9ICc8dHI+PHRkIGNvbHNwYW49IjIiPjxpPk5vIHBvcnRhbHMgYXQgdGhpcyB0aW1lPC9pPjwvdGQ+PC90cj4nOwogICAgfQoKICAgIC8vIHNvcnQgdGhlIHJvd3MKICAgIHRhYmxlUm93cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIGlmIChhWzBdID09PSBiWzBdKSByZXR1cm4gMDsKICAgICAgZWxzZSBpZiAoYVswXSA8IGJbMF0pIHJldHVybiAtMTsKICAgICAgZWxzZSByZXR1cm4gMTsKICAgIH0pOwoKICAgIC8vIGFuZCBhZGQgdGhlbSB0byB0aGUgdGFibGUKICAgIGh0bWwgKz0gdGFibGVSb3dzCiAgICAgIC5tYXAoZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gYVsxXTsKICAgICAgfSkKICAgICAgLmpvaW4oJycpOwoKICAgIGh0bWwgKz0gJzwvdGFibGU+JzsKICB9KTsKCiAgLy8gSW4gU3VtbWVyIDIwMTUsIE5pYW50aWMgY2hhbmdlZCB0aGUgZGF0YSBmb3JtYXQgZm9yIGFydGlmYWN0IHBvcnRhbHMuIFdlIG5vIGxvbmdlciBrbm93OgogIC8vIC0gV2hpY2ggdGVhbSBlYWNoIHRhcmdldCBwb3J0YWwgaXMgZm9yIC0gb25seSB0aGF0IGl0IGlzIGEgdGFyZ2V0CiAgLy8gLSBXaGljaCBzaGFyZHMgYXJlIGF0IGVhY2ggcG9ydGFsLCBqdXN0IHRoYXQgaXQgaGFzIG9uZSBvciBtb3JlIHNoYXJkcwogIC8vIFlvdSBjYW4gc2VsZWN0IGEgcG9ydGFsIGFuZCB0aGUgZGV0YWlsZWQgZGF0YSBjb250YWlucyB0aGUgbGlzdCBvZiBzaGFyZCBudW1iZXJzLCBidXQgdGhlcmUncyBzdGlsbCBubwogIC8vIG1vcmUgaW5mb3JtYXRpb24gb24gdGFyZ2V0cwoKICB3aW5kb3cuZGlhbG9nKHsKICAgIHRpdGxlOiAnQXJ0aWZhY3RzJywKICAgIGlkOiAnaWl0Yy1hcnRpZmFjdHMnLAogICAgaHRtbDogaHRtbCwKICAgIHdpZHRoOiA0MDAsCiAgICBwb3NpdGlvbjogeyBteTogJ3JpZ2h0IGNlbnRlcicsIGF0OiAnY2VudGVyLTYwIGNlbnRlcicsIG9mOiB3aW5kb3csIGNvbGxpc2lvbjogJ2ZpdCcgfSwKICB9KTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGJvb3QuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdib290Jyk7Ci8qIGdsb2JhbCBMLCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgVGhlc2UgZnVuY3Rpb25zIHNldCB1cCBzcGVjaWZpYyBhcmVhcyBhZnRlciB0aGUgYm9vdCBmdW5jdGlvbiBjcmVhdGVkIGEgYmFzaWMgZnJhbWV3b3JrLgogKiAgICAgICBBbGwgb2YgdGhlc2UgZnVuY3Rpb25zIHNob3VsZCBvbmx5IGV2ZXIgYmUgcnVuIG9uY2UuCiAqIEBtb2R1bGUgYm9vdAogKi8KCi8qKgogKiBJbml0aWFsaXplcyB0b29sdGlwcyBmb3IgYSBzcGVjaWZpZWQgZWxlbWVudCBvciB0aGUgZW50aXJlIGRvY3VtZW50IGlmIG5vIGVsZW1lbnQgaXMgcHJvdmlkZWQuCiAqIFRoaXMgZnVuY3Rpb24gc2V0cyB1cCBqUXVlcnkgVUkgdG9vbHRpcHMgd2l0aCBjdXN0b21pemVkIGJlaGF2aW9yLiBJdCBlbnN1cmVzIHRoYXQgb25seSBvbmUgdG9vbHRpcAogKiBpcyB2aXNpYmxlIGF0IGEgdGltZSBieSBjbG9zaW5nIG90aGVycyB3aGVuIGEgbmV3IG9uZSBvcGVucy4gVGhlIGNvbnRlbnQgb2YgdGhlIHRvb2x0aXAgaXMgZGVyaXZlZAogKiBmcm9tIHRoZSAndGl0bGUnIGF0dHJpYnV0ZSBvZiB0aGUgSFRNTCBlbGVtZW50IGFuZCBpcyBwcm9jZXNzZWQgYnkgdGhlIGBjb252ZXJ0VGV4dFRvVGFibGVNYWdpY2AgZnVuY3Rpb24uCiAqCiAqIEFkZGl0aW9uYWxseSwgdGhpcyBmdW5jdGlvbiBzZXRzIHVwIGEgb25lLXRpbWUgZXZlbnQgaGFuZGxlciAoaWYgbm90IGFscmVhZHkgc2V0KSBvbiB0aGUgZG9jdW1lbnQKICogdG8gcmVtb3ZlIHRvb2x0aXBzIHdoZW4gY2xpY2tlZC4gVGhpcyBpcyBjb250cm9sbGVkIGJ5IHRoZSBgdG9vbHRpcENsZWFyZXJIYXNCZWVuU2V0dXBgIGZsYWcgdG8gcHJldmVudAogKiBtdWx0aXBsZSBiaW5kaW5ncyBvZiB0aGUgZXZlbnQgaGFuZGxlci4KICoKICogQGZ1bmN0aW9uIHNldHVwVG9vbHRpcHMKICogQHBhcmFtIHtqUXVlcnl8SFRNTEVsZW1lbnR9IFtlbGVtZW50PWRvY3VtZW50XSAtIFRoZSBqUXVlcnkgb3IgRE9NIGVsZW1lbnQgdG8gd2hpY2ggdGhlIHRvb2x0aXBzIHdpbGwgYmUgYXR0YWNoZWQuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBub3QgcHJvdmlkZWQsIHRoZSBkb2N1bWVudCBpdHNlbGYgaXMgdXNlZC4KICovCndpbmRvdy5zZXR1cFRvb2x0aXBzID0gZnVuY3Rpb24gKGVsZW1lbnQpIHsKICBlbGVtZW50ID0gZWxlbWVudCB8fCAkKGRvY3VtZW50KTsKICBlbGVtZW50LnRvb2x0aXAoewogICAgLy8gZGlzYWJsZSBzaG93L2hpZGUgYW5pbWF0aW9uCiAgICBzaG93OiB7IGVmZmVjdDogJ25vbmUnLCBkdXJhdGlvbjogMCwgZGVsYXk6IDM1MCB9LAogICAgaGlkZTogZmFsc2UsCiAgICBvcGVuOiBmdW5jdGlvbiAoZXZlbnQsIHVpKSB7CiAgICAgIC8vIGVuc3VyZSBhbGwgb3RoZXIgdG9vbHRpcHMgYXJlIGNsb3NlZAogICAgICAkKCcudWktdG9vbHRpcCcpLm5vdCh1aS50b29sdGlwKS5yZW1vdmUoKTsKICAgIH0sCiAgICBjb250ZW50OiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciB0aXRsZSA9ICQodGhpcykuYXR0cigndGl0bGUnKTsKICAgICAgcmV0dXJuIHdpbmRvdy5jb252ZXJ0VGV4dFRvVGFibGVNYWdpYyh0aXRsZSk7CiAgICB9LAogIH0pOwoKICBpZiAoIXdpbmRvdy50b29sdGlwQ2xlYXJlckhhc0JlZW5TZXR1cCkgewogICAgd2luZG93LnRvb2x0aXBDbGVhcmVySGFzQmVlblNldHVwID0gdHJ1ZTsKICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcudWktdG9vbHRpcCcsIGZ1bmN0aW9uICgpIHsKICAgICAgJCh0aGlzKS5yZW1vdmUoKTsKICAgIH0pOwogIH0KfTsKCi8qKgogKiBJbml0aWFsaXplcyBJbmdyZXNzIG1hcmtlcnMgd2l0aCBjdXN0b20gaWNvbnMuCiAqIEBmdW5jdGlvbiBzZXR1cEluZ3Jlc3NNYXJrZXJzCiAqLwpmdW5jdGlvbiBzZXR1cEluZ3Jlc3NNYXJrZXJzKCkgewogIEwuSWNvbi5EZWZhdWx0Lm1lcmdlT3B0aW9ucyh7CiAgICBpY29uVXJsOiAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFCa0FBQUFwQ0FZQUFBREFrNExPQUFBQUNYQklXWE1BQUFzVEFBQUxFd0VBbXB3WUFBQUFJR05JVWswQUFIb2xBQUNBZ3dBQStmOEFBSURwQUFCMU1BQUE2bUFBQURxWUFBQVhiNUpmeFVZQUFBb2NTVVJCVkhqYW5OUmJVRk4zSGdmd3Y5UGR6dTVzWjdjUDNkMWVwclA3c0MvYlB2U2xzOU1tQjVDTGNnMklJQWhTV3dTOHJGcXJwYlZidTNWZGQyb3YwNHFKZ0dCRVNBSkpDT1IyQWlGY0VwS1Qrd2toaUlpQ29DSktrUWhDSUVnRXZ2c1FjYW9WZGZmaE0rZk1PZi8vLzN2KzUvYzdoOFM4bGs2NGYwd2tINy85TFpHbnNVU2N6QkJSRWtORVNSYWllTTlKT2c2Zkp6VUpsamNrUEdhamhNZnNGNmRZam9sVExNVjE2YlpNeFJiblcyS2VoVWhTR1NKS3RCQmx2cHRJTSsya0p0NUNSSWtXSWtsamlDU1ZJV1MxRUhFeVE2U1p0cmRWQmU1am9tUkxkMTI2ZFZhNnliWlluK09BYkpOOXFTN2RPaWRKWXk2SWtpM2ZTM2dNNS84SitiTW8wVkpabTJwZGFIalBpYVo5WHJSK2RnNnRuNTlEMjZGZXRCMDZoOVovbkVQenZtNG90N2xSbDI1ZHJJNDNWemQrNFByTE00V0lrcGpJbWtSbVdKSG5Ra3R4RDlvKzcwWExKejdvOW5XRDN1TUZ2ZHNMZW84WHVnKzdvUy8yM2IvZmc0YjNYQkNsTU5mRnlVeDhUZUlqSVd0ZlRTUHYvaUdlSEhqN0d5TG5zZW5pSkdaR3M4T0R0a085YVA2b0c5cWRYZERzOEVDM3g0cys1U2p1ak16aEluMERUZnU2b2RuaGdYWm5GNW8rNmtiYm9WNW9kblpCbE1RRWF4SXN1UStGSkx5K21VUy90b0Y4OHZiM2Y1TWx1KzlvZDNYQmNQQWN0RHU3b0M3MFFGM2tnYlAwTXU1Y0QyTE92NERGaFNYTStSY3djM01lYk1VUTFFVWVxQXM5ME93TXo2TjNlMUdUWUprVkpWb29TU3BEYWxOdGhGVEV0SktLbU5iZm5vbnJ1S0RheHNKd3NBZnE3UjZvQ2xtWWpsN0FyYjVwM0oyNWh6N2xLRm8vNzhYc3Jic3dIdTdET2VrSTVxZENtTGc0QS9PeGZxZ0tXYWkzZTJENHRBZktBamVxMTVzSHF0ZWJmM2M2cm8yUW1uVU1xWTYxSEpKdXRNUHdhUTgwT3p6UTcvZGhxR01jOTRLTHVPNjhqZGJQemtGVndFSi93SWZRM0NMYUR2VkNWY0RDOEdrUHJqSVR1QmRjeEJYekxiUVU5endJa21VNFVMSFc4R1g4NjltRW5JMHovLzVzbkhsY3U2c0x1cjFldU11SE1IdnJMdndEQVppLzdvZHlteHZLZkJiS2ZCYTZ2ZDBZODkyQi91TWVLTGV4WWZuM2Q5dy9qVG4vQXJxRXc5RHQ5WUwrdXhmQ0dPUEUvcmUrZTVsVXhYVG1TVkt0MEI4SXQrUDBhQkNEaGgraEttU2h6SGREWGNoQ3M5MEQ3WTR3ZWxmWGczUE5kZzgwUlI0MDVydWhLbVRScjcyQjZkRWdsTnZjYUQ3Z1EyMmFGZUk0eDFaeUpzb2tWdVE1b2R2cmhTTFBoZHVEQWRpT0Q2RDluK0gzSHhpYngvUm9FSlBEczVnZURXTDZlaERUbzBGTVhabkY5UFVnQW1Qem1QTXZ3SFQwQXN4ZjljTS9HSUFpendYZFhpOGE4cHc0RTJXU0VHR1V5YWtxWUtIWjRZRmlTempFWFg0WmpWdGRHRDgvRFFCWXVyZU1QdVVvVEVmNllEeDhIcVlqZmVpVmorRGUzU1VBZ0g4d2dNYjMzYkFmSDhEdHdRQVVXMXpRYlBkQVZjQkNHR1YwRStGYTQxWDEvUXNOdWVFUXRud0lEVnRjYVAvaVBFTDNpeDhZbThjMTZ3U01oL3N3YkJ6SDdQaGRqRGo4dURlL0NOTy9MMENSNTRLalpCQzNCd05veUhWQlZSRHVOdUZhNHpVaVhHdThvZG51Z1RMZkRmbG1CL3lEQWJqS0xrT1I2NFFpMTRtaGpuR01zcFBRZmRpTlVkZHRMQzh0NDZaM0N2cjlQbHhsSmpCaTgwT1I2MFI5amhPMjQ1ZmdId3hBdnRrQlpiNGJtbkRJRFZJWjJlNXV6SGREdWMwTldiWUQvb0Z3U1AxbUIrUTVUcWlMV0N3RTdzSHl6VVUwNUxrd1B4V0N1c2dENCtFK2hJS0xvSGQ3SWM5eFFyN1pBZHNQbCtBZkNFQ1c3WUF5bjBYakIyNVVScmF6cEp3eXlHVFpkcWlMUEpCdXNzTS9HSUM5WkFDeWJEdE1SL3FnTC9iQlczTUZNemVDME8zMUlqQTJqK2I5UGt3T3o2SzNmZ1JOSDNhajh6OFhJTTkyZ1BuNkl2d0RBVWczaGRlVFpkdFJUclUya05QUjdYdXFrenFoMmQ0RldaWWRFLzB6OEltdllrQS9oc1c3UzNDZkdvSXMyNDZwYTNNWU5Qd0kvMkFBZy9veHpJd0dVWi9qaFAzNEFFTEJSUXgxak1OYmRRVVQvVE9RWmRtaDJkR0Y2cVJPbkk1cDMwZktJL1IvcllocURha0tXTlRuT25IN2NnQUFNTXBPb3FXNEI5Sk1PMlNaZHBpLzZzZnkwakpDd1VVQWdPMkhTNUJ0c2tPYWFZZCt2dzhqZGord0RFeGVtVVY5cmhQcUFoYW5vZ3loOGdqRG02U01hbDV6a3FOcnJjdGtvTXhuNGF1OWhxWFFFaTYzL3dobGdSdlNEQnZxTnRvaHpiQmh4T0VIQU56c25vSTB3LzZBOGdNM0xqWGR4UExTTW5ybEkxQnRZMUdid2VEa3U3cVc4Z2o5R2xJV29TY0NMcDFURVd1QXFzQURhWVlOK21JZnhucW1FSnhjZ0U5OEZmVTVUdFNsMjlDMHJ4dnpkMEl3SE94QjNVWWJaRmwyZEZWZHdaeC9BZVBucDJFNDJBTnBwZzNxUWc4cVl3M2djK2lNazVTT2tCTWNOU25ocUY4UWNPZ2hlWTREaWkxT2lIa01KS2tNTE4vMDQ4N0lIS2F1emNGOHJCKzFHNnpRN2U1QzNRWXJPby8yWVhKb0ZqTTNnckQ5Y0FrU0hnTXhqNEVpendYNVpnZjRITHIvQkZmenF4TmNEU0Y4U2t2NGxKYWM0R2lPbkVub2dES2ZoU1F0SENKSlpTRExzc01udVliNXFSQnVlQ1poUE5LSEVZY2ZkNmRET0Y5L0hZb2NaM2dzajRFa2pZRXFuNFV3dmgxOGp2WmdLZFZFU3FrbVFrb2ptc09vcGo4SktOMXRlWTREOG13SHhDbmhKeFB6R0loVEdLaUxXQXliYm1IK1RnalhyQlBRN09xQ21HZUZoR2VGT0lXQktJVkJmWTREOHMwT0NMajBtSUNpWHhaUU5CRlFOQ0hsRVMwUDhEbmFZOEw0ZGpSdWRZY25KakVRSlRNUXIwajZPVkZ5ZUp5WXg2RHhmVGRPcjJzRG4wTi9zYktMVXFxSmtKVzArMTRSY09seGFaWWRzazEyMUNSWUlFcDh1cG9FUzdpZE45a2c0TkxYUzZtbWx4NEs0WE8xRHpuQjBYeDVlbDBiRkhrdWlKTENDenlOS05rQ1JaNExsWEd0RUhEbzRwOEdQRGFFejlXK0pPRFNvOUpNRzZRWmRweU5NNk42M2VyT3hwa2h6YlNqTHNNS0FWYzNMS0RvRndXVWp2d1VlVFMxbEdvaUFnNzlTV1ZzS3hTNVRsU3Z0K0JzYkhpeG40azFvenJlQWtXT0V4VXhCZ2k0dXIxbEVYcnlxRWRyc3VKRkFZY2VscVF6cU50Z1ExVk1KNnBpZis1TVRDZnEwbTBRYjJEQTUyZ3ZsWEJVTDVTRXY3dUhrRWUzdG9MUDFlNnVpRFpBbnVWQTlUb3pxcUk3dzJFcm9qdFJ2ZDRNZWJZRHA2SU5LT0dvaTBvNEt2STRwRHpTc0lxVzMvQTUyb3NpbmdXMXFWWUlvNHc0RTJWNlFCaGxSRzJxRlNLZUdYd3VmWjdQMWY3Nk1mVWxmSzcyc1lYL2FhY1ZuRnJiQW1tR0hWV3huUkJHR2lHTU1rSVlhVVJWYkNla0dYYVVSZWxSUmpWdlBSM1pUaW9qMng2TG5LUjBUL0lyUG9mdXFVbnVoSVJuUldWa0IwNUhkYUF5c2dNU25oVTF5WjNnYzdUZUVvNzYrUk1jTlZrTldlMDlyampCVWVlV1IrbFJ0OEVHWVl3UnA2aFdDR09NcU50Z1EzbVVIZ0tLemxyNS82MkdQRzBBbjlMK1VzQ2wyZW9FRTBSSkZwUlRCb2lTTERpYllNSkpTdWVzampmL29pYkJUSjZFVk1kM1BsRk5ncGxVUkJ2U1N5T2FJRTVoVUJWbmdqaUZRVmxrTTc1N3B6N3QyM2RrNUduSXFVakRzM2lPejlVeVo5WjFoTCtiOVNaOC8yNkRlZjNyV2MrdGZZVkhvbDlOZTZLbkZmNEJQbGVUV0JiWkRGR1NCV1dSZWh6bnFCSjJ2M21VN0h6ak1ObjF4citlNklrdC9JZzFBb3B1SzR2UVEwRFJyWHl1ZGsxNVJBczVGV0Y0cXRWK0s2dUpFMURhVVBqNDdQUCsxNURuQlJSZGVQLzR6UFArT3dDVjk1NXgvMThoekFBQUFBQkpSVTVFcmtKZ2dnPT0nLAogICAgaWNvblJldGluYVVybDogJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRElBQUFCU0NBWUFBQUFXeTRmckFBQUFDWEJJV1hNQUFBc1RBQUFMRXdFQW1wd1lBQUFBSUdOSVVrMEFBSG9sQUFDQWd3QUErZjhBQUlEcEFBQjFNQUFBNm1BQUFEcVlBQUFYYjVKZnhVWUFBQkhRU1VSQlZIamEzSnQ3VUZ0WGZzZVZicWJieWV4MjJrbW5NOXZNdGp2VGFhYWR5YzcrMFc1bWF5N0lqaW1GUWtUd2dzRXhJZGl4RjhjeHNSMnlKTjdONU5GTU04MmoyWmdid0N5WWg1QkFnRUNnaXhBUDg1Q3UwRnRDWUlPeHdieU1EY2JZWUdPTWVlbmJQNjdPMFJVdkV3Y245cDZaN3o5WDk1N3orNXpmZWY3T2tRU0E1RTlCVzU2VTBhYWZLR1Q4TDVVeHBoaGx0T2xOaFl6L1RDSGovNkNROFdrS0diOWJHV1BhcG93Mi9iVHhSTmNQSkk5U3VsZy85b1F5MnZRcmhZei9RaGx0R2xUSWVHeFNrOHBvVTY1Q3hvY3BaUHlUM3h1QVFzYi9uVUxHZjZtUThTTXJqVlJHbTFDeXF4MWxDUmFvazJ5b1RMYWpmSThWcWpnemxOR210YUJ1S0dSOG5qTGE5SS9mR1lBOHd2aVVRc1ovb0pEeHMySmp5aElzcUVseG91SGRMcHg1Lyt5R2FqelJoZHBVTjlTSnRwVmc4OFZSL0JmeUNPTmZQVlNJNGlqKzFlSW8va3B4RkkvaUtCNGx1OXFoUGVRU2pIL3Y3Q28xL1Q1UTY3M0RIWEZERldjR3liYzRpcit1a1BGdmJIay9LZ28zL3JrOGtzK1hSL0tRUndxMVYzM1FpY1lUZ1FBTjZaMm9PKzZCN21nSHVDTnVhQSs3QXNRZGNhTTIxWTI2WXgxb1NPOWNCVmVUNG9ReTJnUlNqanlTMTVYR21uKzhWYVBRMC9KSTNrQXlWeWZacUJGTnZ4ZWFTZDF4ejVxRzMwL2NFUi9VdTEwMHY0WjN1MUMxenk2RzZaSkhHUC8rMi9hSGY1Wkg4djN5Q0NQa0VVYlVwRGhYQVdnUHVkWlYyOGM5R08rY3h2VUx0OEYvMnJ2aHV5dUJ1Q051QVVRb2Uwd2V5VC8vWUJDUi9NL2trZnlFUE1JSWhZeUg3bWdITFVTZjVvSDJzQXMxS2M0MVZmL2JUdlExakdGNVlSa2tlWmU5R0RKZVIrT0pyblcvMHg1Mm9lNjRoNVpUZDZ4RGFHb1JSc2dqK1R2eUNPUFB2K25RK2lONWhMR1RRT2pUUEdnODBZWEdFMTNRSGUxQTlVSG5tcXBKY2NGVFBJeTVxUVdzbCtidkxLSmJQUXJ1RGZlNitkU211dEh3cmxCZS9kdWRVTWFZaUdjR0NrSU5UMjhLNG9WbllwNG9DamRxaXNLRjVxUTdLcmk4SWIwVDJzT3VkUXMzLytFaUppL09VSVBucGhkd1VUK0d4YmtsZUplOTZHOGN4NTFyOStqdjA4T3pzR1gzcjV1ZjlyQUxEZW1kYUhoWGFNTHlTQjVGNFVZVWhSdGJOaldCRm9VYlAvSjlRT2VGaHZST2FBK3REZEg4L2ptTVdHNVFBNWVYdkJoc20wRDliN3VnZmQyTnhYdEM4MnA4cHd1Nk56dlFWeitPcFh2K0pqZm1tVUxiLzV4ZkcrYVFINFk3NGlZZ2tFY1l2OXdRb2lEVThHeGhtR0d4TU15QXltUzdrRWw2SjdnamJtZ09PQUpVbStwR0wzY1ZpM05MMUtpSm5sc3dmSEllbXRjYzBMem1nUDR0RHpXNjVhTnVhQTQ0b1RuZ1JNdUgzYmpxbWdxQTcyOGFSOTFibmxYbFVNK2tkNkl5Mlk3Q01BTUt3d3hMaFdHR2Y5bklHMVdGWVFZb1pEejlXSGUwWTFYbXJ2d0J6SXpOVVVOdWo4M0JtVHRBQWRZRStiQjcxZTlXdGc5VFE3TTBuN3MzNXRGWk1venEzemhYVlJxeFJ4bGpRbUdZQVVYaHh0cjF2QkZVRUdwQVFhaEJhRkxwbmRDbmVhRFo3NkRpUCszRlJNOXRXdkRDN0JKNnFrWlJtK29PZUk5SWYxd0U4a0czL3pjUmpQWjFGN3BLaGpFMzdSOGdibDY2QTh2SnZvQzg2bzU3YUQ4bGRoYUVHbDVZQzhSU0VHcEF5YTUyMUwvZGlmcTNPMUdUNGtUVlBqdjBhUjRNR1NjQXIzLzBHYkZNb3ZIRVdWVHRkNnlydXVNZStuN0xoOTBidnF0UDY4UkF5elY0bC8yRmpOcHZvUEdFTUVGV0gzUlN1MHBqelFURS9jSXpNVStJSWY2TlVOYW11bEgvdHRDa3F2Ylo0ZmpqSmR5N3ZVZ3p2OUUzQS83VFhsVHRzNitRWTVXNE45d1lOazNpc3ZVRzZ0L3VYT01kK3lxMS9uYzN4cnVtYVhtTGMwdHdGdzZpYXArZDJsYWI2aFo3WlpzWTVKT0NVQU9kTS9ScFFxZXJUTFpqaUw5T2gxTm4zZ0NxOWd2UEs1UHRxTm9pVmE0aEM5dUhPeFBDY0QxaXZZSEtaRHMwQnh6VVBvV01SMEdvQWZrNzJ6Nm5JUGs3Mnk3azcyeURPdEVHZlpxdzZDTVpEclJjQXdBTXRrMEl6MTRWYXIveVZYdWdrcmRHNG9ycXFiNENBQmppcjlObnVxTWQwS2Q1VUpsc1IvN09OdVR2Yk9zajNuZ3VmMGNiOG5lMG9UYlZEWDJhQnpVcFRxaVRiRkFuMlhDcFdRQVphSnVnbTZRUjh5U21CdS9nNWtDZ3BnYS9tZGI2ZnF4ekdwb0REcWlUYkRoZkk0QU1HaWVvUFRVcFR1alRQS2hOZFlQWVhSQnFlRTV5ZW50cld2Nk9Oc2dqZWRRZDk2RHV1RWY0S0ZFUUFSbHNteENldldLRExhc2ZEeXQxbFk3UXNzLzdQREpvbUtEUDFFazJhbWR4RkU5ZzBpV250N2Rtbk43ZWl0SllNK3FPZFVCM3RNUC8wVG9nNmxkc0dEODdIV0NBMXd0Y2NkNkVMYXNmRnJZUDlweExjS3lRUGVjU3JGLzN3ZnAxSDRiYkorRmQ4Z2JrTVRVOGk4cGsrOFlnaVRhNnAxSEZtWEY2ZXl0T2IyODlKVG05dmJVcVQ5cUNzZ1FMNm80Skc2SU5RWHhxK3QxWkxLOHdaSG5SaXlIK09oclNPeW53U3VtT2RxQy9hUnhMODh1cnZHSDh0RmQ0TDJsakVMS1BLVXV3SUUvYWdseHBzMWFTSzIyMjUwbGJCSmNkNnhENnh5WkExSWsyOURlT0F3Q1c1cGVGSWRQclgzSmMxSTlCbCtyM3J2YVFDejFWb3dGTG1tdG5wN0V3dTBUbmpJb1YrYThIVXBQaVJOMnhEcWlUYk1pVHRpQlAydUtTNUVsYnJ1WkttMUcxejA2WDZCVjdyVlNYenZnNmUrdUU4Q3pSaG9xOWdyU3Z1M0R2MWlMZ0Jib3JSOUh5VVRkdTlOL3hyNENuRnVBdUdJUTkreEpteHYwcjMxdVg3NEwvckJmdWdrRjR2VUpGNk5NOEFlVlc3TFdpcDNxVWdvaWZhdzQ0NkR5WEsyMUdyclI1VEpJcmJiNmRLMjJHWnIrRHJxdks5MWlwK3B2OElPVjdyS2g0MlNkZnBoMkZnNEpYRnBhRllUdkpCbmZCSU83ZW5GKzlGNWxaUkZmcE1GMmV6TThJRSszNW1pczAzM0tpUFZiMGFFWnBheERiUkVBMCt4MEU1TFlrVjlyY25TdHRoanJKUmoxU2xtQ2g2bThTbXM5QXl6V1VKVmlFekVRRnFsK3hZV3BZV1BoZDdaaWl6N1dIWGJpb0g0UFgxOXdHRFJQUUgvZFFnd2RhSitoQ1VmT2FneHBQVkpaZ1FVL1ZLSzFFc1UzVkI1M0NvSlJrSXlBOWtseHBzeTVYMmd4VnZHVlRJQUtNSmFCUXd5Zm5hYTJiUHI5QW4xY2wyMm1mcUR2bW9jL1B2SGVPcnFsc1dmMnJBSWp1QjZLS3R4Q1Fla2xPU0ZOV1RrZ1RsREVtMUthNlVaTnlmeEN4eW4xZ1Y1dzNhZnRYSndtUlJlMGhGd1ZwU08raXhrNzAzQUlBVEY2Y1FjVWVLOG9Uckd2bXZSNUlUWXF3SFZiSWVPU0VOQ0VucE9tUGtweVFwbmR5UXBwUUdHWUFkOFFON29nYlpRa1dxT0lGa1pIcFVzczFxT0l0S0JOTGxIbmRXeDQ2cEhiSWgyaUJZcEN5QkN2TUovdDhFdy9RL01FNWZ4N3hxOVV0QWlIMnFPSXQxTTdDTUFOeVFwcHdLcVR4UFVsMmNIM0lxWkJHNUlRMENhR1p3eTZvRTIxUXhabWhpalA3UVpxdkNjOTJDOUllZG1IWWRCM25hNjdRZ3Nsd09YOW5FZFVIbmFqYTc2QWcrcmM4cUVpMDBZWGdrUEU2L2E1RFBvUlJ4MDNVSGZkQXRkdEMxVjA1U2xzRHNhZGlyOUQvdElkY0JBS25RaG9qSlBJSTQ1T25RaHFuVDRVMEN1UDlZUmMwQnh5clFjNEltVlVrV3VFdUhNUzlXLzZOVUcxcUIxUzdMYWphNTZDalZWLzlPQ3IyMmlnSTk3b0xIc1d3c0RTL3V3VHVzQnRsdXkzUWlHQVg3eTdoYlBsbFZPMnpReFZueGpuMTVWVWdaUHVyVHJRUmlObmlLUDR2SkJLSlJKSWRYSzgrRmRLSTRpaWVCaG5XQW1uN3VCdlRJLzZ0NmV6a1BGeW5CNkIreGU5QnNnNWJYbGlHOFgvUFkyNTZBZDRsTC9qUGVqSHYyOWQwcVVab3JaZnZzY0w2ZFQ5dVg3bEw4NTBabjRQcDgxNDYvSXBCYWxLRW9FUnhGRTlBT0xxTXp3NnVmeTA3dUI2NTBtWWErU3ZmWTBWcHJCbDlEUUxJd2wzL2pMeTBzSXhlN2lxcTl0bFJHbXRHYVp3Z1Zad1paYnZOTkN3MFBUS0wrWmxGTE0wdjA3MzV6TmdjS2hLdDFEQWlkWklOWjh0RzZFd3ZMbk9nNVJwS1k4MTBBTkVlY2lGWDJvenM0SHBrQmVzUFVaQ3NZUDB6V2NGNmIxYXduaTRCS3BNRkkvdDlNenNBZUplRWFLSGV0OTFjVDJmZVB4ZXdMUmFuOWk4dlFCVnJobXFkYjJ0VDNlaHJDRnlMRFJvbVVCcHJobWEvZ3k2aHNvTDF5QXJXTDU4S2FmeHB3SjQ5TzdpK0xwUFJvVEJNQ0Q1VUgzU2lOTmJmVGdGZzhkNFNuSGtES0kxdFI4bXYvU3FsTWxNTkdhK3ZnaGp2bWc1NFoyMjF3NXh4a2M3NkFOQ3J2WUxTV0RNTnJSYUVHcERKNkpESjZHcFdCUjh5R1YyazcwZEtYckZYR044ZHVaY0Nvb1JUUTdQZ1ArdEZ5YTcyTlZXNnF4M2FRMDRzaXBxamQ4a3JCQTVXR3I3TGpGTGZkNjBmZCtONjcrMkF0WnBITVl5S3ZWYTZxYXJhWnljUXlHUjBvYXRBc29Qci80eGx1RUdXNGVqNWgyYS9BOG9ZRTVReEpxaGZ0ZUc4OWdxV0Z3T2pIUHEzUENpSmFmZExCTlJWT2tMZjdXc2NYeGU4OW9oN2xRZjdHOGRSZmRCZlBvaytLbVE4V0laREpxUHJXVGRBbHhHa2ZZZGxPSndLYWFRZmtuTS9JbjJhQjVldGsvNk9QNytNQzdWWG9kbnZDQVNLYVVmRnkxYk1UczVqY1c1cHpkL1ZpVGFjcTdpTStUdUxBU0hVeHQrZGhVTG1MMU1WYjZIMlpBZlhnMlU0c0F6M3hyb2dYMjNUL0EzTGNQZFlob01xem96cWc4TGVYUXhDWlBpa0J6ZjZad0tHWW1mZUFFcC8zUTdsUzM1Wk12clFVVFNFa3BmYUEyUmwrM0Q3cWo5YWVXdjBMdHEvdkFDRnpCUndxS3FNTnFFeTJVNzdyQS9pMXNtZ21oOXRHUDlsR1U3T01oenlkN1lKemV1QTRONjFqcGhMNDh4dzVROEVUSTZURjJmUThzRzVOZUdWMFNZMHZOT0o4YzdBdU5WWjFRZ3FYcllLRUMveWdueGxsT3hxcDk3SWxUYURaVGhrQkdsUDNqY2F6ekxjcjN6VVVDZmFVSDNRaWZJOTFnM1B6RFd2T1lRbHUyanJPOXcrQ2U0TkZ3V29QdURBcFRPQmtjUkJ3d1M0d3k2ZkYzeVZ0UUpFYklQUExtOG1vL3VuVFoyUnNBem5ZaGtPaFdFR0dudmR6Q1VBZlpvSFY5MVRnYlZkZmhrZDhxRUFyMDJjdjQwbVh6L1lDRUlaWTZMbDUrOXNJeUQ2VFo5WXNRejNNdkZLeFY0ck5Qc2Q2M3FsK01WQUtWN2tZZnFpRjdkRzc2NmFSKzVNM0lNdHF4L0tsOXFoZU5Fa2t1aDdVZDZrN0xJRUM0RUF5M0F2YkJyRU54U2ZaUmtPQmFFR0dwZFZ5SGp4V2ZpR0tvc3pvMU14ak5uSmVjeE5MYUNuYWhRVkwxczMvYjB5eGtUTHpkL1JSdnBHeXpjK0RNMEkwc2FRV2lqZlkwVmxzaDJxZUl2NDJIaVZpaDlFUHNOWDVsV3gxMThtc1NPVDBRVTkwTWt1eTNBTzRoVVNlMVhJK0ExaDVKRThpdjlyODFycmUyV01pWmFYSjIwaElIVVBmTTdPTXR4L2t0cFF4VnY4WHZHZHV6OHNsU1ZZNktKVjVJMS8vVmFYQmxpRzQxbUdRLzZPTmhwSVZzajRod2Foa1BHMEhESnZzQXhYOWEydmNHUUVhVU9vVjN6N0JsVzhoWjZ3YnJYSTFhaVNYZTBFWWptVDBUMjNKZmRSV0lacllCa09KTFNxVHJLaE9JcmZjb2gxdkZHeVpiZURNb0swdnlSZUtZMzFlOFYzVkx4bEl0NVFScHNJeEJMTGNNOXU2VlVubHVHcVdZWkRyclNaQnBPTG8zanhXZDYzVW5FVVQvUE5DV2tpSVBsYmZ1a3NrOUg5bkdVNEw4dHd3djdFRnpMYUtoQlZ2QVhxUkJ2ZGI3QU10NUFkWFAremgzS0RqbVc0RXBiaGtCUFN0S1ZlSWQ2bzJHc1Y3emV5SHRwVlFKYmhudlcxV3loa1BMMXc2VHVVZkdDcDRvUUlpVHlTZW1QdXEyMmFaeDdxdmNhTUlPMXBzb3Nrc1Z4NWhQR0JJWXFqZUJxOEZubmp5NGQreTVSbHVIOWdHVzZlWlRoaGNaaGcrVlplVWNXWlVaWmdFWHZqemxmYk5ILzduVnlaWlJudWE1YmhrQjFjTHdTMkU0UmxDemt1M3F4b1JjUmJrQldzSnlDZmZHZDNmMCtGTlA2RVpiaTdMTU5CSHNsREZTY0UxM3duckp0Uy9vNDJHbVVzQ2pjU2lPbVRRVFYvL1ozZXhNNEkwbjdHTWh5eWd2VUJCdmtPSisrcm9uQWovUzZUMFpIOXh2dmYrWlh5azBFMVQyY0VhVyt6REVlTkt0blZqdFBiVys4TFFjNzF5VHprODhaa3JyVDV4NUx2STdFTTl4SHhDakZzTTE0Umd4TnZzQXlYL3IxZDlNOWtkSC9KTXR3TnN2a2l4dmtPOGRkVW5yUUZKYnZhNlVqbmd4ajdhcHZtcWUvMWJ4Y2tPcG5KNklTNGI2emdsZlZBaXNLTktJMWQ1WTAzdi9mL2ozeTFUZk1VeTNEalpQTkY0cm01MG1aeVVFbVZLMjJtdjVPQUFzdHdJeWVEYW43NFNQd1pobVc0TjRsWGxESENmMGZJUWFWWVJlRkdsT3hxaHpMYUpQYkdieDZaZi9XY0RLcjVJY3R3STJLdktLTk40c05LNUlRMDBUL0luTjdlU2lBdXlTT01UMG9lcGNReTNFSGlGUkt6TFF3elVKRENNT0hpcDJpWkRwYmhraVNQV3BKSEdKOWtHYTZQYkluSlAzVklzeUxSZFZGNDUvei8vYnY2QjVKSE1iRU10NWZVZG5FVVR5OVFrb3VmeFZGK2IyUUVhWGRMSHRYa0M3V2VJMXZpbFhGaVVVREJFM0JmOXhIMXlpNVM2K1J2VENRNktlb2JNc25qa0ZpR2M2NzBpc2diTnNuamtrNEcxWVNUMmljeEsxSGYrQS9KNDVSWWhqT1JRSVVvdkdPUVBHNkpaVGlwcUU4UWI0UklIc2ZFTWx5akNLUkI4cmdtbHVHZUY0RThMM21jRTh0d05TekQxVWdlOThReTNDOVlodnZGd3k3bi93Y0E5SWQ5bzMxTWk4RUFBQUFBU1VWT1JLNUNZSUk9JywKICAgIHNoYWRvd1VybDogJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQ2tBQUFBcENBUUFBQUFDYWNoOUFBQUNNVWxFUVZSNEFlM1NoWTdqUUJBRTBBb3ovZjkvSFRNemhnMXpyZEtVckpiZHgrS2QybkQ4Vk51ZGZzTC9UaC8vL2R5UU4yVEg2ZjN5L0JHcEMzNzlyVitTK3FxZXRCT3hJbU5RWEw4SkNBcjJWNGlNUVhIR05KeGVDZlpYaFNSQmNRTWZ2a09XVWR0ZnpsTGdBRU5tWkRjbW8yVFZtdDhPU00yZVh4QnAzRGpIU01GdXRxUzdTYm1lbXpCaVIreHBLQ05VSVJrZGtrWXhoQWt5R29CdnlRRkVKRWVmd1NtbXZCZkp1SjZhS3FLV25Ba3ZHWk9hWlhUVWdGcVlVTFdOU0hVY2tadVIxSElJaW1VRXh1dFJ4d3pPTFJPSUc0dkttQ0tRdDM2NG1JbGhTeXpBZjFtOWxIWkhKWnJsQU9NTXp0UlJpS2ltcC9ycGRKRGM5QXdyeTV4VFpDdGU3Rkh0dVM4d0pnZVlHcmV4Mjh4TlRkMDg2RGlrN3ZVTXNjUU9hOHk0RG9HdENDU2tBS2xOd3BnTnRwaGpyQzZNSUhVa1I2WVd4eHM2U2M1eHFuMjIybW1DUkZ6SXQ4bEVkS3graWtDdGc5MXFTMldwd1ZmQmVsSkNpUUp3dnppeGZJOWN4WlFXZ2lTSmVsS253QkVsS1l0RE9iMk1GYmhtVWlnYlJlUUJWMENnNCtxTVhTeFhTeUdVbjRVYkY4bCs3cWRTR25UQzBYTENtYWhJZ1VITGhMT2hwVkN0dzRDellYdkxRV1FiSk5teG9Dc09LQXhTZ0JKbm83NWF2b2xrUnc4aUlBRmNzZGMwMmU5aXlDZDh0SHdtZVNTb0tUb3dJZ3ZzY1NHWlVPQTdQdUNONWIyQlg5bVFNN1Mwd1loTU5VNzR6Z3NQQmozSFU3d2d1QWZueHhqRlFHQkU2cHdOK0dqTUU5ekhZN3pHcDh3VnhNU2hZWDlOWHZFV0QzSGJ3SmY0Z2lPNENGSVF4WFNjSDEvVE0rMDRra0JpQUFBQUFFbEZUa1N1UW1DQycsCiAgfSk7CiAgTC5JY29uLkRlZmF1bHQuaW1hZ2VQYXRoID0gJyAnOyAvLyBpbiBvcmRlciB0byBzdXBwcmVzcyBfZGV0ZWN0SWNvblBhdGggKGl0IGZhaWxzIHdpdGggZGF0YS11cmxzKQoKICAkKAogICAgWwogICAgICAnPHN2Zz4nLAogICAgICAvLyBzZWFyY2guanMsIGRpc3RhbmNlLXRvLXBvcnRhbC51c2VyLmpzLCBkcmF3LXRvb2xzLnVzZXIuanMKICAgICAgJzxzeW1ib2wgaWQ9Im1hcmtlci1pY29uIiB2aWV3Qm94PSIwIDAgMjUgNDEiPicsCiAgICAgICc8cGF0aCBkPSJNMS4zNjI0MTg0NDc2NSwxOC42NzQ4ODEyNDY3NSBBMTIuNSwxMi41IDAgMSwxIDIzLjYzNzU4MTU1MjM1LDE4LjY3NDg4MTI0Njc1IEwxMi41LDQwLjUzMzYxNTgwNzMgWiIgc3R5bGU9InN0cm9rZTpub25lOyIgLz4nLAogICAgICAnPHBhdGggZD0iTTEuODA3OTIxNzA5NzUsMTguNDQ3ODg1OTk2ODUgQTEyLDEyIDAgMSwxIDIzLjE5MjA3ODI5MDI1LDE4LjQ0Nzg4NTk5Njg1IEwxMi41LDM5LjQzMjI3MTE3NSBaIiBzdHlsZT0ic3Ryb2tlOiMwMDAwMDA7IHN0cm9rZS13aWR0aDoxcHg7IHN0cm9rZS1vcGFjaXR5OiAwLjE1OyBmaWxsOiBub25lOyIgLz4nLAogICAgICAnPHBhdGggZD0iTTIuOTIxNjc5ODY1LDE3Ljg4MDM5Nzg3MjIgQTEwLjc1LDEwLjc1IDAgMSwxIDIyLjA3ODMyMDEzNSwxNy44ODAzOTc4NzIyIEwxMi41LDM2LjY3ODkwOTU5NDMgWiIgc3R5bGU9InN0cm9rZTojZmZmZmZmOyBzdHJva2Utd2lkdGg6MS41cHg7IHN0cm9rZS1vcGFjaXR5OiAwLjM1OyBmaWxsOiBub25lOyIgLz4nLAogICAgICAnPHBhdGggZD0iTTE5Ljg2MTIxNTkzMjE1LDE3LjI1IEwxMi41LDIxLjUgTDUuMTM4Nzg0MDY3ODUsMTcuMjUgTDUuMTM4Nzg0MDY3ODUsOC43NSBMMTIuNSw0LjUgTDE5Ljg2MTIxNTkzMjE1LDguNzUgWiBNNy43MzY4NjAyNzkyLDEwLjI1IEwxNy4yNjMxMzk3MjA4LDEwLjI1IEwxMi41LDE4LjUgWiBNMTIuNSwxMyBMNy43MzY4NjAyNzkyLDEwLjI1IE0xMi41LDEzIEwxNy4yNjMxMzk3MjA4LDEwLjI1IE0xMi41LDEzIEwxMi41LDE4LjUgTTE5Ljg2MTIxNTkzMjE1LDE3LjI1IEwxNi4zOTcxMTQzMTcwNSwxNS4yNSBNNS4xMzg3ODQwNjc4NSwxNy4yNSBMOC42MDI4ODU2ODI5NSwxNS4yNSBNMTIuNSw0LjUgTDEyLjUsOC41IiBzdHlsZT0ic3Ryb2tlOiNmZmZmZmY7IHN0cm9rZS13aWR0aDoxLjI1cHg7IHN0cm9rZS1vcGFjaXR5OiAxOyBmaWxsOiBub25lOyIgLz4nLAogICAgICAnPC9zeW1ib2w+JywKICAgICAgJzwvc3ZnPicsCiAgICBdLmpvaW4oJ1xcbicpCiAgKS5hcHBlbmRUbygnYm9keScpOwoKICBMLkRpdkljb24uQ29sb3JlZFN2ZyA9IEwuRGl2SWNvbi5leHRlbmQoewogICAgb3B0aW9uczogewogICAgICBpY29uU2l6ZTogWzI1LCA0MV0sCiAgICAgIGljb25BbmNob3I6IFsxMiwgNDFdLAogICAgICBjbGFzc05hbWU6ICdsZWFmbGV0LWRpdi1pY29uLWlpdGMtZ2VuZXJpYy1tYXJrZXInLAogICAgICAvLyBeIGFjdHVhbGx5IGFueSBuYW1lLCBqdXN0IHRvIHByZXZlbnQgZGVmYXVsdAogICAgICAvLyBeIChhcyBpdCdzIGluYXBwcm9wcmlhdGVseSBzdHlsZWQpCiAgICAgIHN2Z1RlbXBsYXRlOiAnPHN2ZyBzdHlsZT0iZmlsbDoge2NvbG9yfSI+PHVzZSB4bGluazpocmVmPSIjbWFya2VyLWljb24iLz48L3N2Zz4nLAogICAgICBjb2xvcjogJyNhMjRhYzMnLCAvLyBmb3IgZHJhdy10b29sczoKICAgICAgLy8gTC5kaXZJY29uIGRvZXMgbm90IHVzZSB0aGUgb3B0aW9uIGBjb2xvcmAsIGJ1dCB3ZSBzdG9yZSBpdCBoZXJlIHRvCiAgICAgIC8vIGJlIGFibGUgdG8gc2ltcGx5IHJldHJpZXZlIHRoZSBjb2xvciBmb3Igc2VyaWFsaXppbmcgbWFya2VycwogICAgfSwKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChjb2xvciwgb3B0aW9ucykgewogICAgICBMLkRpdkljb24ucHJvdG90eXBlLmluaXRpYWxpemUuY2FsbCh0aGlzLCBvcHRpb25zKTsKICAgICAgaWYgKGNvbG9yKSB7CiAgICAgICAgdGhpcy5vcHRpb25zLmNvbG9yID0gY29sb3I7CiAgICAgIH0KICAgICAgdGhpcy5vcHRpb25zLmh0bWwgPSBMLlV0aWwudGVtcGxhdGUodGhpcy5vcHRpb25zLnN2Z1RlbXBsYXRlLCB7IGNvbG9yOiB0aGlzLm9wdGlvbnMuY29sb3IgfSk7CiAgICB9LAogIH0pOwogIEwuZGl2SWNvbi5jb2xvcmVkU3ZnID0gZnVuY3Rpb24gKGNvbG9yLCBvcHRpb25zKSB7CiAgICByZXR1cm4gbmV3IEwuRGl2SWNvbi5Db2xvcmVkU3ZnKGNvbG9yLCBvcHRpb25zKTsKICB9Owp9CgovKioKICogQ2hlY2tzIGlmIHRoZSBJSVRDIGlzIGJlaW5nIHJ1biBvbiB0aGUgb2ZmaWNpYWwgSW50ZWwgVVJMLiBJZiBub3QsIGl0IGRpc3BsYXlzIGEgd2FybmluZyBkaWFsb2cuCiAqIEBmdW5jdGlvbiBjaGVja2luZ0ludGVsVVJMCiAqLwpmdW5jdGlvbiBjaGVja2luZ0ludGVsVVJMKCkgewogIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgIT09ICdpbnRlbC5pbmdyZXNzLmNvbScgJiYgbG9jYWxTdG9yYWdlWydwYXNzLWNoZWNraW5nLWludGVsLXVybCddICE9PSAndHJ1ZScpIHsKICAgIHdpbmRvdy5kaWFsb2coewogICAgICB0aXRsZTogJ0lJVEMgV2FybmluZycsCiAgICAgIGh0bWw6ICc8cD5Zb3UgYXJlIHJ1bm5pbmcgSUlUQyBvbiBhIG5vbi1zdGFuZGFyZCBJbnRlbCBkb21haW4uIENvcnJlY3QgYmVoYXZpb3IgaXMgbm90IGd1YXJhbnRlZWQuIEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgSUlUQyBhdCA8YSBocmVmPSJodHRwczovL2ludGVsLmluZ3Jlc3MuY29tIj5pbnRlbC5pbmdyZXNzLmNvbTwvYT48L3A+JywKICAgICAgZGlhbG9nQ2xhc3M6ICd1aS1kaWFsb2ctbm9uLXN0YW5kYXJkLWludGVsJywKICAgICAgYnV0dG9uczogewogICAgICAgICJEb24ndCByZW1pbmQgbWUiOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAkKHRoaXMpLmRpYWxvZygnY2xvc2UnKTsKICAgICAgICAgIGxvY2FsU3RvcmFnZVsncGFzcy1jaGVja2luZy1pbnRlbC11cmwnXSA9IHRydWU7CiAgICAgICAgfSwKICAgICAgICBEaXNtaXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAkKHRoaXMpLmRpYWxvZygnY2xvc2UnKTsKICAgICAgICB9LAogICAgICB9LAogICAgfSk7CiAgfQp9CgovKioKICogU2V0cyB1cCB0aGUgT3ZlcmxhcHBpbmdNYXJrZXJTcGlkZXJmaWVyIChPTVMpIGxpYnJhcnkgZm9yIGhhbmRsaW5nIG92ZXJsYXBwaW5nIG1hcmtlcnMgb24gdGhlIG1hcC4KICogT01TIGRvZXNuJ3QgY2FuY2VsIHRoZSBvcmlnaW5hbCBjbGljayBldmVudCwgc28gdGhlIHRvcG1vc3QgbWFya2VyIHdpbGwgZ2V0IGEgY2xpY2sgZXZlbnQgd2hpbGUgc3BpZGVyZnlpbmcuCiAqIEFsc28sIE9NUyBvbmx5IHN1cHBvcnRzIGEgZ2xvYmFsIGNhbGxiYWNrIGZvciBhbGwgbWFuYWdlZCBtYXJrZXJzLiBUaGVyZWZvcmUsIHdlIHdpbGwgdXNlIGEgY3VzdG9tIGV2ZW50IHRoYXQgZ2V0cyBmaXJlZAogKiBmb3IgZWFjaCBtYXJrZXIuCiAqIEBmdW5jdGlvbiBzZXR1cE9NUwogKi8Kd2luZG93LnNldHVwT01TID0gZnVuY3Rpb24gKCkgewogIHdpbmRvdy5vbXMgPSBuZXcgd2luZG93Lk92ZXJsYXBwaW5nTWFya2VyU3BpZGVyZmllcih3aW5kb3cubWFwLCB7CiAgICBrZWVwU3BpZGVyZmllZDogdHJ1ZSwKICAgIGxlZ1dlaWdodDogMy41LAogICAgbGVnQ29sb3JzOiB7CiAgICAgIHVzdWFsOiAnI0ZGRkYwMCcsCiAgICAgIGhpZ2hsaWdodGVkOiAnI0ZGMDAwMCcsCiAgICB9LAogIH0pOwoKICB3aW5kb3cub21zLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChtYXJrZXIpIHsKICAgIHdpbmRvdy5tYXAuY2xvc2VQb3B1cCgpOwogICAgbWFya2VyLmZpcmVFdmVudCgnc3BpZGVyZmllZGNsaWNrJywgeyB0YXJnZXQ6IG1hcmtlciB9KTsKICB9KTsKICB3aW5kb3cub21zLmFkZExpc3RlbmVyKCdzcGlkZXJmeScsIGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5tYXAuY2xvc2VQb3B1cCgpOwogIH0pOwogIHdpbmRvdy5tYXAuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKAogICAgJ2tleXByZXNzJywKICAgIGZ1bmN0aW9uIChldikgewogICAgICBpZiAoZXYua2V5Q29kZSA9PT0gMjcpIHsKICAgICAgICAvLyBFc2MKICAgICAgICB3aW5kb3cub21zLnVuc3BpZGVyZnkoKTsKICAgICAgfQogICAgfSwKICAgIGZhbHNlCiAgKTsKfTsKCi8qKgogKiBSZWdpc3RlcnMgYSBtYXJrZXIgd2l0aCB0aGUgT3ZlcmxhcHBpbmdNYXJrZXJTcGlkZXJmaWVyIHRvIG1hbmFnZSBpdHMgY2xpY2sgZXZlbnRzLgogKiBAZnVuY3Rpb24gcmVnaXN0ZXJNYXJrZXJGb3JPTVMKICogQHBhcmFtIHtMLk1hcmtlcn0gbWFya2VyIC0gVGhlIExlYWZsZXQgbWFya2VyIHRvIGJlIG1hbmFnZWQgYnkgT01TLgogKi8Kd2luZG93LnJlZ2lzdGVyTWFya2VyRm9yT01TID0gZnVuY3Rpb24gKG1hcmtlcikgewogIG1hcmtlci5vbignYWRkJywgZnVuY3Rpb24gKCkgewogICAgd2luZG93Lm9tcy5hZGRNYXJrZXIobWFya2VyKTsKICB9KTsKICBtYXJrZXIub24oJ3JlbW92ZScsIGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5vbXMucmVtb3ZlTWFya2VyKG1hcmtlcik7CiAgfSk7CiAgaWYgKG1hcmtlci5fbWFwKSB7CiAgICAvLyBtYXJrZXIgaGFzIGFscmVhZHkgYmVlbiBhZGRlZAogICAgd2luZG93Lm9tcy5hZGRNYXJrZXIobWFya2VyKTsKICB9Cn07CgovLyBCT09USU5HIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovKioKICogUHJlcGFyZXMgcGx1Z2lucyB0byBsb2FkIGJ5IHNvcnRpbmcgdGhlbSBiYXNlZCBvbiB0aGVpciBzcGVjaWZpZWQgcHJpb3JpdHkuCiAqIEBmdW5jdGlvbiBwcmVwUGx1Z2luc1RvTG9hZAogKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgbG9hZGVyIGZ1bmN0aW9uIHRoYXQgbG9hZHMgcGx1Z2lucyB1cCB0byBhIHNwZWNpZmllZCBwcmlvcml0eS4KICovCmZ1bmN0aW9uIHByZXBQbHVnaW5zVG9Mb2FkKCkgewogIHZhciBwcmlvcml0aWVzID0gewogICAgbG93ZXN0OiAxMDAsCiAgICBsb3c6IDc1LAogICAgbm9ybWFsOiA1MCwKICAgIGhpZ2g6IDI1LAogICAgaGlnaGVzdDogMCwKICAgIGJvb3Q6IC0xMDAsCiAgfTsKCiAgZnVuY3Rpb24gZ2V0UHJpb3JpdHkoZGF0YSkgewogICAgdmFyIHYgPSAoZGF0YSAmJiBkYXRhLnByaW9yaXR5KSB8fCAnbm9ybWFsJzsKICAgIHZhciBwcmlvID0gdiBpbiBwcmlvcml0aWVzID8gcHJpb3JpdGllc1t2XSA6IHY7CiAgICBpZiAodHlwZW9mIHByaW8gIT09ICdudW1iZXInKSB7CiAgICAgIGxvZy53YXJuKCd3cm9uZyBwbHVnaW4gcHJpb3JpdHkgc3BlY2lmaWVkOiAnLCB2KTsKICAgICAgcHJpbyA9IHByaW9yaXRpZXMubm9ybWFsOwogICAgfQogICAgcmV0dXJuIHByaW87CiAgfQoKICBpZiAoIXdpbmRvdy5zY3JpcHRfaW5mby5zY3JpcHQpIHsKICAgIGxvZy53YXJuKCdHTV9pbmZvIGlzIG5vdCBwcm92aWRlZCAoaW1wcm9wZXIgdXNlcnNjcmlwdCBtYW5hZ2VyPyknKTsgLy8gSUlUQy1Nb2JpbGUgZm9yIGlPUwogIH0KCiAgLy8gZXhlY3V0ZXMgc2V0dXAgZnVuY3Rpb24gb2YgcGx1Z2luCiAgLy8gYW5kIGNvbGxlY3RzIGluZm8gZm9yIEFib3V0IElJVEMKICBmdW5jdGlvbiBzYWZlU2V0dXAoc2V0dXApIHsKICAgIGlmICghc2V0dXApIHsKICAgICAgbG9nLndhcm4oJ3BsdWdpbiBtdXN0IHByb3ZpZGUgc2V0dXAgZnVuY3Rpb24nKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIGluZm8gPSBzZXR1cC5pbmZvOwogICAgaWYgKHR5cGVvZiBpbmZvICE9PSAnb2JqZWN0JykgewogICAgICBsb2cud2FybigncGx1Z2luIGRvZXMgbm90IGhhdmUgcHJvcGVyIHdyYXBwZXI6Jywgc2V0dXApOwogICAgICBpbmZvID0ge307CiAgICB9CiAgICB0cnkgewogICAgICBzZXR1cC5jYWxsKHRoaXMpOwogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIHZhciBuYW1lID0gKGluZm8uc2NyaXB0ICYmIGluZm8uc2NyaXB0Lm5hbWUpIHx8IGluZm8ucGx1Z2luSWQ7CiAgICAgIGxvZy5lcnJvcignZXJyb3Igc3RhcnRpbmcgcGx1Z2luOiAnICsgbmFtZSwgJ1xuJyArIGVyciwgJ1xuc2V0dXA6ICcsIHNldHVwKTsKICAgICAgaW5mby5lcnJvciA9IGVycjsKICAgIH0KICAgIHBsdWdpbnNJbmZvLnB1c2goaW5mbyk7CiAgfQoKICBpZiAod2luZG93LmJvb3RQbHVnaW5zKSB7CiAgICAvLyBzb3J0IHBsdWdpbnMgYnkgcHJpb3JpdHkKICAgIHdpbmRvdy5ib290UGx1Z2lucy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBnZXRQcmlvcml0eShhKSAtIGdldFByaW9yaXR5KGIpOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIHdpbmRvdy5ib290UGx1Z2lucyA9IFtdOwogIH0KCiAgdmFyIHBsdWdpbnNJbmZvID0gW107IC8vIGZvciBBYm91dCBJSVRDCiAgd2luZG93LmJvb3RQbHVnaW5zLmluZm8gPSBwbHVnaW5zSW5mbzsKCiAgLy8gbG9hZGVyIGZ1bmN0aW9uIHJldHVybmVkCiAgLy8gaWYgY2FsbGVkIHdpdGggcGFyYW1ldGVyIHRoZW4gbG9hZCBwbHVnaW5zIHdpdGggcHJpb3JpdGllcyB1cCB0byBzcGVjaWZpZWQKICByZXR1cm4gZnVuY3Rpb24gKHByaW8pIHsKICAgIHdoaWxlICh3aW5kb3cuYm9vdFBsdWdpbnNbMF0pIHsKICAgICAgaWYgKHByaW8gJiYgZ2V0UHJpb3JpdHkod2luZG93LmJvb3RQbHVnaW5zWzBdKSA+IHByaW9yaXRpZXNbcHJpb10pIHsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBzYWZlU2V0dXAod2luZG93LmJvb3RQbHVnaW5zLnNoaWZ0KCkpOwogICAgfQogIH07Cn0KCi8qKgogKiBUaGUgbWFpbiBib290IGZ1bmN0aW9uIHRoYXQgaW5pdGlhbGl6ZXMgSUlUQy4gSXQgaXMgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdXAgdGhlIG1hcCwKICogbG9hZGluZyBwbHVnaW5zLCBhbmQgaW5pdGlhbGl6aW5nIHZhcmlvdXMgY29tcG9uZW50cyBvZiBJSVRDLgogKiBAZnVuY3Rpb24gYm9vdAogKi8KZnVuY3Rpb24gYm9vdCgpIHsKICBsb2cubG9nKCdsb2FkaW5nIGRvbmUsIGJvb3RpbmcuIEJ1aWx0OiAnICsgJzIwMjUtMDQtMTktMTI0NTUzJyk7CiAgaWYgKHdpbmRvdy5kZXZpY2VJRCkgewogICAgbG9nLmxvZygnWW91ciBkZXZpY2UgSUQ6ICcgKyB3aW5kb3cuZGV2aWNlSUQpOwogIH0KICB3aW5kb3cucnVuT25TbWFydHBob25lc0JlZm9yZUJvb3QoKTsKICB3aW5kb3cucnVuT25BcHBCZWZvcmVCb290KCk7CgogIHZhciBsb2FkUGx1Z2lucyA9IHByZXBQbHVnaW5zVG9Mb2FkKCk7CiAgbG9hZFBsdWdpbnMoJ2Jvb3QnKTsKCiAgd2luZG93LnNldHVwRGlhbG9ncygpOwogIGNoZWNraW5nSW50ZWxVUkwoKTsKICBzZXR1cEluZ3Jlc3NNYXJrZXJzKCk7CiAgd2luZG93LmV4dHJhY3RGcm9tU3RvY2soKTsKICB3aW5kb3cuc2V0dXBJZGxlKCk7CiAgd2luZG93LnNldHVwRGF0YVRpbGVQYXJhbXMoKTsKICB3aW5kb3cuc2V0dXBNYXAoKTsKICB3aW5kb3cuc2V0dXBPTVMoKTsKICB3aW5kb3cub3JuYW1lbnRzLnNldHVwKCk7CiAgd2luZG93LmxheWVyQ2hvb3Nlci5fbGFzdFByaW9yaXR5ID0gMTAwMDsgLy8gcGx1Z2lucyBvdmVybGF5cyBoYXZlIHByaW9yaXR5ID4xMDAwCiAgd2luZG93LnNldHVwVG9vbHRpcHMoKTsKICB3aW5kb3cuY2hhdC5zZXR1cCgpOwogIHdpbmRvdy51cGRhdGVHYW1lU2NvcmUoKTsKICB3aW5kb3cuc2VhcmNoLnNldHVwKCk7CiAgd2luZG93LnBvcnRhbERldGFpbC5zZXR1cCgpOwogIHdpbmRvdy5zZXR1cFJlZGVlbSgpOwogIHdpbmRvdy5zZXR1cFNpZGViYXIoKTsKCiAgbG9hZFBsdWdpbnMoKTsKCiAgd2luZG93LnJ1bk9uU21hcnRwaG9uZXNBZnRlckJvb3QoKTsKICB3aW5kb3cucnVuT25BcHBBZnRlckJvb3QoKTsKCiAgLy8gd29ya2Fyb3VuZCBmb3IgIzEyOS4gTm90IHN1cmUgd2h5IHRoaXMgaXMgcmVxdWlyZWQuCiAgLy8gc2V0VGltZW91dCgnd2luZG93Lm1hcC5pbnZhbGlkYXRlU2l6ZShmYWxzZSk7JywgNTAwKTsKCiAgd2luZG93LmlpdGNMb2FkZWQgPSB0cnVlOwogIHdpbmRvdy5ydW5Ib29rcygnaWl0Y0xvYWRlZCcpOwp9Cgp0cnkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogIC8vICoqKiBpbmNsdWRlZDogZXh0ZXJuYWwvYXV0b2xpbmstbWluLmpzICoqKgooZnVuY3Rpb24oKXt2YXIgaz1bXS5zbGljZTtTdHJpbmcucHJvdG90eXBlLmF1dG9MaW5rPWZ1bmN0aW9uKCl7dmFyIGQsYixnLGEsZSxmLGg7ZT0xPD1hcmd1bWVudHMubGVuZ3RoP2suY2FsbChhcmd1bWVudHMsMCk6W107Zj0vKF58W1xzXG5dfDxbQS1aYS16XSpcLz8+KSgoPzpodHRwcz98ZnRwKTpcL1wvW1wtQS1aMC05K1x1MDAyNlx1MjAxOUAjXC8lPz0oKX5ffCE6LC47XSpbXC1BLVowLTkrXHUwMDI2QCNcLyU9figpX3xdKS9naTtpZighKDA8ZS5sZW5ndGgpKXJldHVybiB0aGlzLnJlcGxhY2UoZiwiJDE8YSBocmVmPSckMic+JDI8L2E+Iik7YT1lWzBdO2Q9YS5jYWxsYmFjaztnPWZ1bmN0aW9uKCl7dmFyIGM7Yz1bXTtmb3IoYiBpbiBhKWg9YVtiXSwiY2FsbGJhY2siIT09YiYmYy5wdXNoKCIgIitiKyI9JyIraCsiJyIpO3JldHVybiBjfSgpLmpvaW4oIiIpO3JldHVybiB0aGlzLnJlcGxhY2UoZixmdW5jdGlvbihjLGIsYSl7Yz0oImZ1bmN0aW9uIj09PXR5cGVvZiBkP2QoYSk6CnZvaWQgMCl8fCI8YSBocmVmPSciK2ErIiciK2crIj4iK2ErIjwvYT4iO3JldHVybiIiK2IrY30pfX0pLmNhbGwodGhpcyk7CgoKOwoKICB3aW5kb3cuTF9OT19UT1VDSCA9IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA9PT0gMDsgLy8gcHJldmVudCBtb2JpbGUgc3R5bGUgb24gZGVza3RvcCBodHRwczovL2dpdGh1Yi5jb20vSUlUQy1DRS9pbmdyZXNzLWludGVsLXRvdGFsLWNvbnZlcnNpb24vcHVsbC8xODkKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAvLyAqKiogaW5jbHVkZWQ6IGV4dGVybmFsL2xlYWZsZXQtc3JjLmpzICoqKgovKiBAcHJlc2VydmUKICogTGVhZmxldCAxLjguMCwgYSBKUyBsaWJyYXJ5IGZvciBpbnRlcmFjdGl2ZSBtYXBzLiBodHRwczovL2xlYWZsZXRqcy5jb20KICogKGMpIDIwMTAtMjAyMiBWbGFkaW1pciBBZ2Fmb25raW4sIChjKSAyMDEwLTIwMTEgQ2xvdWRNYWRlCiAqLwoKKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHsKICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDoKICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDoKICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5sZWFmbGV0ID0ge30pKTsKfSkodGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JzsKCiAgdmFyIHZlcnNpb24gPSAiMS44LjAiOwoKICAvKgogICAqIEBuYW1lc3BhY2UgVXRpbAogICAqCiAgICogVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucywgdXNlZCBieSBMZWFmbGV0IGludGVybmFsbHkuCiAgICovCgogIC8vIEBmdW5jdGlvbiBleHRlbmQoZGVzdDogT2JqZWN0LCBzcmM/OiBPYmplY3QpOiBPYmplY3QKICAvLyBNZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGBzcmNgIG9iamVjdCAob3IgbXVsdGlwbGUgb2JqZWN0cykgaW50byBgZGVzdGAgb2JqZWN0IGFuZCByZXR1cm5zIHRoZSBsYXR0ZXIuIEhhcyBhbiBgTC5leHRlbmRgIHNob3J0Y3V0LgogIGZ1bmN0aW9uIGV4dGVuZChkZXN0KSB7CiAgCXZhciBpLCBqLCBsZW4sIHNyYzsKCiAgCWZvciAoaiA9IDEsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGogPCBsZW47IGorKykgewogIAkJc3JjID0gYXJndW1lbnRzW2pdOwogIAkJZm9yIChpIGluIHNyYykgewogIAkJCWRlc3RbaV0gPSBzcmNbaV07CiAgCQl9CiAgCX0KICAJcmV0dXJuIGRlc3Q7CiAgfQoKICAvLyBAZnVuY3Rpb24gY3JlYXRlKHByb3RvOiBPYmplY3QsIHByb3BlcnRpZXM/OiBPYmplY3QpOiBPYmplY3QKICAvLyBDb21wYXRpYmlsaXR5IHBvbHlmaWxsIGZvciBbT2JqZWN0LmNyZWF0ZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2NyZWF0ZSkKICB2YXIgY3JlYXRlJDIgPSBPYmplY3QuY3JlYXRlIHx8IChmdW5jdGlvbiAoKSB7CiAgCWZ1bmN0aW9uIEYoKSB7fQogIAlyZXR1cm4gZnVuY3Rpb24gKHByb3RvKSB7CiAgCQlGLnByb3RvdHlwZSA9IHByb3RvOwogIAkJcmV0dXJuIG5ldyBGKCk7CiAgCX07CiAgfSkoKTsKCiAgLy8gQGZ1bmN0aW9uIGJpbmQoZm46IEZ1bmN0aW9uLCDigKYpOiBGdW5jdGlvbgogIC8vIFJldHVybnMgYSBuZXcgZnVuY3Rpb24gYm91bmQgdG8gdGhlIGFyZ3VtZW50cyBwYXNzZWQsIGxpa2UgW0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9GdW5jdGlvbi9iaW5kKS4KICAvLyBIYXMgYSBgTC5iaW5kKClgIHNob3J0Y3V0LgogIGZ1bmN0aW9uIGJpbmQoZm4sIG9iaikgewogIAl2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7CgogIAlpZiAoZm4uYmluZCkgewogIAkJcmV0dXJuIGZuLmJpbmQuYXBwbHkoZm4sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgCX0KCiAgCXZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOwoKICAJcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiBmbi5hcHBseShvYmosIGFyZ3MubGVuZ3RoID8gYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSA6IGFyZ3VtZW50cyk7CiAgCX07CiAgfQoKICAvLyBAcHJvcGVydHkgbGFzdElkOiBOdW1iZXIKICAvLyBMYXN0IHVuaXF1ZSBJRCB1c2VkIGJ5IFtgc3RhbXAoKWBdKCN1dGlsLXN0YW1wKQogIHZhciBsYXN0SWQgPSAwOwoKICAvLyBAZnVuY3Rpb24gc3RhbXAob2JqOiBPYmplY3QpOiBOdW1iZXIKICAvLyBSZXR1cm5zIHRoZSB1bmlxdWUgSUQgb2YgYW4gb2JqZWN0LCBhc3NpZ25pbmcgaXQgb25lIGlmIGl0IGRvZXNuJ3QgaGF2ZSBpdC4KICBmdW5jdGlvbiBzdGFtcChvYmopIHsKICAJaWYgKCEoJ19sZWFmbGV0X2lkJyBpbiBvYmopKSB7CiAgCQlvYmpbJ19sZWFmbGV0X2lkJ10gPSArK2xhc3RJZDsKICAJfQogIAlyZXR1cm4gb2JqLl9sZWFmbGV0X2lkOwogIH0KCiAgLy8gQGZ1bmN0aW9uIHRocm90dGxlKGZuOiBGdW5jdGlvbiwgdGltZTogTnVtYmVyLCBjb250ZXh0OiBPYmplY3QpOiBGdW5jdGlvbgogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBleGVjdXRlcyBmdW5jdGlvbiBgZm5gIHdpdGggdGhlIGdpdmVuIHNjb3BlIGBjb250ZXh0YAogIC8vIChzbyB0aGF0IHRoZSBgdGhpc2Aga2V5d29yZCByZWZlcnMgdG8gYGNvbnRleHRgIGluc2lkZSBgZm5gJ3MgY29kZSkuIFRoZSBmdW5jdGlvbgogIC8vIGBmbmAgd2lsbCBiZSBjYWxsZWQgbm8gbW9yZSB0aGFuIG9uZSB0aW1lIHBlciBnaXZlbiBhbW91bnQgb2YgYHRpbWVgLiBUaGUgYXJndW1lbnRzCiAgLy8gcmVjZWl2ZWQgYnkgdGhlIGJvdW5kIGZ1bmN0aW9uIHdpbGwgYmUgYW55IGFyZ3VtZW50cyBwYXNzZWQgd2hlbiBiaW5kaW5nIHRoZQogIC8vIGZ1bmN0aW9uLCBmb2xsb3dlZCBieSBhbnkgYXJndW1lbnRzIHBhc3NlZCB3aGVuIGludm9raW5nIHRoZSBib3VuZCBmdW5jdGlvbi4KICAvLyBIYXMgYW4gYEwudGhyb3R0bGVgIHNob3J0Y3V0LgogIGZ1bmN0aW9uIHRocm90dGxlKGZuLCB0aW1lLCBjb250ZXh0KSB7CiAgCXZhciBsb2NrLCBhcmdzLCB3cmFwcGVyRm4sIGxhdGVyOwoKICAJbGF0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgCQkvLyByZXNldCBsb2NrIGFuZCBjYWxsIGlmIHF1ZXVlZAogIAkJbG9jayA9IGZhbHNlOwogIAkJaWYgKGFyZ3MpIHsKICAJCQl3cmFwcGVyRm4uYXBwbHkoY29udGV4dCwgYXJncyk7CiAgCQkJYXJncyA9IGZhbHNlOwogIAkJfQogIAl9OwoKICAJd3JhcHBlckZuID0gZnVuY3Rpb24gKCkgewogIAkJaWYgKGxvY2spIHsKICAJCQkvLyBjYWxsZWQgdG9vIHNvb24sIHF1ZXVlIHRvIGNhbGwgbGF0ZXIKICAJCQlhcmdzID0gYXJndW1lbnRzOwoKICAJCX0gZWxzZSB7CiAgCQkJLy8gY2FsbCBhbmQgbG9jayB1bnRpbCBsYXRlcgogIAkJCWZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7CiAgCQkJc2V0VGltZW91dChsYXRlciwgdGltZSk7CiAgCQkJbG9jayA9IHRydWU7CiAgCQl9CiAgCX07CgogIAlyZXR1cm4gd3JhcHBlckZuOwogIH0KCiAgLy8gQGZ1bmN0aW9uIHdyYXBOdW0obnVtOiBOdW1iZXIsIHJhbmdlOiBOdW1iZXJbXSwgaW5jbHVkZU1heD86IEJvb2xlYW4pOiBOdW1iZXIKICAvLyBSZXR1cm5zIHRoZSBudW1iZXIgYG51bWAgbW9kdWxvIGByYW5nZWAgaW4gc3VjaCBhIHdheSBzbyBpdCBsaWVzIHdpdGhpbgogIC8vIGByYW5nZVswXWAgYW5kIGByYW5nZVsxXWAuIFRoZSByZXR1cm5lZCB2YWx1ZSB3aWxsIGJlIGFsd2F5cyBzbWFsbGVyIHRoYW4KICAvLyBgcmFuZ2VbMV1gIHVubGVzcyBgaW5jbHVkZU1heGAgaXMgc2V0IHRvIGB0cnVlYC4KICBmdW5jdGlvbiB3cmFwTnVtKHgsIHJhbmdlLCBpbmNsdWRlTWF4KSB7CiAgCXZhciBtYXggPSByYW5nZVsxXSwKICAJICAgIG1pbiA9IHJhbmdlWzBdLAogIAkgICAgZCA9IG1heCAtIG1pbjsKICAJcmV0dXJuIHggPT09IG1heCAmJiBpbmNsdWRlTWF4ID8geCA6ICgoeCAtIG1pbikgJSBkICsgZCkgJSBkICsgbWluOwogIH0KCiAgLy8gQGZ1bmN0aW9uIGZhbHNlRm4oKTogRnVuY3Rpb24KICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggYWx3YXlzIHJldHVybnMgYGZhbHNlYC4KICBmdW5jdGlvbiBmYWxzZUZuKCkgeyByZXR1cm4gZmFsc2U7IH0KCiAgLy8gQGZ1bmN0aW9uIGZvcm1hdE51bShudW06IE51bWJlciwgcHJlY2lzaW9uPzogTnVtYmVyfGZhbHNlKTogTnVtYmVyCiAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIGBudW1gIHJvdW5kZWQgd2l0aCBzcGVjaWZpZWQgYHByZWNpc2lvbmAuCiAgLy8gVGhlIGRlZmF1bHQgYHByZWNpc2lvbmAgdmFsdWUgaXMgNiBkZWNpbWFsIHBsYWNlcy4KICAvLyBgZmFsc2VgIGNhbiBiZSBwYXNzZWQgdG8gc2tpcCBhbnkgcHJvY2Vzc2luZyAoY2FuIGJlIHVzZWZ1bCB0byBhdm9pZCByb3VuZC1vZmYgZXJyb3JzKS4KICBmdW5jdGlvbiBmb3JtYXROdW0obnVtLCBwcmVjaXNpb24pIHsKICAJaWYgKHByZWNpc2lvbiA9PT0gZmFsc2UpIHsgcmV0dXJuIG51bTsgfQogIAl2YXIgcG93ID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gNiA6IHByZWNpc2lvbik7CiAgCXJldHVybiBNYXRoLnJvdW5kKG51bSAqIHBvdykgLyBwb3c7CiAgfQoKICAvLyBAZnVuY3Rpb24gdHJpbShzdHI6IFN0cmluZyk6IFN0cmluZwogIC8vIENvbXBhdGliaWxpdHkgcG9seWZpbGwgZm9yIFtTdHJpbmcucHJvdG90eXBlLnRyaW1dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9UcmltKQogIGZ1bmN0aW9uIHRyaW0oc3RyKSB7CiAgCXJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxzK3xccyskL2csICcnKTsKICB9CgogIC8vIEBmdW5jdGlvbiBzcGxpdFdvcmRzKHN0cjogU3RyaW5nKTogU3RyaW5nW10KICAvLyBUcmltcyBhbmQgc3BsaXRzIHRoZSBzdHJpbmcgb24gd2hpdGVzcGFjZSBhbmQgcmV0dXJucyB0aGUgYXJyYXkgb2YgcGFydHMuCiAgZnVuY3Rpb24gc3BsaXRXb3JkcyhzdHIpIHsKICAJcmV0dXJuIHRyaW0oc3RyKS5zcGxpdCgvXHMrLyk7CiAgfQoKICAvLyBAZnVuY3Rpb24gc2V0T3B0aW9ucyhvYmo6IE9iamVjdCwgb3B0aW9uczogT2JqZWN0KTogT2JqZWN0CiAgLy8gTWVyZ2VzIHRoZSBnaXZlbiBwcm9wZXJ0aWVzIHRvIHRoZSBgb3B0aW9uc2Agb2YgdGhlIGBvYmpgIG9iamVjdCwgcmV0dXJuaW5nIHRoZSByZXN1bHRpbmcgb3B0aW9ucy4gU2VlIGBDbGFzcyBvcHRpb25zYC4gSGFzIGFuIGBMLnNldE9wdGlvbnNgIHNob3J0Y3V0LgogIGZ1bmN0aW9uIHNldE9wdGlvbnMob2JqLCBvcHRpb25zKSB7CiAgCWlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgJ29wdGlvbnMnKSkgewogIAkJb2JqLm9wdGlvbnMgPSBvYmoub3B0aW9ucyA/IGNyZWF0ZSQyKG9iai5vcHRpb25zKSA6IHt9OwogIAl9CiAgCWZvciAodmFyIGkgaW4gb3B0aW9ucykgewogIAkJb2JqLm9wdGlvbnNbaV0gPSBvcHRpb25zW2ldOwogIAl9CiAgCXJldHVybiBvYmoub3B0aW9uczsKICB9CgogIC8vIEBmdW5jdGlvbiBnZXRQYXJhbVN0cmluZyhvYmo6IE9iamVjdCwgZXhpc3RpbmdVcmw/OiBTdHJpbmcsIHVwcGVyY2FzZT86IEJvb2xlYW4pOiBTdHJpbmcKICAvLyBDb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIHBhcmFtZXRlciBVUkwgc3RyaW5nLCBlLmcuIGB7YTogImZvbyIsIGI6ICJiYXIifWAKICAvLyB0cmFuc2xhdGVzIHRvIGAnP2E9Zm9vJmI9YmFyJ2AuIElmIGBleGlzdGluZ1VybGAgaXMgc2V0LCB0aGUgcGFyYW1ldGVycyB3aWxsCiAgLy8gYmUgYXBwZW5kZWQgYXQgdGhlIGVuZC4gSWYgYHVwcGVyY2FzZWAgaXMgYHRydWVgLCB0aGUgcGFyYW1ldGVyIG5hbWVzIHdpbGwKICAvLyBiZSB1cHBlcmNhc2VkIChlLmcuIGAnP0E9Zm9vJkI9YmFyJ2ApCiAgZnVuY3Rpb24gZ2V0UGFyYW1TdHJpbmcob2JqLCBleGlzdGluZ1VybCwgdXBwZXJjYXNlKSB7CiAgCXZhciBwYXJhbXMgPSBbXTsKICAJZm9yICh2YXIgaSBpbiBvYmopIHsKICAJCXBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudCh1cHBlcmNhc2UgPyBpLnRvVXBwZXJDYXNlKCkgOiBpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pKTsKICAJfQogIAlyZXR1cm4gKCghZXhpc3RpbmdVcmwgfHwgZXhpc3RpbmdVcmwuaW5kZXhPZignPycpID09PSAtMSkgPyAnPycgOiAnJicpICsgcGFyYW1zLmpvaW4oJyYnKTsKICB9CgogIHZhciB0ZW1wbGF0ZVJlID0gL1x7ICooW1x3XyAtXSspICpcfS9nOwoKICAvLyBAZnVuY3Rpb24gdGVtcGxhdGUoc3RyOiBTdHJpbmcsIGRhdGE6IE9iamVjdCk6IFN0cmluZwogIC8vIFNpbXBsZSB0ZW1wbGF0aW5nIGZhY2lsaXR5LCBhY2NlcHRzIGEgdGVtcGxhdGUgc3RyaW5nIG9mIHRoZSBmb3JtIGAnSGVsbG8ge2F9LCB7Yn0nYAogIC8vIGFuZCBhIGRhdGEgb2JqZWN0IGxpa2UgYHthOiAnZm9vJywgYjogJ2Jhcid9YCwgcmV0dXJucyBldmFsdWF0ZWQgc3RyaW5nCiAgLy8gYCgnSGVsbG8gZm9vLCBiYXInKWAuIFlvdSBjYW4gYWxzbyBzcGVjaWZ5IGZ1bmN0aW9ucyBpbnN0ZWFkIG9mIHN0cmluZ3MgZm9yCiAgLy8gZGF0YSB2YWx1ZXMg4oCUIHRoZXkgd2lsbCBiZSBldmFsdWF0ZWQgcGFzc2luZyBgZGF0YWAgYXMgYW4gYXJndW1lbnQuCiAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyLCBkYXRhKSB7CiAgCXJldHVybiBzdHIucmVwbGFjZSh0ZW1wbGF0ZVJlLCBmdW5jdGlvbiAoc3RyLCBrZXkpIHsKICAJCXZhciB2YWx1ZSA9IGRhdGFba2V5XTsKCiAgCQlpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogIAkJCXRocm93IG5ldyBFcnJvcignTm8gdmFsdWUgcHJvdmlkZWQgZm9yIHZhcmlhYmxlICcgKyBzdHIpOwoKICAJCX0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7CiAgCQkJdmFsdWUgPSB2YWx1ZShkYXRhKTsKICAJCX0KICAJCXJldHVybiB2YWx1ZTsKICAJfSk7CiAgfQoKICAvLyBAZnVuY3Rpb24gaXNBcnJheShvYmopOiBCb29sZWFuCiAgLy8gQ29tcGF0aWJpbGl0eSBwb2x5ZmlsbCBmb3IgW0FycmF5LmlzQXJyYXldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXkpCiAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChvYmopIHsKICAJcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJyk7CiAgfTsKCiAgLy8gQGZ1bmN0aW9uIGluZGV4T2YoYXJyYXk6IEFycmF5LCBlbDogT2JqZWN0KTogTnVtYmVyCiAgLy8gQ29tcGF0aWJpbGl0eSBwb2x5ZmlsbCBmb3IgW0FycmF5LnByb3RvdHlwZS5pbmRleE9mXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mKQogIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIGVsKSB7CiAgCWZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsKICAJCWlmIChhcnJheVtpXSA9PT0gZWwpIHsgcmV0dXJuIGk7IH0KICAJfQogIAlyZXR1cm4gLTE7CiAgfQoKICAvLyBAcHJvcGVydHkgZW1wdHlJbWFnZVVybDogU3RyaW5nCiAgLy8gRGF0YSBVUkkgc3RyaW5nIGNvbnRhaW5pbmcgYSBiYXNlNjQtZW5jb2RlZCBlbXB0eSBHSUYgaW1hZ2UuCiAgLy8gVXNlZCBhcyBhIGhhY2sgdG8gZnJlZSBtZW1vcnkgZnJvbSB1bnVzZWQgaW1hZ2VzIG9uIFdlYktpdC1wb3dlcmVkCiAgLy8gbW9iaWxlIGRldmljZXMgKGJ5IHNldHRpbmcgaW1hZ2UgYHNyY2AgdG8gdGhpcyBzdHJpbmcpLgogIHZhciBlbXB0eUltYWdlVXJsID0gJ2RhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUQvQUN3QUFBQUFBUUFCQUFBQ0FEcz0nOwoKICAvLyBpbnNwaXJlZCBieSBodHRwczovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy8KCiAgZnVuY3Rpb24gZ2V0UHJlZml4ZWQobmFtZSkgewogIAlyZXR1cm4gd2luZG93Wyd3ZWJraXQnICsgbmFtZV0gfHwgd2luZG93Wydtb3onICsgbmFtZV0gfHwgd2luZG93WydtcycgKyBuYW1lXTsKICB9CgogIHZhciBsYXN0VGltZSA9IDA7CgogIC8vIGZhbGxiYWNrIGZvciBJRSA3LTgKICBmdW5jdGlvbiB0aW1lb3V0RGVmZXIoZm4pIHsKICAJdmFyIHRpbWUgPSArbmV3IERhdGUoKSwKICAJICAgIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtICh0aW1lIC0gbGFzdFRpbWUpKTsKCiAgCWxhc3RUaW1lID0gdGltZSArIHRpbWVUb0NhbGw7CiAgCXJldHVybiB3aW5kb3cuc2V0VGltZW91dChmbiwgdGltZVRvQ2FsbCk7CiAgfQoKICB2YXIgcmVxdWVzdEZuID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBnZXRQcmVmaXhlZCgnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJykgfHwgdGltZW91dERlZmVyOwogIHZhciBjYW5jZWxGbiA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCBnZXRQcmVmaXhlZCgnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnKSB8fAogIAkJZ2V0UHJlZml4ZWQoJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZScpIHx8IGZ1bmN0aW9uIChpZCkgeyB3aW5kb3cuY2xlYXJUaW1lb3V0KGlkKTsgfTsKCiAgLy8gQGZ1bmN0aW9uIHJlcXVlc3RBbmltRnJhbWUoZm46IEZ1bmN0aW9uLCBjb250ZXh0PzogT2JqZWN0LCBpbW1lZGlhdGU/OiBCb29sZWFuKTogTnVtYmVyCiAgLy8gU2NoZWR1bGVzIGBmbmAgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgYnJvd3NlciByZXBhaW50cy4gYGZuYCBpcyBib3VuZCB0bwogIC8vIGBjb250ZXh0YCBpZiBnaXZlbi4gV2hlbiBgaW1tZWRpYXRlYCBpcyBzZXQsIGBmbmAgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IGlmCiAgLy8gdGhlIGJyb3dzZXIgZG9lc24ndCBoYXZlIG5hdGl2ZSBzdXBwb3J0IGZvcgogIC8vIFtgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS93aW5kb3cvcmVxdWVzdEFuaW1hdGlvbkZyYW1lKSwKICAvLyBvdGhlcndpc2UgaXQncyBkZWxheWVkLiBSZXR1cm5zIGEgcmVxdWVzdCBJRCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgcmVxdWVzdC4KICBmdW5jdGlvbiByZXF1ZXN0QW5pbUZyYW1lKGZuLCBjb250ZXh0LCBpbW1lZGlhdGUpIHsKICAJaWYgKGltbWVkaWF0ZSAmJiByZXF1ZXN0Rm4gPT09IHRpbWVvdXREZWZlcikgewogIAkJZm4uY2FsbChjb250ZXh0KTsKICAJfSBlbHNlIHsKICAJCXJldHVybiByZXF1ZXN0Rm4uY2FsbCh3aW5kb3csIGJpbmQoZm4sIGNvbnRleHQpKTsKICAJfQogIH0KCiAgLy8gQGZ1bmN0aW9uIGNhbmNlbEFuaW1GcmFtZShpZDogTnVtYmVyKTogdW5kZWZpbmVkCiAgLy8gQ2FuY2VscyBhIHByZXZpb3VzIGByZXF1ZXN0QW5pbUZyYW1lYC4gU2VlIGFsc28gW3dpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL3dpbmRvdy9jYW5jZWxBbmltYXRpb25GcmFtZSkuCiAgZnVuY3Rpb24gY2FuY2VsQW5pbUZyYW1lKGlkKSB7CiAgCWlmIChpZCkgewogIAkJY2FuY2VsRm4uY2FsbCh3aW5kb3csIGlkKTsKICAJfQogIH0KCiAgdmFyIFV0aWwgPSB7CiAgICBfX3Byb3RvX186IG51bGwsCiAgICBleHRlbmQ6IGV4dGVuZCwKICAgIGNyZWF0ZTogY3JlYXRlJDIsCiAgICBiaW5kOiBiaW5kLAogICAgZ2V0IGxhc3RJZCAoKSB7IHJldHVybiBsYXN0SWQ7IH0sCiAgICBzdGFtcDogc3RhbXAsCiAgICB0aHJvdHRsZTogdGhyb3R0bGUsCiAgICB3cmFwTnVtOiB3cmFwTnVtLAogICAgZmFsc2VGbjogZmFsc2VGbiwKICAgIGZvcm1hdE51bTogZm9ybWF0TnVtLAogICAgdHJpbTogdHJpbSwKICAgIHNwbGl0V29yZHM6IHNwbGl0V29yZHMsCiAgICBzZXRPcHRpb25zOiBzZXRPcHRpb25zLAogICAgZ2V0UGFyYW1TdHJpbmc6IGdldFBhcmFtU3RyaW5nLAogICAgdGVtcGxhdGU6IHRlbXBsYXRlLAogICAgaXNBcnJheTogaXNBcnJheSwKICAgIGluZGV4T2Y6IGluZGV4T2YsCiAgICBlbXB0eUltYWdlVXJsOiBlbXB0eUltYWdlVXJsLAogICAgcmVxdWVzdEZuOiByZXF1ZXN0Rm4sCiAgICBjYW5jZWxGbjogY2FuY2VsRm4sCiAgICByZXF1ZXN0QW5pbUZyYW1lOiByZXF1ZXN0QW5pbUZyYW1lLAogICAgY2FuY2VsQW5pbUZyYW1lOiBjYW5jZWxBbmltRnJhbWUKICB9OwoKICAvLyBAY2xhc3MgQ2xhc3MKICAvLyBAYWthIEwuQ2xhc3MKCiAgLy8gQHNlY3Rpb24KICAvLyBAdW5pbmhlcml0YWJsZQoKICAvLyBUaGFua3MgdG8gSm9obiBSZXNpZyBhbmQgRGVhbiBFZHdhcmRzIGZvciBpbnNwaXJhdGlvbiEKCiAgZnVuY3Rpb24gQ2xhc3MoKSB7fQoKICBDbGFzcy5leHRlbmQgPSBmdW5jdGlvbiAocHJvcHMpIHsKCiAgCS8vIEBmdW5jdGlvbiBleHRlbmQocHJvcHM6IE9iamVjdCk6IEZ1bmN0aW9uCiAgCS8vIFtFeHRlbmRzIHRoZSBjdXJyZW50IGNsYXNzXSgjY2xhc3MtaW5oZXJpdGFuY2UpIGdpdmVuIHRoZSBwcm9wZXJ0aWVzIHRvIGJlIGluY2x1ZGVkLgogIAkvLyBSZXR1cm5zIGEgSmF2YXNjcmlwdCBmdW5jdGlvbiB0aGF0IGlzIGEgY2xhc3MgY29uc3RydWN0b3IgKHRvIGJlIGNhbGxlZCB3aXRoIGBuZXdgKS4KICAJdmFyIE5ld0NsYXNzID0gZnVuY3Rpb24gKCkgewoKICAJCXNldE9wdGlvbnModGhpcyk7CgogIAkJLy8gY2FsbCB0aGUgY29uc3RydWN0b3IKICAJCWlmICh0aGlzLmluaXRpYWxpemUpIHsKICAJCQl0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAJCX0KCiAgCQkvLyBjYWxsIGFsbCBjb25zdHJ1Y3RvciBob29rcwogIAkJdGhpcy5jYWxsSW5pdEhvb2tzKCk7CiAgCX07CgogIAl2YXIgcGFyZW50UHJvdG8gPSBOZXdDbGFzcy5fX3N1cGVyX18gPSB0aGlzLnByb3RvdHlwZTsKCiAgCXZhciBwcm90byA9IGNyZWF0ZSQyKHBhcmVudFByb3RvKTsKICAJcHJvdG8uY29uc3RydWN0b3IgPSBOZXdDbGFzczsKCiAgCU5ld0NsYXNzLnByb3RvdHlwZSA9IHByb3RvOwoKICAJLy8gaW5oZXJpdCBwYXJlbnQncyBzdGF0aWNzCiAgCWZvciAodmFyIGkgaW4gdGhpcykgewogIAkJaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBpKSAmJiBpICE9PSAncHJvdG90eXBlJyAmJiBpICE9PSAnX19zdXBlcl9fJykgewogIAkJCU5ld0NsYXNzW2ldID0gdGhpc1tpXTsKICAJCX0KICAJfQoKICAJLy8gbWl4IHN0YXRpYyBwcm9wZXJ0aWVzIGludG8gdGhlIGNsYXNzCiAgCWlmIChwcm9wcy5zdGF0aWNzKSB7CiAgCQlleHRlbmQoTmV3Q2xhc3MsIHByb3BzLnN0YXRpY3MpOwogIAl9CgogIAkvLyBtaXggaW5jbHVkZXMgaW50byB0aGUgcHJvdG90eXBlCiAgCWlmIChwcm9wcy5pbmNsdWRlcykgewogIAkJY2hlY2tEZXByZWNhdGVkTWl4aW5FdmVudHMocHJvcHMuaW5jbHVkZXMpOwogIAkJZXh0ZW5kLmFwcGx5KG51bGwsIFtwcm90b10uY29uY2F0KHByb3BzLmluY2x1ZGVzKSk7CiAgCX0KCiAgCS8vIG1peCBnaXZlbiBwcm9wZXJ0aWVzIGludG8gdGhlIHByb3RvdHlwZQogIAlleHRlbmQocHJvdG8sIHByb3BzKTsKICAJZGVsZXRlIHByb3RvLnN0YXRpY3M7CiAgCWRlbGV0ZSBwcm90by5pbmNsdWRlczsKCiAgCS8vIG1lcmdlIG9wdGlvbnMKICAJaWYgKHByb3RvLm9wdGlvbnMpIHsKICAJCXByb3RvLm9wdGlvbnMgPSBwYXJlbnRQcm90by5vcHRpb25zID8gY3JlYXRlJDIocGFyZW50UHJvdG8ub3B0aW9ucykgOiB7fTsKICAJCWV4dGVuZChwcm90by5vcHRpb25zLCBwcm9wcy5vcHRpb25zKTsKICAJfQoKICAJcHJvdG8uX2luaXRIb29rcyA9IFtdOwoKICAJLy8gYWRkIG1ldGhvZCBmb3IgY2FsbGluZyBhbGwgaG9va3MKICAJcHJvdG8uY2FsbEluaXRIb29rcyA9IGZ1bmN0aW9uICgpIHsKCiAgCQlpZiAodGhpcy5faW5pdEhvb2tzQ2FsbGVkKSB7IHJldHVybjsgfQoKICAJCWlmIChwYXJlbnRQcm90by5jYWxsSW5pdEhvb2tzKSB7CiAgCQkJcGFyZW50UHJvdG8uY2FsbEluaXRIb29rcy5jYWxsKHRoaXMpOwogIAkJfQoKICAJCXRoaXMuX2luaXRIb29rc0NhbGxlZCA9IHRydWU7CgogIAkJZm9yICh2YXIgaSA9IDAsIGxlbiA9IHByb3RvLl9pbml0SG9va3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCQlwcm90by5faW5pdEhvb2tzW2ldLmNhbGwodGhpcyk7CiAgCQl9CiAgCX07CgogIAlyZXR1cm4gTmV3Q2xhc3M7CiAgfTsKCgogIC8vIEBmdW5jdGlvbiBpbmNsdWRlKHByb3BlcnRpZXM6IE9iamVjdCk6IHRoaXMKICAvLyBbSW5jbHVkZXMgYSBtaXhpbl0oI2NsYXNzLWluY2x1ZGVzKSBpbnRvIHRoZSBjdXJyZW50IGNsYXNzLgogIENsYXNzLmluY2x1ZGUgPSBmdW5jdGlvbiAocHJvcHMpIHsKICAJdmFyIHBhcmVudE9wdGlvbnMgPSB0aGlzLnByb3RvdHlwZS5vcHRpb25zOwogIAlleHRlbmQodGhpcy5wcm90b3R5cGUsIHByb3BzKTsKICAJaWYgKHByb3BzLm9wdGlvbnMpIHsKICAJCXRoaXMucHJvdG90eXBlLm9wdGlvbnMgPSBwYXJlbnRPcHRpb25zOwogIAkJdGhpcy5tZXJnZU9wdGlvbnMocHJvcHMub3B0aW9ucyk7CiAgCX0KICAJcmV0dXJuIHRoaXM7CiAgfTsKCiAgLy8gQGZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhvcHRpb25zOiBPYmplY3QpOiB0aGlzCiAgLy8gW01lcmdlcyBgb3B0aW9uc2BdKCNjbGFzcy1vcHRpb25zKSBpbnRvIHRoZSBkZWZhdWx0cyBvZiB0aGUgY2xhc3MuCiAgQ2xhc3MubWVyZ2VPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAJZXh0ZW5kKHRoaXMucHJvdG90eXBlLm9wdGlvbnMsIG9wdGlvbnMpOwogIAlyZXR1cm4gdGhpczsKICB9OwoKICAvLyBAZnVuY3Rpb24gYWRkSW5pdEhvb2soZm46IEZ1bmN0aW9uKTogdGhpcwogIC8vIEFkZHMgYSBbY29uc3RydWN0b3IgaG9va10oI2NsYXNzLWNvbnN0cnVjdG9yLWhvb2tzKSB0byB0aGUgY2xhc3MuCiAgQ2xhc3MuYWRkSW5pdEhvb2sgPSBmdW5jdGlvbiAoZm4pIHsgLy8gKEZ1bmN0aW9uKSB8fCAoU3RyaW5nLCBhcmdzLi4uKQogIAl2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CgogIAl2YXIgaW5pdCA9IHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyA/IGZuIDogZnVuY3Rpb24gKCkgewogIAkJdGhpc1tmbl0uYXBwbHkodGhpcywgYXJncyk7CiAgCX07CgogIAl0aGlzLnByb3RvdHlwZS5faW5pdEhvb2tzID0gdGhpcy5wcm90b3R5cGUuX2luaXRIb29rcyB8fCBbXTsKICAJdGhpcy5wcm90b3R5cGUuX2luaXRIb29rcy5wdXNoKGluaXQpOwogIAlyZXR1cm4gdGhpczsKICB9OwoKICBmdW5jdGlvbiBjaGVja0RlcHJlY2F0ZWRNaXhpbkV2ZW50cyhpbmNsdWRlcykgewogIAlpZiAodHlwZW9mIEwgPT09ICd1bmRlZmluZWQnIHx8ICFMIHx8ICFMLk1peGluKSB7IHJldHVybjsgfQoKICAJaW5jbHVkZXMgPSBpc0FycmF5KGluY2x1ZGVzKSA/IGluY2x1ZGVzIDogW2luY2x1ZGVzXTsKCiAgCWZvciAodmFyIGkgPSAwOyBpIDwgaW5jbHVkZXMubGVuZ3RoOyBpKyspIHsKICAJCWlmIChpbmNsdWRlc1tpXSA9PT0gTC5NaXhpbi5FdmVudHMpIHsKICAJCQljb25zb2xlLndhcm4oJ0RlcHJlY2F0ZWQgaW5jbHVkZSBvZiBMLk1peGluLkV2ZW50czogJyArCiAgCQkJCSd0aGlzIHByb3BlcnR5IHdpbGwgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgcmVsZWFzZXMsICcgKwogIAkJCQkncGxlYXNlIGluaGVyaXQgZnJvbSBMLkV2ZW50ZWQgaW5zdGVhZC4nLCBuZXcgRXJyb3IoKS5zdGFjayk7CiAgCQl9CiAgCX0KICB9CgogIC8qCiAgICogQGNsYXNzIEV2ZW50ZWQKICAgKiBAYWthIEwuRXZlbnRlZAogICAqIEBpbmhlcml0cyBDbGFzcwogICAqCiAgICogQSBzZXQgb2YgbWV0aG9kcyBzaGFyZWQgYmV0d2VlbiBldmVudC1wb3dlcmVkIGNsYXNzZXMgKGxpa2UgYE1hcGAgYW5kIGBNYXJrZXJgKS4gR2VuZXJhbGx5LCBldmVudHMgYWxsb3cgeW91IHRvIGV4ZWN1dGUgc29tZSBmdW5jdGlvbiB3aGVuIHNvbWV0aGluZyBoYXBwZW5zIHdpdGggYW4gb2JqZWN0IChlLmcuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgbWFwLCBjYXVzaW5nIHRoZSBtYXAgdG8gZmlyZSBgJ2NsaWNrJ2AgZXZlbnQpLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgKiAJYWxlcnQoZS5sYXRsbmcpOwogICAqIH0gKTsKICAgKiBgYGAKICAgKgogICAqIExlYWZsZXQgZGVhbHMgd2l0aCBldmVudCBsaXN0ZW5lcnMgYnkgcmVmZXJlbmNlLCBzbyBpZiB5b3Ugd2FudCB0byBhZGQgYSBsaXN0ZW5lciBhbmQgdGhlbiByZW1vdmUgaXQsIGRlZmluZSBpdCBhcyBhIGZ1bmN0aW9uOgogICAqCiAgICogYGBganMKICAgKiBmdW5jdGlvbiBvbkNsaWNrKGUpIHsgLi4uIH0KICAgKgogICAqIG1hcC5vbignY2xpY2snLCBvbkNsaWNrKTsKICAgKiBtYXAub2ZmKCdjbGljaycsIG9uQ2xpY2spOwogICAqIGBgYAogICAqLwoKICB2YXIgRXZlbnRzID0gewogIAkvKiBAbWV0aG9kIG9uKHR5cGU6IFN0cmluZywgZm46IEZ1bmN0aW9uLCBjb250ZXh0PzogT2JqZWN0KTogdGhpcwogIAkgKiBBZGRzIGEgbGlzdGVuZXIgZnVuY3Rpb24gKGBmbmApIHRvIGEgcGFydGljdWxhciBldmVudCB0eXBlIG9mIHRoZSBvYmplY3QuIFlvdSBjYW4gb3B0aW9uYWxseSBzcGVjaWZ5IHRoZSBjb250ZXh0IG9mIHRoZSBsaXN0ZW5lciAob2JqZWN0IHRoZSB0aGlzIGtleXdvcmQgd2lsbCBwb2ludCB0bykuIFlvdSBjYW4gYWxzbyBwYXNzIHNldmVyYWwgc3BhY2Utc2VwYXJhdGVkIHR5cGVzIChlLmcuIGAnY2xpY2sgZGJsY2xpY2snYCkuCiAgCSAqCiAgCSAqIEBhbHRlcm5hdGl2ZQogIAkgKiBAbWV0aG9kIG9uKGV2ZW50TWFwOiBPYmplY3QpOiB0aGlzCiAgCSAqIEFkZHMgYSBzZXQgb2YgdHlwZS9saXN0ZW5lciBwYWlycywgZS5nLiBge2NsaWNrOiBvbkNsaWNrLCBtb3VzZW1vdmU6IG9uTW91c2VNb3ZlfWAKICAJICovCiAgCW9uOiBmdW5jdGlvbiAodHlwZXMsIGZuLCBjb250ZXh0KSB7CgogIAkJLy8gdHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzCiAgCQlpZiAodHlwZW9mIHR5cGVzID09PSAnb2JqZWN0JykgewogIAkJCWZvciAodmFyIHR5cGUgaW4gdHlwZXMpIHsKICAJCQkJLy8gd2UgZG9uJ3QgcHJvY2VzcyBzcGFjZS1zZXBhcmF0ZWQgZXZlbnRzIGhlcmUgZm9yIHBlcmZvcm1hbmNlOwogIAkJCQkvLyBpdCdzIGEgaG90IHBhdGggc2luY2UgTGF5ZXIgdXNlcyB0aGUgb24ob2JqKSBzeW50YXgKICAJCQkJdGhpcy5fb24odHlwZSwgdHlwZXNbdHlwZV0sIGZuKTsKICAJCQl9CgogIAkJfSBlbHNlIHsKICAJCQkvLyB0eXBlcyBjYW4gYmUgYSBzdHJpbmcgb2Ygc3BhY2Utc2VwYXJhdGVkIHdvcmRzCiAgCQkJdHlwZXMgPSBzcGxpdFdvcmRzKHR5cGVzKTsKCiAgCQkJZm9yICh2YXIgaSA9IDAsIGxlbiA9IHR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJCXRoaXMuX29uKHR5cGVzW2ldLCBmbiwgY29udGV4dCk7CiAgCQkJfQogIAkJfQoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLyogQG1ldGhvZCBvZmYodHlwZTogU3RyaW5nLCBmbj86IEZ1bmN0aW9uLCBjb250ZXh0PzogT2JqZWN0KTogdGhpcwogIAkgKiBSZW1vdmVzIGEgcHJldmlvdXNseSBhZGRlZCBsaXN0ZW5lciBmdW5jdGlvbi4gSWYgbm8gZnVuY3Rpb24gaXMgc3BlY2lmaWVkLCBpdCB3aWxsIHJlbW92ZSBhbGwgdGhlIGxpc3RlbmVycyBvZiB0aGF0IHBhcnRpY3VsYXIgZXZlbnQgZnJvbSB0aGUgb2JqZWN0LiBOb3RlIHRoYXQgaWYgeW91IHBhc3NlZCBhIGN1c3RvbSBjb250ZXh0IHRvIGBvbmAsIHlvdSBtdXN0IHBhc3MgdGhlIHNhbWUgY29udGV4dCB0byBgb2ZmYCBpbiBvcmRlciB0byByZW1vdmUgdGhlIGxpc3RlbmVyLgogIAkgKgogIAkgKiBAYWx0ZXJuYXRpdmUKICAJICogQG1ldGhvZCBvZmYoZXZlbnRNYXA6IE9iamVjdCk6IHRoaXMKICAJICogUmVtb3ZlcyBhIHNldCBvZiB0eXBlL2xpc3RlbmVyIHBhaXJzLgogIAkgKgogIAkgKiBAYWx0ZXJuYXRpdmUKICAJICogQG1ldGhvZCBvZmY6IHRoaXMKICAJICogUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIHRvIGFsbCBldmVudHMgb24gdGhlIG9iamVjdC4gVGhpcyBpbmNsdWRlcyBpbXBsaWNpdGx5IGF0dGFjaGVkIGV2ZW50cy4KICAJICovCiAgCW9mZjogZnVuY3Rpb24gKHR5cGVzLCBmbiwgY29udGV4dCkgewoKICAJCWlmICghYXJndW1lbnRzLmxlbmd0aCkgewogIAkJCS8vIGNsZWFyIGFsbCBsaXN0ZW5lcnMgaWYgY2FsbGVkIHdpdGhvdXQgYXJndW1lbnRzCiAgCQkJZGVsZXRlIHRoaXMuX2V2ZW50czsKCiAgCQl9IGVsc2UgaWYgKHR5cGVvZiB0eXBlcyA9PT0gJ29iamVjdCcpIHsKICAJCQlmb3IgKHZhciB0eXBlIGluIHR5cGVzKSB7CiAgCQkJCXRoaXMuX29mZih0eXBlLCB0eXBlc1t0eXBlXSwgZm4pOwogIAkJCX0KCiAgCQl9IGVsc2UgewogIAkJCXR5cGVzID0gc3BsaXRXb3Jkcyh0eXBlcyk7CgogIAkJCXZhciByZW1vdmVBbGwgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxOwogIAkJCWZvciAodmFyIGkgPSAwLCBsZW4gPSB0eXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJCQlpZiAocmVtb3ZlQWxsKSB7CiAgCQkJCQl0aGlzLl9vZmYodHlwZXNbaV0pOwogIAkJCQl9IGVsc2UgewogIAkJCQkJdGhpcy5fb2ZmKHR5cGVzW2ldLCBmbiwgY29udGV4dCk7CiAgCQkJCX0KICAJCQl9CiAgCQl9CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBhdHRhY2ggbGlzdGVuZXIgKHdpdGhvdXQgc3ludGFjdGljIHN1Z2FyIG5vdykKICAJX29uOiBmdW5jdGlvbiAodHlwZSwgZm4sIGNvbnRleHQpIHsKICAJCWlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHsKICAJCQljb25zb2xlLndhcm4oJ3dyb25nIGxpc3RlbmVyIHR5cGU6ICcgKyB0eXBlb2YgZm4pOwogIAkJCXJldHVybjsKICAJCX0KICAJCXRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTsKCiAgCQkvKiBnZXQvaW5pdCBsaXN0ZW5lcnMgZm9yIHR5cGUgKi8KICAJCXZhciB0eXBlTGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdOwogIAkJaWYgKCF0eXBlTGlzdGVuZXJzKSB7CiAgCQkJdHlwZUxpc3RlbmVycyA9IFtdOwogIAkJCXRoaXMuX2V2ZW50c1t0eXBlXSA9IHR5cGVMaXN0ZW5lcnM7CiAgCQl9CgogIAkJaWYgKGNvbnRleHQgPT09IHRoaXMpIHsKICAJCQkvLyBMZXNzIG1lbW9yeSBmb290cHJpbnQuCiAgCQkJY29udGV4dCA9IHVuZGVmaW5lZDsKICAJCX0KICAJCXZhciBuZXdMaXN0ZW5lciA9IHtmbjogZm4sIGN0eDogY29udGV4dH0sCiAgCQkgICAgbGlzdGVuZXJzID0gdHlwZUxpc3RlbmVyczsKCiAgCQkvLyBjaGVjayBpZiBmbiBhbHJlYWR5IHRoZXJlCiAgCQlmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJaWYgKGxpc3RlbmVyc1tpXS5mbiA9PT0gZm4gJiYgbGlzdGVuZXJzW2ldLmN0eCA9PT0gY29udGV4dCkgewogIAkJCQlyZXR1cm47CiAgCQkJfQogIAkJfQoKICAJCWxpc3RlbmVycy5wdXNoKG5ld0xpc3RlbmVyKTsKICAJfSwKCiAgCV9vZmY6IGZ1bmN0aW9uICh0eXBlLCBmbiwgY29udGV4dCkgewogIAkJdmFyIGxpc3RlbmVycywKICAJCSAgICBpLAogIAkJICAgIGxlbjsKCiAgCQlpZiAoIXRoaXMuX2V2ZW50cykgeyByZXR1cm47IH0KCiAgCQlsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07CgogIAkJaWYgKCFsaXN0ZW5lcnMpIHsKICAJCQlyZXR1cm47CiAgCQl9CgogIAkJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHsgLy8gcmVtb3ZlIGFsbAogIAkJCWlmICh0aGlzLl9maXJpbmdDb3VudCkgewogIAkJCQkvLyBTZXQgYWxsIHJlbW92ZWQgbGlzdGVuZXJzIHRvIG5vb3AKICAJCQkJLy8gc28gdGhleSBhcmUgbm90IGNhbGxlZCBpZiByZW1vdmUgaGFwcGVucyBpbiBmaXJlCiAgCQkJCWZvciAoaSA9IDAsIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJCQkJbGlzdGVuZXJzW2ldLmZuID0gZmFsc2VGbjsKICAJCQkJfQogIAkJCX0KICAJCQkvLyBjbGVhciBhbGwgbGlzdGVuZXJzIGZvciBhIHR5cGUgaWYgZnVuY3Rpb24gaXNuJ3Qgc3BlY2lmaWVkCiAgCQkJZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTsKICAJCQlyZXR1cm47CiAgCQl9CgogIAkJaWYgKGNvbnRleHQgPT09IHRoaXMpIHsKICAJCQljb250ZXh0ID0gdW5kZWZpbmVkOwogIAkJfQoKICAJCWlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHsKICAJCQljb25zb2xlLndhcm4oJ3dyb25nIGxpc3RlbmVyIHR5cGU6ICcgKyB0eXBlb2YgZm4pOwogIAkJCXJldHVybjsKICAJCX0KICAJCS8vIGZpbmQgZm4gYW5kIHJlbW92ZSBpdAogIAkJZm9yIChpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJdmFyIGwgPSBsaXN0ZW5lcnNbaV07CiAgCQkJaWYgKGwuY3R4ICE9PSBjb250ZXh0KSB7IGNvbnRpbnVlOyB9CiAgCQkJaWYgKGwuZm4gPT09IGZuKSB7CiAgCQkJCWlmICh0aGlzLl9maXJpbmdDb3VudCkgewogIAkJCQkJLy8gc2V0IHRoZSByZW1vdmVkIGxpc3RlbmVyIHRvIG5vb3Agc28gdGhhdCdzIG5vdCBjYWxsZWQgaWYgcmVtb3ZlIGhhcHBlbnMgaW4gZmlyZQogIAkJCQkJbC5mbiA9IGZhbHNlRm47CgogIAkJCQkJLyogY29weSBhcnJheSBpbiBjYXNlIGV2ZW50cyBhcmUgYmVpbmcgZmlyZWQgKi8KICAJCQkJCXRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgpOwogIAkJCQl9CiAgCQkJCWxpc3RlbmVycy5zcGxpY2UoaSwgMSk7CgogIAkJCQlyZXR1cm47CiAgCQkJfQogIAkJfQogIAkJY29uc29sZS53YXJuKCdsaXN0ZW5lciBub3QgZm91bmQnKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZmlyZSh0eXBlOiBTdHJpbmcsIGRhdGE/OiBPYmplY3QsIHByb3BhZ2F0ZT86IEJvb2xlYW4pOiB0aGlzCiAgCS8vIEZpcmVzIGFuIGV2ZW50IG9mIHRoZSBzcGVjaWZpZWQgdHlwZS4gWW91IGNhbiBvcHRpb25hbGx5IHByb3ZpZGUgYSBkYXRhCiAgCS8vIG9iamVjdCDigJQgdGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBsaXN0ZW5lciBmdW5jdGlvbiB3aWxsIGNvbnRhaW4gaXRzCiAgCS8vIHByb3BlcnRpZXMuIFRoZSBldmVudCBjYW4gb3B0aW9uYWxseSBiZSBwcm9wYWdhdGVkIHRvIGV2ZW50IHBhcmVudHMuCiAgCWZpcmU6IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBwcm9wYWdhdGUpIHsKICAJCWlmICghdGhpcy5saXN0ZW5zKHR5cGUsIHByb3BhZ2F0ZSkpIHsgcmV0dXJuIHRoaXM7IH0KCiAgCQl2YXIgZXZlbnQgPSBleHRlbmQoe30sIGRhdGEsIHsKICAJCQl0eXBlOiB0eXBlLAogIAkJCXRhcmdldDogdGhpcywKICAJCQlzb3VyY2VUYXJnZXQ6IGRhdGEgJiYgZGF0YS5zb3VyY2VUYXJnZXQgfHwgdGhpcwogIAkJfSk7CgogIAkJaWYgKHRoaXMuX2V2ZW50cykgewogIAkJCXZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07CgogIAkJCWlmIChsaXN0ZW5lcnMpIHsKICAJCQkJdGhpcy5fZmlyaW5nQ291bnQgPSAodGhpcy5fZmlyaW5nQ291bnQgKyAxKSB8fCAxOwogIAkJCQlmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJCQl2YXIgbCA9IGxpc3RlbmVyc1tpXTsKICAJCQkJCWwuZm4uY2FsbChsLmN0eCB8fCB0aGlzLCBldmVudCk7CiAgCQkJCX0KCiAgCQkJCXRoaXMuX2ZpcmluZ0NvdW50LS07CiAgCQkJfQogIAkJfQoKICAJCWlmIChwcm9wYWdhdGUpIHsKICAJCQkvLyBwcm9wYWdhdGUgdGhlIGV2ZW50IHRvIHBhcmVudHMgKHNldCB3aXRoIGFkZEV2ZW50UGFyZW50KQogIAkJCXRoaXMuX3Byb3BhZ2F0ZUV2ZW50KGV2ZW50KTsKICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgbGlzdGVucyh0eXBlOiBTdHJpbmcsIHByb3BhZ2F0ZT86IEJvb2xlYW4pOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIGlmIGEgcGFydGljdWxhciBldmVudCB0eXBlIGhhcyBhbnkgbGlzdGVuZXJzIGF0dGFjaGVkIHRvIGl0LgogIAkvLyBUaGUgdmVyaWZpY2F0aW9uIGNhbiBvcHRpb25hbGx5IGJlIHByb3BhZ2F0ZWQsIGl0IHdpbGwgcmV0dXJuIGB0cnVlYCBpZiBwYXJlbnRzIGhhdmUgdGhlIGxpc3RlbmVyIGF0dGFjaGVkIHRvIGl0LgogIAlsaXN0ZW5zOiBmdW5jdGlvbiAodHlwZSwgcHJvcGFnYXRlKSB7CiAgCQlpZiAodHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7CiAgCQkJY29uc29sZS53YXJuKCcic3RyaW5nIiB0eXBlIGFyZ3VtZW50IGV4cGVjdGVkJyk7CiAgCQl9CiAgCQl2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1t0eXBlXTsKICAJCWlmIChsaXN0ZW5lcnMgJiYgbGlzdGVuZXJzLmxlbmd0aCkgeyByZXR1cm4gdHJ1ZTsgfQoKICAJCWlmIChwcm9wYWdhdGUpIHsKICAJCQkvLyBhbHNvIGNoZWNrIHBhcmVudHMgZm9yIGxpc3RlbmVycyBpZiBldmVudCBwcm9wYWdhdGVzCiAgCQkJZm9yICh2YXIgaWQgaW4gdGhpcy5fZXZlbnRQYXJlbnRzKSB7CiAgCQkJCWlmICh0aGlzLl9ldmVudFBhcmVudHNbaWRdLmxpc3RlbnModHlwZSwgcHJvcGFnYXRlKSkgeyByZXR1cm4gdHJ1ZTsgfQogIAkJCX0KICAJCX0KICAJCXJldHVybiBmYWxzZTsKICAJfSwKCiAgCS8vIEBtZXRob2Qgb25jZSjigKYpOiB0aGlzCiAgCS8vIEJlaGF2ZXMgYXMgW2BvbijigKYpYF0oI2V2ZW50ZWQtb24pLCBleGNlcHQgdGhlIGxpc3RlbmVyIHdpbGwgb25seSBnZXQgZmlyZWQgb25jZSBhbmQgdGhlbiByZW1vdmVkLgogIAlvbmNlOiBmdW5jdGlvbiAodHlwZXMsIGZuLCBjb250ZXh0KSB7CgogIAkJaWYgKHR5cGVvZiB0eXBlcyA9PT0gJ29iamVjdCcpIHsKICAJCQlmb3IgKHZhciB0eXBlIGluIHR5cGVzKSB7CiAgCQkJCXRoaXMub25jZSh0eXBlLCB0eXBlc1t0eXBlXSwgZm4pOwogIAkJCX0KICAJCQlyZXR1cm4gdGhpczsKICAJCX0KCiAgCQl2YXIgaGFuZGxlciA9IGJpbmQoZnVuY3Rpb24gKCkgewogIAkJCXRoaXMKICAJCQkgICAgLm9mZih0eXBlcywgZm4sIGNvbnRleHQpCiAgCQkJICAgIC5vZmYodHlwZXMsIGhhbmRsZXIsIGNvbnRleHQpOwogIAkJfSwgdGhpcyk7CgogIAkJLy8gYWRkIGEgbGlzdGVuZXIgdGhhdCdzIGV4ZWN1dGVkIG9uY2UgYW5kIHJlbW92ZWQgYWZ0ZXIgdGhhdAogIAkJcmV0dXJuIHRoaXMKICAJCSAgICAub24odHlwZXMsIGZuLCBjb250ZXh0KQogIAkJICAgIC5vbih0eXBlcywgaGFuZGxlciwgY29udGV4dCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGFkZEV2ZW50UGFyZW50KG9iajogRXZlbnRlZCk6IHRoaXMKICAJLy8gQWRkcyBhbiBldmVudCBwYXJlbnQgLSBhbiBgRXZlbnRlZGAgdGhhdCB3aWxsIHJlY2VpdmUgcHJvcGFnYXRlZCBldmVudHMKICAJYWRkRXZlbnRQYXJlbnQ6IGZ1bmN0aW9uIChvYmopIHsKICAJCXRoaXMuX2V2ZW50UGFyZW50cyA9IHRoaXMuX2V2ZW50UGFyZW50cyB8fCB7fTsKICAJCXRoaXMuX2V2ZW50UGFyZW50c1tzdGFtcChvYmopXSA9IG9iajsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCByZW1vdmVFdmVudFBhcmVudChvYmo6IEV2ZW50ZWQpOiB0aGlzCiAgCS8vIFJlbW92ZXMgYW4gZXZlbnQgcGFyZW50LCBzbyBpdCB3aWxsIHN0b3AgcmVjZWl2aW5nIHByb3BhZ2F0ZWQgZXZlbnRzCiAgCXJlbW92ZUV2ZW50UGFyZW50OiBmdW5jdGlvbiAob2JqKSB7CiAgCQlpZiAodGhpcy5fZXZlbnRQYXJlbnRzKSB7CiAgCQkJZGVsZXRlIHRoaXMuX2V2ZW50UGFyZW50c1tzdGFtcChvYmopXTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJX3Byb3BhZ2F0ZUV2ZW50OiBmdW5jdGlvbiAoZSkgewogIAkJZm9yICh2YXIgaWQgaW4gdGhpcy5fZXZlbnRQYXJlbnRzKSB7CiAgCQkJdGhpcy5fZXZlbnRQYXJlbnRzW2lkXS5maXJlKGUudHlwZSwgZXh0ZW5kKHsKICAJCQkJbGF5ZXI6IGUudGFyZ2V0LAogIAkJCQlwcm9wYWdhdGVkRnJvbTogZS50YXJnZXQKICAJCQl9LCBlKSwgdHJ1ZSk7CiAgCQl9CiAgCX0KICB9OwoKICAvLyBhbGlhc2VzOyB3ZSBzaG91bGQgZGl0Y2ggdGhvc2UgZXZlbnR1YWxseQoKICAvLyBAbWV0aG9kIGFkZEV2ZW50TGlzdGVuZXIo4oCmKTogdGhpcwogIC8vIEFsaWFzIHRvIFtgb24o4oCmKWBdKCNldmVudGVkLW9uKQogIEV2ZW50cy5hZGRFdmVudExpc3RlbmVyID0gRXZlbnRzLm9uOwoKICAvLyBAbWV0aG9kIHJlbW92ZUV2ZW50TGlzdGVuZXIo4oCmKTogdGhpcwogIC8vIEFsaWFzIHRvIFtgb2ZmKOKApilgXSgjZXZlbnRlZC1vZmYpCgogIC8vIEBtZXRob2QgY2xlYXJBbGxFdmVudExpc3RlbmVycyjigKYpOiB0aGlzCiAgLy8gQWxpYXMgdG8gW2BvZmYoKWBdKCNldmVudGVkLW9mZikKICBFdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IEV2ZW50cy5jbGVhckFsbEV2ZW50TGlzdGVuZXJzID0gRXZlbnRzLm9mZjsKCiAgLy8gQG1ldGhvZCBhZGRPbmVUaW1lRXZlbnRMaXN0ZW5lcijigKYpOiB0aGlzCiAgLy8gQWxpYXMgdG8gW2BvbmNlKOKApilgXSgjZXZlbnRlZC1vbmNlKQogIEV2ZW50cy5hZGRPbmVUaW1lRXZlbnRMaXN0ZW5lciA9IEV2ZW50cy5vbmNlOwoKICAvLyBAbWV0aG9kIGZpcmVFdmVudCjigKYpOiB0aGlzCiAgLy8gQWxpYXMgdG8gW2BmaXJlKOKApilgXSgjZXZlbnRlZC1maXJlKQogIEV2ZW50cy5maXJlRXZlbnQgPSBFdmVudHMuZmlyZTsKCiAgLy8gQG1ldGhvZCBoYXNFdmVudExpc3RlbmVycyjigKYpOiBCb29sZWFuCiAgLy8gQWxpYXMgdG8gW2BsaXN0ZW5zKOKApilgXSgjZXZlbnRlZC1saXN0ZW5zKQogIEV2ZW50cy5oYXNFdmVudExpc3RlbmVycyA9IEV2ZW50cy5saXN0ZW5zOwoKICB2YXIgRXZlbnRlZCA9IENsYXNzLmV4dGVuZChFdmVudHMpOwoKICAvKgogICAqIEBjbGFzcyBQb2ludAogICAqIEBha2EgTC5Qb2ludAogICAqCiAgICogUmVwcmVzZW50cyBhIHBvaW50IHdpdGggYHhgIGFuZCBgeWAgY29vcmRpbmF0ZXMgaW4gcGl4ZWxzLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogdmFyIHBvaW50ID0gTC5wb2ludCgyMDAsIDMwMCk7CiAgICogYGBgCiAgICoKICAgKiBBbGwgTGVhZmxldCBtZXRob2RzIGFuZCBvcHRpb25zIHRoYXQgYWNjZXB0IGBQb2ludGAgb2JqZWN0cyBhbHNvIGFjY2VwdCB0aGVtIGluIGEgc2ltcGxlIEFycmF5IGZvcm0gKHVubGVzcyBub3RlZCBvdGhlcndpc2UpLCBzbyB0aGVzZSBsaW5lcyBhcmUgZXF1aXZhbGVudDoKICAgKgogICAqIGBgYGpzCiAgICogbWFwLnBhbkJ5KFsyMDAsIDMwMF0pOwogICAqIG1hcC5wYW5CeShMLnBvaW50KDIwMCwgMzAwKSk7CiAgICogYGBgCiAgICoKICAgKiBOb3RlIHRoYXQgYFBvaW50YCBkb2VzIG5vdCBpbmhlcml0IGZyb20gTGVhZmxldCdzIGBDbGFzc2Agb2JqZWN0LAogICAqIHdoaWNoIG1lYW5zIG5ldyBjbGFzc2VzIGNhbid0IGluaGVyaXQgZnJvbSBpdCwgYW5kIG5ldyBtZXRob2RzCiAgICogY2FuJ3QgYmUgYWRkZWQgdG8gaXQgd2l0aCB0aGUgYGluY2x1ZGVgIGZ1bmN0aW9uLgogICAqLwoKICBmdW5jdGlvbiBQb2ludCh4LCB5LCByb3VuZCkgewogIAkvLyBAcHJvcGVydHkgeDogTnVtYmVyOyBUaGUgYHhgIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50CiAgCXRoaXMueCA9IChyb3VuZCA/IE1hdGgucm91bmQoeCkgOiB4KTsKICAJLy8gQHByb3BlcnR5IHk6IE51bWJlcjsgVGhlIGB5YCBjb29yZGluYXRlIG9mIHRoZSBwb2ludAogIAl0aGlzLnkgPSAocm91bmQgPyBNYXRoLnJvdW5kKHkpIDogeSk7CiAgfQoKICB2YXIgdHJ1bmMgPSBNYXRoLnRydW5jIHx8IGZ1bmN0aW9uICh2KSB7CiAgCXJldHVybiB2ID4gMCA/IE1hdGguZmxvb3IodikgOiBNYXRoLmNlaWwodik7CiAgfTsKCiAgUG9pbnQucHJvdG90eXBlID0gewoKICAJLy8gQG1ldGhvZCBjbG9uZSgpOiBQb2ludAogIAkvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgY3VycmVudCBwb2ludC4KICAJY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBhZGQob3RoZXJQb2ludDogUG9pbnQpOiBQb2ludAogIAkvLyBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYWRkaXRpb24gb2YgdGhlIGN1cnJlbnQgYW5kIHRoZSBnaXZlbiBwb2ludHMuCiAgCWFkZDogZnVuY3Rpb24gKHBvaW50KSB7CiAgCQkvLyBub24tZGVzdHJ1Y3RpdmUsIHJldHVybnMgYSBuZXcgcG9pbnQKICAJCXJldHVybiB0aGlzLmNsb25lKCkuX2FkZCh0b1BvaW50KHBvaW50KSk7CiAgCX0sCgogIAlfYWRkOiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCS8vIGRlc3RydWN0aXZlLCB1c2VkIGRpcmVjdGx5IGZvciBwZXJmb3JtYW5jZSBpbiBzaXR1YXRpb25zIHdoZXJlIGl0J3Mgc2FmZSB0byBtb2RpZnkgZXhpc3RpbmcgcG9pbnQKICAJCXRoaXMueCArPSBwb2ludC54OwogIAkJdGhpcy55ICs9IHBvaW50Lnk7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc3VidHJhY3Qob3RoZXJQb2ludDogUG9pbnQpOiBQb2ludAogIAkvLyBSZXR1cm5zIHRoZSByZXN1bHQgb2Ygc3VidHJhY3Rpb24gb2YgdGhlIGdpdmVuIHBvaW50IGZyb20gdGhlIGN1cnJlbnQuCiAgCXN1YnRyYWN0OiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXJldHVybiB0aGlzLmNsb25lKCkuX3N1YnRyYWN0KHRvUG9pbnQocG9pbnQpKTsKICAJfSwKCiAgCV9zdWJ0cmFjdDogZnVuY3Rpb24gKHBvaW50KSB7CiAgCQl0aGlzLnggLT0gcG9pbnQueDsKICAJCXRoaXMueSAtPSBwb2ludC55OwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGRpdmlkZUJ5KG51bTogTnVtYmVyKTogUG9pbnQKICAJLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uIG9mIHRoZSBjdXJyZW50IHBvaW50IGJ5IHRoZSBnaXZlbiBudW1iZXIuCiAgCWRpdmlkZUJ5OiBmdW5jdGlvbiAobnVtKSB7CiAgCQlyZXR1cm4gdGhpcy5jbG9uZSgpLl9kaXZpZGVCeShudW0pOwogIAl9LAoKICAJX2RpdmlkZUJ5OiBmdW5jdGlvbiAobnVtKSB7CiAgCQl0aGlzLnggLz0gbnVtOwogIAkJdGhpcy55IC89IG51bTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBtdWx0aXBseUJ5KG51bTogTnVtYmVyKTogUG9pbnQKICAJLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIG11bHRpcGxpY2F0aW9uIG9mIHRoZSBjdXJyZW50IHBvaW50IGJ5IHRoZSBnaXZlbiBudW1iZXIuCiAgCW11bHRpcGx5Qnk6IGZ1bmN0aW9uIChudW0pIHsKICAJCXJldHVybiB0aGlzLmNsb25lKCkuX211bHRpcGx5QnkobnVtKTsKICAJfSwKCiAgCV9tdWx0aXBseUJ5OiBmdW5jdGlvbiAobnVtKSB7CiAgCQl0aGlzLnggKj0gbnVtOwogIAkJdGhpcy55ICo9IG51bTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzY2FsZUJ5KHNjYWxlOiBQb2ludCk6IFBvaW50CiAgCS8vIE11bHRpcGx5IGVhY2ggY29vcmRpbmF0ZSBvZiB0aGUgY3VycmVudCBwb2ludCBieSBlYWNoIGNvb3JkaW5hdGUgb2YKICAJLy8gYHNjYWxlYC4gSW4gbGluZWFyIGFsZ2VicmEgdGVybXMsIG11bHRpcGx5IHRoZSBwb2ludCBieSB0aGUKICAJLy8gW3NjYWxpbmcgbWF0cml4XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TY2FsaW5nXyUyOGdlb21ldHJ5JTI5I01hdHJpeF9yZXByZXNlbnRhdGlvbikKICAJLy8gZGVmaW5lZCBieSBgc2NhbGVgLgogIAlzY2FsZUJ5OiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXJldHVybiBuZXcgUG9pbnQodGhpcy54ICogcG9pbnQueCwgdGhpcy55ICogcG9pbnQueSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHVuc2NhbGVCeShzY2FsZTogUG9pbnQpOiBQb2ludAogIAkvLyBJbnZlcnNlIG9mIGBzY2FsZUJ5YC4gRGl2aWRlIGVhY2ggY29vcmRpbmF0ZSBvZiB0aGUgY3VycmVudCBwb2ludCBieQogIAkvLyBlYWNoIGNvb3JkaW5hdGUgb2YgYHNjYWxlYC4KICAJdW5zY2FsZUJ5OiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXJldHVybiBuZXcgUG9pbnQodGhpcy54IC8gcG9pbnQueCwgdGhpcy55IC8gcG9pbnQueSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHJvdW5kKCk6IFBvaW50CiAgCS8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IHBvaW50IHdpdGggcm91bmRlZCBjb29yZGluYXRlcy4KICAJcm91bmQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLmNsb25lKCkuX3JvdW5kKCk7CiAgCX0sCgogIAlfcm91bmQ6IGZ1bmN0aW9uICgpIHsKICAJCXRoaXMueCA9IE1hdGgucm91bmQodGhpcy54KTsKICAJCXRoaXMueSA9IE1hdGgucm91bmQodGhpcy55KTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBmbG9vcigpOiBQb2ludAogIAkvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgY3VycmVudCBwb2ludCB3aXRoIGZsb29yZWQgY29vcmRpbmF0ZXMgKHJvdW5kZWQgZG93bikuCiAgCWZsb29yOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5jbG9uZSgpLl9mbG9vcigpOwogIAl9LAoKICAJX2Zsb29yOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLnggPSBNYXRoLmZsb29yKHRoaXMueCk7CiAgCQl0aGlzLnkgPSBNYXRoLmZsb29yKHRoaXMueSk7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgY2VpbCgpOiBQb2ludAogIAkvLyBSZXR1cm5zIGEgY29weSBvZiB0aGUgY3VycmVudCBwb2ludCB3aXRoIGNlaWxlZCBjb29yZGluYXRlcyAocm91bmRlZCB1cCkuCiAgCWNlaWw6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLmNsb25lKCkuX2NlaWwoKTsKICAJfSwKCiAgCV9jZWlsOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLnggPSBNYXRoLmNlaWwodGhpcy54KTsKICAJCXRoaXMueSA9IE1hdGguY2VpbCh0aGlzLnkpOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHRydW5jKCk6IFBvaW50CiAgCS8vIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IHBvaW50IHdpdGggdHJ1bmNhdGVkIGNvb3JkaW5hdGVzIChyb3VuZGVkIHRvd2FyZHMgemVybykuCiAgCXRydW5jOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5jbG9uZSgpLl90cnVuYygpOwogIAl9LAoKICAJX3RydW5jOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLnggPSB0cnVuYyh0aGlzLngpOwogIAkJdGhpcy55ID0gdHJ1bmModGhpcy55KTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBkaXN0YW5jZVRvKG90aGVyUG9pbnQ6IFBvaW50KTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIGNhcnRlc2lhbiBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCB0aGUgZ2l2ZW4gcG9pbnRzLgogIAlkaXN0YW5jZVRvOiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXBvaW50ID0gdG9Qb2ludChwb2ludCk7CgogIAkJdmFyIHggPSBwb2ludC54IC0gdGhpcy54LAogIAkJICAgIHkgPSBwb2ludC55IC0gdGhpcy55OwoKICAJCXJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGVxdWFscyhvdGhlclBvaW50OiBQb2ludCk6IEJvb2xlYW4KICAJLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHBvaW50IGhhcyB0aGUgc2FtZSBjb29yZGluYXRlcy4KICAJZXF1YWxzOiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXBvaW50ID0gdG9Qb2ludChwb2ludCk7CgogIAkJcmV0dXJuIHBvaW50LnggPT09IHRoaXMueCAmJgogIAkJICAgICAgIHBvaW50LnkgPT09IHRoaXMueTsKICAJfSwKCiAgCS8vIEBtZXRob2QgY29udGFpbnMob3RoZXJQb2ludDogUG9pbnQpOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIGlmIGJvdGggY29vcmRpbmF0ZXMgb2YgdGhlIGdpdmVuIHBvaW50IGFyZSBsZXNzIHRoYW4gdGhlIGNvcnJlc3BvbmRpbmcgY3VycmVudCBwb2ludCBjb29yZGluYXRlcyAoaW4gYWJzb2x1dGUgdmFsdWVzKS4KICAJY29udGFpbnM6IGZ1bmN0aW9uIChwb2ludCkgewogIAkJcG9pbnQgPSB0b1BvaW50KHBvaW50KTsKCiAgCQlyZXR1cm4gTWF0aC5hYnMocG9pbnQueCkgPD0gTWF0aC5hYnModGhpcy54KSAmJgogIAkJICAgICAgIE1hdGguYWJzKHBvaW50LnkpIDw9IE1hdGguYWJzKHRoaXMueSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHRvU3RyaW5nKCk6IFN0cmluZwogIAkvLyBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwb2ludCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgogIAl0b1N0cmluZzogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuICdQb2ludCgnICsKICAJCSAgICAgICAgZm9ybWF0TnVtKHRoaXMueCkgKyAnLCAnICsKICAJCSAgICAgICAgZm9ybWF0TnVtKHRoaXMueSkgKyAnKSc7CiAgCX0KICB9OwoKICAvLyBAZmFjdG9yeSBMLnBvaW50KHg6IE51bWJlciwgeTogTnVtYmVyLCByb3VuZD86IEJvb2xlYW4pCiAgLy8gQ3JlYXRlcyBhIFBvaW50IG9iamVjdCB3aXRoIHRoZSBnaXZlbiBgeGAgYW5kIGB5YCBjb29yZGluYXRlcy4gSWYgb3B0aW9uYWwgYHJvdW5kYCBpcyBzZXQgdG8gdHJ1ZSwgcm91bmRzIHRoZSBgeGAgYW5kIGB5YCB2YWx1ZXMuCgogIC8vIEBhbHRlcm5hdGl2ZQogIC8vIEBmYWN0b3J5IEwucG9pbnQoY29vcmRzOiBOdW1iZXJbXSkKICAvLyBFeHBlY3RzIGFuIGFycmF5IG9mIHRoZSBmb3JtIGBbeCwgeV1gIGluc3RlYWQuCgogIC8vIEBhbHRlcm5hdGl2ZQogIC8vIEBmYWN0b3J5IEwucG9pbnQoY29vcmRzOiBPYmplY3QpCiAgLy8gRXhwZWN0cyBhIHBsYWluIG9iamVjdCBvZiB0aGUgZm9ybSBge3g6IE51bWJlciwgeTogTnVtYmVyfWAgaW5zdGVhZC4KICBmdW5jdGlvbiB0b1BvaW50KHgsIHksIHJvdW5kKSB7CiAgCWlmICh4IGluc3RhbmNlb2YgUG9pbnQpIHsKICAJCXJldHVybiB4OwogIAl9CiAgCWlmIChpc0FycmF5KHgpKSB7CiAgCQlyZXR1cm4gbmV3IFBvaW50KHhbMF0sIHhbMV0pOwogIAl9CiAgCWlmICh4ID09PSB1bmRlZmluZWQgfHwgeCA9PT0gbnVsbCkgewogIAkJcmV0dXJuIHg7CiAgCX0KICAJaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiAneCcgaW4geCAmJiAneScgaW4geCkgewogIAkJcmV0dXJuIG5ldyBQb2ludCh4LngsIHgueSk7CiAgCX0KICAJcmV0dXJuIG5ldyBQb2ludCh4LCB5LCByb3VuZCk7CiAgfQoKICAvKgogICAqIEBjbGFzcyBCb3VuZHMKICAgKiBAYWthIEwuQm91bmRzCiAgICoKICAgKiBSZXByZXNlbnRzIGEgcmVjdGFuZ3VsYXIgYXJlYSBpbiBwaXhlbCBjb29yZGluYXRlcy4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIHZhciBwMSA9IEwucG9pbnQoMTAsIDEwKSwKICAgKiBwMiA9IEwucG9pbnQoNDAsIDYwKSwKICAgKiBib3VuZHMgPSBMLmJvdW5kcyhwMSwgcDIpOwogICAqIGBgYAogICAqCiAgICogQWxsIExlYWZsZXQgbWV0aG9kcyB0aGF0IGFjY2VwdCBgQm91bmRzYCBvYmplY3RzIGFsc28gYWNjZXB0IHRoZW0gaW4gYSBzaW1wbGUgQXJyYXkgZm9ybSAodW5sZXNzIG5vdGVkIG90aGVyd2lzZSksIHNvIHRoZSBib3VuZHMgZXhhbXBsZSBhYm92ZSBjYW4gYmUgcGFzc2VkIGxpa2UgdGhpczoKICAgKgogICAqIGBgYGpzCiAgICogb3RoZXJCb3VuZHMuaW50ZXJzZWN0cyhbWzEwLCAxMF0sIFs0MCwgNjBdXSk7CiAgICogYGBgCiAgICoKICAgKiBOb3RlIHRoYXQgYEJvdW5kc2AgZG9lcyBub3QgaW5oZXJpdCBmcm9tIExlYWZsZXQncyBgQ2xhc3NgIG9iamVjdCwKICAgKiB3aGljaCBtZWFucyBuZXcgY2xhc3NlcyBjYW4ndCBpbmhlcml0IGZyb20gaXQsIGFuZCBuZXcgbWV0aG9kcwogICAqIGNhbid0IGJlIGFkZGVkIHRvIGl0IHdpdGggdGhlIGBpbmNsdWRlYCBmdW5jdGlvbi4KICAgKi8KCiAgZnVuY3Rpb24gQm91bmRzKGEsIGIpIHsKICAJaWYgKCFhKSB7IHJldHVybjsgfQoKICAJdmFyIHBvaW50cyA9IGIgPyBbYSwgYl0gOiBhOwoKICAJZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJdGhpcy5leHRlbmQocG9pbnRzW2ldKTsKICAJfQogIH0KCiAgQm91bmRzLnByb3RvdHlwZSA9IHsKICAJLy8gQG1ldGhvZCBleHRlbmQocG9pbnQ6IFBvaW50KTogdGhpcwogIAkvLyBFeHRlbmRzIHRoZSBib3VuZHMgdG8gY29udGFpbiB0aGUgZ2l2ZW4gcG9pbnQuCiAgCWV4dGVuZDogZnVuY3Rpb24gKHBvaW50KSB7IC8vIChQb2ludCkKICAJCXBvaW50ID0gdG9Qb2ludChwb2ludCk7CgogIAkJLy8gQHByb3BlcnR5IG1pbjogUG9pbnQKICAJCS8vIFRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIHJlY3RhbmdsZS4KICAJCS8vIEBwcm9wZXJ0eSBtYXg6IFBvaW50CiAgCQkvLyBUaGUgYm90dG9tIHJpZ2h0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlLgogIAkJaWYgKCF0aGlzLm1pbiAmJiAhdGhpcy5tYXgpIHsKICAJCQl0aGlzLm1pbiA9IHBvaW50LmNsb25lKCk7CiAgCQkJdGhpcy5tYXggPSBwb2ludC5jbG9uZSgpOwogIAkJfSBlbHNlIHsKICAJCQl0aGlzLm1pbi54ID0gTWF0aC5taW4ocG9pbnQueCwgdGhpcy5taW4ueCk7CiAgCQkJdGhpcy5tYXgueCA9IE1hdGgubWF4KHBvaW50LngsIHRoaXMubWF4LngpOwogIAkJCXRoaXMubWluLnkgPSBNYXRoLm1pbihwb2ludC55LCB0aGlzLm1pbi55KTsKICAJCQl0aGlzLm1heC55ID0gTWF0aC5tYXgocG9pbnQueSwgdGhpcy5tYXgueSk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Q2VudGVyKHJvdW5kPzogQm9vbGVhbik6IFBvaW50CiAgCS8vIFJldHVybnMgdGhlIGNlbnRlciBwb2ludCBvZiB0aGUgYm91bmRzLgogIAlnZXRDZW50ZXI6IGZ1bmN0aW9uIChyb3VuZCkgewogIAkJcmV0dXJuIG5ldyBQb2ludCgKICAJCSAgICAgICAgKHRoaXMubWluLnggKyB0aGlzLm1heC54KSAvIDIsCiAgCQkgICAgICAgICh0aGlzLm1pbi55ICsgdGhpcy5tYXgueSkgLyAyLCByb3VuZCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldEJvdHRvbUxlZnQoKTogUG9pbnQKICAJLy8gUmV0dXJucyB0aGUgYm90dG9tLWxlZnQgcG9pbnQgb2YgdGhlIGJvdW5kcy4KICAJZ2V0Qm90dG9tTGVmdDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIG5ldyBQb2ludCh0aGlzLm1pbi54LCB0aGlzLm1heC55KTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0VG9wUmlnaHQoKTogUG9pbnQKICAJLy8gUmV0dXJucyB0aGUgdG9wLXJpZ2h0IHBvaW50IG9mIHRoZSBib3VuZHMuCiAgCWdldFRvcFJpZ2h0OiBmdW5jdGlvbiAoKSB7IC8vIC0+IFBvaW50CiAgCQlyZXR1cm4gbmV3IFBvaW50KHRoaXMubWF4LngsIHRoaXMubWluLnkpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRUb3BMZWZ0KCk6IFBvaW50CiAgCS8vIFJldHVybnMgdGhlIHRvcC1sZWZ0IHBvaW50IG9mIHRoZSBib3VuZHMgKGkuZS4gW2B0aGlzLm1pbmBdKCNib3VuZHMtbWluKSkuCiAgCWdldFRvcExlZnQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLm1pbjsgLy8gbGVmdCwgdG9wCiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldEJvdHRvbVJpZ2h0KCk6IFBvaW50CiAgCS8vIFJldHVybnMgdGhlIGJvdHRvbS1yaWdodCBwb2ludCBvZiB0aGUgYm91bmRzIChpLmUuIFtgdGhpcy5tYXhgXSgjYm91bmRzLW1heCkpLgogIAlnZXRCb3R0b21SaWdodDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMubWF4OyAvLyByaWdodCwgYm90dG9tCiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldFNpemUoKTogUG9pbnQKICAJLy8gUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gYm91bmRzCiAgCWdldFNpemU6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLm1heC5zdWJ0cmFjdCh0aGlzLm1pbik7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGNvbnRhaW5zKG90aGVyQm91bmRzOiBCb3VuZHMpOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIGlmIHRoZSByZWN0YW5nbGUgY29udGFpbnMgdGhlIGdpdmVuIG9uZS4KICAJLy8gQGFsdGVybmF0aXZlCiAgCS8vIEBtZXRob2QgY29udGFpbnMocG9pbnQ6IFBvaW50KTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVjdGFuZ2xlIGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludC4KICAJY29udGFpbnM6IGZ1bmN0aW9uIChvYmopIHsKICAJCXZhciBtaW4sIG1heDsKCiAgCQlpZiAodHlwZW9mIG9ialswXSA9PT0gJ251bWJlcicgfHwgb2JqIGluc3RhbmNlb2YgUG9pbnQpIHsKICAJCQlvYmogPSB0b1BvaW50KG9iaik7CiAgCQl9IGVsc2UgewogIAkJCW9iaiA9IHRvQm91bmRzKG9iaik7CiAgCQl9CgogIAkJaWYgKG9iaiBpbnN0YW5jZW9mIEJvdW5kcykgewogIAkJCW1pbiA9IG9iai5taW47CiAgCQkJbWF4ID0gb2JqLm1heDsKICAJCX0gZWxzZSB7CiAgCQkJbWluID0gbWF4ID0gb2JqOwogIAkJfQoKICAJCXJldHVybiAobWluLnggPj0gdGhpcy5taW4ueCkgJiYKICAJCSAgICAgICAobWF4LnggPD0gdGhpcy5tYXgueCkgJiYKICAJCSAgICAgICAobWluLnkgPj0gdGhpcy5taW4ueSkgJiYKICAJCSAgICAgICAobWF4LnkgPD0gdGhpcy5tYXgueSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGludGVyc2VjdHMob3RoZXJCb3VuZHM6IEJvdW5kcyk6IEJvb2xlYW4KICAJLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHJlY3RhbmdsZSBpbnRlcnNlY3RzIHRoZSBnaXZlbiBib3VuZHMuIFR3byBib3VuZHMKICAJLy8gaW50ZXJzZWN0IGlmIHRoZXkgaGF2ZSBhdCBsZWFzdCBvbmUgcG9pbnQgaW4gY29tbW9uLgogIAlpbnRlcnNlY3RzOiBmdW5jdGlvbiAoYm91bmRzKSB7IC8vIChCb3VuZHMpIC0+IEJvb2xlYW4KICAJCWJvdW5kcyA9IHRvQm91bmRzKGJvdW5kcyk7CgogIAkJdmFyIG1pbiA9IHRoaXMubWluLAogIAkJICAgIG1heCA9IHRoaXMubWF4LAogIAkJICAgIG1pbjIgPSBib3VuZHMubWluLAogIAkJICAgIG1heDIgPSBib3VuZHMubWF4LAogIAkJICAgIHhJbnRlcnNlY3RzID0gKG1heDIueCA+PSBtaW4ueCkgJiYgKG1pbjIueCA8PSBtYXgueCksCiAgCQkgICAgeUludGVyc2VjdHMgPSAobWF4Mi55ID49IG1pbi55KSAmJiAobWluMi55IDw9IG1heC55KTsKCiAgCQlyZXR1cm4geEludGVyc2VjdHMgJiYgeUludGVyc2VjdHM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIG92ZXJsYXBzKG90aGVyQm91bmRzOiBCb3VuZHMpOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIGlmIHRoZSByZWN0YW5nbGUgb3ZlcmxhcHMgdGhlIGdpdmVuIGJvdW5kcy4gVHdvIGJvdW5kcwogIAkvLyBvdmVybGFwIGlmIHRoZWlyIGludGVyc2VjdGlvbiBpcyBhbiBhcmVhLgogIAlvdmVybGFwczogZnVuY3Rpb24gKGJvdW5kcykgeyAvLyAoQm91bmRzKSAtPiBCb29sZWFuCiAgCQlib3VuZHMgPSB0b0JvdW5kcyhib3VuZHMpOwoKICAJCXZhciBtaW4gPSB0aGlzLm1pbiwKICAJCSAgICBtYXggPSB0aGlzLm1heCwKICAJCSAgICBtaW4yID0gYm91bmRzLm1pbiwKICAJCSAgICBtYXgyID0gYm91bmRzLm1heCwKICAJCSAgICB4T3ZlcmxhcHMgPSAobWF4Mi54ID4gbWluLngpICYmIChtaW4yLnggPCBtYXgueCksCiAgCQkgICAgeU92ZXJsYXBzID0gKG1heDIueSA+IG1pbi55KSAmJiAobWluMi55IDwgbWF4LnkpOwoKICAJCXJldHVybiB4T3ZlcmxhcHMgJiYgeU92ZXJsYXBzOwogIAl9LAoKICAJaXNWYWxpZDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuICEhKHRoaXMubWluICYmIHRoaXMubWF4KTsKICAJfQogIH07CgoKICAvLyBAZmFjdG9yeSBMLmJvdW5kcyhjb3JuZXIxOiBQb2ludCwgY29ybmVyMjogUG9pbnQpCiAgLy8gQ3JlYXRlcyBhIEJvdW5kcyBvYmplY3QgZnJvbSB0d28gY29ybmVycyBjb29yZGluYXRlIHBhaXJzLgogIC8vIEBhbHRlcm5hdGl2ZQogIC8vIEBmYWN0b3J5IEwuYm91bmRzKHBvaW50czogUG9pbnRbXSkKICAvLyBDcmVhdGVzIGEgQm91bmRzIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBhcnJheSBvZiBwb2ludHMuCiAgZnVuY3Rpb24gdG9Cb3VuZHMoYSwgYikgewogIAlpZiAoIWEgfHwgYSBpbnN0YW5jZW9mIEJvdW5kcykgewogIAkJcmV0dXJuIGE7CiAgCX0KICAJcmV0dXJuIG5ldyBCb3VuZHMoYSwgYik7CiAgfQoKICAvKgogICAqIEBjbGFzcyBMYXRMbmdCb3VuZHMKICAgKiBAYWthIEwuTGF0TG5nQm91bmRzCiAgICoKICAgKiBSZXByZXNlbnRzIGEgcmVjdGFuZ3VsYXIgZ2VvZ3JhcGhpY2FsIGFyZWEgb24gYSBtYXAuCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogYGBganMKICAgKiB2YXIgY29ybmVyMSA9IEwubGF0TG5nKDQwLjcxMiwgLTc0LjIyNyksCiAgICogY29ybmVyMiA9IEwubGF0TG5nKDQwLjc3NCwgLTc0LjEyNSksCiAgICogYm91bmRzID0gTC5sYXRMbmdCb3VuZHMoY29ybmVyMSwgY29ybmVyMik7CiAgICogYGBgCiAgICoKICAgKiBBbGwgTGVhZmxldCBtZXRob2RzIHRoYXQgYWNjZXB0IExhdExuZ0JvdW5kcyBvYmplY3RzIGFsc28gYWNjZXB0IHRoZW0gaW4gYSBzaW1wbGUgQXJyYXkgZm9ybSAodW5sZXNzIG5vdGVkIG90aGVyd2lzZSksIHNvIHRoZSBib3VuZHMgZXhhbXBsZSBhYm92ZSBjYW4gYmUgcGFzc2VkIGxpa2UgdGhpczoKICAgKgogICAqIGBgYGpzCiAgICogbWFwLmZpdEJvdW5kcyhbCiAgICogCVs0MC43MTIsIC03NC4yMjddLAogICAqIAlbNDAuNzc0LCAtNzQuMTI1XQogICAqIF0pOwogICAqIGBgYAogICAqCiAgICogQ2F1dGlvbjogaWYgdGhlIGFyZWEgY3Jvc3NlcyB0aGUgYW50aW1lcmlkaWFuIChvZnRlbiBjb25mdXNlZCB3aXRoIHRoZSBJbnRlcm5hdGlvbmFsIERhdGUgTGluZSksIHlvdSBtdXN0IHNwZWNpZnkgY29ybmVycyBfb3V0c2lkZV8gdGhlIFstMTgwLCAxODBdIGRlZ3JlZXMgbG9uZ2l0dWRlIHJhbmdlLgogICAqCiAgICogTm90ZSB0aGF0IGBMYXRMbmdCb3VuZHNgIGRvZXMgbm90IGluaGVyaXQgZnJvbSBMZWFmbGV0J3MgYENsYXNzYCBvYmplY3QsCiAgICogd2hpY2ggbWVhbnMgbmV3IGNsYXNzZXMgY2FuJ3QgaW5oZXJpdCBmcm9tIGl0LCBhbmQgbmV3IG1ldGhvZHMKICAgKiBjYW4ndCBiZSBhZGRlZCB0byBpdCB3aXRoIHRoZSBgaW5jbHVkZWAgZnVuY3Rpb24uCiAgICovCgogIGZ1bmN0aW9uIExhdExuZ0JvdW5kcyhjb3JuZXIxLCBjb3JuZXIyKSB7IC8vIChMYXRMbmcsIExhdExuZykgb3IgKExhdExuZ1tdKQogIAlpZiAoIWNvcm5lcjEpIHsgcmV0dXJuOyB9CgogIAl2YXIgbGF0bG5ncyA9IGNvcm5lcjIgPyBbY29ybmVyMSwgY29ybmVyMl0gOiBjb3JuZXIxOwoKICAJZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxhdGxuZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCXRoaXMuZXh0ZW5kKGxhdGxuZ3NbaV0pOwogIAl9CiAgfQoKICBMYXRMbmdCb3VuZHMucHJvdG90eXBlID0gewoKICAJLy8gQG1ldGhvZCBleHRlbmQobGF0bG5nOiBMYXRMbmcpOiB0aGlzCiAgCS8vIEV4dGVuZCB0aGUgYm91bmRzIHRvIGNvbnRhaW4gdGhlIGdpdmVuIHBvaW50CgogIAkvLyBAYWx0ZXJuYXRpdmUKICAJLy8gQG1ldGhvZCBleHRlbmQob3RoZXJCb3VuZHM6IExhdExuZ0JvdW5kcyk6IHRoaXMKICAJLy8gRXh0ZW5kIHRoZSBib3VuZHMgdG8gY29udGFpbiB0aGUgZ2l2ZW4gYm91bmRzCiAgCWV4dGVuZDogZnVuY3Rpb24gKG9iaikgewogIAkJdmFyIHN3ID0gdGhpcy5fc291dGhXZXN0LAogIAkJICAgIG5lID0gdGhpcy5fbm9ydGhFYXN0LAogIAkJICAgIHN3MiwgbmUyOwoKICAJCWlmIChvYmogaW5zdGFuY2VvZiBMYXRMbmcpIHsKICAJCQlzdzIgPSBvYmo7CiAgCQkJbmUyID0gb2JqOwoKICAJCX0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgTGF0TG5nQm91bmRzKSB7CiAgCQkJc3cyID0gb2JqLl9zb3V0aFdlc3Q7CiAgCQkJbmUyID0gb2JqLl9ub3J0aEVhc3Q7CgogIAkJCWlmICghc3cyIHx8ICFuZTIpIHsgcmV0dXJuIHRoaXM7IH0KCiAgCQl9IGVsc2UgewogIAkJCXJldHVybiBvYmogPyB0aGlzLmV4dGVuZCh0b0xhdExuZyhvYmopIHx8IHRvTGF0TG5nQm91bmRzKG9iaikpIDogdGhpczsKICAJCX0KCiAgCQlpZiAoIXN3ICYmICFuZSkgewogIAkJCXRoaXMuX3NvdXRoV2VzdCA9IG5ldyBMYXRMbmcoc3cyLmxhdCwgc3cyLmxuZyk7CiAgCQkJdGhpcy5fbm9ydGhFYXN0ID0gbmV3IExhdExuZyhuZTIubGF0LCBuZTIubG5nKTsKICAJCX0gZWxzZSB7CiAgCQkJc3cubGF0ID0gTWF0aC5taW4oc3cyLmxhdCwgc3cubGF0KTsKICAJCQlzdy5sbmcgPSBNYXRoLm1pbihzdzIubG5nLCBzdy5sbmcpOwogIAkJCW5lLmxhdCA9IE1hdGgubWF4KG5lMi5sYXQsIG5lLmxhdCk7CiAgCQkJbmUubG5nID0gTWF0aC5tYXgobmUyLmxuZywgbmUubG5nKTsKICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgcGFkKGJ1ZmZlclJhdGlvOiBOdW1iZXIpOiBMYXRMbmdCb3VuZHMKICAJLy8gUmV0dXJucyBib3VuZHMgY3JlYXRlZCBieSBleHRlbmRpbmcgb3IgcmV0cmFjdGluZyB0aGUgY3VycmVudCBib3VuZHMgYnkgYSBnaXZlbiByYXRpbyBpbiBlYWNoIGRpcmVjdGlvbi4KICAJLy8gRm9yIGV4YW1wbGUsIGEgcmF0aW8gb2YgMC41IGV4dGVuZHMgdGhlIGJvdW5kcyBieSA1MCUgaW4gZWFjaCBkaXJlY3Rpb24uCiAgCS8vIE5lZ2F0aXZlIHZhbHVlcyB3aWxsIHJldHJhY3QgdGhlIGJvdW5kcy4KICAJcGFkOiBmdW5jdGlvbiAoYnVmZmVyUmF0aW8pIHsKICAJCXZhciBzdyA9IHRoaXMuX3NvdXRoV2VzdCwKICAJCSAgICBuZSA9IHRoaXMuX25vcnRoRWFzdCwKICAJCSAgICBoZWlnaHRCdWZmZXIgPSBNYXRoLmFicyhzdy5sYXQgLSBuZS5sYXQpICogYnVmZmVyUmF0aW8sCiAgCQkgICAgd2lkdGhCdWZmZXIgPSBNYXRoLmFicyhzdy5sbmcgLSBuZS5sbmcpICogYnVmZmVyUmF0aW87CgogIAkJcmV0dXJuIG5ldyBMYXRMbmdCb3VuZHMoCiAgCQkgICAgICAgIG5ldyBMYXRMbmcoc3cubGF0IC0gaGVpZ2h0QnVmZmVyLCBzdy5sbmcgLSB3aWR0aEJ1ZmZlciksCiAgCQkgICAgICAgIG5ldyBMYXRMbmcobmUubGF0ICsgaGVpZ2h0QnVmZmVyLCBuZS5sbmcgKyB3aWR0aEJ1ZmZlcikpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRDZW50ZXIoKTogTGF0TG5nCiAgCS8vIFJldHVybnMgdGhlIGNlbnRlciBwb2ludCBvZiB0aGUgYm91bmRzLgogIAlnZXRDZW50ZXI6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiBuZXcgTGF0TG5nKAogIAkJICAgICAgICAodGhpcy5fc291dGhXZXN0LmxhdCArIHRoaXMuX25vcnRoRWFzdC5sYXQpIC8gMiwKICAJCSAgICAgICAgKHRoaXMuX3NvdXRoV2VzdC5sbmcgKyB0aGlzLl9ub3J0aEVhc3QubG5nKSAvIDIpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRTb3V0aFdlc3QoKTogTGF0TG5nCiAgCS8vIFJldHVybnMgdGhlIHNvdXRoLXdlc3QgcG9pbnQgb2YgdGhlIGJvdW5kcy4KICAJZ2V0U291dGhXZXN0OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fc291dGhXZXN0OwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXROb3J0aEVhc3QoKTogTGF0TG5nCiAgCS8vIFJldHVybnMgdGhlIG5vcnRoLWVhc3QgcG9pbnQgb2YgdGhlIGJvdW5kcy4KICAJZ2V0Tm9ydGhFYXN0OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbm9ydGhFYXN0OwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXROb3J0aFdlc3QoKTogTGF0TG5nCiAgCS8vIFJldHVybnMgdGhlIG5vcnRoLXdlc3QgcG9pbnQgb2YgdGhlIGJvdW5kcy4KICAJZ2V0Tm9ydGhXZXN0OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gbmV3IExhdExuZyh0aGlzLmdldE5vcnRoKCksIHRoaXMuZ2V0V2VzdCgpKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0U291dGhFYXN0KCk6IExhdExuZwogIAkvLyBSZXR1cm5zIHRoZSBzb3V0aC1lYXN0IHBvaW50IG9mIHRoZSBib3VuZHMuCiAgCWdldFNvdXRoRWFzdDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIG5ldyBMYXRMbmcodGhpcy5nZXRTb3V0aCgpLCB0aGlzLmdldEVhc3QoKSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldFdlc3QoKTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIHdlc3QgbG9uZ2l0dWRlIG9mIHRoZSBib3VuZHMKICAJZ2V0V2VzdDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX3NvdXRoV2VzdC5sbmc7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldFNvdXRoKCk6IE51bWJlcgogIAkvLyBSZXR1cm5zIHRoZSBzb3V0aCBsYXRpdHVkZSBvZiB0aGUgYm91bmRzCiAgCWdldFNvdXRoOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fc291dGhXZXN0LmxhdDsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0RWFzdCgpOiBOdW1iZXIKICAJLy8gUmV0dXJucyB0aGUgZWFzdCBsb25naXR1ZGUgb2YgdGhlIGJvdW5kcwogIAlnZXRFYXN0OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbm9ydGhFYXN0LmxuZzsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Tm9ydGgoKTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIG5vcnRoIGxhdGl0dWRlIG9mIHRoZSBib3VuZHMKICAJZ2V0Tm9ydGg6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9ub3J0aEVhc3QubGF0OwogIAl9LAoKICAJLy8gQG1ldGhvZCBjb250YWlucyhvdGhlckJvdW5kczogTGF0TG5nQm91bmRzKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVjdGFuZ2xlIGNvbnRhaW5zIHRoZSBnaXZlbiBvbmUuCgogIAkvLyBAYWx0ZXJuYXRpdmUKICAJLy8gQG1ldGhvZCBjb250YWlucyAobGF0bG5nOiBMYXRMbmcpOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIGlmIHRoZSByZWN0YW5nbGUgY29udGFpbnMgdGhlIGdpdmVuIHBvaW50LgogIAljb250YWluczogZnVuY3Rpb24gKG9iaikgeyAvLyAoTGF0TG5nQm91bmRzKSBvciAoTGF0TG5nKSAtPiBCb29sZWFuCiAgCQlpZiAodHlwZW9mIG9ialswXSA9PT0gJ251bWJlcicgfHwgb2JqIGluc3RhbmNlb2YgTGF0TG5nIHx8ICdsYXQnIGluIG9iaikgewogIAkJCW9iaiA9IHRvTGF0TG5nKG9iaik7CiAgCQl9IGVsc2UgewogIAkJCW9iaiA9IHRvTGF0TG5nQm91bmRzKG9iaik7CiAgCQl9CgogIAkJdmFyIHN3ID0gdGhpcy5fc291dGhXZXN0LAogIAkJICAgIG5lID0gdGhpcy5fbm9ydGhFYXN0LAogIAkJICAgIHN3MiwgbmUyOwoKICAJCWlmIChvYmogaW5zdGFuY2VvZiBMYXRMbmdCb3VuZHMpIHsKICAJCQlzdzIgPSBvYmouZ2V0U291dGhXZXN0KCk7CiAgCQkJbmUyID0gb2JqLmdldE5vcnRoRWFzdCgpOwogIAkJfSBlbHNlIHsKICAJCQlzdzIgPSBuZTIgPSBvYmo7CiAgCQl9CgogIAkJcmV0dXJuIChzdzIubGF0ID49IHN3LmxhdCkgJiYgKG5lMi5sYXQgPD0gbmUubGF0KSAmJgogIAkJICAgICAgIChzdzIubG5nID49IHN3LmxuZykgJiYgKG5lMi5sbmcgPD0gbmUubG5nKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgaW50ZXJzZWN0cyhvdGhlckJvdW5kczogTGF0TG5nQm91bmRzKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVjdGFuZ2xlIGludGVyc2VjdHMgdGhlIGdpdmVuIGJvdW5kcy4gVHdvIGJvdW5kcyBpbnRlcnNlY3QgaWYgdGhleSBoYXZlIGF0IGxlYXN0IG9uZSBwb2ludCBpbiBjb21tb24uCiAgCWludGVyc2VjdHM6IGZ1bmN0aW9uIChib3VuZHMpIHsKICAJCWJvdW5kcyA9IHRvTGF0TG5nQm91bmRzKGJvdW5kcyk7CgogIAkJdmFyIHN3ID0gdGhpcy5fc291dGhXZXN0LAogIAkJICAgIG5lID0gdGhpcy5fbm9ydGhFYXN0LAogIAkJICAgIHN3MiA9IGJvdW5kcy5nZXRTb3V0aFdlc3QoKSwKICAJCSAgICBuZTIgPSBib3VuZHMuZ2V0Tm9ydGhFYXN0KCksCgogIAkJICAgIGxhdEludGVyc2VjdHMgPSAobmUyLmxhdCA+PSBzdy5sYXQpICYmIChzdzIubGF0IDw9IG5lLmxhdCksCiAgCQkgICAgbG5nSW50ZXJzZWN0cyA9IChuZTIubG5nID49IHN3LmxuZykgJiYgKHN3Mi5sbmcgPD0gbmUubG5nKTsKCiAgCQlyZXR1cm4gbGF0SW50ZXJzZWN0cyAmJiBsbmdJbnRlcnNlY3RzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBvdmVybGFwcyhvdGhlckJvdW5kczogTGF0TG5nQm91bmRzKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVjdGFuZ2xlIG92ZXJsYXBzIHRoZSBnaXZlbiBib3VuZHMuIFR3byBib3VuZHMgb3ZlcmxhcCBpZiB0aGVpciBpbnRlcnNlY3Rpb24gaXMgYW4gYXJlYS4KICAJb3ZlcmxhcHM6IGZ1bmN0aW9uIChib3VuZHMpIHsKICAJCWJvdW5kcyA9IHRvTGF0TG5nQm91bmRzKGJvdW5kcyk7CgogIAkJdmFyIHN3ID0gdGhpcy5fc291dGhXZXN0LAogIAkJICAgIG5lID0gdGhpcy5fbm9ydGhFYXN0LAogIAkJICAgIHN3MiA9IGJvdW5kcy5nZXRTb3V0aFdlc3QoKSwKICAJCSAgICBuZTIgPSBib3VuZHMuZ2V0Tm9ydGhFYXN0KCksCgogIAkJICAgIGxhdE92ZXJsYXBzID0gKG5lMi5sYXQgPiBzdy5sYXQpICYmIChzdzIubGF0IDwgbmUubGF0KSwKICAJCSAgICBsbmdPdmVybGFwcyA9IChuZTIubG5nID4gc3cubG5nKSAmJiAoc3cyLmxuZyA8IG5lLmxuZyk7CgogIAkJcmV0dXJuIGxhdE92ZXJsYXBzICYmIGxuZ092ZXJsYXBzOwogIAl9LAoKICAJLy8gQG1ldGhvZCB0b0JCb3hTdHJpbmcoKTogU3RyaW5nCiAgCS8vIFJldHVybnMgYSBzdHJpbmcgd2l0aCBib3VuZGluZyBib3ggY29vcmRpbmF0ZXMgaW4gYSAnc291dGh3ZXN0X2xuZyxzb3V0aHdlc3RfbGF0LG5vcnRoZWFzdF9sbmcsbm9ydGhlYXN0X2xhdCcgZm9ybWF0LiBVc2VmdWwgZm9yIHNlbmRpbmcgcmVxdWVzdHMgdG8gd2ViIHNlcnZpY2VzIHRoYXQgcmV0dXJuIGdlbyBkYXRhLgogIAl0b0JCb3hTdHJpbmc6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiBbdGhpcy5nZXRXZXN0KCksIHRoaXMuZ2V0U291dGgoKSwgdGhpcy5nZXRFYXN0KCksIHRoaXMuZ2V0Tm9ydGgoKV0uam9pbignLCcpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBlcXVhbHMob3RoZXJCb3VuZHM6IExhdExuZ0JvdW5kcywgbWF4TWFyZ2luPzogTnVtYmVyKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVjdGFuZ2xlIGlzIGVxdWl2YWxlbnQgKHdpdGhpbiBhIHNtYWxsIG1hcmdpbiBvZiBlcnJvcikgdG8gdGhlIGdpdmVuIGJvdW5kcy4gVGhlIG1hcmdpbiBvZiBlcnJvciBjYW4gYmUgb3ZlcnJpZGRlbiBieSBzZXR0aW5nIGBtYXhNYXJnaW5gIHRvIGEgc21hbGwgbnVtYmVyLgogIAllcXVhbHM6IGZ1bmN0aW9uIChib3VuZHMsIG1heE1hcmdpbikgewogIAkJaWYgKCFib3VuZHMpIHsgcmV0dXJuIGZhbHNlOyB9CgogIAkJYm91bmRzID0gdG9MYXRMbmdCb3VuZHMoYm91bmRzKTsKCiAgCQlyZXR1cm4gdGhpcy5fc291dGhXZXN0LmVxdWFscyhib3VuZHMuZ2V0U291dGhXZXN0KCksIG1heE1hcmdpbikgJiYKICAJCSAgICAgICB0aGlzLl9ub3J0aEVhc3QuZXF1YWxzKGJvdW5kcy5nZXROb3J0aEVhc3QoKSwgbWF4TWFyZ2luKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgaXNWYWxpZCgpOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIGlmIHRoZSBib3VuZHMgYXJlIHByb3Blcmx5IGluaXRpYWxpemVkLgogIAlpc1ZhbGlkOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gISEodGhpcy5fc291dGhXZXN0ICYmIHRoaXMuX25vcnRoRWFzdCk7CiAgCX0KICB9OwoKICAvLyBUT0RPIEludGVybmF0aW9uYWwgZGF0ZSBsaW5lPwoKICAvLyBAZmFjdG9yeSBMLmxhdExuZ0JvdW5kcyhjb3JuZXIxOiBMYXRMbmcsIGNvcm5lcjI6IExhdExuZykKICAvLyBDcmVhdGVzIGEgYExhdExuZ0JvdW5kc2Agb2JqZWN0IGJ5IGRlZmluaW5nIHR3byBkaWFnb25hbGx5IG9wcG9zaXRlIGNvcm5lcnMgb2YgdGhlIHJlY3RhbmdsZS4KCiAgLy8gQGFsdGVybmF0aXZlCiAgLy8gQGZhY3RvcnkgTC5sYXRMbmdCb3VuZHMobGF0bG5nczogTGF0TG5nW10pCiAgLy8gQ3JlYXRlcyBhIGBMYXRMbmdCb3VuZHNgIG9iamVjdCBkZWZpbmVkIGJ5IHRoZSBnZW9ncmFwaGljYWwgcG9pbnRzIGl0IGNvbnRhaW5zLiBWZXJ5IHVzZWZ1bCBmb3Igem9vbWluZyB0aGUgbWFwIHRvIGZpdCBhIHBhcnRpY3VsYXIgc2V0IG9mIGxvY2F0aW9ucyB3aXRoIFtgZml0Qm91bmRzYF0oI21hcC1maXRib3VuZHMpLgogIGZ1bmN0aW9uIHRvTGF0TG5nQm91bmRzKGEsIGIpIHsKICAJaWYgKGEgaW5zdGFuY2VvZiBMYXRMbmdCb3VuZHMpIHsKICAJCXJldHVybiBhOwogIAl9CiAgCXJldHVybiBuZXcgTGF0TG5nQm91bmRzKGEsIGIpOwogIH0KCiAgLyogQGNsYXNzIExhdExuZwogICAqIEBha2EgTC5MYXRMbmcKICAgKgogICAqIFJlcHJlc2VudHMgYSBnZW9ncmFwaGljYWwgcG9pbnQgd2l0aCBhIGNlcnRhaW4gbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGAKICAgKiB2YXIgbGF0bG5nID0gTC5sYXRMbmcoNTAuNSwgMzAuNSk7CiAgICogYGBgCiAgICoKICAgKiBBbGwgTGVhZmxldCBtZXRob2RzIHRoYXQgYWNjZXB0IExhdExuZyBvYmplY3RzIGFsc28gYWNjZXB0IHRoZW0gaW4gYSBzaW1wbGUgQXJyYXkgZm9ybSBhbmQgc2ltcGxlIG9iamVjdCBmb3JtICh1bmxlc3Mgbm90ZWQgb3RoZXJ3aXNlKSwgc28gdGhlc2UgbGluZXMgYXJlIGVxdWl2YWxlbnQ6CiAgICoKICAgKiBgYGAKICAgKiBtYXAucGFuVG8oWzUwLCAzMF0pOwogICAqIG1hcC5wYW5Ubyh7bG9uOiAzMCwgbGF0OiA1MH0pOwogICAqIG1hcC5wYW5Ubyh7bGF0OiA1MCwgbG5nOiAzMH0pOwogICAqIG1hcC5wYW5UbyhMLmxhdExuZyg1MCwgMzApKTsKICAgKiBgYGAKICAgKgogICAqIE5vdGUgdGhhdCBgTGF0TG5nYCBkb2VzIG5vdCBpbmhlcml0IGZyb20gTGVhZmxldCdzIGBDbGFzc2Agb2JqZWN0LAogICAqIHdoaWNoIG1lYW5zIG5ldyBjbGFzc2VzIGNhbid0IGluaGVyaXQgZnJvbSBpdCwgYW5kIG5ldyBtZXRob2RzCiAgICogY2FuJ3QgYmUgYWRkZWQgdG8gaXQgd2l0aCB0aGUgYGluY2x1ZGVgIGZ1bmN0aW9uLgogICAqLwoKICBmdW5jdGlvbiBMYXRMbmcobGF0LCBsbmcsIGFsdCkgewogIAlpZiAoaXNOYU4obGF0KSB8fCBpc05hTihsbmcpKSB7CiAgCQl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTGF0TG5nIG9iamVjdDogKCcgKyBsYXQgKyAnLCAnICsgbG5nICsgJyknKTsKICAJfQoKICAJLy8gQHByb3BlcnR5IGxhdDogTnVtYmVyCiAgCS8vIExhdGl0dWRlIGluIGRlZ3JlZXMKICAJdGhpcy5sYXQgPSArbGF0OwoKICAJLy8gQHByb3BlcnR5IGxuZzogTnVtYmVyCiAgCS8vIExvbmdpdHVkZSBpbiBkZWdyZWVzCiAgCXRoaXMubG5nID0gK2xuZzsKCiAgCS8vIEBwcm9wZXJ0eSBhbHQ6IE51bWJlcgogIAkvLyBBbHRpdHVkZSBpbiBtZXRlcnMgKG9wdGlvbmFsKQogIAlpZiAoYWx0ICE9PSB1bmRlZmluZWQpIHsKICAJCXRoaXMuYWx0ID0gK2FsdDsKICAJfQogIH0KCiAgTGF0TG5nLnByb3RvdHlwZSA9IHsKICAJLy8gQG1ldGhvZCBlcXVhbHMob3RoZXJMYXRMbmc6IExhdExuZywgbWF4TWFyZ2luPzogTnVtYmVyKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYExhdExuZ2AgcG9pbnQgaXMgYXQgdGhlIHNhbWUgcG9zaXRpb24gKHdpdGhpbiBhIHNtYWxsIG1hcmdpbiBvZiBlcnJvcikuIFRoZSBtYXJnaW4gb2YgZXJyb3IgY2FuIGJlIG92ZXJyaWRkZW4gYnkgc2V0dGluZyBgbWF4TWFyZ2luYCB0byBhIHNtYWxsIG51bWJlci4KICAJZXF1YWxzOiBmdW5jdGlvbiAob2JqLCBtYXhNYXJnaW4pIHsKICAJCWlmICghb2JqKSB7IHJldHVybiBmYWxzZTsgfQoKICAJCW9iaiA9IHRvTGF0TG5nKG9iaik7CgogIAkJdmFyIG1hcmdpbiA9IE1hdGgubWF4KAogIAkJICAgICAgICBNYXRoLmFicyh0aGlzLmxhdCAtIG9iai5sYXQpLAogIAkJICAgICAgICBNYXRoLmFicyh0aGlzLmxuZyAtIG9iai5sbmcpKTsKCiAgCQlyZXR1cm4gbWFyZ2luIDw9IChtYXhNYXJnaW4gPT09IHVuZGVmaW5lZCA/IDEuMEUtOSA6IG1heE1hcmdpbik7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHRvU3RyaW5nKCk6IFN0cmluZwogIAkvLyBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwb2ludCAoZm9yIGRlYnVnZ2luZyBwdXJwb3NlcykuCiAgCXRvU3RyaW5nOiBmdW5jdGlvbiAocHJlY2lzaW9uKSB7CiAgCQlyZXR1cm4gJ0xhdExuZygnICsKICAJCSAgICAgICAgZm9ybWF0TnVtKHRoaXMubGF0LCBwcmVjaXNpb24pICsgJywgJyArCiAgCQkgICAgICAgIGZvcm1hdE51bSh0aGlzLmxuZywgcHJlY2lzaW9uKSArICcpJzsKICAJfSwKCiAgCS8vIEBtZXRob2QgZGlzdGFuY2VUbyhvdGhlckxhdExuZzogTGF0TG5nKTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIGRpc3RhbmNlIChpbiBtZXRlcnMpIHRvIHRoZSBnaXZlbiBgTGF0TG5nYCBjYWxjdWxhdGVkIHVzaW5nIHRoZSBbU3BoZXJpY2FsIExhdyBvZiBDb3NpbmVzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TcGhlcmljYWxfbGF3X29mX2Nvc2luZXMpLgogIAlkaXN0YW5jZVRvOiBmdW5jdGlvbiAob3RoZXIpIHsKICAJCXJldHVybiBFYXJ0aC5kaXN0YW5jZSh0aGlzLCB0b0xhdExuZyhvdGhlcikpOwogIAl9LAoKICAJLy8gQG1ldGhvZCB3cmFwKCk6IExhdExuZwogIAkvLyBSZXR1cm5zIGEgbmV3IGBMYXRMbmdgIG9iamVjdCB3aXRoIHRoZSBsb25naXR1ZGUgd3JhcHBlZCBzbyBpdCdzIGFsd2F5cyBiZXR3ZWVuIC0xODAgYW5kICsxODAgZGVncmVlcy4KICAJd3JhcDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIEVhcnRoLndyYXBMYXRMbmcodGhpcyk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHRvQm91bmRzKHNpemVJbk1ldGVyczogTnVtYmVyKTogTGF0TG5nQm91bmRzCiAgCS8vIFJldHVybnMgYSBuZXcgYExhdExuZ0JvdW5kc2Agb2JqZWN0IGluIHdoaWNoIGVhY2ggYm91bmRhcnkgaXMgYHNpemVJbk1ldGVycy8yYCBtZXRlcnMgYXBhcnQgZnJvbSB0aGUgYExhdExuZ2AuCiAgCXRvQm91bmRzOiBmdW5jdGlvbiAoc2l6ZUluTWV0ZXJzKSB7CiAgCQl2YXIgbGF0QWNjdXJhY3kgPSAxODAgKiBzaXplSW5NZXRlcnMgLyA0MDA3NTAxNywKICAJCSAgICBsbmdBY2N1cmFjeSA9IGxhdEFjY3VyYWN5IC8gTWF0aC5jb3MoKE1hdGguUEkgLyAxODApICogdGhpcy5sYXQpOwoKICAJCXJldHVybiB0b0xhdExuZ0JvdW5kcygKICAJCSAgICAgICAgW3RoaXMubGF0IC0gbGF0QWNjdXJhY3ksIHRoaXMubG5nIC0gbG5nQWNjdXJhY3ldLAogIAkJICAgICAgICBbdGhpcy5sYXQgKyBsYXRBY2N1cmFjeSwgdGhpcy5sbmcgKyBsbmdBY2N1cmFjeV0pOwogIAl9LAoKICAJY2xvbmU6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiBuZXcgTGF0TG5nKHRoaXMubGF0LCB0aGlzLmxuZywgdGhpcy5hbHQpOwogIAl9CiAgfTsKCgoKICAvLyBAZmFjdG9yeSBMLmxhdExuZyhsYXRpdHVkZTogTnVtYmVyLCBsb25naXR1ZGU6IE51bWJlciwgYWx0aXR1ZGU/OiBOdW1iZXIpOiBMYXRMbmcKICAvLyBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRpbmcgYSBnZW9ncmFwaGljYWwgcG9pbnQgd2l0aCB0aGUgZ2l2ZW4gbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSAoYW5kIG9wdGlvbmFsbHkgYWx0aXR1ZGUpLgoKICAvLyBAYWx0ZXJuYXRpdmUKICAvLyBAZmFjdG9yeSBMLmxhdExuZyhjb29yZHM6IEFycmF5KTogTGF0TG5nCiAgLy8gRXhwZWN0cyBhbiBhcnJheSBvZiB0aGUgZm9ybSBgW051bWJlciwgTnVtYmVyXWAgb3IgYFtOdW1iZXIsIE51bWJlciwgTnVtYmVyXWAgaW5zdGVhZC4KCiAgLy8gQGFsdGVybmF0aXZlCiAgLy8gQGZhY3RvcnkgTC5sYXRMbmcoY29vcmRzOiBPYmplY3QpOiBMYXRMbmcKICAvLyBFeHBlY3RzIGFuIHBsYWluIG9iamVjdCBvZiB0aGUgZm9ybSBge2xhdDogTnVtYmVyLCBsbmc6IE51bWJlcn1gIG9yIGB7bGF0OiBOdW1iZXIsIGxuZzogTnVtYmVyLCBhbHQ6IE51bWJlcn1gIGluc3RlYWQuCgogIGZ1bmN0aW9uIHRvTGF0TG5nKGEsIGIsIGMpIHsKICAJaWYgKGEgaW5zdGFuY2VvZiBMYXRMbmcpIHsKICAJCXJldHVybiBhOwogIAl9CiAgCWlmIChpc0FycmF5KGEpICYmIHR5cGVvZiBhWzBdICE9PSAnb2JqZWN0JykgewogIAkJaWYgKGEubGVuZ3RoID09PSAzKSB7CiAgCQkJcmV0dXJuIG5ldyBMYXRMbmcoYVswXSwgYVsxXSwgYVsyXSk7CiAgCQl9CiAgCQlpZiAoYS5sZW5ndGggPT09IDIpIHsKICAJCQlyZXR1cm4gbmV3IExhdExuZyhhWzBdLCBhWzFdKTsKICAJCX0KICAJCXJldHVybiBudWxsOwogIAl9CiAgCWlmIChhID09PSB1bmRlZmluZWQgfHwgYSA9PT0gbnVsbCkgewogIAkJcmV0dXJuIGE7CiAgCX0KICAJaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiAnbGF0JyBpbiBhKSB7CiAgCQlyZXR1cm4gbmV3IExhdExuZyhhLmxhdCwgJ2xuZycgaW4gYSA/IGEubG5nIDogYS5sb24sIGEuYWx0KTsKICAJfQogIAlpZiAoYiA9PT0gdW5kZWZpbmVkKSB7CiAgCQlyZXR1cm4gbnVsbDsKICAJfQogIAlyZXR1cm4gbmV3IExhdExuZyhhLCBiLCBjKTsKICB9CgogIC8qCiAgICogQG5hbWVzcGFjZSBDUlMKICAgKiBAY3JzIEwuQ1JTLkJhc2UKICAgKiBPYmplY3QgdGhhdCBkZWZpbmVzIGNvb3JkaW5hdGUgcmVmZXJlbmNlIHN5c3RlbXMgZm9yIHByb2plY3RpbmcKICAgKiBnZW9ncmFwaGljYWwgcG9pbnRzIGludG8gcGl4ZWwgKHNjcmVlbikgY29vcmRpbmF0ZXMgYW5kIGJhY2sgKGFuZCB0bwogICAqIGNvb3JkaW5hdGVzIGluIG90aGVyIHVuaXRzIGZvciBbV01TXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWJfTWFwX1NlcnZpY2UpIHNlcnZpY2VzKS4gU2VlCiAgICogW3NwYXRpYWwgcmVmZXJlbmNlIHN5c3RlbV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BhdGlhbF9yZWZlcmVuY2Vfc3lzdGVtKS4KICAgKgogICAqIExlYWZsZXQgZGVmaW5lcyB0aGUgbW9zdCB1c3VhbCBDUlNzIGJ5IGRlZmF1bHQuIElmIHlvdSB3YW50IHRvIHVzZSBhCiAgICogQ1JTIG5vdCBkZWZpbmVkIGJ5IGRlZmF1bHQsIHRha2UgYSBsb29rIGF0IHRoZQogICAqIFtQcm9qNExlYWZsZXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9rYXJ0ZW5hL1Byb2o0TGVhZmxldCkgcGx1Z2luLgogICAqCiAgICogTm90ZSB0aGF0IHRoZSBDUlMgaW5zdGFuY2VzIGRvIG5vdCBpbmhlcml0IGZyb20gTGVhZmxldCdzIGBDbGFzc2Agb2JqZWN0LAogICAqIGFuZCBjYW4ndCBiZSBpbnN0YW50aWF0ZWQuIEFsc28sIG5ldyBjbGFzc2VzIGNhbid0IGluaGVyaXQgZnJvbSB0aGVtLAogICAqIGFuZCBtZXRob2RzIGNhbid0IGJlIGFkZGVkIHRvIHRoZW0gd2l0aCB0aGUgYGluY2x1ZGVgIGZ1bmN0aW9uLgogICAqLwoKICB2YXIgQ1JTID0gewogIAkvLyBAbWV0aG9kIGxhdExuZ1RvUG9pbnQobGF0bG5nOiBMYXRMbmcsIHpvb206IE51bWJlcik6IFBvaW50CiAgCS8vIFByb2plY3RzIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcyBpbnRvIHBpeGVsIGNvb3JkaW5hdGVzIGZvciBhIGdpdmVuIHpvb20uCiAgCWxhdExuZ1RvUG9pbnQ6IGZ1bmN0aW9uIChsYXRsbmcsIHpvb20pIHsKICAJCXZhciBwcm9qZWN0ZWRQb2ludCA9IHRoaXMucHJvamVjdGlvbi5wcm9qZWN0KGxhdGxuZyksCiAgCQkgICAgc2NhbGUgPSB0aGlzLnNjYWxlKHpvb20pOwoKICAJCXJldHVybiB0aGlzLnRyYW5zZm9ybWF0aW9uLl90cmFuc2Zvcm0ocHJvamVjdGVkUG9pbnQsIHNjYWxlKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgcG9pbnRUb0xhdExuZyhwb2ludDogUG9pbnQsIHpvb206IE51bWJlcik6IExhdExuZwogIAkvLyBUaGUgaW52ZXJzZSBvZiBgbGF0TG5nVG9Qb2ludGAuIFByb2plY3RzIHBpeGVsIGNvb3JkaW5hdGVzIG9uIGEgZ2l2ZW4KICAJLy8gem9vbSBpbnRvIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcy4KICAJcG9pbnRUb0xhdExuZzogZnVuY3Rpb24gKHBvaW50LCB6b29tKSB7CiAgCQl2YXIgc2NhbGUgPSB0aGlzLnNjYWxlKHpvb20pLAogIAkJICAgIHVudHJhbnNmb3JtZWRQb2ludCA9IHRoaXMudHJhbnNmb3JtYXRpb24udW50cmFuc2Zvcm0ocG9pbnQsIHNjYWxlKTsKCiAgCQlyZXR1cm4gdGhpcy5wcm9qZWN0aW9uLnVucHJvamVjdCh1bnRyYW5zZm9ybWVkUG9pbnQpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBwcm9qZWN0KGxhdGxuZzogTGF0TG5nKTogUG9pbnQKICAJLy8gUHJvamVjdHMgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGVzIGludG8gY29vcmRpbmF0ZXMgaW4gdW5pdHMgYWNjZXB0ZWQgZm9yCiAgCS8vIHRoaXMgQ1JTIChlLmcuIG1ldGVycyBmb3IgRVBTRzozODU3LCBmb3IgcGFzc2luZyBpdCB0byBXTVMgc2VydmljZXMpLgogIAlwcm9qZWN0OiBmdW5jdGlvbiAobGF0bG5nKSB7CiAgCQlyZXR1cm4gdGhpcy5wcm9qZWN0aW9uLnByb2plY3QobGF0bG5nKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgdW5wcm9qZWN0KHBvaW50OiBQb2ludCk6IExhdExuZwogIAkvLyBHaXZlbiBhIHByb2plY3RlZCBjb29yZGluYXRlIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgTGF0TG5nLgogIAkvLyBUaGUgaW52ZXJzZSBvZiBgcHJvamVjdGAuCiAgCXVucHJvamVjdDogZnVuY3Rpb24gKHBvaW50KSB7CiAgCQlyZXR1cm4gdGhpcy5wcm9qZWN0aW9uLnVucHJvamVjdChwb2ludCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNjYWxlKHpvb206IE51bWJlcik6IE51bWJlcgogIAkvLyBSZXR1cm5zIHRoZSBzY2FsZSB1c2VkIHdoZW4gdHJhbnNmb3JtaW5nIHByb2plY3RlZCBjb29yZGluYXRlcyBpbnRvCiAgCS8vIHBpeGVsIGNvb3JkaW5hdGVzIGZvciBhIHBhcnRpY3VsYXIgem9vbS4gRm9yIGV4YW1wbGUsIGl0IHJldHVybnMKICAJLy8gYDI1NiAqIDJeem9vbWAgZm9yIE1lcmNhdG9yLWJhc2VkIENSUy4KICAJc2NhbGU6IGZ1bmN0aW9uICh6b29tKSB7CiAgCQlyZXR1cm4gMjU2ICogTWF0aC5wb3coMiwgem9vbSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHpvb20oc2NhbGU6IE51bWJlcik6IE51bWJlcgogIAkvLyBJbnZlcnNlIG9mIGBzY2FsZSgpYCwgcmV0dXJucyB0aGUgem9vbSBsZXZlbCBjb3JyZXNwb25kaW5nIHRvIGEgc2NhbGUKICAJLy8gZmFjdG9yIG9mIGBzY2FsZWAuCiAgCXpvb206IGZ1bmN0aW9uIChzY2FsZSkgewogIAkJcmV0dXJuIE1hdGgubG9nKHNjYWxlIC8gMjU2KSAvIE1hdGguTE4yOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRQcm9qZWN0ZWRCb3VuZHMoem9vbTogTnVtYmVyKTogQm91bmRzCiAgCS8vIFJldHVybnMgdGhlIHByb2plY3Rpb24ncyBib3VuZHMgc2NhbGVkIGFuZCB0cmFuc2Zvcm1lZCBmb3IgdGhlIHByb3ZpZGVkIGB6b29tYC4KICAJZ2V0UHJvamVjdGVkQm91bmRzOiBmdW5jdGlvbiAoem9vbSkgewogIAkJaWYgKHRoaXMuaW5maW5pdGUpIHsgcmV0dXJuIG51bGw7IH0KCiAgCQl2YXIgYiA9IHRoaXMucHJvamVjdGlvbi5ib3VuZHMsCiAgCQkgICAgcyA9IHRoaXMuc2NhbGUoem9vbSksCiAgCQkgICAgbWluID0gdGhpcy50cmFuc2Zvcm1hdGlvbi50cmFuc2Zvcm0oYi5taW4sIHMpLAogIAkJICAgIG1heCA9IHRoaXMudHJhbnNmb3JtYXRpb24udHJhbnNmb3JtKGIubWF4LCBzKTsKCiAgCQlyZXR1cm4gbmV3IEJvdW5kcyhtaW4sIG1heCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGRpc3RhbmNlKGxhdGxuZzE6IExhdExuZywgbGF0bG5nMjogTGF0TG5nKTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdHdvIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcy4KCiAgCS8vIEBwcm9wZXJ0eSBjb2RlOiBTdHJpbmcKICAJLy8gU3RhbmRhcmQgY29kZSBuYW1lIG9mIHRoZSBDUlMgcGFzc2VkIGludG8gV01TIHNlcnZpY2VzIChlLmcuIGAnRVBTRzozODU3J2ApCiAgCS8vCiAgCS8vIEBwcm9wZXJ0eSB3cmFwTG5nOiBOdW1iZXJbXQogIAkvLyBBbiBhcnJheSBvZiB0d28gbnVtYmVycyBkZWZpbmluZyB3aGV0aGVyIHRoZSBsb25naXR1ZGUgKGhvcml6b250YWwpIGNvb3JkaW5hdGUKICAJLy8gYXhpcyB3cmFwcyBhcm91bmQgYSBnaXZlbiByYW5nZSBhbmQgaG93LiBEZWZhdWx0cyB0byBgWy0xODAsIDE4MF1gIGluIG1vc3QKICAJLy8gZ2VvZ3JhcGhpY2FsIENSU3MuIElmIGB1bmRlZmluZWRgLCB0aGUgbG9uZ2l0dWRlIGF4aXMgZG9lcyBub3Qgd3JhcCBhcm91bmQuCiAgCS8vCiAgCS8vIEBwcm9wZXJ0eSB3cmFwTGF0OiBOdW1iZXJbXQogIAkvLyBMaWtlIGB3cmFwTG5nYCwgYnV0IGZvciB0aGUgbGF0aXR1ZGUgKHZlcnRpY2FsKSBheGlzLgoKICAJLy8gd3JhcExuZzogW21pbiwgbWF4XSwKICAJLy8gd3JhcExhdDogW21pbiwgbWF4XSwKCiAgCS8vIEBwcm9wZXJ0eSBpbmZpbml0ZTogQm9vbGVhbgogIAkvLyBJZiB0cnVlLCB0aGUgY29vcmRpbmF0ZSBzcGFjZSB3aWxsIGJlIHVuYm91bmRlZCAoaW5maW5pdGUgaW4gYm90aCBheGVzKQogIAlpbmZpbml0ZTogZmFsc2UsCgogIAkvLyBAbWV0aG9kIHdyYXBMYXRMbmcobGF0bG5nOiBMYXRMbmcpOiBMYXRMbmcKICAJLy8gUmV0dXJucyBhIGBMYXRMbmdgIHdoZXJlIGxhdCBhbmQgbG5nIGhhcyBiZWVuIHdyYXBwZWQgYWNjb3JkaW5nIHRvIHRoZQogIAkvLyBDUlMncyBgd3JhcExhdGAgYW5kIGB3cmFwTG5nYCBwcm9wZXJ0aWVzLCBpZiB0aGV5IGFyZSBvdXRzaWRlIHRoZSBDUlMncyBib3VuZHMuCiAgCXdyYXBMYXRMbmc6IGZ1bmN0aW9uIChsYXRsbmcpIHsKICAJCXZhciBsbmcgPSB0aGlzLndyYXBMbmcgPyB3cmFwTnVtKGxhdGxuZy5sbmcsIHRoaXMud3JhcExuZywgdHJ1ZSkgOiBsYXRsbmcubG5nLAogIAkJICAgIGxhdCA9IHRoaXMud3JhcExhdCA/IHdyYXBOdW0obGF0bG5nLmxhdCwgdGhpcy53cmFwTGF0LCB0cnVlKSA6IGxhdGxuZy5sYXQsCiAgCQkgICAgYWx0ID0gbGF0bG5nLmFsdDsKCiAgCQlyZXR1cm4gbmV3IExhdExuZyhsYXQsIGxuZywgYWx0KTsKICAJfSwKCiAgCS8vIEBtZXRob2Qgd3JhcExhdExuZ0JvdW5kcyhib3VuZHM6IExhdExuZ0JvdW5kcyk6IExhdExuZ0JvdW5kcwogIAkvLyBSZXR1cm5zIGEgYExhdExuZ0JvdW5kc2Agd2l0aCB0aGUgc2FtZSBzaXplIGFzIHRoZSBnaXZlbiBvbmUsIGVuc3VyaW5nCiAgCS8vIHRoYXQgaXRzIGNlbnRlciBpcyB3aXRoaW4gdGhlIENSUydzIGJvdW5kcy4KICAJLy8gT25seSBhY2NlcHRzIGFjdHVhbCBgTC5MYXRMbmdCb3VuZHNgIGluc3RhbmNlcywgbm90IGFycmF5cy4KICAJd3JhcExhdExuZ0JvdW5kczogZnVuY3Rpb24gKGJvdW5kcykgewogIAkJdmFyIGNlbnRlciA9IGJvdW5kcy5nZXRDZW50ZXIoKSwKICAJCSAgICBuZXdDZW50ZXIgPSB0aGlzLndyYXBMYXRMbmcoY2VudGVyKSwKICAJCSAgICBsYXRTaGlmdCA9IGNlbnRlci5sYXQgLSBuZXdDZW50ZXIubGF0LAogIAkJICAgIGxuZ1NoaWZ0ID0gY2VudGVyLmxuZyAtIG5ld0NlbnRlci5sbmc7CgogIAkJaWYgKGxhdFNoaWZ0ID09PSAwICYmIGxuZ1NoaWZ0ID09PSAwKSB7CiAgCQkJcmV0dXJuIGJvdW5kczsKICAJCX0KCiAgCQl2YXIgc3cgPSBib3VuZHMuZ2V0U291dGhXZXN0KCksCiAgCQkgICAgbmUgPSBib3VuZHMuZ2V0Tm9ydGhFYXN0KCksCiAgCQkgICAgbmV3U3cgPSBuZXcgTGF0TG5nKHN3LmxhdCAtIGxhdFNoaWZ0LCBzdy5sbmcgLSBsbmdTaGlmdCksCiAgCQkgICAgbmV3TmUgPSBuZXcgTGF0TG5nKG5lLmxhdCAtIGxhdFNoaWZ0LCBuZS5sbmcgLSBsbmdTaGlmdCk7CgogIAkJcmV0dXJuIG5ldyBMYXRMbmdCb3VuZHMobmV3U3csIG5ld05lKTsKICAJfQogIH07CgogIC8qCiAgICogQG5hbWVzcGFjZSBDUlMKICAgKiBAY3JzIEwuQ1JTLkVhcnRoCiAgICoKICAgKiBTZXJ2ZXMgYXMgdGhlIGJhc2UgZm9yIENSUyB0aGF0IGFyZSBnbG9iYWwgc3VjaCB0aGF0IHRoZXkgY292ZXIgdGhlIGVhcnRoLgogICAqIENhbiBvbmx5IGJlIHVzZWQgYXMgdGhlIGJhc2UgZm9yIG90aGVyIENSUyBhbmQgY2Fubm90IGJlIHVzZWQgZGlyZWN0bHksCiAgICogc2luY2UgaXQgZG9lcyBub3QgaGF2ZSBhIGBjb2RlYCwgYHByb2plY3Rpb25gIG9yIGB0cmFuc2Zvcm1hdGlvbmAuIGBkaXN0YW5jZSgpYCByZXR1cm5zCiAgICogbWV0ZXJzLgogICAqLwoKICB2YXIgRWFydGggPSBleHRlbmQoe30sIENSUywgewogIAl3cmFwTG5nOiBbLTE4MCwgMTgwXSwKCiAgCS8vIE1lYW4gRWFydGggUmFkaXVzLCBhcyByZWNvbW1lbmRlZCBmb3IgdXNlIGJ5CiAgCS8vIHRoZSBJbnRlcm5hdGlvbmFsIFVuaW9uIG9mIEdlb2Rlc3kgYW5kIEdlb3BoeXNpY3MsCiAgCS8vIHNlZSBodHRwczovL3Jvc2V0dGFjb2RlLm9yZy93aWtpL0hhdmVyc2luZV9mb3JtdWxhCiAgCVI6IDYzNzEwMDAsCgogIAkvLyBkaXN0YW5jZSBiZXR3ZWVuIHR3byBnZW9ncmFwaGljYWwgcG9pbnRzIHVzaW5nIHNwaGVyaWNhbCBsYXcgb2YgY29zaW5lcyBhcHByb3hpbWF0aW9uCiAgCWRpc3RhbmNlOiBmdW5jdGlvbiAobGF0bG5nMSwgbGF0bG5nMikgewogIAkJdmFyIHJhZCA9IE1hdGguUEkgLyAxODAsCiAgCQkgICAgbGF0MSA9IGxhdGxuZzEubGF0ICogcmFkLAogIAkJICAgIGxhdDIgPSBsYXRsbmcyLmxhdCAqIHJhZCwKICAJCSAgICBzaW5ETGF0ID0gTWF0aC5zaW4oKGxhdGxuZzIubGF0IC0gbGF0bG5nMS5sYXQpICogcmFkIC8gMiksCiAgCQkgICAgc2luRExvbiA9IE1hdGguc2luKChsYXRsbmcyLmxuZyAtIGxhdGxuZzEubG5nKSAqIHJhZCAvIDIpLAogIAkJICAgIGEgPSBzaW5ETGF0ICogc2luRExhdCArIE1hdGguY29zKGxhdDEpICogTWF0aC5jb3MobGF0MikgKiBzaW5ETG9uICogc2luRExvbiwKICAJCSAgICBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTsKICAJCXJldHVybiB0aGlzLlIgKiBjOwogIAl9CiAgfSk7CgogIC8qCiAgICogQG5hbWVzcGFjZSBQcm9qZWN0aW9uCiAgICogQHByb2plY3Rpb24gTC5Qcm9qZWN0aW9uLlNwaGVyaWNhbE1lcmNhdG9yCiAgICoKICAgKiBTcGhlcmljYWwgTWVyY2F0b3IgcHJvamVjdGlvbiDigJQgdGhlIG1vc3QgY29tbW9uIHByb2plY3Rpb24gZm9yIG9ubGluZSBtYXBzLAogICAqIHVzZWQgYnkgYWxtb3N0IGFsbCBmcmVlIGFuZCBjb21tZXJjaWFsIHRpbGUgcHJvdmlkZXJzLiBBc3N1bWVzIHRoYXQgRWFydGggaXMKICAgKiBhIHNwaGVyZS4gVXNlZCBieSB0aGUgYEVQU0c6Mzg1N2AgQ1JTLgogICAqLwoKICB2YXIgZWFydGhSYWRpdXMgPSA2Mzc4MTM3OwoKICB2YXIgU3BoZXJpY2FsTWVyY2F0b3IgPSB7CgogIAlSOiBlYXJ0aFJhZGl1cywKICAJTUFYX0xBVElUVURFOiA4NS4wNTExMjg3Nzk4LAoKICAJcHJvamVjdDogZnVuY3Rpb24gKGxhdGxuZykgewogIAkJdmFyIGQgPSBNYXRoLlBJIC8gMTgwLAogIAkJICAgIG1heCA9IHRoaXMuTUFYX0xBVElUVURFLAogIAkJICAgIGxhdCA9IE1hdGgubWF4KE1hdGgubWluKG1heCwgbGF0bG5nLmxhdCksIC1tYXgpLAogIAkJICAgIHNpbiA9IE1hdGguc2luKGxhdCAqIGQpOwoKICAJCXJldHVybiBuZXcgUG9pbnQoCiAgCQkJdGhpcy5SICogbGF0bG5nLmxuZyAqIGQsCiAgCQkJdGhpcy5SICogTWF0aC5sb2coKDEgKyBzaW4pIC8gKDEgLSBzaW4pKSAvIDIpOwogIAl9LAoKICAJdW5wcm9qZWN0OiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXZhciBkID0gMTgwIC8gTWF0aC5QSTsKCiAgCQlyZXR1cm4gbmV3IExhdExuZygKICAJCQkoMiAqIE1hdGguYXRhbihNYXRoLmV4cChwb2ludC55IC8gdGhpcy5SKSkgLSAoTWF0aC5QSSAvIDIpKSAqIGQsCiAgCQkJcG9pbnQueCAqIGQgLyB0aGlzLlIpOwogIAl9LAoKICAJYm91bmRzOiAoZnVuY3Rpb24gKCkgewogIAkJdmFyIGQgPSBlYXJ0aFJhZGl1cyAqIE1hdGguUEk7CiAgCQlyZXR1cm4gbmV3IEJvdW5kcyhbLWQsIC1kXSwgW2QsIGRdKTsKICAJfSkoKQogIH07CgogIC8qCiAgICogQGNsYXNzIFRyYW5zZm9ybWF0aW9uCiAgICogQGFrYSBMLlRyYW5zZm9ybWF0aW9uCiAgICoKICAgKiBSZXByZXNlbnRzIGFuIGFmZmluZSB0cmFuc2Zvcm1hdGlvbjogYSBzZXQgb2YgY29lZmZpY2llbnRzIGBhYCwgYGJgLCBgY2AsIGBkYAogICAqIGZvciB0cmFuc2Zvcm1pbmcgYSBwb2ludCBvZiBhIGZvcm0gYCh4LCB5KWAgaW50byBgKGEqeCArIGIsIGMqeSArIGQpYCBhbmQgZG9pbmcKICAgKiB0aGUgcmV2ZXJzZS4gVXNlZCBieSBMZWFmbGV0IGluIGl0cyBwcm9qZWN0aW9ucyBjb2RlLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogdmFyIHRyYW5zZm9ybWF0aW9uID0gTC50cmFuc2Zvcm1hdGlvbigyLCA1LCAtMSwgMTApLAogICAqIAlwID0gTC5wb2ludCgxLCAyKSwKICAgKiAJcDIgPSB0cmFuc2Zvcm1hdGlvbi50cmFuc2Zvcm0ocCksIC8vICBMLnBvaW50KDcsIDgpCiAgICogCXAzID0gdHJhbnNmb3JtYXRpb24udW50cmFuc2Zvcm0ocDIpOyAvLyAgTC5wb2ludCgxLCAyKQogICAqIGBgYAogICAqLwoKCiAgLy8gZmFjdG9yeSBuZXcgTC5UcmFuc2Zvcm1hdGlvbihhOiBOdW1iZXIsIGI6IE51bWJlciwgYzogTnVtYmVyLCBkOiBOdW1iZXIpCiAgLy8gQ3JlYXRlcyBhIGBUcmFuc2Zvcm1hdGlvbmAgb2JqZWN0IHdpdGggdGhlIGdpdmVuIGNvZWZmaWNpZW50cy4KICBmdW5jdGlvbiBUcmFuc2Zvcm1hdGlvbihhLCBiLCBjLCBkKSB7CiAgCWlmIChpc0FycmF5KGEpKSB7CiAgCQkvLyB1c2UgYXJyYXkgcHJvcGVydGllcwogIAkJdGhpcy5fYSA9IGFbMF07CiAgCQl0aGlzLl9iID0gYVsxXTsKICAJCXRoaXMuX2MgPSBhWzJdOwogIAkJdGhpcy5fZCA9IGFbM107CiAgCQlyZXR1cm47CiAgCX0KICAJdGhpcy5fYSA9IGE7CiAgCXRoaXMuX2IgPSBiOwogIAl0aGlzLl9jID0gYzsKICAJdGhpcy5fZCA9IGQ7CiAgfQoKICBUcmFuc2Zvcm1hdGlvbi5wcm90b3R5cGUgPSB7CiAgCS8vIEBtZXRob2QgdHJhbnNmb3JtKHBvaW50OiBQb2ludCwgc2NhbGU/OiBOdW1iZXIpOiBQb2ludAogIAkvLyBSZXR1cm5zIGEgdHJhbnNmb3JtZWQgcG9pbnQsIG9wdGlvbmFsbHkgbXVsdGlwbGllZCBieSB0aGUgZ2l2ZW4gc2NhbGUuCiAgCS8vIE9ubHkgYWNjZXB0cyBhY3R1YWwgYEwuUG9pbnRgIGluc3RhbmNlcywgbm90IGFycmF5cy4KICAJdHJhbnNmb3JtOiBmdW5jdGlvbiAocG9pbnQsIHNjYWxlKSB7IC8vIChQb2ludCwgTnVtYmVyKSAtPiBQb2ludAogIAkJcmV0dXJuIHRoaXMuX3RyYW5zZm9ybShwb2ludC5jbG9uZSgpLCBzY2FsZSk7CiAgCX0sCgogIAkvLyBkZXN0cnVjdGl2ZSB0cmFuc2Zvcm0gKGZhc3RlcikKICAJX3RyYW5zZm9ybTogZnVuY3Rpb24gKHBvaW50LCBzY2FsZSkgewogIAkJc2NhbGUgPSBzY2FsZSB8fCAxOwogIAkJcG9pbnQueCA9IHNjYWxlICogKHRoaXMuX2EgKiBwb2ludC54ICsgdGhpcy5fYik7CiAgCQlwb2ludC55ID0gc2NhbGUgKiAodGhpcy5fYyAqIHBvaW50LnkgKyB0aGlzLl9kKTsKICAJCXJldHVybiBwb2ludDsKICAJfSwKCiAgCS8vIEBtZXRob2QgdW50cmFuc2Zvcm0ocG9pbnQ6IFBvaW50LCBzY2FsZT86IE51bWJlcik6IFBvaW50CiAgCS8vIFJldHVybnMgdGhlIHJldmVyc2UgdHJhbnNmb3JtYXRpb24gb2YgdGhlIGdpdmVuIHBvaW50LCBvcHRpb25hbGx5IGRpdmlkZWQKICAJLy8gYnkgdGhlIGdpdmVuIHNjYWxlLiBPbmx5IGFjY2VwdHMgYWN0dWFsIGBMLlBvaW50YCBpbnN0YW5jZXMsIG5vdCBhcnJheXMuCiAgCXVudHJhbnNmb3JtOiBmdW5jdGlvbiAocG9pbnQsIHNjYWxlKSB7CiAgCQlzY2FsZSA9IHNjYWxlIHx8IDE7CiAgCQlyZXR1cm4gbmV3IFBvaW50KAogIAkJICAgICAgICAocG9pbnQueCAvIHNjYWxlIC0gdGhpcy5fYikgLyB0aGlzLl9hLAogIAkJICAgICAgICAocG9pbnQueSAvIHNjYWxlIC0gdGhpcy5fZCkgLyB0aGlzLl9jKTsKICAJfQogIH07CgogIC8vIGZhY3RvcnkgTC50cmFuc2Zvcm1hdGlvbihhOiBOdW1iZXIsIGI6IE51bWJlciwgYzogTnVtYmVyLCBkOiBOdW1iZXIpCgogIC8vIEBmYWN0b3J5IEwudHJhbnNmb3JtYXRpb24oYTogTnVtYmVyLCBiOiBOdW1iZXIsIGM6IE51bWJlciwgZDogTnVtYmVyKQogIC8vIEluc3RhbnRpYXRlcyBhIFRyYW5zZm9ybWF0aW9uIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBjb2VmZmljaWVudHMuCgogIC8vIEBhbHRlcm5hdGl2ZQogIC8vIEBmYWN0b3J5IEwudHJhbnNmb3JtYXRpb24oY29lZmZpY2llbnRzOiBBcnJheSk6IFRyYW5zZm9ybWF0aW9uCiAgLy8gRXhwZWN0cyBhbiBjb2VmZmljaWVudHMgYXJyYXkgb2YgdGhlIGZvcm0KICAvLyBgW2E6IE51bWJlciwgYjogTnVtYmVyLCBjOiBOdW1iZXIsIGQ6IE51bWJlcl1gLgoKICBmdW5jdGlvbiB0b1RyYW5zZm9ybWF0aW9uKGEsIGIsIGMsIGQpIHsKICAJcmV0dXJuIG5ldyBUcmFuc2Zvcm1hdGlvbihhLCBiLCBjLCBkKTsKICB9CgogIC8qCiAgICogQG5hbWVzcGFjZSBDUlMKICAgKiBAY3JzIEwuQ1JTLkVQU0czODU3CiAgICoKICAgKiBUaGUgbW9zdCBjb21tb24gQ1JTIGZvciBvbmxpbmUgbWFwcywgdXNlZCBieSBhbG1vc3QgYWxsIGZyZWUgYW5kIGNvbW1lcmNpYWwKICAgKiB0aWxlIHByb3ZpZGVycy4gVXNlcyBTcGhlcmljYWwgTWVyY2F0b3IgcHJvamVjdGlvbi4gU2V0IGluIGJ5IGRlZmF1bHQgaW4KICAgKiBNYXAncyBgY3JzYCBvcHRpb24uCiAgICovCgogIHZhciBFUFNHMzg1NyA9IGV4dGVuZCh7fSwgRWFydGgsIHsKICAJY29kZTogJ0VQU0c6Mzg1NycsCiAgCXByb2plY3Rpb246IFNwaGVyaWNhbE1lcmNhdG9yLAoKICAJdHJhbnNmb3JtYXRpb246IChmdW5jdGlvbiAoKSB7CiAgCQl2YXIgc2NhbGUgPSAwLjUgLyAoTWF0aC5QSSAqIFNwaGVyaWNhbE1lcmNhdG9yLlIpOwogIAkJcmV0dXJuIHRvVHJhbnNmb3JtYXRpb24oc2NhbGUsIDAuNSwgLXNjYWxlLCAwLjUpOwogIAl9KCkpCiAgfSk7CgogIHZhciBFUFNHOTAwOTEzID0gZXh0ZW5kKHt9LCBFUFNHMzg1NywgewogIAljb2RlOiAnRVBTRzo5MDA5MTMnCiAgfSk7CgogIC8vIEBuYW1lc3BhY2UgU1ZHOyBAc2VjdGlvbgogIC8vIFRoZXJlIGFyZSBzZXZlcmFsIHN0YXRpYyBmdW5jdGlvbnMgd2hpY2ggY2FuIGJlIGNhbGxlZCB3aXRob3V0IGluc3RhbnRpYXRpbmcgTC5TVkc6CgogIC8vIEBmdW5jdGlvbiBjcmVhdGUobmFtZTogU3RyaW5nKTogU1ZHRWxlbWVudAogIC8vIFJldHVybnMgYSBpbnN0YW5jZSBvZiBbU1ZHRWxlbWVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL1NWR0VsZW1lbnQpLAogIC8vIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGNsYXNzIG5hbWUgcGFzc2VkLiBGb3IgZXhhbXBsZSwgdXNpbmcgJ2xpbmUnIHdpbGwgcmV0dXJuCiAgLy8gYW4gaW5zdGFuY2Ugb2YgW1NWR0xpbmVFbGVtZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvU1ZHTGluZUVsZW1lbnQpLgogIGZ1bmN0aW9uIHN2Z0NyZWF0ZShuYW1lKSB7CiAgCXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmFtZSk7CiAgfQoKICAvLyBAZnVuY3Rpb24gcG9pbnRzVG9QYXRoKHJpbmdzOiBQb2ludFtdLCBjbG9zZWQ6IEJvb2xlYW4pOiBTdHJpbmcKICAvLyBHZW5lcmF0ZXMgYSBTVkcgcGF0aCBzdHJpbmcgZm9yIG11bHRpcGxlIHJpbmdzLCB3aXRoIGVhY2ggcmluZyB0dXJuaW5nCiAgLy8gaW50byAiTS4uTC4uTC4uIiBpbnN0cnVjdGlvbnMKICBmdW5jdGlvbiBwb2ludHNUb1BhdGgocmluZ3MsIGNsb3NlZCkgewogIAl2YXIgc3RyID0gJycsCiAgCWksIGosIGxlbiwgbGVuMiwgcG9pbnRzLCBwOwoKICAJZm9yIChpID0gMCwgbGVuID0gcmluZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCXBvaW50cyA9IHJpbmdzW2ldOwoKICAJCWZvciAoaiA9IDAsIGxlbjIgPSBwb2ludHMubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7CiAgCQkJcCA9IHBvaW50c1tqXTsKICAJCQlzdHIgKz0gKGogPyAnTCcgOiAnTScpICsgcC54ICsgJyAnICsgcC55OwogIAkJfQoKICAJCS8vIGNsb3NlcyB0aGUgcmluZyBmb3IgcG9seWdvbnM7ICJ4IiBpcyBWTUwgc3ludGF4CiAgCQlzdHIgKz0gY2xvc2VkID8gKEJyb3dzZXIuc3ZnID8gJ3onIDogJ3gnKSA6ICcnOwogIAl9CgogIAkvLyBTVkcgY29tcGxhaW5zIGFib3V0IGVtcHR5IHBhdGggc3RyaW5ncwogIAlyZXR1cm4gc3RyIHx8ICdNMCAwJzsKICB9CgogIC8qCiAgICogQG5hbWVzcGFjZSBCcm93c2VyCiAgICogQGFrYSBMLkJyb3dzZXIKICAgKgogICAqIEEgbmFtZXNwYWNlIHdpdGggc3RhdGljIHByb3BlcnRpZXMgZm9yIGJyb3dzZXIvZmVhdHVyZSBkZXRlY3Rpb24gdXNlZCBieSBMZWFmbGV0IGludGVybmFsbHkuCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogYGBganMKICAgKiBpZiAoTC5Ccm93c2VyLmllbHQ5KSB7CiAgICogICBhbGVydCgnVXBncmFkZSB5b3VyIGJyb3dzZXIsIGR1ZGUhJyk7CiAgICogfQogICAqIGBgYAogICAqLwoKICB2YXIgc3R5bGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGU7CgogIC8vIEBwcm9wZXJ0eSBpZTogQm9vbGVhbjsgYHRydWVgIGZvciBhbGwgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbnMgKG5vdCBFZGdlKS4KICB2YXIgaWUgPSAnQWN0aXZlWE9iamVjdCcgaW4gd2luZG93OwoKICAvLyBAcHJvcGVydHkgaWVsdDk6IEJvb2xlYW47IGB0cnVlYCBmb3IgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbnMgbGVzcyB0aGFuIDkuCiAgdmFyIGllbHQ5ID0gaWUgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7CgogIC8vIEBwcm9wZXJ0eSBlZGdlOiBCb29sZWFuOyBgdHJ1ZWAgZm9yIHRoZSBFZGdlIHdlYiBicm93c2VyLgogIHZhciBlZGdlID0gJ21zTGF1bmNoVXJpJyBpbiBuYXZpZ2F0b3IgJiYgISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCk7CgogIC8vIEBwcm9wZXJ0eSB3ZWJraXQ6IEJvb2xlYW47CiAgLy8gYHRydWVgIGZvciB3ZWJraXQtYmFzZWQgYnJvd3NlcnMgbGlrZSBDaHJvbWUgYW5kIFNhZmFyaSAoaW5jbHVkaW5nIG1vYmlsZSB2ZXJzaW9ucykuCiAgdmFyIHdlYmtpdCA9IHVzZXJBZ2VudENvbnRhaW5zKCd3ZWJraXQnKTsKCiAgLy8gQHByb3BlcnR5IGFuZHJvaWQ6IEJvb2xlYW4KICAvLyAqKkRlcHJlY2F0ZWQuKiogYHRydWVgIGZvciBhbnkgYnJvd3NlciBydW5uaW5nIG9uIGFuIEFuZHJvaWQgcGxhdGZvcm0uCiAgdmFyIGFuZHJvaWQgPSB1c2VyQWdlbnRDb250YWlucygnYW5kcm9pZCcpOwoKICAvLyBAcHJvcGVydHkgYW5kcm9pZDIzOiBCb29sZWFuOyAqKkRlcHJlY2F0ZWQuKiogYHRydWVgIGZvciBicm93c2VycyBydW5uaW5nIG9uIEFuZHJvaWQgMiBvciBBbmRyb2lkIDMuCiAgdmFyIGFuZHJvaWQyMyA9IHVzZXJBZ2VudENvbnRhaW5zKCdhbmRyb2lkIDInKSB8fCB1c2VyQWdlbnRDb250YWlucygnYW5kcm9pZCAzJyk7CgogIC8qIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTc5NjEyNjYgZm9yIGRldGFpbHMgb24gZGV0ZWN0aW5nIHN0b2NrIEFuZHJvaWQgKi8KICB2YXIgd2Via2l0VmVyID0gcGFyc2VJbnQoL1dlYktpdFwvKFswLTldKyl8JC8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KVsxXSwgMTApOyAvLyBhbHNvIG1hdGNoZXMgQXBwbGVXZWJLaXQKICAvLyBAcHJvcGVydHkgYW5kcm9pZFN0b2NrOiBCb29sZWFuOyAqKkRlcHJlY2F0ZWQuKiogYHRydWVgIGZvciB0aGUgQW5kcm9pZCBzdG9jayBicm93c2VyIChpLmUuIG5vdCBDaHJvbWUpCiAgdmFyIGFuZHJvaWRTdG9jayA9IGFuZHJvaWQgJiYgdXNlckFnZW50Q29udGFpbnMoJ0dvb2dsZScpICYmIHdlYmtpdFZlciA8IDUzNyAmJiAhKCdBdWRpb05vZGUnIGluIHdpbmRvdyk7CgogIC8vIEBwcm9wZXJ0eSBvcGVyYTogQm9vbGVhbjsgYHRydWVgIGZvciB0aGUgT3BlcmEgYnJvd3NlcgogIHZhciBvcGVyYSA9ICEhd2luZG93Lm9wZXJhOwoKICAvLyBAcHJvcGVydHkgY2hyb21lOiBCb29sZWFuOyBgdHJ1ZWAgZm9yIHRoZSBDaHJvbWUgYnJvd3Nlci4KICB2YXIgY2hyb21lID0gIWVkZ2UgJiYgdXNlckFnZW50Q29udGFpbnMoJ2Nocm9tZScpOwoKICAvLyBAcHJvcGVydHkgZ2Vja286IEJvb2xlYW47IGB0cnVlYCBmb3IgZ2Vja28tYmFzZWQgYnJvd3NlcnMgbGlrZSBGaXJlZm94LgogIHZhciBnZWNrbyA9IHVzZXJBZ2VudENvbnRhaW5zKCdnZWNrbycpICYmICF3ZWJraXQgJiYgIW9wZXJhICYmICFpZTsKCiAgLy8gQHByb3BlcnR5IHNhZmFyaTogQm9vbGVhbjsgYHRydWVgIGZvciB0aGUgU2FmYXJpIGJyb3dzZXIuCiAgdmFyIHNhZmFyaSA9ICFjaHJvbWUgJiYgdXNlckFnZW50Q29udGFpbnMoJ3NhZmFyaScpOwoKICB2YXIgcGhhbnRvbSA9IHVzZXJBZ2VudENvbnRhaW5zKCdwaGFudG9tJyk7CgogIC8vIEBwcm9wZXJ0eSBvcGVyYTEyOiBCb29sZWFuCiAgLy8gYHRydWVgIGZvciB0aGUgT3BlcmEgYnJvd3NlciBzdXBwb3J0aW5nIENTUyB0cmFuc2Zvcm1zICh2ZXJzaW9uIDEyIG9yIGxhdGVyKS4KICB2YXIgb3BlcmExMiA9ICdPVHJhbnNpdGlvbicgaW4gc3R5bGU7CgogIC8vIEBwcm9wZXJ0eSB3aW46IEJvb2xlYW47IGB0cnVlYCB3aGVuIHRoZSBicm93c2VyIGlzIHJ1bm5pbmcgaW4gYSBXaW5kb3dzIHBsYXRmb3JtCiAgdmFyIHdpbiA9IG5hdmlnYXRvci5wbGF0Zm9ybS5pbmRleE9mKCdXaW4nKSA9PT0gMDsKCiAgLy8gQHByb3BlcnR5IGllM2Q6IEJvb2xlYW47IGB0cnVlYCBmb3IgYWxsIEludGVybmV0IEV4cGxvcmVyIHZlcnNpb25zIHN1cHBvcnRpbmcgQ1NTIHRyYW5zZm9ybXMuCiAgdmFyIGllM2QgPSBpZSAmJiAoJ3RyYW5zaXRpb24nIGluIHN0eWxlKTsKCiAgLy8gQHByb3BlcnR5IHdlYmtpdDNkOiBCb29sZWFuOyBgdHJ1ZWAgZm9yIHdlYmtpdC1iYXNlZCBicm93c2VycyBzdXBwb3J0aW5nIENTUyB0cmFuc2Zvcm1zLgogIHZhciB3ZWJraXQzZCA9ICgnV2ViS2l0Q1NTTWF0cml4JyBpbiB3aW5kb3cpICYmICgnbTExJyBpbiBuZXcgd2luZG93LldlYktpdENTU01hdHJpeCgpKSAmJiAhYW5kcm9pZDIzOwoKICAvLyBAcHJvcGVydHkgZ2Vja28zZDogQm9vbGVhbjsgYHRydWVgIGZvciBnZWNrby1iYXNlZCBicm93c2VycyBzdXBwb3J0aW5nIENTUyB0cmFuc2Zvcm1zLgogIHZhciBnZWNrbzNkID0gJ01velBlcnNwZWN0aXZlJyBpbiBzdHlsZTsKCiAgLy8gQHByb3BlcnR5IGFueTNkOiBCb29sZWFuCiAgLy8gYHRydWVgIGZvciBhbGwgYnJvd3NlcnMgc3VwcG9ydGluZyBDU1MgdHJhbnNmb3Jtcy4KICB2YXIgYW55M2QgPSAhd2luZG93LkxfRElTQUJMRV8zRCAmJiAoaWUzZCB8fCB3ZWJraXQzZCB8fCBnZWNrbzNkKSAmJiAhb3BlcmExMiAmJiAhcGhhbnRvbTsKCiAgLy8gQHByb3BlcnR5IG1vYmlsZTogQm9vbGVhbjsgYHRydWVgIGZvciBhbGwgYnJvd3NlcnMgcnVubmluZyBpbiBhIG1vYmlsZSBkZXZpY2UuCiAgdmFyIG1vYmlsZSA9IHR5cGVvZiBvcmllbnRhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgfHwgdXNlckFnZW50Q29udGFpbnMoJ21vYmlsZScpOwoKICAvLyBAcHJvcGVydHkgbW9iaWxlV2Via2l0OiBCb29sZWFuOyBgdHJ1ZWAgZm9yIGFsbCB3ZWJraXQtYmFzZWQgYnJvd3NlcnMgaW4gYSBtb2JpbGUgZGV2aWNlLgogIHZhciBtb2JpbGVXZWJraXQgPSBtb2JpbGUgJiYgd2Via2l0OwoKICAvLyBAcHJvcGVydHkgbW9iaWxlV2Via2l0M2Q6IEJvb2xlYW4KICAvLyBgdHJ1ZWAgZm9yIGFsbCB3ZWJraXQtYmFzZWQgYnJvd3NlcnMgaW4gYSBtb2JpbGUgZGV2aWNlIHN1cHBvcnRpbmcgQ1NTIHRyYW5zZm9ybXMuCiAgdmFyIG1vYmlsZVdlYmtpdDNkID0gbW9iaWxlICYmIHdlYmtpdDNkOwoKICAvLyBAcHJvcGVydHkgbXNQb2ludGVyOiBCb29sZWFuCiAgLy8gYHRydWVgIGZvciBicm93c2VycyBpbXBsZW1lbnRpbmcgdGhlIE1pY3Jvc29mdCB0b3VjaCBldmVudHMgbW9kZWwgKG5vdGFibHkgSUUxMCkuCiAgdmFyIG1zUG9pbnRlciA9ICF3aW5kb3cuUG9pbnRlckV2ZW50ICYmIHdpbmRvdy5NU1BvaW50ZXJFdmVudDsKCiAgLy8gQHByb3BlcnR5IHBvaW50ZXI6IEJvb2xlYW4KICAvLyBgdHJ1ZWAgZm9yIGFsbCBicm93c2VycyBzdXBwb3J0aW5nIFtwb2ludGVyIGV2ZW50c10oaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9kbjQzMzI0NCUyOHY9dnMuODUlMjkuYXNweCkuCiAgdmFyIHBvaW50ZXIgPSAhISh3aW5kb3cuUG9pbnRlckV2ZW50IHx8IG1zUG9pbnRlcik7CgogIC8vIEBwcm9wZXJ0eSB0b3VjaE5hdGl2ZTogQm9vbGVhbgogIC8vIGB0cnVlYCBmb3IgYWxsIGJyb3dzZXJzIHN1cHBvcnRpbmcgW3RvdWNoIGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL1RvdWNoX2V2ZW50cykuCiAgLy8gKipUaGlzIGRvZXMgbm90IG5lY2Vzc2FyaWx5IG1lYW4qKiB0aGF0IHRoZSBicm93c2VyIGlzIHJ1bm5pbmcgaW4gYSBjb21wdXRlciB3aXRoCiAgLy8gYSB0b3VjaHNjcmVlbiwgaXQgb25seSBtZWFucyB0aGF0IHRoZSBicm93c2VyIGlzIGNhcGFibGUgb2YgdW5kZXJzdGFuZGluZwogIC8vIHRvdWNoIGV2ZW50cy4KICB2YXIgdG91Y2hOYXRpdmUgPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgISF3aW5kb3cuVG91Y2hFdmVudDsKCiAgLy8gQHByb3BlcnR5IHRvdWNoOiBCb29sZWFuCiAgLy8gYHRydWVgIGZvciBhbGwgYnJvd3NlcnMgc3VwcG9ydGluZyBlaXRoZXIgW3RvdWNoXSgjYnJvd3Nlci10b3VjaCkgb3IgW3BvaW50ZXJdKCNicm93c2VyLXBvaW50ZXIpIGV2ZW50cy4KICAvLyBOb3RlOiBwb2ludGVyIGV2ZW50cyB3aWxsIGJlIHByZWZlcnJlZCAoaWYgYXZhaWxhYmxlKSwgYW5kIHByb2Nlc3NlZCBmb3IgYWxsIGB0b3VjaCpgIGxpc3RlbmVycy4KICB2YXIgdG91Y2ggPSAhd2luZG93LkxfTk9fVE9VQ0ggJiYgKHRvdWNoTmF0aXZlIHx8IHBvaW50ZXIpOwoKICAvLyBAcHJvcGVydHkgbW9iaWxlT3BlcmE6IEJvb2xlYW47IGB0cnVlYCBmb3IgdGhlIE9wZXJhIGJyb3dzZXIgaW4gYSBtb2JpbGUgZGV2aWNlLgogIHZhciBtb2JpbGVPcGVyYSA9IG1vYmlsZSAmJiBvcGVyYTsKCiAgLy8gQHByb3BlcnR5IG1vYmlsZUdlY2tvOiBCb29sZWFuCiAgLy8gYHRydWVgIGZvciBnZWNrby1iYXNlZCBicm93c2VycyBydW5uaW5nIGluIGEgbW9iaWxlIGRldmljZS4KICB2YXIgbW9iaWxlR2Vja28gPSBtb2JpbGUgJiYgZ2Vja287CgogIC8vIEBwcm9wZXJ0eSByZXRpbmE6IEJvb2xlYW4KICAvLyBgdHJ1ZWAgZm9yIGJyb3dzZXJzIG9uIGEgaGlnaC1yZXNvbHV0aW9uICJyZXRpbmEiIHNjcmVlbiBvciBvbiBhbnkgc2NyZWVuIHdoZW4gYnJvd3NlcidzIGRpc3BsYXkgem9vbSBpcyBtb3JlIHRoYW4gMTAwJS4KICB2YXIgcmV0aW5hID0gKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8ICh3aW5kb3cuc2NyZWVuLmRldmljZVhEUEkgLyB3aW5kb3cuc2NyZWVuLmxvZ2ljYWxYRFBJKSkgPiAxOwoKICAvLyBAcHJvcGVydHkgcGFzc2l2ZUV2ZW50czogQm9vbGVhbgogIC8vIGB0cnVlYCBmb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHBhc3NpdmUgZXZlbnRzLgogIHZhciBwYXNzaXZlRXZlbnRzID0gKGZ1bmN0aW9uICgpIHsKICAJdmFyIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IGZhbHNlOwogIAl0cnkgewogIAkJdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywgewogIAkJCWdldDogZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdldHRlci1yZXR1cm4KICAJCQkJc3VwcG9ydHNQYXNzaXZlT3B0aW9uID0gdHJ1ZTsKICAJCQl9CiAgCQl9KTsKICAJCXdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUV2ZW50U3VwcG9ydCcsIGZhbHNlRm4sIG9wdHMpOwogIAkJd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlRXZlbnRTdXBwb3J0JywgZmFsc2VGbiwgb3B0cyk7CiAgCX0gY2F0Y2ggKGUpIHsKICAJCS8vIEVycm9ycyBjYW4gc2FmZWx5IGJlIGlnbm9yZWQgc2luY2UgdGhpcyBpcyBvbmx5IGEgYnJvd3NlciBzdXBwb3J0IHRlc3QuCiAgCX0KICAJcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjsKICB9KCkpOwoKICAvLyBAcHJvcGVydHkgY2FudmFzOiBCb29sZWFuCiAgLy8gYHRydWVgIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgW2A8Y2FudmFzPmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9DYW52YXNfQVBJKS4KICB2YXIgY2FudmFzJDEgPSAoZnVuY3Rpb24gKCkgewogIAlyZXR1cm4gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0OwogIH0oKSk7CgogIC8vIEBwcm9wZXJ0eSBzdmc6IEJvb2xlYW4KICAvLyBgdHJ1ZWAgd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyBbU1ZHXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9TVkcpLgogIHZhciBzdmckMSA9ICEhKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyAmJiBzdmdDcmVhdGUoJ3N2ZycpLmNyZWF0ZVNWR1JlY3QpOwoKICB2YXIgaW5saW5lU3ZnID0gISFzdmckMSAmJiAoZnVuY3Rpb24gKCkgewogIAl2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgCWRpdi5pbm5lckhUTUwgPSAnPHN2Zy8+JzsKICAJcmV0dXJuIChkaXYuZmlyc3RDaGlsZCAmJiBkaXYuZmlyc3RDaGlsZC5uYW1lc3BhY2VVUkkpID09PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnOwogIH0pKCk7CgogIC8vIEBwcm9wZXJ0eSB2bWw6IEJvb2xlYW4KICAvLyBgdHJ1ZWAgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgW1ZNTF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmVjdG9yX01hcmt1cF9MYW5ndWFnZSkuCiAgdmFyIHZtbCA9ICFzdmckMSAmJiAoZnVuY3Rpb24gKCkgewogIAl0cnkgewogIAkJdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIAkJZGl2LmlubmVySFRNTCA9ICc8djpzaGFwZSBhZGo9IjEiLz4nOwoKICAJCXZhciBzaGFwZSA9IGRpdi5maXJzdENoaWxkOwogIAkJc2hhcGUuc3R5bGUuYmVoYXZpb3IgPSAndXJsKCNkZWZhdWx0I1ZNTCknOwoKICAJCXJldHVybiBzaGFwZSAmJiAodHlwZW9mIHNoYXBlLmFkaiA9PT0gJ29iamVjdCcpOwoKICAJfSBjYXRjaCAoZSkgewogIAkJcmV0dXJuIGZhbHNlOwogIAl9CiAgfSgpKTsKCiAgZnVuY3Rpb24gdXNlckFnZW50Q29udGFpbnMoc3RyKSB7CiAgCXJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzdHIpID49IDA7CiAgfQoKCiAgdmFyIEJyb3dzZXIgPSB7CiAgCWllOiBpZSwKICAJaWVsdDk6IGllbHQ5LAogIAllZGdlOiBlZGdlLAogIAl3ZWJraXQ6IHdlYmtpdCwKICAJYW5kcm9pZDogYW5kcm9pZCwKICAJYW5kcm9pZDIzOiBhbmRyb2lkMjMsCiAgCWFuZHJvaWRTdG9jazogYW5kcm9pZFN0b2NrLAogIAlvcGVyYTogb3BlcmEsCiAgCWNocm9tZTogY2hyb21lLAogIAlnZWNrbzogZ2Vja28sCiAgCXNhZmFyaTogc2FmYXJpLAogIAlwaGFudG9tOiBwaGFudG9tLAogIAlvcGVyYTEyOiBvcGVyYTEyLAogIAl3aW46IHdpbiwKICAJaWUzZDogaWUzZCwKICAJd2Via2l0M2Q6IHdlYmtpdDNkLAogIAlnZWNrbzNkOiBnZWNrbzNkLAogIAlhbnkzZDogYW55M2QsCiAgCW1vYmlsZTogbW9iaWxlLAogIAltb2JpbGVXZWJraXQ6IG1vYmlsZVdlYmtpdCwKICAJbW9iaWxlV2Via2l0M2Q6IG1vYmlsZVdlYmtpdDNkLAogIAltc1BvaW50ZXI6IG1zUG9pbnRlciwKICAJcG9pbnRlcjogcG9pbnRlciwKICAJdG91Y2g6IHRvdWNoLAogIAl0b3VjaE5hdGl2ZTogdG91Y2hOYXRpdmUsCiAgCW1vYmlsZU9wZXJhOiBtb2JpbGVPcGVyYSwKICAJbW9iaWxlR2Vja286IG1vYmlsZUdlY2tvLAogIAlyZXRpbmE6IHJldGluYSwKICAJcGFzc2l2ZUV2ZW50czogcGFzc2l2ZUV2ZW50cywKICAJY2FudmFzOiBjYW52YXMkMSwKICAJc3ZnOiBzdmckMSwKICAJdm1sOiB2bWwsCiAgCWlubGluZVN2ZzogaW5saW5lU3ZnCiAgfTsKCiAgLyoKICAgKiBFeHRlbmRzIEwuRG9tRXZlbnQgdG8gcHJvdmlkZSB0b3VjaCBzdXBwb3J0IGZvciBJbnRlcm5ldCBFeHBsb3JlciBhbmQgV2luZG93cy1iYXNlZCBkZXZpY2VzLgogICAqLwoKICB2YXIgUE9JTlRFUl9ET1dOID0gICBCcm93c2VyLm1zUG9pbnRlciA/ICdNU1BvaW50ZXJEb3duJyAgIDogJ3BvaW50ZXJkb3duJzsKICB2YXIgUE9JTlRFUl9NT1ZFID0gICBCcm93c2VyLm1zUG9pbnRlciA/ICdNU1BvaW50ZXJNb3ZlJyAgIDogJ3BvaW50ZXJtb3ZlJzsKICB2YXIgUE9JTlRFUl9VUCA9ICAgICBCcm93c2VyLm1zUG9pbnRlciA/ICdNU1BvaW50ZXJVcCcgICAgIDogJ3BvaW50ZXJ1cCc7CiAgdmFyIFBPSU5URVJfQ0FOQ0VMID0gQnJvd3Nlci5tc1BvaW50ZXIgPyAnTVNQb2ludGVyQ2FuY2VsJyA6ICdwb2ludGVyY2FuY2VsJzsKICB2YXIgcEV2ZW50ID0gewogIAl0b3VjaHN0YXJ0ICA6IFBPSU5URVJfRE9XTiwKICAJdG91Y2htb3ZlICAgOiBQT0lOVEVSX01PVkUsCiAgCXRvdWNoZW5kICAgIDogUE9JTlRFUl9VUCwKICAJdG91Y2hjYW5jZWwgOiBQT0lOVEVSX0NBTkNFTAogIH07CiAgdmFyIGhhbmRsZSA9IHsKICAJdG91Y2hzdGFydCAgOiBfb25Qb2ludGVyU3RhcnQsCiAgCXRvdWNobW92ZSAgIDogX2hhbmRsZVBvaW50ZXIsCiAgCXRvdWNoZW5kICAgIDogX2hhbmRsZVBvaW50ZXIsCiAgCXRvdWNoY2FuY2VsIDogX2hhbmRsZVBvaW50ZXIKICB9OwogIHZhciBfcG9pbnRlcnMgPSB7fTsKICB2YXIgX3BvaW50ZXJEb2NMaXN0ZW5lciA9IGZhbHNlOwoKICAvLyBQcm92aWRlcyBhIHRvdWNoIGV2ZW50cyB3cmFwcGVyIGZvciAobXMpcG9pbnRlciBldmVudHMuCiAgLy8gcmVmIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9wb2ludGVyZXZlbnRzLyBodHRwczovL3d3dy53My5vcmcvQnVncy9QdWJsaWMvc2hvd19idWcuY2dpP2lkPTIyODkwCgogIGZ1bmN0aW9uIGFkZFBvaW50ZXJMaXN0ZW5lcihvYmosIHR5cGUsIGhhbmRsZXIpIHsKICAJaWYgKHR5cGUgPT09ICd0b3VjaHN0YXJ0JykgewogIAkJX2FkZFBvaW50ZXJEb2NMaXN0ZW5lcigpOwogIAl9CiAgCWlmICghaGFuZGxlW3R5cGVdKSB7CiAgCQljb25zb2xlLndhcm4oJ3dyb25nIGV2ZW50IHNwZWNpZmllZDonLCB0eXBlKTsKICAJCXJldHVybiBMLlV0aWwuZmFsc2VGbjsKICAJfQogIAloYW5kbGVyID0gaGFuZGxlW3R5cGVdLmJpbmQodGhpcywgaGFuZGxlcik7CiAgCW9iai5hZGRFdmVudExpc3RlbmVyKHBFdmVudFt0eXBlXSwgaGFuZGxlciwgZmFsc2UpOwogIAlyZXR1cm4gaGFuZGxlcjsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZVBvaW50ZXJMaXN0ZW5lcihvYmosIHR5cGUsIGhhbmRsZXIpIHsKICAJaWYgKCFwRXZlbnRbdHlwZV0pIHsKICAJCWNvbnNvbGUud2Fybignd3JvbmcgZXZlbnQgc3BlY2lmaWVkOicsIHR5cGUpOwogIAkJcmV0dXJuOwogIAl9CiAgCW9iai5yZW1vdmVFdmVudExpc3RlbmVyKHBFdmVudFt0eXBlXSwgaGFuZGxlciwgZmFsc2UpOwogIH0KCiAgZnVuY3Rpb24gX2dsb2JhbFBvaW50ZXJEb3duKGUpIHsKICAJX3BvaW50ZXJzW2UucG9pbnRlcklkXSA9IGU7CiAgfQoKICBmdW5jdGlvbiBfZ2xvYmFsUG9pbnRlck1vdmUoZSkgewogIAlpZiAoX3BvaW50ZXJzW2UucG9pbnRlcklkXSkgewogIAkJX3BvaW50ZXJzW2UucG9pbnRlcklkXSA9IGU7CiAgCX0KICB9CgogIGZ1bmN0aW9uIF9nbG9iYWxQb2ludGVyVXAoZSkgewogIAlkZWxldGUgX3BvaW50ZXJzW2UucG9pbnRlcklkXTsKICB9CgogIGZ1bmN0aW9uIF9hZGRQb2ludGVyRG9jTGlzdGVuZXIoKSB7CiAgCS8vIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB3aGF0IHBvaW50ZXJzIGFuZCBob3cgbWFueSBhcmUgYWN0aXZlIHRvIHByb3ZpZGUgZS50b3VjaGVzIGVtdWxhdGlvbgogIAlpZiAoIV9wb2ludGVyRG9jTGlzdGVuZXIpIHsKICAJCS8vIHdlIGxpc3RlbiBkb2N1bWVudCBhcyBhbnkgZHJhZ3MgdGhhdCBlbmQgYnkgbW92aW5nIHRoZSB0b3VjaCBvZmYgdGhlIHNjcmVlbiBnZXQgZmlyZWQgdGhlcmUKICAJCWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUE9JTlRFUl9ET1dOLCBfZ2xvYmFsUG9pbnRlckRvd24sIHRydWUpOwogIAkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihQT0lOVEVSX01PVkUsIF9nbG9iYWxQb2ludGVyTW92ZSwgdHJ1ZSk7CiAgCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFBPSU5URVJfVVAsIF9nbG9iYWxQb2ludGVyVXAsIHRydWUpOwogIAkJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihQT0lOVEVSX0NBTkNFTCwgX2dsb2JhbFBvaW50ZXJVcCwgdHJ1ZSk7CgogIAkJX3BvaW50ZXJEb2NMaXN0ZW5lciA9IHRydWU7CiAgCX0KICB9CgogIGZ1bmN0aW9uIF9oYW5kbGVQb2ludGVyKGhhbmRsZXIsIGUpIHsKICAJaWYgKGUucG9pbnRlclR5cGUgPT09IChlLk1TUE9JTlRFUl9UWVBFX01PVVNFIHx8ICdtb3VzZScpKSB7IHJldHVybjsgfQoKICAJZS50b3VjaGVzID0gW107CiAgCWZvciAodmFyIGkgaW4gX3BvaW50ZXJzKSB7CiAgCQllLnRvdWNoZXMucHVzaChfcG9pbnRlcnNbaV0pOwogIAl9CiAgCWUuY2hhbmdlZFRvdWNoZXMgPSBbZV07CgogIAloYW5kbGVyKGUpOwogIH0KCiAgZnVuY3Rpb24gX29uUG9pbnRlclN0YXJ0KGhhbmRsZXIsIGUpIHsKICAJLy8gSUUxMCBzcGVjaWZpYzogTXNUb3VjaCBuZWVkcyBwcmV2ZW50RGVmYXVsdC4gU2VlICMyMDAwCiAgCWlmIChlLk1TUE9JTlRFUl9UWVBFX1RPVUNIICYmIGUucG9pbnRlclR5cGUgPT09IGUuTVNQT0lOVEVSX1RZUEVfVE9VQ0gpIHsKICAJCXByZXZlbnREZWZhdWx0KGUpOwogIAl9CiAgCV9oYW5kbGVQb2ludGVyKGhhbmRsZXIsIGUpOwogIH0KCiAgLyoKICAgKiBFeHRlbmRzIHRoZSBldmVudCBoYW5kbGluZyBjb2RlIHdpdGggZG91YmxlIHRhcCBzdXBwb3J0IGZvciBtb2JpbGUgYnJvd3NlcnMuCiAgICoKICAgKiBOb3RlOiBjdXJyZW50bHkgbW9zdCBicm93c2VycyBmaXJlIG5hdGl2ZSBkYmxjbGljaywgd2l0aCBvbmx5IGEgZmV3IGV4Y2VwdGlvbnMKICAgKiAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFmbGV0L0xlYWZsZXQvaXNzdWVzLzcwMTIjaXNzdWVjb21tZW50LTU5NTA4NzM4NikKICAgKi8KCiAgZnVuY3Rpb24gbWFrZURibGNsaWNrKGV2ZW50KSB7CiAgCS8vIGluIG1vZGVybiBicm93c2VycyBgdHlwZWAgY2Fubm90IGJlIGp1c3Qgb3ZlcnJpZGRlbjoKICAJLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvRXJyb3JzL0dldHRlcl9vbmx5CiAgCXZhciBuZXdFdmVudCA9IHt9LAogIAkgICAgcHJvcCwgaTsKICAJZm9yIChpIGluIGV2ZW50KSB7CiAgCQlwcm9wID0gZXZlbnRbaV07CiAgCQluZXdFdmVudFtpXSA9IHByb3AgJiYgcHJvcC5iaW5kID8gcHJvcC5iaW5kKGV2ZW50KSA6IHByb3A7CiAgCX0KICAJZXZlbnQgPSBuZXdFdmVudDsKICAJbmV3RXZlbnQudHlwZSA9ICdkYmxjbGljayc7CiAgCW5ld0V2ZW50LmRldGFpbCA9IDI7CiAgCW5ld0V2ZW50LmlzVHJ1c3RlZCA9IGZhbHNlOwogIAluZXdFdmVudC5fc2ltdWxhdGVkID0gdHJ1ZTsgLy8gZm9yIGRlYnVnIHB1cnBvc2VzCiAgCXJldHVybiBuZXdFdmVudDsKICB9CgogIHZhciBkZWxheSA9IDIwMDsKICBmdW5jdGlvbiBhZGREb3VibGVUYXBMaXN0ZW5lcihvYmosIGhhbmRsZXIpIHsKICAJLy8gTW9zdCBicm93c2VycyBoYW5kbGUgZG91YmxlIHRhcCBuYXRpdmVseQogIAlvYmouYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBoYW5kbGVyKTsKCiAgCS8vIE9uIHNvbWUgcGxhdGZvcm1zIHRoZSBicm93c2VyIGRvZXNuJ3QgZmlyZSBuYXRpdmUgZGJsY2xpY2tzIGZvciB0b3VjaCBldmVudHMuCiAgCS8vIEl0IHNlZW1zIHRoYXQgaW4gYWxsIHN1Y2ggY2FzZXMgYGRldGFpbGAgcHJvcGVydHkgb2YgYGNsaWNrYCBldmVudCBpcyBhbHdheXMgYDFgLgogIAkvLyBTbyBoZXJlIHdlIHJlbHkgb24gdGhhdCBmYWN0IHRvIGF2b2lkIGV4Y2Vzc2l2ZSAnZGJsY2xpY2snIHNpbXVsYXRpb24gd2hlbiBub3QgbmVlZGVkLgogIAl2YXIgbGFzdCA9IDAsCiAgCSAgICBkZXRhaWw7CiAgCWZ1bmN0aW9uIHNpbURibGNsaWNrKGUpIHsKICAJCWlmIChlLmRldGFpbCAhPT0gMSkgewogIAkJCWRldGFpbCA9IGUuZGV0YWlsOyAvLyBrZWVwIGluIHN5bmMgdG8gYXZvaWQgZmFsc2UgZGJsY2xpY2sgaW4gc29tZSBjYXNlcwogIAkJCXJldHVybjsKICAJCX0KCiAgCQlpZiAoZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJyB8fAogIAkJCShlLnNvdXJjZUNhcGFiaWxpdGllcyAmJiAhZS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykpIHsKCiAgCQkJcmV0dXJuOwogIAkJfQoKICAJCXZhciBub3cgPSBEYXRlLm5vdygpOwogIAkJaWYgKG5vdyAtIGxhc3QgPD0gZGVsYXkpIHsKICAJCQlkZXRhaWwrKzsKICAJCQlpZiAoZGV0YWlsID09PSAyKSB7CiAgCQkJCWhhbmRsZXIobWFrZURibGNsaWNrKGUpKTsKICAJCQl9CiAgCQl9IGVsc2UgewogIAkJCWRldGFpbCA9IDE7CiAgCQl9CiAgCQlsYXN0ID0gbm93OwogIAl9CgogIAlvYmouYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaW1EYmxjbGljayk7CgogIAlyZXR1cm4gewogIAkJZGJsY2xpY2s6IGhhbmRsZXIsCiAgCQlzaW1EYmxjbGljazogc2ltRGJsY2xpY2sKICAJfTsKICB9CgogIGZ1bmN0aW9uIHJlbW92ZURvdWJsZVRhcExpc3RlbmVyKG9iaiwgaGFuZGxlcnMpIHsKICAJb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgaGFuZGxlcnMuZGJsY2xpY2spOwogIAlvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVycy5zaW1EYmxjbGljayk7CiAgfQoKICAvKgogICAqIEBuYW1lc3BhY2UgRG9tVXRpbAogICAqCiAgICogVXRpbGl0eSBmdW5jdGlvbnMgdG8gd29yayB3aXRoIHRoZSBbRE9NXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRG9jdW1lbnRfT2JqZWN0X01vZGVsKQogICAqIHRyZWUsIHVzZWQgYnkgTGVhZmxldCBpbnRlcm5hbGx5LgogICAqCiAgICogTW9zdCBmdW5jdGlvbnMgZXhwZWN0aW5nIG9yIHJldHVybmluZyBhIGBIVE1MRWxlbWVudGAgYWxzbyB3b3JrIGZvcgogICAqIFNWRyBlbGVtZW50cy4gVGhlIG9ubHkgZGlmZmVyZW5jZSBpcyB0aGF0IGNsYXNzZXMgcmVmZXIgdG8gQ1NTIGNsYXNzZXMKICAgKiBpbiBIVE1MIGFuZCBTVkcgY2xhc3NlcyBpbiBTVkcuCiAgICovCgoKICAvLyBAcHJvcGVydHkgVFJBTlNGT1JNOiBTdHJpbmcKICAvLyBWZW5kb3ItcHJlZml4ZWQgdHJhbnNmb3JtIHN0eWxlIG5hbWUgKGUuZy4gYCd3ZWJraXRUcmFuc2Zvcm0nYCBmb3IgV2ViS2l0KS4KICB2YXIgVFJBTlNGT1JNID0gdGVzdFByb3AoCiAgCVsndHJhbnNmb3JtJywgJ3dlYmtpdFRyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddKTsKCiAgLy8gd2Via2l0VHJhbnNpdGlvbiBjb21lcyBmaXJzdCBiZWNhdXNlIHNvbWUgYnJvd3NlciB2ZXJzaW9ucyB0aGF0IGRyb3AgdmVuZG9yIHByZWZpeCBkb24ndCBkbwogIC8vIHRoZSBzYW1lIGZvciB0aGUgdHJhbnNpdGlvbmVuZCBldmVudCwgaW4gcGFydGljdWxhciB0aGUgQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlcgoKICAvLyBAcHJvcGVydHkgVFJBTlNJVElPTjogU3RyaW5nCiAgLy8gVmVuZG9yLXByZWZpeGVkIHRyYW5zaXRpb24gc3R5bGUgbmFtZS4KICB2YXIgVFJBTlNJVElPTiA9IHRlc3RQcm9wKAogIAlbJ3dlYmtpdFRyYW5zaXRpb24nLCAndHJhbnNpdGlvbicsICdPVHJhbnNpdGlvbicsICdNb3pUcmFuc2l0aW9uJywgJ21zVHJhbnNpdGlvbiddKTsKCiAgLy8gQHByb3BlcnR5IFRSQU5TSVRJT05fRU5EOiBTdHJpbmcKICAvLyBWZW5kb3ItcHJlZml4ZWQgdHJhbnNpdGlvbmVuZCBldmVudCBuYW1lLgogIHZhciBUUkFOU0lUSU9OX0VORCA9CiAgCVRSQU5TSVRJT04gPT09ICd3ZWJraXRUcmFuc2l0aW9uJyB8fCBUUkFOU0lUSU9OID09PSAnT1RyYW5zaXRpb24nID8gVFJBTlNJVElPTiArICdFbmQnIDogJ3RyYW5zaXRpb25lbmQnOwoKCiAgLy8gQGZ1bmN0aW9uIGdldChpZDogU3RyaW5nfEhUTUxFbGVtZW50KTogSFRNTEVsZW1lbnQKICAvLyBSZXR1cm5zIGFuIGVsZW1lbnQgZ2l2ZW4gaXRzIERPTSBpZCwgb3IgcmV0dXJucyB0aGUgZWxlbWVudCBpdHNlbGYKICAvLyBpZiBpdCB3YXMgcGFzc2VkIGRpcmVjdGx5LgogIGZ1bmN0aW9uIGdldChpZCkgewogIAlyZXR1cm4gdHlwZW9mIGlkID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSA6IGlkOwogIH0KCiAgLy8gQGZ1bmN0aW9uIGdldFN0eWxlKGVsOiBIVE1MRWxlbWVudCwgc3R5bGVBdHRyaWI6IFN0cmluZyk6IFN0cmluZwogIC8vIFJldHVybnMgdGhlIHZhbHVlIGZvciBhIGNlcnRhaW4gc3R5bGUgYXR0cmlidXRlIG9uIGFuIGVsZW1lbnQsCiAgLy8gaW5jbHVkaW5nIGNvbXB1dGVkIHZhbHVlcyBvciB2YWx1ZXMgc2V0IHRocm91Z2ggQ1NTLgogIGZ1bmN0aW9uIGdldFN0eWxlKGVsLCBzdHlsZSkgewogIAl2YXIgdmFsdWUgPSBlbC5zdHlsZVtzdHlsZV0gfHwgKGVsLmN1cnJlbnRTdHlsZSAmJiBlbC5jdXJyZW50U3R5bGVbc3R5bGVdKTsKCiAgCWlmICgoIXZhbHVlIHx8IHZhbHVlID09PSAnYXV0bycpICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3KSB7CiAgCQl2YXIgY3NzID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7CiAgCQl2YWx1ZSA9IGNzcyA/IGNzc1tzdHlsZV0gOiBudWxsOwogIAl9CiAgCXJldHVybiB2YWx1ZSA9PT0gJ2F1dG8nID8gbnVsbCA6IHZhbHVlOwogIH0KCiAgLy8gQGZ1bmN0aW9uIGNyZWF0ZSh0YWdOYW1lOiBTdHJpbmcsIGNsYXNzTmFtZT86IFN0cmluZywgY29udGFpbmVyPzogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudAogIC8vIENyZWF0ZXMgYW4gSFRNTCBlbGVtZW50IHdpdGggYHRhZ05hbWVgLCBzZXRzIGl0cyBjbGFzcyB0byBgY2xhc3NOYW1lYCwgYW5kIG9wdGlvbmFsbHkgYXBwZW5kcyBpdCB0byBgY29udGFpbmVyYCBlbGVtZW50LgogIGZ1bmN0aW9uIGNyZWF0ZSQxKHRhZ05hbWUsIGNsYXNzTmFtZSwgY29udGFpbmVyKSB7CiAgCXZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7CiAgCWVsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAnJzsKCiAgCWlmIChjb250YWluZXIpIHsKICAJCWNvbnRhaW5lci5hcHBlbmRDaGlsZChlbCk7CiAgCX0KICAJcmV0dXJuIGVsOwogIH0KCiAgLy8gQGZ1bmN0aW9uIHJlbW92ZShlbDogSFRNTEVsZW1lbnQpCiAgLy8gUmVtb3ZlcyBgZWxgIGZyb20gaXRzIHBhcmVudCBlbGVtZW50CiAgZnVuY3Rpb24gcmVtb3ZlKGVsKSB7CiAgCXZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlOwogIAlpZiAocGFyZW50KSB7CiAgCQlwYXJlbnQucmVtb3ZlQ2hpbGQoZWwpOwogIAl9CiAgfQoKICAvLyBAZnVuY3Rpb24gZW1wdHkoZWw6IEhUTUxFbGVtZW50KQogIC8vIFJlbW92ZXMgYWxsIG9mIGBlbGAncyBjaGlsZHJlbiBlbGVtZW50cyBmcm9tIGBlbGAKICBmdW5jdGlvbiBlbXB0eShlbCkgewogIAl3aGlsZSAoZWwuZmlyc3RDaGlsZCkgewogIAkJZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7CiAgCX0KICB9CgogIC8vIEBmdW5jdGlvbiB0b0Zyb250KGVsOiBIVE1MRWxlbWVudCkKICAvLyBNYWtlcyBgZWxgIHRoZSBsYXN0IGNoaWxkIG9mIGl0cyBwYXJlbnQsIHNvIGl0IHJlbmRlcnMgaW4gZnJvbnQgb2YgdGhlIG90aGVyIGNoaWxkcmVuLgogIGZ1bmN0aW9uIHRvRnJvbnQoZWwpIHsKICAJdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7CiAgCWlmIChwYXJlbnQgJiYgcGFyZW50Lmxhc3RDaGlsZCAhPT0gZWwpIHsKICAJCXBhcmVudC5hcHBlbmRDaGlsZChlbCk7CiAgCX0KICB9CgogIC8vIEBmdW5jdGlvbiB0b0JhY2soZWw6IEhUTUxFbGVtZW50KQogIC8vIE1ha2VzIGBlbGAgdGhlIGZpcnN0IGNoaWxkIG9mIGl0cyBwYXJlbnQsIHNvIGl0IHJlbmRlcnMgYmVoaW5kIHRoZSBvdGhlciBjaGlsZHJlbi4KICBmdW5jdGlvbiB0b0JhY2soZWwpIHsKICAJdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7CiAgCWlmIChwYXJlbnQgJiYgcGFyZW50LmZpcnN0Q2hpbGQgIT09IGVsKSB7CiAgCQlwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsLCBwYXJlbnQuZmlyc3RDaGlsZCk7CiAgCX0KICB9CgogIC8vIEBmdW5jdGlvbiBoYXNDbGFzcyhlbDogSFRNTEVsZW1lbnQsIG5hbWU6IFN0cmluZyk6IEJvb2xlYW4KICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZSBjb250YWlucyBgbmFtZWAuCiAgZnVuY3Rpb24gaGFzQ2xhc3MoZWwsIG5hbWUpIHsKICAJaWYgKGVsLmNsYXNzTGlzdCAhPT0gdW5kZWZpbmVkKSB7CiAgCQlyZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpOwogIAl9CiAgCXZhciBjbGFzc05hbWUgPSBnZXRDbGFzcyhlbCk7CiAgCXJldHVybiBjbGFzc05hbWUubGVuZ3RoID4gMCAmJiBuZXcgUmVnRXhwKCcoXnxcXHMpJyArIG5hbWUgKyAnKFxcc3wkKScpLnRlc3QoY2xhc3NOYW1lKTsKICB9CgogIC8vIEBmdW5jdGlvbiBhZGRDbGFzcyhlbDogSFRNTEVsZW1lbnQsIG5hbWU6IFN0cmluZykKICAvLyBBZGRzIGBuYW1lYCB0byB0aGUgZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZS4KICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgbmFtZSkgewogIAlpZiAoZWwuY2xhc3NMaXN0ICE9PSB1bmRlZmluZWQpIHsKICAJCXZhciBjbGFzc2VzID0gc3BsaXRXb3JkcyhuYW1lKTsKICAJCWZvciAodmFyIGkgPSAwLCBsZW4gPSBjbGFzc2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJZWwuY2xhc3NMaXN0LmFkZChjbGFzc2VzW2ldKTsKICAJCX0KICAJfSBlbHNlIGlmICghaGFzQ2xhc3MoZWwsIG5hbWUpKSB7CiAgCQl2YXIgY2xhc3NOYW1lID0gZ2V0Q2xhc3MoZWwpOwogIAkJc2V0Q2xhc3MoZWwsIChjbGFzc05hbWUgPyBjbGFzc05hbWUgKyAnICcgOiAnJykgKyBuYW1lKTsKICAJfQogIH0KCiAgLy8gQGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsOiBIVE1MRWxlbWVudCwgbmFtZTogU3RyaW5nKQogIC8vIFJlbW92ZXMgYG5hbWVgIGZyb20gdGhlIGVsZW1lbnQncyBjbGFzcyBhdHRyaWJ1dGUuCiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpIHsKICAJaWYgKGVsLmNsYXNzTGlzdCAhPT0gdW5kZWZpbmVkKSB7CiAgCQllbC5jbGFzc0xpc3QucmVtb3ZlKG5hbWUpOwogIAl9IGVsc2UgewogIAkJc2V0Q2xhc3MoZWwsIHRyaW0oKCcgJyArIGdldENsYXNzKGVsKSArICcgJykucmVwbGFjZSgnICcgKyBuYW1lICsgJyAnLCAnICcpKSk7CiAgCX0KICB9CgogIC8vIEBmdW5jdGlvbiBzZXRDbGFzcyhlbDogSFRNTEVsZW1lbnQsIG5hbWU6IFN0cmluZykKICAvLyBTZXRzIHRoZSBlbGVtZW50J3MgY2xhc3MuCiAgZnVuY3Rpb24gc2V0Q2xhc3MoZWwsIG5hbWUpIHsKICAJaWYgKGVsLmNsYXNzTmFtZS5iYXNlVmFsID09PSB1bmRlZmluZWQpIHsKICAJCWVsLmNsYXNzTmFtZSA9IG5hbWU7CiAgCX0gZWxzZSB7CiAgCQkvLyBpbiBjYXNlIG9mIFNWRyBlbGVtZW50CiAgCQllbC5jbGFzc05hbWUuYmFzZVZhbCA9IG5hbWU7CiAgCX0KICB9CgogIC8vIEBmdW5jdGlvbiBnZXRDbGFzcyhlbDogSFRNTEVsZW1lbnQpOiBTdHJpbmcKICAvLyBSZXR1cm5zIHRoZSBlbGVtZW50J3MgY2xhc3MuCiAgZnVuY3Rpb24gZ2V0Q2xhc3MoZWwpIHsKICAJLy8gQ2hlY2sgaWYgdGhlIGVsZW1lbnQgaXMgYW4gU1ZHRWxlbWVudEluc3RhbmNlIGFuZCB1c2UgdGhlIGNvcnJlc3BvbmRpbmdFbGVtZW50IGluc3RlYWQKICAJLy8gKFJlcXVpcmVkIGZvciBsaW5rZWQgU1ZHIGVsZW1lbnRzIGluIElFMTEuKQogIAlpZiAoZWwuY29ycmVzcG9uZGluZ0VsZW1lbnQpIHsKICAJCWVsID0gZWwuY29ycmVzcG9uZGluZ0VsZW1lbnQ7CiAgCX0KICAJcmV0dXJuIGVsLmNsYXNzTmFtZS5iYXNlVmFsID09PSB1bmRlZmluZWQgPyBlbC5jbGFzc05hbWUgOiBlbC5jbGFzc05hbWUuYmFzZVZhbDsKICB9CgogIC8vIEBmdW5jdGlvbiBzZXRPcGFjaXR5KGVsOiBIVE1MRWxlbWVudCwgb3BhY2l0eTogTnVtYmVyKQogIC8vIFNldCB0aGUgb3BhY2l0eSBvZiBhbiBlbGVtZW50IChpbmNsdWRpbmcgb2xkIElFIHN1cHBvcnQpLgogIC8vIGBvcGFjaXR5YCBtdXN0IGJlIGEgbnVtYmVyIGZyb20gYDBgIHRvIGAxYC4KICBmdW5jdGlvbiBzZXRPcGFjaXR5KGVsLCB2YWx1ZSkgewogIAlpZiAoJ29wYWNpdHknIGluIGVsLnN0eWxlKSB7CiAgCQllbC5zdHlsZS5vcGFjaXR5ID0gdmFsdWU7CiAgCX0gZWxzZSBpZiAoJ2ZpbHRlcicgaW4gZWwuc3R5bGUpIHsKICAJCV9zZXRPcGFjaXR5SUUoZWwsIHZhbHVlKTsKICAJfQogIH0KCiAgZnVuY3Rpb24gX3NldE9wYWNpdHlJRShlbCwgdmFsdWUpIHsKICAJdmFyIGZpbHRlciA9IGZhbHNlLAogIAkgICAgZmlsdGVyTmFtZSA9ICdEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYSc7CgogIAkvLyBmaWx0ZXJzIGNvbGxlY3Rpb24gdGhyb3dzIGFuIGVycm9yIGlmIHdlIHRyeSB0byByZXRyaWV2ZSBhIGZpbHRlciB0aGF0IGRvZXNuJ3QgZXhpc3QKICAJdHJ5IHsKICAJCWZpbHRlciA9IGVsLmZpbHRlcnMuaXRlbShmaWx0ZXJOYW1lKTsKICAJfSBjYXRjaCAoZSkgewogIAkJLy8gZG9uJ3Qgc2V0IG9wYWNpdHkgdG8gMSBpZiB3ZSBoYXZlbid0IGFscmVhZHkgc2V0IGFuIG9wYWNpdHksCiAgCQkvLyBpdCBpc24ndCBuZWVkZWQgYW5kIGJyZWFrcyB0cmFuc3BhcmVudCBwbmdzLgogIAkJaWYgKHZhbHVlID09PSAxKSB7IHJldHVybjsgfQogIAl9CgogIAl2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUgKiAxMDApOwoKICAJaWYgKGZpbHRlcikgewogIAkJZmlsdGVyLkVuYWJsZWQgPSAodmFsdWUgIT09IDEwMCk7CiAgCQlmaWx0ZXIuT3BhY2l0eSA9IHZhbHVlOwogIAl9IGVsc2UgewogIAkJZWwuc3R5bGUuZmlsdGVyICs9ICcgcHJvZ2lkOicgKyBmaWx0ZXJOYW1lICsgJyhvcGFjaXR5PScgKyB2YWx1ZSArICcpJzsKICAJfQogIH0KCiAgLy8gQGZ1bmN0aW9uIHRlc3RQcm9wKHByb3BzOiBTdHJpbmdbXSk6IFN0cmluZ3xmYWxzZQogIC8vIEdvZXMgdGhyb3VnaCB0aGUgYXJyYXkgb2Ygc3R5bGUgbmFtZXMgYW5kIHJldHVybnMgdGhlIGZpcnN0IG5hbWUKICAvLyB0aGF0IGlzIGEgdmFsaWQgc3R5bGUgbmFtZSBmb3IgYW4gZWxlbWVudC4gSWYgbm8gc3VjaCBuYW1lIGlzIGZvdW5kLAogIC8vIGl0IHJldHVybnMgZmFsc2UuIFVzZWZ1bCBmb3IgdmVuZG9yLXByZWZpeGVkIHN0eWxlcyBsaWtlIGB0cmFuc2Zvcm1gLgogIGZ1bmN0aW9uIHRlc3RQcm9wKHByb3BzKSB7CiAgCXZhciBzdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTsKCiAgCWZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAJCWlmIChwcm9wc1tpXSBpbiBzdHlsZSkgewogIAkJCXJldHVybiBwcm9wc1tpXTsKICAJCX0KICAJfQogIAlyZXR1cm4gZmFsc2U7CiAgfQoKICAvLyBAZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGVsOiBIVE1MRWxlbWVudCwgb2Zmc2V0OiBQb2ludCwgc2NhbGU/OiBOdW1iZXIpCiAgLy8gUmVzZXRzIHRoZSAzRCBDU1MgdHJhbnNmb3JtIG9mIGBlbGAgc28gaXQgaXMgdHJhbnNsYXRlZCBieSBgb2Zmc2V0YCBwaXhlbHMKICAvLyBhbmQgb3B0aW9uYWxseSBzY2FsZWQgYnkgYHNjYWxlYC4gRG9lcyBub3QgaGF2ZSBhbiBlZmZlY3QgaWYgdGhlCiAgLy8gYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgM0QgQ1NTIHRyYW5zZm9ybXMuCiAgZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGVsLCBvZmZzZXQsIHNjYWxlKSB7CiAgCXZhciBwb3MgPSBvZmZzZXQgfHwgbmV3IFBvaW50KDAsIDApOwoKICAJZWwuc3R5bGVbVFJBTlNGT1JNXSA9CiAgCQkoQnJvd3Nlci5pZTNkID8KICAJCQkndHJhbnNsYXRlKCcgKyBwb3MueCArICdweCwnICsgcG9zLnkgKyAncHgpJyA6CiAgCQkJJ3RyYW5zbGF0ZTNkKCcgKyBwb3MueCArICdweCwnICsgcG9zLnkgKyAncHgsMCknKSArCiAgCQkoc2NhbGUgPyAnIHNjYWxlKCcgKyBzY2FsZSArICcpJyA6ICcnKTsKICB9CgogIC8vIEBmdW5jdGlvbiBzZXRQb3NpdGlvbihlbDogSFRNTEVsZW1lbnQsIHBvc2l0aW9uOiBQb2ludCkKICAvLyBTZXRzIHRoZSBwb3NpdGlvbiBvZiBgZWxgIHRvIGNvb3JkaW5hdGVzIHNwZWNpZmllZCBieSBgcG9zaXRpb25gLAogIC8vIHVzaW5nIENTUyB0cmFuc2xhdGUgb3IgdG9wL2xlZnQgcG9zaXRpb25pbmcgZGVwZW5kaW5nIG9uIHRoZSBicm93c2VyCiAgLy8gKHVzZWQgYnkgTGVhZmxldCBpbnRlcm5hbGx5IHRvIHBvc2l0aW9uIGl0cyBsYXllcnMpLgogIGZ1bmN0aW9uIHNldFBvc2l0aW9uKGVsLCBwb2ludCkgewoKICAJLyplc2xpbnQtZGlzYWJsZSAqLwogIAllbC5fbGVhZmxldF9wb3MgPSBwb2ludDsKICAJLyogZXNsaW50LWVuYWJsZSAqLwoKICAJaWYgKEJyb3dzZXIuYW55M2QpIHsKICAJCXNldFRyYW5zZm9ybShlbCwgcG9pbnQpOwogIAl9IGVsc2UgewogIAkJZWwuc3R5bGUubGVmdCA9IHBvaW50LnggKyAncHgnOwogIAkJZWwuc3R5bGUudG9wID0gcG9pbnQueSArICdweCc7CiAgCX0KICB9CgogIC8vIEBmdW5jdGlvbiBnZXRQb3NpdGlvbihlbDogSFRNTEVsZW1lbnQpOiBQb2ludAogIC8vIFJldHVybnMgdGhlIGNvb3JkaW5hdGVzIG9mIGFuIGVsZW1lbnQgcHJldmlvdXNseSBwb3NpdGlvbmVkIHdpdGggc2V0UG9zaXRpb24uCiAgZnVuY3Rpb24gZ2V0UG9zaXRpb24oZWwpIHsKICAJLy8gdGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGZvciBlbGVtZW50cyBwcmV2aW91c2x5IHBvc2l0aW9uZWQgdXNpbmcgc2V0UG9zaXRpb24sCiAgCS8vIHNvIGl0J3Mgc2FmZSB0byBjYWNoZSB0aGUgcG9zaXRpb24gZm9yIHBlcmZvcm1hbmNlCgogIAlyZXR1cm4gZWwuX2xlYWZsZXRfcG9zIHx8IG5ldyBQb2ludCgwLCAwKTsKICB9CgogIC8vIEBmdW5jdGlvbiBkaXNhYmxlVGV4dFNlbGVjdGlvbigpCiAgLy8gUHJldmVudHMgdGhlIHVzZXIgZnJvbSBnZW5lcmF0aW5nIGBzZWxlY3RzdGFydGAgRE9NIGV2ZW50cywgdXN1YWxseSBnZW5lcmF0ZWQKICAvLyB3aGVuIHRoZSB1c2VyIGRyYWdzIHRoZSBtb3VzZSB0aHJvdWdoIGEgcGFnZSB3aXRoIHRleHQuIFVzZWQgaW50ZXJuYWxseQogIC8vIGJ5IExlYWZsZXQgdG8gb3ZlcnJpZGUgdGhlIGJlaGF2aW91ciBvZiBhbnkgY2xpY2stYW5kLWRyYWcgaW50ZXJhY3Rpb24gb24KICAvLyB0aGUgbWFwLiBBZmZlY3RzIGRyYWcgaW50ZXJhY3Rpb25zIG9uIHRoZSB3aG9sZSBkb2N1bWVudC4KCiAgLy8gQGZ1bmN0aW9uIGVuYWJsZVRleHRTZWxlY3Rpb24oKQogIC8vIENhbmNlbHMgdGhlIGVmZmVjdHMgb2YgYSBwcmV2aW91cyBbYEwuRG9tVXRpbC5kaXNhYmxlVGV4dFNlbGVjdGlvbmBdKCNkb211dGlsLWRpc2FibGV0ZXh0c2VsZWN0aW9uKS4KICB2YXIgZGlzYWJsZVRleHRTZWxlY3Rpb247CiAgdmFyIGVuYWJsZVRleHRTZWxlY3Rpb247CiAgdmFyIF91c2VyU2VsZWN0OwogIGlmICgnb25zZWxlY3RzdGFydCcgaW4gZG9jdW1lbnQpIHsKICAJZGlzYWJsZVRleHRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7CiAgCQlvbih3aW5kb3csICdzZWxlY3RzdGFydCcsIHByZXZlbnREZWZhdWx0KTsKICAJfTsKICAJZW5hYmxlVGV4dFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAJCW9mZih3aW5kb3csICdzZWxlY3RzdGFydCcsIHByZXZlbnREZWZhdWx0KTsKICAJfTsKICB9IGVsc2UgewogIAl2YXIgdXNlclNlbGVjdFByb3BlcnR5ID0gdGVzdFByb3AoCiAgCQlbJ3VzZXJTZWxlY3QnLCAnV2Via2l0VXNlclNlbGVjdCcsICdPVXNlclNlbGVjdCcsICdNb3pVc2VyU2VsZWN0JywgJ21zVXNlclNlbGVjdCddKTsKCiAgCWRpc2FibGVUZXh0U2VsZWN0aW9uID0gZnVuY3Rpb24gKCkgewogIAkJaWYgKHVzZXJTZWxlY3RQcm9wZXJ0eSkgewogIAkJCXZhciBzdHlsZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTsKICAJCQlfdXNlclNlbGVjdCA9IHN0eWxlW3VzZXJTZWxlY3RQcm9wZXJ0eV07CiAgCQkJc3R5bGVbdXNlclNlbGVjdFByb3BlcnR5XSA9ICdub25lJzsKICAJCX0KICAJfTsKICAJZW5hYmxlVGV4dFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAJCWlmICh1c2VyU2VsZWN0UHJvcGVydHkpIHsKICAJCQlkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGVbdXNlclNlbGVjdFByb3BlcnR5XSA9IF91c2VyU2VsZWN0OwogIAkJCV91c2VyU2VsZWN0ID0gdW5kZWZpbmVkOwogIAkJfQogIAl9OwogIH0KCiAgLy8gQGZ1bmN0aW9uIGRpc2FibGVJbWFnZURyYWcoKQogIC8vIEFzIFtgTC5Eb21VdGlsLmRpc2FibGVUZXh0U2VsZWN0aW9uYF0oI2RvbXV0aWwtZGlzYWJsZXRleHRzZWxlY3Rpb24pLCBidXQKICAvLyBmb3IgYGRyYWdzdGFydGAgRE9NIGV2ZW50cywgdXN1YWxseSBnZW5lcmF0ZWQgd2hlbiB0aGUgdXNlciBkcmFncyBhbiBpbWFnZS4KICBmdW5jdGlvbiBkaXNhYmxlSW1hZ2VEcmFnKCkgewogIAlvbih3aW5kb3csICdkcmFnc3RhcnQnLCBwcmV2ZW50RGVmYXVsdCk7CiAgfQoKICAvLyBAZnVuY3Rpb24gZW5hYmxlSW1hZ2VEcmFnKCkKICAvLyBDYW5jZWxzIHRoZSBlZmZlY3RzIG9mIGEgcHJldmlvdXMgW2BMLkRvbVV0aWwuZGlzYWJsZUltYWdlRHJhZ2BdKCNkb211dGlsLWRpc2FibGV0ZXh0c2VsZWN0aW9uKS4KICBmdW5jdGlvbiBlbmFibGVJbWFnZURyYWcoKSB7CiAgCW9mZih3aW5kb3csICdkcmFnc3RhcnQnLCBwcmV2ZW50RGVmYXVsdCk7CiAgfQoKICB2YXIgX291dGxpbmVFbGVtZW50LCBfb3V0bGluZVN0eWxlOwogIC8vIEBmdW5jdGlvbiBwcmV2ZW50T3V0bGluZShlbDogSFRNTEVsZW1lbnQpCiAgLy8gTWFrZXMgdGhlIFtvdXRsaW5lXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9DU1Mvb3V0bGluZSkKICAvLyBvZiB0aGUgZWxlbWVudCBgZWxgIGludmlzaWJsZS4gVXNlZCBpbnRlcm5hbGx5IGJ5IExlYWZsZXQgdG8gcHJldmVudAogIC8vIGZvY3VzYWJsZSBlbGVtZW50cyBmcm9tIGRpc3BsYXlpbmcgYW4gb3V0bGluZSB3aGVuIHRoZSB1c2VyIHBlcmZvcm1zIGEKICAvLyBkcmFnIGludGVyYWN0aW9uIG9uIHRoZW0uCiAgZnVuY3Rpb24gcHJldmVudE91dGxpbmUoZWxlbWVudCkgewogIAl3aGlsZSAoZWxlbWVudC50YWJJbmRleCA9PT0gLTEpIHsKICAJCWVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7CiAgCX0KICAJaWYgKCFlbGVtZW50LnN0eWxlKSB7IHJldHVybjsgfQogIAlyZXN0b3JlT3V0bGluZSgpOwogIAlfb3V0bGluZUVsZW1lbnQgPSBlbGVtZW50OwogIAlfb3V0bGluZVN0eWxlID0gZWxlbWVudC5zdHlsZS5vdXRsaW5lOwogIAllbGVtZW50LnN0eWxlLm91dGxpbmUgPSAnbm9uZSc7CiAgCW9uKHdpbmRvdywgJ2tleWRvd24nLCByZXN0b3JlT3V0bGluZSk7CiAgfQoKICAvLyBAZnVuY3Rpb24gcmVzdG9yZU91dGxpbmUoKQogIC8vIENhbmNlbHMgdGhlIGVmZmVjdHMgb2YgYSBwcmV2aW91cyBbYEwuRG9tVXRpbC5wcmV2ZW50T3V0bGluZWBdKCkuCiAgZnVuY3Rpb24gcmVzdG9yZU91dGxpbmUoKSB7CiAgCWlmICghX291dGxpbmVFbGVtZW50KSB7IHJldHVybjsgfQogIAlfb3V0bGluZUVsZW1lbnQuc3R5bGUub3V0bGluZSA9IF9vdXRsaW5lU3R5bGU7CiAgCV9vdXRsaW5lRWxlbWVudCA9IHVuZGVmaW5lZDsKICAJX291dGxpbmVTdHlsZSA9IHVuZGVmaW5lZDsKICAJb2ZmKHdpbmRvdywgJ2tleWRvd24nLCByZXN0b3JlT3V0bGluZSk7CiAgfQoKICAvLyBAZnVuY3Rpb24gZ2V0U2l6ZWRQYXJlbnROb2RlKGVsOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50CiAgLy8gRmluZHMgdGhlIGNsb3Nlc3QgcGFyZW50IG5vZGUgd2hpY2ggc2l6ZSAod2lkdGggYW5kIGhlaWdodCkgaXMgbm90IG51bGwuCiAgZnVuY3Rpb24gZ2V0U2l6ZWRQYXJlbnROb2RlKGVsZW1lbnQpIHsKICAJZG8gewogIAkJZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTsKICAJfSB3aGlsZSAoKCFlbGVtZW50Lm9mZnNldFdpZHRoIHx8ICFlbGVtZW50Lm9mZnNldEhlaWdodCkgJiYgZWxlbWVudCAhPT0gZG9jdW1lbnQuYm9keSk7CiAgCXJldHVybiBlbGVtZW50OwogIH0KCiAgLy8gQGZ1bmN0aW9uIGdldFNjYWxlKGVsOiBIVE1MRWxlbWVudCk6IE9iamVjdAogIC8vIENvbXB1dGVzIHRoZSBDU1Mgc2NhbGUgY3VycmVudGx5IGFwcGxpZWQgb24gdGhlIGVsZW1lbnQuCiAgLy8gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgeGAgYW5kIGB5YCBtZW1iZXJzIGFzIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHNjYWxlcyByZXNwZWN0aXZlbHksCiAgLy8gYW5kIGBib3VuZGluZ0NsaWVudFJlY3RgIGFzIHRoZSByZXN1bHQgb2YgW2BnZXRCb3VuZGluZ0NsaWVudFJlY3QoKWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2dldEJvdW5kaW5nQ2xpZW50UmVjdCkuCiAgZnVuY3Rpb24gZ2V0U2NhbGUoZWxlbWVudCkgewogIAl2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIFJlYWQtb25seSBpbiBvbGQgYnJvd3NlcnMuCgogIAlyZXR1cm4gewogIAkJeDogcmVjdC53aWR0aCAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMSwKICAJCXk6IHJlY3QuaGVpZ2h0IC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMSwKICAJCWJvdW5kaW5nQ2xpZW50UmVjdDogcmVjdAogIAl9OwogIH0KCiAgdmFyIERvbVV0aWwgPSB7CiAgICBfX3Byb3RvX186IG51bGwsCiAgICBUUkFOU0ZPUk06IFRSQU5TRk9STSwKICAgIFRSQU5TSVRJT046IFRSQU5TSVRJT04sCiAgICBUUkFOU0lUSU9OX0VORDogVFJBTlNJVElPTl9FTkQsCiAgICBnZXQ6IGdldCwKICAgIGdldFN0eWxlOiBnZXRTdHlsZSwKICAgIGNyZWF0ZTogY3JlYXRlJDEsCiAgICByZW1vdmU6IHJlbW92ZSwKICAgIGVtcHR5OiBlbXB0eSwKICAgIHRvRnJvbnQ6IHRvRnJvbnQsCiAgICB0b0JhY2s6IHRvQmFjaywKICAgIGhhc0NsYXNzOiBoYXNDbGFzcywKICAgIGFkZENsYXNzOiBhZGRDbGFzcywKICAgIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcywKICAgIHNldENsYXNzOiBzZXRDbGFzcywKICAgIGdldENsYXNzOiBnZXRDbGFzcywKICAgIHNldE9wYWNpdHk6IHNldE9wYWNpdHksCiAgICB0ZXN0UHJvcDogdGVzdFByb3AsCiAgICBzZXRUcmFuc2Zvcm06IHNldFRyYW5zZm9ybSwKICAgIHNldFBvc2l0aW9uOiBzZXRQb3NpdGlvbiwKICAgIGdldFBvc2l0aW9uOiBnZXRQb3NpdGlvbiwKICAgIGdldCBkaXNhYmxlVGV4dFNlbGVjdGlvbiAoKSB7IHJldHVybiBkaXNhYmxlVGV4dFNlbGVjdGlvbjsgfSwKICAgIGdldCBlbmFibGVUZXh0U2VsZWN0aW9uICgpIHsgcmV0dXJuIGVuYWJsZVRleHRTZWxlY3Rpb247IH0sCiAgICBkaXNhYmxlSW1hZ2VEcmFnOiBkaXNhYmxlSW1hZ2VEcmFnLAogICAgZW5hYmxlSW1hZ2VEcmFnOiBlbmFibGVJbWFnZURyYWcsCiAgICBwcmV2ZW50T3V0bGluZTogcHJldmVudE91dGxpbmUsCiAgICByZXN0b3JlT3V0bGluZTogcmVzdG9yZU91dGxpbmUsCiAgICBnZXRTaXplZFBhcmVudE5vZGU6IGdldFNpemVkUGFyZW50Tm9kZSwKICAgIGdldFNjYWxlOiBnZXRTY2FsZQogIH07CgogIC8qCiAgICogQG5hbWVzcGFjZSBEb21FdmVudAogICAqIFV0aWxpdHkgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aCB0aGUgW0RPTSBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9FdmVudCksIHVzZWQgYnkgTGVhZmxldCBpbnRlcm5hbGx5LgogICAqLwoKICAvLyBJbnNwaXJlZCBieSBKb2huIFJlc2lnLCBEZWFuIEVkd2FyZHMgYW5kIFlVSSBhZGRFdmVudCBpbXBsZW1lbnRhdGlvbnMuCgogIC8vIEBmdW5jdGlvbiBvbihlbDogSFRNTEVsZW1lbnQsIHR5cGVzOiBTdHJpbmcsIGZuOiBGdW5jdGlvbiwgY29udGV4dD86IE9iamVjdCk6IHRoaXMKICAvLyBBZGRzIGEgbGlzdGVuZXIgZnVuY3Rpb24gKGBmbmApIHRvIGEgcGFydGljdWxhciBET00gZXZlbnQgdHlwZSBvZiB0aGUKICAvLyBlbGVtZW50IGBlbGAuIFlvdSBjYW4gb3B0aW9uYWxseSBzcGVjaWZ5IHRoZSBjb250ZXh0IG9mIHRoZSBsaXN0ZW5lcgogIC8vIChvYmplY3QgdGhlIGB0aGlzYCBrZXl3b3JkIHdpbGwgcG9pbnQgdG8pLiBZb3UgY2FuIGFsc28gcGFzcyBzZXZlcmFsCiAgLy8gc3BhY2Utc2VwYXJhdGVkIHR5cGVzIChlLmcuIGAnY2xpY2sgZGJsY2xpY2snYCkuCgogIC8vIEBhbHRlcm5hdGl2ZQogIC8vIEBmdW5jdGlvbiBvbihlbDogSFRNTEVsZW1lbnQsIGV2ZW50TWFwOiBPYmplY3QsIGNvbnRleHQ/OiBPYmplY3QpOiB0aGlzCiAgLy8gQWRkcyBhIHNldCBvZiB0eXBlL2xpc3RlbmVyIHBhaXJzLCBlLmcuIGB7Y2xpY2s6IG9uQ2xpY2ssIG1vdXNlbW92ZTogb25Nb3VzZU1vdmV9YAogIGZ1bmN0aW9uIG9uKG9iaiwgdHlwZXMsIGZuLCBjb250ZXh0KSB7CgogIAlpZiAodHlwZXMgJiYgdHlwZW9mIHR5cGVzID09PSAnb2JqZWN0JykgewogIAkJZm9yICh2YXIgdHlwZSBpbiB0eXBlcykgewogIAkJCWFkZE9uZShvYmosIHR5cGUsIHR5cGVzW3R5cGVdLCBmbik7CiAgCQl9CiAgCX0gZWxzZSB7CiAgCQl0eXBlcyA9IHNwbGl0V29yZHModHlwZXMpOwoKICAJCWZvciAodmFyIGkgPSAwLCBsZW4gPSB0eXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJCWFkZE9uZShvYmosIHR5cGVzW2ldLCBmbiwgY29udGV4dCk7CiAgCQl9CiAgCX0KCiAgCXJldHVybiB0aGlzOwogIH0KCiAgdmFyIGV2ZW50c0tleSA9ICdfbGVhZmxldF9ldmVudHMnOwoKICAvLyBAZnVuY3Rpb24gb2ZmKGVsOiBIVE1MRWxlbWVudCwgdHlwZXM6IFN0cmluZywgZm46IEZ1bmN0aW9uLCBjb250ZXh0PzogT2JqZWN0KTogdGhpcwogIC8vIFJlbW92ZXMgYSBwcmV2aW91c2x5IGFkZGVkIGxpc3RlbmVyIGZ1bmN0aW9uLgogIC8vIE5vdGUgdGhhdCBpZiB5b3UgcGFzc2VkIGEgY3VzdG9tIGNvbnRleHQgdG8gb24sIHlvdSBtdXN0IHBhc3MgdGhlIHNhbWUKICAvLyBjb250ZXh0IHRvIGBvZmZgIGluIG9yZGVyIHRvIHJlbW92ZSB0aGUgbGlzdGVuZXIuCgogIC8vIEBhbHRlcm5hdGl2ZQogIC8vIEBmdW5jdGlvbiBvZmYoZWw6IEhUTUxFbGVtZW50LCBldmVudE1hcDogT2JqZWN0LCBjb250ZXh0PzogT2JqZWN0KTogdGhpcwogIC8vIFJlbW92ZXMgYSBzZXQgb2YgdHlwZS9saXN0ZW5lciBwYWlycywgZS5nLiBge2NsaWNrOiBvbkNsaWNrLCBtb3VzZW1vdmU6IG9uTW91c2VNb3ZlfWAKCiAgLy8gQGFsdGVybmF0aXZlCiAgLy8gQGZ1bmN0aW9uIG9mZihlbDogSFRNTEVsZW1lbnQsIHR5cGVzOiBTdHJpbmcpOiB0aGlzCiAgLy8gUmVtb3ZlcyBhbGwgcHJldmlvdXNseSBhZGRlZCBsaXN0ZW5lcnMgb2YgZ2l2ZW4gdHlwZXMuCgogIC8vIEBhbHRlcm5hdGl2ZQogIC8vIEBmdW5jdGlvbiBvZmYoZWw6IEhUTUxFbGVtZW50KTogdGhpcwogIC8vIFJlbW92ZXMgYWxsIHByZXZpb3VzbHkgYWRkZWQgbGlzdGVuZXJzIGZyb20gZ2l2ZW4gSFRNTEVsZW1lbnQKICBmdW5jdGlvbiBvZmYob2JqLCB0eXBlcywgZm4sIGNvbnRleHQpIHsKCiAgCWlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7CiAgCQliYXRjaFJlbW92ZShvYmopOwogIAkJZGVsZXRlIG9ialtldmVudHNLZXldOwoKICAJfSBlbHNlIGlmICh0eXBlcyAmJiB0eXBlb2YgdHlwZXMgPT09ICdvYmplY3QnKSB7CiAgCQlmb3IgKHZhciB0eXBlIGluIHR5cGVzKSB7CiAgCQkJcmVtb3ZlT25lKG9iaiwgdHlwZSwgdHlwZXNbdHlwZV0sIGZuKTsKICAJCX0KCiAgCX0gZWxzZSB7CiAgCQl0eXBlcyA9IHNwbGl0V29yZHModHlwZXMpOwoKICAJCWlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7CiAgCQkJYmF0Y2hSZW1vdmUob2JqLCBmdW5jdGlvbiAodHlwZSkgewogIAkJCQlyZXR1cm4gaW5kZXhPZih0eXBlcywgdHlwZSkgIT09IC0xOwogIAkJCX0pOwogIAkJfSBlbHNlIHsKICAJCQlmb3IgKHZhciBpID0gMCwgbGVuID0gdHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCQkJcmVtb3ZlT25lKG9iaiwgdHlwZXNbaV0sIGZuLCBjb250ZXh0KTsKICAJCQl9CiAgCQl9CiAgCX0KCiAgCXJldHVybiB0aGlzOwogIH0KCiAgZnVuY3Rpb24gYmF0Y2hSZW1vdmUob2JqLCBmaWx0ZXJGbikgewogIAlmb3IgKHZhciBpZCBpbiBvYmpbZXZlbnRzS2V5XSkgewogIAkJdmFyIHR5cGUgPSBpZC5zcGxpdCgvXGQvKVswXTsKICAJCWlmICghZmlsdGVyRm4gfHwgZmlsdGVyRm4odHlwZSkpIHsKICAJCQlyZW1vdmVPbmUob2JqLCB0eXBlLCBudWxsLCBudWxsLCBpZCk7CiAgCQl9CiAgCX0KICB9CgogIHZhciBtb3VzZVN1YnN0ID0gewogIAltb3VzZWVudGVyOiAnbW91c2VvdmVyJywKICAJbW91c2VsZWF2ZTogJ21vdXNlb3V0JywKICAJd2hlZWw6ICEoJ29ud2hlZWwnIGluIHdpbmRvdykgJiYgJ21vdXNld2hlZWwnCiAgfTsKCiAgZnVuY3Rpb24gYWRkT25lKG9iaiwgdHlwZSwgZm4sIGNvbnRleHQpIHsKICAJdmFyIGlkID0gdHlwZSArIHN0YW1wKGZuKSArIChjb250ZXh0ID8gJ18nICsgc3RhbXAoY29udGV4dCkgOiAnJyk7CgogIAlpZiAob2JqW2V2ZW50c0tleV0gJiYgb2JqW2V2ZW50c0tleV1baWRdKSB7IHJldHVybiB0aGlzOyB9CgogIAl2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7CiAgCQlyZXR1cm4gZm4uY2FsbChjb250ZXh0IHx8IG9iaiwgZSB8fCB3aW5kb3cuZXZlbnQpOwogIAl9OwoKICAJdmFyIG9yaWdpbmFsSGFuZGxlciA9IGhhbmRsZXI7CgogIAlpZiAoIUJyb3dzZXIudG91Y2hOYXRpdmUgJiYgQnJvd3Nlci5wb2ludGVyICYmIHR5cGUuaW5kZXhPZigndG91Y2gnKSA9PT0gMCkgewogIAkJLy8gTmVlZHMgRG9tRXZlbnQuUG9pbnRlci5qcwogIAkJaGFuZGxlciA9IGFkZFBvaW50ZXJMaXN0ZW5lcihvYmosIHR5cGUsIGhhbmRsZXIpOwoKICAJfSBlbHNlIGlmIChCcm93c2VyLnRvdWNoICYmICh0eXBlID09PSAnZGJsY2xpY2snKSkgewogIAkJaGFuZGxlciA9IGFkZERvdWJsZVRhcExpc3RlbmVyKG9iaiwgaGFuZGxlcik7CgogIAl9IGVsc2UgaWYgKCdhZGRFdmVudExpc3RlbmVyJyBpbiBvYmopIHsKCiAgCQlpZiAodHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IHR5cGUgPT09ICd0b3VjaG1vdmUnIHx8IHR5cGUgPT09ICd3aGVlbCcgfHwgIHR5cGUgPT09ICdtb3VzZXdoZWVsJykgewogIAkJCW9iai5hZGRFdmVudExpc3RlbmVyKG1vdXNlU3Vic3RbdHlwZV0gfHwgdHlwZSwgaGFuZGxlciwgQnJvd3Nlci5wYXNzaXZlRXZlbnRzID8ge3Bhc3NpdmU6IGZhbHNlfSA6IGZhbHNlKTsKCiAgCQl9IGVsc2UgaWYgKHR5cGUgPT09ICdtb3VzZWVudGVyJyB8fCB0eXBlID09PSAnbW91c2VsZWF2ZScpIHsKICAJCQloYW5kbGVyID0gZnVuY3Rpb24gKGUpIHsKICAJCQkJZSA9IGUgfHwgd2luZG93LmV2ZW50OwogIAkJCQlpZiAoaXNFeHRlcm5hbFRhcmdldChvYmosIGUpKSB7CiAgCQkJCQlvcmlnaW5hbEhhbmRsZXIoZSk7CiAgCQkJCX0KICAJCQl9OwogIAkJCW9iai5hZGRFdmVudExpc3RlbmVyKG1vdXNlU3Vic3RbdHlwZV0sIGhhbmRsZXIsIGZhbHNlKTsKCiAgCQl9IGVsc2UgewogIAkJCW9iai5hZGRFdmVudExpc3RlbmVyKHR5cGUsIG9yaWdpbmFsSGFuZGxlciwgZmFsc2UpOwogIAkJfQoKICAJfSBlbHNlIHsKICAJCW9iai5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgaGFuZGxlcik7CiAgCX0KCiAgCW9ialtldmVudHNLZXldID0gb2JqW2V2ZW50c0tleV0gfHwge307CiAgCW9ialtldmVudHNLZXldW2lkXSA9IGhhbmRsZXI7CiAgfQoKICBmdW5jdGlvbiByZW1vdmVPbmUob2JqLCB0eXBlLCBmbiwgY29udGV4dCwgaWQpIHsKICAJaWQgPSBpZCB8fCB0eXBlICsgc3RhbXAoZm4pICsgKGNvbnRleHQgPyAnXycgKyBzdGFtcChjb250ZXh0KSA6ICcnKTsKICAJdmFyIGhhbmRsZXIgPSBvYmpbZXZlbnRzS2V5XSAmJiBvYmpbZXZlbnRzS2V5XVtpZF07CgogIAlpZiAoIWhhbmRsZXIpIHsgcmV0dXJuIHRoaXM7IH0KCiAgCWlmICghQnJvd3Nlci50b3VjaE5hdGl2ZSAmJiBCcm93c2VyLnBvaW50ZXIgJiYgdHlwZS5pbmRleE9mKCd0b3VjaCcpID09PSAwKSB7CiAgCQlyZW1vdmVQb2ludGVyTGlzdGVuZXIob2JqLCB0eXBlLCBoYW5kbGVyKTsKCiAgCX0gZWxzZSBpZiAoQnJvd3Nlci50b3VjaCAmJiAodHlwZSA9PT0gJ2RibGNsaWNrJykpIHsKICAJCXJlbW92ZURvdWJsZVRhcExpc3RlbmVyKG9iaiwgaGFuZGxlcik7CgogIAl9IGVsc2UgaWYgKCdyZW1vdmVFdmVudExpc3RlbmVyJyBpbiBvYmopIHsKCiAgCQlvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcihtb3VzZVN1YnN0W3R5cGVdIHx8IHR5cGUsIGhhbmRsZXIsIGZhbHNlKTsKCiAgCX0gZWxzZSB7CiAgCQlvYmouZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGhhbmRsZXIpOwogIAl9CgogIAlvYmpbZXZlbnRzS2V5XVtpZF0gPSBudWxsOwogIH0KCiAgLy8gQGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbihldjogRE9NRXZlbnQpOiB0aGlzCiAgLy8gU3RvcCB0aGUgZ2l2ZW4gZXZlbnQgZnJvbSBwcm9wYWdhdGlvbiB0byBwYXJlbnQgZWxlbWVudHMuIFVzZWQgaW5zaWRlIHRoZSBsaXN0ZW5lciBmdW5jdGlvbnM6CiAgLy8gYGBganMKICAvLyBMLkRvbUV2ZW50Lm9uKGRpdiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2KSB7CiAgLy8gCUwuRG9tRXZlbnQuc3RvcFByb3BhZ2F0aW9uKGV2KTsKICAvLyB9KTsKICAvLyBgYGAKICBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oZSkgewoKICAJaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSB7CiAgCQllLnN0b3BQcm9wYWdhdGlvbigpOwogIAl9IGVsc2UgaWYgKGUub3JpZ2luYWxFdmVudCkgeyAgLy8gSW4gY2FzZSBvZiBMZWFmbGV0IGV2ZW50LgogIAkJZS5vcmlnaW5hbEV2ZW50Ll9zdG9wcGVkID0gdHJ1ZTsKICAJfSBlbHNlIHsKICAJCWUuY2FuY2VsQnViYmxlID0gdHJ1ZTsKICAJfQoKICAJcmV0dXJuIHRoaXM7CiAgfQoKICAvLyBAZnVuY3Rpb24gZGlzYWJsZVNjcm9sbFByb3BhZ2F0aW9uKGVsOiBIVE1MRWxlbWVudCk6IHRoaXMKICAvLyBBZGRzIGBzdG9wUHJvcGFnYXRpb25gIHRvIHRoZSBlbGVtZW50J3MgYCd3aGVlbCdgIGV2ZW50cyAocGx1cyBicm93c2VyIHZhcmlhbnRzKS4KICBmdW5jdGlvbiBkaXNhYmxlU2Nyb2xsUHJvcGFnYXRpb24oZWwpIHsKICAJYWRkT25lKGVsLCAnd2hlZWwnLCBzdG9wUHJvcGFnYXRpb24pOwogIAlyZXR1cm4gdGhpczsKICB9CgogIC8vIEBmdW5jdGlvbiBkaXNhYmxlQ2xpY2tQcm9wYWdhdGlvbihlbDogSFRNTEVsZW1lbnQpOiB0aGlzCiAgLy8gQWRkcyBgc3RvcFByb3BhZ2F0aW9uYCB0byB0aGUgZWxlbWVudCdzIGAnY2xpY2snYCwgYCdkYmxjbGljaydgLCBgJ2NvbnRleHRtZW51J2AsCiAgLy8gYCdtb3VzZWRvd24nYCBhbmQgYCd0b3VjaHN0YXJ0J2AgZXZlbnRzIChwbHVzIGJyb3dzZXIgdmFyaWFudHMpLgogIGZ1bmN0aW9uIGRpc2FibGVDbGlja1Byb3BhZ2F0aW9uKGVsKSB7CiAgCW9uKGVsLCAnbW91c2Vkb3duIHRvdWNoc3RhcnQgZGJsY2xpY2sgY29udGV4dG1lbnUnLCBzdG9wUHJvcGFnYXRpb24pOwogIAllbFsnX2xlYWZsZXRfZGlzYWJsZV9jbGljayddID0gdHJ1ZTsKICAJcmV0dXJuIHRoaXM7CiAgfQoKICAvLyBAZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZXY6IERPTUV2ZW50KTogdGhpcwogIC8vIFByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiBvZiB0aGUgRE9NIEV2ZW50IGBldmAgZnJvbSBoYXBwZW5pbmcgKHN1Y2ggYXMKICAvLyBmb2xsb3dpbmcgYSBsaW5rIGluIHRoZSBocmVmIG9mIHRoZSBhIGVsZW1lbnQsIG9yIGRvaW5nIGEgUE9TVCByZXF1ZXN0CiAgLy8gd2l0aCBwYWdlIHJlbG9hZCB3aGVuIGEgYDxmb3JtPmAgaXMgc3VibWl0dGVkKS4KICAvLyBVc2UgaXQgaW5zaWRlIGxpc3RlbmVyIGZ1bmN0aW9ucy4KICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChlKSB7CiAgCWlmIChlLnByZXZlbnREZWZhdWx0KSB7CiAgCQllLnByZXZlbnREZWZhdWx0KCk7CiAgCX0gZWxzZSB7CiAgCQllLnJldHVyblZhbHVlID0gZmFsc2U7CiAgCX0KICAJcmV0dXJuIHRoaXM7CiAgfQoKICAvLyBAZnVuY3Rpb24gc3RvcChldjogRE9NRXZlbnQpOiB0aGlzCiAgLy8gRG9lcyBgc3RvcFByb3BhZ2F0aW9uYCBhbmQgYHByZXZlbnREZWZhdWx0YCBhdCB0aGUgc2FtZSB0aW1lLgogIGZ1bmN0aW9uIHN0b3AoZSkgewogIAlwcmV2ZW50RGVmYXVsdChlKTsKICAJc3RvcFByb3BhZ2F0aW9uKGUpOwogIAlyZXR1cm4gdGhpczsKICB9CgogIC8vIEBmdW5jdGlvbiBnZXRNb3VzZVBvc2l0aW9uKGV2OiBET01FdmVudCwgY29udGFpbmVyPzogSFRNTEVsZW1lbnQpOiBQb2ludAogIC8vIEdldHMgbm9ybWFsaXplZCBtb3VzZSBwb3NpdGlvbiBmcm9tIGEgRE9NIGV2ZW50IHJlbGF0aXZlIHRvIHRoZQogIC8vIGBjb250YWluZXJgIChib3JkZXIgZXhjbHVkZWQpIG9yIHRvIHRoZSB3aG9sZSBwYWdlIGlmIG5vdCBzcGVjaWZpZWQuCiAgZnVuY3Rpb24gZ2V0TW91c2VQb3NpdGlvbihlLCBjb250YWluZXIpIHsKICAJaWYgKCFjb250YWluZXIpIHsKICAJCXJldHVybiBuZXcgUG9pbnQoZS5jbGllbnRYLCBlLmNsaWVudFkpOwogIAl9CgogIAl2YXIgc2NhbGUgPSBnZXRTY2FsZShjb250YWluZXIpLAogIAkgICAgb2Zmc2V0ID0gc2NhbGUuYm91bmRpbmdDbGllbnRSZWN0OyAvLyBsZWZ0IGFuZCB0b3AgIHZhbHVlcyBhcmUgaW4gcGFnZSBzY2FsZSAobGlrZSB0aGUgZXZlbnQgY2xpZW50WC9ZKQoKICAJcmV0dXJuIG5ldyBQb2ludCgKICAJCS8vIG9mZnNldC5sZWZ0L3RvcCB2YWx1ZXMgYXJlIGluIHBhZ2Ugc2NhbGUgKGxpa2UgY2xpZW50WC9ZKSwKICAJCS8vIHdoZXJlYXMgY2xpZW50TGVmdC9Ub3AgKGJvcmRlciB3aWR0aCkgdmFsdWVzIGFyZSB0aGUgb3JpZ2luYWwgdmFsdWVzIChiZWZvcmUgQ1NTIHNjYWxlIGFwcGxpZXMpLgogIAkJKGUuY2xpZW50WCAtIG9mZnNldC5sZWZ0KSAvIHNjYWxlLnggLSBjb250YWluZXIuY2xpZW50TGVmdCwKICAJCShlLmNsaWVudFkgLSBvZmZzZXQudG9wKSAvIHNjYWxlLnkgLSBjb250YWluZXIuY2xpZW50VG9wCiAgCSk7CiAgfQoKICAvLyBDaHJvbWUgb24gV2luIHNjcm9sbHMgZG91YmxlIHRoZSBwaXhlbHMgYXMgaW4gb3RoZXIgcGxhdGZvcm1zIChzZWUgIzQ1MzgpLAogIC8vIGFuZCBGaXJlZm94IHNjcm9sbHMgZGV2aWNlIHBpeGVscywgbm90IENTUyBwaXhlbHMKICB2YXIgd2hlZWxQeEZhY3RvciA9CiAgCShCcm93c2VyLndpbiAmJiBCcm93c2VyLmNocm9tZSkgPyAyICogd2luZG93LmRldmljZVBpeGVsUmF0aW8gOgogIAlCcm93c2VyLmdlY2tvID8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gOiAxOwoKICAvLyBAZnVuY3Rpb24gZ2V0V2hlZWxEZWx0YShldjogRE9NRXZlbnQpOiBOdW1iZXIKICAvLyBHZXRzIG5vcm1hbGl6ZWQgd2hlZWwgZGVsdGEgZnJvbSBhIHdoZWVsIERPTSBldmVudCwgaW4gdmVydGljYWwKICAvLyBwaXhlbHMgc2Nyb2xsZWQgKG5lZ2F0aXZlIGlmIHNjcm9sbGluZyBkb3duKS4KICAvLyBFdmVudHMgZnJvbSBwb2ludGluZyBkZXZpY2VzIHdpdGhvdXQgcHJlY2lzZSBzY3JvbGxpbmcgYXJlIG1hcHBlZCB0bwogIC8vIGEgYmVzdCBndWVzcyBvZiA2MCBwaXhlbHMuCiAgZnVuY3Rpb24gZ2V0V2hlZWxEZWx0YShlKSB7CiAgCXJldHVybiAoQnJvd3Nlci5lZGdlKSA/IGUud2hlZWxEZWx0YVkgLyAyIDogLy8gRG9uJ3QgdHJ1c3Qgd2luZG93LWdlb21ldHJ5LWJhc2VkIGRlbHRhCiAgCSAgICAgICAoZS5kZWx0YVkgJiYgZS5kZWx0YU1vZGUgPT09IDApID8gLWUuZGVsdGFZIC8gd2hlZWxQeEZhY3RvciA6IC8vIFBpeGVscwogIAkgICAgICAgKGUuZGVsdGFZICYmIGUuZGVsdGFNb2RlID09PSAxKSA/IC1lLmRlbHRhWSAqIDIwIDogLy8gTGluZXMKICAJICAgICAgIChlLmRlbHRhWSAmJiBlLmRlbHRhTW9kZSA9PT0gMikgPyAtZS5kZWx0YVkgKiA2MCA6IC8vIFBhZ2VzCiAgCSAgICAgICAoZS5kZWx0YVggfHwgZS5kZWx0YVopID8gMCA6CS8vIFNraXAgaG9yaXpvbnRhbC9kZXB0aCB3aGVlbCBldmVudHMKICAJICAgICAgIGUud2hlZWxEZWx0YSA/IChlLndoZWVsRGVsdGFZIHx8IGUud2hlZWxEZWx0YSkgLyAyIDogLy8gTGVnYWN5IElFIHBpeGVscwogIAkgICAgICAgKGUuZGV0YWlsICYmIE1hdGguYWJzKGUuZGV0YWlsKSA8IDMyNzY1KSA/IC1lLmRldGFpbCAqIDIwIDogLy8gTGVnYWN5IE1veiBsaW5lcwogIAkgICAgICAgZS5kZXRhaWwgPyBlLmRldGFpbCAvIC0zMjc2NSAqIDYwIDogLy8gTGVnYWN5IE1veiBwYWdlcwogIAkgICAgICAgMDsKICB9CgogIC8vIGNoZWNrIGlmIGVsZW1lbnQgcmVhbGx5IGxlZnQvZW50ZXJlZCB0aGUgZXZlbnQgdGFyZ2V0IChmb3IgbW91c2VlbnRlci9tb3VzZWxlYXZlKQogIGZ1bmN0aW9uIGlzRXh0ZXJuYWxUYXJnZXQoZWwsIGUpIHsKCiAgCXZhciByZWxhdGVkID0gZS5yZWxhdGVkVGFyZ2V0OwoKICAJaWYgKCFyZWxhdGVkKSB7IHJldHVybiB0cnVlOyB9CgogIAl0cnkgewogIAkJd2hpbGUgKHJlbGF0ZWQgJiYgKHJlbGF0ZWQgIT09IGVsKSkgewogIAkJCXJlbGF0ZWQgPSByZWxhdGVkLnBhcmVudE5vZGU7CiAgCQl9CiAgCX0gY2F0Y2ggKGVycikgewogIAkJcmV0dXJuIGZhbHNlOwogIAl9CiAgCXJldHVybiAocmVsYXRlZCAhPT0gZWwpOwogIH0KCiAgdmFyIERvbUV2ZW50ID0gewogICAgX19wcm90b19fOiBudWxsLAogICAgb246IG9uLAogICAgb2ZmOiBvZmYsCiAgICBzdG9wUHJvcGFnYXRpb246IHN0b3BQcm9wYWdhdGlvbiwKICAgIGRpc2FibGVTY3JvbGxQcm9wYWdhdGlvbjogZGlzYWJsZVNjcm9sbFByb3BhZ2F0aW9uLAogICAgZGlzYWJsZUNsaWNrUHJvcGFnYXRpb246IGRpc2FibGVDbGlja1Byb3BhZ2F0aW9uLAogICAgcHJldmVudERlZmF1bHQ6IHByZXZlbnREZWZhdWx0LAogICAgc3RvcDogc3RvcCwKICAgIGdldE1vdXNlUG9zaXRpb246IGdldE1vdXNlUG9zaXRpb24sCiAgICBnZXRXaGVlbERlbHRhOiBnZXRXaGVlbERlbHRhLAogICAgaXNFeHRlcm5hbFRhcmdldDogaXNFeHRlcm5hbFRhcmdldCwKICAgIGFkZExpc3RlbmVyOiBvbiwKICAgIHJlbW92ZUxpc3RlbmVyOiBvZmYKICB9OwoKICAvKgogICAqIEBjbGFzcyBQb3NBbmltYXRpb24KICAgKiBAYWthIEwuUG9zQW5pbWF0aW9uCiAgICogQGluaGVyaXRzIEV2ZW50ZWQKICAgKiBVc2VkIGludGVybmFsbHkgZm9yIHBhbm5pbmcgYW5pbWF0aW9ucywgdXRpbGl6aW5nIENTUzMgVHJhbnNpdGlvbnMgZm9yIG1vZGVybiBicm93c2VycyBhbmQgYSB0aW1lciBmYWxsYmFjayBmb3IgSUU2LTkuCiAgICoKICAgKiBAZXhhbXBsZQogICAqIGBgYGpzCiAgICogdmFyIGZ4ID0gbmV3IEwuUG9zQW5pbWF0aW9uKCk7CiAgICogZngucnVuKGVsLCBbMzAwLCA1MDBdLCAwLjUpOwogICAqIGBgYAogICAqCiAgICogQGNvbnN0cnVjdG9yIEwuUG9zQW5pbWF0aW9uKCkKICAgKiBDcmVhdGVzIGEgYFBvc0FuaW1hdGlvbmAgb2JqZWN0LgogICAqCiAgICovCgogIHZhciBQb3NBbmltYXRpb24gPSBFdmVudGVkLmV4dGVuZCh7CgogIAkvLyBAbWV0aG9kIHJ1bihlbDogSFRNTEVsZW1lbnQsIG5ld1BvczogUG9pbnQsIGR1cmF0aW9uPzogTnVtYmVyLCBlYXNlTGluZWFyaXR5PzogTnVtYmVyKQogIAkvLyBSdW4gYW4gYW5pbWF0aW9uIG9mIGEgZ2l2ZW4gZWxlbWVudCB0byBhIG5ldyBwb3NpdGlvbiwgb3B0aW9uYWxseSBzZXR0aW5nCiAgCS8vIGR1cmF0aW9uIGluIHNlY29uZHMgKGAwLjI1YCBieSBkZWZhdWx0KSBhbmQgZWFzaW5nIGxpbmVhcml0eSBmYWN0b3IgKDNyZAogIAkvLyBhcmd1bWVudCBvZiB0aGUgW2N1YmljIGJlemllciBjdXJ2ZV0oaHR0cHM6Ly9jdWJpYy1iZXppZXIuY29tLyMwLDAsLjUsMSksCiAgCS8vIGAwLjVgIGJ5IGRlZmF1bHQpLgogIAlydW46IGZ1bmN0aW9uIChlbCwgbmV3UG9zLCBkdXJhdGlvbiwgZWFzZUxpbmVhcml0eSkgewogIAkJdGhpcy5zdG9wKCk7CgogIAkJdGhpcy5fZWwgPSBlbDsKICAJCXRoaXMuX2luUHJvZ3Jlc3MgPSB0cnVlOwogIAkJdGhpcy5fZHVyYXRpb24gPSBkdXJhdGlvbiB8fCAwLjI1OwogIAkJdGhpcy5fZWFzZU91dFBvd2VyID0gMSAvIE1hdGgubWF4KGVhc2VMaW5lYXJpdHkgfHwgMC41LCAwLjIpOwoKICAJCXRoaXMuX3N0YXJ0UG9zID0gZ2V0UG9zaXRpb24oZWwpOwogIAkJdGhpcy5fb2Zmc2V0ID0gbmV3UG9zLnN1YnRyYWN0KHRoaXMuX3N0YXJ0UG9zKTsKICAJCXRoaXMuX3N0YXJ0VGltZSA9ICtuZXcgRGF0ZSgpOwoKICAJCS8vIEBldmVudCBzdGFydDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIGFuaW1hdGlvbiBzdGFydHMKICAJCXRoaXMuZmlyZSgnc3RhcnQnKTsKCiAgCQl0aGlzLl9hbmltYXRlKCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHN0b3AoKQogIAkvLyBTdG9wcyB0aGUgYW5pbWF0aW9uIChpZiBjdXJyZW50bHkgcnVubmluZykuCiAgCXN0b3A6IGZ1bmN0aW9uICgpIHsKICAJCWlmICghdGhpcy5faW5Qcm9ncmVzcykgeyByZXR1cm47IH0KCiAgCQl0aGlzLl9zdGVwKHRydWUpOwogIAkJdGhpcy5fY29tcGxldGUoKTsKICAJfSwKCiAgCV9hbmltYXRlOiBmdW5jdGlvbiAoKSB7CiAgCQkvLyBhbmltYXRpb24gbG9vcAogIAkJdGhpcy5fYW5pbUlkID0gcmVxdWVzdEFuaW1GcmFtZSh0aGlzLl9hbmltYXRlLCB0aGlzKTsKICAJCXRoaXMuX3N0ZXAoKTsKICAJfSwKCiAgCV9zdGVwOiBmdW5jdGlvbiAocm91bmQpIHsKICAJCXZhciBlbGFwc2VkID0gKCtuZXcgRGF0ZSgpKSAtIHRoaXMuX3N0YXJ0VGltZSwKICAJCSAgICBkdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uICogMTAwMDsKCiAgCQlpZiAoZWxhcHNlZCA8IGR1cmF0aW9uKSB7CiAgCQkJdGhpcy5fcnVuRnJhbWUodGhpcy5fZWFzZU91dChlbGFwc2VkIC8gZHVyYXRpb24pLCByb3VuZCk7CiAgCQl9IGVsc2UgewogIAkJCXRoaXMuX3J1bkZyYW1lKDEpOwogIAkJCXRoaXMuX2NvbXBsZXRlKCk7CiAgCQl9CiAgCX0sCgogIAlfcnVuRnJhbWU6IGZ1bmN0aW9uIChwcm9ncmVzcywgcm91bmQpIHsKICAJCXZhciBwb3MgPSB0aGlzLl9zdGFydFBvcy5hZGQodGhpcy5fb2Zmc2V0Lm11bHRpcGx5QnkocHJvZ3Jlc3MpKTsKICAJCWlmIChyb3VuZCkgewogIAkJCXBvcy5fcm91bmQoKTsKICAJCX0KICAJCXNldFBvc2l0aW9uKHRoaXMuX2VsLCBwb3MpOwoKICAJCS8vIEBldmVudCBzdGVwOiBFdmVudAogIAkJLy8gRmlyZWQgY29udGludW91c2x5IGR1cmluZyB0aGUgYW5pbWF0aW9uLgogIAkJdGhpcy5maXJlKCdzdGVwJyk7CiAgCX0sCgogIAlfY29tcGxldGU6IGZ1bmN0aW9uICgpIHsKICAJCWNhbmNlbEFuaW1GcmFtZSh0aGlzLl9hbmltSWQpOwoKICAJCXRoaXMuX2luUHJvZ3Jlc3MgPSBmYWxzZTsKICAJCS8vIEBldmVudCBlbmQ6IEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSBhbmltYXRpb24gZW5kcy4KICAJCXRoaXMuZmlyZSgnZW5kJyk7CiAgCX0sCgogIAlfZWFzZU91dDogZnVuY3Rpb24gKHQpIHsKICAJCXJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIHRoaXMuX2Vhc2VPdXRQb3dlcik7CiAgCX0KICB9KTsKCiAgLyoKICAgKiBAY2xhc3MgTWFwCiAgICogQGFrYSBMLk1hcAogICAqIEBpbmhlcml0cyBFdmVudGVkCiAgICoKICAgKiBUaGUgY2VudHJhbCBjbGFzcyBvZiB0aGUgQVBJIOKAlCBpdCBpcyB1c2VkIHRvIGNyZWF0ZSBhIG1hcCBvbiBhIHBhZ2UgYW5kIG1hbmlwdWxhdGUgaXQuCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogYGBganMKICAgKiAvLyBpbml0aWFsaXplIHRoZSBtYXAgb24gdGhlICJtYXAiIGRpdiB3aXRoIGEgZ2l2ZW4gY2VudGVyIGFuZCB6b29tCiAgICogdmFyIG1hcCA9IEwubWFwKCdtYXAnLCB7CiAgICogCWNlbnRlcjogWzUxLjUwNSwgLTAuMDldLAogICAqIAl6b29tOiAxMwogICAqIH0pOwogICAqIGBgYAogICAqCiAgICovCgogIHZhciBNYXAgPSBFdmVudGVkLmV4dGVuZCh7CgogIAlvcHRpb25zOiB7CiAgCQkvLyBAc2VjdGlvbiBNYXAgU3RhdGUgT3B0aW9ucwogIAkJLy8gQG9wdGlvbiBjcnM6IENSUyA9IEwuQ1JTLkVQU0czODU3CiAgCQkvLyBUaGUgW0Nvb3JkaW5hdGUgUmVmZXJlbmNlIFN5c3RlbV0oI2NycykgdG8gdXNlLiBEb24ndCBjaGFuZ2UgdGhpcyBpZiB5b3UncmUgbm90CiAgCQkvLyBzdXJlIHdoYXQgaXQgbWVhbnMuCiAgCQljcnM6IEVQU0czODU3LAoKICAJCS8vIEBvcHRpb24gY2VudGVyOiBMYXRMbmcgPSB1bmRlZmluZWQKICAJCS8vIEluaXRpYWwgZ2VvZ3JhcGhpYyBjZW50ZXIgb2YgdGhlIG1hcAogIAkJY2VudGVyOiB1bmRlZmluZWQsCgogIAkJLy8gQG9wdGlvbiB6b29tOiBOdW1iZXIgPSB1bmRlZmluZWQKICAJCS8vIEluaXRpYWwgbWFwIHpvb20gbGV2ZWwKICAJCXpvb206IHVuZGVmaW5lZCwKCiAgCQkvLyBAb3B0aW9uIG1pblpvb206IE51bWJlciA9ICoKICAJCS8vIE1pbmltdW0gem9vbSBsZXZlbCBvZiB0aGUgbWFwLgogIAkJLy8gSWYgbm90IHNwZWNpZmllZCBhbmQgYXQgbGVhc3Qgb25lIGBHcmlkTGF5ZXJgIG9yIGBUaWxlTGF5ZXJgIGlzIGluIHRoZSBtYXAsCiAgCQkvLyB0aGUgbG93ZXN0IG9mIHRoZWlyIGBtaW5ab29tYCBvcHRpb25zIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLgogIAkJbWluWm9vbTogdW5kZWZpbmVkLAoKICAJCS8vIEBvcHRpb24gbWF4Wm9vbTogTnVtYmVyID0gKgogIAkJLy8gTWF4aW11bSB6b29tIGxldmVsIG9mIHRoZSBtYXAuCiAgCQkvLyBJZiBub3Qgc3BlY2lmaWVkIGFuZCBhdCBsZWFzdCBvbmUgYEdyaWRMYXllcmAgb3IgYFRpbGVMYXllcmAgaXMgaW4gdGhlIG1hcCwKICAJCS8vIHRoZSBoaWdoZXN0IG9mIHRoZWlyIGBtYXhab29tYCBvcHRpb25zIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLgogIAkJbWF4Wm9vbTogdW5kZWZpbmVkLAoKICAJCS8vIEBvcHRpb24gbGF5ZXJzOiBMYXllcltdID0gW10KICAJCS8vIEFycmF5IG9mIGxheWVycyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIG1hcCBpbml0aWFsbHkKICAJCWxheWVyczogW10sCgogIAkJLy8gQG9wdGlvbiBtYXhCb3VuZHM6IExhdExuZ0JvdW5kcyA9IG51bGwKICAJCS8vIFdoZW4gdGhpcyBvcHRpb24gaXMgc2V0LCB0aGUgbWFwIHJlc3RyaWN0cyB0aGUgdmlldyB0byB0aGUgZ2l2ZW4KICAJCS8vIGdlb2dyYXBoaWNhbCBib3VuZHMsIGJvdW5jaW5nIHRoZSB1c2VyIGJhY2sgaWYgdGhlIHVzZXIgdHJpZXMgdG8gcGFuCiAgCQkvLyBvdXRzaWRlIHRoZSB2aWV3LiBUbyBzZXQgdGhlIHJlc3RyaWN0aW9uIGR5bmFtaWNhbGx5LCB1c2UKICAJCS8vIFtgc2V0TWF4Qm91bmRzYF0oI21hcC1zZXRtYXhib3VuZHMpIG1ldGhvZC4KICAJCW1heEJvdW5kczogdW5kZWZpbmVkLAoKICAJCS8vIEBvcHRpb24gcmVuZGVyZXI6IFJlbmRlcmVyID0gKgogIAkJLy8gVGhlIGRlZmF1bHQgbWV0aG9kIGZvciBkcmF3aW5nIHZlY3RvciBsYXllcnMgb24gdGhlIG1hcC4gYEwuU1ZHYAogIAkJLy8gb3IgYEwuQ2FudmFzYCBieSBkZWZhdWx0IGRlcGVuZGluZyBvbiBicm93c2VyIHN1cHBvcnQuCiAgCQlyZW5kZXJlcjogdW5kZWZpbmVkLAoKCiAgCQkvLyBAc2VjdGlvbiBBbmltYXRpb24gT3B0aW9ucwogIAkJLy8gQG9wdGlvbiB6b29tQW5pbWF0aW9uOiBCb29sZWFuID0gdHJ1ZQogIAkJLy8gV2hldGhlciB0aGUgbWFwIHpvb20gYW5pbWF0aW9uIGlzIGVuYWJsZWQuIEJ5IGRlZmF1bHQgaXQncyBlbmFibGVkCiAgCQkvLyBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IENTUzMgVHJhbnNpdGlvbnMgZXhjZXB0IEFuZHJvaWQuCiAgCQl6b29tQW5pbWF0aW9uOiB0cnVlLAoKICAJCS8vIEBvcHRpb24gem9vbUFuaW1hdGlvblRocmVzaG9sZDogTnVtYmVyID0gNAogIAkJLy8gV29uJ3QgYW5pbWF0ZSB6b29tIGlmIHRoZSB6b29tIGRpZmZlcmVuY2UgZXhjZWVkcyB0aGlzIHZhbHVlLgogIAkJem9vbUFuaW1hdGlvblRocmVzaG9sZDogNCwKCiAgCQkvLyBAb3B0aW9uIGZhZGVBbmltYXRpb246IEJvb2xlYW4gPSB0cnVlCiAgCQkvLyBXaGV0aGVyIHRoZSB0aWxlIGZhZGUgYW5pbWF0aW9uIGlzIGVuYWJsZWQuIEJ5IGRlZmF1bHQgaXQncyBlbmFibGVkCiAgCQkvLyBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IENTUzMgVHJhbnNpdGlvbnMgZXhjZXB0IEFuZHJvaWQuCiAgCQlmYWRlQW5pbWF0aW9uOiB0cnVlLAoKICAJCS8vIEBvcHRpb24gbWFya2VyWm9vbUFuaW1hdGlvbjogQm9vbGVhbiA9IHRydWUKICAJCS8vIFdoZXRoZXIgbWFya2VycyBhbmltYXRlIHRoZWlyIHpvb20gd2l0aCB0aGUgem9vbSBhbmltYXRpb24sIGlmIGRpc2FibGVkCiAgCQkvLyB0aGV5IHdpbGwgZGlzYXBwZWFyIGZvciB0aGUgbGVuZ3RoIG9mIHRoZSBhbmltYXRpb24uIEJ5IGRlZmF1bHQgaXQncwogIAkJLy8gZW5hYmxlZCBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IENTUzMgVHJhbnNpdGlvbnMgZXhjZXB0IEFuZHJvaWQuCiAgCQltYXJrZXJab29tQW5pbWF0aW9uOiB0cnVlLAoKICAJCS8vIEBvcHRpb24gdHJhbnNmb3JtM0RMaW1pdDogTnVtYmVyID0gMl4yMwogIAkJLy8gRGVmaW5lcyB0aGUgbWF4aW11bSBzaXplIG9mIGEgQ1NTIHRyYW5zbGF0aW9uIHRyYW5zZm9ybS4gVGhlIGRlZmF1bHQKICAJCS8vIHZhbHVlIHNob3VsZCBub3QgYmUgY2hhbmdlZCB1bmxlc3MgYSB3ZWIgYnJvd3NlciBwb3NpdGlvbnMgbGF5ZXJzIGluCiAgCQkvLyB0aGUgd3JvbmcgcGxhY2UgYWZ0ZXIgZG9pbmcgYSBsYXJnZSBgcGFuQnlgLgogIAkJdHJhbnNmb3JtM0RMaW1pdDogODM4ODYwOCwgLy8gUHJlY2lzaW9uIGxpbWl0IG9mIGEgMzItYml0IGZsb2F0CgogIAkJLy8gQHNlY3Rpb24gSW50ZXJhY3Rpb24gT3B0aW9ucwogIAkJLy8gQG9wdGlvbiB6b29tU25hcDogTnVtYmVyID0gMQogIAkJLy8gRm9yY2VzIHRoZSBtYXAncyB6b29tIGxldmVsIHRvIGFsd2F5cyBiZSBhIG11bHRpcGxlIG9mIHRoaXMsIHBhcnRpY3VsYXJseQogIAkJLy8gcmlnaHQgYWZ0ZXIgYSBbYGZpdEJvdW5kcygpYF0oI21hcC1maXRib3VuZHMpIG9yIGEgcGluY2gtem9vbS4KICAJCS8vIEJ5IGRlZmF1bHQsIHRoZSB6b29tIGxldmVsIHNuYXBzIHRvIHRoZSBuZWFyZXN0IGludGVnZXI7IGxvd2VyIHZhbHVlcwogIAkJLy8gKGUuZy4gYDAuNWAgb3IgYDAuMWApIGFsbG93IGZvciBncmVhdGVyIGdyYW51bGFyaXR5LiBBIHZhbHVlIG9mIGAwYAogIAkJLy8gbWVhbnMgdGhlIHpvb20gbGV2ZWwgd2lsbCBub3QgYmUgc25hcHBlZCBhZnRlciBgZml0Qm91bmRzYCBvciBhIHBpbmNoLXpvb20uCiAgCQl6b29tU25hcDogMSwKCiAgCQkvLyBAb3B0aW9uIHpvb21EZWx0YTogTnVtYmVyID0gMQogIAkJLy8gQ29udHJvbHMgaG93IG11Y2ggdGhlIG1hcCdzIHpvb20gbGV2ZWwgd2lsbCBjaGFuZ2UgYWZ0ZXIgYQogIAkJLy8gW2B6b29tSW4oKWBdKCNtYXAtem9vbWluKSwgW2B6b29tT3V0KClgXSgjbWFwLXpvb21vdXQpLCBwcmVzc2luZyBgK2AKICAJCS8vIG9yIGAtYCBvbiB0aGUga2V5Ym9hcmQsIG9yIHVzaW5nIHRoZSBbem9vbSBjb250cm9sc10oI2NvbnRyb2wtem9vbSkuCiAgCQkvLyBWYWx1ZXMgc21hbGxlciB0aGFuIGAxYCAoZS5nLiBgMC41YCkgYWxsb3cgZm9yIGdyZWF0ZXIgZ3JhbnVsYXJpdHkuCiAgCQl6b29tRGVsdGE6IDEsCgogIAkJLy8gQG9wdGlvbiB0cmFja1Jlc2l6ZTogQm9vbGVhbiA9IHRydWUKICAJCS8vIFdoZXRoZXIgdGhlIG1hcCBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgYnJvd3NlciB3aW5kb3cgcmVzaXplIHRvIHVwZGF0ZSBpdHNlbGYuCiAgCQl0cmFja1Jlc2l6ZTogdHJ1ZQogIAl9LAoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7IC8vIChIVE1MRWxlbWVudCBvciBTdHJpbmcsIE9iamVjdCkKICAJCW9wdGlvbnMgPSBzZXRPcHRpb25zKHRoaXMsIG9wdGlvbnMpOwoKICAJCS8vIE1ha2Ugc3VyZSB0byBhc3NpZ24gaW50ZXJuYWwgZmxhZ3MgYXQgdGhlIGJlZ2lubmluZywKICAJCS8vIHRvIGF2b2lkIGluY29uc2lzdGVudCBzdGF0ZSBpbiBzb21lIGVkZ2UgY2FzZXMuCiAgCQl0aGlzLl9oYW5kbGVycyA9IFtdOwogIAkJdGhpcy5fbGF5ZXJzID0ge307CiAgCQl0aGlzLl96b29tQm91bmRMYXllcnMgPSB7fTsKICAJCXRoaXMuX3NpemVDaGFuZ2VkID0gdHJ1ZTsKCiAgCQl0aGlzLl9pbml0Q29udGFpbmVyKGlkKTsKICAJCXRoaXMuX2luaXRMYXlvdXQoKTsKCiAgCQkvLyBoYWNrIGZvciBodHRwczovL2dpdGh1Yi5jb20vTGVhZmxldC9MZWFmbGV0L2lzc3Vlcy8xOTgwCiAgCQl0aGlzLl9vblJlc2l6ZSA9IGJpbmQodGhpcy5fb25SZXNpemUsIHRoaXMpOwoKICAJCXRoaXMuX2luaXRFdmVudHMoKTsKCiAgCQlpZiAob3B0aW9ucy5tYXhCb3VuZHMpIHsKICAJCQl0aGlzLnNldE1heEJvdW5kcyhvcHRpb25zLm1heEJvdW5kcyk7CiAgCQl9CgogIAkJaWYgKG9wdGlvbnMuem9vbSAhPT0gdW5kZWZpbmVkKSB7CiAgCQkJdGhpcy5fem9vbSA9IHRoaXMuX2xpbWl0Wm9vbShvcHRpb25zLnpvb20pOwogIAkJfQoKICAJCWlmIChvcHRpb25zLmNlbnRlciAmJiBvcHRpb25zLnpvb20gIT09IHVuZGVmaW5lZCkgewogIAkJCXRoaXMuc2V0Vmlldyh0b0xhdExuZyhvcHRpb25zLmNlbnRlciksIG9wdGlvbnMuem9vbSwge3Jlc2V0OiB0cnVlfSk7CiAgCQl9CgogIAkJdGhpcy5jYWxsSW5pdEhvb2tzKCk7CgogIAkJLy8gZG9uJ3QgYW5pbWF0ZSBvbiBicm93c2VycyB3aXRob3V0IGhhcmR3YXJlLWFjY2VsZXJhdGVkIHRyYW5zaXRpb25zIG9yIG9sZCBBbmRyb2lkL09wZXJhCiAgCQl0aGlzLl96b29tQW5pbWF0ZWQgPSBUUkFOU0lUSU9OICYmIEJyb3dzZXIuYW55M2QgJiYgIUJyb3dzZXIubW9iaWxlT3BlcmEgJiYKICAJCQkJdGhpcy5vcHRpb25zLnpvb21BbmltYXRpb247CgogIAkJLy8gem9vbSB0cmFuc2l0aW9ucyBydW4gd2l0aCB0aGUgc2FtZSBkdXJhdGlvbiBmb3IgYWxsIGxheWVycywgc28gaWYgb25lIG9mIHRyYW5zaXRpb25lbmQgZXZlbnRzCiAgCQkvLyBoYXBwZW5zIGFmdGVyIHN0YXJ0aW5nIHpvb20gYW5pbWF0aW9uIChwcm9wYWdhdGluZyB0byB0aGUgbWFwIHBhbmUpLCB3ZSBrbm93IHRoYXQgaXQgZW5kZWQgZ2xvYmFsbHkKICAJCWlmICh0aGlzLl96b29tQW5pbWF0ZWQpIHsKICAJCQl0aGlzLl9jcmVhdGVBbmltUHJveHkoKTsKICAJCQlvbih0aGlzLl9wcm94eSwgVFJBTlNJVElPTl9FTkQsIHRoaXMuX2NhdGNoVHJhbnNpdGlvbkVuZCwgdGhpcyk7CiAgCQl9CgogIAkJdGhpcy5fYWRkTGF5ZXJzKHRoaXMub3B0aW9ucy5sYXllcnMpOwogIAl9LAoKCiAgCS8vIEBzZWN0aW9uIE1ldGhvZHMgZm9yIG1vZGlmeWluZyBtYXAgc3RhdGUKCiAgCS8vIEBtZXRob2Qgc2V0VmlldyhjZW50ZXI6IExhdExuZywgem9vbTogTnVtYmVyLCBvcHRpb25zPzogWm9vbS9wYW4gb3B0aW9ucyk6IHRoaXMKICAJLy8gU2V0cyB0aGUgdmlldyBvZiB0aGUgbWFwIChnZW9ncmFwaGljYWwgY2VudGVyIGFuZCB6b29tKSB3aXRoIHRoZSBnaXZlbgogIAkvLyBhbmltYXRpb24gb3B0aW9ucy4KICAJc2V0VmlldzogZnVuY3Rpb24gKGNlbnRlciwgem9vbSwgb3B0aW9ucykgewoKICAJCXpvb20gPSB6b29tID09PSB1bmRlZmluZWQgPyB0aGlzLl96b29tIDogdGhpcy5fbGltaXRab29tKHpvb20pOwogIAkJY2VudGVyID0gdGhpcy5fbGltaXRDZW50ZXIodG9MYXRMbmcoY2VudGVyKSwgem9vbSwgdGhpcy5vcHRpb25zLm1heEJvdW5kcyk7CiAgCQlvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgCQl0aGlzLl9zdG9wKCk7CgogIAkJaWYgKHRoaXMuX2xvYWRlZCAmJiAhb3B0aW9ucy5yZXNldCAmJiBvcHRpb25zICE9PSB0cnVlKSB7CgogIAkJCWlmIChvcHRpb25zLmFuaW1hdGUgIT09IHVuZGVmaW5lZCkgewogIAkJCQlvcHRpb25zLnpvb20gPSBleHRlbmQoe2FuaW1hdGU6IG9wdGlvbnMuYW5pbWF0ZX0sIG9wdGlvbnMuem9vbSk7CiAgCQkJCW9wdGlvbnMucGFuID0gZXh0ZW5kKHthbmltYXRlOiBvcHRpb25zLmFuaW1hdGUsIGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9ufSwgb3B0aW9ucy5wYW4pOwogIAkJCX0KCiAgCQkJLy8gdHJ5IGFuaW1hdGluZyBwYW4gb3Igem9vbQogIAkJCXZhciBtb3ZlZCA9ICh0aGlzLl96b29tICE9PSB6b29tKSA/CiAgCQkJCXRoaXMuX3RyeUFuaW1hdGVkWm9vbSAmJiB0aGlzLl90cnlBbmltYXRlZFpvb20oY2VudGVyLCB6b29tLCBvcHRpb25zLnpvb20pIDoKICAJCQkJdGhpcy5fdHJ5QW5pbWF0ZWRQYW4oY2VudGVyLCBvcHRpb25zLnBhbik7CgogIAkJCWlmIChtb3ZlZCkgewogIAkJCQkvLyBwcmV2ZW50IHJlc2l6ZSBoYW5kbGVyIGNhbGwsIHRoZSB2aWV3IHdpbGwgcmVmcmVzaCBhZnRlciBhbmltYXRpb24gYW55d2F5CiAgCQkJCWNsZWFyVGltZW91dCh0aGlzLl9zaXplVGltZXIpOwogIAkJCQlyZXR1cm4gdGhpczsKICAJCQl9CiAgCQl9CgogIAkJLy8gYW5pbWF0aW9uIGRpZG4ndCBzdGFydCwganVzdCByZXNldCB0aGUgbWFwIHZpZXcKICAJCXRoaXMuX3Jlc2V0VmlldyhjZW50ZXIsIHpvb20pOwoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRab29tKHpvb206IE51bWJlciwgb3B0aW9ucz86IFpvb20vcGFuIG9wdGlvbnMpOiB0aGlzCiAgCS8vIFNldHMgdGhlIHpvb20gb2YgdGhlIG1hcC4KICAJc2V0Wm9vbTogZnVuY3Rpb24gKHpvb20sIG9wdGlvbnMpIHsKICAJCWlmICghdGhpcy5fbG9hZGVkKSB7CiAgCQkJdGhpcy5fem9vbSA9IHpvb207CiAgCQkJcmV0dXJuIHRoaXM7CiAgCQl9CiAgCQlyZXR1cm4gdGhpcy5zZXRWaWV3KHRoaXMuZ2V0Q2VudGVyKCksIHpvb20sIHt6b29tOiBvcHRpb25zfSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHpvb21JbihkZWx0YT86IE51bWJlciwgb3B0aW9ucz86IFpvb20gb3B0aW9ucyk6IHRoaXMKICAJLy8gSW5jcmVhc2VzIHRoZSB6b29tIG9mIHRoZSBtYXAgYnkgYGRlbHRhYCAoW2B6b29tRGVsdGFgXSgjbWFwLXpvb21kZWx0YSkgYnkgZGVmYXVsdCkuCiAgCXpvb21JbjogZnVuY3Rpb24gKGRlbHRhLCBvcHRpb25zKSB7CiAgCQlkZWx0YSA9IGRlbHRhIHx8IChCcm93c2VyLmFueTNkID8gdGhpcy5vcHRpb25zLnpvb21EZWx0YSA6IDEpOwogIAkJcmV0dXJuIHRoaXMuc2V0Wm9vbSh0aGlzLl96b29tICsgZGVsdGEsIG9wdGlvbnMpOwogIAl9LAoKICAJLy8gQG1ldGhvZCB6b29tT3V0KGRlbHRhPzogTnVtYmVyLCBvcHRpb25zPzogWm9vbSBvcHRpb25zKTogdGhpcwogIAkvLyBEZWNyZWFzZXMgdGhlIHpvb20gb2YgdGhlIG1hcCBieSBgZGVsdGFgIChbYHpvb21EZWx0YWBdKCNtYXAtem9vbWRlbHRhKSBieSBkZWZhdWx0KS4KICAJem9vbU91dDogZnVuY3Rpb24gKGRlbHRhLCBvcHRpb25zKSB7CiAgCQlkZWx0YSA9IGRlbHRhIHx8IChCcm93c2VyLmFueTNkID8gdGhpcy5vcHRpb25zLnpvb21EZWx0YSA6IDEpOwogIAkJcmV0dXJuIHRoaXMuc2V0Wm9vbSh0aGlzLl96b29tIC0gZGVsdGEsIG9wdGlvbnMpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRab29tQXJvdW5kKGxhdGxuZzogTGF0TG5nLCB6b29tOiBOdW1iZXIsIG9wdGlvbnM6IFpvb20gb3B0aW9ucyk6IHRoaXMKICAJLy8gWm9vbXMgdGhlIG1hcCB3aGlsZSBrZWVwaW5nIGEgc3BlY2lmaWVkIGdlb2dyYXBoaWNhbCBwb2ludCBvbiB0aGUgbWFwCiAgCS8vIHN0YXRpb25hcnkgKGUuZy4gdXNlZCBpbnRlcm5hbGx5IGZvciBzY3JvbGwgem9vbSBhbmQgZG91YmxlLWNsaWNrIHpvb20pLgogIAkvLyBAYWx0ZXJuYXRpdmUKICAJLy8gQG1ldGhvZCBzZXRab29tQXJvdW5kKG9mZnNldDogUG9pbnQsIHpvb206IE51bWJlciwgb3B0aW9uczogWm9vbSBvcHRpb25zKTogdGhpcwogIAkvLyBab29tcyB0aGUgbWFwIHdoaWxlIGtlZXBpbmcgYSBzcGVjaWZpZWQgcGl4ZWwgb24gdGhlIG1hcCAocmVsYXRpdmUgdG8gdGhlIHRvcC1sZWZ0IGNvcm5lcikgc3RhdGlvbmFyeS4KICAJc2V0Wm9vbUFyb3VuZDogZnVuY3Rpb24gKGxhdGxuZywgem9vbSwgb3B0aW9ucykgewogIAkJdmFyIHNjYWxlID0gdGhpcy5nZXRab29tU2NhbGUoem9vbSksCiAgCQkgICAgdmlld0hhbGYgPSB0aGlzLmdldFNpemUoKS5kaXZpZGVCeSgyKSwKICAJCSAgICBjb250YWluZXJQb2ludCA9IGxhdGxuZyBpbnN0YW5jZW9mIFBvaW50ID8gbGF0bG5nIDogdGhpcy5sYXRMbmdUb0NvbnRhaW5lclBvaW50KGxhdGxuZyksCgogIAkJICAgIGNlbnRlck9mZnNldCA9IGNvbnRhaW5lclBvaW50LnN1YnRyYWN0KHZpZXdIYWxmKS5tdWx0aXBseUJ5KDEgLSAxIC8gc2NhbGUpLAogIAkJICAgIG5ld0NlbnRlciA9IHRoaXMuY29udGFpbmVyUG9pbnRUb0xhdExuZyh2aWV3SGFsZi5hZGQoY2VudGVyT2Zmc2V0KSk7CgogIAkJcmV0dXJuIHRoaXMuc2V0VmlldyhuZXdDZW50ZXIsIHpvb20sIHt6b29tOiBvcHRpb25zfSk7CiAgCX0sCgogIAlfZ2V0Qm91bmRzQ2VudGVyWm9vbTogZnVuY3Rpb24gKGJvdW5kcywgb3B0aW9ucykgewoKICAJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogIAkJYm91bmRzID0gYm91bmRzLmdldEJvdW5kcyA/IGJvdW5kcy5nZXRCb3VuZHMoKSA6IHRvTGF0TG5nQm91bmRzKGJvdW5kcyk7CgogIAkJdmFyIHBhZGRpbmdUTCA9IHRvUG9pbnQob3B0aW9ucy5wYWRkaW5nVG9wTGVmdCB8fCBvcHRpb25zLnBhZGRpbmcgfHwgWzAsIDBdKSwKICAJCSAgICBwYWRkaW5nQlIgPSB0b1BvaW50KG9wdGlvbnMucGFkZGluZ0JvdHRvbVJpZ2h0IHx8IG9wdGlvbnMucGFkZGluZyB8fCBbMCwgMF0pLAoKICAJCSAgICB6b29tID0gdGhpcy5nZXRCb3VuZHNab29tKGJvdW5kcywgZmFsc2UsIHBhZGRpbmdUTC5hZGQocGFkZGluZ0JSKSk7CgogIAkJem9vbSA9ICh0eXBlb2Ygb3B0aW9ucy5tYXhab29tID09PSAnbnVtYmVyJykgPyBNYXRoLm1pbihvcHRpb25zLm1heFpvb20sIHpvb20pIDogem9vbTsKCiAgCQlpZiAoem9vbSA9PT0gSW5maW5pdHkpIHsKICAJCQlyZXR1cm4gewogIAkJCQljZW50ZXI6IGJvdW5kcy5nZXRDZW50ZXIoKSwKICAJCQkJem9vbTogem9vbQogIAkJCX07CiAgCQl9CgogIAkJdmFyIHBhZGRpbmdPZmZzZXQgPSBwYWRkaW5nQlIuc3VidHJhY3QocGFkZGluZ1RMKS5kaXZpZGVCeSgyKSwKCiAgCQkgICAgc3dQb2ludCA9IHRoaXMucHJvamVjdChib3VuZHMuZ2V0U291dGhXZXN0KCksIHpvb20pLAogIAkJICAgIG5lUG9pbnQgPSB0aGlzLnByb2plY3QoYm91bmRzLmdldE5vcnRoRWFzdCgpLCB6b29tKSwKICAJCSAgICBjZW50ZXIgPSB0aGlzLnVucHJvamVjdChzd1BvaW50LmFkZChuZVBvaW50KS5kaXZpZGVCeSgyKS5hZGQocGFkZGluZ09mZnNldCksIHpvb20pOwoKICAJCXJldHVybiB7CiAgCQkJY2VudGVyOiBjZW50ZXIsCiAgCQkJem9vbTogem9vbQogIAkJfTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZml0Qm91bmRzKGJvdW5kczogTGF0TG5nQm91bmRzLCBvcHRpb25zPzogZml0Qm91bmRzIG9wdGlvbnMpOiB0aGlzCiAgCS8vIFNldHMgYSBtYXAgdmlldyB0aGF0IGNvbnRhaW5zIHRoZSBnaXZlbiBnZW9ncmFwaGljYWwgYm91bmRzIHdpdGggdGhlCiAgCS8vIG1heGltdW0gem9vbSBsZXZlbCBwb3NzaWJsZS4KICAJZml0Qm91bmRzOiBmdW5jdGlvbiAoYm91bmRzLCBvcHRpb25zKSB7CgogIAkJYm91bmRzID0gdG9MYXRMbmdCb3VuZHMoYm91bmRzKTsKCiAgCQlpZiAoIWJvdW5kcy5pc1ZhbGlkKCkpIHsKICAJCQl0aHJvdyBuZXcgRXJyb3IoJ0JvdW5kcyBhcmUgbm90IHZhbGlkLicpOwogIAkJfQoKICAJCXZhciB0YXJnZXQgPSB0aGlzLl9nZXRCb3VuZHNDZW50ZXJab29tKGJvdW5kcywgb3B0aW9ucyk7CiAgCQlyZXR1cm4gdGhpcy5zZXRWaWV3KHRhcmdldC5jZW50ZXIsIHRhcmdldC56b29tLCBvcHRpb25zKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZml0V29ybGQob3B0aW9ucz86IGZpdEJvdW5kcyBvcHRpb25zKTogdGhpcwogIAkvLyBTZXRzIGEgbWFwIHZpZXcgdGhhdCBtb3N0bHkgY29udGFpbnMgdGhlIHdob2xlIHdvcmxkIHdpdGggdGhlIG1heGltdW0KICAJLy8gem9vbSBsZXZlbCBwb3NzaWJsZS4KICAJZml0V29ybGQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgCQlyZXR1cm4gdGhpcy5maXRCb3VuZHMoW1stOTAsIC0xODBdLCBbOTAsIDE4MF1dLCBvcHRpb25zKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgcGFuVG8obGF0bG5nOiBMYXRMbmcsIG9wdGlvbnM/OiBQYW4gb3B0aW9ucyk6IHRoaXMKICAJLy8gUGFucyB0aGUgbWFwIHRvIGEgZ2l2ZW4gY2VudGVyLgogIAlwYW5UbzogZnVuY3Rpb24gKGNlbnRlciwgb3B0aW9ucykgeyAvLyAoTGF0TG5nKQogIAkJcmV0dXJuIHRoaXMuc2V0VmlldyhjZW50ZXIsIHRoaXMuX3pvb20sIHtwYW46IG9wdGlvbnN9KTsKICAJfSwKCiAgCS8vIEBtZXRob2QgcGFuQnkob2Zmc2V0OiBQb2ludCwgb3B0aW9ucz86IFBhbiBvcHRpb25zKTogdGhpcwogIAkvLyBQYW5zIHRoZSBtYXAgYnkgYSBnaXZlbiBudW1iZXIgb2YgcGl4ZWxzIChhbmltYXRlZCkuCiAgCXBhbkJ5OiBmdW5jdGlvbiAob2Zmc2V0LCBvcHRpb25zKSB7CiAgCQlvZmZzZXQgPSB0b1BvaW50KG9mZnNldCkucm91bmQoKTsKICAJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAJCWlmICghb2Zmc2V0LnggJiYgIW9mZnNldC55KSB7CiAgCQkJcmV0dXJuIHRoaXMuZmlyZSgnbW92ZWVuZCcpOwogIAkJfQogIAkJLy8gSWYgd2UgcGFuIHRvbyBmYXIsIENocm9tZSBnZXRzIGlzc3VlcyB3aXRoIHRpbGVzCiAgCQkvLyBhbmQgbWFrZXMgdGhlbSBkaXNhcHBlYXIgb3IgYXBwZWFyIGluIHRoZSB3cm9uZyBwbGFjZSAoc2xpZ2h0bHkgb2Zmc2V0KSAjMjYwMgogIAkJaWYgKG9wdGlvbnMuYW5pbWF0ZSAhPT0gdHJ1ZSAmJiAhdGhpcy5nZXRTaXplKCkuY29udGFpbnMob2Zmc2V0KSkgewogIAkJCXRoaXMuX3Jlc2V0Vmlldyh0aGlzLnVucHJvamVjdCh0aGlzLnByb2plY3QodGhpcy5nZXRDZW50ZXIoKSkuYWRkKG9mZnNldCkpLCB0aGlzLmdldFpvb20oKSk7CiAgCQkJcmV0dXJuIHRoaXM7CiAgCQl9CgogIAkJaWYgKCF0aGlzLl9wYW5BbmltKSB7CiAgCQkJdGhpcy5fcGFuQW5pbSA9IG5ldyBQb3NBbmltYXRpb24oKTsKCiAgCQkJdGhpcy5fcGFuQW5pbS5vbih7CiAgCQkJCSdzdGVwJzogdGhpcy5fb25QYW5UcmFuc2l0aW9uU3RlcCwKICAJCQkJJ2VuZCc6IHRoaXMuX29uUGFuVHJhbnNpdGlvbkVuZAogIAkJCX0sIHRoaXMpOwogIAkJfQoKICAJCS8vIGRvbid0IGZpcmUgbW92ZXN0YXJ0IGlmIGFuaW1hdGluZyBpbmVydGlhCiAgCQlpZiAoIW9wdGlvbnMubm9Nb3ZlU3RhcnQpIHsKICAJCQl0aGlzLmZpcmUoJ21vdmVzdGFydCcpOwogIAkJfQoKICAJCS8vIGFuaW1hdGUgcGFuIHVubGVzcyBhbmltYXRlOiBmYWxzZSBzcGVjaWZpZWQKICAJCWlmIChvcHRpb25zLmFuaW1hdGUgIT09IGZhbHNlKSB7CiAgCQkJYWRkQ2xhc3ModGhpcy5fbWFwUGFuZSwgJ2xlYWZsZXQtcGFuLWFuaW0nKTsKCiAgCQkJdmFyIG5ld1BvcyA9IHRoaXMuX2dldE1hcFBhbmVQb3MoKS5zdWJ0cmFjdChvZmZzZXQpLnJvdW5kKCk7CiAgCQkJdGhpcy5fcGFuQW5pbS5ydW4odGhpcy5fbWFwUGFuZSwgbmV3UG9zLCBvcHRpb25zLmR1cmF0aW9uIHx8IDAuMjUsIG9wdGlvbnMuZWFzZUxpbmVhcml0eSk7CiAgCQl9IGVsc2UgewogIAkJCXRoaXMuX3Jhd1BhbkJ5KG9mZnNldCk7CiAgCQkJdGhpcy5maXJlKCdtb3ZlJykuZmlyZSgnbW92ZWVuZCcpOwogIAkJfQoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBmbHlUbyhsYXRsbmc6IExhdExuZywgem9vbT86IE51bWJlciwgb3B0aW9ucz86IFpvb20vcGFuIG9wdGlvbnMpOiB0aGlzCiAgCS8vIFNldHMgdGhlIHZpZXcgb2YgdGhlIG1hcCAoZ2VvZ3JhcGhpY2FsIGNlbnRlciBhbmQgem9vbSkgcGVyZm9ybWluZyBhIHNtb290aAogIAkvLyBwYW4tem9vbSBhbmltYXRpb24uCiAgCWZseVRvOiBmdW5jdGlvbiAodGFyZ2V0Q2VudGVyLCB0YXJnZXRab29tLCBvcHRpb25zKSB7CgogIAkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgCQlpZiAob3B0aW9ucy5hbmltYXRlID09PSBmYWxzZSB8fCAhQnJvd3Nlci5hbnkzZCkgewogIAkJCXJldHVybiB0aGlzLnNldFZpZXcodGFyZ2V0Q2VudGVyLCB0YXJnZXRab29tLCBvcHRpb25zKTsKICAJCX0KCiAgCQl0aGlzLl9zdG9wKCk7CgogIAkJdmFyIGZyb20gPSB0aGlzLnByb2plY3QodGhpcy5nZXRDZW50ZXIoKSksCiAgCQkgICAgdG8gPSB0aGlzLnByb2plY3QodGFyZ2V0Q2VudGVyKSwKICAJCSAgICBzaXplID0gdGhpcy5nZXRTaXplKCksCiAgCQkgICAgc3RhcnRab29tID0gdGhpcy5fem9vbTsKCiAgCQl0YXJnZXRDZW50ZXIgPSB0b0xhdExuZyh0YXJnZXRDZW50ZXIpOwogIAkJdGFyZ2V0Wm9vbSA9IHRhcmdldFpvb20gPT09IHVuZGVmaW5lZCA/IHN0YXJ0Wm9vbSA6IHRhcmdldFpvb207CgogIAkJdmFyIHcwID0gTWF0aC5tYXgoc2l6ZS54LCBzaXplLnkpLAogIAkJICAgIHcxID0gdzAgKiB0aGlzLmdldFpvb21TY2FsZShzdGFydFpvb20sIHRhcmdldFpvb20pLAogIAkJICAgIHUxID0gKHRvLmRpc3RhbmNlVG8oZnJvbSkpIHx8IDEsCiAgCQkgICAgcmhvID0gMS40MiwKICAJCSAgICByaG8yID0gcmhvICogcmhvOwoKICAJCWZ1bmN0aW9uIHIoaSkgewogIAkJCXZhciBzMSA9IGkgPyAtMSA6IDEsCiAgCQkJICAgIHMyID0gaSA/IHcxIDogdzAsCiAgCQkJICAgIHQxID0gdzEgKiB3MSAtIHcwICogdzAgKyBzMSAqIHJobzIgKiByaG8yICogdTEgKiB1MSwKICAJCQkgICAgYjEgPSAyICogczIgKiByaG8yICogdTEsCiAgCQkJICAgIGIgPSB0MSAvIGIxLAogIAkJCSAgICBzcSA9IE1hdGguc3FydChiICogYiArIDEpIC0gYjsKCiAgCQkJICAgIC8vIHdvcmthcm91bmQgZm9yIGZsb2F0aW5nIHBvaW50IHByZWNpc2lvbiBidWcgd2hlbiBzcSA9IDAsIGxvZyA9IC1JbmZpbml0ZSwKICAJCQkgICAgLy8gdGh1cyB0cmlnZ2VyaW5nIGFuIGluZmluaXRlIGxvb3AgaW4gZmx5VG8KICAJCQkgICAgdmFyIGxvZyA9IHNxIDwgMC4wMDAwMDAwMDEgPyAtMTggOiBNYXRoLmxvZyhzcSk7CgogIAkJCXJldHVybiBsb2c7CiAgCQl9CgogIAkJZnVuY3Rpb24gc2luaChuKSB7IHJldHVybiAoTWF0aC5leHAobikgLSBNYXRoLmV4cCgtbikpIC8gMjsgfQogIAkJZnVuY3Rpb24gY29zaChuKSB7IHJldHVybiAoTWF0aC5leHAobikgKyBNYXRoLmV4cCgtbikpIC8gMjsgfQogIAkJZnVuY3Rpb24gdGFuaChuKSB7IHJldHVybiBzaW5oKG4pIC8gY29zaChuKTsgfQoKICAJCXZhciByMCA9IHIoMCk7CgogIAkJZnVuY3Rpb24gdyhzKSB7IHJldHVybiB3MCAqIChjb3NoKHIwKSAvIGNvc2gocjAgKyByaG8gKiBzKSk7IH0KICAJCWZ1bmN0aW9uIHUocykgeyByZXR1cm4gdzAgKiAoY29zaChyMCkgKiB0YW5oKHIwICsgcmhvICogcykgLSBzaW5oKHIwKSkgLyByaG8yOyB9CgogIAkJZnVuY3Rpb24gZWFzZU91dCh0KSB7IHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIDEuNSk7IH0KCiAgCQl2YXIgc3RhcnQgPSBEYXRlLm5vdygpLAogIAkJICAgIFMgPSAocigxKSAtIHIwKSAvIHJobywKICAJCSAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gPyAxMDAwICogb3B0aW9ucy5kdXJhdGlvbiA6IDEwMDAgKiBTICogMC44OwoKICAJCWZ1bmN0aW9uIGZyYW1lKCkgewogIAkJCXZhciB0ID0gKERhdGUubm93KCkgLSBzdGFydCkgLyBkdXJhdGlvbiwKICAJCQkgICAgcyA9IGVhc2VPdXQodCkgKiBTOwoKICAJCQlpZiAodCA8PSAxKSB7CiAgCQkJCXRoaXMuX2ZseVRvRnJhbWUgPSByZXF1ZXN0QW5pbUZyYW1lKGZyYW1lLCB0aGlzKTsKCiAgCQkJCXRoaXMuX21vdmUoCiAgCQkJCQl0aGlzLnVucHJvamVjdChmcm9tLmFkZCh0by5zdWJ0cmFjdChmcm9tKS5tdWx0aXBseUJ5KHUocykgLyB1MSkpLCBzdGFydFpvb20pLAogIAkJCQkJdGhpcy5nZXRTY2FsZVpvb20odzAgLyB3KHMpLCBzdGFydFpvb20pLAogIAkJCQkJe2ZseVRvOiB0cnVlfSk7CgogIAkJCX0gZWxzZSB7CiAgCQkJCXRoaXMKICAJCQkJCS5fbW92ZSh0YXJnZXRDZW50ZXIsIHRhcmdldFpvb20pCiAgCQkJCQkuX21vdmVFbmQodHJ1ZSk7CiAgCQkJfQogIAkJfQoKICAJCXRoaXMuX21vdmVTdGFydCh0cnVlLCBvcHRpb25zLm5vTW92ZVN0YXJ0KTsKCiAgCQlmcmFtZS5jYWxsKHRoaXMpOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGZseVRvQm91bmRzKGJvdW5kczogTGF0TG5nQm91bmRzLCBvcHRpb25zPzogZml0Qm91bmRzIG9wdGlvbnMpOiB0aGlzCiAgCS8vIFNldHMgdGhlIHZpZXcgb2YgdGhlIG1hcCB3aXRoIGEgc21vb3RoIGFuaW1hdGlvbiBsaWtlIFtgZmx5VG9gXSgjbWFwLWZseXRvKSwKICAJLy8gYnV0IHRha2VzIGEgYm91bmRzIHBhcmFtZXRlciBsaWtlIFtgZml0Qm91bmRzYF0oI21hcC1maXRib3VuZHMpLgogIAlmbHlUb0JvdW5kczogZnVuY3Rpb24gKGJvdW5kcywgb3B0aW9ucykgewogIAkJdmFyIHRhcmdldCA9IHRoaXMuX2dldEJvdW5kc0NlbnRlclpvb20oYm91bmRzLCBvcHRpb25zKTsKICAJCXJldHVybiB0aGlzLmZseVRvKHRhcmdldC5jZW50ZXIsIHRhcmdldC56b29tLCBvcHRpb25zKTsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0TWF4Qm91bmRzKGJvdW5kczogTGF0TG5nQm91bmRzKTogdGhpcwogIAkvLyBSZXN0cmljdHMgdGhlIG1hcCB2aWV3IHRvIHRoZSBnaXZlbiBib3VuZHMgKHNlZSB0aGUgW21heEJvdW5kc10oI21hcC1tYXhib3VuZHMpIG9wdGlvbikuCiAgCXNldE1heEJvdW5kczogZnVuY3Rpb24gKGJvdW5kcykgewogIAkJYm91bmRzID0gdG9MYXRMbmdCb3VuZHMoYm91bmRzKTsKCiAgCQlpZiAoIWJvdW5kcy5pc1ZhbGlkKCkpIHsKICAJCQl0aGlzLm9wdGlvbnMubWF4Qm91bmRzID0gbnVsbDsKICAJCQlyZXR1cm4gdGhpcy5vZmYoJ21vdmVlbmQnLCB0aGlzLl9wYW5JbnNpZGVNYXhCb3VuZHMpOwogIAkJfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMubWF4Qm91bmRzKSB7CiAgCQkJdGhpcy5vZmYoJ21vdmVlbmQnLCB0aGlzLl9wYW5JbnNpZGVNYXhCb3VuZHMpOwogIAkJfQoKICAJCXRoaXMub3B0aW9ucy5tYXhCb3VuZHMgPSBib3VuZHM7CgogIAkJaWYgKHRoaXMuX2xvYWRlZCkgewogIAkJCXRoaXMuX3Bhbkluc2lkZU1heEJvdW5kcygpOwogIAkJfQoKICAJCXJldHVybiB0aGlzLm9uKCdtb3ZlZW5kJywgdGhpcy5fcGFuSW5zaWRlTWF4Qm91bmRzKTsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0TWluWm9vbSh6b29tOiBOdW1iZXIpOiB0aGlzCiAgCS8vIFNldHMgdGhlIGxvd2VyIGxpbWl0IGZvciB0aGUgYXZhaWxhYmxlIHpvb20gbGV2ZWxzIChzZWUgdGhlIFttaW5ab29tXSgjbWFwLW1pbnpvb20pIG9wdGlvbikuCiAgCXNldE1pblpvb206IGZ1bmN0aW9uICh6b29tKSB7CiAgCQl2YXIgb2xkWm9vbSA9IHRoaXMub3B0aW9ucy5taW5ab29tOwogIAkJdGhpcy5vcHRpb25zLm1pblpvb20gPSB6b29tOwoKICAJCWlmICh0aGlzLl9sb2FkZWQgJiYgb2xkWm9vbSAhPT0gem9vbSkgewogIAkJCXRoaXMuZmlyZSgnem9vbWxldmVsc2NoYW5nZScpOwoKICAJCQlpZiAodGhpcy5nZXRab29tKCkgPCB0aGlzLm9wdGlvbnMubWluWm9vbSkgewogIAkJCQlyZXR1cm4gdGhpcy5zZXRab29tKHpvb20pOwogIAkJCX0KICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0TWF4Wm9vbSh6b29tOiBOdW1iZXIpOiB0aGlzCiAgCS8vIFNldHMgdGhlIHVwcGVyIGxpbWl0IGZvciB0aGUgYXZhaWxhYmxlIHpvb20gbGV2ZWxzIChzZWUgdGhlIFttYXhab29tXSgjbWFwLW1heHpvb20pIG9wdGlvbikuCiAgCXNldE1heFpvb206IGZ1bmN0aW9uICh6b29tKSB7CiAgCQl2YXIgb2xkWm9vbSA9IHRoaXMub3B0aW9ucy5tYXhab29tOwogIAkJdGhpcy5vcHRpb25zLm1heFpvb20gPSB6b29tOwoKICAJCWlmICh0aGlzLl9sb2FkZWQgJiYgb2xkWm9vbSAhPT0gem9vbSkgewogIAkJCXRoaXMuZmlyZSgnem9vbWxldmVsc2NoYW5nZScpOwoKICAJCQlpZiAodGhpcy5nZXRab29tKCkgPiB0aGlzLm9wdGlvbnMubWF4Wm9vbSkgewogIAkJCQlyZXR1cm4gdGhpcy5zZXRab29tKHpvb20pOwogIAkJCX0KICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgcGFuSW5zaWRlQm91bmRzKGJvdW5kczogTGF0TG5nQm91bmRzLCBvcHRpb25zPzogUGFuIG9wdGlvbnMpOiB0aGlzCiAgCS8vIFBhbnMgdGhlIG1hcCB0byB0aGUgY2xvc2VzdCB2aWV3IHRoYXQgd291bGQgbGllIGluc2lkZSB0aGUgZ2l2ZW4gYm91bmRzIChpZiBpdCdzIG5vdCBhbHJlYWR5KSwgY29udHJvbGxpbmcgdGhlIGFuaW1hdGlvbiB1c2luZyB0aGUgb3B0aW9ucyBzcGVjaWZpYywgaWYgYW55LgogIAlwYW5JbnNpZGVCb3VuZHM6IGZ1bmN0aW9uIChib3VuZHMsIG9wdGlvbnMpIHsKICAJCXRoaXMuX2VuZm9yY2luZ0JvdW5kcyA9IHRydWU7CiAgCQl2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXIoKSwKICAJCSAgICBuZXdDZW50ZXIgPSB0aGlzLl9saW1pdENlbnRlcihjZW50ZXIsIHRoaXMuX3pvb20sIHRvTGF0TG5nQm91bmRzKGJvdW5kcykpOwoKICAJCWlmICghY2VudGVyLmVxdWFscyhuZXdDZW50ZXIpKSB7CiAgCQkJdGhpcy5wYW5UbyhuZXdDZW50ZXIsIG9wdGlvbnMpOwogIAkJfQoKICAJCXRoaXMuX2VuZm9yY2luZ0JvdW5kcyA9IGZhbHNlOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHBhbkluc2lkZShsYXRsbmc6IExhdExuZywgb3B0aW9ucz86IHBhZGRpbmcgb3B0aW9ucyk6IHRoaXMKICAJLy8gUGFucyB0aGUgbWFwIHRoZSBtaW5pbXVtIGFtb3VudCB0byBtYWtlIHRoZSBgbGF0bG5nYCB2aXNpYmxlLiBVc2UKICAJLy8gcGFkZGluZyBvcHRpb25zIHRvIGZpdCB0aGUgZGlzcGxheSB0byBtb3JlIHJlc3RyaWN0ZWQgYm91bmRzLgogIAkvLyBJZiBgbGF0bG5nYCBpcyBhbHJlYWR5IHdpdGhpbiB0aGUgKG9wdGlvbmFsbHkgcGFkZGVkKSBkaXNwbGF5IGJvdW5kcywKICAJLy8gdGhlIG1hcCB3aWxsIG5vdCBiZSBwYW5uZWQuCiAgCXBhbkluc2lkZTogZnVuY3Rpb24gKGxhdGxuZywgb3B0aW9ucykgewogIAkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogIAkJdmFyIHBhZGRpbmdUTCA9IHRvUG9pbnQob3B0aW9ucy5wYWRkaW5nVG9wTGVmdCB8fCBvcHRpb25zLnBhZGRpbmcgfHwgWzAsIDBdKSwKICAJCSAgICBwYWRkaW5nQlIgPSB0b1BvaW50KG9wdGlvbnMucGFkZGluZ0JvdHRvbVJpZ2h0IHx8IG9wdGlvbnMucGFkZGluZyB8fCBbMCwgMF0pLAogIAkJICAgIHBpeGVsQ2VudGVyID0gdGhpcy5wcm9qZWN0KHRoaXMuZ2V0Q2VudGVyKCkpLAogIAkJICAgIHBpeGVsUG9pbnQgPSB0aGlzLnByb2plY3QobGF0bG5nKSwKICAJCSAgICBwaXhlbEJvdW5kcyA9IHRoaXMuZ2V0UGl4ZWxCb3VuZHMoKSwKICAJCSAgICBwYWRkZWRCb3VuZHMgPSB0b0JvdW5kcyhbcGl4ZWxCb3VuZHMubWluLmFkZChwYWRkaW5nVEwpLCBwaXhlbEJvdW5kcy5tYXguc3VidHJhY3QocGFkZGluZ0JSKV0pLAogIAkJICAgIHBhZGRlZFNpemUgPSBwYWRkZWRCb3VuZHMuZ2V0U2l6ZSgpOwoKICAJCWlmICghcGFkZGVkQm91bmRzLmNvbnRhaW5zKHBpeGVsUG9pbnQpKSB7CiAgCQkJdGhpcy5fZW5mb3JjaW5nQm91bmRzID0gdHJ1ZTsKICAJCQl2YXIgY2VudGVyT2Zmc2V0ID0gcGl4ZWxQb2ludC5zdWJ0cmFjdChwYWRkZWRCb3VuZHMuZ2V0Q2VudGVyKCkpOwogIAkJCXZhciBvZmZzZXQgPSBwYWRkZWRCb3VuZHMuZXh0ZW5kKHBpeGVsUG9pbnQpLmdldFNpemUoKS5zdWJ0cmFjdChwYWRkZWRTaXplKTsKICAJCQlwaXhlbENlbnRlci54ICs9IGNlbnRlck9mZnNldC54IDwgMCA/IC1vZmZzZXQueCA6IG9mZnNldC54OwogIAkJCXBpeGVsQ2VudGVyLnkgKz0gY2VudGVyT2Zmc2V0LnkgPCAwID8gLW9mZnNldC55IDogb2Zmc2V0Lnk7CiAgCQkJdGhpcy5wYW5Ubyh0aGlzLnVucHJvamVjdChwaXhlbENlbnRlciksIG9wdGlvbnMpOwogIAkJCXRoaXMuX2VuZm9yY2luZ0JvdW5kcyA9IGZhbHNlOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGludmFsaWRhdGVTaXplKG9wdGlvbnM6IFpvb20vcGFuIG9wdGlvbnMpOiB0aGlzCiAgCS8vIENoZWNrcyBpZiB0aGUgbWFwIGNvbnRhaW5lciBzaXplIGNoYW5nZWQgYW5kIHVwZGF0ZXMgdGhlIG1hcCBpZiBzbyDigJQKICAJLy8gY2FsbCBpdCBhZnRlciB5b3UndmUgY2hhbmdlZCB0aGUgbWFwIHNpemUgZHluYW1pY2FsbHksIGFsc28gYW5pbWF0aW5nCiAgCS8vIHBhbiBieSBkZWZhdWx0LiBJZiBgb3B0aW9ucy5wYW5gIGlzIGBmYWxzZWAsIHBhbm5pbmcgd2lsbCBub3Qgb2NjdXIuCiAgCS8vIElmIGBvcHRpb25zLmRlYm91bmNlTW92ZWVuZGAgaXMgYHRydWVgLCBpdCB3aWxsIGRlbGF5IGBtb3ZlZW5kYCBldmVudCBzbwogIAkvLyB0aGF0IGl0IGRvZXNuJ3QgaGFwcGVuIG9mdGVuIGV2ZW4gaWYgdGhlIG1ldGhvZCBpcyBjYWxsZWQgbWFueQogIAkvLyB0aW1lcyBpbiBhIHJvdy4KCiAgCS8vIEBhbHRlcm5hdGl2ZQogIAkvLyBAbWV0aG9kIGludmFsaWRhdGVTaXplKGFuaW1hdGU6IEJvb2xlYW4pOiB0aGlzCiAgCS8vIENoZWNrcyBpZiB0aGUgbWFwIGNvbnRhaW5lciBzaXplIGNoYW5nZWQgYW5kIHVwZGF0ZXMgdGhlIG1hcCBpZiBzbyDigJQKICAJLy8gY2FsbCBpdCBhZnRlciB5b3UndmUgY2hhbmdlZCB0aGUgbWFwIHNpemUgZHluYW1pY2FsbHksIGFsc28gYW5pbWF0aW5nCiAgCS8vIHBhbiBieSBkZWZhdWx0LgogIAlpbnZhbGlkYXRlU2l6ZTogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAJCWlmICghdGhpcy5fbG9hZGVkKSB7IHJldHVybiB0aGlzOyB9CgogIAkJb3B0aW9ucyA9IGV4dGVuZCh7CiAgCQkJYW5pbWF0ZTogZmFsc2UsCiAgCQkJcGFuOiB0cnVlCiAgCQl9LCBvcHRpb25zID09PSB0cnVlID8ge2FuaW1hdGU6IHRydWV9IDogb3B0aW9ucyk7CgogIAkJdmFyIG9sZFNpemUgPSB0aGlzLmdldFNpemUoKTsKICAJCXRoaXMuX3NpemVDaGFuZ2VkID0gdHJ1ZTsKICAJCXRoaXMuX2xhc3RDZW50ZXIgPSBudWxsOwoKICAJCXZhciBuZXdTaXplID0gdGhpcy5nZXRTaXplKCksCiAgCQkgICAgb2xkQ2VudGVyID0gb2xkU2l6ZS5kaXZpZGVCeSgyKS5yb3VuZCgpLAogIAkJICAgIG5ld0NlbnRlciA9IG5ld1NpemUuZGl2aWRlQnkoMikucm91bmQoKSwKICAJCSAgICBvZmZzZXQgPSBvbGRDZW50ZXIuc3VidHJhY3QobmV3Q2VudGVyKTsKCiAgCQlpZiAoIW9mZnNldC54ICYmICFvZmZzZXQueSkgeyByZXR1cm4gdGhpczsgfQoKICAJCWlmIChvcHRpb25zLmFuaW1hdGUgJiYgb3B0aW9ucy5wYW4pIHsKICAJCQl0aGlzLnBhbkJ5KG9mZnNldCk7CgogIAkJfSBlbHNlIHsKICAJCQlpZiAob3B0aW9ucy5wYW4pIHsKICAJCQkJdGhpcy5fcmF3UGFuQnkob2Zmc2V0KTsKICAJCQl9CgogIAkJCXRoaXMuZmlyZSgnbW92ZScpOwoKICAJCQlpZiAob3B0aW9ucy5kZWJvdW5jZU1vdmVlbmQpIHsKICAJCQkJY2xlYXJUaW1lb3V0KHRoaXMuX3NpemVUaW1lcik7CiAgCQkJCXRoaXMuX3NpemVUaW1lciA9IHNldFRpbWVvdXQoYmluZCh0aGlzLmZpcmUsIHRoaXMsICdtb3ZlZW5kJyksIDIwMCk7CiAgCQkJfSBlbHNlIHsKICAJCQkJdGhpcy5maXJlKCdtb3ZlZW5kJyk7CiAgCQkJfQogIAkJfQoKICAJCS8vIEBzZWN0aW9uIE1hcCBzdGF0ZSBjaGFuZ2UgZXZlbnRzCiAgCQkvLyBAZXZlbnQgcmVzaXplOiBSZXNpemVFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgbWFwIGlzIHJlc2l6ZWQuCiAgCQlyZXR1cm4gdGhpcy5maXJlKCdyZXNpemUnLCB7CiAgCQkJb2xkU2l6ZTogb2xkU2l6ZSwKICAJCQluZXdTaXplOiBuZXdTaXplCiAgCQl9KTsKICAJfSwKCiAgCS8vIEBzZWN0aW9uIE1ldGhvZHMgZm9yIG1vZGlmeWluZyBtYXAgc3RhdGUKICAJLy8gQG1ldGhvZCBzdG9wKCk6IHRoaXMKICAJLy8gU3RvcHMgdGhlIGN1cnJlbnRseSBydW5uaW5nIGBwYW5Ub2Agb3IgYGZseVRvYCBhbmltYXRpb24sIGlmIGFueS4KICAJc3RvcDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5zZXRab29tKHRoaXMuX2xpbWl0Wm9vbSh0aGlzLl96b29tKSk7CiAgCQlpZiAoIXRoaXMub3B0aW9ucy56b29tU25hcCkgewogIAkJCXRoaXMuZmlyZSgndmlld3Jlc2V0Jyk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpcy5fc3RvcCgpOwogIAl9LAoKICAJLy8gQHNlY3Rpb24gR2VvbG9jYXRpb24gbWV0aG9kcwogIAkvLyBAbWV0aG9kIGxvY2F0ZShvcHRpb25zPzogTG9jYXRlIG9wdGlvbnMpOiB0aGlzCiAgCS8vIFRyaWVzIHRvIGxvY2F0ZSB0aGUgdXNlciB1c2luZyB0aGUgR2VvbG9jYXRpb24gQVBJLCBmaXJpbmcgYSBbYGxvY2F0aW9uZm91bmRgXSgjbWFwLWxvY2F0aW9uZm91bmQpCiAgCS8vIGV2ZW50IHdpdGggbG9jYXRpb24gZGF0YSBvbiBzdWNjZXNzIG9yIGEgW2Bsb2NhdGlvbmVycm9yYF0oI21hcC1sb2NhdGlvbmVycm9yKSBldmVudCBvbiBmYWlsdXJlLAogIAkvLyBhbmQgb3B0aW9uYWxseSBzZXRzIHRoZSBtYXAgdmlldyB0byB0aGUgdXNlcidzIGxvY2F0aW9uIHdpdGggcmVzcGVjdCB0bwogIAkvLyBkZXRlY3Rpb24gYWNjdXJhY3kgKG9yIHRvIHRoZSB3b3JsZCB2aWV3IGlmIGdlb2xvY2F0aW9uIGZhaWxlZCkuCiAgCS8vIE5vdGUgdGhhdCwgaWYgeW91ciBwYWdlIGRvZXNuJ3QgdXNlIEhUVFBTLCB0aGlzIG1ldGhvZCB3aWxsIGZhaWwgaW4KICAJLy8gbW9kZXJuIGJyb3dzZXJzIChbQ2hyb21lIDUwIGFuZCBuZXdlcl0oaHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL2EvY2hyb21pdW0ub3JnL2Rldi9Ib21lL2Nocm9taXVtLXNlY3VyaXR5L2RlcHJlY2F0aW5nLXBvd2VyZnVsLWZlYXR1cmVzLW9uLWluc2VjdXJlLW9yaWdpbnMpKQogIAkvLyBTZWUgYExvY2F0ZSBvcHRpb25zYCBmb3IgbW9yZSBkZXRhaWxzLgogIAlsb2NhdGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7CgogIAkJb3B0aW9ucyA9IHRoaXMuX2xvY2F0ZU9wdGlvbnMgPSBleHRlbmQoewogIAkJCXRpbWVvdXQ6IDEwMDAwLAogIAkJCXdhdGNoOiBmYWxzZQogIAkJCS8vIHNldFZpZXc6IGZhbHNlCiAgCQkJLy8gbWF4Wm9vbTogPE51bWJlcj4KICAJCQkvLyBtYXhpbXVtQWdlOiAwCiAgCQkJLy8gZW5hYmxlSGlnaEFjY3VyYWN5OiBmYWxzZQogIAkJfSwgb3B0aW9ucyk7CgogIAkJaWYgKCEoJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3IpKSB7CiAgCQkJdGhpcy5faGFuZGxlR2VvbG9jYXRpb25FcnJvcih7CiAgCQkJCWNvZGU6IDAsCiAgCQkJCW1lc3NhZ2U6ICdHZW9sb2NhdGlvbiBub3Qgc3VwcG9ydGVkLicKICAJCQl9KTsKICAJCQlyZXR1cm4gdGhpczsKICAJCX0KCiAgCQl2YXIgb25SZXNwb25zZSA9IGJpbmQodGhpcy5faGFuZGxlR2VvbG9jYXRpb25SZXNwb25zZSwgdGhpcyksCiAgCQkgICAgb25FcnJvciA9IGJpbmQodGhpcy5faGFuZGxlR2VvbG9jYXRpb25FcnJvciwgdGhpcyk7CgogIAkJaWYgKG9wdGlvbnMud2F0Y2gpIHsKICAJCQl0aGlzLl9sb2NhdGlvbldhdGNoSWQgPQogIAkJCSAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24ob25SZXNwb25zZSwgb25FcnJvciwgb3B0aW9ucyk7CiAgCQl9IGVsc2UgewogIAkJCW5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ob25SZXNwb25zZSwgb25FcnJvciwgb3B0aW9ucyk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc3RvcExvY2F0ZSgpOiB0aGlzCiAgCS8vIFN0b3BzIHdhdGNoaW5nIGxvY2F0aW9uIHByZXZpb3VzbHkgaW5pdGlhdGVkIGJ5IGBtYXAubG9jYXRlKHt3YXRjaDogdHJ1ZX0pYAogIAkvLyBhbmQgYWJvcnRzIHJlc2V0dGluZyB0aGUgbWFwIHZpZXcgaWYgbWFwLmxvY2F0ZSB3YXMgY2FsbGVkIHdpdGgKICAJLy8gYHtzZXRWaWV3OiB0cnVlfWAuCiAgCXN0b3BMb2NhdGU6IGZ1bmN0aW9uICgpIHsKICAJCWlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24gJiYgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2gpIHsKICAJCQluYXZpZ2F0b3IuZ2VvbG9jYXRpb24uY2xlYXJXYXRjaCh0aGlzLl9sb2NhdGlvbldhdGNoSWQpOwogIAkJfQogIAkJaWYgKHRoaXMuX2xvY2F0ZU9wdGlvbnMpIHsKICAJCQl0aGlzLl9sb2NhdGVPcHRpb25zLnNldFZpZXcgPSBmYWxzZTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJX2hhbmRsZUdlb2xvY2F0aW9uRXJyb3I6IGZ1bmN0aW9uIChlcnJvcikgewogIAkJaWYgKCF0aGlzLl9jb250YWluZXIuX2xlYWZsZXRfaWQpIHsgcmV0dXJuOyB9CgogIAkJdmFyIGMgPSBlcnJvci5jb2RlLAogIAkJICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8CiAgCQkgICAgICAgICAgICAoYyA9PT0gMSA/ICdwZXJtaXNzaW9uIGRlbmllZCcgOgogIAkJICAgICAgICAgICAgKGMgPT09IDIgPyAncG9zaXRpb24gdW5hdmFpbGFibGUnIDogJ3RpbWVvdXQnKSk7CgogIAkJaWYgKHRoaXMuX2xvY2F0ZU9wdGlvbnMuc2V0VmlldyAmJiAhdGhpcy5fbG9hZGVkKSB7CiAgCQkJdGhpcy5maXRXb3JsZCgpOwogIAkJfQoKICAJCS8vIEBzZWN0aW9uIExvY2F0aW9uIGV2ZW50cwogIAkJLy8gQGV2ZW50IGxvY2F0aW9uZXJyb3I6IEVycm9yRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gZ2VvbG9jYXRpb24gKHVzaW5nIHRoZSBbYGxvY2F0ZWBdKCNtYXAtbG9jYXRlKSBtZXRob2QpIGZhaWxlZC4KICAJCXRoaXMuZmlyZSgnbG9jYXRpb25lcnJvcicsIHsKICAJCQljb2RlOiBjLAogIAkJCW1lc3NhZ2U6ICdHZW9sb2NhdGlvbiBlcnJvcjogJyArIG1lc3NhZ2UgKyAnLicKICAJCX0pOwogIAl9LAoKICAJX2hhbmRsZUdlb2xvY2F0aW9uUmVzcG9uc2U6IGZ1bmN0aW9uIChwb3MpIHsKICAJCWlmICghdGhpcy5fY29udGFpbmVyLl9sZWFmbGV0X2lkKSB7IHJldHVybjsgfQoKICAJCXZhciBsYXQgPSBwb3MuY29vcmRzLmxhdGl0dWRlLAogIAkJICAgIGxuZyA9IHBvcy5jb29yZHMubG9uZ2l0dWRlLAogIAkJICAgIGxhdGxuZyA9IG5ldyBMYXRMbmcobGF0LCBsbmcpLAogIAkJICAgIGJvdW5kcyA9IGxhdGxuZy50b0JvdW5kcyhwb3MuY29vcmRzLmFjY3VyYWN5ICogMiksCiAgCQkgICAgb3B0aW9ucyA9IHRoaXMuX2xvY2F0ZU9wdGlvbnM7CgogIAkJaWYgKG9wdGlvbnMuc2V0VmlldykgewogIAkJCXZhciB6b29tID0gdGhpcy5nZXRCb3VuZHNab29tKGJvdW5kcyk7CiAgCQkJdGhpcy5zZXRWaWV3KGxhdGxuZywgb3B0aW9ucy5tYXhab29tID8gTWF0aC5taW4oem9vbSwgb3B0aW9ucy5tYXhab29tKSA6IHpvb20pOwogIAkJfQoKICAJCXZhciBkYXRhID0gewogIAkJCWxhdGxuZzogbGF0bG5nLAogIAkJCWJvdW5kczogYm91bmRzLAogIAkJCXRpbWVzdGFtcDogcG9zLnRpbWVzdGFtcAogIAkJfTsKCiAgCQlmb3IgKHZhciBpIGluIHBvcy5jb29yZHMpIHsKICAJCQlpZiAodHlwZW9mIHBvcy5jb29yZHNbaV0gPT09ICdudW1iZXInKSB7CiAgCQkJCWRhdGFbaV0gPSBwb3MuY29vcmRzW2ldOwogIAkJCX0KICAJCX0KCiAgCQkvLyBAZXZlbnQgbG9jYXRpb25mb3VuZDogTG9jYXRpb25FdmVudAogIAkJLy8gRmlyZWQgd2hlbiBnZW9sb2NhdGlvbiAodXNpbmcgdGhlIFtgbG9jYXRlYF0oI21hcC1sb2NhdGUpIG1ldGhvZCkKICAJCS8vIHdlbnQgc3VjY2Vzc2Z1bGx5LgogIAkJdGhpcy5maXJlKCdsb2NhdGlvbmZvdW5kJywgZGF0YSk7CiAgCX0sCgogIAkvLyBUT0RPIEFwcHJvcHJpYXRlIGRvY3Mgc2VjdGlvbj8KICAJLy8gQHNlY3Rpb24gT3RoZXIgTWV0aG9kcwogIAkvLyBAbWV0aG9kIGFkZEhhbmRsZXIobmFtZTogU3RyaW5nLCBIYW5kbGVyQ2xhc3M6IEZ1bmN0aW9uKTogdGhpcwogIAkvLyBBZGRzIGEgbmV3IGBIYW5kbGVyYCB0byB0aGUgbWFwLCBnaXZlbiBpdHMgbmFtZSBhbmQgY29uc3RydWN0b3IgZnVuY3Rpb24uCiAgCWFkZEhhbmRsZXI6IGZ1bmN0aW9uIChuYW1lLCBIYW5kbGVyQ2xhc3MpIHsKICAJCWlmICghSGFuZGxlckNsYXNzKSB7IHJldHVybiB0aGlzOyB9CgogIAkJdmFyIGhhbmRsZXIgPSB0aGlzW25hbWVdID0gbmV3IEhhbmRsZXJDbGFzcyh0aGlzKTsKCiAgCQl0aGlzLl9oYW5kbGVycy5wdXNoKGhhbmRsZXIpOwoKICAJCWlmICh0aGlzLm9wdGlvbnNbbmFtZV0pIHsKICAJCQloYW5kbGVyLmVuYWJsZSgpOwogIAkJfQoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCByZW1vdmUoKTogdGhpcwogIAkvLyBEZXN0cm95cyB0aGUgbWFwIGFuZCBjbGVhcnMgYWxsIHJlbGF0ZWQgZXZlbnQgbGlzdGVuZXJzLgogIAlyZW1vdmU6IGZ1bmN0aW9uICgpIHsKCiAgCQl0aGlzLl9pbml0RXZlbnRzKHRydWUpOwogIAkJaWYgKHRoaXMub3B0aW9ucy5tYXhCb3VuZHMpIHsgdGhpcy5vZmYoJ21vdmVlbmQnLCB0aGlzLl9wYW5JbnNpZGVNYXhCb3VuZHMpOyB9CgogIAkJaWYgKHRoaXMuX2NvbnRhaW5lcklkICE9PSB0aGlzLl9jb250YWluZXIuX2xlYWZsZXRfaWQpIHsKICAJCQl0aHJvdyBuZXcgRXJyb3IoJ01hcCBjb250YWluZXIgaXMgYmVpbmcgcmV1c2VkIGJ5IGFub3RoZXIgaW5zdGFuY2UnKTsKICAJCX0KCiAgCQl0cnkgewogIAkJCS8vIHRocm93cyBlcnJvciBpbiBJRTYtOAogIAkJCWRlbGV0ZSB0aGlzLl9jb250YWluZXIuX2xlYWZsZXRfaWQ7CiAgCQkJZGVsZXRlIHRoaXMuX2NvbnRhaW5lcklkOwogIAkJfSBjYXRjaCAoZSkgewogIAkJCS8qZXNsaW50LWRpc2FibGUgKi8KICAJCQl0aGlzLl9jb250YWluZXIuX2xlYWZsZXRfaWQgPSB1bmRlZmluZWQ7CiAgCQkJLyogZXNsaW50LWVuYWJsZSAqLwogIAkJCXRoaXMuX2NvbnRhaW5lcklkID0gdW5kZWZpbmVkOwogIAkJfQoKICAJCWlmICh0aGlzLl9sb2NhdGlvbldhdGNoSWQgIT09IHVuZGVmaW5lZCkgewogIAkJCXRoaXMuc3RvcExvY2F0ZSgpOwogIAkJfQoKICAJCXRoaXMuX3N0b3AoKTsKCiAgCQlyZW1vdmUodGhpcy5fbWFwUGFuZSk7CgogIAkJaWYgKHRoaXMuX2NsZWFyQ29udHJvbFBvcykgewogIAkJCXRoaXMuX2NsZWFyQ29udHJvbFBvcygpOwogIAkJfQogIAkJaWYgKHRoaXMuX3Jlc2l6ZVJlcXVlc3QpIHsKICAJCQljYW5jZWxBbmltRnJhbWUodGhpcy5fcmVzaXplUmVxdWVzdCk7CiAgCQkJdGhpcy5fcmVzaXplUmVxdWVzdCA9IG51bGw7CiAgCQl9CgogIAkJdGhpcy5fY2xlYXJIYW5kbGVycygpOwoKICAJCWlmICh0aGlzLl9sb2FkZWQpIHsKICAJCQkvLyBAc2VjdGlvbiBNYXAgc3RhdGUgY2hhbmdlIGV2ZW50cwogIAkJCS8vIEBldmVudCB1bmxvYWQ6IEV2ZW50CiAgCQkJLy8gRmlyZWQgd2hlbiB0aGUgbWFwIGlzIGRlc3Ryb3llZCB3aXRoIFtyZW1vdmVdKCNtYXAtcmVtb3ZlKSBtZXRob2QuCiAgCQkJdGhpcy5maXJlKCd1bmxvYWQnKTsKICAJCX0KCiAgCQl2YXIgaTsKICAJCWZvciAoaSBpbiB0aGlzLl9sYXllcnMpIHsKICAJCQl0aGlzLl9sYXllcnNbaV0ucmVtb3ZlKCk7CiAgCQl9CiAgCQlmb3IgKGkgaW4gdGhpcy5fcGFuZXMpIHsKICAJCQlyZW1vdmUodGhpcy5fcGFuZXNbaV0pOwogIAkJfQoKICAJCXRoaXMuX2xheWVycyA9IFtdOwogIAkJdGhpcy5fcGFuZXMgPSBbXTsKICAJCWRlbGV0ZSB0aGlzLl9tYXBQYW5lOwogIAkJZGVsZXRlIHRoaXMuX3JlbmRlcmVyOwoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQHNlY3Rpb24gT3RoZXIgTWV0aG9kcwogIAkvLyBAbWV0aG9kIGNyZWF0ZVBhbmUobmFtZTogU3RyaW5nLCBjb250YWluZXI/OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50CiAgCS8vIENyZWF0ZXMgYSBuZXcgW21hcCBwYW5lXSgjbWFwLXBhbmUpIHdpdGggdGhlIGdpdmVuIG5hbWUgaWYgaXQgZG9lc24ndCBleGlzdCBhbHJlYWR5LAogIAkvLyB0aGVuIHJldHVybnMgaXQuIFRoZSBwYW5lIGlzIGNyZWF0ZWQgYXMgYSBjaGlsZCBvZiBgY29udGFpbmVyYCwgb3IKICAJLy8gYXMgYSBjaGlsZCBvZiB0aGUgbWFpbiBtYXAgcGFuZSBpZiBub3Qgc2V0LgogIAljcmVhdGVQYW5lOiBmdW5jdGlvbiAobmFtZSwgY29udGFpbmVyKSB7CiAgCQl2YXIgY2xhc3NOYW1lID0gJ2xlYWZsZXQtcGFuZScgKyAobmFtZSA/ICcgbGVhZmxldC0nICsgbmFtZS5yZXBsYWNlKCdQYW5lJywgJycpICsgJy1wYW5lJyA6ICcnKSwKICAJCSAgICBwYW5lID0gY3JlYXRlJDEoJ2RpdicsIGNsYXNzTmFtZSwgY29udGFpbmVyIHx8IHRoaXMuX21hcFBhbmUpOwoKICAJCWlmIChuYW1lKSB7CiAgCQkJdGhpcy5fcGFuZXNbbmFtZV0gPSBwYW5lOwogIAkJfQogIAkJcmV0dXJuIHBhbmU7CiAgCX0sCgogIAkvLyBAc2VjdGlvbiBNZXRob2RzIGZvciBHZXR0aW5nIE1hcCBTdGF0ZQoKICAJLy8gQG1ldGhvZCBnZXRDZW50ZXIoKTogTGF0TG5nCiAgCS8vIFJldHVybnMgdGhlIGdlb2dyYXBoaWNhbCBjZW50ZXIgb2YgdGhlIG1hcCB2aWV3CiAgCWdldENlbnRlcjogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fY2hlY2tJZkxvYWRlZCgpOwoKICAJCWlmICh0aGlzLl9sYXN0Q2VudGVyICYmICF0aGlzLl9tb3ZlZCgpKSB7CiAgCQkJcmV0dXJuIHRoaXMuX2xhc3RDZW50ZXI7CiAgCQl9CiAgCQlyZXR1cm4gdGhpcy5sYXllclBvaW50VG9MYXRMbmcodGhpcy5fZ2V0Q2VudGVyTGF5ZXJQb2ludCgpKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Wm9vbSgpOiBOdW1iZXIKICAJLy8gUmV0dXJucyB0aGUgY3VycmVudCB6b29tIGxldmVsIG9mIHRoZSBtYXAgdmlldwogIAlnZXRab29tOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fem9vbTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Qm91bmRzKCk6IExhdExuZ0JvdW5kcwogIAkvLyBSZXR1cm5zIHRoZSBnZW9ncmFwaGljYWwgYm91bmRzIHZpc2libGUgaW4gdGhlIGN1cnJlbnQgbWFwIHZpZXcKICAJZ2V0Qm91bmRzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgYm91bmRzID0gdGhpcy5nZXRQaXhlbEJvdW5kcygpLAogIAkJICAgIHN3ID0gdGhpcy51bnByb2plY3QoYm91bmRzLmdldEJvdHRvbUxlZnQoKSksCiAgCQkgICAgbmUgPSB0aGlzLnVucHJvamVjdChib3VuZHMuZ2V0VG9wUmlnaHQoKSk7CgogIAkJcmV0dXJuIG5ldyBMYXRMbmdCb3VuZHMoc3csIG5lKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0TWluWm9vbSgpOiBOdW1iZXIKICAJLy8gUmV0dXJucyB0aGUgbWluaW11bSB6b29tIGxldmVsIG9mIHRoZSBtYXAgKGlmIHNldCBpbiB0aGUgYG1pblpvb21gIG9wdGlvbiBvZiB0aGUgbWFwIG9yIG9mIGFueSBsYXllcnMpLCBvciBgMGAgYnkgZGVmYXVsdC4KICAJZ2V0TWluWm9vbTogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMub3B0aW9ucy5taW5ab29tID09PSB1bmRlZmluZWQgPyB0aGlzLl9sYXllcnNNaW5ab29tIHx8IDAgOiB0aGlzLm9wdGlvbnMubWluWm9vbTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0TWF4Wm9vbSgpOiBOdW1iZXIKICAJLy8gUmV0dXJucyB0aGUgbWF4aW11bSB6b29tIGxldmVsIG9mIHRoZSBtYXAgKGlmIHNldCBpbiB0aGUgYG1heFpvb21gIG9wdGlvbiBvZiB0aGUgbWFwIG9yIG9mIGFueSBsYXllcnMpLgogIAlnZXRNYXhab29tOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5vcHRpb25zLm1heFpvb20gPT09IHVuZGVmaW5lZCA/CiAgCQkJKHRoaXMuX2xheWVyc01heFpvb20gPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogdGhpcy5fbGF5ZXJzTWF4Wm9vbSkgOgogIAkJCXRoaXMub3B0aW9ucy5tYXhab29tOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRCb3VuZHNab29tKGJvdW5kczogTGF0TG5nQm91bmRzLCBpbnNpZGU/OiBCb29sZWFuLCBwYWRkaW5nPzogUG9pbnQpOiBOdW1iZXIKICAJLy8gUmV0dXJucyB0aGUgbWF4aW11bSB6b29tIGxldmVsIG9uIHdoaWNoIHRoZSBnaXZlbiBib3VuZHMgZml0IHRvIHRoZSBtYXAKICAJLy8gdmlldyBpbiBpdHMgZW50aXJldHkuIElmIGBpbnNpZGVgIChvcHRpb25hbCkgaXMgc2V0IHRvIGB0cnVlYCwgdGhlIG1ldGhvZAogIAkvLyBpbnN0ZWFkIHJldHVybnMgdGhlIG1pbmltdW0gem9vbSBsZXZlbCBvbiB3aGljaCB0aGUgbWFwIHZpZXcgZml0cyBpbnRvCiAgCS8vIHRoZSBnaXZlbiBib3VuZHMgaW4gaXRzIGVudGlyZXR5LgogIAlnZXRCb3VuZHNab29tOiBmdW5jdGlvbiAoYm91bmRzLCBpbnNpZGUsIHBhZGRpbmcpIHsgLy8gKExhdExuZ0JvdW5kc1ssIEJvb2xlYW4sIFBvaW50XSkgLT4gTnVtYmVyCiAgCQlib3VuZHMgPSB0b0xhdExuZ0JvdW5kcyhib3VuZHMpOwogIAkJcGFkZGluZyA9IHRvUG9pbnQocGFkZGluZyB8fCBbMCwgMF0pOwoKICAJCXZhciB6b29tID0gdGhpcy5nZXRab29tKCkgfHwgMCwKICAJCSAgICBtaW4gPSB0aGlzLmdldE1pblpvb20oKSwKICAJCSAgICBtYXggPSB0aGlzLmdldE1heFpvb20oKSwKICAJCSAgICBudyA9IGJvdW5kcy5nZXROb3J0aFdlc3QoKSwKICAJCSAgICBzZSA9IGJvdW5kcy5nZXRTb3V0aEVhc3QoKSwKICAJCSAgICBzaXplID0gdGhpcy5nZXRTaXplKCkuc3VidHJhY3QocGFkZGluZyksCiAgCQkgICAgYm91bmRzU2l6ZSA9IHRvQm91bmRzKHRoaXMucHJvamVjdChzZSwgem9vbSksIHRoaXMucHJvamVjdChudywgem9vbSkpLmdldFNpemUoKSwKICAJCSAgICBzbmFwID0gQnJvd3Nlci5hbnkzZCA/IHRoaXMub3B0aW9ucy56b29tU25hcCA6IDEsCiAgCQkgICAgc2NhbGV4ID0gc2l6ZS54IC8gYm91bmRzU2l6ZS54LAogIAkJICAgIHNjYWxleSA9IHNpemUueSAvIGJvdW5kc1NpemUueSwKICAJCSAgICBzY2FsZSA9IGluc2lkZSA/IE1hdGgubWF4KHNjYWxleCwgc2NhbGV5KSA6IE1hdGgubWluKHNjYWxleCwgc2NhbGV5KTsKCiAgCQl6b29tID0gdGhpcy5nZXRTY2FsZVpvb20oc2NhbGUsIHpvb20pOwoKICAJCWlmIChzbmFwKSB7CiAgCQkJem9vbSA9IE1hdGgucm91bmQoem9vbSAvIChzbmFwIC8gMTAwKSkgKiAoc25hcCAvIDEwMCk7IC8vIGRvbid0IGp1bXAgaWYgd2l0aGluIDElIG9mIGEgc25hcCBsZXZlbAogIAkJCXpvb20gPSBpbnNpZGUgPyBNYXRoLmNlaWwoem9vbSAvIHNuYXApICogc25hcCA6IE1hdGguZmxvb3Ioem9vbSAvIHNuYXApICogc25hcDsKICAJCX0KCiAgCQlyZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHpvb20pKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0U2l6ZSgpOiBQb2ludAogIAkvLyBSZXR1cm5zIHRoZSBjdXJyZW50IHNpemUgb2YgdGhlIG1hcCBjb250YWluZXIgKGluIHBpeGVscykuCiAgCWdldFNpemU6IGZ1bmN0aW9uICgpIHsKICAJCWlmICghdGhpcy5fc2l6ZSB8fCB0aGlzLl9zaXplQ2hhbmdlZCkgewogIAkJCXRoaXMuX3NpemUgPSBuZXcgUG9pbnQoCiAgCQkJCXRoaXMuX2NvbnRhaW5lci5jbGllbnRXaWR0aCB8fCAwLAogIAkJCQl0aGlzLl9jb250YWluZXIuY2xpZW50SGVpZ2h0IHx8IDApOwoKICAJCQl0aGlzLl9zaXplQ2hhbmdlZCA9IGZhbHNlOwogIAkJfQogIAkJcmV0dXJuIHRoaXMuX3NpemUuY2xvbmUoKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0UGl4ZWxCb3VuZHMoKTogQm91bmRzCiAgCS8vIFJldHVybnMgdGhlIGJvdW5kcyBvZiB0aGUgY3VycmVudCBtYXAgdmlldyBpbiBwcm9qZWN0ZWQgcGl4ZWwKICAJLy8gY29vcmRpbmF0ZXMgKHNvbWV0aW1lcyB1c2VmdWwgaW4gbGF5ZXIgYW5kIG92ZXJsYXkgaW1wbGVtZW50YXRpb25zKS4KICAJZ2V0UGl4ZWxCb3VuZHM6IGZ1bmN0aW9uIChjZW50ZXIsIHpvb20pIHsKICAJCXZhciB0b3BMZWZ0UG9pbnQgPSB0aGlzLl9nZXRUb3BMZWZ0UG9pbnQoY2VudGVyLCB6b29tKTsKICAJCXJldHVybiBuZXcgQm91bmRzKHRvcExlZnRQb2ludCwgdG9wTGVmdFBvaW50LmFkZCh0aGlzLmdldFNpemUoKSkpOwogIAl9LAoKICAJLy8gVE9ETzogQ2hlY2sgc2VtYW50aWNzIC0gaXNuJ3QgdGhlIHBpeGVsIG9yaWdpbiB0aGUgMCwwIGNvb3JkIHJlbGF0aXZlIHRvCiAgCS8vIHRoZSBtYXAgcGFuZT8gImxlZnQgcG9pbnQgb2YgdGhlIG1hcCBsYXllciIgY2FuIGJlIGNvbmZ1c2luZywgc3BlY2lhbGx5CiAgCS8vIHNpbmNlIHRoZXJlIGNhbiBiZSBuZWdhdGl2ZSBvZmZzZXRzLgogIAkvLyBAbWV0aG9kIGdldFBpeGVsT3JpZ2luKCk6IFBvaW50CiAgCS8vIFJldHVybnMgdGhlIHByb2plY3RlZCBwaXhlbCBjb29yZGluYXRlcyBvZiB0aGUgdG9wIGxlZnQgcG9pbnQgb2YKICAJLy8gdGhlIG1hcCBsYXllciAodXNlZnVsIGluIGN1c3RvbSBsYXllciBhbmQgb3ZlcmxheSBpbXBsZW1lbnRhdGlvbnMpLgogIAlnZXRQaXhlbE9yaWdpbjogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fY2hlY2tJZkxvYWRlZCgpOwogIAkJcmV0dXJuIHRoaXMuX3BpeGVsT3JpZ2luOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRQaXhlbFdvcmxkQm91bmRzKHpvb20/OiBOdW1iZXIpOiBCb3VuZHMKICAJLy8gUmV0dXJucyB0aGUgd29ybGQncyBib3VuZHMgaW4gcGl4ZWwgY29vcmRpbmF0ZXMgZm9yIHpvb20gbGV2ZWwgYHpvb21gLgogIAkvLyBJZiBgem9vbWAgaXMgb21pdHRlZCwgdGhlIG1hcCdzIGN1cnJlbnQgem9vbSBsZXZlbCBpcyB1c2VkLgogIAlnZXRQaXhlbFdvcmxkQm91bmRzOiBmdW5jdGlvbiAoem9vbSkgewogIAkJcmV0dXJuIHRoaXMub3B0aW9ucy5jcnMuZ2V0UHJvamVjdGVkQm91bmRzKHpvb20gPT09IHVuZGVmaW5lZCA/IHRoaXMuZ2V0Wm9vbSgpIDogem9vbSk7CiAgCX0sCgogIAkvLyBAc2VjdGlvbiBPdGhlciBNZXRob2RzCgogIAkvLyBAbWV0aG9kIGdldFBhbmUocGFuZTogU3RyaW5nfEhUTUxFbGVtZW50KTogSFRNTEVsZW1lbnQKICAJLy8gUmV0dXJucyBhIFttYXAgcGFuZV0oI21hcC1wYW5lKSwgZ2l2ZW4gaXRzIG5hbWUgb3IgaXRzIEhUTUwgZWxlbWVudCAoaXRzIGlkZW50aXR5KS4KICAJZ2V0UGFuZTogZnVuY3Rpb24gKHBhbmUpIHsKICAJCXJldHVybiB0eXBlb2YgcGFuZSA9PT0gJ3N0cmluZycgPyB0aGlzLl9wYW5lc1twYW5lXSA6IHBhbmU7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldFBhbmVzKCk6IE9iamVjdAogIAkvLyBSZXR1cm5zIGEgcGxhaW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG5hbWVzIG9mIGFsbCBbcGFuZXNdKCNtYXAtcGFuZSkgYXMga2V5cyBhbmQKICAJLy8gdGhlIHBhbmVzIGFzIHZhbHVlcy4KICAJZ2V0UGFuZXM6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9wYW5lczsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Q29udGFpbmVyOiBIVE1MRWxlbWVudAogIAkvLyBSZXR1cm5zIHRoZSBIVE1MIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgbWFwLgogIAlnZXRDb250YWluZXI6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9jb250YWluZXI7CiAgCX0sCgoKICAJLy8gQHNlY3Rpb24gQ29udmVyc2lvbiBNZXRob2RzCgogIAkvLyBAbWV0aG9kIGdldFpvb21TY2FsZSh0b1pvb206IE51bWJlciwgZnJvbVpvb206IE51bWJlcik6IE51bWJlcgogIAkvLyBSZXR1cm5zIHRoZSBzY2FsZSBmYWN0b3IgdG8gYmUgYXBwbGllZCB0byBhIG1hcCB0cmFuc2l0aW9uIGZyb20gem9vbSBsZXZlbAogIAkvLyBgZnJvbVpvb21gIHRvIGB0b1pvb21gLiBVc2VkIGludGVybmFsbHkgdG8gaGVscCB3aXRoIHpvb20gYW5pbWF0aW9ucy4KICAJZ2V0Wm9vbVNjYWxlOiBmdW5jdGlvbiAodG9ab29tLCBmcm9tWm9vbSkgewogIAkJLy8gVE9ETyByZXBsYWNlIHdpdGggdW5pdmVyc2FsIGltcGxlbWVudGF0aW9uIGFmdGVyIHJlZmFjdG9yaW5nIHByb2plY3Rpb25zCiAgCQl2YXIgY3JzID0gdGhpcy5vcHRpb25zLmNyczsKICAJCWZyb21ab29tID0gZnJvbVpvb20gPT09IHVuZGVmaW5lZCA/IHRoaXMuX3pvb20gOiBmcm9tWm9vbTsKICAJCXJldHVybiBjcnMuc2NhbGUodG9ab29tKSAvIGNycy5zY2FsZShmcm9tWm9vbSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldFNjYWxlWm9vbShzY2FsZTogTnVtYmVyLCBmcm9tWm9vbTogTnVtYmVyKTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIHpvb20gbGV2ZWwgdGhhdCB0aGUgbWFwIHdvdWxkIGVuZCB1cCBhdCwgaWYgaXQgaXMgYXQgYGZyb21ab29tYAogIAkvLyBsZXZlbCBhbmQgZXZlcnl0aGluZyBpcyBzY2FsZWQgYnkgYSBmYWN0b3Igb2YgYHNjYWxlYC4gSW52ZXJzZSBvZgogIAkvLyBbYGdldFpvb21TY2FsZWBdKCNtYXAtZ2V0Wm9vbVNjYWxlKS4KICAJZ2V0U2NhbGVab29tOiBmdW5jdGlvbiAoc2NhbGUsIGZyb21ab29tKSB7CiAgCQl2YXIgY3JzID0gdGhpcy5vcHRpb25zLmNyczsKICAJCWZyb21ab29tID0gZnJvbVpvb20gPT09IHVuZGVmaW5lZCA/IHRoaXMuX3pvb20gOiBmcm9tWm9vbTsKICAJCXZhciB6b29tID0gY3JzLnpvb20oc2NhbGUgKiBjcnMuc2NhbGUoZnJvbVpvb20pKTsKICAJCXJldHVybiBpc05hTih6b29tKSA/IEluZmluaXR5IDogem9vbTsKICAJfSwKCiAgCS8vIEBtZXRob2QgcHJvamVjdChsYXRsbmc6IExhdExuZywgem9vbTogTnVtYmVyKTogUG9pbnQKICAJLy8gUHJvamVjdHMgYSBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZSBgTGF0TG5nYCBhY2NvcmRpbmcgdG8gdGhlIHByb2plY3Rpb24KICAJLy8gb2YgdGhlIG1hcCdzIENSUywgdGhlbiBzY2FsZXMgaXQgYWNjb3JkaW5nIHRvIGB6b29tYCBhbmQgdGhlIENSUydzCiAgCS8vIGBUcmFuc2Zvcm1hdGlvbmAuIFRoZSByZXN1bHQgaXMgcGl4ZWwgY29vcmRpbmF0ZSByZWxhdGl2ZSB0bwogIAkvLyB0aGUgQ1JTIG9yaWdpbi4KICAJcHJvamVjdDogZnVuY3Rpb24gKGxhdGxuZywgem9vbSkgewogIAkJem9vbSA9IHpvb20gPT09IHVuZGVmaW5lZCA/IHRoaXMuX3pvb20gOiB6b29tOwogIAkJcmV0dXJuIHRoaXMub3B0aW9ucy5jcnMubGF0TG5nVG9Qb2ludCh0b0xhdExuZyhsYXRsbmcpLCB6b29tKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgdW5wcm9qZWN0KHBvaW50OiBQb2ludCwgem9vbTogTnVtYmVyKTogTGF0TG5nCiAgCS8vIEludmVyc2Ugb2YgW2Bwcm9qZWN0YF0oI21hcC1wcm9qZWN0KS4KICAJdW5wcm9qZWN0OiBmdW5jdGlvbiAocG9pbnQsIHpvb20pIHsKICAJCXpvb20gPSB6b29tID09PSB1bmRlZmluZWQgPyB0aGlzLl96b29tIDogem9vbTsKICAJCXJldHVybiB0aGlzLm9wdGlvbnMuY3JzLnBvaW50VG9MYXRMbmcodG9Qb2ludChwb2ludCksIHpvb20pOwogIAl9LAoKICAJLy8gQG1ldGhvZCBsYXllclBvaW50VG9MYXRMbmcocG9pbnQ6IFBvaW50KTogTGF0TG5nCiAgCS8vIEdpdmVuIGEgcGl4ZWwgY29vcmRpbmF0ZSByZWxhdGl2ZSB0byB0aGUgW29yaWdpbiBwaXhlbF0oI21hcC1nZXRwaXhlbG9yaWdpbiksCiAgCS8vIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGUgKGZvciB0aGUgY3VycmVudCB6b29tIGxldmVsKS4KICAJbGF5ZXJQb2ludFRvTGF0TG5nOiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXZhciBwcm9qZWN0ZWRQb2ludCA9IHRvUG9pbnQocG9pbnQpLmFkZCh0aGlzLmdldFBpeGVsT3JpZ2luKCkpOwogIAkJcmV0dXJuIHRoaXMudW5wcm9qZWN0KHByb2plY3RlZFBvaW50KTsKICAJfSwKCiAgCS8vIEBtZXRob2QgbGF0TG5nVG9MYXllclBvaW50KGxhdGxuZzogTGF0TG5nKTogUG9pbnQKICAJLy8gR2l2ZW4gYSBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZSwgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwaXhlbCBjb29yZGluYXRlCiAgCS8vIHJlbGF0aXZlIHRvIHRoZSBbb3JpZ2luIHBpeGVsXSgjbWFwLWdldHBpeGVsb3JpZ2luKS4KICAJbGF0TG5nVG9MYXllclBvaW50OiBmdW5jdGlvbiAobGF0bG5nKSB7CiAgCQl2YXIgcHJvamVjdGVkUG9pbnQgPSB0aGlzLnByb2plY3QodG9MYXRMbmcobGF0bG5nKSkuX3JvdW5kKCk7CiAgCQlyZXR1cm4gcHJvamVjdGVkUG9pbnQuX3N1YnRyYWN0KHRoaXMuZ2V0UGl4ZWxPcmlnaW4oKSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHdyYXBMYXRMbmcobGF0bG5nOiBMYXRMbmcpOiBMYXRMbmcKICAJLy8gUmV0dXJucyBhIGBMYXRMbmdgIHdoZXJlIGBsYXRgIGFuZCBgbG5nYCBoYXMgYmVlbiB3cmFwcGVkIGFjY29yZGluZyB0byB0aGUKICAJLy8gbWFwJ3MgQ1JTJ3MgYHdyYXBMYXRgIGFuZCBgd3JhcExuZ2AgcHJvcGVydGllcywgaWYgdGhleSBhcmUgb3V0c2lkZSB0aGUKICAJLy8gQ1JTJ3MgYm91bmRzLgogIAkvLyBCeSBkZWZhdWx0IHRoaXMgbWVhbnMgbG9uZ2l0dWRlIGlzIHdyYXBwZWQgYXJvdW5kIHRoZSBkYXRlbGluZSBzbyBpdHMKICAJLy8gdmFsdWUgaXMgYmV0d2VlbiAtMTgwIGFuZCArMTgwIGRlZ3JlZXMuCiAgCXdyYXBMYXRMbmc6IGZ1bmN0aW9uIChsYXRsbmcpIHsKICAJCXJldHVybiB0aGlzLm9wdGlvbnMuY3JzLndyYXBMYXRMbmcodG9MYXRMbmcobGF0bG5nKSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHdyYXBMYXRMbmdCb3VuZHMoYm91bmRzOiBMYXRMbmdCb3VuZHMpOiBMYXRMbmdCb3VuZHMKICAJLy8gUmV0dXJucyBhIGBMYXRMbmdCb3VuZHNgIHdpdGggdGhlIHNhbWUgc2l6ZSBhcyB0aGUgZ2l2ZW4gb25lLCBlbnN1cmluZyB0aGF0CiAgCS8vIGl0cyBjZW50ZXIgaXMgd2l0aGluIHRoZSBDUlMncyBib3VuZHMuCiAgCS8vIEJ5IGRlZmF1bHQgdGhpcyBtZWFucyB0aGUgY2VudGVyIGxvbmdpdHVkZSBpcyB3cmFwcGVkIGFyb3VuZCB0aGUgZGF0ZWxpbmUgc28gaXRzCiAgCS8vIHZhbHVlIGlzIGJldHdlZW4gLTE4MCBhbmQgKzE4MCBkZWdyZWVzLCBhbmQgdGhlIG1ham9yaXR5IG9mIHRoZSBib3VuZHMKICAJLy8gb3ZlcmxhcHMgdGhlIENSUydzIGJvdW5kcy4KICAJd3JhcExhdExuZ0JvdW5kczogZnVuY3Rpb24gKGxhdGxuZykgewogIAkJcmV0dXJuIHRoaXMub3B0aW9ucy5jcnMud3JhcExhdExuZ0JvdW5kcyh0b0xhdExuZ0JvdW5kcyhsYXRsbmcpKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZGlzdGFuY2UobGF0bG5nMTogTGF0TG5nLCBsYXRsbmcyOiBMYXRMbmcpOiBOdW1iZXIKICAJLy8gUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0d28gZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGVzIGFjY29yZGluZyB0bwogIAkvLyB0aGUgbWFwJ3MgQ1JTLiBCeSBkZWZhdWx0IHRoaXMgbWVhc3VyZXMgZGlzdGFuY2UgaW4gbWV0ZXJzLgogIAlkaXN0YW5jZTogZnVuY3Rpb24gKGxhdGxuZzEsIGxhdGxuZzIpIHsKICAJCXJldHVybiB0aGlzLm9wdGlvbnMuY3JzLmRpc3RhbmNlKHRvTGF0TG5nKGxhdGxuZzEpLCB0b0xhdExuZyhsYXRsbmcyKSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGNvbnRhaW5lclBvaW50VG9MYXllclBvaW50KHBvaW50OiBQb2ludCk6IFBvaW50CiAgCS8vIEdpdmVuIGEgcGl4ZWwgY29vcmRpbmF0ZSByZWxhdGl2ZSB0byB0aGUgbWFwIGNvbnRhaW5lciwgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZwogIAkvLyBwaXhlbCBjb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBbb3JpZ2luIHBpeGVsXSgjbWFwLWdldHBpeGVsb3JpZ2luKS4KICAJY29udGFpbmVyUG9pbnRUb0xheWVyUG9pbnQ6IGZ1bmN0aW9uIChwb2ludCkgeyAvLyAoUG9pbnQpCiAgCQlyZXR1cm4gdG9Qb2ludChwb2ludCkuc3VidHJhY3QodGhpcy5fZ2V0TWFwUGFuZVBvcygpKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgbGF5ZXJQb2ludFRvQ29udGFpbmVyUG9pbnQocG9pbnQ6IFBvaW50KTogUG9pbnQKICAJLy8gR2l2ZW4gYSBwaXhlbCBjb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBbb3JpZ2luIHBpeGVsXSgjbWFwLWdldHBpeGVsb3JpZ2luKSwKICAJLy8gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwaXhlbCBjb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBtYXAgY29udGFpbmVyLgogIAlsYXllclBvaW50VG9Db250YWluZXJQb2ludDogZnVuY3Rpb24gKHBvaW50KSB7IC8vIChQb2ludCkKICAJCXJldHVybiB0b1BvaW50KHBvaW50KS5hZGQodGhpcy5fZ2V0TWFwUGFuZVBvcygpKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgY29udGFpbmVyUG9pbnRUb0xhdExuZyhwb2ludDogUG9pbnQpOiBMYXRMbmcKICAJLy8gR2l2ZW4gYSBwaXhlbCBjb29yZGluYXRlIHJlbGF0aXZlIHRvIHRoZSBtYXAgY29udGFpbmVyLCByZXR1cm5zCiAgCS8vIHRoZSBjb3JyZXNwb25kaW5nIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlIChmb3IgdGhlIGN1cnJlbnQgem9vbSBsZXZlbCkuCiAgCWNvbnRhaW5lclBvaW50VG9MYXRMbmc6IGZ1bmN0aW9uIChwb2ludCkgewogIAkJdmFyIGxheWVyUG9pbnQgPSB0aGlzLmNvbnRhaW5lclBvaW50VG9MYXllclBvaW50KHRvUG9pbnQocG9pbnQpKTsKICAJCXJldHVybiB0aGlzLmxheWVyUG9pbnRUb0xhdExuZyhsYXllclBvaW50KTsKICAJfSwKCiAgCS8vIEBtZXRob2QgbGF0TG5nVG9Db250YWluZXJQb2ludChsYXRsbmc6IExhdExuZyk6IFBvaW50CiAgCS8vIEdpdmVuIGEgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGUsIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGl4ZWwgY29vcmRpbmF0ZQogIAkvLyByZWxhdGl2ZSB0byB0aGUgbWFwIGNvbnRhaW5lci4KICAJbGF0TG5nVG9Db250YWluZXJQb2ludDogZnVuY3Rpb24gKGxhdGxuZykgewogIAkJcmV0dXJuIHRoaXMubGF5ZXJQb2ludFRvQ29udGFpbmVyUG9pbnQodGhpcy5sYXRMbmdUb0xheWVyUG9pbnQodG9MYXRMbmcobGF0bG5nKSkpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBtb3VzZUV2ZW50VG9Db250YWluZXJQb2ludChldjogTW91c2VFdmVudCk6IFBvaW50CiAgCS8vIEdpdmVuIGEgTW91c2VFdmVudCBvYmplY3QsIHJldHVybnMgdGhlIHBpeGVsIGNvb3JkaW5hdGUgcmVsYXRpdmUgdG8gdGhlCiAgCS8vIG1hcCBjb250YWluZXIgd2hlcmUgdGhlIGV2ZW50IHRvb2sgcGxhY2UuCiAgCW1vdXNlRXZlbnRUb0NvbnRhaW5lclBvaW50OiBmdW5jdGlvbiAoZSkgewogIAkJcmV0dXJuIGdldE1vdXNlUG9zaXRpb24oZSwgdGhpcy5fY29udGFpbmVyKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgbW91c2VFdmVudFRvTGF5ZXJQb2ludChldjogTW91c2VFdmVudCk6IFBvaW50CiAgCS8vIEdpdmVuIGEgTW91c2VFdmVudCBvYmplY3QsIHJldHVybnMgdGhlIHBpeGVsIGNvb3JkaW5hdGUgcmVsYXRpdmUgdG8KICAJLy8gdGhlIFtvcmlnaW4gcGl4ZWxdKCNtYXAtZ2V0cGl4ZWxvcmlnaW4pIHdoZXJlIHRoZSBldmVudCB0b29rIHBsYWNlLgogIAltb3VzZUV2ZW50VG9MYXllclBvaW50OiBmdW5jdGlvbiAoZSkgewogIAkJcmV0dXJuIHRoaXMuY29udGFpbmVyUG9pbnRUb0xheWVyUG9pbnQodGhpcy5tb3VzZUV2ZW50VG9Db250YWluZXJQb2ludChlKSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIG1vdXNlRXZlbnRUb0xhdExuZyhldjogTW91c2VFdmVudCk6IExhdExuZwogIAkvLyBHaXZlbiBhIE1vdXNlRXZlbnQgb2JqZWN0LCByZXR1cm5zIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlIHdoZXJlIHRoZQogIAkvLyBldmVudCB0b29rIHBsYWNlLgogIAltb3VzZUV2ZW50VG9MYXRMbmc6IGZ1bmN0aW9uIChlKSB7IC8vIChNb3VzZUV2ZW50KQogIAkJcmV0dXJuIHRoaXMubGF5ZXJQb2ludFRvTGF0TG5nKHRoaXMubW91c2VFdmVudFRvTGF5ZXJQb2ludChlKSk7CiAgCX0sCgoKICAJLy8gbWFwIGluaXRpYWxpemF0aW9uIG1ldGhvZHMKCiAgCV9pbml0Q29udGFpbmVyOiBmdW5jdGlvbiAoaWQpIHsKICAJCXZhciBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXIgPSBnZXQoaWQpOwoKICAJCWlmICghY29udGFpbmVyKSB7CiAgCQkJdGhyb3cgbmV3IEVycm9yKCdNYXAgY29udGFpbmVyIG5vdCBmb3VuZC4nKTsKICAJCX0gZWxzZSBpZiAoY29udGFpbmVyLl9sZWFmbGV0X2lkKSB7CiAgCQkJdGhyb3cgbmV3IEVycm9yKCdNYXAgY29udGFpbmVyIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQuJyk7CiAgCQl9CgogIAkJb24oY29udGFpbmVyLCAnc2Nyb2xsJywgdGhpcy5fb25TY3JvbGwsIHRoaXMpOwogIAkJdGhpcy5fY29udGFpbmVySWQgPSBzdGFtcChjb250YWluZXIpOwogIAl9LAoKICAJX2luaXRMYXlvdXQ6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXI7CgogIAkJdGhpcy5fZmFkZUFuaW1hdGVkID0gdGhpcy5vcHRpb25zLmZhZGVBbmltYXRpb24gJiYgQnJvd3Nlci5hbnkzZDsKCiAgCQlhZGRDbGFzcyhjb250YWluZXIsICdsZWFmbGV0LWNvbnRhaW5lcicgKwogIAkJCShCcm93c2VyLnRvdWNoID8gJyBsZWFmbGV0LXRvdWNoJyA6ICcnKSArCiAgCQkJKEJyb3dzZXIucmV0aW5hID8gJyBsZWFmbGV0LXJldGluYScgOiAnJykgKwogIAkJCShCcm93c2VyLmllbHQ5ID8gJyBsZWFmbGV0LW9sZGllJyA6ICcnKSArCiAgCQkJKEJyb3dzZXIuc2FmYXJpID8gJyBsZWFmbGV0LXNhZmFyaScgOiAnJykgKwogIAkJCSh0aGlzLl9mYWRlQW5pbWF0ZWQgPyAnIGxlYWZsZXQtZmFkZS1hbmltJyA6ICcnKSk7CgogIAkJdmFyIHBvc2l0aW9uID0gZ2V0U3R5bGUoY29udGFpbmVyLCAncG9zaXRpb24nKTsKCiAgCQlpZiAocG9zaXRpb24gIT09ICdhYnNvbHV0ZScgJiYgcG9zaXRpb24gIT09ICdyZWxhdGl2ZScgJiYgcG9zaXRpb24gIT09ICdmaXhlZCcpIHsKICAJCQljb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnOwogIAkJfQoKICAJCXRoaXMuX2luaXRQYW5lcygpOwoKICAJCWlmICh0aGlzLl9pbml0Q29udHJvbFBvcykgewogIAkJCXRoaXMuX2luaXRDb250cm9sUG9zKCk7CiAgCQl9CiAgCX0sCgogIAlfaW5pdFBhbmVzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgcGFuZXMgPSB0aGlzLl9wYW5lcyA9IHt9OwogIAkJdGhpcy5fcGFuZVJlbmRlcmVycyA9IHt9OwoKICAJCS8vIEBzZWN0aW9uCiAgCQkvLwogIAkJLy8gUGFuZXMgYXJlIERPTSBlbGVtZW50cyB1c2VkIHRvIGNvbnRyb2wgdGhlIG9yZGVyaW5nIG9mIGxheWVycyBvbiB0aGUgbWFwLiBZb3UKICAJCS8vIGNhbiBhY2Nlc3MgcGFuZXMgd2l0aCBbYG1hcC5nZXRQYW5lYF0oI21hcC1nZXRwYW5lKSBvcgogIAkJLy8gW2BtYXAuZ2V0UGFuZXNgXSgjbWFwLWdldHBhbmVzKSBtZXRob2RzLiBOZXcgcGFuZXMgY2FuIGJlIGNyZWF0ZWQgd2l0aCB0aGUKICAJCS8vIFtgbWFwLmNyZWF0ZVBhbmVgXSgjbWFwLWNyZWF0ZXBhbmUpIG1ldGhvZC4KICAJCS8vCiAgCQkvLyBFdmVyeSBtYXAgaGFzIHRoZSBmb2xsb3dpbmcgZGVmYXVsdCBwYW5lcyB0aGF0IGRpZmZlciBvbmx5IGluIHpJbmRleC4KICAJCS8vCiAgCQkvLyBAcGFuZSBtYXBQYW5lOiBIVE1MRWxlbWVudCA9ICdhdXRvJwogIAkJLy8gUGFuZSB0aGF0IGNvbnRhaW5zIGFsbCBvdGhlciBtYXAgcGFuZXMKCiAgCQl0aGlzLl9tYXBQYW5lID0gdGhpcy5jcmVhdGVQYW5lKCdtYXBQYW5lJywgdGhpcy5fY29udGFpbmVyKTsKICAJCXNldFBvc2l0aW9uKHRoaXMuX21hcFBhbmUsIG5ldyBQb2ludCgwLCAwKSk7CgogIAkJLy8gQHBhbmUgdGlsZVBhbmU6IEhUTUxFbGVtZW50ID0gMjAwCiAgCQkvLyBQYW5lIGZvciBgR3JpZExheWVyYHMgYW5kIGBUaWxlTGF5ZXJgcwogIAkJdGhpcy5jcmVhdGVQYW5lKCd0aWxlUGFuZScpOwogIAkJLy8gQHBhbmUgb3ZlcmxheVBhbmU6IEhUTUxFbGVtZW50ID0gNDAwCiAgCQkvLyBQYW5lIGZvciB2ZWN0b3JzIChgUGF0aGBzLCBsaWtlIGBQb2x5bGluZWBzIGFuZCBgUG9seWdvbmBzKSwgYEltYWdlT3ZlcmxheWBzIGFuZCBgVmlkZW9PdmVybGF5YHMKICAJCXRoaXMuY3JlYXRlUGFuZSgnb3ZlcmxheVBhbmUnKTsKICAJCS8vIEBwYW5lIHNoYWRvd1BhbmU6IEhUTUxFbGVtZW50ID0gNTAwCiAgCQkvLyBQYW5lIGZvciBvdmVybGF5IHNoYWRvd3MgKGUuZy4gYE1hcmtlcmAgc2hhZG93cykKICAJCXRoaXMuY3JlYXRlUGFuZSgnc2hhZG93UGFuZScpOwogIAkJLy8gQHBhbmUgbWFya2VyUGFuZTogSFRNTEVsZW1lbnQgPSA2MDAKICAJCS8vIFBhbmUgZm9yIGBJY29uYHMgb2YgYE1hcmtlcmBzCiAgCQl0aGlzLmNyZWF0ZVBhbmUoJ21hcmtlclBhbmUnKTsKICAJCS8vIEBwYW5lIHRvb2x0aXBQYW5lOiBIVE1MRWxlbWVudCA9IDY1MAogIAkJLy8gUGFuZSBmb3IgYFRvb2x0aXBgcy4KICAJCXRoaXMuY3JlYXRlUGFuZSgndG9vbHRpcFBhbmUnKTsKICAJCS8vIEBwYW5lIHBvcHVwUGFuZTogSFRNTEVsZW1lbnQgPSA3MDAKICAJCS8vIFBhbmUgZm9yIGBQb3B1cGBzLgogIAkJdGhpcy5jcmVhdGVQYW5lKCdwb3B1cFBhbmUnKTsKCiAgCQlpZiAoIXRoaXMub3B0aW9ucy5tYXJrZXJab29tQW5pbWF0aW9uKSB7CiAgCQkJYWRkQ2xhc3MocGFuZXMubWFya2VyUGFuZSwgJ2xlYWZsZXQtem9vbS1oaWRlJyk7CiAgCQkJYWRkQ2xhc3MocGFuZXMuc2hhZG93UGFuZSwgJ2xlYWZsZXQtem9vbS1oaWRlJyk7CiAgCQl9CiAgCX0sCgoKICAJLy8gcHJpdmF0ZSBtZXRob2RzIHRoYXQgbW9kaWZ5IG1hcCBzdGF0ZQoKICAJLy8gQHNlY3Rpb24gTWFwIHN0YXRlIGNoYW5nZSBldmVudHMKICAJX3Jlc2V0VmlldzogZnVuY3Rpb24gKGNlbnRlciwgem9vbSkgewogIAkJc2V0UG9zaXRpb24odGhpcy5fbWFwUGFuZSwgbmV3IFBvaW50KDAsIDApKTsKCiAgCQl2YXIgbG9hZGluZyA9ICF0aGlzLl9sb2FkZWQ7CiAgCQl0aGlzLl9sb2FkZWQgPSB0cnVlOwogIAkJem9vbSA9IHRoaXMuX2xpbWl0Wm9vbSh6b29tKTsKCiAgCQl0aGlzLmZpcmUoJ3ZpZXdwcmVyZXNldCcpOwoKICAJCXZhciB6b29tQ2hhbmdlZCA9IHRoaXMuX3pvb20gIT09IHpvb207CiAgCQl0aGlzCiAgCQkJLl9tb3ZlU3RhcnQoem9vbUNoYW5nZWQsIGZhbHNlKQogIAkJCS5fbW92ZShjZW50ZXIsIHpvb20pCiAgCQkJLl9tb3ZlRW5kKHpvb21DaGFuZ2VkKTsKCiAgCQkvLyBAZXZlbnQgdmlld3Jlc2V0OiBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgbWFwIG5lZWRzIHRvIHJlZHJhdyBpdHMgY29udGVudCAodGhpcyB1c3VhbGx5IGhhcHBlbnMKICAJCS8vIG9uIG1hcCB6b29tIG9yIGxvYWQpLiBWZXJ5IHVzZWZ1bCBmb3IgY3JlYXRpbmcgY3VzdG9tIG92ZXJsYXlzLgogIAkJdGhpcy5maXJlKCd2aWV3cmVzZXQnKTsKCiAgCQkvLyBAZXZlbnQgbG9hZDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIG1hcCBpcyBpbml0aWFsaXplZCAod2hlbiBpdHMgY2VudGVyIGFuZCB6b29tIGFyZSBzZXQKICAJCS8vIGZvciB0aGUgZmlyc3QgdGltZSkuCiAgCQlpZiAobG9hZGluZykgewogIAkJCXRoaXMuZmlyZSgnbG9hZCcpOwogIAkJfQogIAl9LAoKICAJX21vdmVTdGFydDogZnVuY3Rpb24gKHpvb21DaGFuZ2VkLCBub01vdmVTdGFydCkgewogIAkJLy8gQGV2ZW50IHpvb21zdGFydDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIG1hcCB6b29tIGlzIGFib3V0IHRvIGNoYW5nZSAoZS5nLiBiZWZvcmUgem9vbSBhbmltYXRpb24pLgogIAkJLy8gQGV2ZW50IG1vdmVzdGFydDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIHZpZXcgb2YgdGhlIG1hcCBzdGFydHMgY2hhbmdpbmcgKGUuZy4gdXNlciBzdGFydHMgZHJhZ2dpbmcgdGhlIG1hcCkuCiAgCQlpZiAoem9vbUNoYW5nZWQpIHsKICAJCQl0aGlzLmZpcmUoJ3pvb21zdGFydCcpOwogIAkJfQogIAkJaWYgKCFub01vdmVTdGFydCkgewogIAkJCXRoaXMuZmlyZSgnbW92ZXN0YXJ0Jyk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9tb3ZlOiBmdW5jdGlvbiAoY2VudGVyLCB6b29tLCBkYXRhLCBzdXByZXNzRXZlbnQpIHsKICAJCWlmICh6b29tID09PSB1bmRlZmluZWQpIHsKICAJCQl6b29tID0gdGhpcy5fem9vbTsKICAJCX0KICAJCXZhciB6b29tQ2hhbmdlZCA9IHRoaXMuX3pvb20gIT09IHpvb207CgogIAkJdGhpcy5fem9vbSA9IHpvb207CiAgCQl0aGlzLl9sYXN0Q2VudGVyID0gY2VudGVyOwogIAkJdGhpcy5fcGl4ZWxPcmlnaW4gPSB0aGlzLl9nZXROZXdQaXhlbE9yaWdpbihjZW50ZXIpOwoKICAJCWlmICghc3VwcmVzc0V2ZW50KSB7CiAgCQkJLy8gQGV2ZW50IHpvb206IEV2ZW50CiAgCQkJLy8gRmlyZWQgcmVwZWF0ZWRseSBkdXJpbmcgYW55IGNoYW5nZSBpbiB6b29tIGxldmVsLAogIAkJCS8vIGluY2x1ZGluZyB6b29tIGFuZCBmbHkgYW5pbWF0aW9ucy4KICAJCQlpZiAoem9vbUNoYW5nZWQgfHwgKGRhdGEgJiYgZGF0YS5waW5jaCkpIHsJLy8gQWx3YXlzIGZpcmUgJ3pvb20nIGlmIHBpbmNoaW5nIGJlY2F1c2UgIzM1MzAKICAJCQkJdGhpcy5maXJlKCd6b29tJywgZGF0YSk7CiAgCQkJfQoKICAJCQkvLyBAZXZlbnQgbW92ZTogRXZlbnQKICAJCQkvLyBGaXJlZCByZXBlYXRlZGx5IGR1cmluZyBhbnkgbW92ZW1lbnQgb2YgdGhlIG1hcCwKICAJCQkvLyBpbmNsdWRpbmcgcGFuIGFuZCBmbHkgYW5pbWF0aW9ucy4KICAJCQl0aGlzLmZpcmUoJ21vdmUnLCBkYXRhKTsKICAJCX0gZWxzZSBpZiAoZGF0YSAmJiBkYXRhLnBpbmNoKSB7CS8vIEFsd2F5cyBmaXJlICd6b29tJyBpZiBwaW5jaGluZyBiZWNhdXNlICMzNTMwCiAgCQkJdGhpcy5maXJlKCd6b29tJywgZGF0YSk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9tb3ZlRW5kOiBmdW5jdGlvbiAoem9vbUNoYW5nZWQpIHsKICAJCS8vIEBldmVudCB6b29tZW5kOiBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgbWFwIHpvb20gY2hhbmdlZCwgYWZ0ZXIgYW55IGFuaW1hdGlvbnMuCiAgCQlpZiAoem9vbUNoYW5nZWQpIHsKICAJCQl0aGlzLmZpcmUoJ3pvb21lbmQnKTsKICAJCX0KCiAgCQkvLyBAZXZlbnQgbW92ZWVuZDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIGNlbnRlciBvZiB0aGUgbWFwIHN0b3BzIGNoYW5naW5nCiAgCQkvLyAoZS5nLiB1c2VyIHN0b3BwZWQgZHJhZ2dpbmcgdGhlIG1hcCBvciBhZnRlciBub24tY2VudGVyZWQgem9vbSkuCiAgCQlyZXR1cm4gdGhpcy5maXJlKCdtb3ZlZW5kJyk7CiAgCX0sCgogIAlfc3RvcDogZnVuY3Rpb24gKCkgewogIAkJY2FuY2VsQW5pbUZyYW1lKHRoaXMuX2ZseVRvRnJhbWUpOwogIAkJaWYgKHRoaXMuX3BhbkFuaW0pIHsKICAJCQl0aGlzLl9wYW5BbmltLnN0b3AoKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJX3Jhd1BhbkJ5OiBmdW5jdGlvbiAob2Zmc2V0KSB7CiAgCQlzZXRQb3NpdGlvbih0aGlzLl9tYXBQYW5lLCB0aGlzLl9nZXRNYXBQYW5lUG9zKCkuc3VidHJhY3Qob2Zmc2V0KSk7CiAgCX0sCgogIAlfZ2V0Wm9vbVNwYW46IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLmdldE1heFpvb20oKSAtIHRoaXMuZ2V0TWluWm9vbSgpOwogIAl9LAoKICAJX3Bhbkluc2lkZU1heEJvdW5kczogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9lbmZvcmNpbmdCb3VuZHMpIHsKICAJCQl0aGlzLnBhbkluc2lkZUJvdW5kcyh0aGlzLm9wdGlvbnMubWF4Qm91bmRzKTsKICAJCX0KICAJfSwKCiAgCV9jaGVja0lmTG9hZGVkOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX2xvYWRlZCkgewogIAkJCXRocm93IG5ldyBFcnJvcignU2V0IG1hcCBjZW50ZXIgYW5kIHpvb20gZmlyc3QuJyk7CiAgCQl9CiAgCX0sCgogIAkvLyBET00gZXZlbnQgaGFuZGxpbmcKCiAgCS8vIEBzZWN0aW9uIEludGVyYWN0aW9uIGV2ZW50cwogIAlfaW5pdEV2ZW50czogZnVuY3Rpb24gKHJlbW92ZSkgewogIAkJdGhpcy5fdGFyZ2V0cyA9IHt9OwogIAkJdGhpcy5fdGFyZ2V0c1tzdGFtcCh0aGlzLl9jb250YWluZXIpXSA9IHRoaXM7CgogIAkJdmFyIG9uT2ZmID0gcmVtb3ZlID8gb2ZmIDogb247CgogIAkJLy8gQGV2ZW50IGNsaWNrOiBNb3VzZUV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyAob3IgdGFwcykgdGhlIG1hcC4KICAJCS8vIEBldmVudCBkYmxjbGljazogTW91c2VFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgdXNlciBkb3VibGUtY2xpY2tzIChvciBkb3VibGUtdGFwcykgdGhlIG1hcC4KICAJCS8vIEBldmVudCBtb3VzZWRvd246IE1vdXNlRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIHVzZXIgcHVzaGVzIHRoZSBtb3VzZSBidXR0b24gb24gdGhlIG1hcC4KICAJCS8vIEBldmVudCBtb3VzZXVwOiBNb3VzZUV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSB1c2VyIHJlbGVhc2VzIHRoZSBtb3VzZSBidXR0b24gb24gdGhlIG1hcC4KICAJCS8vIEBldmVudCBtb3VzZW92ZXI6IE1vdXNlRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIG1vdXNlIGVudGVycyB0aGUgbWFwLgogIAkJLy8gQGV2ZW50IG1vdXNlb3V0OiBNb3VzZUV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSBtb3VzZSBsZWF2ZXMgdGhlIG1hcC4KICAJCS8vIEBldmVudCBtb3VzZW1vdmU6IE1vdXNlRXZlbnQKICAJCS8vIEZpcmVkIHdoaWxlIHRoZSBtb3VzZSBtb3ZlcyBvdmVyIHRoZSBtYXAuCiAgCQkvLyBAZXZlbnQgY29udGV4dG1lbnU6IE1vdXNlRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIHVzZXIgcHVzaGVzIHRoZSByaWdodCBtb3VzZSBidXR0b24gb24gdGhlIG1hcCwgcHJldmVudHMKICAJCS8vIGRlZmF1bHQgYnJvd3NlciBjb250ZXh0IG1lbnUgZnJvbSBzaG93aW5nIGlmIHRoZXJlIGFyZSBsaXN0ZW5lcnMgb24KICAJCS8vIHRoaXMgZXZlbnQuIEFsc28gZmlyZWQgb24gbW9iaWxlIHdoZW4gdGhlIHVzZXIgaG9sZHMgYSBzaW5nbGUgdG91Y2gKICAJCS8vIGZvciBhIHNlY29uZCAoYWxzbyBjYWxsZWQgbG9uZyBwcmVzcykuCiAgCQkvLyBAZXZlbnQga2V5cHJlc3M6IEtleWJvYXJkRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyBhIGtleSBmcm9tIHRoZSBrZXlib2FyZCB0aGF0IHByb2R1Y2VzIGEgY2hhcmFjdGVyIHZhbHVlIHdoaWxlIHRoZSBtYXAgaXMgZm9jdXNlZC4KICAJCS8vIEBldmVudCBrZXlkb3duOiBLZXlib2FyZEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgYSBrZXkgZnJvbSB0aGUga2V5Ym9hcmQgd2hpbGUgdGhlIG1hcCBpcyBmb2N1c2VkLiBVbmxpa2UgdGhlIGBrZXlwcmVzc2AgZXZlbnQsCiAgCQkvLyB0aGUgYGtleWRvd25gIGV2ZW50IGlzIGZpcmVkIGZvciBrZXlzIHRoYXQgcHJvZHVjZSBhIGNoYXJhY3RlciB2YWx1ZSBhbmQgZm9yIGtleXMKICAJCS8vIHRoYXQgZG8gbm90IHByb2R1Y2UgYSBjaGFyYWN0ZXIgdmFsdWUuCiAgCQkvLyBAZXZlbnQga2V5dXA6IEtleWJvYXJkRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIHVzZXIgcmVsZWFzZXMgYSBrZXkgZnJvbSB0aGUga2V5Ym9hcmQgd2hpbGUgdGhlIG1hcCBpcyBmb2N1c2VkLgogIAkJb25PZmYodGhpcy5fY29udGFpbmVyLCAnY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgJyArCiAgCQkJJ21vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgY29udGV4dG1lbnUga2V5cHJlc3Mga2V5ZG93biBrZXl1cCcsIHRoaXMuX2hhbmRsZURPTUV2ZW50LCB0aGlzKTsKCiAgCQlpZiAodGhpcy5vcHRpb25zLnRyYWNrUmVzaXplKSB7CiAgCQkJb25PZmYod2luZG93LCAncmVzaXplJywgdGhpcy5fb25SZXNpemUsIHRoaXMpOwogIAkJfQoKICAJCWlmIChCcm93c2VyLmFueTNkICYmIHRoaXMub3B0aW9ucy50cmFuc2Zvcm0zRExpbWl0KSB7CiAgCQkJKHJlbW92ZSA/IHRoaXMub2ZmIDogdGhpcy5vbikuY2FsbCh0aGlzLCAnbW92ZWVuZCcsIHRoaXMuX29uTW92ZUVuZCk7CiAgCQl9CiAgCX0sCgogIAlfb25SZXNpemU6IGZ1bmN0aW9uICgpIHsKICAJCWNhbmNlbEFuaW1GcmFtZSh0aGlzLl9yZXNpemVSZXF1ZXN0KTsKICAJCXRoaXMuX3Jlc2l6ZVJlcXVlc3QgPSByZXF1ZXN0QW5pbUZyYW1lKAogIAkJICAgICAgICBmdW5jdGlvbiAoKSB7IHRoaXMuaW52YWxpZGF0ZVNpemUoe2RlYm91bmNlTW92ZWVuZDogdHJ1ZX0pOyB9LCB0aGlzKTsKICAJfSwKCiAgCV9vblNjcm9sbDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fY29udGFpbmVyLnNjcm9sbFRvcCAgPSAwOwogIAkJdGhpcy5fY29udGFpbmVyLnNjcm9sbExlZnQgPSAwOwogIAl9LAoKICAJX29uTW92ZUVuZDogZnVuY3Rpb24gKCkgewogIAkJdmFyIHBvcyA9IHRoaXMuX2dldE1hcFBhbmVQb3MoKTsKICAJCWlmIChNYXRoLm1heChNYXRoLmFicyhwb3MueCksIE1hdGguYWJzKHBvcy55KSkgPj0gdGhpcy5vcHRpb25zLnRyYW5zZm9ybTNETGltaXQpIHsKICAJCQkvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjAzODczIGJ1dCBXZWJraXQgYWxzbyBoYXZlCiAgCQkJLy8gYSBwaXhlbCBvZmZzZXQgb24gdmVyeSBoaWdoIHZhbHVlcywgc2VlOiBodHRwczovL2pzZmlkZGxlLm5ldC9kZzZyNWhoYi8KICAJCQl0aGlzLl9yZXNldFZpZXcodGhpcy5nZXRDZW50ZXIoKSwgdGhpcy5nZXRab29tKCkpOwogIAkJfQogIAl9LAoKICAJX2ZpbmRFdmVudFRhcmdldHM6IGZ1bmN0aW9uIChlLCB0eXBlKSB7CiAgCQl2YXIgdGFyZ2V0cyA9IFtdLAogIAkJICAgIHRhcmdldCwKICAJCSAgICBpc0hvdmVyID0gdHlwZSA9PT0gJ21vdXNlb3V0JyB8fCB0eXBlID09PSAnbW91c2VvdmVyJywKICAJCSAgICBzcmMgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsCiAgCQkgICAgZHJhZ2dpbmcgPSBmYWxzZTsKCiAgCQl3aGlsZSAoc3JjKSB7CiAgCQkJdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1tzdGFtcChzcmMpXTsKICAJCQlpZiAodGFyZ2V0ICYmICh0eXBlID09PSAnY2xpY2snIHx8IHR5cGUgPT09ICdwcmVjbGljaycpICYmIHRoaXMuX2RyYWdnYWJsZU1vdmVkKHRhcmdldCkpIHsKICAJCQkJLy8gUHJldmVudCBmaXJpbmcgY2xpY2sgYWZ0ZXIgeW91IGp1c3QgZHJhZ2dlZCBhbiBvYmplY3QuCiAgCQkJCWRyYWdnaW5nID0gdHJ1ZTsKICAJCQkJYnJlYWs7CiAgCQkJfQogIAkJCWlmICh0YXJnZXQgJiYgdGFyZ2V0Lmxpc3RlbnModHlwZSwgdHJ1ZSkpIHsKICAJCQkJaWYgKGlzSG92ZXIgJiYgIWlzRXh0ZXJuYWxUYXJnZXQoc3JjLCBlKSkgeyBicmVhazsgfQogIAkJCQl0YXJnZXRzLnB1c2godGFyZ2V0KTsKICAJCQkJaWYgKGlzSG92ZXIpIHsgYnJlYWs7IH0KICAJCQl9CiAgCQkJaWYgKHNyYyA9PT0gdGhpcy5fY29udGFpbmVyKSB7IGJyZWFrOyB9CiAgCQkJc3JjID0gc3JjLnBhcmVudE5vZGU7CiAgCQl9CiAgCQlpZiAoIXRhcmdldHMubGVuZ3RoICYmICFkcmFnZ2luZyAmJiAhaXNIb3ZlciAmJiB0aGlzLmxpc3RlbnModHlwZSwgdHJ1ZSkpIHsKICAJCQl0YXJnZXRzID0gW3RoaXNdOwogIAkJfQogIAkJcmV0dXJuIHRhcmdldHM7CiAgCX0sCgogIAlfaXNDbGlja0Rpc2FibGVkOiBmdW5jdGlvbiAoZWwpIHsKICAJCXdoaWxlIChlbCAhPT0gdGhpcy5fY29udGFpbmVyKSB7CiAgCQkJaWYgKGVsWydfbGVhZmxldF9kaXNhYmxlX2NsaWNrJ10pIHsgcmV0dXJuIHRydWU7IH0KICAJCQllbCA9IGVsLnBhcmVudE5vZGU7CiAgCQl9CiAgCX0sCgogIAlfaGFuZGxlRE9NRXZlbnQ6IGZ1bmN0aW9uIChlKSB7CiAgCQl2YXIgZWwgPSAoZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50KTsKICAJCWlmICghdGhpcy5fbG9hZGVkIHx8IGVsWydfbGVhZmxldF9kaXNhYmxlX2V2ZW50cyddIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyAmJiB0aGlzLl9pc0NsaWNrRGlzYWJsZWQoZWwpKSB7CiAgCQkJcmV0dXJuOwogIAkJfQoKICAJCXZhciB0eXBlID0gZS50eXBlOwoKICAJCWlmICh0eXBlID09PSAnbW91c2Vkb3duJykgewogIAkJCS8vIHByZXZlbnRzIG91dGxpbmUgd2hlbiBjbGlja2luZyBvbiBrZXlib2FyZC1mb2N1c2FibGUgZWxlbWVudAogIAkJCXByZXZlbnRPdXRsaW5lKGVsKTsKICAJCX0KCiAgCQl0aGlzLl9maXJlRE9NRXZlbnQoZSwgdHlwZSk7CiAgCX0sCgogIAlfbW91c2VFdmVudHM6IFsnY2xpY2snLCAnZGJsY2xpY2snLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0JywgJ2NvbnRleHRtZW51J10sCgogIAlfZmlyZURPTUV2ZW50OiBmdW5jdGlvbiAoZSwgdHlwZSwgY2FudmFzVGFyZ2V0cykgewoKICAJCWlmIChlLnR5cGUgPT09ICdjbGljaycpIHsKICAJCQkvLyBGaXJlIGEgc3ludGhldGljICdwcmVjbGljaycgZXZlbnQgd2hpY2ggcHJvcGFnYXRlcyB1cCAobWFpbmx5IGZvciBjbG9zaW5nIHBvcHVwcykuCiAgCQkJLy8gQGV2ZW50IHByZWNsaWNrOiBNb3VzZUV2ZW50CiAgCQkJLy8gRmlyZWQgYmVmb3JlIG1vdXNlIGNsaWNrIG9uIHRoZSBtYXAgKHNvbWV0aW1lcyB1c2VmdWwgd2hlbiB5b3UKICAJCQkvLyB3YW50IHNvbWV0aGluZyB0byBoYXBwZW4gb24gY2xpY2sgYmVmb3JlIGFueSBleGlzdGluZyBjbGljawogIAkJCS8vIGhhbmRsZXJzIHN0YXJ0IHJ1bm5pbmcpLgogIAkJCXZhciBzeW50aCA9IGV4dGVuZCh7fSwgZSk7CiAgCQkJc3ludGgudHlwZSA9ICdwcmVjbGljayc7CiAgCQkJdGhpcy5fZmlyZURPTUV2ZW50KHN5bnRoLCBzeW50aC50eXBlLCBjYW52YXNUYXJnZXRzKTsKICAJCX0KCiAgCQkvLyBGaW5kIHRoZSBsYXllciB0aGUgZXZlbnQgaXMgcHJvcGFnYXRpbmcgZnJvbSBhbmQgaXRzIHBhcmVudHMuCiAgCQl2YXIgdGFyZ2V0cyA9IHRoaXMuX2ZpbmRFdmVudFRhcmdldHMoZSwgdHlwZSk7CgogIAkJaWYgKGNhbnZhc1RhcmdldHMpIHsKICAJCQl2YXIgZmlsdGVyZWQgPSBbXTsgLy8gcGljayBvbmx5IHRhcmdldHMgd2l0aCBsaXN0ZW5lcnMKICAJCQlmb3IgKHZhciBpID0gMDsgaSA8IGNhbnZhc1RhcmdldHMubGVuZ3RoOyBpKyspIHsKICAJCQkJaWYgKGNhbnZhc1RhcmdldHNbaV0ubGlzdGVucyh0eXBlLCB0cnVlKSkgewogIAkJCQkJZmlsdGVyZWQucHVzaChjYW52YXNUYXJnZXRzW2ldKTsKICAJCQkJfQogIAkJCX0KICAJCQl0YXJnZXRzID0gZmlsdGVyZWQuY29uY2F0KHRhcmdldHMpOwogIAkJfQoKICAJCWlmICghdGFyZ2V0cy5sZW5ndGgpIHsgcmV0dXJuOyB9CgogIAkJaWYgKHR5cGUgPT09ICdjb250ZXh0bWVudScpIHsKICAJCQlwcmV2ZW50RGVmYXVsdChlKTsKICAJCX0KCiAgCQl2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXTsKICAJCXZhciBkYXRhID0gewogIAkJCW9yaWdpbmFsRXZlbnQ6IGUKICAJCX07CgogIAkJaWYgKGUudHlwZSAhPT0gJ2tleXByZXNzJyAmJiBlLnR5cGUgIT09ICdrZXlkb3duJyAmJiBlLnR5cGUgIT09ICdrZXl1cCcpIHsKICAJCQl2YXIgaXNNYXJrZXIgPSB0YXJnZXQuZ2V0TGF0TG5nICYmICghdGFyZ2V0Ll9yYWRpdXMgfHwgdGFyZ2V0Ll9yYWRpdXMgPD0gMTApOwogIAkJCWRhdGEuY29udGFpbmVyUG9pbnQgPSBpc01hcmtlciA/CiAgCQkJCXRoaXMubGF0TG5nVG9Db250YWluZXJQb2ludCh0YXJnZXQuZ2V0TGF0TG5nKCkpIDogdGhpcy5tb3VzZUV2ZW50VG9Db250YWluZXJQb2ludChlKTsKICAJCQlkYXRhLmxheWVyUG9pbnQgPSB0aGlzLmNvbnRhaW5lclBvaW50VG9MYXllclBvaW50KGRhdGEuY29udGFpbmVyUG9pbnQpOwogIAkJCWRhdGEubGF0bG5nID0gaXNNYXJrZXIgPyB0YXJnZXQuZ2V0TGF0TG5nKCkgOiB0aGlzLmxheWVyUG9pbnRUb0xhdExuZyhkYXRhLmxheWVyUG9pbnQpOwogIAkJfQoKICAJCWZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7CiAgCQkJdGFyZ2V0c1tpXS5maXJlKHR5cGUsIGRhdGEsIHRydWUpOwogIAkJCWlmIChkYXRhLm9yaWdpbmFsRXZlbnQuX3N0b3BwZWQgfHwKICAJCQkJKHRhcmdldHNbaV0ub3B0aW9ucy5idWJibGluZ01vdXNlRXZlbnRzID09PSBmYWxzZSAmJiBpbmRleE9mKHRoaXMuX21vdXNlRXZlbnRzLCB0eXBlKSAhPT0gLTEpKSB7IHJldHVybjsgfQogIAkJfQogIAl9LAoKICAJX2RyYWdnYWJsZU1vdmVkOiBmdW5jdGlvbiAob2JqKSB7CiAgCQlvYmogPSBvYmouZHJhZ2dpbmcgJiYgb2JqLmRyYWdnaW5nLmVuYWJsZWQoKSA/IG9iaiA6IHRoaXM7CiAgCQlyZXR1cm4gKG9iai5kcmFnZ2luZyAmJiBvYmouZHJhZ2dpbmcubW92ZWQoKSkgfHwgKHRoaXMuYm94Wm9vbSAmJiB0aGlzLmJveFpvb20ubW92ZWQoKSk7CiAgCX0sCgogIAlfY2xlYXJIYW5kbGVyczogZnVuY3Rpb24gKCkgewogIAkJZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX2hhbmRsZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJdGhpcy5faGFuZGxlcnNbaV0uZGlzYWJsZSgpOwogIAkJfQogIAl9LAoKICAJLy8gQHNlY3Rpb24gT3RoZXIgTWV0aG9kcwoKICAJLy8gQG1ldGhvZCB3aGVuUmVhZHkoZm46IEZ1bmN0aW9uLCBjb250ZXh0PzogT2JqZWN0KTogdGhpcwogIAkvLyBSdW5zIHRoZSBnaXZlbiBmdW5jdGlvbiBgZm5gIHdoZW4gdGhlIG1hcCBnZXRzIGluaXRpYWxpemVkIHdpdGgKICAJLy8gYSB2aWV3IChjZW50ZXIgYW5kIHpvb20pIGFuZCBhdCBsZWFzdCBvbmUgbGF5ZXIsIG9yIGltbWVkaWF0ZWx5CiAgCS8vIGlmIGl0J3MgYWxyZWFkeSBpbml0aWFsaXplZCwgb3B0aW9uYWxseSBwYXNzaW5nIGEgZnVuY3Rpb24gY29udGV4dC4KICAJd2hlblJlYWR5OiBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHsKICAJCWlmICh0aGlzLl9sb2FkZWQpIHsKICAJCQljYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgdGhpcywge3RhcmdldDogdGhpc30pOwogIAkJfSBlbHNlIHsKICAJCQl0aGlzLm9uKCdsb2FkJywgY2FsbGJhY2ssIGNvbnRleHQpOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgoKICAJLy8gcHJpdmF0ZSBtZXRob2RzIGZvciBnZXR0aW5nIG1hcCBzdGF0ZQoKICAJX2dldE1hcFBhbmVQb3M6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiBnZXRQb3NpdGlvbih0aGlzLl9tYXBQYW5lKSB8fCBuZXcgUG9pbnQoMCwgMCk7CiAgCX0sCgogIAlfbW92ZWQ6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBwb3MgPSB0aGlzLl9nZXRNYXBQYW5lUG9zKCk7CiAgCQlyZXR1cm4gcG9zICYmICFwb3MuZXF1YWxzKFswLCAwXSk7CiAgCX0sCgogIAlfZ2V0VG9wTGVmdFBvaW50OiBmdW5jdGlvbiAoY2VudGVyLCB6b29tKSB7CiAgCQl2YXIgcGl4ZWxPcmlnaW4gPSBjZW50ZXIgJiYgem9vbSAhPT0gdW5kZWZpbmVkID8KICAJCQl0aGlzLl9nZXROZXdQaXhlbE9yaWdpbihjZW50ZXIsIHpvb20pIDoKICAJCQl0aGlzLmdldFBpeGVsT3JpZ2luKCk7CiAgCQlyZXR1cm4gcGl4ZWxPcmlnaW4uc3VidHJhY3QodGhpcy5fZ2V0TWFwUGFuZVBvcygpKTsKICAJfSwKCiAgCV9nZXROZXdQaXhlbE9yaWdpbjogZnVuY3Rpb24gKGNlbnRlciwgem9vbSkgewogIAkJdmFyIHZpZXdIYWxmID0gdGhpcy5nZXRTaXplKCkuX2RpdmlkZUJ5KDIpOwogIAkJcmV0dXJuIHRoaXMucHJvamVjdChjZW50ZXIsIHpvb20pLl9zdWJ0cmFjdCh2aWV3SGFsZikuX2FkZCh0aGlzLl9nZXRNYXBQYW5lUG9zKCkpLl9yb3VuZCgpOwogIAl9LAoKICAJX2xhdExuZ1RvTmV3TGF5ZXJQb2ludDogZnVuY3Rpb24gKGxhdGxuZywgem9vbSwgY2VudGVyKSB7CiAgCQl2YXIgdG9wTGVmdCA9IHRoaXMuX2dldE5ld1BpeGVsT3JpZ2luKGNlbnRlciwgem9vbSk7CiAgCQlyZXR1cm4gdGhpcy5wcm9qZWN0KGxhdGxuZywgem9vbSkuX3N1YnRyYWN0KHRvcExlZnQpOwogIAl9LAoKICAJX2xhdExuZ0JvdW5kc1RvTmV3TGF5ZXJCb3VuZHM6IGZ1bmN0aW9uIChsYXRMbmdCb3VuZHMsIHpvb20sIGNlbnRlcikgewogIAkJdmFyIHRvcExlZnQgPSB0aGlzLl9nZXROZXdQaXhlbE9yaWdpbihjZW50ZXIsIHpvb20pOwogIAkJcmV0dXJuIHRvQm91bmRzKFsKICAJCQl0aGlzLnByb2plY3QobGF0TG5nQm91bmRzLmdldFNvdXRoV2VzdCgpLCB6b29tKS5fc3VidHJhY3QodG9wTGVmdCksCiAgCQkJdGhpcy5wcm9qZWN0KGxhdExuZ0JvdW5kcy5nZXROb3J0aFdlc3QoKSwgem9vbSkuX3N1YnRyYWN0KHRvcExlZnQpLAogIAkJCXRoaXMucHJvamVjdChsYXRMbmdCb3VuZHMuZ2V0U291dGhFYXN0KCksIHpvb20pLl9zdWJ0cmFjdCh0b3BMZWZ0KSwKICAJCQl0aGlzLnByb2plY3QobGF0TG5nQm91bmRzLmdldE5vcnRoRWFzdCgpLCB6b29tKS5fc3VidHJhY3QodG9wTGVmdCkKICAJCV0pOwogIAl9LAoKICAJLy8gbGF5ZXIgcG9pbnQgb2YgdGhlIGN1cnJlbnQgY2VudGVyCiAgCV9nZXRDZW50ZXJMYXllclBvaW50OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5jb250YWluZXJQb2ludFRvTGF5ZXJQb2ludCh0aGlzLmdldFNpemUoKS5fZGl2aWRlQnkoMikpOwogIAl9LAoKICAJLy8gb2Zmc2V0IG9mIHRoZSBzcGVjaWZpZWQgcGxhY2UgdG8gdGhlIGN1cnJlbnQgY2VudGVyIGluIHBpeGVscwogIAlfZ2V0Q2VudGVyT2Zmc2V0OiBmdW5jdGlvbiAobGF0bG5nKSB7CiAgCQlyZXR1cm4gdGhpcy5sYXRMbmdUb0xheWVyUG9pbnQobGF0bG5nKS5zdWJ0cmFjdCh0aGlzLl9nZXRDZW50ZXJMYXllclBvaW50KCkpOwogIAl9LAoKICAJLy8gYWRqdXN0IGNlbnRlciBmb3IgdmlldyB0byBnZXQgaW5zaWRlIGJvdW5kcwogIAlfbGltaXRDZW50ZXI6IGZ1bmN0aW9uIChjZW50ZXIsIHpvb20sIGJvdW5kcykgewoKICAJCWlmICghYm91bmRzKSB7IHJldHVybiBjZW50ZXI7IH0KCiAgCQl2YXIgY2VudGVyUG9pbnQgPSB0aGlzLnByb2plY3QoY2VudGVyLCB6b29tKSwKICAJCSAgICB2aWV3SGFsZiA9IHRoaXMuZ2V0U2l6ZSgpLmRpdmlkZUJ5KDIpLAogIAkJICAgIHZpZXdCb3VuZHMgPSBuZXcgQm91bmRzKGNlbnRlclBvaW50LnN1YnRyYWN0KHZpZXdIYWxmKSwgY2VudGVyUG9pbnQuYWRkKHZpZXdIYWxmKSksCiAgCQkgICAgb2Zmc2V0ID0gdGhpcy5fZ2V0Qm91bmRzT2Zmc2V0KHZpZXdCb3VuZHMsIGJvdW5kcywgem9vbSk7CgogIAkJLy8gSWYgb2Zmc2V0IGlzIGxlc3MgdGhhbiBhIHBpeGVsLCBpZ25vcmUuCiAgCQkvLyBUaGlzIHByZXZlbnRzIHVuc3RhYmxlIHByb2plY3Rpb25zIGZyb20gZ2V0dGluZyBpbnRvCiAgCQkvLyBhbiBpbmZpbml0ZSBsb29wIG9mIHRpbnkgb2Zmc2V0cy4KICAJCWlmIChvZmZzZXQucm91bmQoKS5lcXVhbHMoWzAsIDBdKSkgewogIAkJCXJldHVybiBjZW50ZXI7CiAgCQl9CgogIAkJcmV0dXJuIHRoaXMudW5wcm9qZWN0KGNlbnRlclBvaW50LmFkZChvZmZzZXQpLCB6b29tKTsKICAJfSwKCiAgCS8vIGFkanVzdCBvZmZzZXQgZm9yIHZpZXcgdG8gZ2V0IGluc2lkZSBib3VuZHMKICAJX2xpbWl0T2Zmc2V0OiBmdW5jdGlvbiAob2Zmc2V0LCBib3VuZHMpIHsKICAJCWlmICghYm91bmRzKSB7IHJldHVybiBvZmZzZXQ7IH0KCiAgCQl2YXIgdmlld0JvdW5kcyA9IHRoaXMuZ2V0UGl4ZWxCb3VuZHMoKSwKICAJCSAgICBuZXdCb3VuZHMgPSBuZXcgQm91bmRzKHZpZXdCb3VuZHMubWluLmFkZChvZmZzZXQpLCB2aWV3Qm91bmRzLm1heC5hZGQob2Zmc2V0KSk7CgogIAkJcmV0dXJuIG9mZnNldC5hZGQodGhpcy5fZ2V0Qm91bmRzT2Zmc2V0KG5ld0JvdW5kcywgYm91bmRzKSk7CiAgCX0sCgogIAkvLyByZXR1cm5zIG9mZnNldCBuZWVkZWQgZm9yIHB4Qm91bmRzIHRvIGdldCBpbnNpZGUgbWF4Qm91bmRzIGF0IGEgc3BlY2lmaWVkIHpvb20KICAJX2dldEJvdW5kc09mZnNldDogZnVuY3Rpb24gKHB4Qm91bmRzLCBtYXhCb3VuZHMsIHpvb20pIHsKICAJCXZhciBwcm9qZWN0ZWRNYXhCb3VuZHMgPSB0b0JvdW5kcygKICAJCSAgICAgICAgdGhpcy5wcm9qZWN0KG1heEJvdW5kcy5nZXROb3J0aEVhc3QoKSwgem9vbSksCiAgCQkgICAgICAgIHRoaXMucHJvamVjdChtYXhCb3VuZHMuZ2V0U291dGhXZXN0KCksIHpvb20pCiAgCQkgICAgKSwKICAJCSAgICBtaW5PZmZzZXQgPSBwcm9qZWN0ZWRNYXhCb3VuZHMubWluLnN1YnRyYWN0KHB4Qm91bmRzLm1pbiksCiAgCQkgICAgbWF4T2Zmc2V0ID0gcHJvamVjdGVkTWF4Qm91bmRzLm1heC5zdWJ0cmFjdChweEJvdW5kcy5tYXgpLAoKICAJCSAgICBkeCA9IHRoaXMuX3JlYm91bmQobWluT2Zmc2V0LngsIC1tYXhPZmZzZXQueCksCiAgCQkgICAgZHkgPSB0aGlzLl9yZWJvdW5kKG1pbk9mZnNldC55LCAtbWF4T2Zmc2V0LnkpOwoKICAJCXJldHVybiBuZXcgUG9pbnQoZHgsIGR5KTsKICAJfSwKCiAgCV9yZWJvdW5kOiBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHsKICAJCXJldHVybiBsZWZ0ICsgcmlnaHQgPiAwID8KICAJCQlNYXRoLnJvdW5kKGxlZnQgLSByaWdodCkgLyAyIDoKICAJCQlNYXRoLm1heCgwLCBNYXRoLmNlaWwobGVmdCkpIC0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihyaWdodCkpOwogIAl9LAoKICAJX2xpbWl0Wm9vbTogZnVuY3Rpb24gKHpvb20pIHsKICAJCXZhciBtaW4gPSB0aGlzLmdldE1pblpvb20oKSwKICAJCSAgICBtYXggPSB0aGlzLmdldE1heFpvb20oKSwKICAJCSAgICBzbmFwID0gQnJvd3Nlci5hbnkzZCA/IHRoaXMub3B0aW9ucy56b29tU25hcCA6IDE7CiAgCQlpZiAoc25hcCkgewogIAkJCXpvb20gPSBNYXRoLnJvdW5kKHpvb20gLyBzbmFwKSAqIHNuYXA7CiAgCQl9CiAgCQlyZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHpvb20pKTsKICAJfSwKCiAgCV9vblBhblRyYW5zaXRpb25TdGVwOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLmZpcmUoJ21vdmUnKTsKICAJfSwKCiAgCV9vblBhblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uICgpIHsKICAJCXJlbW92ZUNsYXNzKHRoaXMuX21hcFBhbmUsICdsZWFmbGV0LXBhbi1hbmltJyk7CiAgCQl0aGlzLmZpcmUoJ21vdmVlbmQnKTsKICAJfSwKCiAgCV90cnlBbmltYXRlZFBhbjogZnVuY3Rpb24gKGNlbnRlciwgb3B0aW9ucykgewogIAkJLy8gZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBuZXcgYW5kIGN1cnJlbnQgY2VudGVycyBpbiBwaXhlbHMKICAJCXZhciBvZmZzZXQgPSB0aGlzLl9nZXRDZW50ZXJPZmZzZXQoY2VudGVyKS5fdHJ1bmMoKTsKCiAgCQkvLyBkb24ndCBhbmltYXRlIHRvbyBmYXIgdW5sZXNzIGFuaW1hdGU6IHRydWUgc3BlY2lmaWVkIGluIG9wdGlvbnMKICAJCWlmICgob3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGUpICE9PSB0cnVlICYmICF0aGlzLmdldFNpemUoKS5jb250YWlucyhvZmZzZXQpKSB7IHJldHVybiBmYWxzZTsgfQoKICAJCXRoaXMucGFuQnkob2Zmc2V0LCBvcHRpb25zKTsKCiAgCQlyZXR1cm4gdHJ1ZTsKICAJfSwKCiAgCV9jcmVhdGVBbmltUHJveHk6IGZ1bmN0aW9uICgpIHsKCiAgCQl2YXIgcHJveHkgPSB0aGlzLl9wcm94eSA9IGNyZWF0ZSQxKCdkaXYnLCAnbGVhZmxldC1wcm94eSBsZWFmbGV0LXpvb20tYW5pbWF0ZWQnKTsKICAJCXRoaXMuX3BhbmVzLm1hcFBhbmUuYXBwZW5kQ2hpbGQocHJveHkpOwoKICAJCXRoaXMub24oJ3pvb21hbmltJywgZnVuY3Rpb24gKGUpIHsKICAJCQl2YXIgcHJvcCA9IFRSQU5TRk9STSwKICAJCQkgICAgdHJhbnNmb3JtID0gdGhpcy5fcHJveHkuc3R5bGVbcHJvcF07CgogIAkJCXNldFRyYW5zZm9ybSh0aGlzLl9wcm94eSwgdGhpcy5wcm9qZWN0KGUuY2VudGVyLCBlLnpvb20pLCB0aGlzLmdldFpvb21TY2FsZShlLnpvb20sIDEpKTsKCiAgCQkJLy8gd29ya2Fyb3VuZCBmb3IgY2FzZSB3aGVuIHRyYW5zZm9ybSBpcyB0aGUgc2FtZSBhbmQgc28gdHJhbnNpdGlvbmVuZCBldmVudCBpcyBub3QgZmlyZWQKICAJCQlpZiAodHJhbnNmb3JtID09PSB0aGlzLl9wcm94eS5zdHlsZVtwcm9wXSAmJiB0aGlzLl9hbmltYXRpbmdab29tKSB7CiAgCQkJCXRoaXMuX29uWm9vbVRyYW5zaXRpb25FbmQoKTsKICAJCQl9CiAgCQl9LCB0aGlzKTsKCiAgCQl0aGlzLm9uKCdsb2FkIG1vdmVlbmQnLCB0aGlzLl9hbmltTW92ZUVuZCwgdGhpcyk7CgogIAkJdGhpcy5fb24oJ3VubG9hZCcsIHRoaXMuX2Rlc3Ryb3lBbmltUHJveHksIHRoaXMpOwogIAl9LAoKICAJX2Rlc3Ryb3lBbmltUHJveHk6IGZ1bmN0aW9uICgpIHsKICAJCXJlbW92ZSh0aGlzLl9wcm94eSk7CiAgCQl0aGlzLm9mZignbG9hZCBtb3ZlZW5kJywgdGhpcy5fYW5pbU1vdmVFbmQsIHRoaXMpOwogIAkJZGVsZXRlIHRoaXMuX3Byb3h5OwogIAl9LAoKICAJX2FuaW1Nb3ZlRW5kOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgYyA9IHRoaXMuZ2V0Q2VudGVyKCksCiAgCQkgICAgeiA9IHRoaXMuZ2V0Wm9vbSgpOwogIAkJc2V0VHJhbnNmb3JtKHRoaXMuX3Byb3h5LCB0aGlzLnByb2plY3QoYywgeiksIHRoaXMuZ2V0Wm9vbVNjYWxlKHosIDEpKTsKICAJfSwKCiAgCV9jYXRjaFRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIChlKSB7CiAgCQlpZiAodGhpcy5fYW5pbWF0aW5nWm9vbSAmJiBlLnByb3BlcnR5TmFtZS5pbmRleE9mKCd0cmFuc2Zvcm0nKSA+PSAwKSB7CiAgCQkJdGhpcy5fb25ab29tVHJhbnNpdGlvbkVuZCgpOwogIAkJfQogIAl9LAoKICAJX25vdGhpbmdUb0FuaW1hdGU6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiAhdGhpcy5fY29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xlYWZsZXQtem9vbS1hbmltYXRlZCcpLmxlbmd0aDsKICAJfSwKCiAgCV90cnlBbmltYXRlZFpvb206IGZ1bmN0aW9uIChjZW50ZXIsIHpvb20sIG9wdGlvbnMpIHsKCiAgCQlpZiAodGhpcy5fYW5pbWF0aW5nWm9vbSkgeyByZXR1cm4gdHJ1ZTsgfQoKICAJCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAJCS8vIGRvbid0IGFuaW1hdGUgaWYgZGlzYWJsZWQsIG5vdCBzdXBwb3J0ZWQgb3Igem9vbSBkaWZmZXJlbmNlIGlzIHRvbyBsYXJnZQogIAkJaWYgKCF0aGlzLl96b29tQW5pbWF0ZWQgfHwgb3B0aW9ucy5hbmltYXRlID09PSBmYWxzZSB8fCB0aGlzLl9ub3RoaW5nVG9BbmltYXRlKCkgfHwKICAJCSAgICAgICAgTWF0aC5hYnMoem9vbSAtIHRoaXMuX3pvb20pID4gdGhpcy5vcHRpb25zLnpvb21BbmltYXRpb25UaHJlc2hvbGQpIHsgcmV0dXJuIGZhbHNlOyB9CgogIAkJLy8gb2Zmc2V0IGlzIHRoZSBwaXhlbCBjb29yZHMgb2YgdGhlIHpvb20gb3JpZ2luIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IGNlbnRlcgogIAkJdmFyIHNjYWxlID0gdGhpcy5nZXRab29tU2NhbGUoem9vbSksCiAgCQkgICAgb2Zmc2V0ID0gdGhpcy5fZ2V0Q2VudGVyT2Zmc2V0KGNlbnRlcikuX2RpdmlkZUJ5KDEgLSAxIC8gc2NhbGUpOwoKICAJCS8vIGRvbid0IGFuaW1hdGUgaWYgdGhlIHpvb20gb3JpZ2luIGlzbid0IHdpdGhpbiBvbmUgc2NyZWVuIGZyb20gdGhlIGN1cnJlbnQgY2VudGVyLCB1bmxlc3MgZm9yY2VkCiAgCQlpZiAob3B0aW9ucy5hbmltYXRlICE9PSB0cnVlICYmICF0aGlzLmdldFNpemUoKS5jb250YWlucyhvZmZzZXQpKSB7IHJldHVybiBmYWxzZTsgfQoKICAJCXJlcXVlc3RBbmltRnJhbWUoZnVuY3Rpb24gKCkgewogIAkJCXRoaXMKICAJCQkgICAgLl9tb3ZlU3RhcnQodHJ1ZSwgZmFsc2UpCiAgCQkJICAgIC5fYW5pbWF0ZVpvb20oY2VudGVyLCB6b29tLCB0cnVlKTsKICAJCX0sIHRoaXMpOwoKICAJCXJldHVybiB0cnVlOwogIAl9LAoKICAJX2FuaW1hdGVab29tOiBmdW5jdGlvbiAoY2VudGVyLCB6b29tLCBzdGFydEFuaW0sIG5vVXBkYXRlKSB7CiAgCQlpZiAoIXRoaXMuX21hcFBhbmUpIHsgcmV0dXJuOyB9CgogIAkJaWYgKHN0YXJ0QW5pbSkgewogIAkJCXRoaXMuX2FuaW1hdGluZ1pvb20gPSB0cnVlOwoKICAJCQkvLyByZW1lbWJlciB3aGF0IGNlbnRlci96b29tIHRvIHNldCBhZnRlciBhbmltYXRpb24KICAJCQl0aGlzLl9hbmltYXRlVG9DZW50ZXIgPSBjZW50ZXI7CiAgCQkJdGhpcy5fYW5pbWF0ZVRvWm9vbSA9IHpvb207CgogIAkJCWFkZENsYXNzKHRoaXMuX21hcFBhbmUsICdsZWFmbGV0LXpvb20tYW5pbScpOwogIAkJfQoKICAJCS8vIEBzZWN0aW9uIE90aGVyIEV2ZW50cwogIAkJLy8gQGV2ZW50IHpvb21hbmltOiBab29tQW5pbUV2ZW50CiAgCQkvLyBGaXJlZCBhdCBsZWFzdCBvbmNlIHBlciB6b29tIGFuaW1hdGlvbi4gRm9yIGNvbnRpbnVvdXMgem9vbSwgbGlrZSBwaW5jaCB6b29taW5nLCBmaXJlZCBvbmNlIHBlciBmcmFtZSBkdXJpbmcgem9vbS4KICAJCXRoaXMuZmlyZSgnem9vbWFuaW0nLCB7CiAgCQkJY2VudGVyOiBjZW50ZXIsCiAgCQkJem9vbTogem9vbSwKICAJCQlub1VwZGF0ZTogbm9VcGRhdGUKICAJCX0pOwoKICAJCWlmICghdGhpcy5fdGVtcEZpcmVab29tRXZlbnQpIHsKICAJCQl0aGlzLl90ZW1wRmlyZVpvb21FdmVudCA9IHRoaXMuX3pvb20gIT09IHRoaXMuX2FuaW1hdGVUb1pvb207CiAgCQl9CgogIAkJdGhpcy5fbW92ZSh0aGlzLl9hbmltYXRlVG9DZW50ZXIsIHRoaXMuX2FuaW1hdGVUb1pvb20sIHVuZGVmaW5lZCwgdHJ1ZSk7CgogIAkJLy8gV29yayBhcm91bmQgd2Via2l0IG5vdCBmaXJpbmcgJ3RyYW5zaXRpb25lbmQnLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL0xlYWZsZXQvTGVhZmxldC9pc3N1ZXMvMzY4OSwgMjY5MwogIAkJc2V0VGltZW91dChiaW5kKHRoaXMuX29uWm9vbVRyYW5zaXRpb25FbmQsIHRoaXMpLCAyNTApOwogIAl9LAoKICAJX29uWm9vbVRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uICgpIHsKICAJCWlmICghdGhpcy5fYW5pbWF0aW5nWm9vbSkgeyByZXR1cm47IH0KCiAgCQlpZiAodGhpcy5fbWFwUGFuZSkgewogIAkJCXJlbW92ZUNsYXNzKHRoaXMuX21hcFBhbmUsICdsZWFmbGV0LXpvb20tYW5pbScpOwogIAkJfQoKICAJCXRoaXMuX2FuaW1hdGluZ1pvb20gPSBmYWxzZTsKCiAgCQl0aGlzLl9tb3ZlKHRoaXMuX2FuaW1hdGVUb0NlbnRlciwgdGhpcy5fYW5pbWF0ZVRvWm9vbSwgdW5kZWZpbmVkLCB0cnVlKTsKCiAgCQlpZiAodGhpcy5fdGVtcEZpcmVab29tRXZlbnQpIHsKICAJCQl0aGlzLmZpcmUoJ3pvb20nKTsKICAJCX0KICAJCWRlbGV0ZSB0aGlzLl90ZW1wRmlyZVpvb21FdmVudDsKCiAgCQl0aGlzLmZpcmUoJ21vdmUnKTsKCiAgCQl0aGlzLl9tb3ZlRW5kKHRydWUpOwogIAl9CiAgfSk7CgogIC8vIEBzZWN0aW9uCgogIC8vIEBmYWN0b3J5IEwubWFwKGlkOiBTdHJpbmcsIG9wdGlvbnM/OiBNYXAgb3B0aW9ucykKICAvLyBJbnN0YW50aWF0ZXMgYSBtYXAgb2JqZWN0IGdpdmVuIHRoZSBET00gSUQgb2YgYSBgPGRpdj5gIGVsZW1lbnQKICAvLyBhbmQgb3B0aW9uYWxseSBhbiBvYmplY3QgbGl0ZXJhbCB3aXRoIGBNYXAgb3B0aW9uc2AuCiAgLy8KICAvLyBAYWx0ZXJuYXRpdmUKICAvLyBAZmFjdG9yeSBMLm1hcChlbDogSFRNTEVsZW1lbnQsIG9wdGlvbnM/OiBNYXAgb3B0aW9ucykKICAvLyBJbnN0YW50aWF0ZXMgYSBtYXAgb2JqZWN0IGdpdmVuIGFuIGluc3RhbmNlIG9mIGEgYDxkaXY+YCBIVE1MIGVsZW1lbnQKICAvLyBhbmQgb3B0aW9uYWxseSBhbiBvYmplY3QgbGl0ZXJhbCB3aXRoIGBNYXAgb3B0aW9uc2AuCiAgZnVuY3Rpb24gY3JlYXRlTWFwKGlkLCBvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgTWFwKGlkLCBvcHRpb25zKTsKICB9CgogIC8qCiAgICogQGNsYXNzIENvbnRyb2wKICAgKiBAYWthIEwuQ29udHJvbAogICAqIEBpbmhlcml0cyBDbGFzcwogICAqCiAgICogTC5Db250cm9sIGlzIGEgYmFzZSBjbGFzcyBmb3IgaW1wbGVtZW50aW5nIG1hcCBjb250cm9scy4gSGFuZGxlcyBwb3NpdGlvbmluZy4KICAgKiBBbGwgb3RoZXIgY29udHJvbHMgZXh0ZW5kIGZyb20gdGhpcyBjbGFzcy4KICAgKi8KCiAgdmFyIENvbnRyb2wgPSBDbGFzcy5leHRlbmQoewogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIENvbnRyb2wgT3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQkvLyBAb3B0aW9uIHBvc2l0aW9uOiBTdHJpbmcgPSAndG9wcmlnaHQnCiAgCQkvLyBUaGUgcG9zaXRpb24gb2YgdGhlIGNvbnRyb2wgKG9uZSBvZiB0aGUgbWFwIGNvcm5lcnMpLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIGAndG9wbGVmdCdgLAogIAkJLy8gYCd0b3ByaWdodCdgLCBgJ2JvdHRvbWxlZnQnYCBvciBgJ2JvdHRvbXJpZ2h0J2AKICAJCXBvc2l0aW9uOiAndG9wcmlnaHQnCiAgCX0sCgogIAlpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKICAJfSwKCiAgCS8qIEBzZWN0aW9uCiAgCSAqIENsYXNzZXMgZXh0ZW5kaW5nIEwuQ29udHJvbCB3aWxsIGluaGVyaXQgdGhlIGZvbGxvd2luZyBtZXRob2RzOgogIAkgKgogIAkgKiBAbWV0aG9kIGdldFBvc2l0aW9uOiBzdHJpbmcKICAJICogUmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbnRyb2wuCiAgCSAqLwogIAlnZXRQb3NpdGlvbjogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMub3B0aW9ucy5wb3NpdGlvbjsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0UG9zaXRpb24ocG9zaXRpb246IHN0cmluZyk6IHRoaXMKICAJLy8gU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGNvbnRyb2wuCiAgCXNldFBvc2l0aW9uOiBmdW5jdGlvbiAocG9zaXRpb24pIHsKICAJCXZhciBtYXAgPSB0aGlzLl9tYXA7CgogIAkJaWYgKG1hcCkgewogIAkJCW1hcC5yZW1vdmVDb250cm9sKHRoaXMpOwogIAkJfQoKICAJCXRoaXMub3B0aW9ucy5wb3NpdGlvbiA9IHBvc2l0aW9uOwoKICAJCWlmIChtYXApIHsKICAJCQltYXAuYWRkQ29udHJvbCh0aGlzKTsKICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Q29udGFpbmVyOiBIVE1MRWxlbWVudAogIAkvLyBSZXR1cm5zIHRoZSBIVE1MRWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBjb250cm9sLgogIAlnZXRDb250YWluZXI6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9jb250YWluZXI7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGFkZFRvKG1hcDogTWFwKTogdGhpcwogIAkvLyBBZGRzIHRoZSBjb250cm9sIHRvIHRoZSBnaXZlbiBtYXAuCiAgCWFkZFRvOiBmdW5jdGlvbiAobWFwKSB7CiAgCQl0aGlzLnJlbW92ZSgpOwogIAkJdGhpcy5fbWFwID0gbWFwOwoKICAJCXZhciBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXIgPSB0aGlzLm9uQWRkKG1hcCksCiAgCQkgICAgcG9zID0gdGhpcy5nZXRQb3NpdGlvbigpLAogIAkJICAgIGNvcm5lciA9IG1hcC5fY29udHJvbENvcm5lcnNbcG9zXTsKCiAgCQlhZGRDbGFzcyhjb250YWluZXIsICdsZWFmbGV0LWNvbnRyb2wnKTsKCiAgCQlpZiAocG9zLmluZGV4T2YoJ2JvdHRvbScpICE9PSAtMSkgewogIAkJCWNvcm5lci5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBjb3JuZXIuZmlyc3RDaGlsZCk7CiAgCQl9IGVsc2UgewogIAkJCWNvcm5lci5hcHBlbmRDaGlsZChjb250YWluZXIpOwogIAkJfQoKICAJCXRoaXMuX21hcC5vbigndW5sb2FkJywgdGhpcy5yZW1vdmUsIHRoaXMpOwoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCByZW1vdmU6IHRoaXMKICAJLy8gUmVtb3ZlcyB0aGUgY29udHJvbCBmcm9tIHRoZSBtYXAgaXQgaXMgY3VycmVudGx5IGFjdGl2ZSBvbi4KICAJcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX21hcCkgewogIAkJCXJldHVybiB0aGlzOwogIAkJfQoKICAJCXJlbW92ZSh0aGlzLl9jb250YWluZXIpOwoKICAJCWlmICh0aGlzLm9uUmVtb3ZlKSB7CiAgCQkJdGhpcy5vblJlbW92ZSh0aGlzLl9tYXApOwogIAkJfQoKICAJCXRoaXMuX21hcC5vZmYoJ3VubG9hZCcsIHRoaXMucmVtb3ZlLCB0aGlzKTsKICAJCXRoaXMuX21hcCA9IG51bGw7CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAlfcmVmb2N1c09uTWFwOiBmdW5jdGlvbiAoZSkgewogIAkJLy8gaWYgbWFwIGV4aXN0cyBhbmQgZXZlbnQgaXMgbm90IGEga2V5Ym9hcmQgZXZlbnQKICAJCWlmICh0aGlzLl9tYXAgJiYgZSAmJiBlLnNjcmVlblggPiAwICYmIGUuc2NyZWVuWSA+IDApIHsKICAJCQl0aGlzLl9tYXAuZ2V0Q29udGFpbmVyKCkuZm9jdXMoKTsKICAJCX0KICAJfQogIH0pOwoKICB2YXIgY29udHJvbCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgQ29udHJvbChvcHRpb25zKTsKICB9OwoKICAvKiBAc2VjdGlvbiBFeHRlbnNpb24gbWV0aG9kcwogICAqIEB1bmluaGVyaXRhYmxlCiAgICoKICAgKiBFdmVyeSBjb250cm9sIHNob3VsZCBleHRlbmQgZnJvbSBgTC5Db250cm9sYCBhbmQgKHJlLSlpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBtZXRob2RzLgogICAqCiAgICogQG1ldGhvZCBvbkFkZChtYXA6IE1hcCk6IEhUTUxFbGVtZW50CiAgICogU2hvdWxkIHJldHVybiB0aGUgY29udGFpbmVyIERPTSBlbGVtZW50IGZvciB0aGUgY29udHJvbCBhbmQgYWRkIGxpc3RlbmVycyBvbiByZWxldmFudCBtYXAgZXZlbnRzLiBDYWxsZWQgb24gW2Bjb250cm9sLmFkZFRvKG1hcClgXSgjY29udHJvbC1hZGRUbykuCiAgICoKICAgKiBAbWV0aG9kIG9uUmVtb3ZlKG1hcDogTWFwKQogICAqIE9wdGlvbmFsIG1ldGhvZC4gU2hvdWxkIGNvbnRhaW4gYWxsIGNsZWFuIHVwIGNvZGUgdGhhdCByZW1vdmVzIHRoZSBsaXN0ZW5lcnMgcHJldmlvdXNseSBhZGRlZCBpbiBbYG9uQWRkYF0oI2NvbnRyb2wtb25hZGQpLiBDYWxsZWQgb24gW2Bjb250cm9sLnJlbW92ZSgpYF0oI2NvbnRyb2wtcmVtb3ZlKS4KICAgKi8KCiAgLyogQG5hbWVzcGFjZSBNYXAKICAgKiBAc2VjdGlvbiBNZXRob2RzIGZvciBMYXllcnMgYW5kIENvbnRyb2xzCiAgICovCiAgTWFwLmluY2x1ZGUoewogIAkvLyBAbWV0aG9kIGFkZENvbnRyb2woY29udHJvbDogQ29udHJvbCk6IHRoaXMKICAJLy8gQWRkcyB0aGUgZ2l2ZW4gY29udHJvbCB0byB0aGUgbWFwCiAgCWFkZENvbnRyb2w6IGZ1bmN0aW9uIChjb250cm9sKSB7CiAgCQljb250cm9sLmFkZFRvKHRoaXMpOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHJlbW92ZUNvbnRyb2woY29udHJvbDogQ29udHJvbCk6IHRoaXMKICAJLy8gUmVtb3ZlcyB0aGUgZ2l2ZW4gY29udHJvbCBmcm9tIHRoZSBtYXAKICAJcmVtb3ZlQ29udHJvbDogZnVuY3Rpb24gKGNvbnRyb2wpIHsKICAJCWNvbnRyb2wucmVtb3ZlKCk7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9pbml0Q29udHJvbFBvczogZnVuY3Rpb24gKCkgewogIAkJdmFyIGNvcm5lcnMgPSB0aGlzLl9jb250cm9sQ29ybmVycyA9IHt9LAogIAkJICAgIGwgPSAnbGVhZmxldC0nLAogIAkJICAgIGNvbnRhaW5lciA9IHRoaXMuX2NvbnRyb2xDb250YWluZXIgPQogIAkJICAgICAgICAgICAgY3JlYXRlJDEoJ2RpdicsIGwgKyAnY29udHJvbC1jb250YWluZXInLCB0aGlzLl9jb250YWluZXIpOwoKICAJCWZ1bmN0aW9uIGNyZWF0ZUNvcm5lcih2U2lkZSwgaFNpZGUpIHsKICAJCQl2YXIgY2xhc3NOYW1lID0gbCArIHZTaWRlICsgJyAnICsgbCArIGhTaWRlOwoKICAJCQljb3JuZXJzW3ZTaWRlICsgaFNpZGVdID0gY3JlYXRlJDEoJ2RpdicsIGNsYXNzTmFtZSwgY29udGFpbmVyKTsKICAJCX0KCiAgCQljcmVhdGVDb3JuZXIoJ3RvcCcsICdsZWZ0Jyk7CiAgCQljcmVhdGVDb3JuZXIoJ3RvcCcsICdyaWdodCcpOwogIAkJY3JlYXRlQ29ybmVyKCdib3R0b20nLCAnbGVmdCcpOwogIAkJY3JlYXRlQ29ybmVyKCdib3R0b20nLCAncmlnaHQnKTsKICAJfSwKCiAgCV9jbGVhckNvbnRyb2xQb3M6IGZ1bmN0aW9uICgpIHsKICAJCWZvciAodmFyIGkgaW4gdGhpcy5fY29udHJvbENvcm5lcnMpIHsKICAJCQlyZW1vdmUodGhpcy5fY29udHJvbENvcm5lcnNbaV0pOwogIAkJfQogIAkJcmVtb3ZlKHRoaXMuX2NvbnRyb2xDb250YWluZXIpOwogIAkJZGVsZXRlIHRoaXMuX2NvbnRyb2xDb3JuZXJzOwogIAkJZGVsZXRlIHRoaXMuX2NvbnRyb2xDb250YWluZXI7CiAgCX0KICB9KTsKCiAgLyoKICAgKiBAY2xhc3MgQ29udHJvbC5MYXllcnMKICAgKiBAYWthIEwuQ29udHJvbC5MYXllcnMKICAgKiBAaW5oZXJpdHMgQ29udHJvbAogICAqCiAgICogVGhlIGxheWVycyBjb250cm9sIGdpdmVzIHVzZXJzIHRoZSBhYmlsaXR5IHRvIHN3aXRjaCBiZXR3ZWVuIGRpZmZlcmVudCBiYXNlIGxheWVycyBhbmQgc3dpdGNoIG92ZXJsYXlzIG9uL29mZiAoY2hlY2sgb3V0IHRoZSBbZGV0YWlsZWQgZXhhbXBsZV0oaHR0cHM6Ly9sZWFmbGV0anMuY29tL2V4YW1wbGVzL2xheWVycy1jb250cm9sLykpLiBFeHRlbmRzIGBDb250cm9sYC4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIHZhciBiYXNlTGF5ZXJzID0gewogICAqIAkiTWFwYm94IjogbWFwYm94LAogICAqIAkiT3BlblN0cmVldE1hcCI6IG9zbQogICAqIH07CiAgICoKICAgKiB2YXIgb3ZlcmxheXMgPSB7CiAgICogCSJNYXJrZXIiOiBtYXJrZXIsCiAgICogCSJSb2FkcyI6IHJvYWRzTGF5ZXIKICAgKiB9OwogICAqCiAgICogTC5jb250cm9sLmxheWVycyhiYXNlTGF5ZXJzLCBvdmVybGF5cykuYWRkVG8obWFwKTsKICAgKiBgYGAKICAgKgogICAqIFRoZSBgYmFzZUxheWVyc2AgYW5kIGBvdmVybGF5c2AgcGFyYW1ldGVycyBhcmUgb2JqZWN0IGxpdGVyYWxzIHdpdGggbGF5ZXIgbmFtZXMgYXMga2V5cyBhbmQgYExheWVyYCBvYmplY3RzIGFzIHZhbHVlczoKICAgKgogICAqIGBgYGpzCiAgICogewogICAqICAgICAiPHNvbWVOYW1lMT4iOiBsYXllcjEsCiAgICogICAgICI8c29tZU5hbWUyPiI6IGxheWVyMgogICAqIH0KICAgKiBgYGAKICAgKgogICAqIFRoZSBsYXllciBuYW1lcyBjYW4gY29udGFpbiBIVE1MLCB3aGljaCBhbGxvd3MgeW91IHRvIGFkZCBhZGRpdGlvbmFsIHN0eWxpbmcgdG8gdGhlIGl0ZW1zOgogICAqCiAgICogYGBganMKICAgKiB7IjxpbWcgc3JjPSdteS1sYXllci1pY29uJyAvPiA8c3BhbiBjbGFzcz0nbXktbGF5ZXItaXRlbSc+TXkgTGF5ZXI8L3NwYW4+IjogbXlMYXllcn0KICAgKiBgYGAKICAgKi8KCiAgdmFyIExheWVycyA9IENvbnRyb2wuZXh0ZW5kKHsKICAJLy8gQHNlY3Rpb24KICAJLy8gQGFrYSBDb250cm9sLkxheWVycyBvcHRpb25zCiAgCW9wdGlvbnM6IHsKICAJCS8vIEBvcHRpb24gY29sbGFwc2VkOiBCb29sZWFuID0gdHJ1ZQogIAkJLy8gSWYgYHRydWVgLCB0aGUgY29udHJvbCB3aWxsIGJlIGNvbGxhcHNlZCBpbnRvIGFuIGljb24gYW5kIGV4cGFuZGVkIG9uIG1vdXNlIGhvdmVyLCB0b3VjaCwgb3Iga2V5Ym9hcmQgYWN0aXZhdGlvbi4KICAJCWNvbGxhcHNlZDogdHJ1ZSwKICAJCXBvc2l0aW9uOiAndG9wcmlnaHQnLAoKICAJCS8vIEBvcHRpb24gYXV0b1pJbmRleDogQm9vbGVhbiA9IHRydWUKICAJCS8vIElmIGB0cnVlYCwgdGhlIGNvbnRyb2wgd2lsbCBhc3NpZ24gekluZGV4ZXMgaW4gaW5jcmVhc2luZyBvcmRlciB0byBhbGwgb2YgaXRzIGxheWVycyBzbyB0aGF0IHRoZSBvcmRlciBpcyBwcmVzZXJ2ZWQgd2hlbiBzd2l0Y2hpbmcgdGhlbSBvbi9vZmYuCiAgCQlhdXRvWkluZGV4OiB0cnVlLAoKICAJCS8vIEBvcHRpb24gaGlkZVNpbmdsZUJhc2U6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gSWYgYHRydWVgLCB0aGUgYmFzZSBsYXllcnMgaW4gdGhlIGNvbnRyb2wgd2lsbCBiZSBoaWRkZW4gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZS4KICAJCWhpZGVTaW5nbGVCYXNlOiBmYWxzZSwKCiAgCQkvLyBAb3B0aW9uIHNvcnRMYXllcnM6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gV2hldGhlciB0byBzb3J0IHRoZSBsYXllcnMuIFdoZW4gYGZhbHNlYCwgbGF5ZXJzIHdpbGwga2VlcCB0aGUgb3JkZXIKICAJCS8vIGluIHdoaWNoIHRoZXkgd2VyZSBhZGRlZCB0byB0aGUgY29udHJvbC4KICAJCXNvcnRMYXllcnM6IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gc29ydEZ1bmN0aW9uOiBGdW5jdGlvbiA9ICoKICAJCS8vIEEgW2NvbXBhcmUgZnVuY3Rpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NvcnQpCiAgCQkvLyB0aGF0IHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZyB0aGUgbGF5ZXJzLCB3aGVuIGBzb3J0TGF5ZXJzYCBpcyBgdHJ1ZWAuCiAgCQkvLyBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgYm90aCB0aGUgYEwuTGF5ZXJgIGluc3RhbmNlcyBhbmQgdGhlaXIgbmFtZXMsIGFzIGluCiAgCQkvLyBgc29ydEZ1bmN0aW9uKGxheWVyQSwgbGF5ZXJCLCBuYW1lQSwgbmFtZUIpYC4KICAJCS8vIEJ5IGRlZmF1bHQsIGl0IHNvcnRzIGxheWVycyBhbHBoYWJldGljYWxseSBieSB0aGVpciBuYW1lLgogIAkJc29ydEZ1bmN0aW9uOiBmdW5jdGlvbiAobGF5ZXJBLCBsYXllckIsIG5hbWVBLCBuYW1lQikgewogIAkJCXJldHVybiBuYW1lQSA8IG5hbWVCID8gLTEgOiAobmFtZUIgPCBuYW1lQSA/IDEgOiAwKTsKICAJCX0KICAJfSwKCiAgCWluaXRpYWxpemU6IGZ1bmN0aW9uIChiYXNlTGF5ZXJzLCBvdmVybGF5cywgb3B0aW9ucykgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKCiAgCQl0aGlzLl9sYXllckNvbnRyb2xJbnB1dHMgPSBbXTsKICAJCXRoaXMuX2xheWVycyA9IFtdOwogIAkJdGhpcy5fbGFzdFpJbmRleCA9IDA7CiAgCQl0aGlzLl9oYW5kbGluZ0NsaWNrID0gZmFsc2U7CgogIAkJZm9yICh2YXIgaSBpbiBiYXNlTGF5ZXJzKSB7CiAgCQkJdGhpcy5fYWRkTGF5ZXIoYmFzZUxheWVyc1tpXSwgaSk7CiAgCQl9CgogIAkJZm9yIChpIGluIG92ZXJsYXlzKSB7CiAgCQkJdGhpcy5fYWRkTGF5ZXIob3ZlcmxheXNbaV0sIGksIHRydWUpOwogIAkJfQogIAl9LAoKICAJb25BZGQ6IGZ1bmN0aW9uIChtYXApIHsKICAJCXRoaXMuX2luaXRMYXlvdXQoKTsKICAJCXRoaXMuX3VwZGF0ZSgpOwoKICAJCXRoaXMuX21hcCA9IG1hcDsKICAJCW1hcC5vbignem9vbWVuZCcsIHRoaXMuX2NoZWNrRGlzYWJsZWRMYXllcnMsIHRoaXMpOwoKICAJCWZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fbGF5ZXJzLmxlbmd0aDsgaSsrKSB7CiAgCQkJdGhpcy5fbGF5ZXJzW2ldLmxheWVyLm9uKCdhZGQgcmVtb3ZlJywgdGhpcy5fb25MYXllckNoYW5nZSwgdGhpcyk7CiAgCQl9CgogIAkJcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjsKICAJfSwKCiAgCWFkZFRvOiBmdW5jdGlvbiAobWFwKSB7CiAgCQlDb250cm9sLnByb3RvdHlwZS5hZGRUby5jYWxsKHRoaXMsIG1hcCk7CiAgCQkvLyBUcmlnZ2VyIGV4cGFuZCBhZnRlciBMYXllcnMgQ29udHJvbCBoYXMgYmVlbiBpbnNlcnRlZCBpbnRvIERPTSBzbyB0aGF0IGlzIG5vdyBoYXMgYW4gYWN0dWFsIGhlaWdodC4KICAJCXJldHVybiB0aGlzLl9leHBhbmRJZk5vdENvbGxhcHNlZCgpOwogIAl9LAoKICAJb25SZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAJCXRoaXMuX21hcC5vZmYoJ3pvb21lbmQnLCB0aGlzLl9jaGVja0Rpc2FibGVkTGF5ZXJzLCB0aGlzKTsKCiAgCQlmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2xheWVycy5sZW5ndGg7IGkrKykgewogIAkJCXRoaXMuX2xheWVyc1tpXS5sYXllci5vZmYoJ2FkZCByZW1vdmUnLCB0aGlzLl9vbkxheWVyQ2hhbmdlLCB0aGlzKTsKICAJCX0KICAJfSwKCiAgCS8vIEBtZXRob2QgYWRkQmFzZUxheWVyKGxheWVyOiBMYXllciwgbmFtZTogU3RyaW5nKTogdGhpcwogIAkvLyBBZGRzIGEgYmFzZSBsYXllciAocmFkaW8gYnV0dG9uIGVudHJ5KSB3aXRoIHRoZSBnaXZlbiBuYW1lIHRvIHRoZSBjb250cm9sLgogIAlhZGRCYXNlTGF5ZXI6IGZ1bmN0aW9uIChsYXllciwgbmFtZSkgewogIAkJdGhpcy5fYWRkTGF5ZXIobGF5ZXIsIG5hbWUpOwogIAkJcmV0dXJuICh0aGlzLl9tYXApID8gdGhpcy5fdXBkYXRlKCkgOiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBhZGRPdmVybGF5KGxheWVyOiBMYXllciwgbmFtZTogU3RyaW5nKTogdGhpcwogIAkvLyBBZGRzIGFuIG92ZXJsYXkgKGNoZWNrYm94IGVudHJ5KSB3aXRoIHRoZSBnaXZlbiBuYW1lIHRvIHRoZSBjb250cm9sLgogIAlhZGRPdmVybGF5OiBmdW5jdGlvbiAobGF5ZXIsIG5hbWUpIHsKICAJCXRoaXMuX2FkZExheWVyKGxheWVyLCBuYW1lLCB0cnVlKTsKICAJCXJldHVybiAodGhpcy5fbWFwKSA/IHRoaXMuX3VwZGF0ZSgpIDogdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgcmVtb3ZlTGF5ZXIobGF5ZXI6IExheWVyKTogdGhpcwogIAkvLyBSZW1vdmUgdGhlIGdpdmVuIGxheWVyIGZyb20gdGhlIGNvbnRyb2wuCiAgCXJlbW92ZUxheWVyOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCWxheWVyLm9mZignYWRkIHJlbW92ZScsIHRoaXMuX29uTGF5ZXJDaGFuZ2UsIHRoaXMpOwoKICAJCXZhciBvYmogPSB0aGlzLl9nZXRMYXllcihzdGFtcChsYXllcikpOwogIAkJaWYgKG9iaikgewogIAkJCXRoaXMuX2xheWVycy5zcGxpY2UodGhpcy5fbGF5ZXJzLmluZGV4T2Yob2JqKSwgMSk7CiAgCQl9CiAgCQlyZXR1cm4gKHRoaXMuX21hcCkgPyB0aGlzLl91cGRhdGUoKSA6IHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGV4cGFuZCgpOiB0aGlzCiAgCS8vIEV4cGFuZCB0aGUgY29udHJvbCBjb250YWluZXIgaWYgY29sbGFwc2VkLgogIAlleHBhbmQ6IGZ1bmN0aW9uICgpIHsKICAJCWFkZENsYXNzKHRoaXMuX2NvbnRhaW5lciwgJ2xlYWZsZXQtY29udHJvbC1sYXllcnMtZXhwYW5kZWQnKTsKICAJCXRoaXMuX3NlY3Rpb24uc3R5bGUuaGVpZ2h0ID0gbnVsbDsKICAJCXZhciBhY2NlcHRhYmxlSGVpZ2h0ID0gdGhpcy5fbWFwLmdldFNpemUoKS55IC0gKHRoaXMuX2NvbnRhaW5lci5vZmZzZXRUb3AgKyA1MCk7CiAgCQlpZiAoYWNjZXB0YWJsZUhlaWdodCA8IHRoaXMuX3NlY3Rpb24uY2xpZW50SGVpZ2h0KSB7CiAgCQkJYWRkQ2xhc3ModGhpcy5fc2VjdGlvbiwgJ2xlYWZsZXQtY29udHJvbC1sYXllcnMtc2Nyb2xsYmFyJyk7CiAgCQkJdGhpcy5fc2VjdGlvbi5zdHlsZS5oZWlnaHQgPSBhY2NlcHRhYmxlSGVpZ2h0ICsgJ3B4JzsKICAJCX0gZWxzZSB7CiAgCQkJcmVtb3ZlQ2xhc3ModGhpcy5fc2VjdGlvbiwgJ2xlYWZsZXQtY29udHJvbC1sYXllcnMtc2Nyb2xsYmFyJyk7CiAgCQl9CiAgCQl0aGlzLl9jaGVja0Rpc2FibGVkTGF5ZXJzKCk7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgY29sbGFwc2UoKTogdGhpcwogIAkvLyBDb2xsYXBzZSB0aGUgY29udHJvbCBjb250YWluZXIgaWYgZXhwYW5kZWQuCiAgCWNvbGxhcHNlOiBmdW5jdGlvbiAoKSB7CiAgCQlyZW1vdmVDbGFzcyh0aGlzLl9jb250YWluZXIsICdsZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLWV4cGFuZGVkJyk7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9pbml0TGF5b3V0OiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgY2xhc3NOYW1lID0gJ2xlYWZsZXQtY29udHJvbC1sYXllcnMnLAogIAkJICAgIGNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lciA9IGNyZWF0ZSQxKCdkaXYnLCBjbGFzc05hbWUpLAogIAkJICAgIGNvbGxhcHNlZCA9IHRoaXMub3B0aW9ucy5jb2xsYXBzZWQ7CgogIAkJLy8gbWFrZXMgdGhpcyB3b3JrIG9uIElFIHRvdWNoIGRldmljZXMgYnkgc3RvcHBpbmcgaXQgZnJvbSBmaXJpbmcgYSBtb3VzZW91dCBldmVudCB3aGVuIHRoZSB0b3VjaCBpcyByZWxlYXNlZAogIAkJY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oYXNwb3B1cCcsIHRydWUpOwoKICAJCWRpc2FibGVDbGlja1Byb3BhZ2F0aW9uKGNvbnRhaW5lcik7CiAgCQlkaXNhYmxlU2Nyb2xsUHJvcGFnYXRpb24oY29udGFpbmVyKTsKCiAgCQl2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb24gPSBjcmVhdGUkMSgnc2VjdGlvbicsIGNsYXNzTmFtZSArICctbGlzdCcpOwoKICAJCWlmIChjb2xsYXBzZWQpIHsKICAJCQl0aGlzLl9tYXAub24oJ2NsaWNrJywgdGhpcy5jb2xsYXBzZSwgdGhpcyk7CgogIAkJCW9uKGNvbnRhaW5lciwgewogIAkJCQltb3VzZWVudGVyOiBmdW5jdGlvbiAoKSB7CiAgCQkJCQlvbihzZWN0aW9uLCAnY2xpY2snLCBwcmV2ZW50RGVmYXVsdCk7CiAgCQkJCQl0aGlzLmV4cGFuZCgpOwogIAkJCQkJc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgCQkJCQkJb2ZmKHNlY3Rpb24sICdjbGljaycsIHByZXZlbnREZWZhdWx0KTsKICAJCQkJCX0pOwogIAkJCQl9LAogIAkJCQltb3VzZWxlYXZlOiB0aGlzLmNvbGxhcHNlCiAgCQkJfSwgdGhpcyk7CiAgCQl9CgogIAkJdmFyIGxpbmsgPSB0aGlzLl9sYXllcnNMaW5rID0gY3JlYXRlJDEoJ2EnLCBjbGFzc05hbWUgKyAnLXRvZ2dsZScsIGNvbnRhaW5lcik7CiAgCQlsaW5rLmhyZWYgPSAnIyc7CiAgCQlsaW5rLnRpdGxlID0gJ0xheWVycyc7CiAgCQlsaW5rLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTsKCiAgCQlvbihsaW5rLCAnY2xpY2snLCBwcmV2ZW50RGVmYXVsdCk7IC8vIHByZXZlbnQgbGluayBmdW5jdGlvbgogIAkJb24obGluaywgJ2ZvY3VzJywgdGhpcy5leHBhbmQsIHRoaXMpOwoKICAJCWlmICghY29sbGFwc2VkKSB7CiAgCQkJdGhpcy5leHBhbmQoKTsKICAJCX0KCiAgCQl0aGlzLl9iYXNlTGF5ZXJzTGlzdCA9IGNyZWF0ZSQxKCdkaXYnLCBjbGFzc05hbWUgKyAnLWJhc2UnLCBzZWN0aW9uKTsKICAJCXRoaXMuX3NlcGFyYXRvciA9IGNyZWF0ZSQxKCdkaXYnLCBjbGFzc05hbWUgKyAnLXNlcGFyYXRvcicsIHNlY3Rpb24pOwogIAkJdGhpcy5fb3ZlcmxheXNMaXN0ID0gY3JlYXRlJDEoJ2RpdicsIGNsYXNzTmFtZSArICctb3ZlcmxheXMnLCBzZWN0aW9uKTsKCiAgCQljb250YWluZXIuYXBwZW5kQ2hpbGQoc2VjdGlvbik7CiAgCX0sCgogIAlfZ2V0TGF5ZXI6IGZ1bmN0aW9uIChpZCkgewogIAkJZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9sYXllcnMubGVuZ3RoOyBpKyspIHsKCiAgCQkJaWYgKHRoaXMuX2xheWVyc1tpXSAmJiBzdGFtcCh0aGlzLl9sYXllcnNbaV0ubGF5ZXIpID09PSBpZCkgewogIAkJCQlyZXR1cm4gdGhpcy5fbGF5ZXJzW2ldOwogIAkJCX0KICAJCX0KICAJfSwKCiAgCV9hZGRMYXllcjogZnVuY3Rpb24gKGxheWVyLCBuYW1lLCBvdmVybGF5KSB7CiAgCQlpZiAodGhpcy5fbWFwKSB7CiAgCQkJbGF5ZXIub24oJ2FkZCByZW1vdmUnLCB0aGlzLl9vbkxheWVyQ2hhbmdlLCB0aGlzKTsKICAJCX0KCiAgCQl0aGlzLl9sYXllcnMucHVzaCh7CiAgCQkJbGF5ZXI6IGxheWVyLAogIAkJCW5hbWU6IG5hbWUsCiAgCQkJb3ZlcmxheTogb3ZlcmxheQogIAkJfSk7CgogIAkJaWYgKHRoaXMub3B0aW9ucy5zb3J0TGF5ZXJzKSB7CiAgCQkJdGhpcy5fbGF5ZXJzLnNvcnQoYmluZChmdW5jdGlvbiAoYSwgYikgewogIAkJCQlyZXR1cm4gdGhpcy5vcHRpb25zLnNvcnRGdW5jdGlvbihhLmxheWVyLCBiLmxheWVyLCBhLm5hbWUsIGIubmFtZSk7CiAgCQkJfSwgdGhpcykpOwogIAkJfQoKICAJCWlmICh0aGlzLm9wdGlvbnMuYXV0b1pJbmRleCAmJiBsYXllci5zZXRaSW5kZXgpIHsKICAJCQl0aGlzLl9sYXN0WkluZGV4Kys7CiAgCQkJbGF5ZXIuc2V0WkluZGV4KHRoaXMuX2xhc3RaSW5kZXgpOwogIAkJfQoKICAJCXRoaXMuX2V4cGFuZElmTm90Q29sbGFwc2VkKCk7CiAgCX0sCgogIAlfdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX2NvbnRhaW5lcikgeyByZXR1cm4gdGhpczsgfQoKICAJCWVtcHR5KHRoaXMuX2Jhc2VMYXllcnNMaXN0KTsKICAJCWVtcHR5KHRoaXMuX292ZXJsYXlzTGlzdCk7CgogIAkJdGhpcy5fbGF5ZXJDb250cm9sSW5wdXRzID0gW107CiAgCQl2YXIgYmFzZUxheWVyc1ByZXNlbnQsIG92ZXJsYXlzUHJlc2VudCwgaSwgb2JqLCBiYXNlTGF5ZXJzQ291bnQgPSAwOwoKICAJCWZvciAoaSA9IDA7IGkgPCB0aGlzLl9sYXllcnMubGVuZ3RoOyBpKyspIHsKICAJCQlvYmogPSB0aGlzLl9sYXllcnNbaV07CiAgCQkJdGhpcy5fYWRkSXRlbShvYmopOwogIAkJCW92ZXJsYXlzUHJlc2VudCA9IG92ZXJsYXlzUHJlc2VudCB8fCBvYmoub3ZlcmxheTsKICAJCQliYXNlTGF5ZXJzUHJlc2VudCA9IGJhc2VMYXllcnNQcmVzZW50IHx8ICFvYmoub3ZlcmxheTsKICAJCQliYXNlTGF5ZXJzQ291bnQgKz0gIW9iai5vdmVybGF5ID8gMSA6IDA7CiAgCQl9CgogIAkJLy8gSGlkZSBiYXNlIGxheWVycyBzZWN0aW9uIGlmIHRoZXJlJ3Mgb25seSBvbmUgbGF5ZXIuCiAgCQlpZiAodGhpcy5vcHRpb25zLmhpZGVTaW5nbGVCYXNlKSB7CiAgCQkJYmFzZUxheWVyc1ByZXNlbnQgPSBiYXNlTGF5ZXJzUHJlc2VudCAmJiBiYXNlTGF5ZXJzQ291bnQgPiAxOwogIAkJCXRoaXMuX2Jhc2VMYXllcnNMaXN0LnN0eWxlLmRpc3BsYXkgPSBiYXNlTGF5ZXJzUHJlc2VudCA/ICcnIDogJ25vbmUnOwogIAkJfQoKICAJCXRoaXMuX3NlcGFyYXRvci5zdHlsZS5kaXNwbGF5ID0gb3ZlcmxheXNQcmVzZW50ICYmIGJhc2VMYXllcnNQcmVzZW50ID8gJycgOiAnbm9uZSc7CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAlfb25MYXllckNoYW5nZTogZnVuY3Rpb24gKGUpIHsKICAJCWlmICghdGhpcy5faGFuZGxpbmdDbGljaykgewogIAkJCXRoaXMuX3VwZGF0ZSgpOwogIAkJfQoKICAJCXZhciBvYmogPSB0aGlzLl9nZXRMYXllcihzdGFtcChlLnRhcmdldCkpOwoKICAJCS8vIEBuYW1lc3BhY2UgTWFwCiAgCQkvLyBAc2VjdGlvbiBMYXllciBldmVudHMKICAJCS8vIEBldmVudCBiYXNlbGF5ZXJjaGFuZ2U6IExheWVyc0NvbnRyb2xFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgYmFzZSBsYXllciBpcyBjaGFuZ2VkIHRocm91Z2ggdGhlIFtsYXllcnMgY29udHJvbF0oI2NvbnRyb2wtbGF5ZXJzKS4KICAJCS8vIEBldmVudCBvdmVybGF5YWRkOiBMYXllcnNDb250cm9sRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gYW4gb3ZlcmxheSBpcyBzZWxlY3RlZCB0aHJvdWdoIHRoZSBbbGF5ZXJzIGNvbnRyb2xdKCNjb250cm9sLWxheWVycykuCiAgCQkvLyBAZXZlbnQgb3ZlcmxheXJlbW92ZTogTGF5ZXJzQ29udHJvbEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIGFuIG92ZXJsYXkgaXMgZGVzZWxlY3RlZCB0aHJvdWdoIHRoZSBbbGF5ZXJzIGNvbnRyb2xdKCNjb250cm9sLWxheWVycykuCiAgCQkvLyBAbmFtZXNwYWNlIENvbnRyb2wuTGF5ZXJzCiAgCQl2YXIgdHlwZSA9IG9iai5vdmVybGF5ID8KICAJCQkoZS50eXBlID09PSAnYWRkJyA/ICdvdmVybGF5YWRkJyA6ICdvdmVybGF5cmVtb3ZlJykgOgogIAkJCShlLnR5cGUgPT09ICdhZGQnID8gJ2Jhc2VsYXllcmNoYW5nZScgOiBudWxsKTsKCiAgCQlpZiAodHlwZSkgewogIAkJCXRoaXMuX21hcC5maXJlKHR5cGUsIG9iaik7CiAgCQl9CiAgCX0sCgogIAkvLyBJRTcgYnVncyBvdXQgaWYgeW91IGNyZWF0ZSBhIHJhZGlvIGR5bmFtaWNhbGx5LCBzbyB5b3UgaGF2ZSB0byBkbyBpdCB0aGlzIGhhY2t5IHdheSAoc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTkwNzkpCiAgCV9jcmVhdGVSYWRpb0VsZW1lbnQ6IGZ1bmN0aW9uIChuYW1lLCBjaGVja2VkKSB7CgogIAkJdmFyIHJhZGlvSHRtbCA9ICc8aW5wdXQgdHlwZT0icmFkaW8iIGNsYXNzPSJsZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXNlbGVjdG9yIiBuYW1lPSInICsKICAJCQkJbmFtZSArICciJyArIChjaGVja2VkID8gJyBjaGVja2VkPSJjaGVja2VkIicgOiAnJykgKyAnLz4nOwoKICAJCXZhciByYWRpb0ZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgCQlyYWRpb0ZyYWdtZW50LmlubmVySFRNTCA9IHJhZGlvSHRtbDsKCiAgCQlyZXR1cm4gcmFkaW9GcmFnbWVudC5maXJzdENoaWxkOwogIAl9LAoKICAJX2FkZEl0ZW06IGZ1bmN0aW9uIChvYmopIHsKICAJCXZhciBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyksCiAgCQkgICAgY2hlY2tlZCA9IHRoaXMuX21hcC5oYXNMYXllcihvYmoubGF5ZXIpLAogIAkJICAgIGlucHV0OwoKICAJCWlmIChvYmoub3ZlcmxheSkgewogIAkJCWlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAJCQlpbnB1dC50eXBlID0gJ2NoZWNrYm94JzsKICAJCQlpbnB1dC5jbGFzc05hbWUgPSAnbGVhZmxldC1jb250cm9sLWxheWVycy1zZWxlY3Rvcic7CiAgCQkJaW5wdXQuZGVmYXVsdENoZWNrZWQgPSBjaGVja2VkOwogIAkJfSBlbHNlIHsKICAJCQlpbnB1dCA9IHRoaXMuX2NyZWF0ZVJhZGlvRWxlbWVudCgnbGVhZmxldC1iYXNlLWxheWVyc18nICsgc3RhbXAodGhpcyksIGNoZWNrZWQpOwogIAkJfQoKICAJCXRoaXMuX2xheWVyQ29udHJvbElucHV0cy5wdXNoKGlucHV0KTsKICAJCWlucHV0LmxheWVySWQgPSBzdGFtcChvYmoubGF5ZXIpOwoKICAJCW9uKGlucHV0LCAnY2xpY2snLCB0aGlzLl9vbklucHV0Q2xpY2ssIHRoaXMpOwoKICAJCXZhciBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIAkJbmFtZS5pbm5lckhUTUwgPSAnICcgKyBvYmoubmFtZTsKCiAgCQkvLyBIZWxwcyBmcm9tIHByZXZlbnRpbmcgbGF5ZXIgY29udHJvbCBmbGlja2VyIHdoZW4gY2hlY2tib3hlcyBhcmUgZGlzYWJsZWQKICAJCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFmbGV0L0xlYWZsZXQvaXNzdWVzLzI3NzEKICAJCXZhciBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CgogIAkJbGFiZWwuYXBwZW5kQ2hpbGQoaG9sZGVyKTsKICAJCWhvbGRlci5hcHBlbmRDaGlsZChpbnB1dCk7CiAgCQlob2xkZXIuYXBwZW5kQ2hpbGQobmFtZSk7CgogIAkJdmFyIGNvbnRhaW5lciA9IG9iai5vdmVybGF5ID8gdGhpcy5fb3ZlcmxheXNMaXN0IDogdGhpcy5fYmFzZUxheWVyc0xpc3Q7CiAgCQljb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpOwoKICAJCXRoaXMuX2NoZWNrRGlzYWJsZWRMYXllcnMoKTsKICAJCXJldHVybiBsYWJlbDsKICAJfSwKCiAgCV9vbklucHV0Q2xpY2s6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBpbnB1dHMgPSB0aGlzLl9sYXllckNvbnRyb2xJbnB1dHMsCiAgCQkgICAgaW5wdXQsIGxheWVyOwogIAkJdmFyIGFkZGVkTGF5ZXJzID0gW10sCiAgCQkgICAgcmVtb3ZlZExheWVycyA9IFtdOwoKICAJCXRoaXMuX2hhbmRsaW5nQ2xpY2sgPSB0cnVlOwoKICAJCWZvciAodmFyIGkgPSBpbnB1dHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAJCQlpbnB1dCA9IGlucHV0c1tpXTsKICAJCQlsYXllciA9IHRoaXMuX2dldExheWVyKGlucHV0LmxheWVySWQpLmxheWVyOwoKICAJCQlpZiAoaW5wdXQuY2hlY2tlZCkgewogIAkJCQlhZGRlZExheWVycy5wdXNoKGxheWVyKTsKICAJCQl9IGVsc2UgaWYgKCFpbnB1dC5jaGVja2VkKSB7CiAgCQkJCXJlbW92ZWRMYXllcnMucHVzaChsYXllcik7CiAgCQkJfQogIAkJfQoKICAJCS8vIEJ1Z2ZpeCBpc3N1ZSAyMzE4OiBTaG91bGQgcmVtb3ZlIGFsbCBvbGQgbGF5ZXJzIGJlZm9yZSByZWFkZGluZyBuZXcgb25lcwogIAkJZm9yIChpID0gMDsgaSA8IHJlbW92ZWRMYXllcnMubGVuZ3RoOyBpKyspIHsKICAJCQlpZiAodGhpcy5fbWFwLmhhc0xheWVyKHJlbW92ZWRMYXllcnNbaV0pKSB7CiAgCQkJCXRoaXMuX21hcC5yZW1vdmVMYXllcihyZW1vdmVkTGF5ZXJzW2ldKTsKICAJCQl9CiAgCQl9CiAgCQlmb3IgKGkgPSAwOyBpIDwgYWRkZWRMYXllcnMubGVuZ3RoOyBpKyspIHsKICAJCQlpZiAoIXRoaXMuX21hcC5oYXNMYXllcihhZGRlZExheWVyc1tpXSkpIHsKICAJCQkJdGhpcy5fbWFwLmFkZExheWVyKGFkZGVkTGF5ZXJzW2ldKTsKICAJCQl9CiAgCQl9CgogIAkJdGhpcy5faGFuZGxpbmdDbGljayA9IGZhbHNlOwoKICAJCXRoaXMuX3JlZm9jdXNPbk1hcCgpOwogIAl9LAoKICAJX2NoZWNrRGlzYWJsZWRMYXllcnM6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBpbnB1dHMgPSB0aGlzLl9sYXllckNvbnRyb2xJbnB1dHMsCiAgCQkgICAgaW5wdXQsCiAgCQkgICAgbGF5ZXIsCiAgCQkgICAgem9vbSA9IHRoaXMuX21hcC5nZXRab29tKCk7CgogIAkJZm9yICh2YXIgaSA9IGlucHV0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogIAkJCWlucHV0ID0gaW5wdXRzW2ldOwogIAkJCWxheWVyID0gdGhpcy5fZ2V0TGF5ZXIoaW5wdXQubGF5ZXJJZCkubGF5ZXI7CiAgCQkJaW5wdXQuZGlzYWJsZWQgPSAobGF5ZXIub3B0aW9ucy5taW5ab29tICE9PSB1bmRlZmluZWQgJiYgem9vbSA8IGxheWVyLm9wdGlvbnMubWluWm9vbSkgfHwKICAJCQkgICAgICAgICAgICAgICAgIChsYXllci5vcHRpb25zLm1heFpvb20gIT09IHVuZGVmaW5lZCAmJiB6b29tID4gbGF5ZXIub3B0aW9ucy5tYXhab29tKTsKCiAgCQl9CiAgCX0sCgogIAlfZXhwYW5kSWZOb3RDb2xsYXBzZWQ6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9tYXAgJiYgIXRoaXMub3B0aW9ucy5jb2xsYXBzZWQpIHsKICAJCQl0aGlzLmV4cGFuZCgpOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0KCiAgfSk7CgoKICAvLyBAZmFjdG9yeSBMLmNvbnRyb2wubGF5ZXJzKGJhc2VsYXllcnM/OiBPYmplY3QsIG92ZXJsYXlzPzogT2JqZWN0LCBvcHRpb25zPzogQ29udHJvbC5MYXllcnMgb3B0aW9ucykKICAvLyBDcmVhdGVzIGEgbGF5ZXJzIGNvbnRyb2wgd2l0aCB0aGUgZ2l2ZW4gbGF5ZXJzLiBCYXNlIGxheWVycyB3aWxsIGJlIHN3aXRjaGVkIHdpdGggcmFkaW8gYnV0dG9ucywgd2hpbGUgb3ZlcmxheXMgd2lsbCBiZSBzd2l0Y2hlZCB3aXRoIGNoZWNrYm94ZXMuIE5vdGUgdGhhdCBhbGwgYmFzZSBsYXllcnMgc2hvdWxkIGJlIHBhc3NlZCBpbiB0aGUgYmFzZSBsYXllcnMgb2JqZWN0LCBidXQgb25seSBvbmUgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBtYXAgZHVyaW5nIG1hcCBpbnN0YW50aWF0aW9uLgogIHZhciBsYXllcnMgPSBmdW5jdGlvbiAoYmFzZUxheWVycywgb3ZlcmxheXMsIG9wdGlvbnMpIHsKICAJcmV0dXJuIG5ldyBMYXllcnMoYmFzZUxheWVycywgb3ZlcmxheXMsIG9wdGlvbnMpOwogIH07CgogIC8qCiAgICogQGNsYXNzIENvbnRyb2wuWm9vbQogICAqIEBha2EgTC5Db250cm9sLlpvb20KICAgKiBAaW5oZXJpdHMgQ29udHJvbAogICAqCiAgICogQSBiYXNpYyB6b29tIGNvbnRyb2wgd2l0aCB0d28gYnV0dG9ucyAoem9vbSBpbiBhbmQgem9vbSBvdXQpLiBJdCBpcyBwdXQgb24gdGhlIG1hcCBieSBkZWZhdWx0IHVubGVzcyB5b3Ugc2V0IGl0cyBbYHpvb21Db250cm9sYCBvcHRpb25dKCNtYXAtem9vbWNvbnRyb2wpIHRvIGBmYWxzZWAuIEV4dGVuZHMgYENvbnRyb2xgLgogICAqLwoKICB2YXIgWm9vbSA9IENvbnRyb2wuZXh0ZW5kKHsKICAJLy8gQHNlY3Rpb24KICAJLy8gQGFrYSBDb250cm9sLlpvb20gb3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQlwb3NpdGlvbjogJ3RvcGxlZnQnLAoKICAJCS8vIEBvcHRpb24gem9vbUluVGV4dDogU3RyaW5nID0gJzxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4rPC9zcGFuPicKICAJCS8vIFRoZSB0ZXh0IHNldCBvbiB0aGUgJ3pvb20gaW4nIGJ1dHRvbi4KICAJCXpvb21JblRleHQ6ICc8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+Kzwvc3Bhbj4nLAoKICAJCS8vIEBvcHRpb24gem9vbUluVGl0bGU6IFN0cmluZyA9ICdab29tIGluJwogIAkJLy8gVGhlIHRpdGxlIHNldCBvbiB0aGUgJ3pvb20gaW4nIGJ1dHRvbi4KICAJCXpvb21JblRpdGxlOiAnWm9vbSBpbicsCgogIAkJLy8gQG9wdGlvbiB6b29tT3V0VGV4dDogU3RyaW5nID0gJzxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mI3gyMjEyOzwvc3Bhbj4nCiAgCQkvLyBUaGUgdGV4dCBzZXQgb24gdGhlICd6b29tIG91dCcgYnV0dG9uLgogIAkJem9vbU91dFRleHQ6ICc8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JiN4MjIxMjs8L3NwYW4+JywKCiAgCQkvLyBAb3B0aW9uIHpvb21PdXRUaXRsZTogU3RyaW5nID0gJ1pvb20gb3V0JwogIAkJLy8gVGhlIHRpdGxlIHNldCBvbiB0aGUgJ3pvb20gb3V0JyBidXR0b24uCiAgCQl6b29tT3V0VGl0bGU6ICdab29tIG91dCcKICAJfSwKCiAgCW9uQWRkOiBmdW5jdGlvbiAobWFwKSB7CiAgCQl2YXIgem9vbU5hbWUgPSAnbGVhZmxldC1jb250cm9sLXpvb20nLAogIAkJICAgIGNvbnRhaW5lciA9IGNyZWF0ZSQxKCdkaXYnLCB6b29tTmFtZSArICcgbGVhZmxldC1iYXInKSwKICAJCSAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOwoKICAJCXRoaXMuX3pvb21JbkJ1dHRvbiAgPSB0aGlzLl9jcmVhdGVCdXR0b24ob3B0aW9ucy56b29tSW5UZXh0LCBvcHRpb25zLnpvb21JblRpdGxlLAogIAkJICAgICAgICB6b29tTmFtZSArICctaW4nLCAgY29udGFpbmVyLCB0aGlzLl96b29tSW4pOwogIAkJdGhpcy5fem9vbU91dEJ1dHRvbiA9IHRoaXMuX2NyZWF0ZUJ1dHRvbihvcHRpb25zLnpvb21PdXRUZXh0LCBvcHRpb25zLnpvb21PdXRUaXRsZSwKICAJCSAgICAgICAgem9vbU5hbWUgKyAnLW91dCcsIGNvbnRhaW5lciwgdGhpcy5fem9vbU91dCk7CgogIAkJdGhpcy5fdXBkYXRlRGlzYWJsZWQoKTsKICAJCW1hcC5vbignem9vbWVuZCB6b29tbGV2ZWxzY2hhbmdlJywgdGhpcy5fdXBkYXRlRGlzYWJsZWQsIHRoaXMpOwoKICAJCXJldHVybiBjb250YWluZXI7CiAgCX0sCgogIAlvblJlbW92ZTogZnVuY3Rpb24gKG1hcCkgewogIAkJbWFwLm9mZignem9vbWVuZCB6b29tbGV2ZWxzY2hhbmdlJywgdGhpcy5fdXBkYXRlRGlzYWJsZWQsIHRoaXMpOwogIAl9LAoKICAJZGlzYWJsZTogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fZGlzYWJsZWQgPSB0cnVlOwogIAkJdGhpcy5fdXBkYXRlRGlzYWJsZWQoKTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJZW5hYmxlOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLl9kaXNhYmxlZCA9IGZhbHNlOwogIAkJdGhpcy5fdXBkYXRlRGlzYWJsZWQoKTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJX3pvb21JbjogZnVuY3Rpb24gKGUpIHsKICAJCWlmICghdGhpcy5fZGlzYWJsZWQgJiYgdGhpcy5fbWFwLl96b29tIDwgdGhpcy5fbWFwLmdldE1heFpvb20oKSkgewogIAkJCXRoaXMuX21hcC56b29tSW4odGhpcy5fbWFwLm9wdGlvbnMuem9vbURlbHRhICogKGUuc2hpZnRLZXkgPyAzIDogMSkpOwogIAkJfQogIAl9LAoKICAJX3pvb21PdXQ6IGZ1bmN0aW9uIChlKSB7CiAgCQlpZiAoIXRoaXMuX2Rpc2FibGVkICYmIHRoaXMuX21hcC5fem9vbSA+IHRoaXMuX21hcC5nZXRNaW5ab29tKCkpIHsKICAJCQl0aGlzLl9tYXAuem9vbU91dCh0aGlzLl9tYXAub3B0aW9ucy56b29tRGVsdGEgKiAoZS5zaGlmdEtleSA/IDMgOiAxKSk7CiAgCQl9CiAgCX0sCgogIAlfY3JlYXRlQnV0dG9uOiBmdW5jdGlvbiAoaHRtbCwgdGl0bGUsIGNsYXNzTmFtZSwgY29udGFpbmVyLCBmbikgewogIAkJdmFyIGxpbmsgPSBjcmVhdGUkMSgnYScsIGNsYXNzTmFtZSwgY29udGFpbmVyKTsKICAJCWxpbmsuaW5uZXJIVE1MID0gaHRtbDsKICAJCWxpbmsuaHJlZiA9ICcjJzsKICAJCWxpbmsudGl0bGUgPSB0aXRsZTsKCiAgCQkvKgogIAkJICogV2lsbCBmb3JjZSBzY3JlZW4gcmVhZGVycyBsaWtlIFZvaWNlT3ZlciB0byByZWFkIHRoaXMgYXMgIlpvb20gaW4gLSBidXR0b24iCiAgCQkgKi8KICAJCWxpbmsuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpOwogIAkJbGluay5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0aXRsZSk7CgogIAkJZGlzYWJsZUNsaWNrUHJvcGFnYXRpb24obGluayk7CiAgCQlvbihsaW5rLCAnY2xpY2snLCBzdG9wKTsKICAJCW9uKGxpbmssICdjbGljaycsIGZuLCB0aGlzKTsKICAJCW9uKGxpbmssICdjbGljaycsIHRoaXMuX3JlZm9jdXNPbk1hcCwgdGhpcyk7CgogIAkJcmV0dXJuIGxpbms7CiAgCX0sCgogIAlfdXBkYXRlRGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBtYXAgPSB0aGlzLl9tYXAsCiAgCQkgICAgY2xhc3NOYW1lID0gJ2xlYWZsZXQtZGlzYWJsZWQnOwoKICAJCXJlbW92ZUNsYXNzKHRoaXMuX3pvb21JbkJ1dHRvbiwgY2xhc3NOYW1lKTsKICAJCXJlbW92ZUNsYXNzKHRoaXMuX3pvb21PdXRCdXR0b24sIGNsYXNzTmFtZSk7CiAgCQl0aGlzLl96b29tSW5CdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7CiAgCQl0aGlzLl96b29tT3V0QnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpOwoKICAJCWlmICh0aGlzLl9kaXNhYmxlZCB8fCBtYXAuX3pvb20gPT09IG1hcC5nZXRNaW5ab29tKCkpIHsKICAJCQlhZGRDbGFzcyh0aGlzLl96b29tT3V0QnV0dG9uLCBjbGFzc05hbWUpOwogIAkJCXRoaXMuX3pvb21PdXRCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTsKICAJCX0KICAJCWlmICh0aGlzLl9kaXNhYmxlZCB8fCBtYXAuX3pvb20gPT09IG1hcC5nZXRNYXhab29tKCkpIHsKICAJCQlhZGRDbGFzcyh0aGlzLl96b29tSW5CdXR0b24sIGNsYXNzTmFtZSk7CiAgCQkJdGhpcy5fem9vbUluQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7CiAgCQl9CiAgCX0KICB9KTsKCiAgLy8gQG5hbWVzcGFjZSBNYXAKICAvLyBAc2VjdGlvbiBDb250cm9sIG9wdGlvbnMKICAvLyBAb3B0aW9uIHpvb21Db250cm9sOiBCb29sZWFuID0gdHJ1ZQogIC8vIFdoZXRoZXIgYSBbem9vbSBjb250cm9sXSgjY29udHJvbC16b29tKSBpcyBhZGRlZCB0byB0aGUgbWFwIGJ5IGRlZmF1bHQuCiAgTWFwLm1lcmdlT3B0aW9ucyh7CiAgCXpvb21Db250cm9sOiB0cnVlCiAgfSk7CgogIE1hcC5hZGRJbml0SG9vayhmdW5jdGlvbiAoKSB7CiAgCWlmICh0aGlzLm9wdGlvbnMuem9vbUNvbnRyb2wpIHsKICAJCS8vIEBzZWN0aW9uIENvbnRyb2xzCiAgCQkvLyBAcHJvcGVydHkgem9vbUNvbnRyb2w6IENvbnRyb2wuWm9vbQogIAkJLy8gVGhlIGRlZmF1bHQgem9vbSBjb250cm9sIChvbmx5IGF2YWlsYWJsZSBpZiB0aGUKICAJCS8vIFtgem9vbUNvbnRyb2xgIG9wdGlvbl0oI21hcC16b29tY29udHJvbCkgd2FzIGB0cnVlYCB3aGVuIGNyZWF0aW5nIHRoZSBtYXApLgogIAkJdGhpcy56b29tQ29udHJvbCA9IG5ldyBab29tKCk7CiAgCQl0aGlzLmFkZENvbnRyb2wodGhpcy56b29tQ29udHJvbCk7CiAgCX0KICB9KTsKCiAgLy8gQG5hbWVzcGFjZSBDb250cm9sLlpvb20KICAvLyBAZmFjdG9yeSBMLmNvbnRyb2wuem9vbShvcHRpb25zOiBDb250cm9sLlpvb20gb3B0aW9ucykKICAvLyBDcmVhdGVzIGEgem9vbSBjb250cm9sCiAgdmFyIHpvb20gPSBmdW5jdGlvbiAob3B0aW9ucykgewogIAlyZXR1cm4gbmV3IFpvb20ob3B0aW9ucyk7CiAgfTsKCiAgLyoKICAgKiBAY2xhc3MgQ29udHJvbC5TY2FsZQogICAqIEBha2EgTC5Db250cm9sLlNjYWxlCiAgICogQGluaGVyaXRzIENvbnRyb2wKICAgKgogICAqIEEgc2ltcGxlIHNjYWxlIGNvbnRyb2wgdGhhdCBzaG93cyB0aGUgc2NhbGUgb2YgdGhlIGN1cnJlbnQgY2VudGVyIG9mIHNjcmVlbiBpbiBtZXRyaWMgKG0va20pIGFuZCBpbXBlcmlhbCAobWkvZnQpIHN5c3RlbXMuIEV4dGVuZHMgYENvbnRyb2xgLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogTC5jb250cm9sLnNjYWxlKCkuYWRkVG8obWFwKTsKICAgKiBgYGAKICAgKi8KCiAgdmFyIFNjYWxlID0gQ29udHJvbC5leHRlbmQoewogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIENvbnRyb2wuU2NhbGUgb3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQlwb3NpdGlvbjogJ2JvdHRvbWxlZnQnLAoKICAJCS8vIEBvcHRpb24gbWF4V2lkdGg6IE51bWJlciA9IDEwMAogIAkJLy8gTWF4aW11bSB3aWR0aCBvZiB0aGUgY29udHJvbCBpbiBwaXhlbHMuIFRoZSB3aWR0aCBpcyBzZXQgZHluYW1pY2FsbHkgdG8gc2hvdyByb3VuZCB2YWx1ZXMgKGUuZy4gMTAwLCAyMDAsIDUwMCkuCiAgCQltYXhXaWR0aDogMTAwLAoKICAJCS8vIEBvcHRpb24gbWV0cmljOiBCb29sZWFuID0gVHJ1ZQogIAkJLy8gV2hldGhlciB0byBzaG93IHRoZSBtZXRyaWMgc2NhbGUgbGluZSAobS9rbSkuCiAgCQltZXRyaWM6IHRydWUsCgogIAkJLy8gQG9wdGlvbiBpbXBlcmlhbDogQm9vbGVhbiA9IFRydWUKICAJCS8vIFdoZXRoZXIgdG8gc2hvdyB0aGUgaW1wZXJpYWwgc2NhbGUgbGluZSAobWkvZnQpLgogIAkJaW1wZXJpYWw6IHRydWUKCiAgCQkvLyBAb3B0aW9uIHVwZGF0ZVdoZW5JZGxlOiBCb29sZWFuID0gZmFsc2UKICAJCS8vIElmIGB0cnVlYCwgdGhlIGNvbnRyb2wgaXMgdXBkYXRlZCBvbiBbYG1vdmVlbmRgXSgjbWFwLW1vdmVlbmQpLCBvdGhlcndpc2UgaXQncyBhbHdheXMgdXAtdG8tZGF0ZSAodXBkYXRlZCBvbiBbYG1vdmVgXSgjbWFwLW1vdmUpKS4KICAJfSwKCiAgCW9uQWRkOiBmdW5jdGlvbiAobWFwKSB7CiAgCQl2YXIgY2xhc3NOYW1lID0gJ2xlYWZsZXQtY29udHJvbC1zY2FsZScsCiAgCQkgICAgY29udGFpbmVyID0gY3JlYXRlJDEoJ2RpdicsIGNsYXNzTmFtZSksCiAgCQkgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCiAgCQl0aGlzLl9hZGRTY2FsZXMob3B0aW9ucywgY2xhc3NOYW1lICsgJy1saW5lJywgY29udGFpbmVyKTsKCiAgCQltYXAub24ob3B0aW9ucy51cGRhdGVXaGVuSWRsZSA/ICdtb3ZlZW5kJyA6ICdtb3ZlJywgdGhpcy5fdXBkYXRlLCB0aGlzKTsKICAJCW1hcC53aGVuUmVhZHkodGhpcy5fdXBkYXRlLCB0aGlzKTsKCiAgCQlyZXR1cm4gY29udGFpbmVyOwogIAl9LAoKICAJb25SZW1vdmU6IGZ1bmN0aW9uIChtYXApIHsKICAJCW1hcC5vZmYodGhpcy5vcHRpb25zLnVwZGF0ZVdoZW5JZGxlID8gJ21vdmVlbmQnIDogJ21vdmUnLCB0aGlzLl91cGRhdGUsIHRoaXMpOwogIAl9LAoKICAJX2FkZFNjYWxlczogZnVuY3Rpb24gKG9wdGlvbnMsIGNsYXNzTmFtZSwgY29udGFpbmVyKSB7CiAgCQlpZiAob3B0aW9ucy5tZXRyaWMpIHsKICAJCQl0aGlzLl9tU2NhbGUgPSBjcmVhdGUkMSgnZGl2JywgY2xhc3NOYW1lLCBjb250YWluZXIpOwogIAkJfQogIAkJaWYgKG9wdGlvbnMuaW1wZXJpYWwpIHsKICAJCQl0aGlzLl9pU2NhbGUgPSBjcmVhdGUkMSgnZGl2JywgY2xhc3NOYW1lLCBjb250YWluZXIpOwogIAkJfQogIAl9LAoKICAJX3VwZGF0ZTogZnVuY3Rpb24gKCkgewogIAkJdmFyIG1hcCA9IHRoaXMuX21hcCwKICAJCSAgICB5ID0gbWFwLmdldFNpemUoKS55IC8gMjsKCiAgCQl2YXIgbWF4TWV0ZXJzID0gbWFwLmRpc3RhbmNlKAogIAkJCW1hcC5jb250YWluZXJQb2ludFRvTGF0TG5nKFswLCB5XSksCiAgCQkJbWFwLmNvbnRhaW5lclBvaW50VG9MYXRMbmcoW3RoaXMub3B0aW9ucy5tYXhXaWR0aCwgeV0pKTsKCiAgCQl0aGlzLl91cGRhdGVTY2FsZXMobWF4TWV0ZXJzKTsKICAJfSwKCiAgCV91cGRhdGVTY2FsZXM6IGZ1bmN0aW9uIChtYXhNZXRlcnMpIHsKICAJCWlmICh0aGlzLm9wdGlvbnMubWV0cmljICYmIG1heE1ldGVycykgewogIAkJCXRoaXMuX3VwZGF0ZU1ldHJpYyhtYXhNZXRlcnMpOwogIAkJfQogIAkJaWYgKHRoaXMub3B0aW9ucy5pbXBlcmlhbCAmJiBtYXhNZXRlcnMpIHsKICAJCQl0aGlzLl91cGRhdGVJbXBlcmlhbChtYXhNZXRlcnMpOwogIAkJfQogIAl9LAoKICAJX3VwZGF0ZU1ldHJpYzogZnVuY3Rpb24gKG1heE1ldGVycykgewogIAkJdmFyIG1ldGVycyA9IHRoaXMuX2dldFJvdW5kTnVtKG1heE1ldGVycyksCiAgCQkgICAgbGFiZWwgPSBtZXRlcnMgPCAxMDAwID8gbWV0ZXJzICsgJyBtJyA6IChtZXRlcnMgLyAxMDAwKSArICcga20nOwoKICAJCXRoaXMuX3VwZGF0ZVNjYWxlKHRoaXMuX21TY2FsZSwgbGFiZWwsIG1ldGVycyAvIG1heE1ldGVycyk7CiAgCX0sCgogIAlfdXBkYXRlSW1wZXJpYWw6IGZ1bmN0aW9uIChtYXhNZXRlcnMpIHsKICAJCXZhciBtYXhGZWV0ID0gbWF4TWV0ZXJzICogMy4yODA4Mzk5LAogIAkJICAgIG1heE1pbGVzLCBtaWxlcywgZmVldDsKCiAgCQlpZiAobWF4RmVldCA+IDUyODApIHsKICAJCQltYXhNaWxlcyA9IG1heEZlZXQgLyA1MjgwOwogIAkJCW1pbGVzID0gdGhpcy5fZ2V0Um91bmROdW0obWF4TWlsZXMpOwogIAkJCXRoaXMuX3VwZGF0ZVNjYWxlKHRoaXMuX2lTY2FsZSwgbWlsZXMgKyAnIG1pJywgbWlsZXMgLyBtYXhNaWxlcyk7CgogIAkJfSBlbHNlIHsKICAJCQlmZWV0ID0gdGhpcy5fZ2V0Um91bmROdW0obWF4RmVldCk7CiAgCQkJdGhpcy5fdXBkYXRlU2NhbGUodGhpcy5faVNjYWxlLCBmZWV0ICsgJyBmdCcsIGZlZXQgLyBtYXhGZWV0KTsKICAJCX0KICAJfSwKCiAgCV91cGRhdGVTY2FsZTogZnVuY3Rpb24gKHNjYWxlLCB0ZXh0LCByYXRpbykgewogIAkJc2NhbGUuc3R5bGUud2lkdGggPSBNYXRoLnJvdW5kKHRoaXMub3B0aW9ucy5tYXhXaWR0aCAqIHJhdGlvKSArICdweCc7CiAgCQlzY2FsZS5pbm5lckhUTUwgPSB0ZXh0OwogIAl9LAoKICAJX2dldFJvdW5kTnVtOiBmdW5jdGlvbiAobnVtKSB7CiAgCQl2YXIgcG93MTAgPSBNYXRoLnBvdygxMCwgKE1hdGguZmxvb3IobnVtKSArICcnKS5sZW5ndGggLSAxKSwKICAJCSAgICBkID0gbnVtIC8gcG93MTA7CgogIAkJZCA9IGQgPj0gMTAgPyAxMCA6CiAgCQkgICAgZCA+PSA1ID8gNSA6CiAgCQkgICAgZCA+PSAzID8gMyA6CiAgCQkgICAgZCA+PSAyID8gMiA6IDE7CgogIAkJcmV0dXJuIHBvdzEwICogZDsKICAJfQogIH0pOwoKCiAgLy8gQGZhY3RvcnkgTC5jb250cm9sLnNjYWxlKG9wdGlvbnM/OiBDb250cm9sLlNjYWxlIG9wdGlvbnMpCiAgLy8gQ3JlYXRlcyBhbiBzY2FsZSBjb250cm9sIHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuCiAgdmFyIHNjYWxlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAJcmV0dXJuIG5ldyBTY2FsZShvcHRpb25zKTsKICB9OwoKICB2YXIgdWtyYWluaWFuRmxhZyA9ICc8c3ZnIGFyaWEtaGlkZGVuPSJ0cnVlIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxMiIgaGVpZ2h0PSI4Ij48cGF0aCBmaWxsPSIjNEM3QkUxIiBkPSJNMCAwaDEydjRIMHoiLz48cGF0aCBmaWxsPSIjRkZENTAwIiBkPSJNMCA0aDEydjNIMHoiLz48cGF0aCBmaWxsPSIjRTBCQzAwIiBkPSJNMCA3aDEydjFIMHoiLz48L3N2Zz4nOwoKCiAgLyoKICAgKiBAY2xhc3MgQ29udHJvbC5BdHRyaWJ1dGlvbgogICAqIEBha2EgTC5Db250cm9sLkF0dHJpYnV0aW9uCiAgICogQGluaGVyaXRzIENvbnRyb2wKICAgKgogICAqIFRoZSBhdHRyaWJ1dGlvbiBjb250cm9sIGFsbG93cyB5b3UgdG8gZGlzcGxheSBhdHRyaWJ1dGlvbiBkYXRhIGluIGEgc21hbGwgdGV4dCBib3ggb24gYSBtYXAuIEl0IGlzIHB1dCBvbiB0aGUgbWFwIGJ5IGRlZmF1bHQgdW5sZXNzIHlvdSBzZXQgaXRzIFtgYXR0cmlidXRpb25Db250cm9sYCBvcHRpb25dKCNtYXAtYXR0cmlidXRpb25jb250cm9sKSB0byBgZmFsc2VgLCBhbmQgaXQgZmV0Y2hlcyBhdHRyaWJ1dGlvbiB0ZXh0cyBmcm9tIGxheWVycyB3aXRoIHRoZSBbYGdldEF0dHJpYnV0aW9uYCBtZXRob2RdKCNsYXllci1nZXRhdHRyaWJ1dGlvbikgYXV0b21hdGljYWxseS4gRXh0ZW5kcyBDb250cm9sLgogICAqLwoKICB2YXIgQXR0cmlidXRpb24gPSBDb250cm9sLmV4dGVuZCh7CiAgCS8vIEBzZWN0aW9uCiAgCS8vIEBha2EgQ29udHJvbC5BdHRyaWJ1dGlvbiBvcHRpb25zCiAgCW9wdGlvbnM6IHsKICAJCXBvc2l0aW9uOiAnYm90dG9tcmlnaHQnLAoKICAJCS8vIEBvcHRpb24gcHJlZml4OiBTdHJpbmd8ZmFsc2UgPSAnTGVhZmxldCcKICAJCS8vIFRoZSBIVE1MIHRleHQgc2hvd24gYmVmb3JlIHRoZSBhdHRyaWJ1dGlvbnMuIFBhc3MgYGZhbHNlYCB0byBkaXNhYmxlLgogIAkJcHJlZml4OiAnPGEgaHJlZj0iaHR0cHM6Ly9sZWFmbGV0anMuY29tIiB0aXRsZT0iQSBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIGludGVyYWN0aXZlIG1hcHMiPicgKyAoQnJvd3Nlci5pbmxpbmVTdmcgPyB1a3JhaW5pYW5GbGFnICsgJyAnIDogJycpICsgJ0xlYWZsZXQ8L2E+JwogIAl9LAoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAJCXNldE9wdGlvbnModGhpcywgb3B0aW9ucyk7CgogIAkJdGhpcy5fYXR0cmlidXRpb25zID0ge307CiAgCX0sCgogIAlvbkFkZDogZnVuY3Rpb24gKG1hcCkgewogIAkJbWFwLmF0dHJpYnV0aW9uQ29udHJvbCA9IHRoaXM7CiAgCQl0aGlzLl9jb250YWluZXIgPSBjcmVhdGUkMSgnZGl2JywgJ2xlYWZsZXQtY29udHJvbC1hdHRyaWJ1dGlvbicpOwogIAkJZGlzYWJsZUNsaWNrUHJvcGFnYXRpb24odGhpcy5fY29udGFpbmVyKTsKCiAgCQkvLyBUT0RPIHVnbHksIHJlZmFjdG9yCiAgCQlmb3IgKHZhciBpIGluIG1hcC5fbGF5ZXJzKSB7CiAgCQkJaWYgKG1hcC5fbGF5ZXJzW2ldLmdldEF0dHJpYnV0aW9uKSB7CiAgCQkJCXRoaXMuYWRkQXR0cmlidXRpb24obWFwLl9sYXllcnNbaV0uZ2V0QXR0cmlidXRpb24oKSk7CiAgCQkJfQogIAkJfQoKICAJCXRoaXMuX3VwZGF0ZSgpOwoKICAJCW1hcC5vbignbGF5ZXJhZGQnLCB0aGlzLl9hZGRBdHRyaWJ1dGlvbiwgdGhpcyk7CgogIAkJcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjsKICAJfSwKCiAgCW9uUmVtb3ZlOiBmdW5jdGlvbiAobWFwKSB7CiAgCQltYXAub2ZmKCdsYXllcmFkZCcsIHRoaXMuX2FkZEF0dHJpYnV0aW9uLCB0aGlzKTsKICAJfSwKCiAgCV9hZGRBdHRyaWJ1dGlvbjogZnVuY3Rpb24gKGV2KSB7CiAgCQlpZiAoZXYubGF5ZXIuZ2V0QXR0cmlidXRpb24pIHsKICAJCQl0aGlzLmFkZEF0dHJpYnV0aW9uKGV2LmxheWVyLmdldEF0dHJpYnV0aW9uKCkpOwogIAkJCWV2LmxheWVyLm9uY2UoJ3JlbW92ZScsIGZ1bmN0aW9uICgpIHsKICAJCQkJdGhpcy5yZW1vdmVBdHRyaWJ1dGlvbihldi5sYXllci5nZXRBdHRyaWJ1dGlvbigpKTsKICAJCQl9LCB0aGlzKTsKICAJCX0KICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0UHJlZml4KHByZWZpeDogU3RyaW5nfGZhbHNlKTogdGhpcwogIAkvLyBUaGUgSFRNTCB0ZXh0IHNob3duIGJlZm9yZSB0aGUgYXR0cmlidXRpb25zLiBQYXNzIGBmYWxzZWAgdG8gZGlzYWJsZS4KICAJc2V0UHJlZml4OiBmdW5jdGlvbiAocHJlZml4KSB7CiAgCQl0aGlzLm9wdGlvbnMucHJlZml4ID0gcHJlZml4OwogIAkJdGhpcy5fdXBkYXRlKCk7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgYWRkQXR0cmlidXRpb24odGV4dDogU3RyaW5nKTogdGhpcwogIAkvLyBBZGRzIGFuIGF0dHJpYnV0aW9uIHRleHQgKGUuZy4gYCdWZWN0b3IgZGF0YSAmY29weTsgTWFwYm94J2ApLgogIAlhZGRBdHRyaWJ1dGlvbjogZnVuY3Rpb24gKHRleHQpIHsKICAJCWlmICghdGV4dCkgeyByZXR1cm4gdGhpczsgfQoKICAJCWlmICghdGhpcy5fYXR0cmlidXRpb25zW3RleHRdKSB7CiAgCQkJdGhpcy5fYXR0cmlidXRpb25zW3RleHRdID0gMDsKICAJCX0KICAJCXRoaXMuX2F0dHJpYnV0aW9uc1t0ZXh0XSsrOwoKICAJCXRoaXMuX3VwZGF0ZSgpOwoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCByZW1vdmVBdHRyaWJ1dGlvbih0ZXh0OiBTdHJpbmcpOiB0aGlzCiAgCS8vIFJlbW92ZXMgYW4gYXR0cmlidXRpb24gdGV4dC4KICAJcmVtb3ZlQXR0cmlidXRpb246IGZ1bmN0aW9uICh0ZXh0KSB7CiAgCQlpZiAoIXRleHQpIHsgcmV0dXJuIHRoaXM7IH0KCiAgCQlpZiAodGhpcy5fYXR0cmlidXRpb25zW3RleHRdKSB7CiAgCQkJdGhpcy5fYXR0cmlidXRpb25zW3RleHRdLS07CiAgCQkJdGhpcy5fdXBkYXRlKCk7CiAgCQl9CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAlfdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX21hcCkgeyByZXR1cm47IH0KCiAgCQl2YXIgYXR0cmlicyA9IFtdOwoKICAJCWZvciAodmFyIGkgaW4gdGhpcy5fYXR0cmlidXRpb25zKSB7CiAgCQkJaWYgKHRoaXMuX2F0dHJpYnV0aW9uc1tpXSkgewogIAkJCQlhdHRyaWJzLnB1c2goaSk7CiAgCQkJfQogIAkJfQoKICAJCXZhciBwcmVmaXhBbmRBdHRyaWJzID0gW107CgogIAkJaWYgKHRoaXMub3B0aW9ucy5wcmVmaXgpIHsKICAJCQlwcmVmaXhBbmRBdHRyaWJzLnB1c2godGhpcy5vcHRpb25zLnByZWZpeCk7CiAgCQl9CiAgCQlpZiAoYXR0cmlicy5sZW5ndGgpIHsKICAJCQlwcmVmaXhBbmRBdHRyaWJzLnB1c2goYXR0cmlicy5qb2luKCcsICcpKTsKICAJCX0KCiAgCQl0aGlzLl9jb250YWluZXIuaW5uZXJIVE1MID0gcHJlZml4QW5kQXR0cmlicy5qb2luKCcgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPnw8L3NwYW4+ICcpOwogIAl9CiAgfSk7CgogIC8vIEBuYW1lc3BhY2UgTWFwCiAgLy8gQHNlY3Rpb24gQ29udHJvbCBvcHRpb25zCiAgLy8gQG9wdGlvbiBhdHRyaWJ1dGlvbkNvbnRyb2w6IEJvb2xlYW4gPSB0cnVlCiAgLy8gV2hldGhlciBhIFthdHRyaWJ1dGlvbiBjb250cm9sXSgjY29udHJvbC1hdHRyaWJ1dGlvbikgaXMgYWRkZWQgdG8gdGhlIG1hcCBieSBkZWZhdWx0LgogIE1hcC5tZXJnZU9wdGlvbnMoewogIAlhdHRyaWJ1dGlvbkNvbnRyb2w6IHRydWUKICB9KTsKCiAgTWFwLmFkZEluaXRIb29rKGZ1bmN0aW9uICgpIHsKICAJaWYgKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGlvbkNvbnRyb2wpIHsKICAJCW5ldyBBdHRyaWJ1dGlvbigpLmFkZFRvKHRoaXMpOwogIAl9CiAgfSk7CgogIC8vIEBuYW1lc3BhY2UgQ29udHJvbC5BdHRyaWJ1dGlvbgogIC8vIEBmYWN0b3J5IEwuY29udHJvbC5hdHRyaWJ1dGlvbihvcHRpb25zOiBDb250cm9sLkF0dHJpYnV0aW9uIG9wdGlvbnMpCiAgLy8gQ3JlYXRlcyBhbiBhdHRyaWJ1dGlvbiBjb250cm9sLgogIHZhciBhdHRyaWJ1dGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgQXR0cmlidXRpb24ob3B0aW9ucyk7CiAgfTsKCiAgQ29udHJvbC5MYXllcnMgPSBMYXllcnM7CiAgQ29udHJvbC5ab29tID0gWm9vbTsKICBDb250cm9sLlNjYWxlID0gU2NhbGU7CiAgQ29udHJvbC5BdHRyaWJ1dGlvbiA9IEF0dHJpYnV0aW9uOwoKICBjb250cm9sLmxheWVycyA9IGxheWVyczsKICBjb250cm9sLnpvb20gPSB6b29tOwogIGNvbnRyb2wuc2NhbGUgPSBzY2FsZTsKICBjb250cm9sLmF0dHJpYnV0aW9uID0gYXR0cmlidXRpb247CgogIC8qCiAgCUwuSGFuZGxlciBpcyBhIGJhc2UgY2xhc3MgZm9yIGhhbmRsZXIgY2xhc3NlcyB0aGF0IGFyZSB1c2VkIGludGVybmFsbHkgdG8gaW5qZWN0CiAgCWludGVyYWN0aW9uIGZlYXR1cmVzIGxpa2UgZHJhZ2dpbmcgdG8gY2xhc3NlcyBsaWtlIE1hcCBhbmQgTWFya2VyLgogICovCgogIC8vIEBjbGFzcyBIYW5kbGVyCiAgLy8gQGFrYSBMLkhhbmRsZXIKICAvLyBBYnN0cmFjdCBjbGFzcyBmb3IgbWFwIGludGVyYWN0aW9uIGhhbmRsZXJzCgogIHZhciBIYW5kbGVyID0gQ2xhc3MuZXh0ZW5kKHsKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG1hcCkgewogIAkJdGhpcy5fbWFwID0gbWFwOwogIAl9LAoKICAJLy8gQG1ldGhvZCBlbmFibGUoKTogdGhpcwogIAkvLyBFbmFibGVzIHRoZSBoYW5kbGVyCiAgCWVuYWJsZTogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX2VuYWJsZWQpIHsgcmV0dXJuIHRoaXM7IH0KCiAgCQl0aGlzLl9lbmFibGVkID0gdHJ1ZTsKICAJCXRoaXMuYWRkSG9va3MoKTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBkaXNhYmxlKCk6IHRoaXMKICAJLy8gRGlzYWJsZXMgdGhlIGhhbmRsZXIKICAJZGlzYWJsZTogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9lbmFibGVkKSB7IHJldHVybiB0aGlzOyB9CgogIAkJdGhpcy5fZW5hYmxlZCA9IGZhbHNlOwogIAkJdGhpcy5yZW1vdmVIb29rcygpOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGVuYWJsZWQoKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgaGFuZGxlciBpcyBlbmFibGVkCiAgCWVuYWJsZWQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiAhIXRoaXMuX2VuYWJsZWQ7CiAgCX0KCiAgCS8vIEBzZWN0aW9uIEV4dGVuc2lvbiBtZXRob2RzCiAgCS8vIENsYXNzZXMgaW5oZXJpdGluZyBmcm9tIGBIYW5kbGVyYCBtdXN0IGltcGxlbWVudCB0aGUgdHdvIGZvbGxvd2luZyBtZXRob2RzOgogIAkvLyBAbWV0aG9kIGFkZEhvb2tzKCkKICAJLy8gQ2FsbGVkIHdoZW4gdGhlIGhhbmRsZXIgaXMgZW5hYmxlZCwgc2hvdWxkIGFkZCBldmVudCBob29rcy4KICAJLy8gQG1ldGhvZCByZW1vdmVIb29rcygpCiAgCS8vIENhbGxlZCB3aGVuIHRoZSBoYW5kbGVyIGlzIGRpc2FibGVkLCBzaG91bGQgcmVtb3ZlIHRoZSBldmVudCBob29rcyBhZGRlZCBwcmV2aW91c2x5LgogIH0pOwoKICAvLyBAc2VjdGlvbiBUaGVyZSBpcyBzdGF0aWMgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIGNhbGxlZCB3aXRob3V0IGluc3RhbnRpYXRpbmcgTC5IYW5kbGVyOgogIC8vIEBmdW5jdGlvbiBhZGRUbyhtYXA6IE1hcCwgbmFtZTogU3RyaW5nKTogdGhpcwogIC8vIEFkZHMgYSBuZXcgSGFuZGxlciB0byB0aGUgZ2l2ZW4gbWFwIHdpdGggdGhlIGdpdmVuIG5hbWUuCiAgSGFuZGxlci5hZGRUbyA9IGZ1bmN0aW9uIChtYXAsIG5hbWUpIHsKICAJbWFwLmFkZEhhbmRsZXIobmFtZSwgdGhpcyk7CiAgCXJldHVybiB0aGlzOwogIH07CgogIHZhciBNaXhpbiA9IHtFdmVudHM6IEV2ZW50c307CgogIC8qCiAgICogQGNsYXNzIERyYWdnYWJsZQogICAqIEBha2EgTC5EcmFnZ2FibGUKICAgKiBAaW5oZXJpdHMgRXZlbnRlZAogICAqCiAgICogQSBjbGFzcyBmb3IgbWFraW5nIERPTSBlbGVtZW50cyBkcmFnZ2FibGUgKGluY2x1ZGluZyB0b3VjaCBzdXBwb3J0KS4KICAgKiBVc2VkIGludGVybmFsbHkgZm9yIG1hcCBhbmQgbWFya2VyIGRyYWdnaW5nLiBPbmx5IHdvcmtzIGZvciBlbGVtZW50cwogICAqIHRoYXQgd2VyZSBwb3NpdGlvbmVkIHdpdGggW2BMLkRvbVV0aWwuc2V0UG9zaXRpb25gXSgjZG9tdXRpbC1zZXRwb3NpdGlvbikuCiAgICoKICAgKiBAZXhhbXBsZQogICAqIGBgYGpzCiAgICogdmFyIGRyYWdnYWJsZSA9IG5ldyBMLkRyYWdnYWJsZShlbGVtZW50VG9EcmFnKTsKICAgKiBkcmFnZ2FibGUuZW5hYmxlKCk7CiAgICogYGBgCiAgICovCgogIHZhciBTVEFSVCA9IEJyb3dzZXIudG91Y2ggPyAndG91Y2hzdGFydCBtb3VzZWRvd24nIDogJ21vdXNlZG93bic7CgogIHZhciBEcmFnZ2FibGUgPSBFdmVudGVkLmV4dGVuZCh7CgogIAlvcHRpb25zOiB7CiAgCQkvLyBAc2VjdGlvbgogIAkJLy8gQGFrYSBEcmFnZ2FibGUgb3B0aW9ucwogIAkJLy8gQG9wdGlvbiBjbGlja1RvbGVyYW5jZTogTnVtYmVyID0gMwogIAkJLy8gVGhlIG1heCBudW1iZXIgb2YgcGl4ZWxzIGEgdXNlciBjYW4gc2hpZnQgdGhlIG1vdXNlIHBvaW50ZXIgZHVyaW5nIGEgY2xpY2sKICAJCS8vIGZvciBpdCB0byBiZSBjb25zaWRlcmVkIGEgdmFsaWQgY2xpY2sgKGFzIG9wcG9zZWQgdG8gYSBtb3VzZSBkcmFnKS4KICAJCWNsaWNrVG9sZXJhbmNlOiAzCiAgCX0sCgogIAkvLyBAY29uc3RydWN0b3IgTC5EcmFnZ2FibGUoZWw6IEhUTUxFbGVtZW50LCBkcmFnSGFuZGxlPzogSFRNTEVsZW1lbnQsIHByZXZlbnRPdXRsaW5lPzogQm9vbGVhbiwgb3B0aW9ucz86IERyYWdnYWJsZSBvcHRpb25zKQogIAkvLyBDcmVhdGVzIGEgYERyYWdnYWJsZWAgb2JqZWN0IGZvciBtb3ZpbmcgYGVsYCB3aGVuIHlvdSBzdGFydCBkcmFnZ2luZyB0aGUgYGRyYWdIYW5kbGVgIGVsZW1lbnQgKGVxdWFscyBgZWxgIGl0c2VsZiBieSBkZWZhdWx0KS4KICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGVsZW1lbnQsIGRyYWdTdGFydFRhcmdldCwgcHJldmVudE91dGxpbmUsIG9wdGlvbnMpIHsKICAJCXNldE9wdGlvbnModGhpcywgb3B0aW9ucyk7CgogIAkJdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7CiAgCQl0aGlzLl9kcmFnU3RhcnRUYXJnZXQgPSBkcmFnU3RhcnRUYXJnZXQgfHwgZWxlbWVudDsKICAJCXRoaXMuX3ByZXZlbnRPdXRsaW5lID0gcHJldmVudE91dGxpbmU7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGVuYWJsZSgpCiAgCS8vIEVuYWJsZXMgdGhlIGRyYWdnaW5nIGFiaWxpdHkKICAJZW5hYmxlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fZW5hYmxlZCkgeyByZXR1cm47IH0KCiAgCQlvbih0aGlzLl9kcmFnU3RhcnRUYXJnZXQsIFNUQVJULCB0aGlzLl9vbkRvd24sIHRoaXMpOwoKICAJCXRoaXMuX2VuYWJsZWQgPSB0cnVlOwogIAl9LAoKICAJLy8gQG1ldGhvZCBkaXNhYmxlKCkKICAJLy8gRGlzYWJsZXMgdGhlIGRyYWdnaW5nIGFiaWxpdHkKICAJZGlzYWJsZTogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9lbmFibGVkKSB7IHJldHVybjsgfQoKICAJCS8vIElmIHdlJ3JlIGN1cnJlbnRseSBkcmFnZ2luZyB0aGlzIGRyYWdnYWJsZSwKICAJCS8vIGRpc2FibGluZyBpdCBjb3VudHMgYXMgZmlyc3QgZW5kaW5nIHRoZSBkcmFnLgogIAkJaWYgKERyYWdnYWJsZS5fZHJhZ2dpbmcgPT09IHRoaXMpIHsKICAJCQl0aGlzLmZpbmlzaERyYWcodHJ1ZSk7CiAgCQl9CgogIAkJb2ZmKHRoaXMuX2RyYWdTdGFydFRhcmdldCwgU1RBUlQsIHRoaXMuX29uRG93biwgdGhpcyk7CgogIAkJdGhpcy5fZW5hYmxlZCA9IGZhbHNlOwogIAkJdGhpcy5fbW92ZWQgPSBmYWxzZTsKICAJfSwKCiAgCV9vbkRvd246IGZ1bmN0aW9uIChlKSB7CiAgCQkvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIGRpc2FibGVkOyB0aGlzIGhhcHBlbnMgaW4gSUUxMQogIAkJLy8gdW5kZXIgc29tZSBjaXJjdW1zdGFuY2VzLCBzZWUgIzM2NjYuCiAgCQlpZiAoIXRoaXMuX2VuYWJsZWQpIHsgcmV0dXJuOyB9CgogIAkJdGhpcy5fbW92ZWQgPSBmYWxzZTsKCiAgCQlpZiAoaGFzQ2xhc3ModGhpcy5fZWxlbWVudCwgJ2xlYWZsZXQtem9vbS1hbmltJykpIHsgcmV0dXJuOyB9CgogIAkJaWYgKGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoICE9PSAxKSB7CiAgCQkJLy8gRmluaXNoIGRyYWdnaW5nIHRvIGF2b2lkIGNvbmZsaWN0IHdpdGggdG91Y2hab29tCiAgCQkJaWYgKERyYWdnYWJsZS5fZHJhZ2dpbmcgPT09IHRoaXMpIHsKICAJCQkJdGhpcy5maW5pc2hEcmFnKCk7CiAgCQkJfQogIAkJCXJldHVybjsKICAJCX0KCiAgCQlpZiAoRHJhZ2dhYmxlLl9kcmFnZ2luZyB8fCBlLnNoaWZ0S2V5IHx8ICgoZS53aGljaCAhPT0gMSkgJiYgKGUuYnV0dG9uICE9PSAxKSAmJiAhZS50b3VjaGVzKSkgeyByZXR1cm47IH0KICAJCURyYWdnYWJsZS5fZHJhZ2dpbmcgPSB0aGlzOyAgLy8gUHJldmVudCBkcmFnZ2luZyBtdWx0aXBsZSBvYmplY3RzIGF0IG9uY2UuCgogIAkJaWYgKHRoaXMuX3ByZXZlbnRPdXRsaW5lKSB7CiAgCQkJcHJldmVudE91dGxpbmUodGhpcy5fZWxlbWVudCk7CiAgCQl9CgogIAkJZGlzYWJsZUltYWdlRHJhZygpOwogIAkJZGlzYWJsZVRleHRTZWxlY3Rpb24oKTsKCiAgCQlpZiAodGhpcy5fbW92aW5nKSB7IHJldHVybjsgfQoKICAJCS8vIEBldmVudCBkb3duOiBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiBhIGRyYWcgaXMgYWJvdXQgdG8gc3RhcnQuCiAgCQl0aGlzLmZpcmUoJ2Rvd24nKTsKCiAgCQl2YXIgZmlyc3QgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlLAogIAkJICAgIHNpemVkUGFyZW50ID0gZ2V0U2l6ZWRQYXJlbnROb2RlKHRoaXMuX2VsZW1lbnQpOwoKICAJCXRoaXMuX3N0YXJ0UG9pbnQgPSBuZXcgUG9pbnQoZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSk7CiAgCQl0aGlzLl9zdGFydFBvcyA9IGdldFBvc2l0aW9uKHRoaXMuX2VsZW1lbnQpOwoKICAJCS8vIENhY2hlIHRoZSBzY2FsZSwgc28gdGhhdCB3ZSBjYW4gY29udGludW91c2x5IGNvbXBlbnNhdGUgZm9yIGl0IGR1cmluZyBkcmFnIChfb25Nb3ZlKS4KICAJCXRoaXMuX3BhcmVudFNjYWxlID0gZ2V0U2NhbGUoc2l6ZWRQYXJlbnQpOwoKICAJCXZhciBtb3VzZWV2ZW50ID0gZS50eXBlID09PSAnbW91c2Vkb3duJzsKICAJCW9uKGRvY3VtZW50LCBtb3VzZWV2ZW50ID8gJ21vdXNlbW92ZScgOiAndG91Y2htb3ZlJywgdGhpcy5fb25Nb3ZlLCB0aGlzKTsKICAJCW9uKGRvY3VtZW50LCBtb3VzZWV2ZW50ID8gJ21vdXNldXAnIDogJ3RvdWNoZW5kIHRvdWNoY2FuY2VsJywgdGhpcy5fb25VcCwgdGhpcyk7CiAgCX0sCgogIAlfb25Nb3ZlOiBmdW5jdGlvbiAoZSkgewogIAkJLy8gSWdub3JlIHRoZSBldmVudCBpZiBkaXNhYmxlZDsgdGhpcyBoYXBwZW5zIGluIElFMTEKICAJCS8vIHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcywgc2VlICMzNjY2LgogIAkJaWYgKCF0aGlzLl9lbmFibGVkKSB7IHJldHVybjsgfQoKICAJCWlmIChlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDEpIHsKICAJCQl0aGlzLl9tb3ZlZCA9IHRydWU7CiAgCQkJcmV0dXJuOwogIAkJfQoKICAJCXZhciBmaXJzdCA9IChlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA9PT0gMSA/IGUudG91Y2hlc1swXSA6IGUpLAogIAkJICAgIG9mZnNldCA9IG5ldyBQb2ludChmaXJzdC5jbGllbnRYLCBmaXJzdC5jbGllbnRZKS5fc3VidHJhY3QodGhpcy5fc3RhcnRQb2ludCk7CgogIAkJaWYgKCFvZmZzZXQueCAmJiAhb2Zmc2V0LnkpIHsgcmV0dXJuOyB9CiAgCQlpZiAoTWF0aC5hYnMob2Zmc2V0LngpICsgTWF0aC5hYnMob2Zmc2V0LnkpIDwgdGhpcy5vcHRpb25zLmNsaWNrVG9sZXJhbmNlKSB7IHJldHVybjsgfQoKICAJCS8vIFdlIGFzc3VtZSB0aGF0IHRoZSBwYXJlbnQgY29udGFpbmVyJ3MgcG9zaXRpb24sIGJvcmRlciBhbmQgc2NhbGUgZG8gbm90IGNoYW5nZSBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBkcmFnLgogIAkJLy8gVGhlcmVmb3JlIHRoZXJlIGlzIG5vIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhlIHBvc2l0aW9uIGFuZCBib3JkZXIgKHRoZXkgYXJlIGVsaW1pbmF0ZWQgYnkgdGhlIHN1YnRyYWN0aW9uKQogIAkJLy8gYW5kIHdlIGNhbiB1c2UgdGhlIGNhY2hlZCB2YWx1ZSBmb3IgdGhlIHNjYWxlLgogIAkJb2Zmc2V0LnggLz0gdGhpcy5fcGFyZW50U2NhbGUueDsKICAJCW9mZnNldC55IC89IHRoaXMuX3BhcmVudFNjYWxlLnk7CgogIAkJcHJldmVudERlZmF1bHQoZSk7CgogIAkJaWYgKCF0aGlzLl9tb3ZlZCkgewogIAkJCS8vIEBldmVudCBkcmFnc3RhcnQ6IEV2ZW50CiAgCQkJLy8gRmlyZWQgd2hlbiBhIGRyYWcgc3RhcnRzCiAgCQkJdGhpcy5maXJlKCdkcmFnc3RhcnQnKTsKCiAgCQkJdGhpcy5fbW92ZWQgPSB0cnVlOwoKICAJCQlhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCAnbGVhZmxldC1kcmFnZ2luZycpOwoKICAJCQl0aGlzLl9sYXN0VGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50OwogIAkJCS8vIElFIGFuZCBFZGdlIGRvIG5vdCBnaXZlIHRoZSA8dXNlPiBlbGVtZW50LCBzbyBmZXRjaCBpdAogIAkJCS8vIGlmIG5lY2Vzc2FyeQogIAkJCWlmICh3aW5kb3cuU1ZHRWxlbWVudEluc3RhbmNlICYmIHRoaXMuX2xhc3RUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudEluc3RhbmNlKSB7CiAgCQkJCXRoaXMuX2xhc3RUYXJnZXQgPSB0aGlzLl9sYXN0VGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50OwogIAkJCX0KICAJCQlhZGRDbGFzcyh0aGlzLl9sYXN0VGFyZ2V0LCAnbGVhZmxldC1kcmFnLXRhcmdldCcpOwogIAkJfQoKICAJCXRoaXMuX25ld1BvcyA9IHRoaXMuX3N0YXJ0UG9zLmFkZChvZmZzZXQpOwogIAkJdGhpcy5fbW92aW5nID0gdHJ1ZTsKCiAgCQl0aGlzLl9sYXN0RXZlbnQgPSBlOwogIAkJdGhpcy5fdXBkYXRlUG9zaXRpb24oKTsKICAJfSwKCiAgCV91cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24gKCkgewogIAkJdmFyIGUgPSB7b3JpZ2luYWxFdmVudDogdGhpcy5fbGFzdEV2ZW50fTsKCiAgCQkvLyBAZXZlbnQgcHJlZHJhZzogRXZlbnQKICAJCS8vIEZpcmVkIGNvbnRpbnVvdXNseSBkdXJpbmcgZHJhZ2dpbmcgKmJlZm9yZSogZWFjaCBjb3JyZXNwb25kaW5nCiAgCQkvLyB1cGRhdGUgb2YgdGhlIGVsZW1lbnQncyBwb3NpdGlvbi4KICAJCXRoaXMuZmlyZSgncHJlZHJhZycsIGUpOwogIAkJc2V0UG9zaXRpb24odGhpcy5fZWxlbWVudCwgdGhpcy5fbmV3UG9zKTsKCiAgCQkvLyBAZXZlbnQgZHJhZzogRXZlbnQKICAJCS8vIEZpcmVkIGNvbnRpbnVvdXNseSBkdXJpbmcgZHJhZ2dpbmcuCiAgCQl0aGlzLmZpcmUoJ2RyYWcnLCBlKTsKICAJfSwKCiAgCV9vblVwOiBmdW5jdGlvbiAoKSB7CiAgCQkvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIGRpc2FibGVkOyB0aGlzIGhhcHBlbnMgaW4gSUUxMQogIAkJLy8gdW5kZXIgc29tZSBjaXJjdW1zdGFuY2VzLCBzZWUgIzM2NjYuCiAgCQlpZiAoIXRoaXMuX2VuYWJsZWQpIHsgcmV0dXJuOyB9CiAgCQl0aGlzLmZpbmlzaERyYWcoKTsKICAJfSwKCiAgCWZpbmlzaERyYWc6IGZ1bmN0aW9uIChub0luZXJ0aWEpIHsKICAJCXJlbW92ZUNsYXNzKGRvY3VtZW50LmJvZHksICdsZWFmbGV0LWRyYWdnaW5nJyk7CgogIAkJaWYgKHRoaXMuX2xhc3RUYXJnZXQpIHsKICAJCQlyZW1vdmVDbGFzcyh0aGlzLl9sYXN0VGFyZ2V0LCAnbGVhZmxldC1kcmFnLXRhcmdldCcpOwogIAkJCXRoaXMuX2xhc3RUYXJnZXQgPSBudWxsOwogIAkJfQoKICAJCW9mZihkb2N1bWVudCwgJ21vdXNlbW92ZSB0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdmUsIHRoaXMpOwogIAkJb2ZmKGRvY3VtZW50LCAnbW91c2V1cCB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIHRoaXMuX29uVXAsIHRoaXMpOwoKICAJCWVuYWJsZUltYWdlRHJhZygpOwogIAkJZW5hYmxlVGV4dFNlbGVjdGlvbigpOwoKICAJCWlmICh0aGlzLl9tb3ZlZCAmJiB0aGlzLl9tb3ZpbmcpIHsKCiAgCQkJLy8gQGV2ZW50IGRyYWdlbmQ6IERyYWdFbmRFdmVudAogIAkJCS8vIEZpcmVkIHdoZW4gdGhlIGRyYWcgZW5kcy4KICAJCQl0aGlzLmZpcmUoJ2RyYWdlbmQnLCB7CiAgCQkJCW5vSW5lcnRpYTogbm9JbmVydGlhLAogIAkJCQlkaXN0YW5jZTogdGhpcy5fbmV3UG9zLmRpc3RhbmNlVG8odGhpcy5fc3RhcnRQb3MpCiAgCQkJfSk7CiAgCQl9CgogIAkJdGhpcy5fbW92aW5nID0gZmFsc2U7CiAgCQlEcmFnZ2FibGUuX2RyYWdnaW5nID0gZmFsc2U7CiAgCX0KCiAgfSk7CgogIC8qCiAgICogQG5hbWVzcGFjZSBMaW5lVXRpbAogICAqCiAgICogVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgcG9seWxpbmUgcG9pbnRzIHByb2Nlc3NpbmcsIHVzZWQgYnkgTGVhZmxldCBpbnRlcm5hbGx5IHRvIG1ha2UgcG9seWxpbmVzIGxpZ2h0bmluZy1mYXN0LgogICAqLwoKICAvLyBTaW1wbGlmeSBwb2x5bGluZSB3aXRoIHZlcnRleCByZWR1Y3Rpb24gYW5kIERvdWdsYXMtUGV1Y2tlciBzaW1wbGlmaWNhdGlvbi4KICAvLyBJbXByb3ZlcyByZW5kZXJpbmcgcGVyZm9ybWFuY2UgZHJhbWF0aWNhbGx5IGJ5IGxlc3NlbmluZyB0aGUgbnVtYmVyIG9mIHBvaW50cyB0byBkcmF3LgoKICAvLyBAZnVuY3Rpb24gc2ltcGxpZnkocG9pbnRzOiBQb2ludFtdLCB0b2xlcmFuY2U6IE51bWJlcik6IFBvaW50W10KICAvLyBEcmFtYXRpY2FsbHkgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHBvaW50cyBpbiBhIHBvbHlsaW5lIHdoaWxlIHJldGFpbmluZwogIC8vIGl0cyBzaGFwZSBhbmQgcmV0dXJucyBhIG5ldyBhcnJheSBvZiBzaW1wbGlmaWVkIHBvaW50cywgdXNpbmcgdGhlCiAgLy8gW1JhbWVyLURvdWdsYXMtUGV1Y2tlciBhbGdvcml0aG1dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JhbWVyLURvdWdsYXMtUGV1Y2tlcl9hbGdvcml0aG0pLgogIC8vIFVzZWQgZm9yIGEgaHVnZSBwZXJmb3JtYW5jZSBib29zdCB3aGVuIHByb2Nlc3NpbmcvZGlzcGxheWluZyBMZWFmbGV0IHBvbHlsaW5lcyBmb3IKICAvLyBlYWNoIHpvb20gbGV2ZWwgYW5kIGFsc28gcmVkdWNpbmcgdmlzdWFsIG5vaXNlLiB0b2xlcmFuY2UgYWZmZWN0cyB0aGUgYW1vdW50IG9mCiAgLy8gc2ltcGxpZmljYXRpb24gKGxlc3NlciB2YWx1ZSBtZWFucyBoaWdoZXIgcXVhbGl0eSBidXQgc2xvd2VyIGFuZCB3aXRoIG1vcmUgcG9pbnRzKS4KICAvLyBBbHNvIHJlbGVhc2VkIGFzIGEgc2VwYXJhdGVkIG1pY3JvLWxpYnJhcnkgW1NpbXBsaWZ5LmpzXShodHRwczovL21vdXJuZXIuZ2l0aHViLmlvL3NpbXBsaWZ5LWpzLykuCiAgZnVuY3Rpb24gc2ltcGxpZnkocG9pbnRzLCB0b2xlcmFuY2UpIHsKICAJaWYgKCF0b2xlcmFuY2UgfHwgIXBvaW50cy5sZW5ndGgpIHsKICAJCXJldHVybiBwb2ludHMuc2xpY2UoKTsKICAJfQoKICAJdmFyIHNxVG9sZXJhbmNlID0gdG9sZXJhbmNlICogdG9sZXJhbmNlOwoKICAJICAgIC8vIHN0YWdlIDE6IHZlcnRleCByZWR1Y3Rpb24KICAJICAgIHBvaW50cyA9IF9yZWR1Y2VQb2ludHMocG9pbnRzLCBzcVRvbGVyYW5jZSk7CgogIAkgICAgLy8gc3RhZ2UgMjogRG91Z2xhcy1QZXVja2VyIHNpbXBsaWZpY2F0aW9uCiAgCSAgICBwb2ludHMgPSBfc2ltcGxpZnlEUChwb2ludHMsIHNxVG9sZXJhbmNlKTsKCiAgCXJldHVybiBwb2ludHM7CiAgfQoKICAvLyBAZnVuY3Rpb24gcG9pbnRUb1NlZ21lbnREaXN0YW5jZShwOiBQb2ludCwgcDE6IFBvaW50LCBwMjogUG9pbnQpOiBOdW1iZXIKICAvLyBSZXR1cm5zIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHBvaW50IGBwYCBhbmQgc2VnbWVudCBgcDFgIHRvIGBwMmAuCiAgZnVuY3Rpb24gcG9pbnRUb1NlZ21lbnREaXN0YW5jZShwLCBwMSwgcDIpIHsKICAJcmV0dXJuIE1hdGguc3FydChfc3FDbG9zZXN0UG9pbnRPblNlZ21lbnQocCwgcDEsIHAyLCB0cnVlKSk7CiAgfQoKICAvLyBAZnVuY3Rpb24gY2xvc2VzdFBvaW50T25TZWdtZW50KHA6IFBvaW50LCBwMTogUG9pbnQsIHAyOiBQb2ludCk6IE51bWJlcgogIC8vIFJldHVybnMgdGhlIGNsb3Nlc3QgcG9pbnQgZnJvbSBhIHBvaW50IGBwYCBvbiBhIHNlZ21lbnQgYHAxYCB0byBgcDJgLgogIGZ1bmN0aW9uIGNsb3Nlc3RQb2ludE9uU2VnbWVudChwLCBwMSwgcDIpIHsKICAJcmV0dXJuIF9zcUNsb3Nlc3RQb2ludE9uU2VnbWVudChwLCBwMSwgcDIpOwogIH0KCiAgLy8gUmFtZXItRG91Z2xhcy1QZXVja2VyIHNpbXBsaWZpY2F0aW9uLCBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmFtZXItRG91Z2xhcy1QZXVja2VyX2FsZ29yaXRobQogIGZ1bmN0aW9uIF9zaW1wbGlmeURQKHBvaW50cywgc3FUb2xlcmFuY2UpIHsKCiAgCXZhciBsZW4gPSBwb2ludHMubGVuZ3RoLAogIAkgICAgQXJyYXlDb25zdHJ1Y3RvciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSB1bmRlZmluZWQgKyAnJyA/IFVpbnQ4QXJyYXkgOiBBcnJheSwKICAJICAgIG1hcmtlcnMgPSBuZXcgQXJyYXlDb25zdHJ1Y3RvcihsZW4pOwoKICAJICAgIG1hcmtlcnNbMF0gPSBtYXJrZXJzW2xlbiAtIDFdID0gMTsKCiAgCV9zaW1wbGlmeURQU3RlcChwb2ludHMsIG1hcmtlcnMsIHNxVG9sZXJhbmNlLCAwLCBsZW4gLSAxKTsKCiAgCXZhciBpLAogIAkgICAgbmV3UG9pbnRzID0gW107CgogIAlmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAJCWlmIChtYXJrZXJzW2ldKSB7CiAgCQkJbmV3UG9pbnRzLnB1c2gocG9pbnRzW2ldKTsKICAJCX0KICAJfQoKICAJcmV0dXJuIG5ld1BvaW50czsKICB9CgogIGZ1bmN0aW9uIF9zaW1wbGlmeURQU3RlcChwb2ludHMsIG1hcmtlcnMsIHNxVG9sZXJhbmNlLCBmaXJzdCwgbGFzdCkgewoKICAJdmFyIG1heFNxRGlzdCA9IDAsCiAgCWluZGV4LCBpLCBzcURpc3Q7CgogIAlmb3IgKGkgPSBmaXJzdCArIDE7IGkgPD0gbGFzdCAtIDE7IGkrKykgewogIAkJc3FEaXN0ID0gX3NxQ2xvc2VzdFBvaW50T25TZWdtZW50KHBvaW50c1tpXSwgcG9pbnRzW2ZpcnN0XSwgcG9pbnRzW2xhc3RdLCB0cnVlKTsKCiAgCQlpZiAoc3FEaXN0ID4gbWF4U3FEaXN0KSB7CiAgCQkJaW5kZXggPSBpOwogIAkJCW1heFNxRGlzdCA9IHNxRGlzdDsKICAJCX0KICAJfQoKICAJaWYgKG1heFNxRGlzdCA+IHNxVG9sZXJhbmNlKSB7CiAgCQltYXJrZXJzW2luZGV4XSA9IDE7CgogIAkJX3NpbXBsaWZ5RFBTdGVwKHBvaW50cywgbWFya2Vycywgc3FUb2xlcmFuY2UsIGZpcnN0LCBpbmRleCk7CiAgCQlfc2ltcGxpZnlEUFN0ZXAocG9pbnRzLCBtYXJrZXJzLCBzcVRvbGVyYW5jZSwgaW5kZXgsIGxhc3QpOwogIAl9CiAgfQoKICAvLyByZWR1Y2UgcG9pbnRzIHRoYXQgYXJlIHRvbyBjbG9zZSB0byBlYWNoIG90aGVyIHRvIGEgc2luZ2xlIHBvaW50CiAgZnVuY3Rpb24gX3JlZHVjZVBvaW50cyhwb2ludHMsIHNxVG9sZXJhbmNlKSB7CiAgCXZhciByZWR1Y2VkUG9pbnRzID0gW3BvaW50c1swXV07CgogIAlmb3IgKHZhciBpID0gMSwgcHJldiA9IDAsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJaWYgKF9zcURpc3QocG9pbnRzW2ldLCBwb2ludHNbcHJldl0pID4gc3FUb2xlcmFuY2UpIHsKICAJCQlyZWR1Y2VkUG9pbnRzLnB1c2gocG9pbnRzW2ldKTsKICAJCQlwcmV2ID0gaTsKICAJCX0KICAJfQogIAlpZiAocHJldiA8IGxlbiAtIDEpIHsKICAJCXJlZHVjZWRQb2ludHMucHVzaChwb2ludHNbbGVuIC0gMV0pOwogIAl9CiAgCXJldHVybiByZWR1Y2VkUG9pbnRzOwogIH0KCiAgdmFyIF9sYXN0Q29kZTsKCiAgLy8gQGZ1bmN0aW9uIGNsaXBTZWdtZW50KGE6IFBvaW50LCBiOiBQb2ludCwgYm91bmRzOiBCb3VuZHMsIHVzZUxhc3RDb2RlPzogQm9vbGVhbiwgcm91bmQ/OiBCb29sZWFuKTogUG9pbnRbXXxCb29sZWFuCiAgLy8gQ2xpcHMgdGhlIHNlZ21lbnQgYSB0byBiIGJ5IHJlY3Rhbmd1bGFyIGJvdW5kcyB3aXRoIHRoZQogIC8vIFtDb2hlbi1TdXRoZXJsYW5kIGFsZ29yaXRobV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29oZW4lRTIlODAlOTNTdXRoZXJsYW5kX2FsZ29yaXRobSkKICAvLyAobW9kaWZ5aW5nIHRoZSBzZWdtZW50IHBvaW50cyBkaXJlY3RseSEpLiBVc2VkIGJ5IExlYWZsZXQgdG8gb25seSBzaG93IHBvbHlsaW5lCiAgLy8gcG9pbnRzIHRoYXQgYXJlIG9uIHRoZSBzY3JlZW4gb3IgbmVhciwgaW5jcmVhc2luZyBwZXJmb3JtYW5jZS4KICBmdW5jdGlvbiBjbGlwU2VnbWVudChhLCBiLCBib3VuZHMsIHVzZUxhc3RDb2RlLCByb3VuZCkgewogIAl2YXIgY29kZUEgPSB1c2VMYXN0Q29kZSA/IF9sYXN0Q29kZSA6IF9nZXRCaXRDb2RlKGEsIGJvdW5kcyksCiAgCSAgICBjb2RlQiA9IF9nZXRCaXRDb2RlKGIsIGJvdW5kcyksCgogIAkgICAgY29kZU91dCwgcCwgbmV3Q29kZTsKCiAgCSAgICAvLyBzYXZlIDJuZCBjb2RlIHRvIGF2b2lkIGNhbGN1bGF0aW5nIGl0IG9uIHRoZSBuZXh0IHNlZ21lbnQKICAJICAgIF9sYXN0Q29kZSA9IGNvZGVCOwoKICAJd2hpbGUgKHRydWUpIHsKICAJCS8vIGlmIGEsYiBpcyBpbnNpZGUgdGhlIGNsaXAgd2luZG93ICh0cml2aWFsIGFjY2VwdCkKICAJCWlmICghKGNvZGVBIHwgY29kZUIpKSB7CiAgCQkJcmV0dXJuIFthLCBiXTsKICAJCX0KCiAgCQkvLyBpZiBhLGIgaXMgb3V0c2lkZSB0aGUgY2xpcCB3aW5kb3cgKHRyaXZpYWwgcmVqZWN0KQogIAkJaWYgKGNvZGVBICYgY29kZUIpIHsKICAJCQlyZXR1cm4gZmFsc2U7CiAgCQl9CgogIAkJLy8gb3RoZXIgY2FzZXMKICAJCWNvZGVPdXQgPSBjb2RlQSB8fCBjb2RlQjsKICAJCXAgPSBfZ2V0RWRnZUludGVyc2VjdGlvbihhLCBiLCBjb2RlT3V0LCBib3VuZHMsIHJvdW5kKTsKICAJCW5ld0NvZGUgPSBfZ2V0Qml0Q29kZShwLCBib3VuZHMpOwoKICAJCWlmIChjb2RlT3V0ID09PSBjb2RlQSkgewogIAkJCWEgPSBwOwogIAkJCWNvZGVBID0gbmV3Q29kZTsKICAJCX0gZWxzZSB7CiAgCQkJYiA9IHA7CiAgCQkJY29kZUIgPSBuZXdDb2RlOwogIAkJfQogIAl9CiAgfQoKICBmdW5jdGlvbiBfZ2V0RWRnZUludGVyc2VjdGlvbihhLCBiLCBjb2RlLCBib3VuZHMsIHJvdW5kKSB7CiAgCXZhciBkeCA9IGIueCAtIGEueCwKICAJICAgIGR5ID0gYi55IC0gYS55LAogIAkgICAgbWluID0gYm91bmRzLm1pbiwKICAJICAgIG1heCA9IGJvdW5kcy5tYXgsCiAgCSAgICB4LCB5OwoKICAJaWYgKGNvZGUgJiA4KSB7IC8vIHRvcAogIAkJeCA9IGEueCArIGR4ICogKG1heC55IC0gYS55KSAvIGR5OwogIAkJeSA9IG1heC55OwoKICAJfSBlbHNlIGlmIChjb2RlICYgNCkgeyAvLyBib3R0b20KICAJCXggPSBhLnggKyBkeCAqIChtaW4ueSAtIGEueSkgLyBkeTsKICAJCXkgPSBtaW4ueTsKCiAgCX0gZWxzZSBpZiAoY29kZSAmIDIpIHsgLy8gcmlnaHQKICAJCXggPSBtYXgueDsKICAJCXkgPSBhLnkgKyBkeSAqIChtYXgueCAtIGEueCkgLyBkeDsKCiAgCX0gZWxzZSBpZiAoY29kZSAmIDEpIHsgLy8gbGVmdAogIAkJeCA9IG1pbi54OwogIAkJeSA9IGEueSArIGR5ICogKG1pbi54IC0gYS54KSAvIGR4OwogIAl9CgogIAlyZXR1cm4gbmV3IFBvaW50KHgsIHksIHJvdW5kKTsKICB9CgogIGZ1bmN0aW9uIF9nZXRCaXRDb2RlKHAsIGJvdW5kcykgewogIAl2YXIgY29kZSA9IDA7CgogIAlpZiAocC54IDwgYm91bmRzLm1pbi54KSB7IC8vIGxlZnQKICAJCWNvZGUgfD0gMTsKICAJfSBlbHNlIGlmIChwLnggPiBib3VuZHMubWF4LngpIHsgLy8gcmlnaHQKICAJCWNvZGUgfD0gMjsKICAJfQoKICAJaWYgKHAueSA8IGJvdW5kcy5taW4ueSkgeyAvLyBib3R0b20KICAJCWNvZGUgfD0gNDsKICAJfSBlbHNlIGlmIChwLnkgPiBib3VuZHMubWF4LnkpIHsgLy8gdG9wCiAgCQljb2RlIHw9IDg7CiAgCX0KCiAgCXJldHVybiBjb2RlOwogIH0KCiAgLy8gc3F1YXJlIGRpc3RhbmNlICh0byBhdm9pZCB1bm5lY2Vzc2FyeSBNYXRoLnNxcnQgY2FsbHMpCiAgZnVuY3Rpb24gX3NxRGlzdChwMSwgcDIpIHsKICAJdmFyIGR4ID0gcDIueCAtIHAxLngsCiAgCSAgICBkeSA9IHAyLnkgLSBwMS55OwogIAlyZXR1cm4gZHggKiBkeCArIGR5ICogZHk7CiAgfQoKICAvLyByZXR1cm4gY2xvc2VzdCBwb2ludCBvbiBzZWdtZW50IG9yIGRpc3RhbmNlIHRvIHRoYXQgcG9pbnQKICBmdW5jdGlvbiBfc3FDbG9zZXN0UG9pbnRPblNlZ21lbnQocCwgcDEsIHAyLCBzcURpc3QpIHsKICAJdmFyIHggPSBwMS54LAogIAkgICAgeSA9IHAxLnksCiAgCSAgICBkeCA9IHAyLnggLSB4LAogIAkgICAgZHkgPSBwMi55IC0geSwKICAJICAgIGRvdCA9IGR4ICogZHggKyBkeSAqIGR5LAogIAkgICAgdDsKCiAgCWlmIChkb3QgPiAwKSB7CiAgCQl0ID0gKChwLnggLSB4KSAqIGR4ICsgKHAueSAtIHkpICogZHkpIC8gZG90OwoKICAJCWlmICh0ID4gMSkgewogIAkJCXggPSBwMi54OwogIAkJCXkgPSBwMi55OwogIAkJfSBlbHNlIGlmICh0ID4gMCkgewogIAkJCXggKz0gZHggKiB0OwogIAkJCXkgKz0gZHkgKiB0OwogIAkJfQogIAl9CgogIAlkeCA9IHAueCAtIHg7CiAgCWR5ID0gcC55IC0geTsKCiAgCXJldHVybiBzcURpc3QgPyBkeCAqIGR4ICsgZHkgKiBkeSA6IG5ldyBQb2ludCh4LCB5KTsKICB9CgoKICAvLyBAZnVuY3Rpb24gaXNGbGF0KGxhdGxuZ3M6IExhdExuZ1tdKTogQm9vbGVhbgogIC8vIFJldHVybnMgdHJ1ZSBpZiBgbGF0bG5nc2AgaXMgYSBmbGF0IGFycmF5LCBmYWxzZSBpcyBuZXN0ZWQuCiAgZnVuY3Rpb24gaXNGbGF0KGxhdGxuZ3MpIHsKICAJcmV0dXJuICFpc0FycmF5KGxhdGxuZ3NbMF0pIHx8ICh0eXBlb2YgbGF0bG5nc1swXVswXSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGxhdGxuZ3NbMF1bMF0gIT09ICd1bmRlZmluZWQnKTsKICB9CgogIGZ1bmN0aW9uIF9mbGF0KGxhdGxuZ3MpIHsKICAJY29uc29sZS53YXJuKCdEZXByZWNhdGVkIHVzZSBvZiBfZmxhdCwgcGxlYXNlIHVzZSBMLkxpbmVVdGlsLmlzRmxhdCBpbnN0ZWFkLicpOwogIAlyZXR1cm4gaXNGbGF0KGxhdGxuZ3MpOwogIH0KCiAgdmFyIExpbmVVdGlsID0gewogICAgX19wcm90b19fOiBudWxsLAogICAgc2ltcGxpZnk6IHNpbXBsaWZ5LAogICAgcG9pbnRUb1NlZ21lbnREaXN0YW5jZTogcG9pbnRUb1NlZ21lbnREaXN0YW5jZSwKICAgIGNsb3Nlc3RQb2ludE9uU2VnbWVudDogY2xvc2VzdFBvaW50T25TZWdtZW50LAogICAgY2xpcFNlZ21lbnQ6IGNsaXBTZWdtZW50LAogICAgX2dldEVkZ2VJbnRlcnNlY3Rpb246IF9nZXRFZGdlSW50ZXJzZWN0aW9uLAogICAgX2dldEJpdENvZGU6IF9nZXRCaXRDb2RlLAogICAgX3NxQ2xvc2VzdFBvaW50T25TZWdtZW50OiBfc3FDbG9zZXN0UG9pbnRPblNlZ21lbnQsCiAgICBpc0ZsYXQ6IGlzRmxhdCwKICAgIF9mbGF0OiBfZmxhdAogIH07CgogIC8qCiAgICogQG5hbWVzcGFjZSBQb2x5VXRpbAogICAqIFZhcmlvdXMgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHBvbHlnb24gZ2VvbWV0cmllcy4KICAgKi8KCiAgLyogQGZ1bmN0aW9uIGNsaXBQb2x5Z29uKHBvaW50czogUG9pbnRbXSwgYm91bmRzOiBCb3VuZHMsIHJvdW5kPzogQm9vbGVhbik6IFBvaW50W10KICAgKiBDbGlwcyB0aGUgcG9seWdvbiBnZW9tZXRyeSBkZWZpbmVkIGJ5IHRoZSBnaXZlbiBgcG9pbnRzYCBieSB0aGUgZ2l2ZW4gYm91bmRzICh1c2luZyB0aGUgW1N1dGhlcmxhbmQtSG9kZ21hbiBhbGdvcml0aG1dKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N1dGhlcmxhbmQlRTIlODAlOTNIb2RnbWFuX2FsZ29yaXRobSkpLgogICAqIFVzZWQgYnkgTGVhZmxldCB0byBvbmx5IHNob3cgcG9seWdvbiBwb2ludHMgdGhhdCBhcmUgb24gdGhlIHNjcmVlbiBvciBuZWFyLCBpbmNyZWFzaW5nCiAgICogcGVyZm9ybWFuY2UuIE5vdGUgdGhhdCBwb2x5Z29uIHBvaW50cyBuZWVkcyBkaWZmZXJlbnQgYWxnb3JpdGhtIGZvciBjbGlwcGluZwogICAqIHRoYW4gcG9seWxpbmUsIHNvIHRoZXJlJ3MgYSBzZXBhcmF0ZSBtZXRob2QgZm9yIGl0LgogICAqLwogIGZ1bmN0aW9uIGNsaXBQb2x5Z29uKHBvaW50cywgYm91bmRzLCByb3VuZCkgewogIAl2YXIgY2xpcHBlZFBvaW50cywKICAJICAgIGVkZ2VzID0gWzEsIDQsIDIsIDhdLAogIAkgICAgaSwgaiwgaywKICAJICAgIGEsIGIsCiAgCSAgICBsZW4sIGVkZ2UsIHA7CgogIAlmb3IgKGkgPSAwLCBsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCXBvaW50c1tpXS5fY29kZSA9IF9nZXRCaXRDb2RlKHBvaW50c1tpXSwgYm91bmRzKTsKICAJfQoKICAJLy8gZm9yIGVhY2ggZWRnZSAobGVmdCwgYm90dG9tLCByaWdodCwgdG9wKQogIAlmb3IgKGsgPSAwOyBrIDwgNDsgaysrKSB7CiAgCQllZGdlID0gZWRnZXNba107CiAgCQljbGlwcGVkUG9pbnRzID0gW107CgogIAkJZm9yIChpID0gMCwgbGVuID0gcG9pbnRzLmxlbmd0aCwgaiA9IGxlbiAtIDE7IGkgPCBsZW47IGogPSBpKyspIHsKICAJCQlhID0gcG9pbnRzW2ldOwogIAkJCWIgPSBwb2ludHNbal07CgogIAkJCS8vIGlmIGEgaXMgaW5zaWRlIHRoZSBjbGlwIHdpbmRvdwogIAkJCWlmICghKGEuX2NvZGUgJiBlZGdlKSkgewogIAkJCQkvLyBpZiBiIGlzIG91dHNpZGUgdGhlIGNsaXAgd2luZG93IChhLT5iIGdvZXMgb3V0IG9mIHNjcmVlbikKICAJCQkJaWYgKGIuX2NvZGUgJiBlZGdlKSB7CiAgCQkJCQlwID0gX2dldEVkZ2VJbnRlcnNlY3Rpb24oYiwgYSwgZWRnZSwgYm91bmRzLCByb3VuZCk7CiAgCQkJCQlwLl9jb2RlID0gX2dldEJpdENvZGUocCwgYm91bmRzKTsKICAJCQkJCWNsaXBwZWRQb2ludHMucHVzaChwKTsKICAJCQkJfQogIAkJCQljbGlwcGVkUG9pbnRzLnB1c2goYSk7CgogIAkJCS8vIGVsc2UgaWYgYiBpcyBpbnNpZGUgdGhlIGNsaXAgd2luZG93IChhLT5iIGVudGVycyB0aGUgc2NyZWVuKQogIAkJCX0gZWxzZSBpZiAoIShiLl9jb2RlICYgZWRnZSkpIHsKICAJCQkJcCA9IF9nZXRFZGdlSW50ZXJzZWN0aW9uKGIsIGEsIGVkZ2UsIGJvdW5kcywgcm91bmQpOwogIAkJCQlwLl9jb2RlID0gX2dldEJpdENvZGUocCwgYm91bmRzKTsKICAJCQkJY2xpcHBlZFBvaW50cy5wdXNoKHApOwogIAkJCX0KICAJCX0KICAJCXBvaW50cyA9IGNsaXBwZWRQb2ludHM7CiAgCX0KCiAgCXJldHVybiBwb2ludHM7CiAgfQoKICB2YXIgUG9seVV0aWwgPSB7CiAgICBfX3Byb3RvX186IG51bGwsCiAgICBjbGlwUG9seWdvbjogY2xpcFBvbHlnb24KICB9OwoKICAvKgogICAqIEBuYW1lc3BhY2UgUHJvamVjdGlvbgogICAqIEBzZWN0aW9uCiAgICogTGVhZmxldCBjb21lcyB3aXRoIGEgc2V0IG9mIGFscmVhZHkgZGVmaW5lZCBQcm9qZWN0aW9ucyBvdXQgb2YgdGhlIGJveDoKICAgKgogICAqIEBwcm9qZWN0aW9uIEwuUHJvamVjdGlvbi5Mb25MYXQKICAgKgogICAqIEVxdWlyZWN0YW5ndWxhciwgb3IgUGxhdGUgQ2FycmVlIHByb2plY3Rpb24g4oCUIHRoZSBtb3N0IHNpbXBsZSBwcm9qZWN0aW9uLAogICAqIG1vc3RseSB1c2VkIGJ5IEdJUyBlbnRodXNpYXN0cy4gRGlyZWN0bHkgbWFwcyBgeGAgYXMgbG9uZ2l0dWRlLCBhbmQgYHlgIGFzCiAgICogbGF0aXR1ZGUuIEFsc28gc3VpdGFibGUgZm9yIGZsYXQgd29ybGRzLCBlLmcuIGdhbWUgbWFwcy4gVXNlZCBieSB0aGUKICAgKiBgRVBTRzo0MzI2YCBhbmQgYFNpbXBsZWAgQ1JTLgogICAqLwoKICB2YXIgTG9uTGF0ID0gewogIAlwcm9qZWN0OiBmdW5jdGlvbiAobGF0bG5nKSB7CiAgCQlyZXR1cm4gbmV3IFBvaW50KGxhdGxuZy5sbmcsIGxhdGxuZy5sYXQpOwogIAl9LAoKICAJdW5wcm9qZWN0OiBmdW5jdGlvbiAocG9pbnQpIHsKICAJCXJldHVybiBuZXcgTGF0TG5nKHBvaW50LnksIHBvaW50LngpOwogIAl9LAoKICAJYm91bmRzOiBuZXcgQm91bmRzKFstMTgwLCAtOTBdLCBbMTgwLCA5MF0pCiAgfTsKCiAgLyoKICAgKiBAbmFtZXNwYWNlIFByb2plY3Rpb24KICAgKiBAcHJvamVjdGlvbiBMLlByb2plY3Rpb24uTWVyY2F0b3IKICAgKgogICAqIEVsbGlwdGljYWwgTWVyY2F0b3IgcHJvamVjdGlvbiDigJQgbW9yZSBjb21wbGV4IHRoYW4gU3BoZXJpY2FsIE1lcmNhdG9yLiBBc3N1bWVzIHRoYXQgRWFydGggaXMgYW4gZWxsaXBzb2lkLiBVc2VkIGJ5IHRoZSBFUFNHOjMzOTUgQ1JTLgogICAqLwoKICB2YXIgTWVyY2F0b3IgPSB7CiAgCVI6IDYzNzgxMzcsCiAgCVJfTUlOT1I6IDYzNTY3NTIuMzE0MjQ1MTc5LAoKICAJYm91bmRzOiBuZXcgQm91bmRzKFstMjAwMzc1MDguMzQyNzksIC0xNTQ5NjU3MC43Mzk3Ml0sIFsyMDAzNzUwOC4zNDI3OSwgMTg3NjQ2NTYuMjMxMzhdKSwKCiAgCXByb2plY3Q6IGZ1bmN0aW9uIChsYXRsbmcpIHsKICAJCXZhciBkID0gTWF0aC5QSSAvIDE4MCwKICAJCSAgICByID0gdGhpcy5SLAogIAkJICAgIHkgPSBsYXRsbmcubGF0ICogZCwKICAJCSAgICB0bXAgPSB0aGlzLlJfTUlOT1IgLyByLAogIAkJICAgIGUgPSBNYXRoLnNxcnQoMSAtIHRtcCAqIHRtcCksCiAgCQkgICAgY29uID0gZSAqIE1hdGguc2luKHkpOwoKICAJCXZhciB0cyA9IE1hdGgudGFuKE1hdGguUEkgLyA0IC0geSAvIDIpIC8gTWF0aC5wb3coKDEgLSBjb24pIC8gKDEgKyBjb24pLCBlIC8gMik7CiAgCQl5ID0gLXIgKiBNYXRoLmxvZyhNYXRoLm1heCh0cywgMUUtMTApKTsKCiAgCQlyZXR1cm4gbmV3IFBvaW50KGxhdGxuZy5sbmcgKiBkICogciwgeSk7CiAgCX0sCgogIAl1bnByb2plY3Q6IGZ1bmN0aW9uIChwb2ludCkgewogIAkJdmFyIGQgPSAxODAgLyBNYXRoLlBJLAogIAkJICAgIHIgPSB0aGlzLlIsCiAgCQkgICAgdG1wID0gdGhpcy5SX01JTk9SIC8gciwKICAJCSAgICBlID0gTWF0aC5zcXJ0KDEgLSB0bXAgKiB0bXApLAogIAkJICAgIHRzID0gTWF0aC5leHAoLXBvaW50LnkgLyByKSwKICAJCSAgICBwaGkgPSBNYXRoLlBJIC8gMiAtIDIgKiBNYXRoLmF0YW4odHMpOwoKICAJCWZvciAodmFyIGkgPSAwLCBkcGhpID0gMC4xLCBjb247IGkgPCAxNSAmJiBNYXRoLmFicyhkcGhpKSA+IDFlLTc7IGkrKykgewogIAkJCWNvbiA9IGUgKiBNYXRoLnNpbihwaGkpOwogIAkJCWNvbiA9IE1hdGgucG93KCgxIC0gY29uKSAvICgxICsgY29uKSwgZSAvIDIpOwogIAkJCWRwaGkgPSBNYXRoLlBJIC8gMiAtIDIgKiBNYXRoLmF0YW4odHMgKiBjb24pIC0gcGhpOwogIAkJCXBoaSArPSBkcGhpOwogIAkJfQoKICAJCXJldHVybiBuZXcgTGF0TG5nKHBoaSAqIGQsIHBvaW50LnggKiBkIC8gcik7CiAgCX0KICB9OwoKICAvKgogICAqIEBjbGFzcyBQcm9qZWN0aW9uCgogICAqIEFuIG9iamVjdCB3aXRoIG1ldGhvZHMgZm9yIHByb2plY3RpbmcgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGVzIG9mIHRoZSB3b3JsZCBvbnRvCiAgICogYSBmbGF0IHN1cmZhY2UgKGFuZCBiYWNrKS4gU2VlIFtNYXAgcHJvamVjdGlvbl0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFwX3Byb2plY3Rpb24pLgoKICAgKiBAcHJvcGVydHkgYm91bmRzOiBCb3VuZHMKICAgKiBUaGUgYm91bmRzIChzcGVjaWZpZWQgaW4gQ1JTIHVuaXRzKSB3aGVyZSB0aGUgcHJvamVjdGlvbiBpcyB2YWxpZAoKICAgKiBAbWV0aG9kIHByb2plY3QobGF0bG5nOiBMYXRMbmcpOiBQb2ludAogICAqIFByb2plY3RzIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcyBpbnRvIGEgMkQgcG9pbnQuCiAgICogT25seSBhY2NlcHRzIGFjdHVhbCBgTC5MYXRMbmdgIGluc3RhbmNlcywgbm90IGFycmF5cy4KCiAgICogQG1ldGhvZCB1bnByb2plY3QocG9pbnQ6IFBvaW50KTogTGF0TG5nCiAgICogVGhlIGludmVyc2Ugb2YgYHByb2plY3RgLiBQcm9qZWN0cyBhIDJEIHBvaW50IGludG8gYSBnZW9ncmFwaGljYWwgbG9jYXRpb24uCiAgICogT25seSBhY2NlcHRzIGFjdHVhbCBgTC5Qb2ludGAgaW5zdGFuY2VzLCBub3QgYXJyYXlzLgoKICAgKiBOb3RlIHRoYXQgdGhlIHByb2plY3Rpb24gaW5zdGFuY2VzIGRvIG5vdCBpbmhlcml0IGZyb20gTGVhZmxldCdzIGBDbGFzc2Agb2JqZWN0LAogICAqIGFuZCBjYW4ndCBiZSBpbnN0YW50aWF0ZWQuIEFsc28sIG5ldyBjbGFzc2VzIGNhbid0IGluaGVyaXQgZnJvbSB0aGVtLAogICAqIGFuZCBtZXRob2RzIGNhbid0IGJlIGFkZGVkIHRvIHRoZW0gd2l0aCB0aGUgYGluY2x1ZGVgIGZ1bmN0aW9uLgoKICAgKi8KCiAgdmFyIGluZGV4ID0gewogICAgX19wcm90b19fOiBudWxsLAogICAgTG9uTGF0OiBMb25MYXQsCiAgICBNZXJjYXRvcjogTWVyY2F0b3IsCiAgICBTcGhlcmljYWxNZXJjYXRvcjogU3BoZXJpY2FsTWVyY2F0b3IKICB9OwoKICAvKgogICAqIEBuYW1lc3BhY2UgQ1JTCiAgICogQGNycyBMLkNSUy5FUFNHMzM5NQogICAqCiAgICogUmFyZWx5IHVzZWQgYnkgc29tZSBjb21tZXJjaWFsIHRpbGUgcHJvdmlkZXJzLiBVc2VzIEVsbGlwdGljYWwgTWVyY2F0b3IgcHJvamVjdGlvbi4KICAgKi8KICB2YXIgRVBTRzMzOTUgPSBleHRlbmQoe30sIEVhcnRoLCB7CiAgCWNvZGU6ICdFUFNHOjMzOTUnLAogIAlwcm9qZWN0aW9uOiBNZXJjYXRvciwKCiAgCXRyYW5zZm9ybWF0aW9uOiAoZnVuY3Rpb24gKCkgewogIAkJdmFyIHNjYWxlID0gMC41IC8gKE1hdGguUEkgKiBNZXJjYXRvci5SKTsKICAJCXJldHVybiB0b1RyYW5zZm9ybWF0aW9uKHNjYWxlLCAwLjUsIC1zY2FsZSwgMC41KTsKICAJfSgpKQogIH0pOwoKICAvKgogICAqIEBuYW1lc3BhY2UgQ1JTCiAgICogQGNycyBMLkNSUy5FUFNHNDMyNgogICAqCiAgICogQSBjb21tb24gQ1JTIGFtb25nIEdJUyBlbnRodXNpYXN0cy4gVXNlcyBzaW1wbGUgRXF1aXJlY3Rhbmd1bGFyIHByb2plY3Rpb24uCiAgICoKICAgKiBMZWFmbGV0IDEuMC54IGNvbXBsaWVzIHdpdGggdGhlIFtUTVMgY29vcmRpbmF0ZSBzY2hlbWUgZm9yIEVQU0c6NDMyNl0oaHR0cHM6Ly93aWtpLm9zZ2VvLm9yZy93aWtpL1RpbGVfTWFwX1NlcnZpY2VfU3BlY2lmaWNhdGlvbiNnbG9iYWwtZ2VvZGV0aWMpLAogICAqIHdoaWNoIGlzIGEgYnJlYWtpbmcgY2hhbmdlIGZyb20gMC43LnggYmVoYXZpb3VyLiAgSWYgeW91IGFyZSB1c2luZyBhIGBUaWxlTGF5ZXJgCiAgICogd2l0aCB0aGlzIENSUywgZW5zdXJlIHRoYXQgdGhlcmUgYXJlIHR3byAyNTZ4MjU2IHBpeGVsIHRpbGVzIGNvdmVyaW5nIHRoZQogICAqIHdob2xlIGVhcnRoIGF0IHpvb20gbGV2ZWwgemVybywgYW5kIHRoYXQgdGhlIHRpbGUgY29vcmRpbmF0ZSBvcmlnaW4gaXMgKC0xODAsKzkwKSwKICAgKiBvciAoLTE4MCwtOTApIGZvciBgVGlsZUxheWVyYHMgd2l0aCBbdGhlIGB0bXNgIG9wdGlvbl0oI3RpbGVsYXllci10bXMpIHNldC4KICAgKi8KCiAgdmFyIEVQU0c0MzI2ID0gZXh0ZW5kKHt9LCBFYXJ0aCwgewogIAljb2RlOiAnRVBTRzo0MzI2JywKICAJcHJvamVjdGlvbjogTG9uTGF0LAogIAl0cmFuc2Zvcm1hdGlvbjogdG9UcmFuc2Zvcm1hdGlvbigxIC8gMTgwLCAxLCAtMSAvIDE4MCwgMC41KQogIH0pOwoKICAvKgogICAqIEBuYW1lc3BhY2UgQ1JTCiAgICogQGNycyBMLkNSUy5TaW1wbGUKICAgKgogICAqIEEgc2ltcGxlIENSUyB0aGF0IG1hcHMgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBpbnRvIGB4YCBhbmQgYHlgIGRpcmVjdGx5LgogICAqIE1heSBiZSB1c2VkIGZvciBtYXBzIG9mIGZsYXQgc3VyZmFjZXMgKGUuZy4gZ2FtZSBtYXBzKS4gTm90ZSB0aGF0IHRoZSBgeWAKICAgKiBheGlzIHNob3VsZCBzdGlsbCBiZSBpbnZlcnRlZCAoZ29pbmcgZnJvbSBib3R0b20gdG8gdG9wKS4gYGRpc3RhbmNlKClgIHJldHVybnMKICAgKiBzaW1wbGUgZXVjbGlkZWFuIGRpc3RhbmNlLgogICAqLwoKICB2YXIgU2ltcGxlID0gZXh0ZW5kKHt9LCBDUlMsIHsKICAJcHJvamVjdGlvbjogTG9uTGF0LAogIAl0cmFuc2Zvcm1hdGlvbjogdG9UcmFuc2Zvcm1hdGlvbigxLCAwLCAtMSwgMCksCgogIAlzY2FsZTogZnVuY3Rpb24gKHpvb20pIHsKICAJCXJldHVybiBNYXRoLnBvdygyLCB6b29tKTsKICAJfSwKCiAgCXpvb206IGZ1bmN0aW9uIChzY2FsZSkgewogIAkJcmV0dXJuIE1hdGgubG9nKHNjYWxlKSAvIE1hdGguTE4yOwogIAl9LAoKICAJZGlzdGFuY2U6IGZ1bmN0aW9uIChsYXRsbmcxLCBsYXRsbmcyKSB7CiAgCQl2YXIgZHggPSBsYXRsbmcyLmxuZyAtIGxhdGxuZzEubG5nLAogIAkJICAgIGR5ID0gbGF0bG5nMi5sYXQgLSBsYXRsbmcxLmxhdDsKCiAgCQlyZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTsKICAJfSwKCiAgCWluZmluaXRlOiB0cnVlCiAgfSk7CgogIENSUy5FYXJ0aCA9IEVhcnRoOwogIENSUy5FUFNHMzM5NSA9IEVQU0czMzk1OwogIENSUy5FUFNHMzg1NyA9IEVQU0czODU3OwogIENSUy5FUFNHOTAwOTEzID0gRVBTRzkwMDkxMzsKICBDUlMuRVBTRzQzMjYgPSBFUFNHNDMyNjsKICBDUlMuU2ltcGxlID0gU2ltcGxlOwoKICAvKgogICAqIEBjbGFzcyBMYXllcgogICAqIEBpbmhlcml0cyBFdmVudGVkCiAgICogQGFrYSBMLkxheWVyCiAgICogQGFrYSBJTGF5ZXIKICAgKgogICAqIEEgc2V0IG9mIG1ldGhvZHMgZnJvbSB0aGUgTGF5ZXIgYmFzZSBjbGFzcyB0aGF0IGFsbCBMZWFmbGV0IGxheWVycyB1c2UuCiAgICogSW5oZXJpdHMgYWxsIG1ldGhvZHMsIG9wdGlvbnMgYW5kIGV2ZW50cyBmcm9tIGBMLkV2ZW50ZWRgLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogdmFyIGxheWVyID0gTC5tYXJrZXIobGF0bG5nKS5hZGRUbyhtYXApOwogICAqIGxheWVyLmFkZFRvKG1hcCk7CiAgICogbGF5ZXIucmVtb3ZlKCk7CiAgICogYGBgCiAgICoKICAgKiBAZXZlbnQgYWRkOiBFdmVudAogICAqIEZpcmVkIGFmdGVyIHRoZSBsYXllciBpcyBhZGRlZCB0byBhIG1hcAogICAqCiAgICogQGV2ZW50IHJlbW92ZTogRXZlbnQKICAgKiBGaXJlZCBhZnRlciB0aGUgbGF5ZXIgaXMgcmVtb3ZlZCBmcm9tIGEgbWFwCiAgICovCgoKICB2YXIgTGF5ZXIgPSBFdmVudGVkLmV4dGVuZCh7CgogIAkvLyBDbGFzc2VzIGV4dGVuZGluZyBgTC5MYXllcmAgd2lsbCBpbmhlcml0IHRoZSBmb2xsb3dpbmcgb3B0aW9uczoKICAJb3B0aW9uczogewogIAkJLy8gQG9wdGlvbiBwYW5lOiBTdHJpbmcgPSAnb3ZlcmxheVBhbmUnCiAgCQkvLyBCeSBkZWZhdWx0IHRoZSBsYXllciB3aWxsIGJlIGFkZGVkIHRvIHRoZSBtYXAncyBbb3ZlcmxheSBwYW5lXSgjbWFwLW92ZXJsYXlwYW5lKS4gT3ZlcnJpZGluZyB0aGlzIG9wdGlvbiB3aWxsIGNhdXNlIHRoZSBsYXllciB0byBiZSBwbGFjZWQgb24gYW5vdGhlciBwYW5lIGJ5IGRlZmF1bHQuCiAgCQlwYW5lOiAnb3ZlcmxheVBhbmUnLAoKICAJCS8vIEBvcHRpb24gYXR0cmlidXRpb246IFN0cmluZyA9IG51bGwKICAJCS8vIFN0cmluZyB0byBiZSBzaG93biBpbiB0aGUgYXR0cmlidXRpb24gY29udHJvbCwgZS5nLiAiwqkgT3BlblN0cmVldE1hcCBjb250cmlidXRvcnMiLiBJdCBkZXNjcmliZXMgdGhlIGxheWVyIGRhdGEgYW5kIGlzIG9mdGVuIGEgbGVnYWwgb2JsaWdhdGlvbiB0b3dhcmRzIGNvcHlyaWdodCBob2xkZXJzIGFuZCB0aWxlIHByb3ZpZGVycy4KICAJCWF0dHJpYnV0aW9uOiBudWxsLAoKICAJCWJ1YmJsaW5nTW91c2VFdmVudHM6IHRydWUKICAJfSwKCiAgCS8qIEBzZWN0aW9uCiAgCSAqIENsYXNzZXMgZXh0ZW5kaW5nIGBMLkxheWVyYCB3aWxsIGluaGVyaXQgdGhlIGZvbGxvd2luZyBtZXRob2RzOgogIAkgKgogIAkgKiBAbWV0aG9kIGFkZFRvKG1hcDogTWFwfExheWVyR3JvdXApOiB0aGlzCiAgCSAqIEFkZHMgdGhlIGxheWVyIHRvIHRoZSBnaXZlbiBtYXAgb3IgbGF5ZXIgZ3JvdXAuCiAgCSAqLwogIAlhZGRUbzogZnVuY3Rpb24gKG1hcCkgewogIAkJbWFwLmFkZExheWVyKHRoaXMpOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHJlbW92ZTogdGhpcwogIAkvLyBSZW1vdmVzIHRoZSBsYXllciBmcm9tIHRoZSBtYXAgaXQgaXMgY3VycmVudGx5IGFjdGl2ZSBvbi4KICAJcmVtb3ZlOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5yZW1vdmVGcm9tKHRoaXMuX21hcCB8fCB0aGlzLl9tYXBUb0FkZCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHJlbW92ZUZyb20obWFwOiBNYXApOiB0aGlzCiAgCS8vIFJlbW92ZXMgdGhlIGxheWVyIGZyb20gdGhlIGdpdmVuIG1hcAogIAkvLwogIAkvLyBAYWx0ZXJuYXRpdmUKICAJLy8gQG1ldGhvZCByZW1vdmVGcm9tKGdyb3VwOiBMYXllckdyb3VwKTogdGhpcwogIAkvLyBSZW1vdmVzIHRoZSBsYXllciBmcm9tIHRoZSBnaXZlbiBgTGF5ZXJHcm91cGAKICAJcmVtb3ZlRnJvbTogZnVuY3Rpb24gKG9iaikgewogIAkJaWYgKG9iaikgewogIAkJCW9iai5yZW1vdmVMYXllcih0aGlzKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRQYW5lKG5hbWU/IDogU3RyaW5nKTogSFRNTEVsZW1lbnQKICAJLy8gUmV0dXJucyB0aGUgYEhUTUxFbGVtZW50YCByZXByZXNlbnRpbmcgdGhlIG5hbWVkIHBhbmUgb24gdGhlIG1hcC4gSWYgYG5hbWVgIGlzIG9taXR0ZWQsIHJldHVybnMgdGhlIHBhbmUgZm9yIHRoaXMgbGF5ZXIuCiAgCWdldFBhbmU6IGZ1bmN0aW9uIChuYW1lKSB7CiAgCQlyZXR1cm4gdGhpcy5fbWFwLmdldFBhbmUobmFtZSA/ICh0aGlzLm9wdGlvbnNbbmFtZV0gfHwgbmFtZSkgOiB0aGlzLm9wdGlvbnMucGFuZSk7CiAgCX0sCgogIAlhZGRJbnRlcmFjdGl2ZVRhcmdldDogZnVuY3Rpb24gKHRhcmdldEVsKSB7CiAgCQl0aGlzLl9tYXAuX3RhcmdldHNbc3RhbXAodGFyZ2V0RWwpXSA9IHRoaXM7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCXJlbW92ZUludGVyYWN0aXZlVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0RWwpIHsKICAJCWRlbGV0ZSB0aGlzLl9tYXAuX3RhcmdldHNbc3RhbXAodGFyZ2V0RWwpXTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRBdHRyaWJ1dGlvbjogU3RyaW5nCiAgCS8vIFVzZWQgYnkgdGhlIGBhdHRyaWJ1dGlvbiBjb250cm9sYCwgcmV0dXJucyB0aGUgW2F0dHJpYnV0aW9uIG9wdGlvbl0oI2dyaWRsYXllci1hdHRyaWJ1dGlvbikuCiAgCWdldEF0dHJpYnV0aW9uOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5vcHRpb25zLmF0dHJpYnV0aW9uOwogIAl9LAoKICAJX2xheWVyQWRkOiBmdW5jdGlvbiAoZSkgewogIAkJdmFyIG1hcCA9IGUudGFyZ2V0OwoKICAJCS8vIGNoZWNrIGluIGNhc2UgbGF5ZXIgZ2V0cyBhZGRlZCBhbmQgdGhlbiByZW1vdmVkIGJlZm9yZSB0aGUgbWFwIGlzIHJlYWR5CiAgCQlpZiAoIW1hcC5oYXNMYXllcih0aGlzKSkgeyByZXR1cm47IH0KCiAgCQl0aGlzLl9tYXAgPSBtYXA7CiAgCQl0aGlzLl96b29tQW5pbWF0ZWQgPSBtYXAuX3pvb21BbmltYXRlZDsKCiAgCQlpZiAodGhpcy5nZXRFdmVudHMpIHsKICAJCQl2YXIgZXZlbnRzID0gdGhpcy5nZXRFdmVudHMoKTsKICAJCQltYXAub24oZXZlbnRzLCB0aGlzKTsKICAJCQl0aGlzLm9uY2UoJ3JlbW92ZScsIGZ1bmN0aW9uICgpIHsKICAJCQkJbWFwLm9mZihldmVudHMsIHRoaXMpOwogIAkJCX0sIHRoaXMpOwogIAkJfQoKICAJCXRoaXMub25BZGQobWFwKTsKCiAgCQl0aGlzLmZpcmUoJ2FkZCcpOwogIAkJbWFwLmZpcmUoJ2xheWVyYWRkJywge2xheWVyOiB0aGlzfSk7CiAgCX0KICB9KTsKCiAgLyogQHNlY3Rpb24gRXh0ZW5zaW9uIG1ldGhvZHMKICAgKiBAdW5pbmhlcml0YWJsZQogICAqCiAgICogRXZlcnkgbGF5ZXIgc2hvdWxkIGV4dGVuZCBmcm9tIGBMLkxheWVyYCBhbmQgKHJlLSlpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBtZXRob2RzLgogICAqCiAgICogQG1ldGhvZCBvbkFkZChtYXA6IE1hcCk6IHRoaXMKICAgKiBTaG91bGQgY29udGFpbiBjb2RlIHRoYXQgY3JlYXRlcyBET00gZWxlbWVudHMgZm9yIHRoZSBsYXllciwgYWRkcyB0aGVtIHRvIGBtYXAgcGFuZXNgIHdoZXJlIHRoZXkgc2hvdWxkIGJlbG9uZyBhbmQgcHV0cyBsaXN0ZW5lcnMgb24gcmVsZXZhbnQgbWFwIGV2ZW50cy4gQ2FsbGVkIG9uIFtgbWFwLmFkZExheWVyKGxheWVyKWBdKCNtYXAtYWRkbGF5ZXIpLgogICAqCiAgICogQG1ldGhvZCBvblJlbW92ZShtYXA6IE1hcCk6IHRoaXMKICAgKiBTaG91bGQgY29udGFpbiBhbGwgY2xlYW4gdXAgY29kZSB0aGF0IHJlbW92ZXMgdGhlIGxheWVyJ3MgZWxlbWVudHMgZnJvbSB0aGUgRE9NIGFuZCByZW1vdmVzIGxpc3RlbmVycyBwcmV2aW91c2x5IGFkZGVkIGluIFtgb25BZGRgXSgjbGF5ZXItb25hZGQpLiBDYWxsZWQgb24gW2BtYXAucmVtb3ZlTGF5ZXIobGF5ZXIpYF0oI21hcC1yZW1vdmVsYXllcikuCiAgICoKICAgKiBAbWV0aG9kIGdldEV2ZW50cygpOiBPYmplY3QKICAgKiBUaGlzIG9wdGlvbmFsIG1ldGhvZCBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBsaWtlIGB7IHZpZXdyZXNldDogdGhpcy5fcmVzZXQgfWAgZm9yIFtgYWRkRXZlbnRMaXN0ZW5lcmBdKCNldmVudGVkLWFkZGV2ZW50bGlzdGVuZXIpLiBUaGUgZXZlbnQgaGFuZGxlcnMgaW4gdGhpcyBvYmplY3Qgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGFkZGVkIGFuZCByZW1vdmVkIGZyb20gdGhlIG1hcCB3aXRoIHlvdXIgbGF5ZXIuCiAgICoKICAgKiBAbWV0aG9kIGdldEF0dHJpYnV0aW9uKCk6IFN0cmluZwogICAqIFRoaXMgb3B0aW9uYWwgbWV0aG9kIHNob3VsZCByZXR1cm4gYSBzdHJpbmcgY29udGFpbmluZyBIVE1MIHRvIGJlIHNob3duIG9uIHRoZSBgQXR0cmlidXRpb24gY29udHJvbGAgd2hlbmV2ZXIgdGhlIGxheWVyIGlzIHZpc2libGUuCiAgICoKICAgKiBAbWV0aG9kIGJlZm9yZUFkZChtYXA6IE1hcCk6IHRoaXMKICAgKiBPcHRpb25hbCBtZXRob2QuIENhbGxlZCBvbiBbYG1hcC5hZGRMYXllcihsYXllcilgXSgjbWFwLWFkZGxheWVyKSwgYmVmb3JlIHRoZSBsYXllciBpcyBhZGRlZCB0byB0aGUgbWFwLCBiZWZvcmUgZXZlbnRzIGFyZSBpbml0aWFsaXplZCwgd2l0aG91dCB3YWl0aW5nIHVudGlsIHRoZSBtYXAgaXMgaW4gYSB1c2FibGUgc3RhdGUuIFVzZSBmb3IgZWFybHkgaW5pdGlhbGl6YXRpb24gb25seS4KICAgKi8KCgogIC8qIEBuYW1lc3BhY2UgTWFwCiAgICogQHNlY3Rpb24gTGF5ZXIgZXZlbnRzCiAgICoKICAgKiBAZXZlbnQgbGF5ZXJhZGQ6IExheWVyRXZlbnQKICAgKiBGaXJlZCB3aGVuIGEgbmV3IGxheWVyIGlzIGFkZGVkIHRvIHRoZSBtYXAuCiAgICoKICAgKiBAZXZlbnQgbGF5ZXJyZW1vdmU6IExheWVyRXZlbnQKICAgKiBGaXJlZCB3aGVuIHNvbWUgbGF5ZXIgaXMgcmVtb3ZlZCBmcm9tIHRoZSBtYXAKICAgKgogICAqIEBzZWN0aW9uIE1ldGhvZHMgZm9yIExheWVycyBhbmQgQ29udHJvbHMKICAgKi8KICBNYXAuaW5jbHVkZSh7CiAgCS8vIEBtZXRob2QgYWRkTGF5ZXIobGF5ZXI6IExheWVyKTogdGhpcwogIAkvLyBBZGRzIHRoZSBnaXZlbiBsYXllciB0byB0aGUgbWFwCiAgCWFkZExheWVyOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCWlmICghbGF5ZXIuX2xheWVyQWRkKSB7CiAgCQkJdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgb2JqZWN0IGlzIG5vdCBhIExheWVyLicpOwogIAkJfQoKICAJCXZhciBpZCA9IHN0YW1wKGxheWVyKTsKICAJCWlmICh0aGlzLl9sYXllcnNbaWRdKSB7IHJldHVybiB0aGlzOyB9CiAgCQl0aGlzLl9sYXllcnNbaWRdID0gbGF5ZXI7CgogIAkJbGF5ZXIuX21hcFRvQWRkID0gdGhpczsKCiAgCQlpZiAobGF5ZXIuYmVmb3JlQWRkKSB7CiAgCQkJbGF5ZXIuYmVmb3JlQWRkKHRoaXMpOwogIAkJfQoKICAJCXRoaXMud2hlblJlYWR5KGxheWVyLl9sYXllckFkZCwgbGF5ZXIpOwoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCByZW1vdmVMYXllcihsYXllcjogTGF5ZXIpOiB0aGlzCiAgCS8vIFJlbW92ZXMgdGhlIGdpdmVuIGxheWVyIGZyb20gdGhlIG1hcC4KICAJcmVtb3ZlTGF5ZXI6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIGlkID0gc3RhbXAobGF5ZXIpOwoKICAJCWlmICghdGhpcy5fbGF5ZXJzW2lkXSkgeyByZXR1cm4gdGhpczsgfQoKICAJCWlmICh0aGlzLl9sb2FkZWQpIHsKICAJCQlsYXllci5vblJlbW92ZSh0aGlzKTsKICAJCX0KCiAgCQlkZWxldGUgdGhpcy5fbGF5ZXJzW2lkXTsKCiAgCQlpZiAodGhpcy5fbG9hZGVkKSB7CiAgCQkJdGhpcy5maXJlKCdsYXllcnJlbW92ZScsIHtsYXllcjogbGF5ZXJ9KTsKICAJCQlsYXllci5maXJlKCdyZW1vdmUnKTsKICAJCX0KCiAgCQlsYXllci5fbWFwID0gbGF5ZXIuX21hcFRvQWRkID0gbnVsbDsKCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgaGFzTGF5ZXIobGF5ZXI6IExheWVyKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gbGF5ZXIgaXMgY3VycmVudGx5IGFkZGVkIHRvIHRoZSBtYXAKICAJaGFzTGF5ZXI6IGZ1bmN0aW9uIChsYXllcikgewogIAkJcmV0dXJuIHN0YW1wKGxheWVyKSBpbiB0aGlzLl9sYXllcnM7CiAgCX0sCgogIAkvKiBAbWV0aG9kIGVhY2hMYXllcihmbjogRnVuY3Rpb24sIGNvbnRleHQ/OiBPYmplY3QpOiB0aGlzCiAgCSAqIEl0ZXJhdGVzIG92ZXIgdGhlIGxheWVycyBvZiB0aGUgbWFwLCBvcHRpb25hbGx5IHNwZWNpZnlpbmcgY29udGV4dCBvZiB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uCiAgCSAqIGBgYAogIAkgKiBtYXAuZWFjaExheWVyKGZ1bmN0aW9uKGxheWVyKXsKICAJICogICAgIGxheWVyLmJpbmRQb3B1cCgnSGVsbG8nKTsKICAJICogfSk7CiAgCSAqIGBgYAogIAkgKi8KICAJZWFjaExheWVyOiBmdW5jdGlvbiAobWV0aG9kLCBjb250ZXh0KSB7CiAgCQlmb3IgKHZhciBpIGluIHRoaXMuX2xheWVycykgewogIAkJCW1ldGhvZC5jYWxsKGNvbnRleHQsIHRoaXMuX2xheWVyc1tpXSk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9hZGRMYXllcnM6IGZ1bmN0aW9uIChsYXllcnMpIHsKICAJCWxheWVycyA9IGxheWVycyA/IChpc0FycmF5KGxheWVycykgPyBsYXllcnMgOiBbbGF5ZXJzXSkgOiBbXTsKCiAgCQlmb3IgKHZhciBpID0gMCwgbGVuID0gbGF5ZXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJdGhpcy5hZGRMYXllcihsYXllcnNbaV0pOwogIAkJfQogIAl9LAoKICAJX2FkZFpvb21MaW1pdDogZnVuY3Rpb24gKGxheWVyKSB7CiAgCQlpZiAoIWlzTmFOKGxheWVyLm9wdGlvbnMubWF4Wm9vbSkgfHwgIWlzTmFOKGxheWVyLm9wdGlvbnMubWluWm9vbSkpIHsKICAJCQl0aGlzLl96b29tQm91bmRMYXllcnNbc3RhbXAobGF5ZXIpXSA9IGxheWVyOwogIAkJCXRoaXMuX3VwZGF0ZVpvb21MZXZlbHMoKTsKICAJCX0KICAJfSwKCiAgCV9yZW1vdmVab29tTGltaXQ6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIGlkID0gc3RhbXAobGF5ZXIpOwoKICAJCWlmICh0aGlzLl96b29tQm91bmRMYXllcnNbaWRdKSB7CiAgCQkJZGVsZXRlIHRoaXMuX3pvb21Cb3VuZExheWVyc1tpZF07CiAgCQkJdGhpcy5fdXBkYXRlWm9vbUxldmVscygpOwogIAkJfQogIAl9LAoKICAJX3VwZGF0ZVpvb21MZXZlbHM6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBtaW5ab29tID0gSW5maW5pdHksCiAgCQkgICAgbWF4Wm9vbSA9IC1JbmZpbml0eSwKICAJCSAgICBvbGRab29tU3BhbiA9IHRoaXMuX2dldFpvb21TcGFuKCk7CgogIAkJZm9yICh2YXIgaSBpbiB0aGlzLl96b29tQm91bmRMYXllcnMpIHsKICAJCQl2YXIgb3B0aW9ucyA9IHRoaXMuX3pvb21Cb3VuZExheWVyc1tpXS5vcHRpb25zOwoKICAJCQltaW5ab29tID0gb3B0aW9ucy5taW5ab29tID09PSB1bmRlZmluZWQgPyBtaW5ab29tIDogTWF0aC5taW4obWluWm9vbSwgb3B0aW9ucy5taW5ab29tKTsKICAJCQltYXhab29tID0gb3B0aW9ucy5tYXhab29tID09PSB1bmRlZmluZWQgPyBtYXhab29tIDogTWF0aC5tYXgobWF4Wm9vbSwgb3B0aW9ucy5tYXhab29tKTsKICAJCX0KCiAgCQl0aGlzLl9sYXllcnNNYXhab29tID0gbWF4Wm9vbSA9PT0gLUluZmluaXR5ID8gdW5kZWZpbmVkIDogbWF4Wm9vbTsKICAJCXRoaXMuX2xheWVyc01pblpvb20gPSBtaW5ab29tID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IG1pblpvb207CgogIAkJLy8gQHNlY3Rpb24gTWFwIHN0YXRlIGNoYW5nZSBldmVudHMKICAJCS8vIEBldmVudCB6b29tbGV2ZWxzY2hhbmdlOiBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgbnVtYmVyIG9mIHpvb21sZXZlbHMgb24gdGhlIG1hcCBpcyBjaGFuZ2VkIGR1ZQogIAkJLy8gdG8gYWRkaW5nIG9yIHJlbW92aW5nIGEgbGF5ZXIuCiAgCQlpZiAob2xkWm9vbVNwYW4gIT09IHRoaXMuX2dldFpvb21TcGFuKCkpIHsKICAJCQl0aGlzLmZpcmUoJ3pvb21sZXZlbHNjaGFuZ2UnKTsKICAJCX0KCiAgCQlpZiAodGhpcy5vcHRpb25zLm1heFpvb20gPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9sYXllcnNNYXhab29tICYmIHRoaXMuZ2V0Wm9vbSgpID4gdGhpcy5fbGF5ZXJzTWF4Wm9vbSkgewogIAkJCXRoaXMuc2V0Wm9vbSh0aGlzLl9sYXllcnNNYXhab29tKTsKICAJCX0KICAJCWlmICh0aGlzLm9wdGlvbnMubWluWm9vbSA9PT0gdW5kZWZpbmVkICYmIHRoaXMuX2xheWVyc01pblpvb20gJiYgdGhpcy5nZXRab29tKCkgPCB0aGlzLl9sYXllcnNNaW5ab29tKSB7CiAgCQkJdGhpcy5zZXRab29tKHRoaXMuX2xheWVyc01pblpvb20pOwogIAkJfQogIAl9CiAgfSk7CgogIC8qCiAgICogQGNsYXNzIExheWVyR3JvdXAKICAgKiBAYWthIEwuTGF5ZXJHcm91cAogICAqIEBpbmhlcml0cyBJbnRlcmFjdGl2ZSBsYXllcgogICAqCiAgICogVXNlZCB0byBncm91cCBzZXZlcmFsIGxheWVycyBhbmQgaGFuZGxlIHRoZW0gYXMgb25lLiBJZiB5b3UgYWRkIGl0IHRvIHRoZSBtYXAsCiAgICogYW55IGxheWVycyBhZGRlZCBvciByZW1vdmVkIGZyb20gdGhlIGdyb3VwIHdpbGwgYmUgYWRkZWQvcmVtb3ZlZCBvbiB0aGUgbWFwIGFzCiAgICogd2VsbC4gRXh0ZW5kcyBgTGF5ZXJgLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogTC5sYXllckdyb3VwKFttYXJrZXIxLCBtYXJrZXIyXSkKICAgKiAJLmFkZExheWVyKHBvbHlsaW5lKQogICAqIAkuYWRkVG8obWFwKTsKICAgKiBgYGAKICAgKi8KCiAgdmFyIExheWVyR3JvdXAgPSBMYXllci5leHRlbmQoewoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGxheWVycywgb3B0aW9ucykgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKCiAgCQl0aGlzLl9sYXllcnMgPSB7fTsKCiAgCQl2YXIgaSwgbGVuOwoKICAJCWlmIChsYXllcnMpIHsKICAJCQlmb3IgKGkgPSAwLCBsZW4gPSBsYXllcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCQkJdGhpcy5hZGRMYXllcihsYXllcnNbaV0pOwogIAkJCX0KICAJCX0KICAJfSwKCiAgCS8vIEBtZXRob2QgYWRkTGF5ZXIobGF5ZXI6IExheWVyKTogdGhpcwogIAkvLyBBZGRzIHRoZSBnaXZlbiBsYXllciB0byB0aGUgZ3JvdXAuCiAgCWFkZExheWVyOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXZhciBpZCA9IHRoaXMuZ2V0TGF5ZXJJZChsYXllcik7CgogIAkJdGhpcy5fbGF5ZXJzW2lkXSA9IGxheWVyOwoKICAJCWlmICh0aGlzLl9tYXApIHsKICAJCQl0aGlzLl9tYXAuYWRkTGF5ZXIobGF5ZXIpOwogIAkJfQoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCByZW1vdmVMYXllcihsYXllcjogTGF5ZXIpOiB0aGlzCiAgCS8vIFJlbW92ZXMgdGhlIGdpdmVuIGxheWVyIGZyb20gdGhlIGdyb3VwLgogIAkvLyBAYWx0ZXJuYXRpdmUKICAJLy8gQG1ldGhvZCByZW1vdmVMYXllcihpZDogTnVtYmVyKTogdGhpcwogIAkvLyBSZW1vdmVzIHRoZSBsYXllciB3aXRoIHRoZSBnaXZlbiBpbnRlcm5hbCBJRCBmcm9tIHRoZSBncm91cC4KICAJcmVtb3ZlTGF5ZXI6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIGlkID0gbGF5ZXIgaW4gdGhpcy5fbGF5ZXJzID8gbGF5ZXIgOiB0aGlzLmdldExheWVySWQobGF5ZXIpOwoKICAJCWlmICh0aGlzLl9tYXAgJiYgdGhpcy5fbGF5ZXJzW2lkXSkgewogIAkJCXRoaXMuX21hcC5yZW1vdmVMYXllcih0aGlzLl9sYXllcnNbaWRdKTsKICAJCX0KCiAgCQlkZWxldGUgdGhpcy5fbGF5ZXJzW2lkXTsKCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgaGFzTGF5ZXIobGF5ZXI6IExheWVyKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gbGF5ZXIgaXMgY3VycmVudGx5IGFkZGVkIHRvIHRoZSBncm91cC4KICAJLy8gQGFsdGVybmF0aXZlCiAgCS8vIEBtZXRob2QgaGFzTGF5ZXIoaWQ6IE51bWJlcik6IEJvb2xlYW4KICAJLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGludGVybmFsIElEIGlzIGN1cnJlbnRseSBhZGRlZCB0byB0aGUgZ3JvdXAuCiAgCWhhc0xheWVyOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXZhciBsYXllcklkID0gdHlwZW9mIGxheWVyID09PSAnbnVtYmVyJyA/IGxheWVyIDogdGhpcy5nZXRMYXllcklkKGxheWVyKTsKICAJCXJldHVybiBsYXllcklkIGluIHRoaXMuX2xheWVyczsKICAJfSwKCiAgCS8vIEBtZXRob2QgY2xlYXJMYXllcnMoKTogdGhpcwogIAkvLyBSZW1vdmVzIGFsbCB0aGUgbGF5ZXJzIGZyb20gdGhlIGdyb3VwLgogIAljbGVhckxheWVyczogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuZWFjaExheWVyKHRoaXMucmVtb3ZlTGF5ZXIsIHRoaXMpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBpbnZva2UobWV0aG9kTmFtZTogU3RyaW5nLCDigKYpOiB0aGlzCiAgCS8vIENhbGxzIGBtZXRob2ROYW1lYCBvbiBldmVyeSBsYXllciBjb250YWluZWQgaW4gdGhpcyBncm91cCwgcGFzc2luZyBhbnkKICAJLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzLiBIYXMgbm8gZWZmZWN0IGlmIHRoZSBsYXllcnMgY29udGFpbmVkIGRvIG5vdAogIAkvLyBpbXBsZW1lbnQgYG1ldGhvZE5hbWVgLgogIAlpbnZva2U6IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7CiAgCQl2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksCiAgCQkgICAgaSwgbGF5ZXI7CgogIAkJZm9yIChpIGluIHRoaXMuX2xheWVycykgewogIAkJCWxheWVyID0gdGhpcy5fbGF5ZXJzW2ldOwoKICAJCQlpZiAobGF5ZXJbbWV0aG9kTmFtZV0pIHsKICAJCQkJbGF5ZXJbbWV0aG9kTmFtZV0uYXBwbHkobGF5ZXIsIGFyZ3MpOwogIAkJCX0KICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCW9uQWRkOiBmdW5jdGlvbiAobWFwKSB7CiAgCQl0aGlzLmVhY2hMYXllcihtYXAuYWRkTGF5ZXIsIG1hcCk7CiAgCX0sCgogIAlvblJlbW92ZTogZnVuY3Rpb24gKG1hcCkgewogIAkJdGhpcy5lYWNoTGF5ZXIobWFwLnJlbW92ZUxheWVyLCBtYXApOwogIAl9LAoKICAJLy8gQG1ldGhvZCBlYWNoTGF5ZXIoZm46IEZ1bmN0aW9uLCBjb250ZXh0PzogT2JqZWN0KTogdGhpcwogIAkvLyBJdGVyYXRlcyBvdmVyIHRoZSBsYXllcnMgb2YgdGhlIGdyb3VwLCBvcHRpb25hbGx5IHNwZWNpZnlpbmcgY29udGV4dCBvZiB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uCiAgCS8vIGBgYGpzCiAgCS8vIGdyb3VwLmVhY2hMYXllcihmdW5jdGlvbiAobGF5ZXIpIHsKICAJLy8gCWxheWVyLmJpbmRQb3B1cCgnSGVsbG8nKTsKICAJLy8gfSk7CiAgCS8vIGBgYAogIAllYWNoTGF5ZXI6IGZ1bmN0aW9uIChtZXRob2QsIGNvbnRleHQpIHsKICAJCWZvciAodmFyIGkgaW4gdGhpcy5fbGF5ZXJzKSB7CiAgCQkJbWV0aG9kLmNhbGwoY29udGV4dCwgdGhpcy5fbGF5ZXJzW2ldKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRMYXllcihpZDogTnVtYmVyKTogTGF5ZXIKICAJLy8gUmV0dXJucyB0aGUgbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gaW50ZXJuYWwgSUQuCiAgCWdldExheWVyOiBmdW5jdGlvbiAoaWQpIHsKICAJCXJldHVybiB0aGlzLl9sYXllcnNbaWRdOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRMYXllcnMoKTogTGF5ZXJbXQogIAkvLyBSZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbGF5ZXJzIGFkZGVkIHRvIHRoZSBncm91cC4KICAJZ2V0TGF5ZXJzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgbGF5ZXJzID0gW107CiAgCQl0aGlzLmVhY2hMYXllcihsYXllcnMucHVzaCwgbGF5ZXJzKTsKICAJCXJldHVybiBsYXllcnM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFpJbmRleCh6SW5kZXg6IE51bWJlcik6IHRoaXMKICAJLy8gQ2FsbHMgYHNldFpJbmRleGAgb24gZXZlcnkgbGF5ZXIgY29udGFpbmVkIGluIHRoaXMgZ3JvdXAsIHBhc3NpbmcgdGhlIHotaW5kZXguCiAgCXNldFpJbmRleDogZnVuY3Rpb24gKHpJbmRleCkgewogIAkJcmV0dXJuIHRoaXMuaW52b2tlKCdzZXRaSW5kZXgnLCB6SW5kZXgpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRMYXllcklkKGxheWVyOiBMYXllcik6IE51bWJlcgogIAkvLyBSZXR1cm5zIHRoZSBpbnRlcm5hbCBJRCBmb3IgYSBsYXllcgogIAlnZXRMYXllcklkOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXJldHVybiBzdGFtcChsYXllcik7CiAgCX0KICB9KTsKCgogIC8vIEBmYWN0b3J5IEwubGF5ZXJHcm91cChsYXllcnM/OiBMYXllcltdLCBvcHRpb25zPzogT2JqZWN0KQogIC8vIENyZWF0ZSBhIGxheWVyIGdyb3VwLCBvcHRpb25hbGx5IGdpdmVuIGFuIGluaXRpYWwgc2V0IG9mIGxheWVycyBhbmQgYW4gYG9wdGlvbnNgIG9iamVjdC4KICB2YXIgbGF5ZXJHcm91cCA9IGZ1bmN0aW9uIChsYXllcnMsIG9wdGlvbnMpIHsKICAJcmV0dXJuIG5ldyBMYXllckdyb3VwKGxheWVycywgb3B0aW9ucyk7CiAgfTsKCiAgLyoKICAgKiBAY2xhc3MgRmVhdHVyZUdyb3VwCiAgICogQGFrYSBMLkZlYXR1cmVHcm91cAogICAqIEBpbmhlcml0cyBMYXllckdyb3VwCiAgICoKICAgKiBFeHRlbmRlZCBgTGF5ZXJHcm91cGAgdGhhdCBtYWtlcyBpdCBlYXNpZXIgdG8gZG8gdGhlIHNhbWUgdGhpbmcgdG8gYWxsIGl0cyBtZW1iZXIgbGF5ZXJzOgogICAqICAqIFtgYmluZFBvcHVwYF0oI2xheWVyLWJpbmRwb3B1cCkgYmluZHMgYSBwb3B1cCB0byBhbGwgb2YgdGhlIGxheWVycyBhdCBvbmNlIChsaWtld2lzZSB3aXRoIFtgYmluZFRvb2x0aXBgXSgjbGF5ZXItYmluZHRvb2x0aXApKQogICAqICAqIEV2ZW50cyBhcmUgcHJvcGFnYXRlZCB0byB0aGUgYEZlYXR1cmVHcm91cGAsIHNvIGlmIHRoZSBncm91cCBoYXMgYW4gZXZlbnQKICAgKiBoYW5kbGVyLCBpdCB3aWxsIGhhbmRsZSBldmVudHMgZnJvbSBhbnkgb2YgdGhlIGxheWVycy4gVGhpcyBpbmNsdWRlcyBtb3VzZSBldmVudHMKICAgKiBhbmQgY3VzdG9tIGV2ZW50cy4KICAgKiAgKiBIYXMgYGxheWVyYWRkYCBhbmQgYGxheWVycmVtb3ZlYCBldmVudHMKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIEwuZmVhdHVyZUdyb3VwKFttYXJrZXIxLCBtYXJrZXIyLCBwb2x5bGluZV0pCiAgICogCS5iaW5kUG9wdXAoJ0hlbGxvIHdvcmxkIScpCiAgICogCS5vbignY2xpY2snLCBmdW5jdGlvbigpIHsgYWxlcnQoJ0NsaWNrZWQgb24gYSBtZW1iZXIgb2YgdGhlIGdyb3VwIScpOyB9KQogICAqIAkuYWRkVG8obWFwKTsKICAgKiBgYGAKICAgKi8KCiAgdmFyIEZlYXR1cmVHcm91cCA9IExheWVyR3JvdXAuZXh0ZW5kKHsKCiAgCWFkZExheWVyOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCWlmICh0aGlzLmhhc0xheWVyKGxheWVyKSkgewogIAkJCXJldHVybiB0aGlzOwogIAkJfQoKICAJCWxheWVyLmFkZEV2ZW50UGFyZW50KHRoaXMpOwoKICAJCUxheWVyR3JvdXAucHJvdG90eXBlLmFkZExheWVyLmNhbGwodGhpcywgbGF5ZXIpOwoKICAJCS8vIEBldmVudCBsYXllcmFkZDogTGF5ZXJFdmVudAogIAkJLy8gRmlyZWQgd2hlbiBhIGxheWVyIGlzIGFkZGVkIHRvIHRoaXMgYEZlYXR1cmVHcm91cGAKICAJCXJldHVybiB0aGlzLmZpcmUoJ2xheWVyYWRkJywge2xheWVyOiBsYXllcn0pOwogIAl9LAoKICAJcmVtb3ZlTGF5ZXI6IGZ1bmN0aW9uIChsYXllcikgewogIAkJaWYgKCF0aGlzLmhhc0xheWVyKGxheWVyKSkgewogIAkJCXJldHVybiB0aGlzOwogIAkJfQogIAkJaWYgKGxheWVyIGluIHRoaXMuX2xheWVycykgewogIAkJCWxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVyXTsKICAJCX0KCiAgCQlsYXllci5yZW1vdmVFdmVudFBhcmVudCh0aGlzKTsKCiAgCQlMYXllckdyb3VwLnByb3RvdHlwZS5yZW1vdmVMYXllci5jYWxsKHRoaXMsIGxheWVyKTsKCiAgCQkvLyBAZXZlbnQgbGF5ZXJyZW1vdmU6IExheWVyRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gYSBsYXllciBpcyByZW1vdmVkIGZyb20gdGhpcyBgRmVhdHVyZUdyb3VwYAogIAkJcmV0dXJuIHRoaXMuZmlyZSgnbGF5ZXJyZW1vdmUnLCB7bGF5ZXI6IGxheWVyfSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFN0eWxlKHN0eWxlOiBQYXRoIG9wdGlvbnMpOiB0aGlzCiAgCS8vIFNldHMgdGhlIGdpdmVuIHBhdGggb3B0aW9ucyB0byBlYWNoIGxheWVyIG9mIHRoZSBncm91cCB0aGF0IGhhcyBhIGBzZXRTdHlsZWAgbWV0aG9kLgogIAlzZXRTdHlsZTogZnVuY3Rpb24gKHN0eWxlKSB7CiAgCQlyZXR1cm4gdGhpcy5pbnZva2UoJ3NldFN0eWxlJywgc3R5bGUpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBicmluZ1RvRnJvbnQoKTogdGhpcwogIAkvLyBCcmluZ3MgdGhlIGxheWVyIGdyb3VwIHRvIHRoZSB0b3Agb2YgYWxsIG90aGVyIGxheWVycwogIAlicmluZ1RvRnJvbnQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLmludm9rZSgnYnJpbmdUb0Zyb250Jyk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGJyaW5nVG9CYWNrKCk6IHRoaXMKICAJLy8gQnJpbmdzIHRoZSBsYXllciBncm91cCB0byB0aGUgYmFjayBvZiBhbGwgb3RoZXIgbGF5ZXJzCiAgCWJyaW5nVG9CYWNrOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5pbnZva2UoJ2JyaW5nVG9CYWNrJyk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldEJvdW5kcygpOiBMYXRMbmdCb3VuZHMKICAJLy8gUmV0dXJucyB0aGUgTGF0TG5nQm91bmRzIG9mIHRoZSBGZWF0dXJlIEdyb3VwIChjcmVhdGVkIGZyb20gYm91bmRzIGFuZCBjb29yZGluYXRlcyBvZiBpdHMgY2hpbGRyZW4pLgogIAlnZXRCb3VuZHM6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBib3VuZHMgPSBuZXcgTGF0TG5nQm91bmRzKCk7CgogIAkJZm9yICh2YXIgaWQgaW4gdGhpcy5fbGF5ZXJzKSB7CiAgCQkJdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJzW2lkXTsKICAJCQlib3VuZHMuZXh0ZW5kKGxheWVyLmdldEJvdW5kcyA/IGxheWVyLmdldEJvdW5kcygpIDogbGF5ZXIuZ2V0TGF0TG5nKCkpOwogIAkJfQogIAkJcmV0dXJuIGJvdW5kczsKICAJfQogIH0pOwoKICAvLyBAZmFjdG9yeSBMLmZlYXR1cmVHcm91cChsYXllcnM/OiBMYXllcltdLCBvcHRpb25zPzogT2JqZWN0KQogIC8vIENyZWF0ZSBhIGZlYXR1cmUgZ3JvdXAsIG9wdGlvbmFsbHkgZ2l2ZW4gYW4gaW5pdGlhbCBzZXQgb2YgbGF5ZXJzIGFuZCBhbiBgb3B0aW9uc2Agb2JqZWN0LgogIHZhciBmZWF0dXJlR3JvdXAgPSBmdW5jdGlvbiAobGF5ZXJzLCBvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgRmVhdHVyZUdyb3VwKGxheWVycywgb3B0aW9ucyk7CiAgfTsKCiAgLyoKICAgKiBAY2xhc3MgSWNvbgogICAqIEBha2EgTC5JY29uCiAgICoKICAgKiBSZXByZXNlbnRzIGFuIGljb24gdG8gcHJvdmlkZSB3aGVuIGNyZWF0aW5nIGEgbWFya2VyLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogdmFyIG15SWNvbiA9IEwuaWNvbih7CiAgICogICAgIGljb25Vcmw6ICdteS1pY29uLnBuZycsCiAgICogICAgIGljb25SZXRpbmFVcmw6ICdteS1pY29uQDJ4LnBuZycsCiAgICogICAgIGljb25TaXplOiBbMzgsIDk1XSwKICAgKiAgICAgaWNvbkFuY2hvcjogWzIyLCA5NF0sCiAgICogICAgIHBvcHVwQW5jaG9yOiBbLTMsIC03Nl0sCiAgICogICAgIHNoYWRvd1VybDogJ215LWljb24tc2hhZG93LnBuZycsCiAgICogICAgIHNoYWRvd1JldGluYVVybDogJ215LWljb24tc2hhZG93QDJ4LnBuZycsCiAgICogICAgIHNoYWRvd1NpemU6IFs2OCwgOTVdLAogICAqICAgICBzaGFkb3dBbmNob3I6IFsyMiwgOTRdCiAgICogfSk7CiAgICoKICAgKiBMLm1hcmtlcihbNTAuNTA1LCAzMC41N10sIHtpY29uOiBteUljb259KS5hZGRUbyhtYXApOwogICAqIGBgYAogICAqCiAgICogYEwuSWNvbi5EZWZhdWx0YCBleHRlbmRzIGBMLkljb25gIGFuZCBpcyB0aGUgYmx1ZSBpY29uIExlYWZsZXQgdXNlcyBmb3IgbWFya2VycyBieSBkZWZhdWx0LgogICAqCiAgICovCgogIHZhciBJY29uID0gQ2xhc3MuZXh0ZW5kKHsKCiAgCS8qIEBzZWN0aW9uCiAgCSAqIEBha2EgSWNvbiBvcHRpb25zCiAgCSAqCiAgCSAqIEBvcHRpb24gaWNvblVybDogU3RyaW5nID0gbnVsbAogIAkgKiAqKihyZXF1aXJlZCkqKiBUaGUgVVJMIHRvIHRoZSBpY29uIGltYWdlIChhYnNvbHV0ZSBvciByZWxhdGl2ZSB0byB5b3VyIHNjcmlwdCBwYXRoKS4KICAJICoKICAJICogQG9wdGlvbiBpY29uUmV0aW5hVXJsOiBTdHJpbmcgPSBudWxsCiAgCSAqIFRoZSBVUkwgdG8gYSByZXRpbmEgc2l6ZWQgdmVyc2lvbiBvZiB0aGUgaWNvbiBpbWFnZSAoYWJzb2x1dGUgb3IgcmVsYXRpdmUgdG8geW91cgogIAkgKiBzY3JpcHQgcGF0aCkuIFVzZWQgZm9yIFJldGluYSBzY3JlZW4gZGV2aWNlcy4KICAJICoKICAJICogQG9wdGlvbiBpY29uU2l6ZTogUG9pbnQgPSBudWxsCiAgCSAqIFNpemUgb2YgdGhlIGljb24gaW1hZ2UgaW4gcGl4ZWxzLgogIAkgKgogIAkgKiBAb3B0aW9uIGljb25BbmNob3I6IFBvaW50ID0gbnVsbAogIAkgKiBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlICJ0aXAiIG9mIHRoZSBpY29uIChyZWxhdGl2ZSB0byBpdHMgdG9wIGxlZnQgY29ybmVyKS4gVGhlIGljb24KICAJICogd2lsbCBiZSBhbGlnbmVkIHNvIHRoYXQgdGhpcyBwb2ludCBpcyBhdCB0aGUgbWFya2VyJ3MgZ2VvZ3JhcGhpY2FsIGxvY2F0aW9uLiBDZW50ZXJlZAogIAkgKiBieSBkZWZhdWx0IGlmIHNpemUgaXMgc3BlY2lmaWVkLCBhbHNvIGNhbiBiZSBzZXQgaW4gQ1NTIHdpdGggbmVnYXRpdmUgbWFyZ2lucy4KICAJICoKICAJICogQG9wdGlvbiBwb3B1cEFuY2hvcjogUG9pbnQgPSBbMCwgMF0KICAJICogVGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2ludCBmcm9tIHdoaWNoIHBvcHVwcyB3aWxsICJvcGVuIiwgcmVsYXRpdmUgdG8gdGhlIGljb24gYW5jaG9yLgogIAkgKgogIAkgKiBAb3B0aW9uIHRvb2x0aXBBbmNob3I6IFBvaW50ID0gWzAsIDBdCiAgCSAqIFRoZSBjb29yZGluYXRlcyBvZiB0aGUgcG9pbnQgZnJvbSB3aGljaCB0b29sdGlwcyB3aWxsICJvcGVuIiwgcmVsYXRpdmUgdG8gdGhlIGljb24gYW5jaG9yLgogIAkgKgogIAkgKiBAb3B0aW9uIHNoYWRvd1VybDogU3RyaW5nID0gbnVsbAogIAkgKiBUaGUgVVJMIHRvIHRoZSBpY29uIHNoYWRvdyBpbWFnZS4gSWYgbm90IHNwZWNpZmllZCwgbm8gc2hhZG93IGltYWdlIHdpbGwgYmUgY3JlYXRlZC4KICAJICoKICAJICogQG9wdGlvbiBzaGFkb3dSZXRpbmFVcmw6IFN0cmluZyA9IG51bGwKICAJICoKICAJICogQG9wdGlvbiBzaGFkb3dTaXplOiBQb2ludCA9IG51bGwKICAJICogU2l6ZSBvZiB0aGUgc2hhZG93IGltYWdlIGluIHBpeGVscy4KICAJICoKICAJICogQG9wdGlvbiBzaGFkb3dBbmNob3I6IFBvaW50ID0gbnVsbAogIAkgKiBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlICJ0aXAiIG9mIHRoZSBzaGFkb3cgKHJlbGF0aXZlIHRvIGl0cyB0b3AgbGVmdCBjb3JuZXIpICh0aGUgc2FtZQogIAkgKiBhcyBpY29uQW5jaG9yIGlmIG5vdCBzcGVjaWZpZWQpLgogIAkgKgogIAkgKiBAb3B0aW9uIGNsYXNzTmFtZTogU3RyaW5nID0gJycKICAJICogQSBjdXN0b20gY2xhc3MgbmFtZSB0byBhc3NpZ24gdG8gYm90aCBpY29uIGFuZCBzaGFkb3cgaW1hZ2VzLiBFbXB0eSBieSBkZWZhdWx0LgogIAkgKi8KCiAgCW9wdGlvbnM6IHsKICAJCXBvcHVwQW5jaG9yOiBbMCwgMF0sCiAgCQl0b29sdGlwQW5jaG9yOiBbMCwgMF0sCgogIAkJLy8gQG9wdGlvbiBjcm9zc09yaWdpbjogQm9vbGVhbnxTdHJpbmcgPSBmYWxzZQogIAkJLy8gV2hldGhlciB0aGUgY3Jvc3NPcmlnaW4gYXR0cmlidXRlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHRpbGVzLgogIAkJLy8gSWYgYSBTdHJpbmcgaXMgcHJvdmlkZWQsIGFsbCB0aWxlcyB3aWxsIGhhdmUgdGhlaXIgY3Jvc3NPcmlnaW4gYXR0cmlidXRlIHNldCB0byB0aGUgU3RyaW5nIHByb3ZpZGVkLiBUaGlzIGlzIG5lZWRlZCBpZiB5b3Ugd2FudCB0byBhY2Nlc3MgdGlsZSBwaXhlbCBkYXRhLgogIAkJLy8gUmVmZXIgdG8gW0NPUlMgU2V0dGluZ3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvQ09SU19zZXR0aW5nc19hdHRyaWJ1dGVzKSBmb3IgdmFsaWQgU3RyaW5nIHZhbHVlcy4KICAJCWNyb3NzT3JpZ2luOiBmYWxzZQogIAl9LAoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAJCXNldE9wdGlvbnModGhpcywgb3B0aW9ucyk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGNyZWF0ZUljb24ob2xkSWNvbj86IEhUTUxFbGVtZW50KTogSFRNTEVsZW1lbnQKICAJLy8gQ2FsbGVkIGludGVybmFsbHkgd2hlbiB0aGUgaWNvbiBoYXMgdG8gYmUgc2hvd24sIHJldHVybnMgYSBgPGltZz5gIEhUTUwgZWxlbWVudAogIAkvLyBzdHlsZWQgYWNjb3JkaW5nIHRvIHRoZSBvcHRpb25zLgogIAljcmVhdGVJY29uOiBmdW5jdGlvbiAob2xkSWNvbikgewogIAkJcmV0dXJuIHRoaXMuX2NyZWF0ZUljb24oJ2ljb24nLCBvbGRJY29uKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgY3JlYXRlU2hhZG93KG9sZEljb24/OiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50CiAgCS8vIEFzIGBjcmVhdGVJY29uYCwgYnV0IGZvciB0aGUgc2hhZG93IGJlbmVhdGggaXQuCiAgCWNyZWF0ZVNoYWRvdzogZnVuY3Rpb24gKG9sZEljb24pIHsKICAJCXJldHVybiB0aGlzLl9jcmVhdGVJY29uKCdzaGFkb3cnLCBvbGRJY29uKTsKICAJfSwKCiAgCV9jcmVhdGVJY29uOiBmdW5jdGlvbiAobmFtZSwgb2xkSWNvbikgewogIAkJdmFyIHNyYyA9IHRoaXMuX2dldEljb25VcmwobmFtZSk7CgogIAkJaWYgKCFzcmMpIHsKICAJCQlpZiAobmFtZSA9PT0gJ2ljb24nKSB7CiAgCQkJCXRocm93IG5ldyBFcnJvcignaWNvblVybCBub3Qgc2V0IGluIEljb24gb3B0aW9ucyAoc2VlIHRoZSBkb2NzKS4nKTsKICAJCQl9CiAgCQkJcmV0dXJuIG51bGw7CiAgCQl9CgogIAkJdmFyIGltZyA9IHRoaXMuX2NyZWF0ZUltZyhzcmMsIG9sZEljb24gJiYgb2xkSWNvbi50YWdOYW1lID09PSAnSU1HJyA/IG9sZEljb24gOiBudWxsKTsKICAJCXRoaXMuX3NldEljb25TdHlsZXMoaW1nLCBuYW1lKTsKCiAgCQlpZiAodGhpcy5vcHRpb25zLmNyb3NzT3JpZ2luIHx8IHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbiA9PT0gJycpIHsKICAJCQlpbWcuY3Jvc3NPcmlnaW4gPSB0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4gPT09IHRydWUgPyAnJyA6IHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbjsKICAJCX0KCiAgCQlyZXR1cm4gaW1nOwogIAl9LAoKICAJX3NldEljb25TdHlsZXM6IGZ1bmN0aW9uIChpbWcsIG5hbWUpIHsKICAJCXZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOwogIAkJdmFyIHNpemVPcHRpb24gPSBvcHRpb25zW25hbWUgKyAnU2l6ZSddOwoKICAJCWlmICh0eXBlb2Ygc2l6ZU9wdGlvbiA9PT0gJ251bWJlcicpIHsKICAJCQlzaXplT3B0aW9uID0gW3NpemVPcHRpb24sIHNpemVPcHRpb25dOwogIAkJfQoKICAJCXZhciBzaXplID0gdG9Qb2ludChzaXplT3B0aW9uKSwKICAJCSAgICBhbmNob3IgPSB0b1BvaW50KG5hbWUgPT09ICdzaGFkb3cnICYmIG9wdGlvbnMuc2hhZG93QW5jaG9yIHx8IG9wdGlvbnMuaWNvbkFuY2hvciB8fAogIAkJICAgICAgICAgICAgc2l6ZSAmJiBzaXplLmRpdmlkZUJ5KDIsIHRydWUpKTsKCiAgCQlpbWcuY2xhc3NOYW1lID0gJ2xlYWZsZXQtbWFya2VyLScgKyBuYW1lICsgJyAnICsgKG9wdGlvbnMuY2xhc3NOYW1lIHx8ICcnKTsKCiAgCQlpZiAoYW5jaG9yKSB7CiAgCQkJaW1nLnN0eWxlLm1hcmdpbkxlZnQgPSAoLWFuY2hvci54KSArICdweCc7CiAgCQkJaW1nLnN0eWxlLm1hcmdpblRvcCAgPSAoLWFuY2hvci55KSArICdweCc7CiAgCQl9CgogIAkJaWYgKHNpemUpIHsKICAJCQlpbWcuc3R5bGUud2lkdGggID0gc2l6ZS54ICsgJ3B4JzsKICAJCQlpbWcuc3R5bGUuaGVpZ2h0ID0gc2l6ZS55ICsgJ3B4JzsKICAJCX0KICAJfSwKCiAgCV9jcmVhdGVJbWc6IGZ1bmN0aW9uIChzcmMsIGVsKSB7CiAgCQllbCA9IGVsIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpOwogIAkJZWwuc3JjID0gc3JjOwogIAkJcmV0dXJuIGVsOwogIAl9LAoKICAJX2dldEljb25Vcmw6IGZ1bmN0aW9uIChuYW1lKSB7CiAgCQlyZXR1cm4gQnJvd3Nlci5yZXRpbmEgJiYgdGhpcy5vcHRpb25zW25hbWUgKyAnUmV0aW5hVXJsJ10gfHwgdGhpcy5vcHRpb25zW25hbWUgKyAnVXJsJ107CiAgCX0KICB9KTsKCgogIC8vIEBmYWN0b3J5IEwuaWNvbihvcHRpb25zOiBJY29uIG9wdGlvbnMpCiAgLy8gQ3JlYXRlcyBhbiBpY29uIGluc3RhbmNlIHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuCiAgZnVuY3Rpb24gaWNvbihvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgSWNvbihvcHRpb25zKTsKICB9CgogIC8qCiAgICogQG1pbmljbGFzcyBJY29uLkRlZmF1bHQgKEljb24pCiAgICogQGFrYSBMLkljb24uRGVmYXVsdAogICAqIEBzZWN0aW9uCiAgICoKICAgKiBBIHRyaXZpYWwgc3ViY2xhc3Mgb2YgYEljb25gLCByZXByZXNlbnRzIHRoZSBpY29uIHRvIHVzZSBpbiBgTWFya2VyYHMgd2hlbgogICAqIG5vIGljb24gaXMgc3BlY2lmaWVkLiBQb2ludHMgdG8gdGhlIGJsdWUgbWFya2VyIGltYWdlIGRpc3RyaWJ1dGVkIHdpdGggTGVhZmxldAogICAqIHJlbGVhc2VzLgogICAqCiAgICogSW4gb3JkZXIgdG8gY3VzdG9taXplIHRoZSBkZWZhdWx0IGljb24sIGp1c3QgY2hhbmdlIHRoZSBwcm9wZXJ0aWVzIG9mIGBMLkljb24uRGVmYXVsdC5wcm90b3R5cGUub3B0aW9uc2AKICAgKiAod2hpY2ggaXMgYSBzZXQgb2YgYEljb24gb3B0aW9uc2ApLgogICAqCiAgICogSWYgeW91IHdhbnQgdG8gX2NvbXBsZXRlbHlfIHJlcGxhY2UgdGhlIGRlZmF1bHQgaWNvbiwgb3ZlcnJpZGUgdGhlCiAgICogYEwuTWFya2VyLnByb3RvdHlwZS5vcHRpb25zLmljb25gIHdpdGggeW91ciBvd24gaWNvbiBpbnN0ZWFkLgogICAqLwoKICB2YXIgSWNvbkRlZmF1bHQgPSBJY29uLmV4dGVuZCh7CgogIAlvcHRpb25zOiB7CiAgCQlpY29uVXJsOiAgICAgICAnbWFya2VyLWljb24ucG5nJywKICAJCWljb25SZXRpbmFVcmw6ICdtYXJrZXItaWNvbi0yeC5wbmcnLAogIAkJc2hhZG93VXJsOiAgICAgJ21hcmtlci1zaGFkb3cucG5nJywKICAJCWljb25TaXplOiAgICBbMjUsIDQxXSwKICAJCWljb25BbmNob3I6ICBbMTIsIDQxXSwKICAJCXBvcHVwQW5jaG9yOiBbMSwgLTM0XSwKICAJCXRvb2x0aXBBbmNob3I6IFsxNiwgLTI4XSwKICAJCXNoYWRvd1NpemU6ICBbNDEsIDQxXQogIAl9LAoKICAJX2dldEljb25Vcmw6IGZ1bmN0aW9uIChuYW1lKSB7CiAgCQlpZiAodHlwZW9mIEljb25EZWZhdWx0LmltYWdlUGF0aCAhPT0gJ3N0cmluZycpIHsJLy8gRGVwcmVjYXRlZCwgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgb25seQogIAkJCUljb25EZWZhdWx0LmltYWdlUGF0aCA9IHRoaXMuX2RldGVjdEljb25QYXRoKCk7CiAgCQl9CgogIAkJLy8gQG9wdGlvbiBpbWFnZVBhdGg6IFN0cmluZwogIAkJLy8gYEljb24uRGVmYXVsdGAgd2lsbCB0cnkgdG8gYXV0by1kZXRlY3QgdGhlIGxvY2F0aW9uIG9mIHRoZQogIAkJLy8gYmx1ZSBpY29uIGltYWdlcy4gSWYgeW91IGFyZSBwbGFjaW5nIHRoZXNlIGltYWdlcyBpbiBhIG5vbi1zdGFuZGFyZAogIAkJLy8gd2F5LCBzZXQgdGhpcyBvcHRpb24gdG8gcG9pbnQgdG8gdGhlIHJpZ2h0IHBhdGguCiAgCQlyZXR1cm4gKHRoaXMub3B0aW9ucy5pbWFnZVBhdGggfHwgSWNvbkRlZmF1bHQuaW1hZ2VQYXRoKSArIEljb24ucHJvdG90eXBlLl9nZXRJY29uVXJsLmNhbGwodGhpcywgbmFtZSk7CiAgCX0sCgogIAlfc3RyaXBVcmw6IGZ1bmN0aW9uIChwYXRoKSB7CS8vIHNlcGFyYXRlIGZ1bmN0aW9uIHRvIHVzZSBpbiB0ZXN0cwogIAkJdmFyIHN0cmlwID0gZnVuY3Rpb24gKHN0ciwgcmUsIGlkeCkgewogIAkJCXZhciBtYXRjaCA9IHJlLmV4ZWMoc3RyKTsKICAJCQlyZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbaWR4XTsKICAJCX07CiAgCQlwYXRoID0gc3RyaXAocGF0aCwgL151cmxcKChbJyJdKT8oLispXDFcKSQvLCAyKTsKICAJCXJldHVybiBwYXRoICYmIHN0cmlwKHBhdGgsIC9eKC4qKW1hcmtlci1pY29uXC5wbmckLywgMSk7CiAgCX0sCgogIAlfZGV0ZWN0SWNvblBhdGg6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBlbCA9IGNyZWF0ZSQxKCdkaXYnLCAgJ2xlYWZsZXQtZGVmYXVsdC1pY29uLXBhdGgnLCBkb2N1bWVudC5ib2R5KTsKICAJCXZhciBwYXRoID0gZ2V0U3R5bGUoZWwsICdiYWNrZ3JvdW5kLWltYWdlJykgfHwKICAJCSAgICAgICAgICAgZ2V0U3R5bGUoZWwsICdiYWNrZ3JvdW5kSW1hZ2UnKTsJLy8gSUU4CgogIAkJZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7CiAgCQlwYXRoID0gdGhpcy5fc3RyaXBVcmwocGF0aCk7CiAgCQlpZiAocGF0aCkgeyByZXR1cm4gcGF0aDsgfQogIAkJdmFyIGxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaW5rW2hyZWYkPSJsZWFmbGV0LmNzcyJdJyk7CiAgCQlpZiAoIWxpbmspIHsgcmV0dXJuICcnOyB9CiAgCQlyZXR1cm4gbGluay5ocmVmLnN1YnN0cmluZygwLCBsaW5rLmhyZWYubGVuZ3RoIC0gJ2xlYWZsZXQuY3NzJy5sZW5ndGggLSAxKTsKICAJfQogIH0pOwoKICAvKgogICAqIEwuSGFuZGxlci5NYXJrZXJEcmFnIGlzIHVzZWQgaW50ZXJuYWxseSBieSBMLk1hcmtlciB0byBtYWtlIHRoZSBtYXJrZXJzIGRyYWdnYWJsZS4KICAgKi8KCgogIC8qIEBuYW1lc3BhY2UgTWFya2VyCiAgICogQHNlY3Rpb24gSW50ZXJhY3Rpb24gaGFuZGxlcnMKICAgKgogICAqIEludGVyYWN0aW9uIGhhbmRsZXJzIGFyZSBwcm9wZXJ0aWVzIG9mIGEgbWFya2VyIGluc3RhbmNlIHRoYXQgYWxsb3cgeW91IHRvIGNvbnRyb2wgaW50ZXJhY3Rpb24gYmVoYXZpb3IgaW4gcnVudGltZSwgZW5hYmxpbmcgb3IgZGlzYWJsaW5nIGNlcnRhaW4gZmVhdHVyZXMgc3VjaCBhcyBkcmFnZ2luZyAoc2VlIGBIYW5kbGVyYCBtZXRob2RzKS4gRXhhbXBsZToKICAgKgogICAqIGBgYGpzCiAgICogbWFya2VyLmRyYWdnaW5nLmRpc2FibGUoKTsKICAgKiBgYGAKICAgKgogICAqIEBwcm9wZXJ0eSBkcmFnZ2luZzogSGFuZGxlcgogICAqIE1hcmtlciBkcmFnZ2luZyBoYW5kbGVyIChieSBib3RoIG1vdXNlIGFuZCB0b3VjaCkuIE9ubHkgdmFsaWQgd2hlbiB0aGUgbWFya2VyIGlzIG9uIHRoZSBtYXAgKE90aGVyd2lzZSBzZXQgW2BtYXJrZXIub3B0aW9ucy5kcmFnZ2FibGVgXSgjbWFya2VyLWRyYWdnYWJsZSkpLgogICAqLwoKICB2YXIgTWFya2VyRHJhZyA9IEhhbmRsZXIuZXh0ZW5kKHsKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG1hcmtlcikgewogIAkJdGhpcy5fbWFya2VyID0gbWFya2VyOwogIAl9LAoKICAJYWRkSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBpY29uID0gdGhpcy5fbWFya2VyLl9pY29uOwoKICAJCWlmICghdGhpcy5fZHJhZ2dhYmxlKSB7CiAgCQkJdGhpcy5fZHJhZ2dhYmxlID0gbmV3IERyYWdnYWJsZShpY29uLCBpY29uLCB0cnVlKTsKICAJCX0KCiAgCQl0aGlzLl9kcmFnZ2FibGUub24oewogIAkJCWRyYWdzdGFydDogdGhpcy5fb25EcmFnU3RhcnQsCiAgCQkJcHJlZHJhZzogdGhpcy5fb25QcmVEcmFnLAogIAkJCWRyYWc6IHRoaXMuX29uRHJhZywKICAJCQlkcmFnZW5kOiB0aGlzLl9vbkRyYWdFbmQKICAJCX0sIHRoaXMpLmVuYWJsZSgpOwoKICAJCWFkZENsYXNzKGljb24sICdsZWFmbGV0LW1hcmtlci1kcmFnZ2FibGUnKTsKICAJfSwKCiAgCXJlbW92ZUhvb2tzOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLl9kcmFnZ2FibGUub2ZmKHsKICAJCQlkcmFnc3RhcnQ6IHRoaXMuX29uRHJhZ1N0YXJ0LAogIAkJCXByZWRyYWc6IHRoaXMuX29uUHJlRHJhZywKICAJCQlkcmFnOiB0aGlzLl9vbkRyYWcsCiAgCQkJZHJhZ2VuZDogdGhpcy5fb25EcmFnRW5kCiAgCQl9LCB0aGlzKS5kaXNhYmxlKCk7CgogIAkJaWYgKHRoaXMuX21hcmtlci5faWNvbikgewogIAkJCXJlbW92ZUNsYXNzKHRoaXMuX21hcmtlci5faWNvbiwgJ2xlYWZsZXQtbWFya2VyLWRyYWdnYWJsZScpOwogIAkJfQogIAl9LAoKICAJbW92ZWQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9kcmFnZ2FibGUgJiYgdGhpcy5fZHJhZ2dhYmxlLl9tb3ZlZDsKICAJfSwKCiAgCV9hZGp1c3RQYW46IGZ1bmN0aW9uIChlKSB7CiAgCQl2YXIgbWFya2VyID0gdGhpcy5fbWFya2VyLAogIAkJICAgIG1hcCA9IG1hcmtlci5fbWFwLAogIAkJICAgIHNwZWVkID0gdGhpcy5fbWFya2VyLm9wdGlvbnMuYXV0b1BhblNwZWVkLAogIAkJICAgIHBhZGRpbmcgPSB0aGlzLl9tYXJrZXIub3B0aW9ucy5hdXRvUGFuUGFkZGluZywKICAJCSAgICBpY29uUG9zID0gZ2V0UG9zaXRpb24obWFya2VyLl9pY29uKSwKICAJCSAgICBib3VuZHMgPSBtYXAuZ2V0UGl4ZWxCb3VuZHMoKSwKICAJCSAgICBvcmlnaW4gPSBtYXAuZ2V0UGl4ZWxPcmlnaW4oKTsKCiAgCQl2YXIgcGFuQm91bmRzID0gdG9Cb3VuZHMoCiAgCQkJYm91bmRzLm1pbi5fc3VidHJhY3Qob3JpZ2luKS5hZGQocGFkZGluZyksCiAgCQkJYm91bmRzLm1heC5fc3VidHJhY3Qob3JpZ2luKS5zdWJ0cmFjdChwYWRkaW5nKQogIAkJKTsKCiAgCQlpZiAoIXBhbkJvdW5kcy5jb250YWlucyhpY29uUG9zKSkgewogIAkJCS8vIENvbXB1dGUgaW5jcmVtZW50YWwgbW92ZW1lbnQKICAJCQl2YXIgbW92ZW1lbnQgPSB0b1BvaW50KAogIAkJCQkoTWF0aC5tYXgocGFuQm91bmRzLm1heC54LCBpY29uUG9zLngpIC0gcGFuQm91bmRzLm1heC54KSAvIChib3VuZHMubWF4LnggLSBwYW5Cb3VuZHMubWF4LngpIC0KICAJCQkJKE1hdGgubWluKHBhbkJvdW5kcy5taW4ueCwgaWNvblBvcy54KSAtIHBhbkJvdW5kcy5taW4ueCkgLyAoYm91bmRzLm1pbi54IC0gcGFuQm91bmRzLm1pbi54KSwKCiAgCQkJCShNYXRoLm1heChwYW5Cb3VuZHMubWF4LnksIGljb25Qb3MueSkgLSBwYW5Cb3VuZHMubWF4LnkpIC8gKGJvdW5kcy5tYXgueSAtIHBhbkJvdW5kcy5tYXgueSkgLQogIAkJCQkoTWF0aC5taW4ocGFuQm91bmRzLm1pbi55LCBpY29uUG9zLnkpIC0gcGFuQm91bmRzLm1pbi55KSAvIChib3VuZHMubWluLnkgLSBwYW5Cb3VuZHMubWluLnkpCiAgCQkJKS5tdWx0aXBseUJ5KHNwZWVkKTsKCiAgCQkJbWFwLnBhbkJ5KG1vdmVtZW50LCB7YW5pbWF0ZTogZmFsc2V9KTsKCiAgCQkJdGhpcy5fZHJhZ2dhYmxlLl9uZXdQb3MuX2FkZChtb3ZlbWVudCk7CiAgCQkJdGhpcy5fZHJhZ2dhYmxlLl9zdGFydFBvcy5fYWRkKG1vdmVtZW50KTsKCiAgCQkJc2V0UG9zaXRpb24obWFya2VyLl9pY29uLCB0aGlzLl9kcmFnZ2FibGUuX25ld1Bvcyk7CiAgCQkJdGhpcy5fb25EcmFnKGUpOwoKICAJCQl0aGlzLl9wYW5SZXF1ZXN0ID0gcmVxdWVzdEFuaW1GcmFtZSh0aGlzLl9hZGp1c3RQYW4uYmluZCh0aGlzLCBlKSk7CiAgCQl9CiAgCX0sCgogIAlfb25EcmFnU3RhcnQ6IGZ1bmN0aW9uICgpIHsKICAJCS8vIEBzZWN0aW9uIERyYWdnaW5nIGV2ZW50cwogIAkJLy8gQGV2ZW50IGRyYWdzdGFydDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIHVzZXIgc3RhcnRzIGRyYWdnaW5nIHRoZSBtYXJrZXIuCgogIAkJLy8gQGV2ZW50IG1vdmVzdGFydDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIG1hcmtlciBzdGFydHMgbW92aW5nIChiZWNhdXNlIG9mIGRyYWdnaW5nKS4KCiAgCQl0aGlzLl9vbGRMYXRMbmcgPSB0aGlzLl9tYXJrZXIuZ2V0TGF0TG5nKCk7CgogIAkJLy8gV2hlbiB1c2luZyBFUzYgaW1wb3J0cyBpdCBjb3VsZCBub3QgYmUgc2V0IHdoZW4gYFBvcHVwYCB3YXMgbm90IGltcG9ydGVkIGFzIHdlbGwKICAJCXRoaXMuX21hcmtlci5jbG9zZVBvcHVwICYmIHRoaXMuX21hcmtlci5jbG9zZVBvcHVwKCk7CgogIAkJdGhpcy5fbWFya2VyCiAgCQkJLmZpcmUoJ21vdmVzdGFydCcpCiAgCQkJLmZpcmUoJ2RyYWdzdGFydCcpOwogIAl9LAoKICAJX29uUHJlRHJhZzogZnVuY3Rpb24gKGUpIHsKICAJCWlmICh0aGlzLl9tYXJrZXIub3B0aW9ucy5hdXRvUGFuKSB7CiAgCQkJY2FuY2VsQW5pbUZyYW1lKHRoaXMuX3BhblJlcXVlc3QpOwogIAkJCXRoaXMuX3BhblJlcXVlc3QgPSByZXF1ZXN0QW5pbUZyYW1lKHRoaXMuX2FkanVzdFBhbi5iaW5kKHRoaXMsIGUpKTsKICAJCX0KICAJfSwKCiAgCV9vbkRyYWc6IGZ1bmN0aW9uIChlKSB7CiAgCQl2YXIgbWFya2VyID0gdGhpcy5fbWFya2VyLAogIAkJICAgIHNoYWRvdyA9IG1hcmtlci5fc2hhZG93LAogIAkJICAgIGljb25Qb3MgPSBnZXRQb3NpdGlvbihtYXJrZXIuX2ljb24pLAogIAkJICAgIGxhdGxuZyA9IG1hcmtlci5fbWFwLmxheWVyUG9pbnRUb0xhdExuZyhpY29uUG9zKTsKCiAgCQkvLyB1cGRhdGUgc2hhZG93IHBvc2l0aW9uCiAgCQlpZiAoc2hhZG93KSB7CiAgCQkJc2V0UG9zaXRpb24oc2hhZG93LCBpY29uUG9zKTsKICAJCX0KCiAgCQltYXJrZXIuX2xhdGxuZyA9IGxhdGxuZzsKICAJCWUubGF0bG5nID0gbGF0bG5nOwogIAkJZS5vbGRMYXRMbmcgPSB0aGlzLl9vbGRMYXRMbmc7CgogIAkJLy8gQGV2ZW50IGRyYWc6IEV2ZW50CiAgCQkvLyBGaXJlZCByZXBlYXRlZGx5IHdoaWxlIHRoZSB1c2VyIGRyYWdzIHRoZSBtYXJrZXIuCiAgCQltYXJrZXIKICAJCSAgICAuZmlyZSgnbW92ZScsIGUpCiAgCQkgICAgLmZpcmUoJ2RyYWcnLCBlKTsKICAJfSwKCiAgCV9vbkRyYWdFbmQ6IGZ1bmN0aW9uIChlKSB7CiAgCQkvLyBAZXZlbnQgZHJhZ2VuZDogRHJhZ0VuZEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSB1c2VyIHN0b3BzIGRyYWdnaW5nIHRoZSBtYXJrZXIuCgogIAkJIGNhbmNlbEFuaW1GcmFtZSh0aGlzLl9wYW5SZXF1ZXN0KTsKCiAgCQkvLyBAZXZlbnQgbW92ZWVuZDogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIG1hcmtlciBzdG9wcyBtb3ZpbmcgKGJlY2F1c2Ugb2YgZHJhZ2dpbmcpLgogIAkJZGVsZXRlIHRoaXMuX29sZExhdExuZzsKICAJCXRoaXMuX21hcmtlcgogIAkJICAgIC5maXJlKCdtb3ZlZW5kJykKICAJCSAgICAuZmlyZSgnZHJhZ2VuZCcsIGUpOwogIAl9CiAgfSk7CgogIC8qCiAgICogQGNsYXNzIE1hcmtlcgogICAqIEBpbmhlcml0cyBJbnRlcmFjdGl2ZSBsYXllcgogICAqIEBha2EgTC5NYXJrZXIKICAgKiBMLk1hcmtlciBpcyB1c2VkIHRvIGRpc3BsYXkgY2xpY2thYmxlL2RyYWdnYWJsZSBpY29ucyBvbiB0aGUgbWFwLiBFeHRlbmRzIGBMYXllcmAuCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogYGBganMKICAgKiBMLm1hcmtlcihbNTAuNSwgMzAuNV0pLmFkZFRvKG1hcCk7CiAgICogYGBgCiAgICovCgogIHZhciBNYXJrZXIgPSBMYXllci5leHRlbmQoewoKICAJLy8gQHNlY3Rpb24KICAJLy8gQGFrYSBNYXJrZXIgb3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQkvLyBAb3B0aW9uIGljb246IEljb24gPSAqCiAgCQkvLyBJY29uIGluc3RhbmNlIHRvIHVzZSBmb3IgcmVuZGVyaW5nIHRoZSBtYXJrZXIuCiAgCQkvLyBTZWUgW0ljb24gZG9jdW1lbnRhdGlvbl0oI0wuSWNvbikgZm9yIGRldGFpbHMgb24gaG93IHRvIGN1c3RvbWl6ZSB0aGUgbWFya2VyIGljb24uCiAgCQkvLyBJZiBub3Qgc3BlY2lmaWVkLCBhIGNvbW1vbiBpbnN0YW5jZSBvZiBgTC5JY29uLkRlZmF1bHRgIGlzIHVzZWQuCiAgCQlpY29uOiBuZXcgSWNvbkRlZmF1bHQoKSwKCiAgCQkvLyBPcHRpb24gaW5oZXJpdGVkIGZyb20gIkludGVyYWN0aXZlIGxheWVyIiBhYnN0cmFjdCBjbGFzcwogIAkJaW50ZXJhY3RpdmU6IHRydWUsCgogIAkJLy8gQG9wdGlvbiBrZXlib2FyZDogQm9vbGVhbiA9IHRydWUKICAJCS8vIFdoZXRoZXIgdGhlIG1hcmtlciBjYW4gYmUgdGFiYmVkIHRvIHdpdGggYSBrZXlib2FyZCBhbmQgY2xpY2tlZCBieSBwcmVzc2luZyBlbnRlci4KICAJCWtleWJvYXJkOiB0cnVlLAoKICAJCS8vIEBvcHRpb24gdGl0bGU6IFN0cmluZyA9ICcnCiAgCQkvLyBUZXh0IGZvciB0aGUgYnJvd3NlciB0b29sdGlwIHRoYXQgYXBwZWFyIG9uIG1hcmtlciBob3ZlciAobm8gdG9vbHRpcCBieSBkZWZhdWx0KS4KICAJCS8vIFtVc2VmdWwgZm9yIGFjY2Vzc2liaWxpdHldKGh0dHBzOi8vbGVhZmxldGpzLmNvbS9leGFtcGxlcy9hY2Nlc3NpYmlsaXR5LyNtYXJrZXJzLW11c3QtYmUtbGFiZWxsZWQpLgogIAkJdGl0bGU6ICcnLAoKICAJCS8vIEBvcHRpb24gYWx0OiBTdHJpbmcgPSAnTWFya2VyJwogIAkJLy8gVGV4dCBmb3IgdGhlIGBhbHRgIGF0dHJpYnV0ZSBvZiB0aGUgaWNvbiBpbWFnZS4KICAJCS8vIFtVc2VmdWwgZm9yIGFjY2Vzc2liaWxpdHldKGh0dHBzOi8vbGVhZmxldGpzLmNvbS9leGFtcGxlcy9hY2Nlc3NpYmlsaXR5LyNtYXJrZXJzLW11c3QtYmUtbGFiZWxsZWQpLgogIAkJYWx0OiAnTWFya2VyJywKCiAgCQkvLyBAb3B0aW9uIHpJbmRleE9mZnNldDogTnVtYmVyID0gMAogIAkJLy8gQnkgZGVmYXVsdCwgbWFya2VyIGltYWdlcyB6SW5kZXggaXMgc2V0IGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gaXRzIGxhdGl0dWRlLiBVc2UgdGhpcyBvcHRpb24gaWYgeW91IHdhbnQgdG8gcHV0IHRoZSBtYXJrZXIgb24gdG9wIG9mIGFsbCBvdGhlcnMgKG9yIGJlbG93KSwgc3BlY2lmeWluZyBhIGhpZ2ggdmFsdWUgbGlrZSBgMTAwMGAgKG9yIGhpZ2ggbmVnYXRpdmUgdmFsdWUsIHJlc3BlY3RpdmVseSkuCiAgCQl6SW5kZXhPZmZzZXQ6IDAsCgogIAkJLy8gQG9wdGlvbiBvcGFjaXR5OiBOdW1iZXIgPSAxLjAKICAJCS8vIFRoZSBvcGFjaXR5IG9mIHRoZSBtYXJrZXIuCiAgCQlvcGFjaXR5OiAxLAoKICAJCS8vIEBvcHRpb24gcmlzZU9uSG92ZXI6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gSWYgYHRydWVgLCB0aGUgbWFya2VyIHdpbGwgZ2V0IG9uIHRvcCBvZiBvdGhlcnMgd2hlbiB5b3UgaG92ZXIgdGhlIG1vdXNlIG92ZXIgaXQuCiAgCQlyaXNlT25Ib3ZlcjogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiByaXNlT2Zmc2V0OiBOdW1iZXIgPSAyNTAKICAJCS8vIFRoZSB6LWluZGV4IG9mZnNldCB1c2VkIGZvciB0aGUgYHJpc2VPbkhvdmVyYCBmZWF0dXJlLgogIAkJcmlzZU9mZnNldDogMjUwLAoKICAJCS8vIEBvcHRpb24gcGFuZTogU3RyaW5nID0gJ21hcmtlclBhbmUnCiAgCQkvLyBgTWFwIHBhbmVgIHdoZXJlIHRoZSBtYXJrZXJzIGljb24gd2lsbCBiZSBhZGRlZC4KICAJCXBhbmU6ICdtYXJrZXJQYW5lJywKCiAgCQkvLyBAb3B0aW9uIHNoYWRvd1BhbmU6IFN0cmluZyA9ICdzaGFkb3dQYW5lJwogIAkJLy8gYE1hcCBwYW5lYCB3aGVyZSB0aGUgbWFya2VycyBzaGFkb3cgd2lsbCBiZSBhZGRlZC4KICAJCXNoYWRvd1BhbmU6ICdzaGFkb3dQYW5lJywKCiAgCQkvLyBAb3B0aW9uIGJ1YmJsaW5nTW91c2VFdmVudHM6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gV2hlbiBgdHJ1ZWAsIGEgbW91c2UgZXZlbnQgb24gdGhpcyBtYXJrZXIgd2lsbCB0cmlnZ2VyIHRoZSBzYW1lIGV2ZW50IG9uIHRoZSBtYXAKICAJCS8vICh1bmxlc3MgW2BMLkRvbUV2ZW50LnN0b3BQcm9wYWdhdGlvbmBdKCNkb21ldmVudC1zdG9wcHJvcGFnYXRpb24pIGlzIHVzZWQpLgogIAkJYnViYmxpbmdNb3VzZUV2ZW50czogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBhdXRvUGFuT25Gb2N1czogQm9vbGVhbiA9IHRydWUKICAJCS8vIFdoZW4gYHRydWVgLCB0aGUgbWFwIHdpbGwgcGFuIHdoZW5ldmVyIHRoZSBtYXJrZXIgaXMgZm9jdXNlZCAodmlhCiAgCQkvLyBlLmcuIHByZXNzaW5nIGB0YWJgIG9uIHRoZSBrZXlib2FyZCkgdG8gZW5zdXJlIHRoZSBtYXJrZXIgaXMKICAJCS8vIHZpc2libGUgd2l0aGluIHRoZSBtYXAncyBib3VuZHMKICAJCWF1dG9QYW5PbkZvY3VzOiB0cnVlLAoKICAJCS8vIEBzZWN0aW9uIERyYWdnYWJsZSBtYXJrZXIgb3B0aW9ucwogIAkJLy8gQG9wdGlvbiBkcmFnZ2FibGU6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gV2hldGhlciB0aGUgbWFya2VyIGlzIGRyYWdnYWJsZSB3aXRoIG1vdXNlL3RvdWNoIG9yIG5vdC4KICAJCWRyYWdnYWJsZTogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBhdXRvUGFuOiBCb29sZWFuID0gZmFsc2UKICAJCS8vIFdoZXRoZXIgdG8gcGFuIHRoZSBtYXAgd2hlbiBkcmFnZ2luZyB0aGlzIG1hcmtlciBuZWFyIGl0cyBlZGdlIG9yIG5vdC4KICAJCWF1dG9QYW46IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gYXV0b1BhblBhZGRpbmc6IFBvaW50ID0gUG9pbnQoNTAsIDUwKQogIAkJLy8gRGlzdGFuY2UgKGluIHBpeGVscyB0byB0aGUgbGVmdC9yaWdodCBhbmQgdG8gdGhlIHRvcC9ib3R0b20pIG9mIHRoZQogIAkJLy8gbWFwIGVkZ2UgdG8gc3RhcnQgcGFubmluZyB0aGUgbWFwLgogIAkJYXV0b1BhblBhZGRpbmc6IFs1MCwgNTBdLAoKICAJCS8vIEBvcHRpb24gYXV0b1BhblNwZWVkOiBOdW1iZXIgPSAxMAogIAkJLy8gTnVtYmVyIG9mIHBpeGVscyB0aGUgbWFwIHNob3VsZCBwYW4gYnkuCiAgCQlhdXRvUGFuU3BlZWQ6IDEwCiAgCX0sCgogIAkvKiBAc2VjdGlvbgogIAkgKgogIAkgKiBJbiBhZGRpdGlvbiB0byBbc2hhcmVkIGxheWVyIG1ldGhvZHNdKCNMYXllcikgbGlrZSBgYWRkVG8oKWAgYW5kIGByZW1vdmUoKWAgYW5kIFtwb3B1cCBtZXRob2RzXSgjUG9wdXApIGxpa2UgYmluZFBvcHVwKCkgeW91IGNhbiBhbHNvIHVzZSB0aGUgZm9sbG93aW5nIG1ldGhvZHM6CiAgCSAqLwoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGxhdGxuZywgb3B0aW9ucykgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKICAJCXRoaXMuX2xhdGxuZyA9IHRvTGF0TG5nKGxhdGxuZyk7CiAgCX0sCgogIAlvbkFkZDogZnVuY3Rpb24gKG1hcCkgewogIAkJdGhpcy5fem9vbUFuaW1hdGVkID0gdGhpcy5fem9vbUFuaW1hdGVkICYmIG1hcC5vcHRpb25zLm1hcmtlclpvb21BbmltYXRpb247CgogIAkJaWYgKHRoaXMuX3pvb21BbmltYXRlZCkgewogIAkJCW1hcC5vbignem9vbWFuaW0nLCB0aGlzLl9hbmltYXRlWm9vbSwgdGhpcyk7CiAgCQl9CgogIAkJdGhpcy5faW5pdEljb24oKTsKICAJCXRoaXMudXBkYXRlKCk7CiAgCX0sCgogIAlvblJlbW92ZTogZnVuY3Rpb24gKG1hcCkgewogIAkJaWYgKHRoaXMuZHJhZ2dpbmcgJiYgdGhpcy5kcmFnZ2luZy5lbmFibGVkKCkpIHsKICAJCQl0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlID0gdHJ1ZTsKICAJCQl0aGlzLmRyYWdnaW5nLnJlbW92ZUhvb2tzKCk7CiAgCQl9CiAgCQlkZWxldGUgdGhpcy5kcmFnZ2luZzsKCiAgCQlpZiAodGhpcy5fem9vbUFuaW1hdGVkKSB7CiAgCQkJbWFwLm9mZignem9vbWFuaW0nLCB0aGlzLl9hbmltYXRlWm9vbSwgdGhpcyk7CiAgCQl9CgogIAkJdGhpcy5fcmVtb3ZlSWNvbigpOwogIAkJdGhpcy5fcmVtb3ZlU2hhZG93KCk7CiAgCX0sCgogIAlnZXRFdmVudHM6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB7CiAgCQkJem9vbTogdGhpcy51cGRhdGUsCiAgCQkJdmlld3Jlc2V0OiB0aGlzLnVwZGF0ZQogIAkJfTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0TGF0TG5nOiBMYXRMbmcKICAJLy8gUmV0dXJucyB0aGUgY3VycmVudCBnZW9ncmFwaGljYWwgcG9zaXRpb24gb2YgdGhlIG1hcmtlci4KICAJZ2V0TGF0TG5nOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbGF0bG5nOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRMYXRMbmcobGF0bG5nOiBMYXRMbmcpOiB0aGlzCiAgCS8vIENoYW5nZXMgdGhlIG1hcmtlciBwb3NpdGlvbiB0byB0aGUgZ2l2ZW4gcG9pbnQuCiAgCXNldExhdExuZzogZnVuY3Rpb24gKGxhdGxuZykgewogIAkJdmFyIG9sZExhdExuZyA9IHRoaXMuX2xhdGxuZzsKICAJCXRoaXMuX2xhdGxuZyA9IHRvTGF0TG5nKGxhdGxuZyk7CiAgCQl0aGlzLnVwZGF0ZSgpOwoKICAJCS8vIEBldmVudCBtb3ZlOiBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgbWFya2VyIGlzIG1vdmVkIHZpYSBbYHNldExhdExuZ2BdKCNtYXJrZXItc2V0bGF0bG5nKSBvciBieSBbZHJhZ2dpbmddKCNtYXJrZXItZHJhZ2dpbmcpLiBPbGQgYW5kIG5ldyBjb29yZGluYXRlcyBhcmUgaW5jbHVkZWQgaW4gZXZlbnQgYXJndW1lbnRzIGFzIGBvbGRMYXRMbmdgLCBgbGF0bG5nYC4KICAJCXJldHVybiB0aGlzLmZpcmUoJ21vdmUnLCB7b2xkTGF0TG5nOiBvbGRMYXRMbmcsIGxhdGxuZzogdGhpcy5fbGF0bG5nfSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFpJbmRleE9mZnNldChvZmZzZXQ6IE51bWJlcik6IHRoaXMKICAJLy8gQ2hhbmdlcyB0aGUgW3pJbmRleCBvZmZzZXRdKCNtYXJrZXItemluZGV4b2Zmc2V0KSBvZiB0aGUgbWFya2VyLgogIAlzZXRaSW5kZXhPZmZzZXQ6IGZ1bmN0aW9uIChvZmZzZXQpIHsKICAJCXRoaXMub3B0aW9ucy56SW5kZXhPZmZzZXQgPSBvZmZzZXQ7CiAgCQlyZXR1cm4gdGhpcy51cGRhdGUoKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0SWNvbjogSWNvbgogIAkvLyBSZXR1cm5zIHRoZSBjdXJyZW50IGljb24gdXNlZCBieSB0aGUgbWFya2VyCiAgCWdldEljb246IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLm9wdGlvbnMuaWNvbjsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0SWNvbihpY29uOiBJY29uKTogdGhpcwogIAkvLyBDaGFuZ2VzIHRoZSBtYXJrZXIgaWNvbi4KICAJc2V0SWNvbjogZnVuY3Rpb24gKGljb24pIHsKCiAgCQl0aGlzLm9wdGlvbnMuaWNvbiA9IGljb247CgogIAkJaWYgKHRoaXMuX21hcCkgewogIAkJCXRoaXMuX2luaXRJY29uKCk7CiAgCQkJdGhpcy51cGRhdGUoKTsKICAJCX0KCiAgCQlpZiAodGhpcy5fcG9wdXApIHsKICAJCQl0aGlzLmJpbmRQb3B1cCh0aGlzLl9wb3B1cCwgdGhpcy5fcG9wdXAub3B0aW9ucyk7CiAgCQl9CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAlnZXRFbGVtZW50OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5faWNvbjsKICAJfSwKCiAgCXVwZGF0ZTogZnVuY3Rpb24gKCkgewoKICAJCWlmICh0aGlzLl9pY29uICYmIHRoaXMuX21hcCkgewogIAkJCXZhciBwb3MgPSB0aGlzLl9tYXAubGF0TG5nVG9MYXllclBvaW50KHRoaXMuX2xhdGxuZykucm91bmQoKTsKICAJCQl0aGlzLl9zZXRQb3MocG9zKTsKICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9pbml0SWNvbjogZnVuY3Rpb24gKCkgewogIAkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsCiAgCQkgICAgY2xhc3NUb0FkZCA9ICdsZWFmbGV0LXpvb20tJyArICh0aGlzLl96b29tQW5pbWF0ZWQgPyAnYW5pbWF0ZWQnIDogJ2hpZGUnKTsKCiAgCQl2YXIgaWNvbiA9IG9wdGlvbnMuaWNvbi5jcmVhdGVJY29uKHRoaXMuX2ljb24pLAogIAkJICAgIGFkZEljb24gPSBmYWxzZTsKCiAgCQkvLyBpZiB3ZSdyZSBub3QgcmV1c2luZyB0aGUgaWNvbiwgcmVtb3ZlIHRoZSBvbGQgb25lIGFuZCBpbml0IG5ldyBvbmUKICAJCWlmIChpY29uICE9PSB0aGlzLl9pY29uKSB7CiAgCQkJaWYgKHRoaXMuX2ljb24pIHsKICAJCQkJdGhpcy5fcmVtb3ZlSWNvbigpOwogIAkJCX0KICAJCQlhZGRJY29uID0gdHJ1ZTsKCiAgCQkJaWYgKG9wdGlvbnMudGl0bGUpIHsKICAJCQkJaWNvbi50aXRsZSA9IG9wdGlvbnMudGl0bGU7CiAgCQkJfQoKICAJCQlpZiAoaWNvbi50YWdOYW1lID09PSAnSU1HJykgewogIAkJCQlpY29uLmFsdCA9IG9wdGlvbnMuYWx0IHx8ICcnOwogIAkJCX0KICAJCX0KCiAgCQlhZGRDbGFzcyhpY29uLCBjbGFzc1RvQWRkKTsKCiAgCQlpZiAob3B0aW9ucy5rZXlib2FyZCkgewogIAkJCWljb24udGFiSW5kZXggPSAnMCc7CiAgCQkJaWNvbi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7CiAgCQl9CgogIAkJdGhpcy5faWNvbiA9IGljb247CgogIAkJaWYgKG9wdGlvbnMucmlzZU9uSG92ZXIpIHsKICAJCQl0aGlzLm9uKHsKICAJCQkJbW91c2VvdmVyOiB0aGlzLl9icmluZ1RvRnJvbnQsCiAgCQkJCW1vdXNlb3V0OiB0aGlzLl9yZXNldFpJbmRleAogIAkJCX0pOwogIAkJfQoKICAJCWlmICh0aGlzLm9wdGlvbnMuYXV0b1Bhbk9uRm9jdXMpIHsKICAJCQlvbihpY29uLCAnZm9jdXMnLCB0aGlzLl9wYW5PbkZvY3VzLCB0aGlzKTsKICAJCX0KCiAgCQl2YXIgbmV3U2hhZG93ID0gb3B0aW9ucy5pY29uLmNyZWF0ZVNoYWRvdyh0aGlzLl9zaGFkb3cpLAogIAkJICAgIGFkZFNoYWRvdyA9IGZhbHNlOwoKICAJCWlmIChuZXdTaGFkb3cgIT09IHRoaXMuX3NoYWRvdykgewogIAkJCXRoaXMuX3JlbW92ZVNoYWRvdygpOwogIAkJCWFkZFNoYWRvdyA9IHRydWU7CiAgCQl9CgogIAkJaWYgKG5ld1NoYWRvdykgewogIAkJCWFkZENsYXNzKG5ld1NoYWRvdywgY2xhc3NUb0FkZCk7CiAgCQkJbmV3U2hhZG93LmFsdCA9ICcnOwogIAkJfQogIAkJdGhpcy5fc2hhZG93ID0gbmV3U2hhZG93OwoKCiAgCQlpZiAob3B0aW9ucy5vcGFjaXR5IDwgMSkgewogIAkJCXRoaXMuX3VwZGF0ZU9wYWNpdHkoKTsKICAJCX0KCgogIAkJaWYgKGFkZEljb24pIHsKICAJCQl0aGlzLmdldFBhbmUoKS5hcHBlbmRDaGlsZCh0aGlzLl9pY29uKTsKICAJCX0KICAJCXRoaXMuX2luaXRJbnRlcmFjdGlvbigpOwogIAkJaWYgKG5ld1NoYWRvdyAmJiBhZGRTaGFkb3cpIHsKICAJCQl0aGlzLmdldFBhbmUob3B0aW9ucy5zaGFkb3dQYW5lKS5hcHBlbmRDaGlsZCh0aGlzLl9zaGFkb3cpOwogIAkJfQogIAl9LAoKICAJX3JlbW92ZUljb246IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLm9wdGlvbnMucmlzZU9uSG92ZXIpIHsKICAJCQl0aGlzLm9mZih7CiAgCQkJCW1vdXNlb3ZlcjogdGhpcy5fYnJpbmdUb0Zyb250LAogIAkJCQltb3VzZW91dDogdGhpcy5fcmVzZXRaSW5kZXgKICAJCQl9KTsKICAJCX0KCiAgCQlpZiAodGhpcy5vcHRpb25zLmF1dG9QYW5PbkZvY3VzKSB7CiAgCQkJb2ZmKHRoaXMuX2ljb24sICdmb2N1cycsIHRoaXMuX3Bhbk9uRm9jdXMsIHRoaXMpOwogIAkJfQoKICAJCXJlbW92ZSh0aGlzLl9pY29uKTsKICAJCXRoaXMucmVtb3ZlSW50ZXJhY3RpdmVUYXJnZXQodGhpcy5faWNvbik7CgogIAkJdGhpcy5faWNvbiA9IG51bGw7CiAgCX0sCgogIAlfcmVtb3ZlU2hhZG93OiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fc2hhZG93KSB7CiAgCQkJcmVtb3ZlKHRoaXMuX3NoYWRvdyk7CiAgCQl9CiAgCQl0aGlzLl9zaGFkb3cgPSBudWxsOwogIAl9LAoKICAJX3NldFBvczogZnVuY3Rpb24gKHBvcykgewoKICAJCWlmICh0aGlzLl9pY29uKSB7CiAgCQkJc2V0UG9zaXRpb24odGhpcy5faWNvbiwgcG9zKTsKICAJCX0KCiAgCQlpZiAodGhpcy5fc2hhZG93KSB7CiAgCQkJc2V0UG9zaXRpb24odGhpcy5fc2hhZG93LCBwb3MpOwogIAkJfQoKICAJCXRoaXMuX3pJbmRleCA9IHBvcy55ICsgdGhpcy5vcHRpb25zLnpJbmRleE9mZnNldDsKCiAgCQl0aGlzLl9yZXNldFpJbmRleCgpOwogIAl9LAoKICAJX3VwZGF0ZVpJbmRleDogZnVuY3Rpb24gKG9mZnNldCkgewogIAkJaWYgKHRoaXMuX2ljb24pIHsKICAJCQl0aGlzLl9pY29uLnN0eWxlLnpJbmRleCA9IHRoaXMuX3pJbmRleCArIG9mZnNldDsKICAJCX0KICAJfSwKCiAgCV9hbmltYXRlWm9vbTogZnVuY3Rpb24gKG9wdCkgewogIAkJdmFyIHBvcyA9IHRoaXMuX21hcC5fbGF0TG5nVG9OZXdMYXllclBvaW50KHRoaXMuX2xhdGxuZywgb3B0Lnpvb20sIG9wdC5jZW50ZXIpLnJvdW5kKCk7CgogIAkJdGhpcy5fc2V0UG9zKHBvcyk7CiAgCX0sCgogIAlfaW5pdEludGVyYWN0aW9uOiBmdW5jdGlvbiAoKSB7CgogIAkJaWYgKCF0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUpIHsgcmV0dXJuOyB9CgogIAkJYWRkQ2xhc3ModGhpcy5faWNvbiwgJ2xlYWZsZXQtaW50ZXJhY3RpdmUnKTsKCiAgCQl0aGlzLmFkZEludGVyYWN0aXZlVGFyZ2V0KHRoaXMuX2ljb24pOwoKICAJCWlmIChNYXJrZXJEcmFnKSB7CiAgCQkJdmFyIGRyYWdnYWJsZSA9IHRoaXMub3B0aW9ucy5kcmFnZ2FibGU7CiAgCQkJaWYgKHRoaXMuZHJhZ2dpbmcpIHsKICAJCQkJZHJhZ2dhYmxlID0gdGhpcy5kcmFnZ2luZy5lbmFibGVkKCk7CiAgCQkJCXRoaXMuZHJhZ2dpbmcuZGlzYWJsZSgpOwogIAkJCX0KCiAgCQkJdGhpcy5kcmFnZ2luZyA9IG5ldyBNYXJrZXJEcmFnKHRoaXMpOwoKICAJCQlpZiAoZHJhZ2dhYmxlKSB7CiAgCQkJCXRoaXMuZHJhZ2dpbmcuZW5hYmxlKCk7CiAgCQkJfQogIAkJfQogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRPcGFjaXR5KG9wYWNpdHk6IE51bWJlcik6IHRoaXMKICAJLy8gQ2hhbmdlcyB0aGUgb3BhY2l0eSBvZiB0aGUgbWFya2VyLgogIAlzZXRPcGFjaXR5OiBmdW5jdGlvbiAob3BhY2l0eSkgewogIAkJdGhpcy5vcHRpb25zLm9wYWNpdHkgPSBvcGFjaXR5OwogIAkJaWYgKHRoaXMuX21hcCkgewogIAkJCXRoaXMuX3VwZGF0ZU9wYWNpdHkoKTsKICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV91cGRhdGVPcGFjaXR5OiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgb3BhY2l0eSA9IHRoaXMub3B0aW9ucy5vcGFjaXR5OwoKICAJCWlmICh0aGlzLl9pY29uKSB7CiAgCQkJc2V0T3BhY2l0eSh0aGlzLl9pY29uLCBvcGFjaXR5KTsKICAJCX0KCiAgCQlpZiAodGhpcy5fc2hhZG93KSB7CiAgCQkJc2V0T3BhY2l0eSh0aGlzLl9zaGFkb3csIG9wYWNpdHkpOwogIAkJfQogIAl9LAoKICAJX2JyaW5nVG9Gcm9udDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fdXBkYXRlWkluZGV4KHRoaXMub3B0aW9ucy5yaXNlT2Zmc2V0KTsKICAJfSwKCiAgCV9yZXNldFpJbmRleDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fdXBkYXRlWkluZGV4KDApOwogIAl9LAoKICAJX3Bhbk9uRm9jdXM6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBtYXAgPSB0aGlzLl9tYXA7CiAgCQlpZiAoIW1hcCkgeyByZXR1cm47IH0KCiAgCQl2YXIgaWNvbk9wdHMgPSB0aGlzLm9wdGlvbnMuaWNvbi5vcHRpb25zOwogIAkJdmFyIHNpemUgPSBpY29uT3B0cy5pY29uU2l6ZSA/IHRvUG9pbnQoaWNvbk9wdHMuaWNvblNpemUpIDogdG9Qb2ludCgwLCAwKTsKICAJCXZhciBhbmNob3IgPSBpY29uT3B0cy5pY29uQW5jaG9yID8gdG9Qb2ludChpY29uT3B0cy5pY29uQW5jaG9yKSA6IHRvUG9pbnQoMCwgMCk7CgogIAkJbWFwLnBhbkluc2lkZSh0aGlzLl9sYXRsbmcsIHsKICAJCQlwYWRkaW5nVG9wTGVmdDogYW5jaG9yLAogIAkJCXBhZGRpbmdCb3R0b21SaWdodDogc2l6ZS5zdWJ0cmFjdChhbmNob3IpCiAgCQl9KTsKICAJfSwKCiAgCV9nZXRQb3B1cEFuY2hvcjogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMub3B0aW9ucy5pY29uLm9wdGlvbnMucG9wdXBBbmNob3I7CiAgCX0sCgogIAlfZ2V0VG9vbHRpcEFuY2hvcjogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMub3B0aW9ucy5pY29uLm9wdGlvbnMudG9vbHRpcEFuY2hvcjsKICAJfQogIH0pOwoKCiAgLy8gZmFjdG9yeSBMLm1hcmtlcihsYXRsbmc6IExhdExuZywgb3B0aW9ucz8gOiBNYXJrZXIgb3B0aW9ucykKCiAgLy8gQGZhY3RvcnkgTC5tYXJrZXIobGF0bG5nOiBMYXRMbmcsIG9wdGlvbnM/IDogTWFya2VyIG9wdGlvbnMpCiAgLy8gSW5zdGFudGlhdGVzIGEgTWFya2VyIG9iamVjdCBnaXZlbiBhIGdlb2dyYXBoaWNhbCBwb2ludCBhbmQgb3B0aW9uYWxseSBhbiBvcHRpb25zIG9iamVjdC4KICBmdW5jdGlvbiBtYXJrZXIobGF0bG5nLCBvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgTWFya2VyKGxhdGxuZywgb3B0aW9ucyk7CiAgfQoKICAvKgogICAqIEBjbGFzcyBQYXRoCiAgICogQGFrYSBMLlBhdGgKICAgKiBAaW5oZXJpdHMgSW50ZXJhY3RpdmUgbGF5ZXIKICAgKgogICAqIEFuIGFic3RyYWN0IGNsYXNzIHRoYXQgY29udGFpbnMgb3B0aW9ucyBhbmQgY29uc3RhbnRzIHNoYXJlZCBiZXR3ZWVuIHZlY3RvcgogICAqIG92ZXJsYXlzIChQb2x5Z29uLCBQb2x5bGluZSwgQ2lyY2xlKS4gRG8gbm90IHVzZSBpdCBkaXJlY3RseS4gRXh0ZW5kcyBgTGF5ZXJgLgogICAqLwoKICB2YXIgUGF0aCA9IExheWVyLmV4dGVuZCh7CgogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIFBhdGggb3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQkvLyBAb3B0aW9uIHN0cm9rZTogQm9vbGVhbiA9IHRydWUKICAJCS8vIFdoZXRoZXIgdG8gZHJhdyBzdHJva2UgYWxvbmcgdGhlIHBhdGguIFNldCBpdCB0byBgZmFsc2VgIHRvIGRpc2FibGUgYm9yZGVycyBvbiBwb2x5Z29ucyBvciBjaXJjbGVzLgogIAkJc3Ryb2tlOiB0cnVlLAoKICAJCS8vIEBvcHRpb24gY29sb3I6IFN0cmluZyA9ICcjMzM4OGZmJwogIAkJLy8gU3Ryb2tlIGNvbG9yCiAgCQljb2xvcjogJyMzMzg4ZmYnLAoKICAJCS8vIEBvcHRpb24gd2VpZ2h0OiBOdW1iZXIgPSAzCiAgCQkvLyBTdHJva2Ugd2lkdGggaW4gcGl4ZWxzCiAgCQl3ZWlnaHQ6IDMsCgogIAkJLy8gQG9wdGlvbiBvcGFjaXR5OiBOdW1iZXIgPSAxLjAKICAJCS8vIFN0cm9rZSBvcGFjaXR5CiAgCQlvcGFjaXR5OiAxLAoKICAJCS8vIEBvcHRpb24gbGluZUNhcDogU3RyaW5nPSAncm91bmQnCiAgCQkvLyBBIHN0cmluZyB0aGF0IGRlZmluZXMgW3NoYXBlIHRvIGJlIHVzZWQgYXQgdGhlIGVuZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zdHJva2UtbGluZWNhcCkgb2YgdGhlIHN0cm9rZS4KICAJCWxpbmVDYXA6ICdyb3VuZCcsCgogIAkJLy8gQG9wdGlvbiBsaW5lSm9pbjogU3RyaW5nID0gJ3JvdW5kJwogIAkJLy8gQSBzdHJpbmcgdGhhdCBkZWZpbmVzIFtzaGFwZSB0byBiZSB1c2VkIGF0IHRoZSBjb3JuZXJzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3N0cm9rZS1saW5lam9pbikgb2YgdGhlIHN0cm9rZS4KICAJCWxpbmVKb2luOiAncm91bmQnLAoKICAJCS8vIEBvcHRpb24gZGFzaEFycmF5OiBTdHJpbmcgPSBudWxsCiAgCQkvLyBBIHN0cmluZyB0aGF0IGRlZmluZXMgdGhlIHN0cm9rZSBbZGFzaCBwYXR0ZXJuXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3N0cm9rZS1kYXNoYXJyYXkpLiBEb2Vzbid0IHdvcmsgb24gYENhbnZhc2AtcG93ZXJlZCBsYXllcnMgaW4gW3NvbWUgb2xkIGJyb3dzZXJzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3NldExpbmVEYXNoI0Jyb3dzZXJfY29tcGF0aWJpbGl0eSkuCiAgCQlkYXNoQXJyYXk6IG51bGwsCgogIAkJLy8gQG9wdGlvbiBkYXNoT2Zmc2V0OiBTdHJpbmcgPSBudWxsCiAgCQkvLyBBIHN0cmluZyB0aGF0IGRlZmluZXMgdGhlIFtkaXN0YW5jZSBpbnRvIHRoZSBkYXNoIHBhdHRlcm4gdG8gc3RhcnQgdGhlIGRhc2hdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc3Ryb2tlLWRhc2hvZmZzZXQpLiBEb2Vzbid0IHdvcmsgb24gYENhbnZhc2AtcG93ZXJlZCBsYXllcnMgaW4gW3NvbWUgb2xkIGJyb3dzZXJzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEL3NldExpbmVEYXNoI0Jyb3dzZXJfY29tcGF0aWJpbGl0eSkuCiAgCQlkYXNoT2Zmc2V0OiBudWxsLAoKICAJCS8vIEBvcHRpb24gZmlsbDogQm9vbGVhbiA9IGRlcGVuZHMKICAJCS8vIFdoZXRoZXIgdG8gZmlsbCB0aGUgcGF0aCB3aXRoIGNvbG9yLiBTZXQgaXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGZpbGxpbmcgb24gcG9seWdvbnMgb3IgY2lyY2xlcy4KICAJCWZpbGw6IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gZmlsbENvbG9yOiBTdHJpbmcgPSAqCiAgCQkvLyBGaWxsIGNvbG9yLiBEZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgdGhlIFtgY29sb3JgXSgjcGF0aC1jb2xvcikgb3B0aW9uCiAgCQlmaWxsQ29sb3I6IG51bGwsCgogIAkJLy8gQG9wdGlvbiBmaWxsT3BhY2l0eTogTnVtYmVyID0gMC4yCiAgCQkvLyBGaWxsIG9wYWNpdHkuCiAgCQlmaWxsT3BhY2l0eTogMC4yLAoKICAJCS8vIEBvcHRpb24gZmlsbFJ1bGU6IFN0cmluZyA9ICdldmVub2RkJwogIAkJLy8gQSBzdHJpbmcgdGhhdCBkZWZpbmVzIFtob3cgdGhlIGluc2lkZSBvZiBhIHNoYXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL2ZpbGwtcnVsZSkgaXMgZGV0ZXJtaW5lZC4KICAJCWZpbGxSdWxlOiAnZXZlbm9kZCcsCgogIAkJLy8gY2xhc3NOYW1lOiAnJywKCiAgCQkvLyBPcHRpb24gaW5oZXJpdGVkIGZyb20gIkludGVyYWN0aXZlIGxheWVyIiBhYnN0cmFjdCBjbGFzcwogIAkJaW50ZXJhY3RpdmU6IHRydWUsCgogIAkJLy8gQG9wdGlvbiBidWJibGluZ01vdXNlRXZlbnRzOiBCb29sZWFuID0gdHJ1ZQogIAkJLy8gV2hlbiBgdHJ1ZWAsIGEgbW91c2UgZXZlbnQgb24gdGhpcyBwYXRoIHdpbGwgdHJpZ2dlciB0aGUgc2FtZSBldmVudCBvbiB0aGUgbWFwCiAgCQkvLyAodW5sZXNzIFtgTC5Eb21FdmVudC5zdG9wUHJvcGFnYXRpb25gXSgjZG9tZXZlbnQtc3RvcHByb3BhZ2F0aW9uKSBpcyB1c2VkKS4KICAJCWJ1YmJsaW5nTW91c2VFdmVudHM6IHRydWUKICAJfSwKCiAgCWJlZm9yZUFkZDogZnVuY3Rpb24gKG1hcCkgewogIAkJLy8gUmVuZGVyZXIgaXMgc2V0IGhlcmUgYmVjYXVzZSB3ZSBuZWVkIHRvIGNhbGwgcmVuZGVyZXIuZ2V0RXZlbnRzCiAgCQkvLyBiZWZvcmUgdGhpcy5nZXRFdmVudHMuCiAgCQl0aGlzLl9yZW5kZXJlciA9IG1hcC5nZXRSZW5kZXJlcih0aGlzKTsKICAJfSwKCiAgCW9uQWRkOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLl9yZW5kZXJlci5faW5pdFBhdGgodGhpcyk7CiAgCQl0aGlzLl9yZXNldCgpOwogIAkJdGhpcy5fcmVuZGVyZXIuX2FkZFBhdGgodGhpcyk7CiAgCX0sCgogIAlvblJlbW92ZTogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fcmVuZGVyZXIuX3JlbW92ZVBhdGgodGhpcyk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHJlZHJhdygpOiB0aGlzCiAgCS8vIFJlZHJhd3MgdGhlIGxheWVyLiBTb21ldGltZXMgdXNlZnVsIGFmdGVyIHlvdSBjaGFuZ2VkIHRoZSBjb29yZGluYXRlcyB0aGF0IHRoZSBwYXRoIHVzZXMuCiAgCXJlZHJhdzogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX21hcCkgewogIAkJCXRoaXMuX3JlbmRlcmVyLl91cGRhdGVQYXRoKHRoaXMpOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFN0eWxlKHN0eWxlOiBQYXRoIG9wdGlvbnMpOiB0aGlzCiAgCS8vIENoYW5nZXMgdGhlIGFwcGVhcmFuY2Ugb2YgYSBQYXRoIGJhc2VkIG9uIHRoZSBvcHRpb25zIGluIHRoZSBgUGF0aCBvcHRpb25zYCBvYmplY3QuCiAgCXNldFN0eWxlOiBmdW5jdGlvbiAoc3R5bGUpIHsKICAJCXNldE9wdGlvbnModGhpcywgc3R5bGUpOwogIAkJaWYgKHRoaXMuX3JlbmRlcmVyKSB7CiAgCQkJdGhpcy5fcmVuZGVyZXIuX3VwZGF0ZVN0eWxlKHRoaXMpOwogIAkJCWlmICh0aGlzLm9wdGlvbnMuc3Ryb2tlICYmIHN0eWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzdHlsZSwgJ3dlaWdodCcpKSB7CiAgCQkJCXRoaXMuX3VwZGF0ZUJvdW5kcygpOwogIAkJCX0KICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBicmluZ1RvRnJvbnQoKTogdGhpcwogIAkvLyBCcmluZ3MgdGhlIGxheWVyIHRvIHRoZSB0b3Agb2YgYWxsIHBhdGggbGF5ZXJzLgogIAlicmluZ1RvRnJvbnQ6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9yZW5kZXJlcikgewogIAkJCXRoaXMuX3JlbmRlcmVyLl9icmluZ1RvRnJvbnQodGhpcyk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgYnJpbmdUb0JhY2soKTogdGhpcwogIAkvLyBCcmluZ3MgdGhlIGxheWVyIHRvIHRoZSBib3R0b20gb2YgYWxsIHBhdGggbGF5ZXJzLgogIAlicmluZ1RvQmFjazogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX3JlbmRlcmVyKSB7CiAgCQkJdGhpcy5fcmVuZGVyZXIuX2JyaW5nVG9CYWNrKHRoaXMpOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAlnZXRFbGVtZW50OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fcGF0aDsKICAJfSwKCiAgCV9yZXNldDogZnVuY3Rpb24gKCkgewogIAkJLy8gZGVmaW5lZCBpbiBjaGlsZCBjbGFzc2VzCiAgCQl0aGlzLl9wcm9qZWN0KCk7CiAgCQl0aGlzLl91cGRhdGUoKTsKICAJfSwKCiAgCV9jbGlja1RvbGVyYW5jZTogZnVuY3Rpb24gKCkgewogIAkJLy8gdXNlZCB3aGVuIGRvaW5nIGhpdCBkZXRlY3Rpb24gZm9yIENhbnZhcyBsYXllcnMKICAJCXJldHVybiAodGhpcy5vcHRpb25zLnN0cm9rZSA/IHRoaXMub3B0aW9ucy53ZWlnaHQgLyAyIDogMCkgKwogIAkJICAodGhpcy5fcmVuZGVyZXIub3B0aW9ucy50b2xlcmFuY2UgfHwgMCk7CiAgCX0KICB9KTsKCiAgLyoKICAgKiBAY2xhc3MgQ2lyY2xlTWFya2VyCiAgICogQGFrYSBMLkNpcmNsZU1hcmtlcgogICAqIEBpbmhlcml0cyBQYXRoCiAgICoKICAgKiBBIGNpcmNsZSBvZiBhIGZpeGVkIHNpemUgd2l0aCByYWRpdXMgc3BlY2lmaWVkIGluIHBpeGVscy4gRXh0ZW5kcyBgUGF0aGAuCiAgICovCgogIHZhciBDaXJjbGVNYXJrZXIgPSBQYXRoLmV4dGVuZCh7CgogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIENpcmNsZU1hcmtlciBvcHRpb25zCiAgCW9wdGlvbnM6IHsKICAJCWZpbGw6IHRydWUsCgogIAkJLy8gQG9wdGlvbiByYWRpdXM6IE51bWJlciA9IDEwCiAgCQkvLyBSYWRpdXMgb2YgdGhlIGNpcmNsZSBtYXJrZXIsIGluIHBpeGVscwogIAkJcmFkaXVzOiAxMAogIAl9LAoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGxhdGxuZywgb3B0aW9ucykgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKICAJCXRoaXMuX2xhdGxuZyA9IHRvTGF0TG5nKGxhdGxuZyk7CiAgCQl0aGlzLl9yYWRpdXMgPSB0aGlzLm9wdGlvbnMucmFkaXVzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRMYXRMbmcobGF0TG5nOiBMYXRMbmcpOiB0aGlzCiAgCS8vIFNldHMgdGhlIHBvc2l0aW9uIG9mIGEgY2lyY2xlIG1hcmtlciB0byBhIG5ldyBsb2NhdGlvbi4KICAJc2V0TGF0TG5nOiBmdW5jdGlvbiAobGF0bG5nKSB7CiAgCQl2YXIgb2xkTGF0TG5nID0gdGhpcy5fbGF0bG5nOwogIAkJdGhpcy5fbGF0bG5nID0gdG9MYXRMbmcobGF0bG5nKTsKICAJCXRoaXMucmVkcmF3KCk7CgogIAkJLy8gQGV2ZW50IG1vdmU6IEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSBtYXJrZXIgaXMgbW92ZWQgdmlhIFtgc2V0TGF0TG5nYF0oI2NpcmNsZW1hcmtlci1zZXRsYXRsbmcpLiBPbGQgYW5kIG5ldyBjb29yZGluYXRlcyBhcmUgaW5jbHVkZWQgaW4gZXZlbnQgYXJndW1lbnRzIGFzIGBvbGRMYXRMbmdgLCBgbGF0bG5nYC4KICAJCXJldHVybiB0aGlzLmZpcmUoJ21vdmUnLCB7b2xkTGF0TG5nOiBvbGRMYXRMbmcsIGxhdGxuZzogdGhpcy5fbGF0bG5nfSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldExhdExuZygpOiBMYXRMbmcKICAJLy8gUmV0dXJucyB0aGUgY3VycmVudCBnZW9ncmFwaGljYWwgcG9zaXRpb24gb2YgdGhlIGNpcmNsZSBtYXJrZXIKICAJZ2V0TGF0TG5nOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbGF0bG5nOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRSYWRpdXMocmFkaXVzOiBOdW1iZXIpOiB0aGlzCiAgCS8vIFNldHMgdGhlIHJhZGl1cyBvZiBhIGNpcmNsZSBtYXJrZXIuIFVuaXRzIGFyZSBpbiBwaXhlbHMuCiAgCXNldFJhZGl1czogZnVuY3Rpb24gKHJhZGl1cykgewogIAkJdGhpcy5vcHRpb25zLnJhZGl1cyA9IHRoaXMuX3JhZGl1cyA9IHJhZGl1czsKICAJCXJldHVybiB0aGlzLnJlZHJhdygpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRSYWRpdXMoKTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIGN1cnJlbnQgcmFkaXVzIG9mIHRoZSBjaXJjbGUKICAJZ2V0UmFkaXVzOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fcmFkaXVzOwogIAl9LAoKICAJc2V0U3R5bGUgOiBmdW5jdGlvbiAob3B0aW9ucykgewogIAkJdmFyIHJhZGl1cyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5yYWRpdXMgfHwgdGhpcy5fcmFkaXVzOwogIAkJUGF0aC5wcm90b3R5cGUuc2V0U3R5bGUuY2FsbCh0aGlzLCBvcHRpb25zKTsKICAJCXRoaXMuc2V0UmFkaXVzKHJhZGl1cyk7CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9wcm9qZWN0OiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLl9wb2ludCA9IHRoaXMuX21hcC5sYXRMbmdUb0xheWVyUG9pbnQodGhpcy5fbGF0bG5nKTsKICAJCXRoaXMuX3VwZGF0ZUJvdW5kcygpOwogIAl9LAoKICAJX3VwZGF0ZUJvdW5kczogZnVuY3Rpb24gKCkgewogIAkJdmFyIHIgPSB0aGlzLl9yYWRpdXMsCiAgCQkgICAgcjIgPSB0aGlzLl9yYWRpdXNZIHx8IHIsCiAgCQkgICAgdyA9IHRoaXMuX2NsaWNrVG9sZXJhbmNlKCksCiAgCQkgICAgcCA9IFtyICsgdywgcjIgKyB3XTsKICAJCXRoaXMuX3B4Qm91bmRzID0gbmV3IEJvdW5kcyh0aGlzLl9wb2ludC5zdWJ0cmFjdChwKSwgdGhpcy5fcG9pbnQuYWRkKHApKTsKICAJfSwKCiAgCV91cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9tYXApIHsKICAJCQl0aGlzLl91cGRhdGVQYXRoKCk7CiAgCQl9CiAgCX0sCgogIAlfdXBkYXRlUGF0aDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fcmVuZGVyZXIuX3VwZGF0ZUNpcmNsZSh0aGlzKTsKICAJfSwKCiAgCV9lbXB0eTogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX3JhZGl1cyAmJiAhdGhpcy5fcmVuZGVyZXIuX2JvdW5kcy5pbnRlcnNlY3RzKHRoaXMuX3B4Qm91bmRzKTsKICAJfSwKCiAgCS8vIE5lZWRlZCBieSB0aGUgYENhbnZhc2AgcmVuZGVyZXIgZm9yIGludGVyYWN0aXZpdHkKICAJX2NvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uIChwKSB7CiAgCQlyZXR1cm4gcC5kaXN0YW5jZVRvKHRoaXMuX3BvaW50KSA8PSB0aGlzLl9yYWRpdXMgKyB0aGlzLl9jbGlja1RvbGVyYW5jZSgpOwogIAl9CiAgfSk7CgoKICAvLyBAZmFjdG9yeSBMLmNpcmNsZU1hcmtlcihsYXRsbmc6IExhdExuZywgb3B0aW9ucz86IENpcmNsZU1hcmtlciBvcHRpb25zKQogIC8vIEluc3RhbnRpYXRlcyBhIGNpcmNsZSBtYXJrZXIgb2JqZWN0IGdpdmVuIGEgZ2VvZ3JhcGhpY2FsIHBvaW50LCBhbmQgYW4gb3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuCiAgZnVuY3Rpb24gY2lyY2xlTWFya2VyKGxhdGxuZywgb3B0aW9ucykgewogIAlyZXR1cm4gbmV3IENpcmNsZU1hcmtlcihsYXRsbmcsIG9wdGlvbnMpOwogIH0KCiAgLyoKICAgKiBAY2xhc3MgQ2lyY2xlCiAgICogQGFrYSBMLkNpcmNsZQogICAqIEBpbmhlcml0cyBDaXJjbGVNYXJrZXIKICAgKgogICAqIEEgY2xhc3MgZm9yIGRyYXdpbmcgY2lyY2xlIG92ZXJsYXlzIG9uIGEgbWFwLiBFeHRlbmRzIGBDaXJjbGVNYXJrZXJgLgogICAqCiAgICogSXQncyBhbiBhcHByb3hpbWF0aW9uIGFuZCBzdGFydHMgdG8gZGl2ZXJnZSBmcm9tIGEgcmVhbCBjaXJjbGUgY2xvc2VyIHRvIHBvbGVzIChkdWUgdG8gcHJvamVjdGlvbiBkaXN0b3J0aW9uKS4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIEwuY2lyY2xlKFs1MC41LCAzMC41XSwge3JhZGl1czogMjAwfSkuYWRkVG8obWFwKTsKICAgKiBgYGAKICAgKi8KCiAgdmFyIENpcmNsZSA9IENpcmNsZU1hcmtlci5leHRlbmQoewoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKGxhdGxuZywgb3B0aW9ucywgbGVnYWN5T3B0aW9ucykgewogIAkJaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykgewogIAkJCS8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggMC43LnggZmFjdG9yeSAobGF0bG5nLCByYWRpdXMsIG9wdGlvbnM/KQogIAkJCW9wdGlvbnMgPSBleHRlbmQoe30sIGxlZ2FjeU9wdGlvbnMsIHtyYWRpdXM6IG9wdGlvbnN9KTsKICAJCX0KICAJCXNldE9wdGlvbnModGhpcywgb3B0aW9ucyk7CiAgCQl0aGlzLl9sYXRsbmcgPSB0b0xhdExuZyhsYXRsbmcpOwoKICAJCWlmIChpc05hTih0aGlzLm9wdGlvbnMucmFkaXVzKSkgeyB0aHJvdyBuZXcgRXJyb3IoJ0NpcmNsZSByYWRpdXMgY2Fubm90IGJlIE5hTicpOyB9CgogIAkJLy8gQHNlY3Rpb24KICAJCS8vIEBha2EgQ2lyY2xlIG9wdGlvbnMKICAJCS8vIEBvcHRpb24gcmFkaXVzOiBOdW1iZXI7IFJhZGl1cyBvZiB0aGUgY2lyY2xlLCBpbiBtZXRlcnMuCiAgCQl0aGlzLl9tUmFkaXVzID0gdGhpcy5vcHRpb25zLnJhZGl1czsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0UmFkaXVzKHJhZGl1czogTnVtYmVyKTogdGhpcwogIAkvLyBTZXRzIHRoZSByYWRpdXMgb2YgYSBjaXJjbGUuIFVuaXRzIGFyZSBpbiBtZXRlcnMuCiAgCXNldFJhZGl1czogZnVuY3Rpb24gKHJhZGl1cykgewogIAkJdGhpcy5fbVJhZGl1cyA9IHJhZGl1czsKICAJCXJldHVybiB0aGlzLnJlZHJhdygpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRSYWRpdXMoKTogTnVtYmVyCiAgCS8vIFJldHVybnMgdGhlIGN1cnJlbnQgcmFkaXVzIG9mIGEgY2lyY2xlLiBVbml0cyBhcmUgaW4gbWV0ZXJzLgogIAlnZXRSYWRpdXM6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9tUmFkaXVzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRCb3VuZHMoKTogTGF0TG5nQm91bmRzCiAgCS8vIFJldHVybnMgdGhlIGBMYXRMbmdCb3VuZHNgIG9mIHRoZSBwYXRoLgogIAlnZXRCb3VuZHM6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBoYWxmID0gW3RoaXMuX3JhZGl1cywgdGhpcy5fcmFkaXVzWSB8fCB0aGlzLl9yYWRpdXNdOwoKICAJCXJldHVybiBuZXcgTGF0TG5nQm91bmRzKAogIAkJCXRoaXMuX21hcC5sYXllclBvaW50VG9MYXRMbmcodGhpcy5fcG9pbnQuc3VidHJhY3QoaGFsZikpLAogIAkJCXRoaXMuX21hcC5sYXllclBvaW50VG9MYXRMbmcodGhpcy5fcG9pbnQuYWRkKGhhbGYpKSk7CiAgCX0sCgogIAlzZXRTdHlsZTogUGF0aC5wcm90b3R5cGUuc2V0U3R5bGUsCgogIAlfcHJvamVjdDogZnVuY3Rpb24gKCkgewoKICAJCXZhciBsbmcgPSB0aGlzLl9sYXRsbmcubG5nLAogIAkJICAgIGxhdCA9IHRoaXMuX2xhdGxuZy5sYXQsCiAgCQkgICAgbWFwID0gdGhpcy5fbWFwLAogIAkJICAgIGNycyA9IG1hcC5vcHRpb25zLmNyczsKCiAgCQlpZiAoY3JzLmRpc3RhbmNlID09PSBFYXJ0aC5kaXN0YW5jZSkgewogIAkJCXZhciBkID0gTWF0aC5QSSAvIDE4MCwKICAJCQkgICAgbGF0UiA9ICh0aGlzLl9tUmFkaXVzIC8gRWFydGguUikgLyBkLAogIAkJCSAgICB0b3AgPSBtYXAucHJvamVjdChbbGF0ICsgbGF0UiwgbG5nXSksCiAgCQkJICAgIGJvdHRvbSA9IG1hcC5wcm9qZWN0KFtsYXQgLSBsYXRSLCBsbmddKSwKICAJCQkgICAgcCA9IHRvcC5hZGQoYm90dG9tKS5kaXZpZGVCeSgyKSwKICAJCQkgICAgbGF0MiA9IG1hcC51bnByb2plY3QocCkubGF0LAogIAkJCSAgICBsbmdSID0gTWF0aC5hY29zKChNYXRoLmNvcyhsYXRSICogZCkgLSBNYXRoLnNpbihsYXQgKiBkKSAqIE1hdGguc2luKGxhdDIgKiBkKSkgLwogIAkJCSAgICAgICAgICAgIChNYXRoLmNvcyhsYXQgKiBkKSAqIE1hdGguY29zKGxhdDIgKiBkKSkpIC8gZDsKCiAgCQkJaWYgKGlzTmFOKGxuZ1IpIHx8IGxuZ1IgPT09IDApIHsKICAJCQkJbG5nUiA9IGxhdFIgLyBNYXRoLmNvcyhNYXRoLlBJIC8gMTgwICogbGF0KTsgLy8gRmFsbGJhY2sgZm9yIGVkZ2UgY2FzZSwgIzI0MjUKICAJCQl9CgogIAkJCXRoaXMuX3BvaW50ID0gcC5zdWJ0cmFjdChtYXAuZ2V0UGl4ZWxPcmlnaW4oKSk7CiAgCQkJdGhpcy5fcmFkaXVzID0gaXNOYU4obG5nUikgPyAwIDogcC54IC0gbWFwLnByb2plY3QoW2xhdDIsIGxuZyAtIGxuZ1JdKS54OwogIAkJCXRoaXMuX3JhZGl1c1kgPSBwLnkgLSB0b3AueTsKCiAgCQl9IGVsc2UgewogIAkJCXZhciBsYXRsbmcyID0gY3JzLnVucHJvamVjdChjcnMucHJvamVjdCh0aGlzLl9sYXRsbmcpLnN1YnRyYWN0KFt0aGlzLl9tUmFkaXVzLCAwXSkpOwoKICAJCQl0aGlzLl9wb2ludCA9IG1hcC5sYXRMbmdUb0xheWVyUG9pbnQodGhpcy5fbGF0bG5nKTsKICAJCQl0aGlzLl9yYWRpdXMgPSB0aGlzLl9wb2ludC54IC0gbWFwLmxhdExuZ1RvTGF5ZXJQb2ludChsYXRsbmcyKS54OwogIAkJfQoKICAJCXRoaXMuX3VwZGF0ZUJvdW5kcygpOwogIAl9CiAgfSk7CgogIC8vIEBmYWN0b3J5IEwuY2lyY2xlKGxhdGxuZzogTGF0TG5nLCBvcHRpb25zPzogQ2lyY2xlIG9wdGlvbnMpCiAgLy8gSW5zdGFudGlhdGVzIGEgY2lyY2xlIG9iamVjdCBnaXZlbiBhIGdlb2dyYXBoaWNhbCBwb2ludCwgYW5kIGFuIG9wdGlvbnMgb2JqZWN0CiAgLy8gd2hpY2ggY29udGFpbnMgdGhlIGNpcmNsZSByYWRpdXMuCiAgLy8gQGFsdGVybmF0aXZlCiAgLy8gQGZhY3RvcnkgTC5jaXJjbGUobGF0bG5nOiBMYXRMbmcsIHJhZGl1czogTnVtYmVyLCBvcHRpb25zPzogQ2lyY2xlIG9wdGlvbnMpCiAgLy8gT2Jzb2xldGUgd2F5IG9mIGluc3RhbnRpYXRpbmcgYSBjaXJjbGUsIGZvciBjb21wYXRpYmlsaXR5IHdpdGggMC43LnggY29kZS4KICAvLyBEbyBub3QgdXNlIGluIG5ldyBhcHBsaWNhdGlvbnMgb3IgcGx1Z2lucy4KICBmdW5jdGlvbiBjaXJjbGUobGF0bG5nLCBvcHRpb25zLCBsZWdhY3lPcHRpb25zKSB7CiAgCXJldHVybiBuZXcgQ2lyY2xlKGxhdGxuZywgb3B0aW9ucywgbGVnYWN5T3B0aW9ucyk7CiAgfQoKICAvKgogICAqIEBjbGFzcyBQb2x5bGluZQogICAqIEBha2EgTC5Qb2x5bGluZQogICAqIEBpbmhlcml0cyBQYXRoCiAgICoKICAgKiBBIGNsYXNzIGZvciBkcmF3aW5nIHBvbHlsaW5lIG92ZXJsYXlzIG9uIGEgbWFwLiBFeHRlbmRzIGBQYXRoYC4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIC8vIGNyZWF0ZSBhIHJlZCBwb2x5bGluZSBmcm9tIGFuIGFycmF5IG9mIExhdExuZyBwb2ludHMKICAgKiB2YXIgbGF0bG5ncyA9IFsKICAgKiAJWzQ1LjUxLCAtMTIyLjY4XSwKICAgKiAJWzM3Ljc3LCAtMTIyLjQzXSwKICAgKiAJWzM0LjA0LCAtMTE4LjJdCiAgICogXTsKICAgKgogICAqIHZhciBwb2x5bGluZSA9IEwucG9seWxpbmUobGF0bG5ncywge2NvbG9yOiAncmVkJ30pLmFkZFRvKG1hcCk7CiAgICoKICAgKiAvLyB6b29tIHRoZSBtYXAgdG8gdGhlIHBvbHlsaW5lCiAgICogbWFwLmZpdEJvdW5kcyhwb2x5bGluZS5nZXRCb3VuZHMoKSk7CiAgICogYGBgCiAgICoKICAgKiBZb3UgY2FuIGFsc28gcGFzcyBhIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5IHRvIHJlcHJlc2VudCBhIGBNdWx0aVBvbHlsaW5lYCBzaGFwZToKICAgKgogICAqIGBgYGpzCiAgICogLy8gY3JlYXRlIGEgcmVkIHBvbHlsaW5lIGZyb20gYW4gYXJyYXkgb2YgYXJyYXlzIG9mIExhdExuZyBwb2ludHMKICAgKiB2YXIgbGF0bG5ncyA9IFsKICAgKiAJW1s0NS41MSwgLTEyMi42OF0sCiAgICogCSBbMzcuNzcsIC0xMjIuNDNdLAogICAqIAkgWzM0LjA0LCAtMTE4LjJdXSwKICAgKiAJW1s0MC43OCwgLTczLjkxXSwKICAgKiAJIFs0MS44MywgLTg3LjYyXSwKICAgKiAJIFszMi43NiwgLTk2LjcyXV0KICAgKiBdOwogICAqIGBgYAogICAqLwoKCiAgdmFyIFBvbHlsaW5lID0gUGF0aC5leHRlbmQoewoKICAJLy8gQHNlY3Rpb24KICAJLy8gQGFrYSBQb2x5bGluZSBvcHRpb25zCiAgCW9wdGlvbnM6IHsKICAJCS8vIEBvcHRpb24gc21vb3RoRmFjdG9yOiBOdW1iZXIgPSAxLjAKICAJCS8vIEhvdyBtdWNoIHRvIHNpbXBsaWZ5IHRoZSBwb2x5bGluZSBvbiBlYWNoIHpvb20gbGV2ZWwuIE1vcmUgbWVhbnMKICAJCS8vIGJldHRlciBwZXJmb3JtYW5jZSBhbmQgc21vb3RoZXIgbG9vaywgYW5kIGxlc3MgbWVhbnMgbW9yZSBhY2N1cmF0ZSByZXByZXNlbnRhdGlvbi4KICAJCXNtb290aEZhY3RvcjogMS4wLAoKICAJCS8vIEBvcHRpb24gbm9DbGlwOiBCb29sZWFuID0gZmFsc2UKICAJCS8vIERpc2FibGUgcG9seWxpbmUgY2xpcHBpbmcuCiAgCQlub0NsaXA6IGZhbHNlCiAgCX0sCgogIAlpbml0aWFsaXplOiBmdW5jdGlvbiAobGF0bG5ncywgb3B0aW9ucykgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKICAJCXRoaXMuX3NldExhdExuZ3MobGF0bG5ncyk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldExhdExuZ3MoKTogTGF0TG5nW10KICAJLy8gUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcG9pbnRzIGluIHRoZSBwYXRoLCBvciBuZXN0ZWQgYXJyYXlzIG9mIHBvaW50cyBpbiBjYXNlIG9mIG11bHRpLXBvbHlsaW5lLgogIAlnZXRMYXRMbmdzOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbGF0bG5nczsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0TGF0TG5ncyhsYXRsbmdzOiBMYXRMbmdbXSk6IHRoaXMKICAJLy8gUmVwbGFjZXMgYWxsIHRoZSBwb2ludHMgaW4gdGhlIHBvbHlsaW5lIHdpdGggdGhlIGdpdmVuIGFycmF5IG9mIGdlb2dyYXBoaWNhbCBwb2ludHMuCiAgCXNldExhdExuZ3M6IGZ1bmN0aW9uIChsYXRsbmdzKSB7CiAgCQl0aGlzLl9zZXRMYXRMbmdzKGxhdGxuZ3MpOwogIAkJcmV0dXJuIHRoaXMucmVkcmF3KCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGlzRW1wdHkoKTogQm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgUG9seWxpbmUgaGFzIG5vIExhdExuZ3MuCiAgCWlzRW1wdHk6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiAhdGhpcy5fbGF0bG5ncy5sZW5ndGg7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGNsb3Nlc3RMYXllclBvaW50KHA6IFBvaW50KTogUG9pbnQKICAJLy8gUmV0dXJucyB0aGUgcG9pbnQgY2xvc2VzdCB0byBgcGAgb24gdGhlIFBvbHlsaW5lLgogIAljbG9zZXN0TGF5ZXJQb2ludDogZnVuY3Rpb24gKHApIHsKICAJCXZhciBtaW5EaXN0YW5jZSA9IEluZmluaXR5LAogIAkJICAgIG1pblBvaW50ID0gbnVsbCwKICAJCSAgICBjbG9zZXN0ID0gX3NxQ2xvc2VzdFBvaW50T25TZWdtZW50LAogIAkJICAgIHAxLCBwMjsKCiAgCQlmb3IgKHZhciBqID0gMCwgakxlbiA9IHRoaXMuX3BhcnRzLmxlbmd0aDsgaiA8IGpMZW47IGorKykgewogIAkJCXZhciBwb2ludHMgPSB0aGlzLl9wYXJ0c1tqXTsKCiAgCQkJZm9yICh2YXIgaSA9IDEsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJCQlwMSA9IHBvaW50c1tpIC0gMV07CiAgCQkJCXAyID0gcG9pbnRzW2ldOwoKICAJCQkJdmFyIHNxRGlzdCA9IGNsb3Nlc3QocCwgcDEsIHAyLCB0cnVlKTsKCiAgCQkJCWlmIChzcURpc3QgPCBtaW5EaXN0YW5jZSkgewogIAkJCQkJbWluRGlzdGFuY2UgPSBzcURpc3Q7CiAgCQkJCQltaW5Qb2ludCA9IGNsb3Nlc3QocCwgcDEsIHAyKTsKICAJCQkJfQogIAkJCX0KICAJCX0KICAJCWlmIChtaW5Qb2ludCkgewogIAkJCW1pblBvaW50LmRpc3RhbmNlID0gTWF0aC5zcXJ0KG1pbkRpc3RhbmNlKTsKICAJCX0KICAJCXJldHVybiBtaW5Qb2ludDsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Q2VudGVyKCk6IExhdExuZwogIAkvLyBSZXR1cm5zIHRoZSBjZW50ZXIgKFtjZW50cm9pZF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2VudHJvaWQpKSBvZiB0aGUgcG9seWxpbmUuCiAgCWdldENlbnRlcjogZnVuY3Rpb24gKCkgewogIAkJLy8gdGhyb3dzIGVycm9yIHdoZW4gbm90IHlldCBhZGRlZCB0byBtYXAgYXMgdGhpcyBjZW50ZXIgY2FsY3VsYXRpb24gcmVxdWlyZXMgcHJvamVjdGVkIGNvb3JkaW5hdGVzCiAgCQlpZiAoIXRoaXMuX21hcCkgewogIAkJCXRocm93IG5ldyBFcnJvcignTXVzdCBhZGQgbGF5ZXIgdG8gbWFwIGJlZm9yZSB1c2luZyBnZXRDZW50ZXIoKScpOwogIAkJfQoKICAJCXZhciBpLCBoYWxmRGlzdCwgc2VnRGlzdCwgZGlzdCwgcDEsIHAyLCByYXRpbywKICAJCSAgICBwb2ludHMgPSB0aGlzLl9yaW5nc1swXSwKICAJCSAgICBsZW4gPSBwb2ludHMubGVuZ3RoOwoKICAJCWlmICghbGVuKSB7IHJldHVybiBudWxsOyB9CgogIAkJLy8gcG9seWxpbmUgY2VudHJvaWQgYWxnb3JpdGhtOyBvbmx5IHVzZXMgdGhlIGZpcnN0IHJpbmcgaWYgdGhlcmUgYXJlIG11bHRpcGxlCgogIAkJZm9yIChpID0gMCwgaGFsZkRpc3QgPSAwOyBpIDwgbGVuIC0gMTsgaSsrKSB7CiAgCQkJaGFsZkRpc3QgKz0gcG9pbnRzW2ldLmRpc3RhbmNlVG8ocG9pbnRzW2kgKyAxXSkgLyAyOwogIAkJfQoKICAJCS8vIFRoZSBsaW5lIGlzIHNvIHNtYWxsIGluIHRoZSBjdXJyZW50IHZpZXcgdGhhdCBhbGwgcG9pbnRzIGFyZSBvbiB0aGUgc2FtZSBwaXhlbC4KICAJCWlmIChoYWxmRGlzdCA9PT0gMCkgewogIAkJCXJldHVybiB0aGlzLl9tYXAubGF5ZXJQb2ludFRvTGF0TG5nKHBvaW50c1swXSk7CiAgCQl9CgogIAkJZm9yIChpID0gMCwgZGlzdCA9IDA7IGkgPCBsZW4gLSAxOyBpKyspIHsKICAJCQlwMSA9IHBvaW50c1tpXTsKICAJCQlwMiA9IHBvaW50c1tpICsgMV07CiAgCQkJc2VnRGlzdCA9IHAxLmRpc3RhbmNlVG8ocDIpOwogIAkJCWRpc3QgKz0gc2VnRGlzdDsKCiAgCQkJaWYgKGRpc3QgPiBoYWxmRGlzdCkgewogIAkJCQlyYXRpbyA9IChkaXN0IC0gaGFsZkRpc3QpIC8gc2VnRGlzdDsKICAJCQkJcmV0dXJuIHRoaXMuX21hcC5sYXllclBvaW50VG9MYXRMbmcoWwogIAkJCQkJcDIueCAtIHJhdGlvICogKHAyLnggLSBwMS54KSwKICAJCQkJCXAyLnkgLSByYXRpbyAqIChwMi55IC0gcDEueSkKICAJCQkJXSk7CiAgCQkJfQogIAkJfQogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRCb3VuZHMoKTogTGF0TG5nQm91bmRzCiAgCS8vIFJldHVybnMgdGhlIGBMYXRMbmdCb3VuZHNgIG9mIHRoZSBwYXRoLgogIAlnZXRCb3VuZHM6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9ib3VuZHM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGFkZExhdExuZyhsYXRsbmc6IExhdExuZywgbGF0bG5ncz86IExhdExuZ1tdKTogdGhpcwogIAkvLyBBZGRzIGEgZ2l2ZW4gcG9pbnQgdG8gdGhlIHBvbHlsaW5lLiBCeSBkZWZhdWx0LCBhZGRzIHRvIHRoZSBmaXJzdCByaW5nIG9mCiAgCS8vIHRoZSBwb2x5bGluZSBpbiBjYXNlIG9mIGEgbXVsdGktcG9seWxpbmUsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBieSBwYXNzaW5nCiAgCS8vIGEgc3BlY2lmaWMgcmluZyBhcyBhIExhdExuZyBhcnJheSAodGhhdCB5b3UgY2FuIGVhcmxpZXIgYWNjZXNzIHdpdGggW2BnZXRMYXRMbmdzYF0oI3BvbHlsaW5lLWdldGxhdGxuZ3MpKS4KICAJYWRkTGF0TG5nOiBmdW5jdGlvbiAobGF0bG5nLCBsYXRsbmdzKSB7CiAgCQlsYXRsbmdzID0gbGF0bG5ncyB8fCB0aGlzLl9kZWZhdWx0U2hhcGUoKTsKICAJCWxhdGxuZyA9IHRvTGF0TG5nKGxhdGxuZyk7CiAgCQlsYXRsbmdzLnB1c2gobGF0bG5nKTsKICAJCXRoaXMuX2JvdW5kcy5leHRlbmQobGF0bG5nKTsKICAJCXJldHVybiB0aGlzLnJlZHJhdygpOwogIAl9LAoKICAJX3NldExhdExuZ3M6IGZ1bmN0aW9uIChsYXRsbmdzKSB7CiAgCQl0aGlzLl9ib3VuZHMgPSBuZXcgTGF0TG5nQm91bmRzKCk7CiAgCQl0aGlzLl9sYXRsbmdzID0gdGhpcy5fY29udmVydExhdExuZ3MobGF0bG5ncyk7CiAgCX0sCgogIAlfZGVmYXVsdFNoYXBlOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gaXNGbGF0KHRoaXMuX2xhdGxuZ3MpID8gdGhpcy5fbGF0bG5ncyA6IHRoaXMuX2xhdGxuZ3NbMF07CiAgCX0sCgogIAkvLyByZWN1cnNpdmVseSBjb252ZXJ0IGxhdGxuZ3MgaW5wdXQgaW50byBhY3R1YWwgTGF0TG5nIGluc3RhbmNlczsgY2FsY3VsYXRlIGJvdW5kcyBhbG9uZyB0aGUgd2F5CiAgCV9jb252ZXJ0TGF0TG5nczogZnVuY3Rpb24gKGxhdGxuZ3MpIHsKICAJCXZhciByZXN1bHQgPSBbXSwKICAJCSAgICBmbGF0ID0gaXNGbGF0KGxhdGxuZ3MpOwoKICAJCWZvciAodmFyIGkgPSAwLCBsZW4gPSBsYXRsbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJaWYgKGZsYXQpIHsKICAJCQkJcmVzdWx0W2ldID0gdG9MYXRMbmcobGF0bG5nc1tpXSk7CiAgCQkJCXRoaXMuX2JvdW5kcy5leHRlbmQocmVzdWx0W2ldKTsKICAJCQl9IGVsc2UgewogIAkJCQlyZXN1bHRbaV0gPSB0aGlzLl9jb252ZXJ0TGF0TG5ncyhsYXRsbmdzW2ldKTsKICAJCQl9CiAgCQl9CgogIAkJcmV0dXJuIHJlc3VsdDsKICAJfSwKCiAgCV9wcm9qZWN0OiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgcHhCb3VuZHMgPSBuZXcgQm91bmRzKCk7CiAgCQl0aGlzLl9yaW5ncyA9IFtdOwogIAkJdGhpcy5fcHJvamVjdExhdGxuZ3ModGhpcy5fbGF0bG5ncywgdGhpcy5fcmluZ3MsIHB4Qm91bmRzKTsKCiAgCQlpZiAodGhpcy5fYm91bmRzLmlzVmFsaWQoKSAmJiBweEJvdW5kcy5pc1ZhbGlkKCkpIHsKICAJCQl0aGlzLl9yYXdQeEJvdW5kcyA9IHB4Qm91bmRzOwogIAkJCXRoaXMuX3VwZGF0ZUJvdW5kcygpOwogIAkJfQogIAl9LAoKICAJX3VwZGF0ZUJvdW5kczogZnVuY3Rpb24gKCkgewogIAkJdmFyIHcgPSB0aGlzLl9jbGlja1RvbGVyYW5jZSgpLAogIAkJICAgIHAgPSBuZXcgUG9pbnQodywgdyk7CgogIAkJaWYgKCF0aGlzLl9yYXdQeEJvdW5kcykgewogIAkJCXJldHVybjsKICAJCX0KCiAgCQl0aGlzLl9weEJvdW5kcyA9IG5ldyBCb3VuZHMoWwogIAkJCXRoaXMuX3Jhd1B4Qm91bmRzLm1pbi5zdWJ0cmFjdChwKSwKICAJCQl0aGlzLl9yYXdQeEJvdW5kcy5tYXguYWRkKHApCiAgCQldKTsKICAJfSwKCiAgCS8vIHJlY3Vyc2l2ZWx5IHR1cm5zIGxhdGxuZ3MgaW50byBhIHNldCBvZiByaW5ncyB3aXRoIHByb2plY3RlZCBjb29yZGluYXRlcwogIAlfcHJvamVjdExhdGxuZ3M6IGZ1bmN0aW9uIChsYXRsbmdzLCByZXN1bHQsIHByb2plY3RlZEJvdW5kcykgewogIAkJdmFyIGZsYXQgPSBsYXRsbmdzWzBdIGluc3RhbmNlb2YgTGF0TG5nLAogIAkJICAgIGxlbiA9IGxhdGxuZ3MubGVuZ3RoLAogIAkJICAgIGksIHJpbmc7CgogIAkJaWYgKGZsYXQpIHsKICAJCQlyaW5nID0gW107CiAgCQkJZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJCXJpbmdbaV0gPSB0aGlzLl9tYXAubGF0TG5nVG9MYXllclBvaW50KGxhdGxuZ3NbaV0pOwogIAkJCQlwcm9qZWN0ZWRCb3VuZHMuZXh0ZW5kKHJpbmdbaV0pOwogIAkJCX0KICAJCQlyZXN1bHQucHVzaChyaW5nKTsKICAJCX0gZWxzZSB7CiAgCQkJZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJCXRoaXMuX3Byb2plY3RMYXRsbmdzKGxhdGxuZ3NbaV0sIHJlc3VsdCwgcHJvamVjdGVkQm91bmRzKTsKICAJCQl9CiAgCQl9CiAgCX0sCgogIAkvLyBjbGlwIHBvbHlsaW5lIGJ5IHJlbmRlcmVyIGJvdW5kcyBzbyB0aGF0IHdlIGhhdmUgbGVzcyB0byByZW5kZXIgZm9yIHBlcmZvcm1hbmNlCiAgCV9jbGlwUG9pbnRzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgYm91bmRzID0gdGhpcy5fcmVuZGVyZXIuX2JvdW5kczsKCiAgCQl0aGlzLl9wYXJ0cyA9IFtdOwogIAkJaWYgKCF0aGlzLl9weEJvdW5kcyB8fCAhdGhpcy5fcHhCb3VuZHMuaW50ZXJzZWN0cyhib3VuZHMpKSB7CiAgCQkJcmV0dXJuOwogIAkJfQoKICAJCWlmICh0aGlzLm9wdGlvbnMubm9DbGlwKSB7CiAgCQkJdGhpcy5fcGFydHMgPSB0aGlzLl9yaW5nczsKICAJCQlyZXR1cm47CiAgCQl9CgogIAkJdmFyIHBhcnRzID0gdGhpcy5fcGFydHMsCiAgCQkgICAgaSwgaiwgaywgbGVuLCBsZW4yLCBzZWdtZW50LCBwb2ludHM7CgogIAkJZm9yIChpID0gMCwgayA9IDAsIGxlbiA9IHRoaXMuX3JpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJcG9pbnRzID0gdGhpcy5fcmluZ3NbaV07CgogIAkJCWZvciAoaiA9IDAsIGxlbjIgPSBwb2ludHMubGVuZ3RoOyBqIDwgbGVuMiAtIDE7IGorKykgewogIAkJCQlzZWdtZW50ID0gY2xpcFNlZ21lbnQocG9pbnRzW2pdLCBwb2ludHNbaiArIDFdLCBib3VuZHMsIGosIHRydWUpOwoKICAJCQkJaWYgKCFzZWdtZW50KSB7IGNvbnRpbnVlOyB9CgogIAkJCQlwYXJ0c1trXSA9IHBhcnRzW2tdIHx8IFtdOwogIAkJCQlwYXJ0c1trXS5wdXNoKHNlZ21lbnRbMF0pOwoKICAJCQkJLy8gaWYgc2VnbWVudCBnb2VzIG91dCBvZiBzY3JlZW4sIG9yIGl0J3MgdGhlIGxhc3Qgb25lLCBpdCdzIHRoZSBlbmQgb2YgdGhlIGxpbmUgcGFydAogIAkJCQlpZiAoKHNlZ21lbnRbMV0gIT09IHBvaW50c1tqICsgMV0pIHx8IChqID09PSBsZW4yIC0gMikpIHsKICAJCQkJCXBhcnRzW2tdLnB1c2goc2VnbWVudFsxXSk7CiAgCQkJCQlrKys7CiAgCQkJCX0KICAJCQl9CiAgCQl9CiAgCX0sCgogIAkvLyBzaW1wbGlmeSBlYWNoIGNsaXBwZWQgcGFydCBvZiB0aGUgcG9seWxpbmUgZm9yIHBlcmZvcm1hbmNlCiAgCV9zaW1wbGlmeVBvaW50czogZnVuY3Rpb24gKCkgewogIAkJdmFyIHBhcnRzID0gdGhpcy5fcGFydHMsCiAgCQkgICAgdG9sZXJhbmNlID0gdGhpcy5vcHRpb25zLnNtb290aEZhY3RvcjsKCiAgCQlmb3IgKHZhciBpID0gMCwgbGVuID0gcGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCQlwYXJ0c1tpXSA9IHNpbXBsaWZ5KHBhcnRzW2ldLCB0b2xlcmFuY2UpOwogIAkJfQogIAl9LAoKICAJX3VwZGF0ZTogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9tYXApIHsgcmV0dXJuOyB9CgogIAkJdGhpcy5fY2xpcFBvaW50cygpOwogIAkJdGhpcy5fc2ltcGxpZnlQb2ludHMoKTsKICAJCXRoaXMuX3VwZGF0ZVBhdGgoKTsKICAJfSwKCiAgCV91cGRhdGVQYXRoOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLl9yZW5kZXJlci5fdXBkYXRlUG9seSh0aGlzKTsKICAJfSwKCiAgCS8vIE5lZWRlZCBieSB0aGUgYENhbnZhc2AgcmVuZGVyZXIgZm9yIGludGVyYWN0aXZpdHkKICAJX2NvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uIChwLCBjbG9zZWQpIHsKICAJCXZhciBpLCBqLCBrLCBsZW4sIGxlbjIsIHBhcnQsCiAgCQkgICAgdyA9IHRoaXMuX2NsaWNrVG9sZXJhbmNlKCk7CgogIAkJaWYgKCF0aGlzLl9weEJvdW5kcyB8fCAhdGhpcy5fcHhCb3VuZHMuY29udGFpbnMocCkpIHsgcmV0dXJuIGZhbHNlOyB9CgogIAkJLy8gaGl0IGRldGVjdGlvbiBmb3IgcG9seWxpbmVzCiAgCQlmb3IgKGkgPSAwLCBsZW4gPSB0aGlzLl9wYXJ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJCXBhcnQgPSB0aGlzLl9wYXJ0c1tpXTsKCiAgCQkJZm9yIChqID0gMCwgbGVuMiA9IHBhcnQubGVuZ3RoLCBrID0gbGVuMiAtIDE7IGogPCBsZW4yOyBrID0gaisrKSB7CiAgCQkJCWlmICghY2xvc2VkICYmIChqID09PSAwKSkgeyBjb250aW51ZTsgfQoKICAJCQkJaWYgKHBvaW50VG9TZWdtZW50RGlzdGFuY2UocCwgcGFydFtrXSwgcGFydFtqXSkgPD0gdykgewogIAkJCQkJcmV0dXJuIHRydWU7CiAgCQkJCX0KICAJCQl9CiAgCQl9CiAgCQlyZXR1cm4gZmFsc2U7CiAgCX0KICB9KTsKCiAgLy8gQGZhY3RvcnkgTC5wb2x5bGluZShsYXRsbmdzOiBMYXRMbmdbXSwgb3B0aW9ucz86IFBvbHlsaW5lIG9wdGlvbnMpCiAgLy8gSW5zdGFudGlhdGVzIGEgcG9seWxpbmUgb2JqZWN0IGdpdmVuIGFuIGFycmF5IG9mIGdlb2dyYXBoaWNhbCBwb2ludHMgYW5kCiAgLy8gb3B0aW9uYWxseSBhbiBvcHRpb25zIG9iamVjdC4gWW91IGNhbiBjcmVhdGUgYSBgUG9seWxpbmVgIG9iamVjdCB3aXRoCiAgLy8gbXVsdGlwbGUgc2VwYXJhdGUgbGluZXMgKGBNdWx0aVBvbHlsaW5lYCkgYnkgcGFzc2luZyBhbiBhcnJheSBvZiBhcnJheXMKICAvLyBvZiBnZW9ncmFwaGljIHBvaW50cy4KICBmdW5jdGlvbiBwb2x5bGluZShsYXRsbmdzLCBvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgUG9seWxpbmUobGF0bG5ncywgb3B0aW9ucyk7CiAgfQoKICAvLyBSZXRyb2NvbXBhdC4gQWxsb3cgcGx1Z2lucyB0byBzdXBwb3J0IExlYWZsZXQgdmVyc2lvbnMgYmVmb3JlIGFuZCBhZnRlciAxLjEuCiAgUG9seWxpbmUuX2ZsYXQgPSBfZmxhdDsKCiAgLyoKICAgKiBAY2xhc3MgUG9seWdvbgogICAqIEBha2EgTC5Qb2x5Z29uCiAgICogQGluaGVyaXRzIFBvbHlsaW5lCiAgICoKICAgKiBBIGNsYXNzIGZvciBkcmF3aW5nIHBvbHlnb24gb3ZlcmxheXMgb24gYSBtYXAuIEV4dGVuZHMgYFBvbHlsaW5lYC4KICAgKgogICAqIE5vdGUgdGhhdCBwb2ludHMgeW91IHBhc3Mgd2hlbiBjcmVhdGluZyBhIHBvbHlnb24gc2hvdWxkbid0IGhhdmUgYW4gYWRkaXRpb25hbCBsYXN0IHBvaW50IGVxdWFsIHRvIHRoZSBmaXJzdCBvbmUg4oCUIGl0J3MgYmV0dGVyIHRvIGZpbHRlciBvdXQgc3VjaCBwb2ludHMuCiAgICoKICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIC8vIGNyZWF0ZSBhIHJlZCBwb2x5Z29uIGZyb20gYW4gYXJyYXkgb2YgTGF0TG5nIHBvaW50cwogICAqIHZhciBsYXRsbmdzID0gW1szNywgLTEwOS4wNV0sWzQxLCAtMTA5LjAzXSxbNDEsIC0xMDIuMDVdLFszNywgLTEwMi4wNF1dOwogICAqCiAgICogdmFyIHBvbHlnb24gPSBMLnBvbHlnb24obGF0bG5ncywge2NvbG9yOiAncmVkJ30pLmFkZFRvKG1hcCk7CiAgICoKICAgKiAvLyB6b29tIHRoZSBtYXAgdG8gdGhlIHBvbHlnb24KICAgKiBtYXAuZml0Qm91bmRzKHBvbHlnb24uZ2V0Qm91bmRzKCkpOwogICAqIGBgYAogICAqCiAgICogWW91IGNhbiBhbHNvIHBhc3MgYW4gYXJyYXkgb2YgYXJyYXlzIG9mIGxhdGxuZ3MsIHdpdGggdGhlIGZpcnN0IGFycmF5IHJlcHJlc2VudGluZyB0aGUgb3V0ZXIgc2hhcGUgYW5kIHRoZSBvdGhlciBhcnJheXMgcmVwcmVzZW50aW5nIGhvbGVzIGluIHRoZSBvdXRlciBzaGFwZToKICAgKgogICAqIGBgYGpzCiAgICogdmFyIGxhdGxuZ3MgPSBbCiAgICogICBbWzM3LCAtMTA5LjA1XSxbNDEsIC0xMDkuMDNdLFs0MSwgLTEwMi4wNV0sWzM3LCAtMTAyLjA0XV0sIC8vIG91dGVyIHJpbmcKICAgKiAgIFtbMzcuMjksIC0xMDguNThdLFs0MC43MSwgLTEwOC41OF0sWzQwLjcxLCAtMTAyLjUwXSxbMzcuMjksIC0xMDIuNTBdXSAvLyBob2xlCiAgICogXTsKICAgKiBgYGAKICAgKgogICAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwYXNzIGEgbXVsdGktZGltZW5zaW9uYWwgYXJyYXkgdG8gcmVwcmVzZW50IGEgTXVsdGlQb2x5Z29uIHNoYXBlLgogICAqCiAgICogYGBganMKICAgKiB2YXIgbGF0bG5ncyA9IFsKICAgKiAgIFsgLy8gZmlyc3QgcG9seWdvbgogICAqICAgICBbWzM3LCAtMTA5LjA1XSxbNDEsIC0xMDkuMDNdLFs0MSwgLTEwMi4wNV0sWzM3LCAtMTAyLjA0XV0sIC8vIG91dGVyIHJpbmcKICAgKiAgICAgW1szNy4yOSwgLTEwOC41OF0sWzQwLjcxLCAtMTA4LjU4XSxbNDAuNzEsIC0xMDIuNTBdLFszNy4yOSwgLTEwMi41MF1dIC8vIGhvbGUKICAgKiAgIF0sCiAgICogICBbIC8vIHNlY29uZCBwb2x5Z29uCiAgICogICAgIFtbNDEsIC0xMTEuMDNdLFs0NSwgLTExMS4wNF0sWzQ1LCAtMTA0LjA1XSxbNDEsIC0xMDQuMDVdXQogICAqICAgXQogICAqIF07CiAgICogYGBgCiAgICovCgogIHZhciBQb2x5Z29uID0gUG9seWxpbmUuZXh0ZW5kKHsKCiAgCW9wdGlvbnM6IHsKICAJCWZpbGw6IHRydWUKICAJfSwKCiAgCWlzRW1wdHk6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiAhdGhpcy5fbGF0bG5ncy5sZW5ndGggfHwgIXRoaXMuX2xhdGxuZ3NbMF0ubGVuZ3RoOwogIAl9LAoKICAJZ2V0Q2VudGVyOiBmdW5jdGlvbiAoKSB7CiAgCQkvLyB0aHJvd3MgZXJyb3Igd2hlbiBub3QgeWV0IGFkZGVkIHRvIG1hcCBhcyB0aGlzIGNlbnRlciBjYWxjdWxhdGlvbiByZXF1aXJlcyBwcm9qZWN0ZWQgY29vcmRpbmF0ZXMKICAJCWlmICghdGhpcy5fbWFwKSB7CiAgCQkJdGhyb3cgbmV3IEVycm9yKCdNdXN0IGFkZCBsYXllciB0byBtYXAgYmVmb3JlIHVzaW5nIGdldENlbnRlcigpJyk7CiAgCQl9CgogIAkJdmFyIGksIGosIHAxLCBwMiwgZiwgYXJlYSwgeCwgeSwgY2VudGVyLAogIAkJICAgIHBvaW50cyA9IHRoaXMuX3JpbmdzWzBdLAogIAkJICAgIGxlbiA9IHBvaW50cy5sZW5ndGg7CgogIAkJaWYgKCFsZW4pIHsgcmV0dXJuIG51bGw7IH0KCiAgCQkvLyBwb2x5Z29uIGNlbnRyb2lkIGFsZ29yaXRobTsgb25seSB1c2VzIHRoZSBmaXJzdCByaW5nIGlmIHRoZXJlIGFyZSBtdWx0aXBsZQoKICAJCWFyZWEgPSB4ID0geSA9IDA7CgogIAkJZm9yIChpID0gMCwgaiA9IGxlbiAtIDE7IGkgPCBsZW47IGogPSBpKyspIHsKICAJCQlwMSA9IHBvaW50c1tpXTsKICAJCQlwMiA9IHBvaW50c1tqXTsKCiAgCQkJZiA9IHAxLnkgKiBwMi54IC0gcDIueSAqIHAxLng7CiAgCQkJeCArPSAocDEueCArIHAyLngpICogZjsKICAJCQl5ICs9IChwMS55ICsgcDIueSkgKiBmOwogIAkJCWFyZWEgKz0gZiAqIDM7CiAgCQl9CgogIAkJaWYgKGFyZWEgPT09IDApIHsKICAJCQkvLyBQb2x5Z29uIGlzIHNvIHNtYWxsIHRoYXQgYWxsIHBvaW50cyBhcmUgb24gc2FtZSBwaXhlbC4KICAJCQljZW50ZXIgPSBwb2ludHNbMF07CiAgCQl9IGVsc2UgewogIAkJCWNlbnRlciA9IFt4IC8gYXJlYSwgeSAvIGFyZWFdOwogIAkJfQogIAkJcmV0dXJuIHRoaXMuX21hcC5sYXllclBvaW50VG9MYXRMbmcoY2VudGVyKTsKICAJfSwKCiAgCV9jb252ZXJ0TGF0TG5nczogZnVuY3Rpb24gKGxhdGxuZ3MpIHsKICAJCXZhciByZXN1bHQgPSBQb2x5bGluZS5wcm90b3R5cGUuX2NvbnZlcnRMYXRMbmdzLmNhbGwodGhpcywgbGF0bG5ncyksCiAgCQkgICAgbGVuID0gcmVzdWx0Lmxlbmd0aDsKCiAgCQkvLyByZW1vdmUgbGFzdCBwb2ludCBpZiBpdCBlcXVhbHMgZmlyc3Qgb25lCiAgCQlpZiAobGVuID49IDIgJiYgcmVzdWx0WzBdIGluc3RhbmNlb2YgTGF0TG5nICYmIHJlc3VsdFswXS5lcXVhbHMocmVzdWx0W2xlbiAtIDFdKSkgewogIAkJCXJlc3VsdC5wb3AoKTsKICAJCX0KICAJCXJldHVybiByZXN1bHQ7CiAgCX0sCgogIAlfc2V0TGF0TG5nczogZnVuY3Rpb24gKGxhdGxuZ3MpIHsKICAJCVBvbHlsaW5lLnByb3RvdHlwZS5fc2V0TGF0TG5ncy5jYWxsKHRoaXMsIGxhdGxuZ3MpOwogIAkJaWYgKGlzRmxhdCh0aGlzLl9sYXRsbmdzKSkgewogIAkJCXRoaXMuX2xhdGxuZ3MgPSBbdGhpcy5fbGF0bG5nc107CiAgCQl9CiAgCX0sCgogIAlfZGVmYXVsdFNoYXBlOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gaXNGbGF0KHRoaXMuX2xhdGxuZ3NbMF0pID8gdGhpcy5fbGF0bG5nc1swXSA6IHRoaXMuX2xhdGxuZ3NbMF1bMF07CiAgCX0sCgogIAlfY2xpcFBvaW50czogZnVuY3Rpb24gKCkgewogIAkJLy8gcG9seWdvbnMgbmVlZCBhIGRpZmZlcmVudCBjbGlwcGluZyBhbGdvcml0aG0gc28gd2UgcmVkZWZpbmUgdGhhdAoKICAJCXZhciBib3VuZHMgPSB0aGlzLl9yZW5kZXJlci5fYm91bmRzLAogIAkJICAgIHcgPSB0aGlzLm9wdGlvbnMud2VpZ2h0LAogIAkJICAgIHAgPSBuZXcgUG9pbnQodywgdyk7CgogIAkJLy8gaW5jcmVhc2UgY2xpcCBwYWRkaW5nIGJ5IHN0cm9rZSB3aWR0aCB0byBhdm9pZCBzdHJva2Ugb24gY2xpcCBlZGdlcwogIAkJYm91bmRzID0gbmV3IEJvdW5kcyhib3VuZHMubWluLnN1YnRyYWN0KHApLCBib3VuZHMubWF4LmFkZChwKSk7CgogIAkJdGhpcy5fcGFydHMgPSBbXTsKICAJCWlmICghdGhpcy5fcHhCb3VuZHMgfHwgIXRoaXMuX3B4Qm91bmRzLmludGVyc2VjdHMoYm91bmRzKSkgewogIAkJCXJldHVybjsKICAJCX0KCiAgCQlpZiAodGhpcy5vcHRpb25zLm5vQ2xpcCkgewogIAkJCXRoaXMuX3BhcnRzID0gdGhpcy5fcmluZ3M7CiAgCQkJcmV0dXJuOwogIAkJfQoKICAJCWZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9yaW5ncy5sZW5ndGgsIGNsaXBwZWQ7IGkgPCBsZW47IGkrKykgewogIAkJCWNsaXBwZWQgPSBjbGlwUG9seWdvbih0aGlzLl9yaW5nc1tpXSwgYm91bmRzLCB0cnVlKTsKICAJCQlpZiAoY2xpcHBlZC5sZW5ndGgpIHsKICAJCQkJdGhpcy5fcGFydHMucHVzaChjbGlwcGVkKTsKICAJCQl9CiAgCQl9CiAgCX0sCgogIAlfdXBkYXRlUGF0aDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fcmVuZGVyZXIuX3VwZGF0ZVBvbHkodGhpcywgdHJ1ZSk7CiAgCX0sCgogIAkvLyBOZWVkZWQgYnkgdGhlIGBDYW52YXNgIHJlbmRlcmVyIGZvciBpbnRlcmFjdGl2aXR5CiAgCV9jb250YWluc1BvaW50OiBmdW5jdGlvbiAocCkgewogIAkJdmFyIGluc2lkZSA9IGZhbHNlLAogIAkJICAgIHBhcnQsIHAxLCBwMiwgaSwgaiwgaywgbGVuLCBsZW4yOwoKICAJCWlmICghdGhpcy5fcHhCb3VuZHMgfHwgIXRoaXMuX3B4Qm91bmRzLmNvbnRhaW5zKHApKSB7IHJldHVybiBmYWxzZTsgfQoKICAJCS8vIHJheSBjYXN0aW5nIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGlmIHBvaW50IGlzIGluIHBvbHlnb24KICAJCWZvciAoaSA9IDAsIGxlbiA9IHRoaXMuX3BhcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJcGFydCA9IHRoaXMuX3BhcnRzW2ldOwoKICAJCQlmb3IgKGogPSAwLCBsZW4yID0gcGFydC5sZW5ndGgsIGsgPSBsZW4yIC0gMTsgaiA8IGxlbjI7IGsgPSBqKyspIHsKICAJCQkJcDEgPSBwYXJ0W2pdOwogIAkJCQlwMiA9IHBhcnRba107CgogIAkJCQlpZiAoKChwMS55ID4gcC55KSAhPT0gKHAyLnkgPiBwLnkpKSAmJiAocC54IDwgKHAyLnggLSBwMS54KSAqIChwLnkgLSBwMS55KSAvIChwMi55IC0gcDEueSkgKyBwMS54KSkgewogIAkJCQkJaW5zaWRlID0gIWluc2lkZTsKICAJCQkJfQogIAkJCX0KICAJCX0KCiAgCQkvLyBhbHNvIGNoZWNrIGlmIGl0J3Mgb24gcG9seWdvbiBzdHJva2UKICAJCXJldHVybiBpbnNpZGUgfHwgUG9seWxpbmUucHJvdG90eXBlLl9jb250YWluc1BvaW50LmNhbGwodGhpcywgcCwgdHJ1ZSk7CiAgCX0KCiAgfSk7CgoKICAvLyBAZmFjdG9yeSBMLnBvbHlnb24obGF0bG5nczogTGF0TG5nW10sIG9wdGlvbnM/OiBQb2x5bGluZSBvcHRpb25zKQogIGZ1bmN0aW9uIHBvbHlnb24obGF0bG5ncywgb3B0aW9ucykgewogIAlyZXR1cm4gbmV3IFBvbHlnb24obGF0bG5ncywgb3B0aW9ucyk7CiAgfQoKICAvKgogICAqIEBjbGFzcyBHZW9KU09OCiAgICogQGFrYSBMLkdlb0pTT04KICAgKiBAaW5oZXJpdHMgRmVhdHVyZUdyb3VwCiAgICoKICAgKiBSZXByZXNlbnRzIGEgR2VvSlNPTiBvYmplY3Qgb3IgYW4gYXJyYXkgb2YgR2VvSlNPTiBvYmplY3RzLiBBbGxvd3MgeW91IHRvIHBhcnNlCiAgICogR2VvSlNPTiBkYXRhIGFuZCBkaXNwbGF5IGl0IG9uIHRoZSBtYXAuIEV4dGVuZHMgYEZlYXR1cmVHcm91cGAuCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogYGBganMKICAgKiBMLmdlb0pTT04oZGF0YSwgewogICAqIAlzdHlsZTogZnVuY3Rpb24gKGZlYXR1cmUpIHsKICAgKiAJCXJldHVybiB7Y29sb3I6IGZlYXR1cmUucHJvcGVydGllcy5jb2xvcn07CiAgICogCX0KICAgKiB9KS5iaW5kUG9wdXAoZnVuY3Rpb24gKGxheWVyKSB7CiAgICogCXJldHVybiBsYXllci5mZWF0dXJlLnByb3BlcnRpZXMuZGVzY3JpcHRpb247CiAgICogfSkuYWRkVG8obWFwKTsKICAgKiBgYGAKICAgKi8KCiAgdmFyIEdlb0pTT04gPSBGZWF0dXJlR3JvdXAuZXh0ZW5kKHsKCiAgCS8qIEBzZWN0aW9uCiAgCSAqIEBha2EgR2VvSlNPTiBvcHRpb25zCiAgCSAqCiAgCSAqIEBvcHRpb24gcG9pbnRUb0xheWVyOiBGdW5jdGlvbiA9ICoKICAJICogQSBgRnVuY3Rpb25gIGRlZmluaW5nIGhvdyBHZW9KU09OIHBvaW50cyBzcGF3biBMZWFmbGV0IGxheWVycy4gSXQgaXMgaW50ZXJuYWxseQogIAkgKiBjYWxsZWQgd2hlbiBkYXRhIGlzIGFkZGVkLCBwYXNzaW5nIHRoZSBHZW9KU09OIHBvaW50IGZlYXR1cmUgYW5kIGl0cyBgTGF0TG5nYC4KICAJICogVGhlIGRlZmF1bHQgaXMgdG8gc3Bhd24gYSBkZWZhdWx0IGBNYXJrZXJgOgogIAkgKiBgYGBqcwogIAkgKiBmdW5jdGlvbihnZW9Kc29uUG9pbnQsIGxhdGxuZykgewogIAkgKiAJcmV0dXJuIEwubWFya2VyKGxhdGxuZyk7CiAgCSAqIH0KICAJICogYGBgCiAgCSAqCiAgCSAqIEBvcHRpb24gc3R5bGU6IEZ1bmN0aW9uID0gKgogIAkgKiBBIGBGdW5jdGlvbmAgZGVmaW5pbmcgdGhlIGBQYXRoIG9wdGlvbnNgIGZvciBzdHlsaW5nIEdlb0pTT04gbGluZXMgYW5kIHBvbHlnb25zLAogIAkgKiBjYWxsZWQgaW50ZXJuYWxseSB3aGVuIGRhdGEgaXMgYWRkZWQuCiAgCSAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHRvIG5vdCBvdmVycmlkZSBhbnkgZGVmYXVsdHM6CiAgCSAqIGBgYGpzCiAgCSAqIGZ1bmN0aW9uIChnZW9Kc29uRmVhdHVyZSkgewogIAkgKiAJcmV0dXJuIHt9CiAgCSAqIH0KICAJICogYGBgCiAgCSAqCiAgCSAqIEBvcHRpb24gb25FYWNoRmVhdHVyZTogRnVuY3Rpb24gPSAqCiAgCSAqIEEgYEZ1bmN0aW9uYCB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgZm9yIGVhY2ggY3JlYXRlZCBgRmVhdHVyZWAsIGFmdGVyIGl0IGhhcwogIAkgKiBiZWVuIGNyZWF0ZWQgYW5kIHN0eWxlZC4gVXNlZnVsIGZvciBhdHRhY2hpbmcgZXZlbnRzIGFuZCBwb3B1cHMgdG8gZmVhdHVyZXMuCiAgCSAqIFRoZSBkZWZhdWx0IGlzIHRvIGRvIG5vdGhpbmcgd2l0aCB0aGUgbmV3bHkgY3JlYXRlZCBsYXllcnM6CiAgCSAqIGBgYGpzCiAgCSAqIGZ1bmN0aW9uIChmZWF0dXJlLCBsYXllcikge30KICAJICogYGBgCiAgCSAqCiAgCSAqIEBvcHRpb24gZmlsdGVyOiBGdW5jdGlvbiA9ICoKICAJICogQSBgRnVuY3Rpb25gIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRlY2lkZSB3aGV0aGVyIHRvIGluY2x1ZGUgYSBmZWF0dXJlIG9yIG5vdC4KICAJICogVGhlIGRlZmF1bHQgaXMgdG8gaW5jbHVkZSBhbGwgZmVhdHVyZXM6CiAgCSAqIGBgYGpzCiAgCSAqIGZ1bmN0aW9uIChnZW9Kc29uRmVhdHVyZSkgewogIAkgKiAJcmV0dXJuIHRydWU7CiAgCSAqIH0KICAJICogYGBgCiAgCSAqIE5vdGU6IGR5bmFtaWNhbGx5IGNoYW5naW5nIHRoZSBgZmlsdGVyYCBvcHRpb24gd2lsbCBoYXZlIGVmZmVjdCBvbmx5IG9uIG5ld2x5CiAgCSAqIGFkZGVkIGRhdGEuIEl0IHdpbGwgX25vdF8gcmUtZXZhbHVhdGUgYWxyZWFkeSBpbmNsdWRlZCBmZWF0dXJlcy4KICAJICoKICAJICogQG9wdGlvbiBjb29yZHNUb0xhdExuZzogRnVuY3Rpb24gPSAqCiAgCSAqIEEgYEZ1bmN0aW9uYCB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgY29udmVydGluZyBHZW9KU09OIGNvb3JkaW5hdGVzIHRvIGBMYXRMbmdgcy4KICAJICogVGhlIGRlZmF1bHQgaXMgdGhlIGBjb29yZHNUb0xhdExuZ2Agc3RhdGljIG1ldGhvZC4KICAJICoKICAJICogQG9wdGlvbiBtYXJrZXJzSW5oZXJpdE9wdGlvbnM6IEJvb2xlYW4gPSBmYWxzZQogIAkgKiBXaGV0aGVyIGRlZmF1bHQgTWFya2VycyBmb3IgIlBvaW50IiB0eXBlIEZlYXR1cmVzIGluaGVyaXQgZnJvbSBncm91cCBvcHRpb25zLgogIAkgKi8KCiAgCWluaXRpYWxpemU6IGZ1bmN0aW9uIChnZW9qc29uLCBvcHRpb25zKSB7CiAgCQlzZXRPcHRpb25zKHRoaXMsIG9wdGlvbnMpOwoKICAJCXRoaXMuX2xheWVycyA9IHt9OwoKICAJCWlmIChnZW9qc29uKSB7CiAgCQkJdGhpcy5hZGREYXRhKGdlb2pzb24pOwogIAkJfQogIAl9LAoKICAJLy8gQG1ldGhvZCBhZGREYXRhKCA8R2VvSlNPTj4gZGF0YSApOiB0aGlzCiAgCS8vIEFkZHMgYSBHZW9KU09OIG9iamVjdCB0byB0aGUgbGF5ZXIuCiAgCWFkZERhdGE6IGZ1bmN0aW9uIChnZW9qc29uKSB7CiAgCQl2YXIgZmVhdHVyZXMgPSBpc0FycmF5KGdlb2pzb24pID8gZ2VvanNvbiA6IGdlb2pzb24uZmVhdHVyZXMsCiAgCQkgICAgaSwgbGVuLCBmZWF0dXJlOwoKICAJCWlmIChmZWF0dXJlcykgewogIAkJCWZvciAoaSA9IDAsIGxlbiA9IGZlYXR1cmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJCS8vIG9ubHkgYWRkIHRoaXMgaWYgZ2VvbWV0cnkgb3IgZ2VvbWV0cmllcyBhcmUgc2V0IGFuZCBub3QgbnVsbAogIAkJCQlmZWF0dXJlID0gZmVhdHVyZXNbaV07CiAgCQkJCWlmIChmZWF0dXJlLmdlb21ldHJpZXMgfHwgZmVhdHVyZS5nZW9tZXRyeSB8fCBmZWF0dXJlLmZlYXR1cmVzIHx8IGZlYXR1cmUuY29vcmRpbmF0ZXMpIHsKICAJCQkJCXRoaXMuYWRkRGF0YShmZWF0dXJlKTsKICAJCQkJfQogIAkJCX0KICAJCQlyZXR1cm4gdGhpczsKICAJCX0KCiAgCQl2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsKCiAgCQlpZiAob3B0aW9ucy5maWx0ZXIgJiYgIW9wdGlvbnMuZmlsdGVyKGdlb2pzb24pKSB7IHJldHVybiB0aGlzOyB9CgogIAkJdmFyIGxheWVyID0gZ2VvbWV0cnlUb0xheWVyKGdlb2pzb24sIG9wdGlvbnMpOwogIAkJaWYgKCFsYXllcikgewogIAkJCXJldHVybiB0aGlzOwogIAkJfQogIAkJbGF5ZXIuZmVhdHVyZSA9IGFzRmVhdHVyZShnZW9qc29uKTsKCiAgCQlsYXllci5kZWZhdWx0T3B0aW9ucyA9IGxheWVyLm9wdGlvbnM7CiAgCQl0aGlzLnJlc2V0U3R5bGUobGF5ZXIpOwoKICAJCWlmIChvcHRpb25zLm9uRWFjaEZlYXR1cmUpIHsKICAJCQlvcHRpb25zLm9uRWFjaEZlYXR1cmUoZ2VvanNvbiwgbGF5ZXIpOwogIAkJfQoKICAJCXJldHVybiB0aGlzLmFkZExheWVyKGxheWVyKTsKICAJfSwKCiAgCS8vIEBtZXRob2QgcmVzZXRTdHlsZSggPFBhdGg+IGxheWVyPyApOiB0aGlzCiAgCS8vIFJlc2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIGxheWVyJ3Mgc3R5bGUgdG8gdGhlIG9yaWdpbmFsIEdlb0pTT04gc3R5bGUsIHVzZWZ1bCBmb3IgcmVzZXR0aW5nIHN0eWxlIGFmdGVyIGhvdmVyIGV2ZW50cy4KICAJLy8gSWYgYGxheWVyYCBpcyBvbWl0dGVkLCB0aGUgc3R5bGUgb2YgYWxsIGZlYXR1cmVzIGluIHRoZSBjdXJyZW50IGxheWVyIGlzIHJlc2V0LgogIAlyZXNldFN0eWxlOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCWlmIChsYXllciA9PT0gdW5kZWZpbmVkKSB7CiAgCQkJcmV0dXJuIHRoaXMuZWFjaExheWVyKHRoaXMucmVzZXRTdHlsZSwgdGhpcyk7CiAgCQl9CiAgCQkvLyByZXNldCBhbnkgY3VzdG9tIHN0eWxlcwogIAkJbGF5ZXIub3B0aW9ucyA9IGV4dGVuZCh7fSwgbGF5ZXIuZGVmYXVsdE9wdGlvbnMpOwogIAkJdGhpcy5fc2V0TGF5ZXJTdHlsZShsYXllciwgdGhpcy5vcHRpb25zLnN0eWxlKTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRTdHlsZSggPEZ1bmN0aW9uPiBzdHlsZSApOiB0aGlzCiAgCS8vIENoYW5nZXMgc3R5bGVzIG9mIEdlb0pTT04gdmVjdG9yIGxheWVycyB3aXRoIHRoZSBnaXZlbiBzdHlsZSBmdW5jdGlvbi4KICAJc2V0U3R5bGU6IGZ1bmN0aW9uIChzdHlsZSkgewogIAkJcmV0dXJuIHRoaXMuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikgewogIAkJCXRoaXMuX3NldExheWVyU3R5bGUobGF5ZXIsIHN0eWxlKTsKICAJCX0sIHRoaXMpOwogIAl9LAoKICAJX3NldExheWVyU3R5bGU6IGZ1bmN0aW9uIChsYXllciwgc3R5bGUpIHsKICAJCWlmIChsYXllci5zZXRTdHlsZSkgewogIAkJCWlmICh0eXBlb2Ygc3R5bGUgPT09ICdmdW5jdGlvbicpIHsKICAJCQkJc3R5bGUgPSBzdHlsZShsYXllci5mZWF0dXJlKTsKICAJCQl9CiAgCQkJbGF5ZXIuc2V0U3R5bGUoc3R5bGUpOwogIAkJfQogIAl9CiAgfSk7CgogIC8vIEBzZWN0aW9uCiAgLy8gVGhlcmUgYXJlIHNldmVyYWwgc3RhdGljIGZ1bmN0aW9ucyB3aGljaCBjYW4gYmUgY2FsbGVkIHdpdGhvdXQgaW5zdGFudGlhdGluZyBMLkdlb0pTT046CgogIC8vIEBmdW5jdGlvbiBnZW9tZXRyeVRvTGF5ZXIoZmVhdHVyZURhdGE6IE9iamVjdCwgb3B0aW9ucz86IEdlb0pTT04gb3B0aW9ucyk6IExheWVyCiAgLy8gQ3JlYXRlcyBhIGBMYXllcmAgZnJvbSBhIGdpdmVuIEdlb0pTT04gZmVhdHVyZS4gQ2FuIHVzZSBhIGN1c3RvbQogIC8vIFtgcG9pbnRUb0xheWVyYF0oI2dlb2pzb24tcG9pbnR0b2xheWVyKSBhbmQvb3IgW2Bjb29yZHNUb0xhdExuZ2BdKCNnZW9qc29uLWNvb3Jkc3RvbGF0bG5nKQogIC8vIGZ1bmN0aW9ucyBpZiBwcm92aWRlZCBhcyBvcHRpb25zLgogIGZ1bmN0aW9uIGdlb21ldHJ5VG9MYXllcihnZW9qc29uLCBvcHRpb25zKSB7CgogIAl2YXIgZ2VvbWV0cnkgPSBnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlJyA/IGdlb2pzb24uZ2VvbWV0cnkgOiBnZW9qc29uLAogIAkgICAgY29vcmRzID0gZ2VvbWV0cnkgPyBnZW9tZXRyeS5jb29yZGluYXRlcyA6IG51bGwsCiAgCSAgICBsYXllcnMgPSBbXSwKICAJICAgIHBvaW50VG9MYXllciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wb2ludFRvTGF5ZXIsCiAgCSAgICBfY29vcmRzVG9MYXRMbmcgPSBvcHRpb25zICYmIG9wdGlvbnMuY29vcmRzVG9MYXRMbmcgfHwgY29vcmRzVG9MYXRMbmcsCiAgCSAgICBsYXRsbmcsIGxhdGxuZ3MsIGksIGxlbjsKCiAgCWlmICghY29vcmRzICYmICFnZW9tZXRyeSkgewogIAkJcmV0dXJuIG51bGw7CiAgCX0KCiAgCXN3aXRjaCAoZ2VvbWV0cnkudHlwZSkgewogIAljYXNlICdQb2ludCc6CiAgCQlsYXRsbmcgPSBfY29vcmRzVG9MYXRMbmcoY29vcmRzKTsKICAJCXJldHVybiBfcG9pbnRUb0xheWVyKHBvaW50VG9MYXllciwgZ2VvanNvbiwgbGF0bG5nLCBvcHRpb25zKTsKCiAgCWNhc2UgJ011bHRpUG9pbnQnOgogIAkJZm9yIChpID0gMCwgbGVuID0gY29vcmRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJbGF0bG5nID0gX2Nvb3Jkc1RvTGF0TG5nKGNvb3Jkc1tpXSk7CiAgCQkJbGF5ZXJzLnB1c2goX3BvaW50VG9MYXllcihwb2ludFRvTGF5ZXIsIGdlb2pzb24sIGxhdGxuZywgb3B0aW9ucykpOwogIAkJfQogIAkJcmV0dXJuIG5ldyBGZWF0dXJlR3JvdXAobGF5ZXJzKTsKCiAgCWNhc2UgJ0xpbmVTdHJpbmcnOgogIAljYXNlICdNdWx0aUxpbmVTdHJpbmcnOgogIAkJbGF0bG5ncyA9IGNvb3Jkc1RvTGF0TG5ncyhjb29yZHMsIGdlb21ldHJ5LnR5cGUgPT09ICdMaW5lU3RyaW5nJyA/IDAgOiAxLCBfY29vcmRzVG9MYXRMbmcpOwogIAkJcmV0dXJuIG5ldyBQb2x5bGluZShsYXRsbmdzLCBvcHRpb25zKTsKCiAgCWNhc2UgJ1BvbHlnb24nOgogIAljYXNlICdNdWx0aVBvbHlnb24nOgogIAkJbGF0bG5ncyA9IGNvb3Jkc1RvTGF0TG5ncyhjb29yZHMsIGdlb21ldHJ5LnR5cGUgPT09ICdQb2x5Z29uJyA/IDEgOiAyLCBfY29vcmRzVG9MYXRMbmcpOwogIAkJcmV0dXJuIG5ldyBQb2x5Z29uKGxhdGxuZ3MsIG9wdGlvbnMpOwoKICAJY2FzZSAnR2VvbWV0cnlDb2xsZWN0aW9uJzoKICAJCWZvciAoaSA9IDAsIGxlbiA9IGdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCQl2YXIgbGF5ZXIgPSBnZW9tZXRyeVRvTGF5ZXIoewogIAkJCQlnZW9tZXRyeTogZ2VvbWV0cnkuZ2VvbWV0cmllc1tpXSwKICAJCQkJdHlwZTogJ0ZlYXR1cmUnLAogIAkJCQlwcm9wZXJ0aWVzOiBnZW9qc29uLnByb3BlcnRpZXMKICAJCQl9LCBvcHRpb25zKTsKCiAgCQkJaWYgKGxheWVyKSB7CiAgCQkJCWxheWVycy5wdXNoKGxheWVyKTsKICAJCQl9CiAgCQl9CiAgCQlyZXR1cm4gbmV3IEZlYXR1cmVHcm91cChsYXllcnMpOwoKICAJZGVmYXVsdDoKICAJCXRocm93IG5ldyBFcnJvcignSW52YWxpZCBHZW9KU09OIG9iamVjdC4nKTsKICAJfQogIH0KCiAgZnVuY3Rpb24gX3BvaW50VG9MYXllcihwb2ludFRvTGF5ZXJGbiwgZ2VvanNvbiwgbGF0bG5nLCBvcHRpb25zKSB7CiAgCXJldHVybiBwb2ludFRvTGF5ZXJGbiA/CiAgCQlwb2ludFRvTGF5ZXJGbihnZW9qc29uLCBsYXRsbmcpIDoKICAJCW5ldyBNYXJrZXIobGF0bG5nLCBvcHRpb25zICYmIG9wdGlvbnMubWFya2Vyc0luaGVyaXRPcHRpb25zICYmIG9wdGlvbnMpOwogIH0KCiAgLy8gQGZ1bmN0aW9uIGNvb3Jkc1RvTGF0TG5nKGNvb3JkczogQXJyYXkpOiBMYXRMbmcKICAvLyBDcmVhdGVzIGEgYExhdExuZ2Agb2JqZWN0IGZyb20gYW4gYXJyYXkgb2YgMiBudW1iZXJzIChsb25naXR1ZGUsIGxhdGl0dWRlKQogIC8vIG9yIDMgbnVtYmVycyAobG9uZ2l0dWRlLCBsYXRpdHVkZSwgYWx0aXR1ZGUpIHVzZWQgaW4gR2VvSlNPTiBmb3IgcG9pbnRzLgogIGZ1bmN0aW9uIGNvb3Jkc1RvTGF0TG5nKGNvb3JkcykgewogIAlyZXR1cm4gbmV3IExhdExuZyhjb29yZHNbMV0sIGNvb3Jkc1swXSwgY29vcmRzWzJdKTsKICB9CgogIC8vIEBmdW5jdGlvbiBjb29yZHNUb0xhdExuZ3MoY29vcmRzOiBBcnJheSwgbGV2ZWxzRGVlcD86IE51bWJlciwgY29vcmRzVG9MYXRMbmc/OiBGdW5jdGlvbik6IEFycmF5CiAgLy8gQ3JlYXRlcyBhIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgb2YgYExhdExuZ2BzIGZyb20gYSBHZW9KU09OIGNvb3JkaW5hdGVzIGFycmF5LgogIC8vIGBsZXZlbHNEZWVwYCBzcGVjaWZpZXMgdGhlIG5lc3RpbmcgbGV2ZWwgKDAgaXMgZm9yIGFuIGFycmF5IG9mIHBvaW50cywgMSBmb3IgYW4gYXJyYXkgb2YgYXJyYXlzIG9mIHBvaW50cywgZXRjLiwgMCBieSBkZWZhdWx0KS4KICAvLyBDYW4gdXNlIGEgY3VzdG9tIFtgY29vcmRzVG9MYXRMbmdgXSgjZ2VvanNvbi1jb29yZHN0b2xhdGxuZykgZnVuY3Rpb24uCiAgZnVuY3Rpb24gY29vcmRzVG9MYXRMbmdzKGNvb3JkcywgbGV2ZWxzRGVlcCwgX2Nvb3Jkc1RvTGF0TG5nKSB7CiAgCXZhciBsYXRsbmdzID0gW107CgogIAlmb3IgKHZhciBpID0gMCwgbGVuID0gY29vcmRzLmxlbmd0aCwgbGF0bG5nOyBpIDwgbGVuOyBpKyspIHsKICAJCWxhdGxuZyA9IGxldmVsc0RlZXAgPwogIAkJCWNvb3Jkc1RvTGF0TG5ncyhjb29yZHNbaV0sIGxldmVsc0RlZXAgLSAxLCBfY29vcmRzVG9MYXRMbmcpIDoKICAJCQkoX2Nvb3Jkc1RvTGF0TG5nIHx8IGNvb3Jkc1RvTGF0TG5nKShjb29yZHNbaV0pOwoKICAJCWxhdGxuZ3MucHVzaChsYXRsbmcpOwogIAl9CgogIAlyZXR1cm4gbGF0bG5nczsKICB9CgogIC8vIEBmdW5jdGlvbiBsYXRMbmdUb0Nvb3JkcyhsYXRsbmc6IExhdExuZywgcHJlY2lzaW9uPzogTnVtYmVyfGZhbHNlKTogQXJyYXkKICAvLyBSZXZlcnNlIG9mIFtgY29vcmRzVG9MYXRMbmdgXSgjZ2VvanNvbi1jb29yZHN0b2xhdGxuZykKICAvLyBDb29yZGluYXRlcyB2YWx1ZXMgYXJlIHJvdW5kZWQgd2l0aCBbYGZvcm1hdE51bWBdKCN1dGlsLWZvcm1hdG51bSkgZnVuY3Rpb24uCiAgZnVuY3Rpb24gbGF0TG5nVG9Db29yZHMobGF0bG5nLCBwcmVjaXNpb24pIHsKICAJbGF0bG5nID0gdG9MYXRMbmcobGF0bG5nKTsKICAJcmV0dXJuIGxhdGxuZy5hbHQgIT09IHVuZGVmaW5lZCA/CiAgCQlbZm9ybWF0TnVtKGxhdGxuZy5sbmcsIHByZWNpc2lvbiksIGZvcm1hdE51bShsYXRsbmcubGF0LCBwcmVjaXNpb24pLCBmb3JtYXROdW0obGF0bG5nLmFsdCwgcHJlY2lzaW9uKV0gOgogIAkJW2Zvcm1hdE51bShsYXRsbmcubG5nLCBwcmVjaXNpb24pLCBmb3JtYXROdW0obGF0bG5nLmxhdCwgcHJlY2lzaW9uKV07CiAgfQoKICAvLyBAZnVuY3Rpb24gbGF0TG5nc1RvQ29vcmRzKGxhdGxuZ3M6IEFycmF5LCBsZXZlbHNEZWVwPzogTnVtYmVyLCBjbG9zZWQ/OiBCb29sZWFuLCBwcmVjaXNpb24/OiBOdW1iZXJ8ZmFsc2UpOiBBcnJheQogIC8vIFJldmVyc2Ugb2YgW2Bjb29yZHNUb0xhdExuZ3NgXSgjZ2VvanNvbi1jb29yZHN0b2xhdGxuZ3MpCiAgLy8gYGNsb3NlZGAgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBmaXJzdCBwb2ludCBzaG91bGQgYmUgYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiB0aGUgYXJyYXkgdG8gY2xvc2UgdGhlIGZlYXR1cmUsIG9ubHkgdXNlZCB3aGVuIGBsZXZlbHNEZWVwYCBpcyAwLiBGYWxzZSBieSBkZWZhdWx0LgogIC8vIENvb3JkaW5hdGVzIHZhbHVlcyBhcmUgcm91bmRlZCB3aXRoIFtgZm9ybWF0TnVtYF0oI3V0aWwtZm9ybWF0bnVtKSBmdW5jdGlvbi4KICBmdW5jdGlvbiBsYXRMbmdzVG9Db29yZHMobGF0bG5ncywgbGV2ZWxzRGVlcCwgY2xvc2VkLCBwcmVjaXNpb24pIHsKICAJdmFyIGNvb3JkcyA9IFtdOwoKICAJZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxhdGxuZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCWNvb3Jkcy5wdXNoKGxldmVsc0RlZXAgPwogIAkJCWxhdExuZ3NUb0Nvb3JkcyhsYXRsbmdzW2ldLCBsZXZlbHNEZWVwIC0gMSwgY2xvc2VkLCBwcmVjaXNpb24pIDoKICAJCQlsYXRMbmdUb0Nvb3JkcyhsYXRsbmdzW2ldLCBwcmVjaXNpb24pKTsKICAJfQoKICAJaWYgKCFsZXZlbHNEZWVwICYmIGNsb3NlZCkgewogIAkJY29vcmRzLnB1c2goY29vcmRzWzBdKTsKICAJfQoKICAJcmV0dXJuIGNvb3JkczsKICB9CgogIGZ1bmN0aW9uIGdldEZlYXR1cmUobGF5ZXIsIG5ld0dlb21ldHJ5KSB7CiAgCXJldHVybiBsYXllci5mZWF0dXJlID8KICAJCWV4dGVuZCh7fSwgbGF5ZXIuZmVhdHVyZSwge2dlb21ldHJ5OiBuZXdHZW9tZXRyeX0pIDoKICAJCWFzRmVhdHVyZShuZXdHZW9tZXRyeSk7CiAgfQoKICAvLyBAZnVuY3Rpb24gYXNGZWF0dXJlKGdlb2pzb246IE9iamVjdCk6IE9iamVjdAogIC8vIE5vcm1hbGl6ZSBHZW9KU09OIGdlb21ldHJpZXMvZmVhdHVyZXMgaW50byBHZW9KU09OIGZlYXR1cmVzLgogIGZ1bmN0aW9uIGFzRmVhdHVyZShnZW9qc29uKSB7CiAgCWlmIChnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlJyB8fCBnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHsKICAJCXJldHVybiBnZW9qc29uOwogIAl9CgogIAlyZXR1cm4gewogIAkJdHlwZTogJ0ZlYXR1cmUnLAogIAkJcHJvcGVydGllczoge30sCiAgCQlnZW9tZXRyeTogZ2VvanNvbgogIAl9OwogIH0KCiAgdmFyIFBvaW50VG9HZW9KU09OID0gewogIAl0b0dlb0pTT046IGZ1bmN0aW9uIChwcmVjaXNpb24pIHsKICAJCXJldHVybiBnZXRGZWF0dXJlKHRoaXMsIHsKICAJCQl0eXBlOiAnUG9pbnQnLAogIAkJCWNvb3JkaW5hdGVzOiBsYXRMbmdUb0Nvb3Jkcyh0aGlzLmdldExhdExuZygpLCBwcmVjaXNpb24pCiAgCQl9KTsKICAJfQogIH07CgogIC8vIEBuYW1lc3BhY2UgTWFya2VyCiAgLy8gQHNlY3Rpb24gT3RoZXIgbWV0aG9kcwogIC8vIEBtZXRob2QgdG9HZW9KU09OKHByZWNpc2lvbj86IE51bWJlcnxmYWxzZSk6IE9iamVjdAogIC8vIENvb3JkaW5hdGVzIHZhbHVlcyBhcmUgcm91bmRlZCB3aXRoIFtgZm9ybWF0TnVtYF0oI3V0aWwtZm9ybWF0bnVtKSBmdW5jdGlvbiB3aXRoIGdpdmVuIGBwcmVjaXNpb25gLgogIC8vIFJldHVybnMgYSBbYEdlb0pTT05gXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HZW9KU09OKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWFya2VyIChhcyBhIEdlb0pTT04gYFBvaW50YCBGZWF0dXJlKS4KICBNYXJrZXIuaW5jbHVkZShQb2ludFRvR2VvSlNPTik7CgogIC8vIEBuYW1lc3BhY2UgQ2lyY2xlTWFya2VyCiAgLy8gQG1ldGhvZCB0b0dlb0pTT04ocHJlY2lzaW9uPzogTnVtYmVyfGZhbHNlKTogT2JqZWN0CiAgLy8gQ29vcmRpbmF0ZXMgdmFsdWVzIGFyZSByb3VuZGVkIHdpdGggW2Bmb3JtYXROdW1gXSgjdXRpbC1mb3JtYXRudW0pIGZ1bmN0aW9uIHdpdGggZ2l2ZW4gYHByZWNpc2lvbmAuCiAgLy8gUmV0dXJucyBhIFtgR2VvSlNPTmBdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dlb0pTT04pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjaXJjbGUgbWFya2VyIChhcyBhIEdlb0pTT04gYFBvaW50YCBGZWF0dXJlKS4KICBDaXJjbGUuaW5jbHVkZShQb2ludFRvR2VvSlNPTik7CiAgQ2lyY2xlTWFya2VyLmluY2x1ZGUoUG9pbnRUb0dlb0pTT04pOwoKCiAgLy8gQG5hbWVzcGFjZSBQb2x5bGluZQogIC8vIEBtZXRob2QgdG9HZW9KU09OKHByZWNpc2lvbj86IE51bWJlcnxmYWxzZSk6IE9iamVjdAogIC8vIENvb3JkaW5hdGVzIHZhbHVlcyBhcmUgcm91bmRlZCB3aXRoIFtgZm9ybWF0TnVtYF0oI3V0aWwtZm9ybWF0bnVtKSBmdW5jdGlvbiB3aXRoIGdpdmVuIGBwcmVjaXNpb25gLgogIC8vIFJldHVybnMgYSBbYEdlb0pTT05gXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HZW9KU09OKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcG9seWxpbmUgKGFzIGEgR2VvSlNPTiBgTGluZVN0cmluZ2Agb3IgYE11bHRpTGluZVN0cmluZ2AgRmVhdHVyZSkuCiAgUG9seWxpbmUuaW5jbHVkZSh7CiAgCXRvR2VvSlNPTjogZnVuY3Rpb24gKHByZWNpc2lvbikgewogIAkJdmFyIG11bHRpID0gIWlzRmxhdCh0aGlzLl9sYXRsbmdzKTsKCiAgCQl2YXIgY29vcmRzID0gbGF0TG5nc1RvQ29vcmRzKHRoaXMuX2xhdGxuZ3MsIG11bHRpID8gMSA6IDAsIGZhbHNlLCBwcmVjaXNpb24pOwoKICAJCXJldHVybiBnZXRGZWF0dXJlKHRoaXMsIHsKICAJCQl0eXBlOiAobXVsdGkgPyAnTXVsdGknIDogJycpICsgJ0xpbmVTdHJpbmcnLAogIAkJCWNvb3JkaW5hdGVzOiBjb29yZHMKICAJCX0pOwogIAl9CiAgfSk7CgogIC8vIEBuYW1lc3BhY2UgUG9seWdvbgogIC8vIEBtZXRob2QgdG9HZW9KU09OKHByZWNpc2lvbj86IE51bWJlcnxmYWxzZSk6IE9iamVjdAogIC8vIENvb3JkaW5hdGVzIHZhbHVlcyBhcmUgcm91bmRlZCB3aXRoIFtgZm9ybWF0TnVtYF0oI3V0aWwtZm9ybWF0bnVtKSBmdW5jdGlvbiB3aXRoIGdpdmVuIGBwcmVjaXNpb25gLgogIC8vIFJldHVybnMgYSBbYEdlb0pTT05gXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HZW9KU09OKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcG9seWdvbiAoYXMgYSBHZW9KU09OIGBQb2x5Z29uYCBvciBgTXVsdGlQb2x5Z29uYCBGZWF0dXJlKS4KICBQb2x5Z29uLmluY2x1ZGUoewogIAl0b0dlb0pTT046IGZ1bmN0aW9uIChwcmVjaXNpb24pIHsKICAJCXZhciBob2xlcyA9ICFpc0ZsYXQodGhpcy5fbGF0bG5ncyksCiAgCQkgICAgbXVsdGkgPSBob2xlcyAmJiAhaXNGbGF0KHRoaXMuX2xhdGxuZ3NbMF0pOwoKICAJCXZhciBjb29yZHMgPSBsYXRMbmdzVG9Db29yZHModGhpcy5fbGF0bG5ncywgbXVsdGkgPyAyIDogaG9sZXMgPyAxIDogMCwgdHJ1ZSwgcHJlY2lzaW9uKTsKCiAgCQlpZiAoIWhvbGVzKSB7CiAgCQkJY29vcmRzID0gW2Nvb3Jkc107CiAgCQl9CgogIAkJcmV0dXJuIGdldEZlYXR1cmUodGhpcywgewogIAkJCXR5cGU6IChtdWx0aSA/ICdNdWx0aScgOiAnJykgKyAnUG9seWdvbicsCiAgCQkJY29vcmRpbmF0ZXM6IGNvb3JkcwogIAkJfSk7CiAgCX0KICB9KTsKCgogIC8vIEBuYW1lc3BhY2UgTGF5ZXJHcm91cAogIExheWVyR3JvdXAuaW5jbHVkZSh7CiAgCXRvTXVsdGlQb2ludDogZnVuY3Rpb24gKHByZWNpc2lvbikgewogIAkJdmFyIGNvb3JkcyA9IFtdOwoKICAJCXRoaXMuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikgewogIAkJCWNvb3Jkcy5wdXNoKGxheWVyLnRvR2VvSlNPTihwcmVjaXNpb24pLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTsKICAJCX0pOwoKICAJCXJldHVybiBnZXRGZWF0dXJlKHRoaXMsIHsKICAJCQl0eXBlOiAnTXVsdGlQb2ludCcsCiAgCQkJY29vcmRpbmF0ZXM6IGNvb3JkcwogIAkJfSk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHRvR2VvSlNPTihwcmVjaXNpb24/OiBOdW1iZXJ8ZmFsc2UpOiBPYmplY3QKICAJLy8gQ29vcmRpbmF0ZXMgdmFsdWVzIGFyZSByb3VuZGVkIHdpdGggW2Bmb3JtYXROdW1gXSgjdXRpbC1mb3JtYXRudW0pIGZ1bmN0aW9uIHdpdGggZ2l2ZW4gYHByZWNpc2lvbmAuCiAgCS8vIFJldHVybnMgYSBbYEdlb0pTT05gXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HZW9KU09OKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbGF5ZXIgZ3JvdXAgKGFzIGEgR2VvSlNPTiBgRmVhdHVyZUNvbGxlY3Rpb25gLCBgR2VvbWV0cnlDb2xsZWN0aW9uYCwgb3IgYE11bHRpUG9pbnRgKS4KICAJdG9HZW9KU09OOiBmdW5jdGlvbiAocHJlY2lzaW9uKSB7CgogIAkJdmFyIHR5cGUgPSB0aGlzLmZlYXR1cmUgJiYgdGhpcy5mZWF0dXJlLmdlb21ldHJ5ICYmIHRoaXMuZmVhdHVyZS5nZW9tZXRyeS50eXBlOwoKICAJCWlmICh0eXBlID09PSAnTXVsdGlQb2ludCcpIHsKICAJCQlyZXR1cm4gdGhpcy50b011bHRpUG9pbnQocHJlY2lzaW9uKTsKICAJCX0KCiAgCQl2YXIgaXNHZW9tZXRyeUNvbGxlY3Rpb24gPSB0eXBlID09PSAnR2VvbWV0cnlDb2xsZWN0aW9uJywKICAJCSAgICBqc29ucyA9IFtdOwoKICAJCXRoaXMuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikgewogIAkJCWlmIChsYXllci50b0dlb0pTT04pIHsKICAJCQkJdmFyIGpzb24gPSBsYXllci50b0dlb0pTT04ocHJlY2lzaW9uKTsKICAJCQkJaWYgKGlzR2VvbWV0cnlDb2xsZWN0aW9uKSB7CiAgCQkJCQlqc29ucy5wdXNoKGpzb24uZ2VvbWV0cnkpOwogIAkJCQl9IGVsc2UgewogIAkJCQkJdmFyIGZlYXR1cmUgPSBhc0ZlYXR1cmUoanNvbik7CiAgCQkJCQkvLyBTcXVhc2ggbmVzdGVkIGZlYXR1cmUgY29sbGVjdGlvbnMKICAJCQkJCWlmIChmZWF0dXJlLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHsKICAJCQkJCQlqc29ucy5wdXNoLmFwcGx5KGpzb25zLCBmZWF0dXJlLmZlYXR1cmVzKTsKICAJCQkJCX0gZWxzZSB7CiAgCQkJCQkJanNvbnMucHVzaChmZWF0dXJlKTsKICAJCQkJCX0KICAJCQkJfQogIAkJCX0KICAJCX0pOwoKICAJCWlmIChpc0dlb21ldHJ5Q29sbGVjdGlvbikgewogIAkJCXJldHVybiBnZXRGZWF0dXJlKHRoaXMsIHsKICAJCQkJZ2VvbWV0cmllczoganNvbnMsCiAgCQkJCXR5cGU6ICdHZW9tZXRyeUNvbGxlY3Rpb24nCiAgCQkJfSk7CiAgCQl9CgogIAkJcmV0dXJuIHsKICAJCQl0eXBlOiAnRmVhdHVyZUNvbGxlY3Rpb24nLAogIAkJCWZlYXR1cmVzOiBqc29ucwogIAkJfTsKICAJfQogIH0pOwoKICAvLyBAbmFtZXNwYWNlIEdlb0pTT04KICAvLyBAZmFjdG9yeSBMLmdlb0pTT04oZ2VvanNvbj86IE9iamVjdCwgb3B0aW9ucz86IEdlb0pTT04gb3B0aW9ucykKICAvLyBDcmVhdGVzIGEgR2VvSlNPTiBsYXllci4gT3B0aW9uYWxseSBhY2NlcHRzIGFuIG9iamVjdCBpbgogIC8vIFtHZW9KU09OIGZvcm1hdF0oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc5NDYpIHRvIGRpc3BsYXkgb24gdGhlIG1hcAogIC8vICh5b3UgY2FuIGFsdGVybmF0aXZlbHkgYWRkIGl0IGxhdGVyIHdpdGggYGFkZERhdGFgIG1ldGhvZCkgYW5kIGFuIGBvcHRpb25zYCBvYmplY3QuCiAgZnVuY3Rpb24gZ2VvSlNPTihnZW9qc29uLCBvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgR2VvSlNPTihnZW9qc29uLCBvcHRpb25zKTsKICB9CgogIC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkuCiAgdmFyIGdlb0pzb24gPSBnZW9KU09OOwoKICAvKgogICAqIEBjbGFzcyBJbWFnZU92ZXJsYXkKICAgKiBAYWthIEwuSW1hZ2VPdmVybGF5CiAgICogQGluaGVyaXRzIEludGVyYWN0aXZlIGxheWVyCiAgICoKICAgKiBVc2VkIHRvIGxvYWQgYW5kIGRpc3BsYXkgYSBzaW5nbGUgaW1hZ2Ugb3ZlciBzcGVjaWZpYyBib3VuZHMgb2YgdGhlIG1hcC4gRXh0ZW5kcyBgTGF5ZXJgLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogdmFyIGltYWdlVXJsID0gJ2h0dHBzOi8vbWFwcy5saWIudXRleGFzLmVkdS9tYXBzL2hpc3RvcmljYWwvbmV3YXJrX25qXzE5MjIuanBnJywKICAgKiAJaW1hZ2VCb3VuZHMgPSBbWzQwLjcxMjIxNiwgLTc0LjIyNjU1XSwgWzQwLjc3Mzk0MSwgLTc0LjEyNTQ0XV07CiAgICogTC5pbWFnZU92ZXJsYXkoaW1hZ2VVcmwsIGltYWdlQm91bmRzKS5hZGRUbyhtYXApOwogICAqIGBgYAogICAqLwoKICB2YXIgSW1hZ2VPdmVybGF5ID0gTGF5ZXIuZXh0ZW5kKHsKCiAgCS8vIEBzZWN0aW9uCiAgCS8vIEBha2EgSW1hZ2VPdmVybGF5IG9wdGlvbnMKICAJb3B0aW9uczogewogIAkJLy8gQG9wdGlvbiBvcGFjaXR5OiBOdW1iZXIgPSAxLjAKICAJCS8vIFRoZSBvcGFjaXR5IG9mIHRoZSBpbWFnZSBvdmVybGF5LgogIAkJb3BhY2l0eTogMSwKCiAgCQkvLyBAb3B0aW9uIGFsdDogU3RyaW5nID0gJycKICAJCS8vIFRleHQgZm9yIHRoZSBgYWx0YCBhdHRyaWJ1dGUgb2YgdGhlIGltYWdlICh1c2VmdWwgZm9yIGFjY2Vzc2liaWxpdHkpLgogIAkJYWx0OiAnJywKCiAgCQkvLyBAb3B0aW9uIGludGVyYWN0aXZlOiBCb29sZWFuID0gZmFsc2UKICAJCS8vIElmIGB0cnVlYCwgdGhlIGltYWdlIG92ZXJsYXkgd2lsbCBlbWl0IFttb3VzZSBldmVudHNdKCNpbnRlcmFjdGl2ZS1sYXllcikgd2hlbiBjbGlja2VkIG9yIGhvdmVyZWQuCiAgCQlpbnRlcmFjdGl2ZTogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBjcm9zc09yaWdpbjogQm9vbGVhbnxTdHJpbmcgPSBmYWxzZQogIAkJLy8gV2hldGhlciB0aGUgY3Jvc3NPcmlnaW4gYXR0cmlidXRlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGltYWdlLgogIAkJLy8gSWYgYSBTdHJpbmcgaXMgcHJvdmlkZWQsIHRoZSBpbWFnZSB3aWxsIGhhdmUgaXRzIGNyb3NzT3JpZ2luIGF0dHJpYnV0ZSBzZXQgdG8gdGhlIFN0cmluZyBwcm92aWRlZC4gVGhpcyBpcyBuZWVkZWQgaWYgeW91IHdhbnQgdG8gYWNjZXNzIGltYWdlIHBpeGVsIGRhdGEuCiAgCQkvLyBSZWZlciB0byBbQ09SUyBTZXR0aW5nc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9DT1JTX3NldHRpbmdzX2F0dHJpYnV0ZXMpIGZvciB2YWxpZCBTdHJpbmcgdmFsdWVzLgogIAkJY3Jvc3NPcmlnaW46IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gZXJyb3JPdmVybGF5VXJsOiBTdHJpbmcgPSAnJwogIAkJLy8gVVJMIHRvIHRoZSBvdmVybGF5IGltYWdlIHRvIHNob3cgaW4gcGxhY2Ugb2YgdGhlIG92ZXJsYXkgdGhhdCBmYWlsZWQgdG8gbG9hZC4KICAJCWVycm9yT3ZlcmxheVVybDogJycsCgogIAkJLy8gQG9wdGlvbiB6SW5kZXg6IE51bWJlciA9IDEKICAJCS8vIFRoZSBleHBsaWNpdCBbekluZGV4XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9DU1MvQ1NTX1Bvc2l0aW9uaW5nL1VuZGVyc3RhbmRpbmdfel9pbmRleCkgb2YgdGhlIG92ZXJsYXkgbGF5ZXIuCiAgCQl6SW5kZXg6IDEsCgogIAkJLy8gQG9wdGlvbiBjbGFzc05hbWU6IFN0cmluZyA9ICcnCiAgCQkvLyBBIGN1c3RvbSBjbGFzcyBuYW1lIHRvIGFzc2lnbiB0byB0aGUgaW1hZ2UuIEVtcHR5IGJ5IGRlZmF1bHQuCiAgCQljbGFzc05hbWU6ICcnCiAgCX0sCgogIAlpbml0aWFsaXplOiBmdW5jdGlvbiAodXJsLCBib3VuZHMsIG9wdGlvbnMpIHsgLy8gKFN0cmluZywgTGF0TG5nQm91bmRzLCBPYmplY3QpCiAgCQl0aGlzLl91cmwgPSB1cmw7CiAgCQl0aGlzLl9ib3VuZHMgPSB0b0xhdExuZ0JvdW5kcyhib3VuZHMpOwoKICAJCXNldE9wdGlvbnModGhpcywgb3B0aW9ucyk7CiAgCX0sCgogIAlvbkFkZDogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9pbWFnZSkgewogIAkJCXRoaXMuX2luaXRJbWFnZSgpOwoKICAJCQlpZiAodGhpcy5vcHRpb25zLm9wYWNpdHkgPCAxKSB7CiAgCQkJCXRoaXMuX3VwZGF0ZU9wYWNpdHkoKTsKICAJCQl9CiAgCQl9CgogIAkJaWYgKHRoaXMub3B0aW9ucy5pbnRlcmFjdGl2ZSkgewogIAkJCWFkZENsYXNzKHRoaXMuX2ltYWdlLCAnbGVhZmxldC1pbnRlcmFjdGl2ZScpOwogIAkJCXRoaXMuYWRkSW50ZXJhY3RpdmVUYXJnZXQodGhpcy5faW1hZ2UpOwogIAkJfQoKICAJCXRoaXMuZ2V0UGFuZSgpLmFwcGVuZENoaWxkKHRoaXMuX2ltYWdlKTsKICAJCXRoaXMuX3Jlc2V0KCk7CiAgCX0sCgogIAlvblJlbW92ZTogZnVuY3Rpb24gKCkgewogIAkJcmVtb3ZlKHRoaXMuX2ltYWdlKTsKICAJCWlmICh0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUpIHsKICAJCQl0aGlzLnJlbW92ZUludGVyYWN0aXZlVGFyZ2V0KHRoaXMuX2ltYWdlKTsKICAJCX0KICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0T3BhY2l0eShvcGFjaXR5OiBOdW1iZXIpOiB0aGlzCiAgCS8vIFNldHMgdGhlIG9wYWNpdHkgb2YgdGhlIG92ZXJsYXkuCiAgCXNldE9wYWNpdHk6IGZ1bmN0aW9uIChvcGFjaXR5KSB7CiAgCQl0aGlzLm9wdGlvbnMub3BhY2l0eSA9IG9wYWNpdHk7CgogIAkJaWYgKHRoaXMuX2ltYWdlKSB7CiAgCQkJdGhpcy5fdXBkYXRlT3BhY2l0eSgpOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAlzZXRTdHlsZTogZnVuY3Rpb24gKHN0eWxlT3B0cykgewogIAkJaWYgKHN0eWxlT3B0cy5vcGFjaXR5KSB7CiAgCQkJdGhpcy5zZXRPcGFjaXR5KHN0eWxlT3B0cy5vcGFjaXR5KTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBicmluZ1RvRnJvbnQoKTogdGhpcwogIAkvLyBCcmluZ3MgdGhlIGxheWVyIHRvIHRoZSB0b3Agb2YgYWxsIG92ZXJsYXlzLgogIAlicmluZ1RvRnJvbnQ6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9tYXApIHsKICAJCQl0b0Zyb250KHRoaXMuX2ltYWdlKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBicmluZ1RvQmFjaygpOiB0aGlzCiAgCS8vIEJyaW5ncyB0aGUgbGF5ZXIgdG8gdGhlIGJvdHRvbSBvZiBhbGwgb3ZlcmxheXMuCiAgCWJyaW5nVG9CYWNrOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fbWFwKSB7CiAgCQkJdG9CYWNrKHRoaXMuX2ltYWdlKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRVcmwodXJsOiBTdHJpbmcpOiB0aGlzCiAgCS8vIENoYW5nZXMgdGhlIFVSTCBvZiB0aGUgaW1hZ2UuCiAgCXNldFVybDogZnVuY3Rpb24gKHVybCkgewogIAkJdGhpcy5fdXJsID0gdXJsOwoKICAJCWlmICh0aGlzLl9pbWFnZSkgewogIAkJCXRoaXMuX2ltYWdlLnNyYyA9IHVybDsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRCb3VuZHMoYm91bmRzOiBMYXRMbmdCb3VuZHMpOiB0aGlzCiAgCS8vIFVwZGF0ZSB0aGUgYm91bmRzIHRoYXQgdGhpcyBJbWFnZU92ZXJsYXkgY292ZXJzCiAgCXNldEJvdW5kczogZnVuY3Rpb24gKGJvdW5kcykgewogIAkJdGhpcy5fYm91bmRzID0gdG9MYXRMbmdCb3VuZHMoYm91bmRzKTsKCiAgCQlpZiAodGhpcy5fbWFwKSB7CiAgCQkJdGhpcy5fcmVzZXQoKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJZ2V0RXZlbnRzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgZXZlbnRzID0gewogIAkJCXpvb206IHRoaXMuX3Jlc2V0LAogIAkJCXZpZXdyZXNldDogdGhpcy5fcmVzZXQKICAJCX07CgogIAkJaWYgKHRoaXMuX3pvb21BbmltYXRlZCkgewogIAkJCWV2ZW50cy56b29tYW5pbSA9IHRoaXMuX2FuaW1hdGVab29tOwogIAkJfQoKICAJCXJldHVybiBldmVudHM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFpJbmRleCh2YWx1ZTogTnVtYmVyKTogdGhpcwogIAkvLyBDaGFuZ2VzIHRoZSBbekluZGV4XSgjaW1hZ2VvdmVybGF5LXppbmRleCkgb2YgdGhlIGltYWdlIG92ZXJsYXkuCiAgCXNldFpJbmRleDogZnVuY3Rpb24gKHZhbHVlKSB7CiAgCQl0aGlzLm9wdGlvbnMuekluZGV4ID0gdmFsdWU7CiAgCQl0aGlzLl91cGRhdGVaSW5kZXgoKTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRCb3VuZHMoKTogTGF0TG5nQm91bmRzCiAgCS8vIEdldCB0aGUgYm91bmRzIHRoYXQgdGhpcyBJbWFnZU92ZXJsYXkgY292ZXJzCiAgCWdldEJvdW5kczogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX2JvdW5kczsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0RWxlbWVudCgpOiBIVE1MRWxlbWVudAogIAkvLyBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiBbYEhUTUxJbWFnZUVsZW1lbnRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvSFRNTEltYWdlRWxlbWVudCkKICAJLy8gdXNlZCBieSB0aGlzIG92ZXJsYXkuCiAgCWdldEVsZW1lbnQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9pbWFnZTsKICAJfSwKCiAgCV9pbml0SW1hZ2U6IGZ1bmN0aW9uICgpIHsKICAJCXZhciB3YXNFbGVtZW50U3VwcGxpZWQgPSB0aGlzLl91cmwudGFnTmFtZSA9PT0gJ0lNRyc7CiAgCQl2YXIgaW1nID0gdGhpcy5faW1hZ2UgPSB3YXNFbGVtZW50U3VwcGxpZWQgPyB0aGlzLl91cmwgOiBjcmVhdGUkMSgnaW1nJyk7CgogIAkJYWRkQ2xhc3MoaW1nLCAnbGVhZmxldC1pbWFnZS1sYXllcicpOwogIAkJaWYgKHRoaXMuX3pvb21BbmltYXRlZCkgeyBhZGRDbGFzcyhpbWcsICdsZWFmbGV0LXpvb20tYW5pbWF0ZWQnKTsgfQogIAkJaWYgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpIHsgYWRkQ2xhc3MoaW1nLCB0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKTsgfQoKICAJCWltZy5vbnNlbGVjdHN0YXJ0ID0gZmFsc2VGbjsKICAJCWltZy5vbm1vdXNlbW92ZSA9IGZhbHNlRm47CgogIAkJLy8gQGV2ZW50IGxvYWQ6IEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSBJbWFnZU92ZXJsYXkgbGF5ZXIgaGFzIGxvYWRlZCBpdHMgaW1hZ2UKICAJCWltZy5vbmxvYWQgPSBiaW5kKHRoaXMuZmlyZSwgdGhpcywgJ2xvYWQnKTsKICAJCWltZy5vbmVycm9yID0gYmluZCh0aGlzLl9vdmVybGF5T25FcnJvciwgdGhpcywgJ2Vycm9yJyk7CgogIAkJaWYgKHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbiB8fCB0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4gPT09ICcnKSB7CiAgCQkJaW1nLmNyb3NzT3JpZ2luID0gdGhpcy5vcHRpb25zLmNyb3NzT3JpZ2luID09PSB0cnVlID8gJycgOiB0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW47CiAgCQl9CgogIAkJaWYgKHRoaXMub3B0aW9ucy56SW5kZXgpIHsKICAJCQl0aGlzLl91cGRhdGVaSW5kZXgoKTsKICAJCX0KCiAgCQlpZiAod2FzRWxlbWVudFN1cHBsaWVkKSB7CiAgCQkJdGhpcy5fdXJsID0gaW1nLnNyYzsKICAJCQlyZXR1cm47CiAgCQl9CgogIAkJaW1nLnNyYyA9IHRoaXMuX3VybDsKICAJCWltZy5hbHQgPSB0aGlzLm9wdGlvbnMuYWx0OwogIAl9LAoKICAJX2FuaW1hdGVab29tOiBmdW5jdGlvbiAoZSkgewogIAkJdmFyIHNjYWxlID0gdGhpcy5fbWFwLmdldFpvb21TY2FsZShlLnpvb20pLAogIAkJICAgIG9mZnNldCA9IHRoaXMuX21hcC5fbGF0TG5nQm91bmRzVG9OZXdMYXllckJvdW5kcyh0aGlzLl9ib3VuZHMsIGUuem9vbSwgZS5jZW50ZXIpLm1pbjsKCiAgCQlzZXRUcmFuc2Zvcm0odGhpcy5faW1hZ2UsIG9mZnNldCwgc2NhbGUpOwogIAl9LAoKICAJX3Jlc2V0OiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgaW1hZ2UgPSB0aGlzLl9pbWFnZSwKICAJCSAgICBib3VuZHMgPSBuZXcgQm91bmRzKAogIAkJICAgICAgICB0aGlzLl9tYXAubGF0TG5nVG9MYXllclBvaW50KHRoaXMuX2JvdW5kcy5nZXROb3J0aFdlc3QoKSksCiAgCQkgICAgICAgIHRoaXMuX21hcC5sYXRMbmdUb0xheWVyUG9pbnQodGhpcy5fYm91bmRzLmdldFNvdXRoRWFzdCgpKSksCiAgCQkgICAgc2l6ZSA9IGJvdW5kcy5nZXRTaXplKCk7CgogIAkJc2V0UG9zaXRpb24oaW1hZ2UsIGJvdW5kcy5taW4pOwoKICAJCWltYWdlLnN0eWxlLndpZHRoICA9IHNpemUueCArICdweCc7CiAgCQlpbWFnZS5zdHlsZS5oZWlnaHQgPSBzaXplLnkgKyAncHgnOwogIAl9LAoKICAJX3VwZGF0ZU9wYWNpdHk6IGZ1bmN0aW9uICgpIHsKICAJCXNldE9wYWNpdHkodGhpcy5faW1hZ2UsIHRoaXMub3B0aW9ucy5vcGFjaXR5KTsKICAJfSwKCiAgCV91cGRhdGVaSW5kZXg6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9pbWFnZSAmJiB0aGlzLm9wdGlvbnMuekluZGV4ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vcHRpb25zLnpJbmRleCAhPT0gbnVsbCkgewogIAkJCXRoaXMuX2ltYWdlLnN0eWxlLnpJbmRleCA9IHRoaXMub3B0aW9ucy56SW5kZXg7CiAgCQl9CiAgCX0sCgogIAlfb3ZlcmxheU9uRXJyb3I6IGZ1bmN0aW9uICgpIHsKICAJCS8vIEBldmVudCBlcnJvcjogRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gdGhlIEltYWdlT3ZlcmxheSBsYXllciBmYWlscyB0byBsb2FkIGl0cyBpbWFnZQogIAkJdGhpcy5maXJlKCdlcnJvcicpOwoKICAJCXZhciBlcnJvclVybCA9IHRoaXMub3B0aW9ucy5lcnJvck92ZXJsYXlVcmw7CiAgCQlpZiAoZXJyb3JVcmwgJiYgdGhpcy5fdXJsICE9PSBlcnJvclVybCkgewogIAkJCXRoaXMuX3VybCA9IGVycm9yVXJsOwogIAkJCXRoaXMuX2ltYWdlLnNyYyA9IGVycm9yVXJsOwogIAkJfQogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRDZW50ZXIoKTogTGF0TG5nCiAgCS8vIFJldHVybnMgdGhlIGNlbnRlciBvZiB0aGUgSW1hZ2VPdmVybGF5LgogIAlnZXRDZW50ZXI6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9ib3VuZHMuZ2V0Q2VudGVyKCk7CiAgCX0KICB9KTsKCiAgLy8gQGZhY3RvcnkgTC5pbWFnZU92ZXJsYXkoaW1hZ2VVcmw6IFN0cmluZywgYm91bmRzOiBMYXRMbmdCb3VuZHMsIG9wdGlvbnM/OiBJbWFnZU92ZXJsYXkgb3B0aW9ucykKICAvLyBJbnN0YW50aWF0ZXMgYW4gaW1hZ2Ugb3ZlcmxheSBvYmplY3QgZ2l2ZW4gdGhlIFVSTCBvZiB0aGUgaW1hZ2UgYW5kIHRoZQogIC8vIGdlb2dyYXBoaWNhbCBib3VuZHMgaXQgaXMgdGllZCB0by4KICB2YXIgaW1hZ2VPdmVybGF5ID0gZnVuY3Rpb24gKHVybCwgYm91bmRzLCBvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgSW1hZ2VPdmVybGF5KHVybCwgYm91bmRzLCBvcHRpb25zKTsKICB9OwoKICAvKgogICAqIEBjbGFzcyBWaWRlb092ZXJsYXkKICAgKiBAYWthIEwuVmlkZW9PdmVybGF5CiAgICogQGluaGVyaXRzIEltYWdlT3ZlcmxheQogICAqCiAgICogVXNlZCB0byBsb2FkIGFuZCBkaXNwbGF5IGEgdmlkZW8gcGxheWVyIG92ZXIgc3BlY2lmaWMgYm91bmRzIG9mIHRoZSBtYXAuIEV4dGVuZHMgYEltYWdlT3ZlcmxheWAuCiAgICoKICAgKiBBIHZpZGVvIG92ZXJsYXkgdXNlcyB0aGUgW2A8dmlkZW8+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRNTC9FbGVtZW50L3ZpZGVvKQogICAqIEhUTUw1IGVsZW1lbnQuCiAgICoKICAgKiBAZXhhbXBsZQogICAqCiAgICogYGBganMKICAgKiB2YXIgdmlkZW9VcmwgPSAnaHR0cHM6Ly93d3cubWFwYm94LmNvbS9iaXRlcy8wMDE4OC9wYXRyaWNpYV9uYXNhLndlYm0nLAogICAqIAl2aWRlb0JvdW5kcyA9IFtbIDMyLCAtMTMwXSwgWyAxMywgLTEwMF1dOwogICAqIEwudmlkZW9PdmVybGF5KHZpZGVvVXJsLCB2aWRlb0JvdW5kcyApLmFkZFRvKG1hcCk7CiAgICogYGBgCiAgICovCgogIHZhciBWaWRlb092ZXJsYXkgPSBJbWFnZU92ZXJsYXkuZXh0ZW5kKHsKCiAgCS8vIEBzZWN0aW9uCiAgCS8vIEBha2EgVmlkZW9PdmVybGF5IG9wdGlvbnMKICAJb3B0aW9uczogewogIAkJLy8gQG9wdGlvbiBhdXRvcGxheTogQm9vbGVhbiA9IHRydWUKICAJCS8vIFdoZXRoZXIgdGhlIHZpZGVvIHN0YXJ0cyBwbGF5aW5nIGF1dG9tYXRpY2FsbHkgd2hlbiBsb2FkZWQuCiAgCQkvLyBPbiBzb21lIGJyb3dzZXJzIGF1dG9wbGF5IHdpbGwgb25seSB3b3JrIHdpdGggYG11dGVkOiB0cnVlYAogIAkJYXV0b3BsYXk6IHRydWUsCgogIAkJLy8gQG9wdGlvbiBsb29wOiBCb29sZWFuID0gdHJ1ZQogIAkJLy8gV2hldGhlciB0aGUgdmlkZW8gd2lsbCBsb29wIGJhY2sgdG8gdGhlIGJlZ2lubmluZyB3aGVuIHBsYXllZC4KICAJCWxvb3A6IHRydWUsCgogIAkJLy8gQG9wdGlvbiBrZWVwQXNwZWN0UmF0aW86IEJvb2xlYW4gPSB0cnVlCiAgCQkvLyBXaGV0aGVyIHRoZSB2aWRlbyB3aWxsIHNhdmUgYXNwZWN0IHJhdGlvIGFmdGVyIHRoZSBwcm9qZWN0aW9uLgogIAkJLy8gUmVsZXZhbnQgZm9yIHN1cHBvcnRlZCBicm93c2Vycy4gU2VlIFticm93c2VyIGNvbXBhdGliaWxpdHldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9vYmplY3QtZml0KQogIAkJa2VlcEFzcGVjdFJhdGlvOiB0cnVlLAoKICAJCS8vIEBvcHRpb24gbXV0ZWQ6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gV2hldGhlciB0aGUgdmlkZW8gc3RhcnRzIG9uIG11dGUgd2hlbiBsb2FkZWQuCiAgCQltdXRlZDogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBwbGF5c0lubGluZTogQm9vbGVhbiA9IHRydWUKICAJCS8vIE1vYmlsZSBicm93c2VycyB3aWxsIHBsYXkgdGhlIHZpZGVvIHJpZ2h0IHdoZXJlIGl0IGlzIGluc3RlYWQgb2Ygb3BlbiBpdCB1cCBpbiBmdWxsc2NyZWVuIG1vZGUuCiAgCQlwbGF5c0lubGluZTogdHJ1ZQogIAl9LAoKICAJX2luaXRJbWFnZTogZnVuY3Rpb24gKCkgewogIAkJdmFyIHdhc0VsZW1lbnRTdXBwbGllZCA9IHRoaXMuX3VybC50YWdOYW1lID09PSAnVklERU8nOwogIAkJdmFyIHZpZCA9IHRoaXMuX2ltYWdlID0gd2FzRWxlbWVudFN1cHBsaWVkID8gdGhpcy5fdXJsIDogY3JlYXRlJDEoJ3ZpZGVvJyk7CgogIAkJYWRkQ2xhc3ModmlkLCAnbGVhZmxldC1pbWFnZS1sYXllcicpOwogIAkJaWYgKHRoaXMuX3pvb21BbmltYXRlZCkgeyBhZGRDbGFzcyh2aWQsICdsZWFmbGV0LXpvb20tYW5pbWF0ZWQnKTsgfQogIAkJaWYgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpIHsgYWRkQ2xhc3ModmlkLCB0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKTsgfQoKICAJCXZpZC5vbnNlbGVjdHN0YXJ0ID0gZmFsc2VGbjsKICAJCXZpZC5vbm1vdXNlbW92ZSA9IGZhbHNlRm47CgogIAkJLy8gQGV2ZW50IGxvYWQ6IEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIHRoZSB2aWRlbyBoYXMgZmluaXNoZWQgbG9hZGluZyB0aGUgZmlyc3QgZnJhbWUKICAJCXZpZC5vbmxvYWRlZGRhdGEgPSBiaW5kKHRoaXMuZmlyZSwgdGhpcywgJ2xvYWQnKTsKCiAgCQlpZiAod2FzRWxlbWVudFN1cHBsaWVkKSB7CiAgCQkJdmFyIHNvdXJjZUVsZW1lbnRzID0gdmlkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKTsKICAJCQl2YXIgc291cmNlcyA9IFtdOwogIAkJCWZvciAodmFyIGogPSAwOyBqIDwgc291cmNlRWxlbWVudHMubGVuZ3RoOyBqKyspIHsKICAJCQkJc291cmNlcy5wdXNoKHNvdXJjZUVsZW1lbnRzW2pdLnNyYyk7CiAgCQkJfQoKICAJCQl0aGlzLl91cmwgPSAoc291cmNlRWxlbWVudHMubGVuZ3RoID4gMCkgPyBzb3VyY2VzIDogW3ZpZC5zcmNdOwogIAkJCXJldHVybjsKICAJCX0KCiAgCQlpZiAoIWlzQXJyYXkodGhpcy5fdXJsKSkgeyB0aGlzLl91cmwgPSBbdGhpcy5fdXJsXTsgfQoKICAJCWlmICghdGhpcy5vcHRpb25zLmtlZXBBc3BlY3RSYXRpbyAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmlkLnN0eWxlLCAnb2JqZWN0Rml0JykpIHsKICAJCQl2aWQuc3R5bGVbJ29iamVjdEZpdCddID0gJ2ZpbGwnOwogIAkJfQogIAkJdmlkLmF1dG9wbGF5ID0gISF0aGlzLm9wdGlvbnMuYXV0b3BsYXk7CiAgCQl2aWQubG9vcCA9ICEhdGhpcy5vcHRpb25zLmxvb3A7CiAgCQl2aWQubXV0ZWQgPSAhIXRoaXMub3B0aW9ucy5tdXRlZDsKICAJCXZpZC5wbGF5c0lubGluZSA9ICEhdGhpcy5vcHRpb25zLnBsYXlzSW5saW5lOwogIAkJZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl91cmwubGVuZ3RoOyBpKyspIHsKICAJCQl2YXIgc291cmNlID0gY3JlYXRlJDEoJ3NvdXJjZScpOwogIAkJCXNvdXJjZS5zcmMgPSB0aGlzLl91cmxbaV07CiAgCQkJdmlkLmFwcGVuZENoaWxkKHNvdXJjZSk7CiAgCQl9CiAgCX0KCiAgCS8vIEBtZXRob2QgZ2V0RWxlbWVudCgpOiBIVE1MVmlkZW9FbGVtZW50CiAgCS8vIFJldHVybnMgdGhlIGluc3RhbmNlIG9mIFtgSFRNTFZpZGVvRWxlbWVudGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9IVE1MVmlkZW9FbGVtZW50KQogIAkvLyB1c2VkIGJ5IHRoaXMgb3ZlcmxheS4KICB9KTsKCgogIC8vIEBmYWN0b3J5IEwudmlkZW9PdmVybGF5KHZpZGVvOiBTdHJpbmd8QXJyYXl8SFRNTFZpZGVvRWxlbWVudCwgYm91bmRzOiBMYXRMbmdCb3VuZHMsIG9wdGlvbnM/OiBWaWRlb092ZXJsYXkgb3B0aW9ucykKICAvLyBJbnN0YW50aWF0ZXMgYW4gaW1hZ2Ugb3ZlcmxheSBvYmplY3QgZ2l2ZW4gdGhlIFVSTCBvZiB0aGUgdmlkZW8gKG9yIGFycmF5IG9mIFVSTHMsIG9yIGV2ZW4gYSB2aWRlbyBlbGVtZW50KSBhbmQgdGhlCiAgLy8gZ2VvZ3JhcGhpY2FsIGJvdW5kcyBpdCBpcyB0aWVkIHRvLgoKICBmdW5jdGlvbiB2aWRlb092ZXJsYXkodmlkZW8sIGJvdW5kcywgb3B0aW9ucykgewogIAlyZXR1cm4gbmV3IFZpZGVvT3ZlcmxheSh2aWRlbywgYm91bmRzLCBvcHRpb25zKTsKICB9CgogIC8qCiAgICogQGNsYXNzIFNWR092ZXJsYXkKICAgKiBAYWthIEwuU1ZHT3ZlcmxheQogICAqIEBpbmhlcml0cyBJbWFnZU92ZXJsYXkKICAgKgogICAqIFVzZWQgdG8gbG9hZCwgZGlzcGxheSBhbmQgcHJvdmlkZSBET00gYWNjZXNzIHRvIGFuIFNWRyBmaWxlIG92ZXIgc3BlY2lmaWMgYm91bmRzIG9mIHRoZSBtYXAuIEV4dGVuZHMgYEltYWdlT3ZlcmxheWAuCiAgICoKICAgKiBBbiBTVkcgb3ZlcmxheSB1c2VzIHRoZSBbYDxzdmc+YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvU1ZHL0VsZW1lbnQvc3ZnKSBlbGVtZW50LgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogdmFyIHN2Z0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwgInN2ZyIpOwogICAqIHN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd4bWxucycsICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIpOwogICAqIHN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgIjAgMCAyMDAgMjAwIik7CiAgICogc3ZnRWxlbWVudC5pbm5lckhUTUwgPSAnPHJlY3Qgd2lkdGg9IjIwMCIgaGVpZ2h0PSIyMDAiLz48cmVjdCB4PSI3NSIgeT0iMjMiIHdpZHRoPSI1MCIgaGVpZ2h0PSI1MCIgc3R5bGU9ImZpbGw6cmVkIi8+PHJlY3QgeD0iNzUiIHk9IjEyMyIgd2lkdGg9IjUwIiBoZWlnaHQ9IjUwIiBzdHlsZT0iZmlsbDojMDAxM2ZmIi8+JzsKICAgKiB2YXIgc3ZnRWxlbWVudEJvdW5kcyA9IFsgWyAzMiwgLTEzMCBdLCBbIDEzLCAtMTAwIF0gXTsKICAgKiBMLnN2Z092ZXJsYXkoc3ZnRWxlbWVudCwgc3ZnRWxlbWVudEJvdW5kcykuYWRkVG8obWFwKTsKICAgKiBgYGAKICAgKi8KCiAgdmFyIFNWR092ZXJsYXkgPSBJbWFnZU92ZXJsYXkuZXh0ZW5kKHsKICAJX2luaXRJbWFnZTogZnVuY3Rpb24gKCkgewogIAkJdmFyIGVsID0gdGhpcy5faW1hZ2UgPSB0aGlzLl91cmw7CgogIAkJYWRkQ2xhc3MoZWwsICdsZWFmbGV0LWltYWdlLWxheWVyJyk7CiAgCQlpZiAodGhpcy5fem9vbUFuaW1hdGVkKSB7IGFkZENsYXNzKGVsLCAnbGVhZmxldC16b29tLWFuaW1hdGVkJyk7IH0KICAJCWlmICh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKSB7IGFkZENsYXNzKGVsLCB0aGlzLm9wdGlvbnMuY2xhc3NOYW1lKTsgfQoKICAJCWVsLm9uc2VsZWN0c3RhcnQgPSBmYWxzZUZuOwogIAkJZWwub25tb3VzZW1vdmUgPSBmYWxzZUZuOwogIAl9CgogIAkvLyBAbWV0aG9kIGdldEVsZW1lbnQoKTogU1ZHRWxlbWVudAogIAkvLyBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiBbYFNWR0VsZW1lbnRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvU1ZHRWxlbWVudCkKICAJLy8gdXNlZCBieSB0aGlzIG92ZXJsYXkuCiAgfSk7CgoKICAvLyBAZmFjdG9yeSBMLnN2Z092ZXJsYXkoc3ZnOiBTdHJpbmd8U1ZHRWxlbWVudCwgYm91bmRzOiBMYXRMbmdCb3VuZHMsIG9wdGlvbnM/OiBTVkdPdmVybGF5IG9wdGlvbnMpCiAgLy8gSW5zdGFudGlhdGVzIGFuIGltYWdlIG92ZXJsYXkgb2JqZWN0IGdpdmVuIGFuIFNWRyBlbGVtZW50IGFuZCB0aGUgZ2VvZ3JhcGhpY2FsIGJvdW5kcyBpdCBpcyB0aWVkIHRvLgogIC8vIEEgdmlld0JveCBhdHRyaWJ1dGUgaXMgcmVxdWlyZWQgb24gdGhlIFNWRyBlbGVtZW50IHRvIHpvb20gaW4gYW5kIG91dCBwcm9wZXJseS4KCiAgZnVuY3Rpb24gc3ZnT3ZlcmxheShlbCwgYm91bmRzLCBvcHRpb25zKSB7CiAgCXJldHVybiBuZXcgU1ZHT3ZlcmxheShlbCwgYm91bmRzLCBvcHRpb25zKTsKICB9CgogIC8qCiAgICogQGNsYXNzIERpdk92ZXJsYXkKICAgKiBAaW5oZXJpdHMgSW50ZXJhY3RpdmUgbGF5ZXIKICAgKiBAYWthIEwuRGl2T3ZlcmxheQogICAqIEJhc2UgbW9kZWwgZm9yIEwuUG9wdXAgYW5kIEwuVG9vbHRpcC4gSW5oZXJpdCBmcm9tIGl0IGZvciBjdXN0b20gb3ZlcmxheXMgbGlrZSBwbHVnaW5zLgogICAqLwoKICAvLyBAbmFtZXNwYWNlIERpdk92ZXJsYXkKICB2YXIgRGl2T3ZlcmxheSA9IExheWVyLmV4dGVuZCh7CgogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIERpdk92ZXJsYXkgb3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQkvLyBAb3B0aW9uIGludGVyYWN0aXZlOiBCb29sZWFuID0gZmFsc2UKICAJCS8vIElmIHRydWUsIHRoZSBwb3B1cC90b29sdGlwIHdpbGwgbGlzdGVuIHRvIHRoZSBtb3VzZSBldmVudHMuCiAgCQlpbnRlcmFjdGl2ZTogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBvZmZzZXQ6IFBvaW50ID0gUG9pbnQoMCwgMCkKICAJCS8vIFRoZSBvZmZzZXQgb2YgdGhlIG92ZXJsYXkgcG9zaXRpb24uCiAgCQlvZmZzZXQ6IFswLCAwXSwKCiAgCQkvLyBAb3B0aW9uIGNsYXNzTmFtZTogU3RyaW5nID0gJycKICAJCS8vIEEgY3VzdG9tIENTUyBjbGFzcyBuYW1lIHRvIGFzc2lnbiB0byB0aGUgb3ZlcmxheS4KICAJCWNsYXNzTmFtZTogJycsCgogIAkJLy8gQG9wdGlvbiBwYW5lOiBTdHJpbmcgPSB1bmRlZmluZWQKICAJCS8vIGBNYXAgcGFuZWAgd2hlcmUgdGhlIG92ZXJsYXkgd2lsbCBiZSBhZGRlZC4KICAJCXBhbmU6IHVuZGVmaW5lZAogIAl9LAoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKCiAgCQl0aGlzLl9zb3VyY2UgPSBzb3VyY2U7CiAgCX0sCgogIAkvLyBAbWV0aG9kIG9wZW5PbihtYXA6IE1hcCk6IHRoaXMKICAJLy8gQWRkcyB0aGUgb3ZlcmxheSB0byB0aGUgbWFwLgogIAkvLyBBbHRlcm5hdGl2ZSB0byBgbWFwLm9wZW5Qb3B1cChwb3B1cClgL2Aub3BlblRvb2x0aXAodG9vbHRpcClgLgogIAlvcGVuT246IGZ1bmN0aW9uIChtYXApIHsKICAJCW1hcCA9IGFyZ3VtZW50cy5sZW5ndGggPyBtYXAgOiB0aGlzLl9zb3VyY2UuX21hcDsgLy8gZXhwZXJpbWVudGFsLCBub3QgdGhlIHBhcnQgb2YgcHVibGljIGFwaQogIAkJaWYgKCFtYXAuaGFzTGF5ZXIodGhpcykpIHsKICAJCQltYXAuYWRkTGF5ZXIodGhpcyk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgY2xvc2UoKTogdGhpcwogIAkvLyBDbG9zZXMgdGhlIG92ZXJsYXkuCiAgCS8vIEFsdGVybmF0aXZlIHRvIGBtYXAuY2xvc2VQb3B1cChwb3B1cClgL2AuY2xvc2VUb29sdGlwKHRvb2x0aXApYAogIAkvLyBhbmQgYGxheWVyLmNsb3NlUG9wdXAoKWAvYC5jbG9zZVRvb2x0aXAoKWAuCiAgCWNsb3NlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fbWFwKSB7CiAgCQkJdGhpcy5fbWFwLnJlbW92ZUxheWVyKHRoaXMpOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHRvZ2dsZShsYXllcj86IExheWVyKTogdGhpcwogIAkvLyBPcGVucyBvciBjbG9zZXMgdGhlIG92ZXJsYXkgYm91bmQgdG8gbGF5ZXIgZGVwZW5kaW5nIG9uIGl0cyBjdXJyZW50IHN0YXRlLgogIAkvLyBBcmd1bWVudCBtYXkgYmUgb21pdHRlZCBvbmx5IGZvciBvdmVybGF5IGJvdW5kIHRvIGxheWVyLgogIAkvLyBBbHRlcm5hdGl2ZSB0byBgbGF5ZXIudG9nZ2xlUG9wdXAoKWAvYC50b2dnbGVUb29sdGlwKClgLgogIAl0b2dnbGU6IGZ1bmN0aW9uIChsYXllcikgewogIAkJaWYgKHRoaXMuX21hcCkgewogIAkJCXRoaXMuY2xvc2UoKTsKICAJCX0gZWxzZSB7CiAgCQkJaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHsKICAJCQkJdGhpcy5fc291cmNlID0gbGF5ZXI7CiAgCQkJfSBlbHNlIHsKICAJCQkJbGF5ZXIgPSB0aGlzLl9zb3VyY2U7CiAgCQkJfQogIAkJCXRoaXMuX3ByZXBhcmVPcGVuKCk7CgogIAkJCS8vIG9wZW4gdGhlIG92ZXJsYXkgb24gdGhlIG1hcAogIAkJCXRoaXMub3Blbk9uKGxheWVyLl9tYXApOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAlvbkFkZDogZnVuY3Rpb24gKG1hcCkgewogIAkJdGhpcy5fem9vbUFuaW1hdGVkID0gbWFwLl96b29tQW5pbWF0ZWQ7CgogIAkJaWYgKCF0aGlzLl9jb250YWluZXIpIHsKICAJCQl0aGlzLl9pbml0TGF5b3V0KCk7CiAgCQl9CgogIAkJaWYgKG1hcC5fZmFkZUFuaW1hdGVkKSB7CiAgCQkJc2V0T3BhY2l0eSh0aGlzLl9jb250YWluZXIsIDApOwogIAkJfQoKICAJCWNsZWFyVGltZW91dCh0aGlzLl9yZW1vdmVUaW1lb3V0KTsKICAJCXRoaXMuZ2V0UGFuZSgpLmFwcGVuZENoaWxkKHRoaXMuX2NvbnRhaW5lcik7CiAgCQl0aGlzLnVwZGF0ZSgpOwoKICAJCWlmIChtYXAuX2ZhZGVBbmltYXRlZCkgewogIAkJCXNldE9wYWNpdHkodGhpcy5fY29udGFpbmVyLCAxKTsKICAJCX0KCiAgCQl0aGlzLmJyaW5nVG9Gcm9udCgpOwoKICAJCWlmICh0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUpIHsKICAJCQlhZGRDbGFzcyh0aGlzLl9jb250YWluZXIsICdsZWFmbGV0LWludGVyYWN0aXZlJyk7CiAgCQkJdGhpcy5hZGRJbnRlcmFjdGl2ZVRhcmdldCh0aGlzLl9jb250YWluZXIpOwogIAkJfQogIAl9LAoKICAJb25SZW1vdmU6IGZ1bmN0aW9uIChtYXApIHsKICAJCWlmIChtYXAuX2ZhZGVBbmltYXRlZCkgewogIAkJCXNldE9wYWNpdHkodGhpcy5fY29udGFpbmVyLCAwKTsKICAJCQl0aGlzLl9yZW1vdmVUaW1lb3V0ID0gc2V0VGltZW91dChiaW5kKHJlbW92ZSwgdW5kZWZpbmVkLCB0aGlzLl9jb250YWluZXIpLCAyMDApOwogIAkJfSBlbHNlIHsKICAJCQlyZW1vdmUodGhpcy5fY29udGFpbmVyKTsKICAJCX0KCiAgCQlpZiAodGhpcy5vcHRpb25zLmludGVyYWN0aXZlKSB7CiAgCQkJcmVtb3ZlQ2xhc3ModGhpcy5fY29udGFpbmVyLCAnbGVhZmxldC1pbnRlcmFjdGl2ZScpOwogIAkJCXRoaXMucmVtb3ZlSW50ZXJhY3RpdmVUYXJnZXQodGhpcy5fY29udGFpbmVyKTsKICAJCX0KICAJfSwKCiAgCS8vIEBuYW1lc3BhY2UgRGl2T3ZlcmxheQogIAkvLyBAbWV0aG9kIGdldExhdExuZzogTGF0TG5nCiAgCS8vIFJldHVybnMgdGhlIGdlb2dyYXBoaWNhbCBwb2ludCBvZiB0aGUgb3ZlcmxheS4KICAJZ2V0TGF0TG5nOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbGF0bG5nOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRMYXRMbmcobGF0bG5nOiBMYXRMbmcpOiB0aGlzCiAgCS8vIFNldHMgdGhlIGdlb2dyYXBoaWNhbCBwb2ludCB3aGVyZSB0aGUgb3ZlcmxheSB3aWxsIG9wZW4uCiAgCXNldExhdExuZzogZnVuY3Rpb24gKGxhdGxuZykgewogIAkJdGhpcy5fbGF0bG5nID0gdG9MYXRMbmcobGF0bG5nKTsKICAJCWlmICh0aGlzLl9tYXApIHsKICAJCQl0aGlzLl91cGRhdGVQb3NpdGlvbigpOwogIAkJCXRoaXMuX2FkanVzdFBhbigpOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGdldENvbnRlbnQ6IFN0cmluZ3xIVE1MRWxlbWVudAogIAkvLyBSZXR1cm5zIHRoZSBjb250ZW50IG9mIHRoZSBvdmVybGF5LgogIAlnZXRDb250ZW50OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fY29udGVudDsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0Q29udGVudChodG1sQ29udGVudDogU3RyaW5nfEhUTUxFbGVtZW50fEZ1bmN0aW9uKTogdGhpcwogIAkvLyBTZXRzIHRoZSBIVE1MIGNvbnRlbnQgb2YgdGhlIG92ZXJsYXkuIElmIGEgZnVuY3Rpb24gaXMgcGFzc2VkIHRoZSBzb3VyY2UgbGF5ZXIgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uLgogIAkvLyBUaGUgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGBTdHJpbmdgIG9yIGBIVE1MRWxlbWVudGAgdG8gYmUgdXNlZCBpbiB0aGUgb3ZlcmxheS4KICAJc2V0Q29udGVudDogZnVuY3Rpb24gKGNvbnRlbnQpIHsKICAJCXRoaXMuX2NvbnRlbnQgPSBjb250ZW50OwogIAkJdGhpcy51cGRhdGUoKTsKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRFbGVtZW50OiBTdHJpbmd8SFRNTEVsZW1lbnQKICAJLy8gUmV0dXJucyB0aGUgSFRNTCBjb250YWluZXIgb2YgdGhlIG92ZXJsYXkuCiAgCWdldEVsZW1lbnQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9jb250YWluZXI7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHVwZGF0ZTogbnVsbAogIAkvLyBVcGRhdGVzIHRoZSBvdmVybGF5IGNvbnRlbnQsIGxheW91dCBhbmQgcG9zaXRpb24uIFVzZWZ1bCBmb3IgdXBkYXRpbmcgdGhlIG92ZXJsYXkgYWZ0ZXIgc29tZXRoaW5nIGluc2lkZSBjaGFuZ2VkLCBlLmcuIGltYWdlIGxvYWRlZC4KICAJdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX21hcCkgeyByZXR1cm47IH0KCiAgCQl0aGlzLl9jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nOwoKICAJCXRoaXMuX3VwZGF0ZUNvbnRlbnQoKTsKICAJCXRoaXMuX3VwZGF0ZUxheW91dCgpOwogIAkJdGhpcy5fdXBkYXRlUG9zaXRpb24oKTsKCiAgCQl0aGlzLl9jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICcnOwoKICAJCXRoaXMuX2FkanVzdFBhbigpOwogIAl9LAoKICAJZ2V0RXZlbnRzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgZXZlbnRzID0gewogIAkJCXpvb206IHRoaXMuX3VwZGF0ZVBvc2l0aW9uLAogIAkJCXZpZXdyZXNldDogdGhpcy5fdXBkYXRlUG9zaXRpb24KICAJCX07CgogIAkJaWYgKHRoaXMuX3pvb21BbmltYXRlZCkgewogIAkJCWV2ZW50cy56b29tYW5pbSA9IHRoaXMuX2FuaW1hdGVab29tOwogIAkJfQogIAkJcmV0dXJuIGV2ZW50czsKICAJfSwKCiAgCS8vIEBtZXRob2QgaXNPcGVuOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIHdoZW4gdGhlIG92ZXJsYXkgaXMgdmlzaWJsZSBvbiB0aGUgbWFwLgogIAlpc09wZW46IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiAhIXRoaXMuX21hcCAmJiB0aGlzLl9tYXAuaGFzTGF5ZXIodGhpcyk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGJyaW5nVG9Gcm9udDogdGhpcwogIAkvLyBCcmluZ3MgdGhpcyBvdmVybGF5IGluIGZyb250IG9mIG90aGVyIG92ZXJsYXlzIChpbiB0aGUgc2FtZSBtYXAgcGFuZSkuCiAgCWJyaW5nVG9Gcm9udDogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX21hcCkgewogIAkJCXRvRnJvbnQodGhpcy5fY29udGFpbmVyKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBicmluZ1RvQmFjazogdGhpcwogIAkvLyBCcmluZ3MgdGhpcyBvdmVybGF5IHRvIHRoZSBiYWNrIG9mIG90aGVyIG92ZXJsYXlzIChpbiB0aGUgc2FtZSBtYXAgcGFuZSkuCiAgCWJyaW5nVG9CYWNrOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fbWFwKSB7CiAgCQkJdG9CYWNrKHRoaXMuX2NvbnRhaW5lcik7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIHByZXBhcmUgYm91bmQgb3ZlcmxheSB0byBvcGVuOiB1cGRhdGUgbGF0bG5nIHBvcyAvIGNvbnRlbnQgc291cmNlIChmb3IgRmVhdHVyZUdyb3VwKQogIAlfcHJlcGFyZU9wZW46IGZ1bmN0aW9uIChsYXRsbmcpIHsKICAJCXZhciBzb3VyY2UgPSB0aGlzLl9zb3VyY2U7CiAgCQlpZiAoIXNvdXJjZS5fbWFwKSB7IHJldHVybiBmYWxzZTsgfQoKICAJCWlmIChzb3VyY2UgaW5zdGFuY2VvZiBGZWF0dXJlR3JvdXApIHsKICAJCQlzb3VyY2UgPSBudWxsOwogIAkJCXZhciBsYXllcnMgPSB0aGlzLl9zb3VyY2UuX2xheWVyczsKICAJCQlmb3IgKHZhciBpZCBpbiBsYXllcnMpIHsKICAJCQkJaWYgKGxheWVyc1tpZF0uX21hcCkgewogIAkJCQkJc291cmNlID0gbGF5ZXJzW2lkXTsKICAJCQkJCWJyZWFrOwogIAkJCQl9CiAgCQkJfQogIAkJCWlmICghc291cmNlKSB7IHJldHVybiBmYWxzZTsgfSAvLyBVbmFibGUgdG8gZ2V0IHNvdXJjZSBsYXllci4KCiAgCQkJLy8gc2V0IG92ZXJsYXkgc291cmNlIHRvIHRoaXMgbGF5ZXIKICAJCQl0aGlzLl9zb3VyY2UgPSBzb3VyY2U7CiAgCQl9CgogIAkJaWYgKCFsYXRsbmcpIHsKICAJCQlpZiAoc291cmNlLmdldENlbnRlcikgewogIAkJCQlsYXRsbmcgPSBzb3VyY2UuZ2V0Q2VudGVyKCk7CiAgCQkJfSBlbHNlIGlmIChzb3VyY2UuZ2V0TGF0TG5nKSB7CiAgCQkJCWxhdGxuZyA9IHNvdXJjZS5nZXRMYXRMbmcoKTsKICAJCQl9IGVsc2UgaWYgKHNvdXJjZS5nZXRCb3VuZHMpIHsKICAJCQkJbGF0bG5nID0gc291cmNlLmdldEJvdW5kcygpLmdldENlbnRlcigpOwogIAkJCX0gZWxzZSB7CiAgCQkJCXRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGdldCBzb3VyY2UgbGF5ZXIgTGF0TG5nLicpOwogIAkJCX0KICAJCX0KICAJCXRoaXMuc2V0TGF0TG5nKGxhdGxuZyk7CgogIAkJaWYgKHRoaXMuX21hcCkgewogIAkJCS8vIHVwZGF0ZSB0aGUgb3ZlcmxheSAoY29udGVudCwgbGF5b3V0LCBldGMuLi4pCiAgCQkJdGhpcy51cGRhdGUoKTsKICAJCX0KCiAgCQlyZXR1cm4gdHJ1ZTsKICAJfSwKCiAgCV91cGRhdGVDb250ZW50OiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX2NvbnRlbnQpIHsgcmV0dXJuOyB9CgogIAkJdmFyIG5vZGUgPSB0aGlzLl9jb250ZW50Tm9kZTsKICAJCXZhciBjb250ZW50ID0gKHR5cGVvZiB0aGlzLl9jb250ZW50ID09PSAnZnVuY3Rpb24nKSA/IHRoaXMuX2NvbnRlbnQodGhpcy5fc291cmNlIHx8IHRoaXMpIDogdGhpcy5fY29udGVudDsKCiAgCQlpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7CiAgCQkJbm9kZS5pbm5lckhUTUwgPSBjb250ZW50OwogIAkJfSBlbHNlIHsKICAJCQl3aGlsZSAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHsKICAJCQkJbm9kZS5yZW1vdmVDaGlsZChub2RlLmZpcnN0Q2hpbGQpOwogIAkJCX0KICAJCQlub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpOwogIAkJfQoKICAJCS8vIEBuYW1lc3BhY2UgRGl2T3ZlcmxheQogIAkJLy8gQHNlY3Rpb24gRGl2T3ZlcmxheSBldmVudHMKICAJCS8vIEBldmVudCBjb250ZW50dXBkYXRlOiBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgY29udGVudCBvZiB0aGUgb3ZlcmxheSBpcyB1cGRhdGVkCiAgCQl0aGlzLmZpcmUoJ2NvbnRlbnR1cGRhdGUnKTsKICAJfSwKCiAgCV91cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9tYXApIHsgcmV0dXJuOyB9CgogIAkJdmFyIHBvcyA9IHRoaXMuX21hcC5sYXRMbmdUb0xheWVyUG9pbnQodGhpcy5fbGF0bG5nKSwKICAJCSAgICBvZmZzZXQgPSB0b1BvaW50KHRoaXMub3B0aW9ucy5vZmZzZXQpLAogIAkJICAgIGFuY2hvciA9IHRoaXMuX2dldEFuY2hvcigpOwoKICAJCWlmICh0aGlzLl96b29tQW5pbWF0ZWQpIHsKICAJCQlzZXRQb3NpdGlvbih0aGlzLl9jb250YWluZXIsIHBvcy5hZGQoYW5jaG9yKSk7CiAgCQl9IGVsc2UgewogIAkJCW9mZnNldCA9IG9mZnNldC5hZGQocG9zKS5hZGQoYW5jaG9yKTsKICAJCX0KCiAgCQl2YXIgYm90dG9tID0gdGhpcy5fY29udGFpbmVyQm90dG9tID0gLW9mZnNldC55LAogIAkJICAgIGxlZnQgPSB0aGlzLl9jb250YWluZXJMZWZ0ID0gLU1hdGgucm91bmQodGhpcy5fY29udGFpbmVyV2lkdGggLyAyKSArIG9mZnNldC54OwoKICAJCS8vIGJvdHRvbSBwb3NpdGlvbiB0aGUgb3ZlcmxheSBpbiBjYXNlIHRoZSBoZWlnaHQgb2YgdGhlIG92ZXJsYXkgY2hhbmdlcyAoaW1hZ2VzIGxvYWRpbmcgZXRjKQogIAkJdGhpcy5fY29udGFpbmVyLnN0eWxlLmJvdHRvbSA9IGJvdHRvbSArICdweCc7CiAgCQl0aGlzLl9jb250YWluZXIuc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnOwogIAl9LAoKICAJX2dldEFuY2hvcjogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIFswLCAwXTsKICAJfQoKICB9KTsKCiAgTWFwLmluY2x1ZGUoewogIAlfaW5pdE92ZXJsYXk6IGZ1bmN0aW9uIChPdmVybGF5Q2xhc3MsIGNvbnRlbnQsIGxhdGxuZywgb3B0aW9ucykgewogIAkJdmFyIG92ZXJsYXkgPSBjb250ZW50OwogIAkJaWYgKCEob3ZlcmxheSBpbnN0YW5jZW9mIE92ZXJsYXlDbGFzcykpIHsKICAJCQlvdmVybGF5ID0gbmV3IE92ZXJsYXlDbGFzcyhvcHRpb25zKS5zZXRDb250ZW50KGNvbnRlbnQpOwogIAkJfQogIAkJaWYgKGxhdGxuZykgewogIAkJCW92ZXJsYXkuc2V0TGF0TG5nKGxhdGxuZyk7CiAgCQl9CiAgCQlyZXR1cm4gb3ZlcmxheTsKICAJfQogIH0pOwoKCiAgTGF5ZXIuaW5jbHVkZSh7CiAgCV9pbml0T3ZlcmxheTogZnVuY3Rpb24gKE92ZXJsYXlDbGFzcywgb2xkLCBjb250ZW50LCBvcHRpb25zKSB7CiAgCQl2YXIgb3ZlcmxheSA9IGNvbnRlbnQ7CiAgCQlpZiAob3ZlcmxheSBpbnN0YW5jZW9mIE92ZXJsYXlDbGFzcykgewogIAkJCXNldE9wdGlvbnMob3ZlcmxheSwgb3B0aW9ucyk7CiAgCQkJb3ZlcmxheS5fc291cmNlID0gdGhpczsKICAJCX0gZWxzZSB7CiAgCQkJb3ZlcmxheSA9IChvbGQgJiYgIW9wdGlvbnMpID8gb2xkIDogbmV3IE92ZXJsYXlDbGFzcyhvcHRpb25zLCB0aGlzKTsKICAJCQlvdmVybGF5LnNldENvbnRlbnQoY29udGVudCk7CiAgCQl9CiAgCQlyZXR1cm4gb3ZlcmxheTsKICAJfQogIH0pOwoKICAvKgogICAqIEBjbGFzcyBQb3B1cAogICAqIEBpbmhlcml0cyBEaXZPdmVybGF5CiAgICogQGFrYSBMLlBvcHVwCiAgICogVXNlZCB0byBvcGVuIHBvcHVwcyBpbiBjZXJ0YWluIHBsYWNlcyBvZiB0aGUgbWFwLiBVc2UgW01hcC5vcGVuUG9wdXBdKCNtYXAtb3BlbnBvcHVwKSB0bwogICAqIG9wZW4gcG9wdXBzIHdoaWxlIG1ha2luZyBzdXJlIHRoYXQgb25seSBvbmUgcG9wdXAgaXMgb3BlbiBhdCBvbmUgdGltZQogICAqIChyZWNvbW1lbmRlZCBmb3IgdXNhYmlsaXR5KSwgb3IgdXNlIFtNYXAuYWRkTGF5ZXJdKCNtYXAtYWRkbGF5ZXIpIHRvIG9wZW4gYXMgbWFueSBhcyB5b3Ugd2FudC4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBJZiB5b3Ugd2FudCB0byBqdXN0IGJpbmQgYSBwb3B1cCB0byBtYXJrZXIgY2xpY2sgYW5kIHRoZW4gb3BlbiBpdCwgaXQncyByZWFsbHkgZWFzeToKICAgKgogICAqIGBgYGpzCiAgICogbWFya2VyLmJpbmRQb3B1cChwb3B1cENvbnRlbnQpLm9wZW5Qb3B1cCgpOwogICAqIGBgYAogICAqIFBhdGggb3ZlcmxheXMgbGlrZSBwb2x5bGluZXMgYWxzbyBoYXZlIGEgYGJpbmRQb3B1cGAgbWV0aG9kLgogICAqIEhlcmUncyBhIG1vcmUgY29tcGxpY2F0ZWQgd2F5IHRvIG9wZW4gYSBwb3B1cCBvbiBhIG1hcDoKICAgKgogICAqIGBgYGpzCiAgICogdmFyIHBvcHVwID0gTC5wb3B1cCgpCiAgICogCS5zZXRMYXRMbmcobGF0bG5nKQogICAqIAkuc2V0Q29udGVudCgnPHA+SGVsbG8gd29ybGQhPGJyIC8+VGhpcyBpcyBhIG5pY2UgcG9wdXAuPC9wPicpCiAgICogCS5vcGVuT24obWFwKTsKICAgKiBgYGAKICAgKi8KCgogIC8vIEBuYW1lc3BhY2UgUG9wdXAKICB2YXIgUG9wdXAgPSBEaXZPdmVybGF5LmV4dGVuZCh7CgogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIFBvcHVwIG9wdGlvbnMKICAJb3B0aW9uczogewogIAkJLy8gQG9wdGlvbiBwYW5lOiBTdHJpbmcgPSAncG9wdXBQYW5lJwogIAkJLy8gYE1hcCBwYW5lYCB3aGVyZSB0aGUgcG9wdXAgd2lsbCBiZSBhZGRlZC4KICAJCXBhbmU6ICdwb3B1cFBhbmUnLAoKICAJCS8vIEBvcHRpb24gb2Zmc2V0OiBQb2ludCA9IFBvaW50KDAsIDcpCiAgCQkvLyBUaGUgb2Zmc2V0IG9mIHRoZSBwb3B1cCBwb3NpdGlvbi4KICAJCW9mZnNldDogWzAsIDddLAoKICAJCS8vIEBvcHRpb24gbWF4V2lkdGg6IE51bWJlciA9IDMwMAogIAkJLy8gTWF4IHdpZHRoIG9mIHRoZSBwb3B1cCwgaW4gcGl4ZWxzLgogIAkJbWF4V2lkdGg6IDMwMCwKCiAgCQkvLyBAb3B0aW9uIG1pbldpZHRoOiBOdW1iZXIgPSA1MAogIAkJLy8gTWluIHdpZHRoIG9mIHRoZSBwb3B1cCwgaW4gcGl4ZWxzLgogIAkJbWluV2lkdGg6IDUwLAoKICAJCS8vIEBvcHRpb24gbWF4SGVpZ2h0OiBOdW1iZXIgPSBudWxsCiAgCQkvLyBJZiBzZXQsIGNyZWF0ZXMgYSBzY3JvbGxhYmxlIGNvbnRhaW5lciBvZiB0aGUgZ2l2ZW4gaGVpZ2h0CiAgCQkvLyBpbnNpZGUgYSBwb3B1cCBpZiBpdHMgY29udGVudCBleGNlZWRzIGl0LgogIAkJbWF4SGVpZ2h0OiBudWxsLAoKICAJCS8vIEBvcHRpb24gYXV0b1BhbjogQm9vbGVhbiA9IHRydWUKICAJCS8vIFNldCBpdCB0byBgZmFsc2VgIGlmIHlvdSBkb24ndCB3YW50IHRoZSBtYXAgdG8gZG8gcGFubmluZyBhbmltYXRpb24KICAJCS8vIHRvIGZpdCB0aGUgb3BlbmVkIHBvcHVwLgogIAkJYXV0b1BhbjogdHJ1ZSwKCiAgCQkvLyBAb3B0aW9uIGF1dG9QYW5QYWRkaW5nVG9wTGVmdDogUG9pbnQgPSBudWxsCiAgCQkvLyBUaGUgbWFyZ2luIGJldHdlZW4gdGhlIHBvcHVwIGFuZCB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBtYXAKICAJCS8vIHZpZXcgYWZ0ZXIgYXV0b3Bhbm5pbmcgd2FzIHBlcmZvcm1lZC4KICAJCWF1dG9QYW5QYWRkaW5nVG9wTGVmdDogbnVsbCwKCiAgCQkvLyBAb3B0aW9uIGF1dG9QYW5QYWRkaW5nQm90dG9tUmlnaHQ6IFBvaW50ID0gbnVsbAogIAkJLy8gVGhlIG1hcmdpbiBiZXR3ZWVuIHRoZSBwb3B1cCBhbmQgdGhlIGJvdHRvbSByaWdodCBjb3JuZXIgb2YgdGhlIG1hcAogIAkJLy8gdmlldyBhZnRlciBhdXRvcGFubmluZyB3YXMgcGVyZm9ybWVkLgogIAkJYXV0b1BhblBhZGRpbmdCb3R0b21SaWdodDogbnVsbCwKCiAgCQkvLyBAb3B0aW9uIGF1dG9QYW5QYWRkaW5nOiBQb2ludCA9IFBvaW50KDUsIDUpCiAgCQkvLyBFcXVpdmFsZW50IG9mIHNldHRpbmcgYm90aCB0b3AgbGVmdCBhbmQgYm90dG9tIHJpZ2h0IGF1dG9wYW4gcGFkZGluZyB0byB0aGUgc2FtZSB2YWx1ZS4KICAJCWF1dG9QYW5QYWRkaW5nOiBbNSwgNV0sCgogIAkJLy8gQG9wdGlvbiBrZWVwSW5WaWV3OiBCb29sZWFuID0gZmFsc2UKICAJCS8vIFNldCBpdCB0byBgdHJ1ZWAgaWYgeW91IHdhbnQgdG8gcHJldmVudCB1c2VycyBmcm9tIHBhbm5pbmcgdGhlIHBvcHVwCiAgCQkvLyBvZmYgb2YgdGhlIHNjcmVlbiB3aGlsZSBpdCBpcyBvcGVuLgogIAkJa2VlcEluVmlldzogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBjbG9zZUJ1dHRvbjogQm9vbGVhbiA9IHRydWUKICAJCS8vIENvbnRyb2xzIHRoZSBwcmVzZW5jZSBvZiBhIGNsb3NlIGJ1dHRvbiBpbiB0aGUgcG9wdXAuCiAgCQljbG9zZUJ1dHRvbjogdHJ1ZSwKCiAgCQkvLyBAb3B0aW9uIGF1dG9DbG9zZTogQm9vbGVhbiA9IHRydWUKICAJCS8vIFNldCBpdCB0byBgZmFsc2VgIGlmIHlvdSB3YW50IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mCiAgCQkvLyB0aGUgcG9wdXAgY2xvc2luZyB3aGVuIGFub3RoZXIgcG9wdXAgaXMgb3BlbmVkLgogIAkJYXV0b0Nsb3NlOiB0cnVlLAoKICAJCS8vIEBvcHRpb24gY2xvc2VPbkVzY2FwZUtleTogQm9vbGVhbiA9IHRydWUKICAJCS8vIFNldCBpdCB0byBgZmFsc2VgIGlmIHlvdSB3YW50IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mCiAgCQkvLyB0aGUgRVNDIGtleSBmb3IgY2xvc2luZyBvZiB0aGUgcG9wdXAuCiAgCQljbG9zZU9uRXNjYXBlS2V5OiB0cnVlLAoKICAJCS8vIEBvcHRpb24gY2xvc2VPbkNsaWNrOiBCb29sZWFuID0gKgogIAkJLy8gU2V0IGl0IGlmIHlvdSB3YW50IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSBwb3B1cCBjbG9zaW5nIHdoZW4gdXNlciBjbGlja3MKICAJCS8vIG9uIHRoZSBtYXAuIERlZmF1bHRzIHRvIHRoZSBtYXAncyBbYGNsb3NlUG9wdXBPbkNsaWNrYF0oI21hcC1jbG9zZXBvcHVwb25jbGljaykgb3B0aW9uLgoKICAJCS8vIEBvcHRpb24gY2xhc3NOYW1lOiBTdHJpbmcgPSAnJwogIAkJLy8gQSBjdXN0b20gQ1NTIGNsYXNzIG5hbWUgdG8gYXNzaWduIHRvIHRoZSBwb3B1cC4KICAJCWNsYXNzTmFtZTogJycKICAJfSwKCiAgCS8vIEBuYW1lc3BhY2UgUG9wdXAKICAJLy8gQG1ldGhvZCBvcGVuT24obWFwOiBNYXApOiB0aGlzCiAgCS8vIEFsdGVybmF0aXZlIHRvIGBtYXAub3BlblBvcHVwKHBvcHVwKWAuCiAgCS8vIEFkZHMgdGhlIHBvcHVwIHRvIHRoZSBtYXAgYW5kIGNsb3NlcyB0aGUgcHJldmlvdXMgb25lLgogIAlvcGVuT246IGZ1bmN0aW9uIChtYXApIHsKICAJCW1hcCA9IGFyZ3VtZW50cy5sZW5ndGggPyBtYXAgOiB0aGlzLl9zb3VyY2UuX21hcDsgLy8gZXhwZXJpbWVudGFsLCBub3QgdGhlIHBhcnQgb2YgcHVibGljIGFwaQoKICAJCWlmICghbWFwLmhhc0xheWVyKHRoaXMpICYmIG1hcC5fcG9wdXAgJiYgbWFwLl9wb3B1cC5vcHRpb25zLmF1dG9DbG9zZSkgewogIAkJCW1hcC5yZW1vdmVMYXllcihtYXAuX3BvcHVwKTsKICAJCX0KICAJCW1hcC5fcG9wdXAgPSB0aGlzOwoKICAJCXJldHVybiBEaXZPdmVybGF5LnByb3RvdHlwZS5vcGVuT24uY2FsbCh0aGlzLCBtYXApOwogIAl9LAoKICAJb25BZGQ6IGZ1bmN0aW9uIChtYXApIHsKICAJCURpdk92ZXJsYXkucHJvdG90eXBlLm9uQWRkLmNhbGwodGhpcywgbWFwKTsKCiAgCQkvLyBAbmFtZXNwYWNlIE1hcAogIAkJLy8gQHNlY3Rpb24gUG9wdXAgZXZlbnRzCiAgCQkvLyBAZXZlbnQgcG9wdXBvcGVuOiBQb3B1cEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIGEgcG9wdXAgaXMgb3BlbmVkIGluIHRoZSBtYXAKICAJCW1hcC5maXJlKCdwb3B1cG9wZW4nLCB7cG9wdXA6IHRoaXN9KTsKCiAgCQlpZiAodGhpcy5fc291cmNlKSB7CiAgCQkJLy8gQG5hbWVzcGFjZSBMYXllcgogIAkJCS8vIEBzZWN0aW9uIFBvcHVwIGV2ZW50cwogIAkJCS8vIEBldmVudCBwb3B1cG9wZW46IFBvcHVwRXZlbnQKICAJCQkvLyBGaXJlZCB3aGVuIGEgcG9wdXAgYm91bmQgdG8gdGhpcyBsYXllciBpcyBvcGVuZWQKICAJCQl0aGlzLl9zb3VyY2UuZmlyZSgncG9wdXBvcGVuJywge3BvcHVwOiB0aGlzfSwgdHJ1ZSk7CiAgCQkJLy8gRm9yIG5vbi1wYXRoIGxheWVycywgd2UgdG9nZ2xlIHRoZSBwb3B1cCB3aGVuIGNsaWNraW5nCiAgCQkJLy8gYWdhaW4gdGhlIGxheWVyLCBzbyBwcmV2ZW50IHRoZSBtYXAgdG8gcmVvcGVuIGl0LgogIAkJCWlmICghKHRoaXMuX3NvdXJjZSBpbnN0YW5jZW9mIFBhdGgpKSB7CiAgCQkJCXRoaXMuX3NvdXJjZS5vbigncHJlY2xpY2snLCBzdG9wUHJvcGFnYXRpb24pOwogIAkJCX0KICAJCX0KICAJfSwKCiAgCW9uUmVtb3ZlOiBmdW5jdGlvbiAobWFwKSB7CiAgCQlEaXZPdmVybGF5LnByb3RvdHlwZS5vblJlbW92ZS5jYWxsKHRoaXMsIG1hcCk7CgogIAkJLy8gQG5hbWVzcGFjZSBNYXAKICAJCS8vIEBzZWN0aW9uIFBvcHVwIGV2ZW50cwogIAkJLy8gQGV2ZW50IHBvcHVwY2xvc2U6IFBvcHVwRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gYSBwb3B1cCBpbiB0aGUgbWFwIGlzIGNsb3NlZAogIAkJbWFwLmZpcmUoJ3BvcHVwY2xvc2UnLCB7cG9wdXA6IHRoaXN9KTsKCiAgCQlpZiAodGhpcy5fc291cmNlKSB7CiAgCQkJLy8gQG5hbWVzcGFjZSBMYXllcgogIAkJCS8vIEBzZWN0aW9uIFBvcHVwIGV2ZW50cwogIAkJCS8vIEBldmVudCBwb3B1cGNsb3NlOiBQb3B1cEV2ZW50CiAgCQkJLy8gRmlyZWQgd2hlbiBhIHBvcHVwIGJvdW5kIHRvIHRoaXMgbGF5ZXIgaXMgY2xvc2VkCiAgCQkJdGhpcy5fc291cmNlLmZpcmUoJ3BvcHVwY2xvc2UnLCB7cG9wdXA6IHRoaXN9LCB0cnVlKTsKICAJCQlpZiAoISh0aGlzLl9zb3VyY2UgaW5zdGFuY2VvZiBQYXRoKSkgewogIAkJCQl0aGlzLl9zb3VyY2Uub2ZmKCdwcmVjbGljaycsIHN0b3BQcm9wYWdhdGlvbik7CiAgCQkJfQogIAkJfQogIAl9LAoKICAJZ2V0RXZlbnRzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgZXZlbnRzID0gRGl2T3ZlcmxheS5wcm90b3R5cGUuZ2V0RXZlbnRzLmNhbGwodGhpcyk7CgogIAkJaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgIT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgOiB0aGlzLl9tYXAub3B0aW9ucy5jbG9zZVBvcHVwT25DbGljaykgewogIAkJCWV2ZW50cy5wcmVjbGljayA9IHRoaXMuY2xvc2U7CiAgCQl9CgogIAkJaWYgKHRoaXMub3B0aW9ucy5rZWVwSW5WaWV3KSB7CiAgCQkJZXZlbnRzLm1vdmVlbmQgPSB0aGlzLl9hZGp1c3RQYW47CiAgCQl9CgogIAkJcmV0dXJuIGV2ZW50czsKICAJfSwKCiAgCV9pbml0TGF5b3V0OiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgcHJlZml4ID0gJ2xlYWZsZXQtcG9wdXAnLAogIAkJICAgIGNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lciA9IGNyZWF0ZSQxKCdkaXYnLAogIAkJCXByZWZpeCArICcgJyArICh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lIHx8ICcnKSArCiAgCQkJJyBsZWFmbGV0LXpvb20tYW5pbWF0ZWQnKTsKCiAgCQl2YXIgd3JhcHBlciA9IHRoaXMuX3dyYXBwZXIgPSBjcmVhdGUkMSgnZGl2JywgcHJlZml4ICsgJy1jb250ZW50LXdyYXBwZXInLCBjb250YWluZXIpOwogIAkJdGhpcy5fY29udGVudE5vZGUgPSBjcmVhdGUkMSgnZGl2JywgcHJlZml4ICsgJy1jb250ZW50Jywgd3JhcHBlcik7CgogIAkJZGlzYWJsZUNsaWNrUHJvcGFnYXRpb24oY29udGFpbmVyKTsKICAJCWRpc2FibGVTY3JvbGxQcm9wYWdhdGlvbih0aGlzLl9jb250ZW50Tm9kZSk7CiAgCQlvbihjb250YWluZXIsICdjb250ZXh0bWVudScsIHN0b3BQcm9wYWdhdGlvbik7CgogIAkJdGhpcy5fdGlwQ29udGFpbmVyID0gY3JlYXRlJDEoJ2RpdicsIHByZWZpeCArICctdGlwLWNvbnRhaW5lcicsIGNvbnRhaW5lcik7CiAgCQl0aGlzLl90aXAgPSBjcmVhdGUkMSgnZGl2JywgcHJlZml4ICsgJy10aXAnLCB0aGlzLl90aXBDb250YWluZXIpOwoKICAJCWlmICh0aGlzLm9wdGlvbnMuY2xvc2VCdXR0b24pIHsKICAJCQl2YXIgY2xvc2VCdXR0b24gPSB0aGlzLl9jbG9zZUJ1dHRvbiA9IGNyZWF0ZSQxKCdhJywgcHJlZml4ICsgJy1jbG9zZS1idXR0b24nLCBjb250YWluZXIpOwogIAkJCWNsb3NlQnV0dG9uLnNldEF0dHJpYnV0ZSgncm9sZScsICdidXR0b24nKTsgLy8gb3ZlcnJpZGVzIHRoZSBpbXBsaWNpdCByb2xlPWxpbmsgb2YgPGE+IGVsZW1lbnRzICM3Mzk5CiAgCQkJY2xvc2VCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ0Nsb3NlIHBvcHVwJyk7CiAgCQkJY2xvc2VCdXR0b24uaHJlZiA9ICcjY2xvc2UnOwogIAkJCWNsb3NlQnV0dG9uLmlubmVySFRNTCA9ICc8c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+JiMyMTU7PC9zcGFuPic7CgogIAkJCW9uKGNsb3NlQnV0dG9uLCAnY2xpY2snLCB0aGlzLmNsb3NlLCB0aGlzKTsKICAJCX0KICAJfSwKCiAgCV91cGRhdGVMYXlvdXQ6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBjb250YWluZXIgPSB0aGlzLl9jb250ZW50Tm9kZSwKICAJCSAgICBzdHlsZSA9IGNvbnRhaW5lci5zdHlsZTsKCiAgCQlzdHlsZS53aWR0aCA9ICcnOwogIAkJc3R5bGUud2hpdGVTcGFjZSA9ICdub3dyYXAnOwoKICAJCXZhciB3aWR0aCA9IGNvbnRhaW5lci5vZmZzZXRXaWR0aDsKICAJCXdpZHRoID0gTWF0aC5taW4od2lkdGgsIHRoaXMub3B0aW9ucy5tYXhXaWR0aCk7CiAgCQl3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCB0aGlzLm9wdGlvbnMubWluV2lkdGgpOwoKICAJCXN0eWxlLndpZHRoID0gKHdpZHRoICsgMSkgKyAncHgnOwogIAkJc3R5bGUud2hpdGVTcGFjZSA9ICcnOwoKICAJCXN0eWxlLmhlaWdodCA9ICcnOwoKICAJCXZhciBoZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0LAogIAkJICAgIG1heEhlaWdodCA9IHRoaXMub3B0aW9ucy5tYXhIZWlnaHQsCiAgCQkgICAgc2Nyb2xsZWRDbGFzcyA9ICdsZWFmbGV0LXBvcHVwLXNjcm9sbGVkJzsKCiAgCQlpZiAobWF4SGVpZ2h0ICYmIGhlaWdodCA+IG1heEhlaWdodCkgewogIAkJCXN0eWxlLmhlaWdodCA9IG1heEhlaWdodCArICdweCc7CiAgCQkJYWRkQ2xhc3MoY29udGFpbmVyLCBzY3JvbGxlZENsYXNzKTsKICAJCX0gZWxzZSB7CiAgCQkJcmVtb3ZlQ2xhc3MoY29udGFpbmVyLCBzY3JvbGxlZENsYXNzKTsKICAJCX0KCiAgCQl0aGlzLl9jb250YWluZXJXaWR0aCA9IHRoaXMuX2NvbnRhaW5lci5vZmZzZXRXaWR0aDsKICAJfSwKCiAgCV9hbmltYXRlWm9vbTogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBwb3MgPSB0aGlzLl9tYXAuX2xhdExuZ1RvTmV3TGF5ZXJQb2ludCh0aGlzLl9sYXRsbmcsIGUuem9vbSwgZS5jZW50ZXIpLAogIAkJICAgIGFuY2hvciA9IHRoaXMuX2dldEFuY2hvcigpOwogIAkJc2V0UG9zaXRpb24odGhpcy5fY29udGFpbmVyLCBwb3MuYWRkKGFuY2hvcikpOwogIAl9LAoKICAJX2FkanVzdFBhbjogZnVuY3Rpb24gKGUpIHsKICAJCWlmICghdGhpcy5vcHRpb25zLmF1dG9QYW4pIHsgcmV0dXJuOyB9CiAgCQlpZiAodGhpcy5fbWFwLl9wYW5BbmltKSB7IHRoaXMuX21hcC5fcGFuQW5pbS5zdG9wKCk7IH0KCiAgCQl2YXIgbWFwID0gdGhpcy5fbWFwLAogIAkJICAgIG1hcmdpbkJvdHRvbSA9IHBhcnNlSW50KGdldFN0eWxlKHRoaXMuX2NvbnRhaW5lciwgJ21hcmdpbkJvdHRvbScpLCAxMCkgfHwgMCwKICAJCSAgICBjb250YWluZXJIZWlnaHQgPSB0aGlzLl9jb250YWluZXIub2Zmc2V0SGVpZ2h0ICsgbWFyZ2luQm90dG9tLAogIAkJICAgIGNvbnRhaW5lcldpZHRoID0gdGhpcy5fY29udGFpbmVyV2lkdGgsCiAgCQkgICAgbGF5ZXJQb3MgPSBuZXcgUG9pbnQodGhpcy5fY29udGFpbmVyTGVmdCwgLWNvbnRhaW5lckhlaWdodCAtIHRoaXMuX2NvbnRhaW5lckJvdHRvbSk7CgogIAkJbGF5ZXJQb3MuX2FkZChnZXRQb3NpdGlvbih0aGlzLl9jb250YWluZXIpKTsKCiAgCQl2YXIgY29udGFpbmVyUG9zID0gbWFwLmxheWVyUG9pbnRUb0NvbnRhaW5lclBvaW50KGxheWVyUG9zKSwKICAJCSAgICBwYWRkaW5nID0gdG9Qb2ludCh0aGlzLm9wdGlvbnMuYXV0b1BhblBhZGRpbmcpLAogIAkJICAgIHBhZGRpbmdUTCA9IHRvUG9pbnQodGhpcy5vcHRpb25zLmF1dG9QYW5QYWRkaW5nVG9wTGVmdCB8fCBwYWRkaW5nKSwKICAJCSAgICBwYWRkaW5nQlIgPSB0b1BvaW50KHRoaXMub3B0aW9ucy5hdXRvUGFuUGFkZGluZ0JvdHRvbVJpZ2h0IHx8IHBhZGRpbmcpLAogIAkJICAgIHNpemUgPSBtYXAuZ2V0U2l6ZSgpLAogIAkJICAgIGR4ID0gMCwKICAJCSAgICBkeSA9IDA7CgogIAkJaWYgKGNvbnRhaW5lclBvcy54ICsgY29udGFpbmVyV2lkdGggKyBwYWRkaW5nQlIueCA+IHNpemUueCkgeyAvLyByaWdodAogIAkJCWR4ID0gY29udGFpbmVyUG9zLnggKyBjb250YWluZXJXaWR0aCAtIHNpemUueCArIHBhZGRpbmdCUi54OwogIAkJfQogIAkJaWYgKGNvbnRhaW5lclBvcy54IC0gZHggLSBwYWRkaW5nVEwueCA8IDApIHsgLy8gbGVmdAogIAkJCWR4ID0gY29udGFpbmVyUG9zLnggLSBwYWRkaW5nVEwueDsKICAJCX0KICAJCWlmIChjb250YWluZXJQb3MueSArIGNvbnRhaW5lckhlaWdodCArIHBhZGRpbmdCUi55ID4gc2l6ZS55KSB7IC8vIGJvdHRvbQogIAkJCWR5ID0gY29udGFpbmVyUG9zLnkgKyBjb250YWluZXJIZWlnaHQgLSBzaXplLnkgKyBwYWRkaW5nQlIueTsKICAJCX0KICAJCWlmIChjb250YWluZXJQb3MueSAtIGR5IC0gcGFkZGluZ1RMLnkgPCAwKSB7IC8vIHRvcAogIAkJCWR5ID0gY29udGFpbmVyUG9zLnkgLSBwYWRkaW5nVEwueTsKICAJCX0KCiAgCQkvLyBAbmFtZXNwYWNlIE1hcAogIAkJLy8gQHNlY3Rpb24gUG9wdXAgZXZlbnRzCiAgCQkvLyBAZXZlbnQgYXV0b3BhbnN0YXJ0OiBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiB0aGUgbWFwIHN0YXJ0cyBhdXRvcGFubmluZyB3aGVuIG9wZW5pbmcgYSBwb3B1cC4KICAJCWlmIChkeCB8fCBkeSkgewogIAkJCW1hcAogIAkJCSAgICAuZmlyZSgnYXV0b3BhbnN0YXJ0JykKICAJCQkgICAgLnBhbkJ5KFtkeCwgZHldLCB7YW5pbWF0ZTogZSAmJiBlLnR5cGUgPT09ICdtb3ZlZW5kJ30pOwogIAkJfQogIAl9LAoKICAJX2dldEFuY2hvcjogZnVuY3Rpb24gKCkgewogIAkJLy8gV2hlcmUgc2hvdWxkIHdlIGFuY2hvciB0aGUgcG9wdXAgb24gdGhlIHNvdXJjZSBsYXllcj8KICAJCXJldHVybiB0b1BvaW50KHRoaXMuX3NvdXJjZSAmJiB0aGlzLl9zb3VyY2UuX2dldFBvcHVwQW5jaG9yID8gdGhpcy5fc291cmNlLl9nZXRQb3B1cEFuY2hvcigpIDogWzAsIDBdKTsKICAJfQoKICB9KTsKCiAgLy8gQG5hbWVzcGFjZSBQb3B1cAogIC8vIEBmYWN0b3J5IEwucG9wdXAob3B0aW9ucz86IFBvcHVwIG9wdGlvbnMsIHNvdXJjZT86IExheWVyKQogIC8vIEluc3RhbnRpYXRlcyBhIGBQb3B1cGAgb2JqZWN0IGdpdmVuIGFuIG9wdGlvbmFsIGBvcHRpb25zYCBvYmplY3QgdGhhdCBkZXNjcmliZXMgaXRzIGFwcGVhcmFuY2UgYW5kIGxvY2F0aW9uIGFuZCBhbiBvcHRpb25hbCBgc291cmNlYCBvYmplY3QgdGhhdCBpcyB1c2VkIHRvIHRhZyB0aGUgcG9wdXAgd2l0aCBhIHJlZmVyZW5jZSB0byB0aGUgTGF5ZXIgdG8gd2hpY2ggaXQgcmVmZXJzLgogIHZhciBwb3B1cCA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHsKICAJcmV0dXJuIG5ldyBQb3B1cChvcHRpb25zLCBzb3VyY2UpOwogIH07CgoKICAvKiBAbmFtZXNwYWNlIE1hcAogICAqIEBzZWN0aW9uIEludGVyYWN0aW9uIE9wdGlvbnMKICAgKiBAb3B0aW9uIGNsb3NlUG9wdXBPbkNsaWNrOiBCb29sZWFuID0gdHJ1ZQogICAqIFNldCBpdCB0byBgZmFsc2VgIGlmIHlvdSBkb24ndCB3YW50IHBvcHVwcyB0byBjbG9zZSB3aGVuIHVzZXIgY2xpY2tzIHRoZSBtYXAuCiAgICovCiAgTWFwLm1lcmdlT3B0aW9ucyh7CiAgCWNsb3NlUG9wdXBPbkNsaWNrOiB0cnVlCiAgfSk7CgoKICAvLyBAbmFtZXNwYWNlIE1hcAogIC8vIEBzZWN0aW9uIE1ldGhvZHMgZm9yIExheWVycyBhbmQgQ29udHJvbHMKICBNYXAuaW5jbHVkZSh7CiAgCS8vIEBtZXRob2Qgb3BlblBvcHVwKHBvcHVwOiBQb3B1cCk6IHRoaXMKICAJLy8gT3BlbnMgdGhlIHNwZWNpZmllZCBwb3B1cCB3aGlsZSBjbG9zaW5nIHRoZSBwcmV2aW91c2x5IG9wZW5lZCAodG8gbWFrZSBzdXJlIG9ubHkgb25lIGlzIG9wZW5lZCBhdCBvbmUgdGltZSBmb3IgdXNhYmlsaXR5KS4KICAJLy8gQGFsdGVybmF0aXZlCiAgCS8vIEBtZXRob2Qgb3BlblBvcHVwKGNvbnRlbnQ6IFN0cmluZ3xIVE1MRWxlbWVudCwgbGF0bG5nOiBMYXRMbmcsIG9wdGlvbnM/OiBQb3B1cCBvcHRpb25zKTogdGhpcwogIAkvLyBDcmVhdGVzIGEgcG9wdXAgd2l0aCB0aGUgc3BlY2lmaWVkIGNvbnRlbnQgYW5kIG9wdGlvbnMgYW5kIG9wZW5zIGl0IGluIHRoZSBnaXZlbiBwb2ludCBvbiBhIG1hcC4KICAJb3BlblBvcHVwOiBmdW5jdGlvbiAocG9wdXAsIGxhdGxuZywgb3B0aW9ucykgewogIAkJdGhpcy5faW5pdE92ZXJsYXkoUG9wdXAsIHBvcHVwLCBsYXRsbmcsIG9wdGlvbnMpCiAgCQkgIC5vcGVuT24odGhpcyk7CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGNsb3NlUG9wdXAocG9wdXA/OiBQb3B1cCk6IHRoaXMKICAJLy8gQ2xvc2VzIHRoZSBwb3B1cCBwcmV2aW91c2x5IG9wZW5lZCB3aXRoIFtvcGVuUG9wdXBdKCNtYXAtb3BlbnBvcHVwKSAob3IgdGhlIGdpdmVuIG9uZSkuCiAgCWNsb3NlUG9wdXA6IGZ1bmN0aW9uIChwb3B1cCkgewogIAkJcG9wdXAgPSBhcmd1bWVudHMubGVuZ3RoID8gcG9wdXAgOiB0aGlzLl9wb3B1cDsKICAJCWlmIChwb3B1cCkgewogIAkJCXBvcHVwLmNsb3NlKCk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfQogIH0pOwoKICAvKgogICAqIEBuYW1lc3BhY2UgTGF5ZXIKICAgKiBAc2VjdGlvbiBQb3B1cCBtZXRob2RzIGV4YW1wbGUKICAgKgogICAqIEFsbCBsYXllcnMgc2hhcmUgYSBzZXQgb2YgbWV0aG9kcyBjb252ZW5pZW50IGZvciBiaW5kaW5nIHBvcHVwcyB0byBpdC4KICAgKgogICAqIGBgYGpzCiAgICogdmFyIGxheWVyID0gTC5Qb2x5Z29uKGxhdGxuZ3MpLmJpbmRQb3B1cCgnSGkgVGhlcmUhJykuYWRkVG8obWFwKTsKICAgKiBsYXllci5vcGVuUG9wdXAoKTsKICAgKiBsYXllci5jbG9zZVBvcHVwKCk7CiAgICogYGBgCiAgICoKICAgKiBQb3B1cHMgd2lsbCBhbHNvIGJlIGF1dG9tYXRpY2FsbHkgb3BlbmVkIHdoZW4gdGhlIGxheWVyIGlzIGNsaWNrZWQgb24gYW5kIGNsb3NlZCB3aGVuIHRoZSBsYXllciBpcyByZW1vdmVkIGZyb20gdGhlIG1hcCBvciBhbm90aGVyIHBvcHVwIGlzIG9wZW5lZC4KICAgKi8KCiAgLy8gQHNlY3Rpb24gUG9wdXAgbWV0aG9kcwogIExheWVyLmluY2x1ZGUoewoKICAJLy8gQG1ldGhvZCBiaW5kUG9wdXAoY29udGVudDogU3RyaW5nfEhUTUxFbGVtZW50fEZ1bmN0aW9ufFBvcHVwLCBvcHRpb25zPzogUG9wdXAgb3B0aW9ucyk6IHRoaXMKICAJLy8gQmluZHMgYSBwb3B1cCB0byB0aGUgbGF5ZXIgd2l0aCB0aGUgcGFzc2VkIGBjb250ZW50YCBhbmQgc2V0cyB1cCB0aGUKICAJLy8gbmVjZXNzYXJ5IGV2ZW50IGxpc3RlbmVycy4gSWYgYSBgRnVuY3Rpb25gIGlzIHBhc3NlZCBpdCB3aWxsIHJlY2VpdmUKICAJLy8gdGhlIGxheWVyIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBhbmQgc2hvdWxkIHJldHVybiBhIGBTdHJpbmdgIG9yIGBIVE1MRWxlbWVudGAuCiAgCWJpbmRQb3B1cDogZnVuY3Rpb24gKGNvbnRlbnQsIG9wdGlvbnMpIHsKICAJCXRoaXMuX3BvcHVwID0gdGhpcy5faW5pdE92ZXJsYXkoUG9wdXAsIHRoaXMuX3BvcHVwLCBjb250ZW50LCBvcHRpb25zKTsKICAJCWlmICghdGhpcy5fcG9wdXBIYW5kbGVyc0FkZGVkKSB7CiAgCQkJdGhpcy5vbih7CiAgCQkJCWNsaWNrOiB0aGlzLl9vcGVuUG9wdXAsCiAgCQkJCWtleXByZXNzOiB0aGlzLl9vbktleVByZXNzLAogIAkJCQlyZW1vdmU6IHRoaXMuY2xvc2VQb3B1cCwKICAJCQkJbW92ZTogdGhpcy5fbW92ZVBvcHVwCiAgCQkJfSk7CiAgCQkJdGhpcy5fcG9wdXBIYW5kbGVyc0FkZGVkID0gdHJ1ZTsKICAJCX0KCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgdW5iaW5kUG9wdXAoKTogdGhpcwogIAkvLyBSZW1vdmVzIHRoZSBwb3B1cCBwcmV2aW91c2x5IGJvdW5kIHdpdGggYGJpbmRQb3B1cGAuCiAgCXVuYmluZFBvcHVwOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fcG9wdXApIHsKICAJCQl0aGlzLm9mZih7CiAgCQkJCWNsaWNrOiB0aGlzLl9vcGVuUG9wdXAsCiAgCQkJCWtleXByZXNzOiB0aGlzLl9vbktleVByZXNzLAogIAkJCQlyZW1vdmU6IHRoaXMuY2xvc2VQb3B1cCwKICAJCQkJbW92ZTogdGhpcy5fbW92ZVBvcHVwCiAgCQkJfSk7CiAgCQkJdGhpcy5fcG9wdXBIYW5kbGVyc0FkZGVkID0gZmFsc2U7CiAgCQkJdGhpcy5fcG9wdXAgPSBudWxsOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIG9wZW5Qb3B1cChsYXRsbmc/OiBMYXRMbmcpOiB0aGlzCiAgCS8vIE9wZW5zIHRoZSBib3VuZCBwb3B1cCBhdCB0aGUgc3BlY2lmaWVkIGBsYXRsbmdgIG9yIGF0IHRoZSBkZWZhdWx0IHBvcHVwIGFuY2hvciBpZiBubyBgbGF0bG5nYCBpcyBwYXNzZWQuCiAgCW9wZW5Qb3B1cDogZnVuY3Rpb24gKGxhdGxuZykgewogIAkJaWYgKHRoaXMuX3BvcHVwICYmIHRoaXMuX3BvcHVwLl9wcmVwYXJlT3BlbihsYXRsbmcpKSB7CiAgCQkJLy8gb3BlbiB0aGUgcG9wdXAgb24gdGhlIG1hcAogIAkJCXRoaXMuX3BvcHVwLm9wZW5Pbih0aGlzLl9tYXApOwogIAkJfQogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGNsb3NlUG9wdXAoKTogdGhpcwogIAkvLyBDbG9zZXMgdGhlIHBvcHVwIGJvdW5kIHRvIHRoaXMgbGF5ZXIgaWYgaXQgaXMgb3Blbi4KICAJY2xvc2VQb3B1cDogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX3BvcHVwKSB7CiAgCQkJdGhpcy5fcG9wdXAuY2xvc2UoKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCB0b2dnbGVQb3B1cCgpOiB0aGlzCiAgCS8vIE9wZW5zIG9yIGNsb3NlcyB0aGUgcG9wdXAgYm91bmQgdG8gdGhpcyBsYXllciBkZXBlbmRpbmcgb24gaXRzIGN1cnJlbnQgc3RhdGUuCiAgCXRvZ2dsZVBvcHVwOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fcG9wdXApIHsKICAJCQl0aGlzLl9wb3B1cC50b2dnbGUodGhpcyk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgaXNQb3B1cE9wZW4oKTogYm9vbGVhbgogIAkvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcG9wdXAgYm91bmQgdG8gdGhpcyBsYXllciBpcyBjdXJyZW50bHkgb3Blbi4KICAJaXNQb3B1cE9wZW46IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiAodGhpcy5fcG9wdXAgPyB0aGlzLl9wb3B1cC5pc09wZW4oKSA6IGZhbHNlKTsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0UG9wdXBDb250ZW50KGNvbnRlbnQ6IFN0cmluZ3xIVE1MRWxlbWVudHxQb3B1cCk6IHRoaXMKICAJLy8gU2V0cyB0aGUgY29udGVudCBvZiB0aGUgcG9wdXAgYm91bmQgdG8gdGhpcyBsYXllci4KICAJc2V0UG9wdXBDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkgewogIAkJaWYgKHRoaXMuX3BvcHVwKSB7CiAgCQkJdGhpcy5fcG9wdXAuc2V0Q29udGVudChjb250ZW50KTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBnZXRQb3B1cCgpOiBQb3B1cAogIAkvLyBSZXR1cm5zIHRoZSBwb3B1cCBib3VuZCB0byB0aGlzIGxheWVyLgogIAlnZXRQb3B1cDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX3BvcHVwOwogIAl9LAoKICAJX29wZW5Qb3B1cDogZnVuY3Rpb24gKGUpIHsKICAJCWlmICghdGhpcy5fcG9wdXAgfHwgIXRoaXMuX21hcCkgewogIAkJCXJldHVybjsKICAJCX0KICAJCS8vIHByZXZlbnQgbWFwIGNsaWNrCiAgCQlzdG9wKGUpOwoKICAJCXZhciB0YXJnZXQgPSBlLmxheWVyIHx8IGUudGFyZ2V0OwogIAkJaWYgKHRoaXMuX3BvcHVwLl9zb3VyY2UgPT09IHRhcmdldCAmJiAhKHRhcmdldCBpbnN0YW5jZW9mIFBhdGgpKSB7CiAgCQkJLy8gdHJlYXQgaXQgbGlrZSBhIG1hcmtlciBhbmQgZmlndXJlIG91dAogIAkJCS8vIGlmIHdlIHNob3VsZCB0b2dnbGUgaXQgb3Blbi9jbG9zZWQKICAJCQlpZiAodGhpcy5fbWFwLmhhc0xheWVyKHRoaXMuX3BvcHVwKSkgewogIAkJCQl0aGlzLmNsb3NlUG9wdXAoKTsKICAJCQl9IGVsc2UgewogIAkJCQl0aGlzLm9wZW5Qb3B1cChlLmxhdGxuZyk7CiAgCQkJfQogIAkJCXJldHVybjsKICAJCX0KICAJCXRoaXMuX3BvcHVwLl9zb3VyY2UgPSB0YXJnZXQ7CiAgCQl0aGlzLm9wZW5Qb3B1cChlLmxhdGxuZyk7CiAgCX0sCgogIAlfbW92ZVBvcHVwOiBmdW5jdGlvbiAoZSkgewogIAkJdGhpcy5fcG9wdXAuc2V0TGF0TG5nKGUubGF0bG5nKTsKICAJfSwKCiAgCV9vbktleVByZXNzOiBmdW5jdGlvbiAoZSkgewogIAkJaWYgKGUub3JpZ2luYWxFdmVudC5rZXlDb2RlID09PSAxMykgewogIAkJCXRoaXMuX29wZW5Qb3B1cChlKTsKICAJCX0KICAJfQogIH0pOwoKICAvKgogICAqIEBjbGFzcyBUb29sdGlwCiAgICogQGluaGVyaXRzIERpdk92ZXJsYXkKICAgKiBAYWthIEwuVG9vbHRpcAogICAqIFVzZWQgdG8gZGlzcGxheSBzbWFsbCB0ZXh0cyBvbiB0b3Agb2YgbWFwIGxheWVycy4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIG1hcmtlci5iaW5kVG9vbHRpcCgibXkgdG9vbHRpcCB0ZXh0Iikub3BlblRvb2x0aXAoKTsKICAgKiBgYGAKICAgKiBOb3RlIGFib3V0IHRvb2x0aXAgb2Zmc2V0LiBMZWFmbGV0IHRha2VzIHR3byBvcHRpb25zIGluIGNvbnNpZGVyYXRpb24KICAgKiBmb3IgY29tcHV0aW5nIHRvb2x0aXAgb2Zmc2V0dGluZzoKICAgKiAtIHRoZSBgb2Zmc2V0YCBUb29sdGlwIG9wdGlvbjogaXQgZGVmYXVsdHMgdG8gWzAsIDBdLCBhbmQgaXQncyBzcGVjaWZpYyB0byBvbmUgdG9vbHRpcC4KICAgKiAgIEFkZCBhIHBvc2l0aXZlIHggb2Zmc2V0IHRvIG1vdmUgdGhlIHRvb2x0aXAgdG8gdGhlIHJpZ2h0LCBhbmQgYSBwb3NpdGl2ZSB5IG9mZnNldCB0bwogICAqICAgbW92ZSBpdCB0byB0aGUgYm90dG9tLiBOZWdhdGl2ZXMgd2lsbCBtb3ZlIHRvIHRoZSBsZWZ0IGFuZCB0b3AuCiAgICogLSB0aGUgYHRvb2x0aXBBbmNob3JgIEljb24gb3B0aW9uOiB0aGlzIHdpbGwgb25seSBiZSBjb25zaWRlcmVkIGZvciBNYXJrZXIuIFlvdQogICAqICAgc2hvdWxkIGFkYXB0IHRoaXMgdmFsdWUgaWYgeW91IHVzZSBhIGN1c3RvbSBpY29uLgogICAqLwoKCiAgLy8gQG5hbWVzcGFjZSBUb29sdGlwCiAgdmFyIFRvb2x0aXAgPSBEaXZPdmVybGF5LmV4dGVuZCh7CgogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIFRvb2x0aXAgb3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQkvLyBAb3B0aW9uIHBhbmU6IFN0cmluZyA9ICd0b29sdGlwUGFuZScKICAJCS8vIGBNYXAgcGFuZWAgd2hlcmUgdGhlIHRvb2x0aXAgd2lsbCBiZSBhZGRlZC4KICAJCXBhbmU6ICd0b29sdGlwUGFuZScsCgogIAkJLy8gQG9wdGlvbiBvZmZzZXQ6IFBvaW50ID0gUG9pbnQoMCwgMCkKICAJCS8vIE9wdGlvbmFsIG9mZnNldCBvZiB0aGUgdG9vbHRpcCBwb3NpdGlvbi4KICAJCW9mZnNldDogWzAsIDBdLAoKICAJCS8vIEBvcHRpb24gZGlyZWN0aW9uOiBTdHJpbmcgPSAnYXV0bycKICAJCS8vIERpcmVjdGlvbiB3aGVyZSB0byBvcGVuIHRoZSB0b29sdGlwLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOiBgcmlnaHRgLCBgbGVmdGAsCiAgCQkvLyBgdG9wYCwgYGJvdHRvbWAsIGBjZW50ZXJgLCBgYXV0b2AuCiAgCQkvLyBgYXV0b2Agd2lsbCBkeW5hbWljYWxseSBzd2l0Y2ggYmV0d2VlbiBgcmlnaHRgIGFuZCBgbGVmdGAgYWNjb3JkaW5nIHRvIHRoZSB0b29sdGlwCiAgCQkvLyBwb3NpdGlvbiBvbiB0aGUgbWFwLgogIAkJZGlyZWN0aW9uOiAnYXV0bycsCgogIAkJLy8gQG9wdGlvbiBwZXJtYW5lbnQ6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gV2hldGhlciB0byBvcGVuIHRoZSB0b29sdGlwIHBlcm1hbmVudGx5IG9yIG9ubHkgb24gbW91c2VvdmVyLgogIAkJcGVybWFuZW50OiBmYWxzZSwKCiAgCQkvLyBAb3B0aW9uIHN0aWNreTogQm9vbGVhbiA9IGZhbHNlCiAgCQkvLyBJZiB0cnVlLCB0aGUgdG9vbHRpcCB3aWxsIGZvbGxvdyB0aGUgbW91c2UgaW5zdGVhZCBvZiBiZWluZyBmaXhlZCBhdCB0aGUgZmVhdHVyZSBjZW50ZXIuCiAgCQlzdGlja3k6IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gb3BhY2l0eTogTnVtYmVyID0gMC45CiAgCQkvLyBUb29sdGlwIGNvbnRhaW5lciBvcGFjaXR5LgogIAkJb3BhY2l0eTogMC45CiAgCX0sCgogIAlvbkFkZDogZnVuY3Rpb24gKG1hcCkgewogIAkJRGl2T3ZlcmxheS5wcm90b3R5cGUub25BZGQuY2FsbCh0aGlzLCBtYXApOwogIAkJdGhpcy5zZXRPcGFjaXR5KHRoaXMub3B0aW9ucy5vcGFjaXR5KTsKCiAgCQkvLyBAbmFtZXNwYWNlIE1hcAogIAkJLy8gQHNlY3Rpb24gVG9vbHRpcCBldmVudHMKICAJCS8vIEBldmVudCB0b29sdGlwb3BlbjogVG9vbHRpcEV2ZW50CiAgCQkvLyBGaXJlZCB3aGVuIGEgdG9vbHRpcCBpcyBvcGVuZWQgaW4gdGhlIG1hcC4KICAJCW1hcC5maXJlKCd0b29sdGlwb3BlbicsIHt0b29sdGlwOiB0aGlzfSk7CgogIAkJaWYgKHRoaXMuX3NvdXJjZSkgewogIAkJCXRoaXMuYWRkRXZlbnRQYXJlbnQodGhpcy5fc291cmNlKTsKCiAgCQkJLy8gQG5hbWVzcGFjZSBMYXllcgogIAkJCS8vIEBzZWN0aW9uIFRvb2x0aXAgZXZlbnRzCiAgCQkJLy8gQGV2ZW50IHRvb2x0aXBvcGVuOiBUb29sdGlwRXZlbnQKICAJCQkvLyBGaXJlZCB3aGVuIGEgdG9vbHRpcCBib3VuZCB0byB0aGlzIGxheWVyIGlzIG9wZW5lZC4KICAJCQl0aGlzLl9zb3VyY2UuZmlyZSgndG9vbHRpcG9wZW4nLCB7dG9vbHRpcDogdGhpc30sIHRydWUpOwogIAkJfQogIAl9LAoKICAJb25SZW1vdmU6IGZ1bmN0aW9uIChtYXApIHsKICAJCURpdk92ZXJsYXkucHJvdG90eXBlLm9uUmVtb3ZlLmNhbGwodGhpcywgbWFwKTsKCiAgCQkvLyBAbmFtZXNwYWNlIE1hcAogIAkJLy8gQHNlY3Rpb24gVG9vbHRpcCBldmVudHMKICAJCS8vIEBldmVudCB0b29sdGlwY2xvc2U6IFRvb2x0aXBFdmVudAogIAkJLy8gRmlyZWQgd2hlbiBhIHRvb2x0aXAgaW4gdGhlIG1hcCBpcyBjbG9zZWQuCiAgCQltYXAuZmlyZSgndG9vbHRpcGNsb3NlJywge3Rvb2x0aXA6IHRoaXN9KTsKCiAgCQlpZiAodGhpcy5fc291cmNlKSB7CiAgCQkJdGhpcy5yZW1vdmVFdmVudFBhcmVudCh0aGlzLl9zb3VyY2UpOwoKICAJCQkvLyBAbmFtZXNwYWNlIExheWVyCiAgCQkJLy8gQHNlY3Rpb24gVG9vbHRpcCBldmVudHMKICAJCQkvLyBAZXZlbnQgdG9vbHRpcGNsb3NlOiBUb29sdGlwRXZlbnQKICAJCQkvLyBGaXJlZCB3aGVuIGEgdG9vbHRpcCBib3VuZCB0byB0aGlzIGxheWVyIGlzIGNsb3NlZC4KICAJCQl0aGlzLl9zb3VyY2UuZmlyZSgndG9vbHRpcGNsb3NlJywge3Rvb2x0aXA6IHRoaXN9LCB0cnVlKTsKICAJCX0KICAJfSwKCiAgCWdldEV2ZW50czogZnVuY3Rpb24gKCkgewogIAkJdmFyIGV2ZW50cyA9IERpdk92ZXJsYXkucHJvdG90eXBlLmdldEV2ZW50cy5jYWxsKHRoaXMpOwoKICAJCWlmICghdGhpcy5vcHRpb25zLnBlcm1hbmVudCkgewogIAkJCWV2ZW50cy5wcmVjbGljayA9IHRoaXMuY2xvc2U7CiAgCQl9CgogIAkJcmV0dXJuIGV2ZW50czsKICAJfSwKCiAgCV9pbml0TGF5b3V0OiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgcHJlZml4ID0gJ2xlYWZsZXQtdG9vbHRpcCcsCiAgCQkgICAgY2xhc3NOYW1lID0gcHJlZml4ICsgJyAnICsgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUgfHwgJycpICsgJyBsZWFmbGV0LXpvb20tJyArICh0aGlzLl96b29tQW5pbWF0ZWQgPyAnYW5pbWF0ZWQnIDogJ2hpZGUnKTsKCiAgCQl0aGlzLl9jb250ZW50Tm9kZSA9IHRoaXMuX2NvbnRhaW5lciA9IGNyZWF0ZSQxKCdkaXYnLCBjbGFzc05hbWUpOwogIAl9LAoKICAJX3VwZGF0ZUxheW91dDogZnVuY3Rpb24gKCkge30sCgogIAlfYWRqdXN0UGFuOiBmdW5jdGlvbiAoKSB7fSwKCiAgCV9zZXRQb3NpdGlvbjogZnVuY3Rpb24gKHBvcykgewogIAkJdmFyIHN1YlgsIHN1YlksCiAgCQkgICAgbWFwID0gdGhpcy5fbWFwLAogIAkJICAgIGNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lciwKICAJCSAgICBjZW50ZXJQb2ludCA9IG1hcC5sYXRMbmdUb0NvbnRhaW5lclBvaW50KG1hcC5nZXRDZW50ZXIoKSksCiAgCQkgICAgdG9vbHRpcFBvaW50ID0gbWFwLmxheWVyUG9pbnRUb0NvbnRhaW5lclBvaW50KHBvcyksCiAgCQkgICAgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbiwKICAJCSAgICB0b29sdGlwV2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGgsCiAgCQkgICAgdG9vbHRpcEhlaWdodCA9IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQsCiAgCQkgICAgb2Zmc2V0ID0gdG9Qb2ludCh0aGlzLm9wdGlvbnMub2Zmc2V0KSwKICAJCSAgICBhbmNob3IgPSB0aGlzLl9nZXRBbmNob3IoKTsKCiAgCQlpZiAoZGlyZWN0aW9uID09PSAndG9wJykgewogIAkJCXN1YlggPSB0b29sdGlwV2lkdGggLyAyOwogIAkJCXN1YlkgPSB0b29sdGlwSGVpZ2h0OwogIAkJfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdib3R0b20nKSB7CiAgCQkJc3ViWCA9IHRvb2x0aXBXaWR0aCAvIDI7CiAgCQkJc3ViWSA9IDA7CiAgCQl9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2NlbnRlcicpIHsKICAJCQlzdWJYID0gdG9vbHRpcFdpZHRoIC8gMjsKICAJCQlzdWJZID0gdG9vbHRpcEhlaWdodCAvIDI7CiAgCQl9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgewogIAkJCXN1YlggPSAwOwogIAkJCXN1YlkgPSB0b29sdGlwSGVpZ2h0IC8gMjsKICAJCX0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcpIHsKICAJCQlzdWJYID0gdG9vbHRpcFdpZHRoOwogIAkJCXN1YlkgPSB0b29sdGlwSGVpZ2h0IC8gMjsKICAJCX0gZWxzZSBpZiAodG9vbHRpcFBvaW50LnggPCBjZW50ZXJQb2ludC54KSB7CiAgCQkJZGlyZWN0aW9uID0gJ3JpZ2h0JzsKICAJCQlzdWJYID0gMDsKICAJCQlzdWJZID0gdG9vbHRpcEhlaWdodCAvIDI7CiAgCQl9IGVsc2UgewogIAkJCWRpcmVjdGlvbiA9ICdsZWZ0JzsKICAJCQlzdWJYID0gdG9vbHRpcFdpZHRoICsgKG9mZnNldC54ICsgYW5jaG9yLngpICogMjsKICAJCQlzdWJZID0gdG9vbHRpcEhlaWdodCAvIDI7CiAgCQl9CgogIAkJcG9zID0gcG9zLnN1YnRyYWN0KHRvUG9pbnQoc3ViWCwgc3ViWSwgdHJ1ZSkpLmFkZChvZmZzZXQpLmFkZChhbmNob3IpOwoKICAJCXJlbW92ZUNsYXNzKGNvbnRhaW5lciwgJ2xlYWZsZXQtdG9vbHRpcC1yaWdodCcpOwogIAkJcmVtb3ZlQ2xhc3MoY29udGFpbmVyLCAnbGVhZmxldC10b29sdGlwLWxlZnQnKTsKICAJCXJlbW92ZUNsYXNzKGNvbnRhaW5lciwgJ2xlYWZsZXQtdG9vbHRpcC10b3AnKTsKICAJCXJlbW92ZUNsYXNzKGNvbnRhaW5lciwgJ2xlYWZsZXQtdG9vbHRpcC1ib3R0b20nKTsKICAJCWFkZENsYXNzKGNvbnRhaW5lciwgJ2xlYWZsZXQtdG9vbHRpcC0nICsgZGlyZWN0aW9uKTsKICAJCXNldFBvc2l0aW9uKGNvbnRhaW5lciwgcG9zKTsKICAJfSwKCiAgCV91cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24gKCkgewogIAkJdmFyIHBvcyA9IHRoaXMuX21hcC5sYXRMbmdUb0xheWVyUG9pbnQodGhpcy5fbGF0bG5nKTsKICAJCXRoaXMuX3NldFBvc2l0aW9uKHBvcyk7CiAgCX0sCgogIAlzZXRPcGFjaXR5OiBmdW5jdGlvbiAob3BhY2l0eSkgewogIAkJdGhpcy5vcHRpb25zLm9wYWNpdHkgPSBvcGFjaXR5OwoKICAJCWlmICh0aGlzLl9jb250YWluZXIpIHsKICAJCQlzZXRPcGFjaXR5KHRoaXMuX2NvbnRhaW5lciwgb3BhY2l0eSk7CiAgCQl9CiAgCX0sCgogIAlfYW5pbWF0ZVpvb206IGZ1bmN0aW9uIChlKSB7CiAgCQl2YXIgcG9zID0gdGhpcy5fbWFwLl9sYXRMbmdUb05ld0xheWVyUG9pbnQodGhpcy5fbGF0bG5nLCBlLnpvb20sIGUuY2VudGVyKTsKICAJCXRoaXMuX3NldFBvc2l0aW9uKHBvcyk7CiAgCX0sCgogIAlfZ2V0QW5jaG9yOiBmdW5jdGlvbiAoKSB7CiAgCQkvLyBXaGVyZSBzaG91bGQgd2UgYW5jaG9yIHRoZSB0b29sdGlwIG9uIHRoZSBzb3VyY2UgbGF5ZXI/CiAgCQlyZXR1cm4gdG9Qb2ludCh0aGlzLl9zb3VyY2UgJiYgdGhpcy5fc291cmNlLl9nZXRUb29sdGlwQW5jaG9yICYmICF0aGlzLm9wdGlvbnMuc3RpY2t5ID8gdGhpcy5fc291cmNlLl9nZXRUb29sdGlwQW5jaG9yKCkgOiBbMCwgMF0pOwogIAl9CgogIH0pOwoKICAvLyBAbmFtZXNwYWNlIFRvb2x0aXAKICAvLyBAZmFjdG9yeSBMLnRvb2x0aXAob3B0aW9ucz86IFRvb2x0aXAgb3B0aW9ucywgc291cmNlPzogTGF5ZXIpCiAgLy8gSW5zdGFudGlhdGVzIGEgVG9vbHRpcCBvYmplY3QgZ2l2ZW4gYW4gb3B0aW9uYWwgYG9wdGlvbnNgIG9iamVjdCB0aGF0IGRlc2NyaWJlcyBpdHMgYXBwZWFyYW5jZSBhbmQgbG9jYXRpb24gYW5kIGFuIG9wdGlvbmFsIGBzb3VyY2VgIG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gdGFnIHRoZSB0b29sdGlwIHdpdGggYSByZWZlcmVuY2UgdG8gdGhlIExheWVyIHRvIHdoaWNoIGl0IHJlZmVycy4KICB2YXIgdG9vbHRpcCA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHsKICAJcmV0dXJuIG5ldyBUb29sdGlwKG9wdGlvbnMsIHNvdXJjZSk7CiAgfTsKCiAgLy8gQG5hbWVzcGFjZSBNYXAKICAvLyBAc2VjdGlvbiBNZXRob2RzIGZvciBMYXllcnMgYW5kIENvbnRyb2xzCiAgTWFwLmluY2x1ZGUoewoKICAJLy8gQG1ldGhvZCBvcGVuVG9vbHRpcCh0b29sdGlwOiBUb29sdGlwKTogdGhpcwogIAkvLyBPcGVucyB0aGUgc3BlY2lmaWVkIHRvb2x0aXAuCiAgCS8vIEBhbHRlcm5hdGl2ZQogIAkvLyBAbWV0aG9kIG9wZW5Ub29sdGlwKGNvbnRlbnQ6IFN0cmluZ3xIVE1MRWxlbWVudCwgbGF0bG5nOiBMYXRMbmcsIG9wdGlvbnM/OiBUb29sdGlwIG9wdGlvbnMpOiB0aGlzCiAgCS8vIENyZWF0ZXMgYSB0b29sdGlwIHdpdGggdGhlIHNwZWNpZmllZCBjb250ZW50IGFuZCBvcHRpb25zIGFuZCBvcGVuIGl0LgogIAlvcGVuVG9vbHRpcDogZnVuY3Rpb24gKHRvb2x0aXAsIGxhdGxuZywgb3B0aW9ucykgewogIAkJdGhpcy5faW5pdE92ZXJsYXkoVG9vbHRpcCwgdG9vbHRpcCwgbGF0bG5nLCBvcHRpb25zKQogIAkJICAub3Blbk9uKHRoaXMpOwoKICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBjbG9zZVRvb2x0aXAodG9vbHRpcDogVG9vbHRpcCk6IHRoaXMKICAJLy8gQ2xvc2VzIHRoZSB0b29sdGlwIGdpdmVuIGFzIHBhcmFtZXRlci4KICAJY2xvc2VUb29sdGlwOiBmdW5jdGlvbiAodG9vbHRpcCkgewogIAkJdG9vbHRpcC5jbG9zZSgpOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0KCiAgfSk7CgogIC8qCiAgICogQG5hbWVzcGFjZSBMYXllcgogICAqIEBzZWN0aW9uIFRvb2x0aXAgbWV0aG9kcyBleGFtcGxlCiAgICoKICAgKiBBbGwgbGF5ZXJzIHNoYXJlIGEgc2V0IG9mIG1ldGhvZHMgY29udmVuaWVudCBmb3IgYmluZGluZyB0b29sdGlwcyB0byBpdC4KICAgKgogICAqIGBgYGpzCiAgICogdmFyIGxheWVyID0gTC5Qb2x5Z29uKGxhdGxuZ3MpLmJpbmRUb29sdGlwKCdIaSBUaGVyZSEnKS5hZGRUbyhtYXApOwogICAqIGxheWVyLm9wZW5Ub29sdGlwKCk7CiAgICogbGF5ZXIuY2xvc2VUb29sdGlwKCk7CiAgICogYGBgCiAgICovCgogIC8vIEBzZWN0aW9uIFRvb2x0aXAgbWV0aG9kcwogIExheWVyLmluY2x1ZGUoewoKICAJLy8gQG1ldGhvZCBiaW5kVG9vbHRpcChjb250ZW50OiBTdHJpbmd8SFRNTEVsZW1lbnR8RnVuY3Rpb258VG9vbHRpcCwgb3B0aW9ucz86IFRvb2x0aXAgb3B0aW9ucyk6IHRoaXMKICAJLy8gQmluZHMgYSB0b29sdGlwIHRvIHRoZSBsYXllciB3aXRoIHRoZSBwYXNzZWQgYGNvbnRlbnRgIGFuZCBzZXRzIHVwIHRoZQogIAkvLyBuZWNlc3NhcnkgZXZlbnQgbGlzdGVuZXJzLiBJZiBhIGBGdW5jdGlvbmAgaXMgcGFzc2VkIGl0IHdpbGwgcmVjZWl2ZQogIAkvLyB0aGUgbGF5ZXIgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IGFuZCBzaG91bGQgcmV0dXJuIGEgYFN0cmluZ2Agb3IgYEhUTUxFbGVtZW50YC4KICAJYmluZFRvb2x0aXA6IGZ1bmN0aW9uIChjb250ZW50LCBvcHRpb25zKSB7CgogIAkJaWYgKHRoaXMuX3Rvb2x0aXAgJiYgdGhpcy5pc1Rvb2x0aXBPcGVuKCkpIHsKICAJCQl0aGlzLnVuYmluZFRvb2x0aXAoKTsKICAJCX0KCiAgCQl0aGlzLl90b29sdGlwID0gdGhpcy5faW5pdE92ZXJsYXkoVG9vbHRpcCwgdGhpcy5fdG9vbHRpcCwgY29udGVudCwgb3B0aW9ucyk7CiAgCQl0aGlzLl9pbml0VG9vbHRpcEludGVyYWN0aW9ucygpOwoKICAJCWlmICh0aGlzLl90b29sdGlwLm9wdGlvbnMucGVybWFuZW50ICYmIHRoaXMuX21hcCAmJiB0aGlzLl9tYXAuaGFzTGF5ZXIodGhpcykpIHsKICAJCQl0aGlzLm9wZW5Ub29sdGlwKCk7CiAgCQl9CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHVuYmluZFRvb2x0aXAoKTogdGhpcwogIAkvLyBSZW1vdmVzIHRoZSB0b29sdGlwIHByZXZpb3VzbHkgYm91bmQgd2l0aCBgYmluZFRvb2x0aXBgLgogIAl1bmJpbmRUb29sdGlwOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fdG9vbHRpcCkgewogIAkJCXRoaXMuX2luaXRUb29sdGlwSW50ZXJhY3Rpb25zKHRydWUpOwogIAkJCXRoaXMuY2xvc2VUb29sdGlwKCk7CiAgCQkJdGhpcy5fdG9vbHRpcCA9IG51bGw7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCV9pbml0VG9vbHRpcEludGVyYWN0aW9uczogZnVuY3Rpb24gKHJlbW92ZSkgewogIAkJaWYgKCFyZW1vdmUgJiYgdGhpcy5fdG9vbHRpcEhhbmRsZXJzQWRkZWQpIHsgcmV0dXJuOyB9CiAgCQl2YXIgb25PZmYgPSByZW1vdmUgPyAnb2ZmJyA6ICdvbicsCiAgCQkgICAgZXZlbnRzID0gewogIAkJCXJlbW92ZTogdGhpcy5jbG9zZVRvb2x0aXAsCiAgCQkJbW92ZTogdGhpcy5fbW92ZVRvb2x0aXAKICAJCSAgICB9OwogIAkJaWYgKCF0aGlzLl90b29sdGlwLm9wdGlvbnMucGVybWFuZW50KSB7CiAgCQkJZXZlbnRzLm1vdXNlb3ZlciA9IHRoaXMuX29wZW5Ub29sdGlwOwogIAkJCWV2ZW50cy5tb3VzZW91dCA9IHRoaXMuY2xvc2VUb29sdGlwOwogIAkJCWV2ZW50cy5jbGljayA9IHRoaXMuX29wZW5Ub29sdGlwOwogIAkJfSBlbHNlIHsKICAJCQlldmVudHMuYWRkID0gdGhpcy5fb3BlblRvb2x0aXA7CiAgCQl9CiAgCQlpZiAodGhpcy5fdG9vbHRpcC5vcHRpb25zLnN0aWNreSkgewogIAkJCWV2ZW50cy5tb3VzZW1vdmUgPSB0aGlzLl9tb3ZlVG9vbHRpcDsKICAJCX0KICAJCXRoaXNbb25PZmZdKGV2ZW50cyk7CiAgCQl0aGlzLl90b29sdGlwSGFuZGxlcnNBZGRlZCA9ICFyZW1vdmU7CiAgCX0sCgogIAkvLyBAbWV0aG9kIG9wZW5Ub29sdGlwKGxhdGxuZz86IExhdExuZyk6IHRoaXMKICAJLy8gT3BlbnMgdGhlIGJvdW5kIHRvb2x0aXAgYXQgdGhlIHNwZWNpZmllZCBgbGF0bG5nYCBvciBhdCB0aGUgZGVmYXVsdCB0b29sdGlwIGFuY2hvciBpZiBubyBgbGF0bG5nYCBpcyBwYXNzZWQuCiAgCW9wZW5Ub29sdGlwOiBmdW5jdGlvbiAobGF0bG5nKSB7CiAgCQlpZiAodGhpcy5fdG9vbHRpcCAmJiB0aGlzLl90b29sdGlwLl9wcmVwYXJlT3BlbihsYXRsbmcpKSB7CiAgCQkJLy8gb3BlbiB0aGUgdG9vbHRpcCBvbiB0aGUgbWFwCiAgCQkJdGhpcy5fdG9vbHRpcC5vcGVuT24odGhpcy5fbWFwKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBjbG9zZVRvb2x0aXAoKTogdGhpcwogIAkvLyBDbG9zZXMgdGhlIHRvb2x0aXAgYm91bmQgdG8gdGhpcyBsYXllciBpZiBpdCBpcyBvcGVuLgogIAljbG9zZVRvb2x0aXA6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl90b29sdGlwKSB7CiAgCQkJcmV0dXJuIHRoaXMuX3Rvb2x0aXAuY2xvc2UoKTsKICAJCX0KICAJfSwKCiAgCS8vIEBtZXRob2QgdG9nZ2xlVG9vbHRpcCgpOiB0aGlzCiAgCS8vIE9wZW5zIG9yIGNsb3NlcyB0aGUgdG9vbHRpcCBib3VuZCB0byB0aGlzIGxheWVyIGRlcGVuZGluZyBvbiBpdHMgY3VycmVudCBzdGF0ZS4KICAJdG9nZ2xlVG9vbHRpcDogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX3Rvb2x0aXApIHsKICAJCQl0aGlzLl90b29sdGlwLnRvZ2dsZSh0aGlzKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBpc1Rvb2x0aXBPcGVuKCk6IGJvb2xlYW4KICAJLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRvb2x0aXAgYm91bmQgdG8gdGhpcyBsYXllciBpcyBjdXJyZW50bHkgb3Blbi4KICAJaXNUb29sdGlwT3BlbjogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX3Rvb2x0aXAuaXNPcGVuKCk7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFRvb2x0aXBDb250ZW50KGNvbnRlbnQ6IFN0cmluZ3xIVE1MRWxlbWVudHxUb29sdGlwKTogdGhpcwogIAkvLyBTZXRzIHRoZSBjb250ZW50IG9mIHRoZSB0b29sdGlwIGJvdW5kIHRvIHRoaXMgbGF5ZXIuCiAgCXNldFRvb2x0aXBDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkgewogIAkJaWYgKHRoaXMuX3Rvb2x0aXApIHsKICAJCQl0aGlzLl90b29sdGlwLnNldENvbnRlbnQoY29udGVudCk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0VG9vbHRpcCgpOiBUb29sdGlwCiAgCS8vIFJldHVybnMgdGhlIHRvb2x0aXAgYm91bmQgdG8gdGhpcyBsYXllci4KICAJZ2V0VG9vbHRpcDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX3Rvb2x0aXA7CiAgCX0sCgogIAlfb3BlblRvb2x0aXA6IGZ1bmN0aW9uIChlKSB7CiAgCQlpZiAoIXRoaXMuX3Rvb2x0aXAgfHwgIXRoaXMuX21hcCB8fCAodGhpcy5fbWFwLmRyYWdnaW5nICYmIHRoaXMuX21hcC5kcmFnZ2luZy5tb3ZpbmcoKSkpIHsKICAJCQlyZXR1cm47CiAgCQl9CiAgCQl0aGlzLl90b29sdGlwLl9zb3VyY2UgPSBlLmxheWVyIHx8IGUudGFyZ2V0OwoKICAJCXRoaXMub3BlblRvb2x0aXAodGhpcy5fdG9vbHRpcC5vcHRpb25zLnN0aWNreSA/IGUubGF0bG5nIDogdW5kZWZpbmVkKTsKICAJfSwKCiAgCV9tb3ZlVG9vbHRpcDogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBsYXRsbmcgPSBlLmxhdGxuZywgY29udGFpbmVyUG9pbnQsIGxheWVyUG9pbnQ7CiAgCQlpZiAodGhpcy5fdG9vbHRpcC5vcHRpb25zLnN0aWNreSAmJiBlLm9yaWdpbmFsRXZlbnQpIHsKICAJCQljb250YWluZXJQb2ludCA9IHRoaXMuX21hcC5tb3VzZUV2ZW50VG9Db250YWluZXJQb2ludChlLm9yaWdpbmFsRXZlbnQpOwogIAkJCWxheWVyUG9pbnQgPSB0aGlzLl9tYXAuY29udGFpbmVyUG9pbnRUb0xheWVyUG9pbnQoY29udGFpbmVyUG9pbnQpOwogIAkJCWxhdGxuZyA9IHRoaXMuX21hcC5sYXllclBvaW50VG9MYXRMbmcobGF5ZXJQb2ludCk7CiAgCQl9CiAgCQl0aGlzLl90b29sdGlwLnNldExhdExuZyhsYXRsbmcpOwogIAl9CiAgfSk7CgogIC8qCiAgICogQGNsYXNzIERpdkljb24KICAgKiBAYWthIEwuRGl2SWNvbgogICAqIEBpbmhlcml0cyBJY29uCiAgICoKICAgKiBSZXByZXNlbnRzIGEgbGlnaHR3ZWlnaHQgaWNvbiBmb3IgbWFya2VycyB0aGF0IHVzZXMgYSBzaW1wbGUgYDxkaXY+YAogICAqIGVsZW1lbnQgaW5zdGVhZCBvZiBhbiBpbWFnZS4gSW5oZXJpdHMgZnJvbSBgSWNvbmAgYnV0IGlnbm9yZXMgdGhlIGBpY29uVXJsYCBhbmQgc2hhZG93IG9wdGlvbnMuCiAgICoKICAgKiBAZXhhbXBsZQogICAqIGBgYGpzCiAgICogdmFyIG15SWNvbiA9IEwuZGl2SWNvbih7Y2xhc3NOYW1lOiAnbXktZGl2LWljb24nfSk7CiAgICogLy8geW91IGNhbiBzZXQgLm15LWRpdi1pY29uIHN0eWxlcyBpbiBDU1MKICAgKgogICAqIEwubWFya2VyKFs1MC41MDUsIDMwLjU3XSwge2ljb246IG15SWNvbn0pLmFkZFRvKG1hcCk7CiAgICogYGBgCiAgICoKICAgKiBCeSBkZWZhdWx0LCBpdCBoYXMgYSAnbGVhZmxldC1kaXYtaWNvbicgQ1NTIGNsYXNzIGFuZCBpcyBzdHlsZWQgYXMgYSBsaXR0bGUgd2hpdGUgc3F1YXJlIHdpdGggYSBzaGFkb3cuCiAgICovCgogIHZhciBEaXZJY29uID0gSWNvbi5leHRlbmQoewogIAlvcHRpb25zOiB7CiAgCQkvLyBAc2VjdGlvbgogIAkJLy8gQGFrYSBEaXZJY29uIG9wdGlvbnMKICAJCWljb25TaXplOiBbMTIsIDEyXSwgLy8gYWxzbyBjYW4gYmUgc2V0IHRocm91Z2ggQ1NTCgogIAkJLy8gaWNvbkFuY2hvcjogKFBvaW50KSwKICAJCS8vIHBvcHVwQW5jaG9yOiAoUG9pbnQpLAoKICAJCS8vIEBvcHRpb24gaHRtbDogU3RyaW5nfEhUTUxFbGVtZW50ID0gJycKICAJCS8vIEN1c3RvbSBIVE1MIGNvZGUgdG8gcHV0IGluc2lkZSB0aGUgZGl2IGVsZW1lbnQsIGVtcHR5IGJ5IGRlZmF1bHQuIEFsdGVybmF0aXZlbHksCiAgCQkvLyBhbiBpbnN0YW5jZSBvZiBgSFRNTEVsZW1lbnRgLgogIAkJaHRtbDogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBiZ1BvczogUG9pbnQgPSBbMCwgMF0KICAJCS8vIE9wdGlvbmFsIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBiYWNrZ3JvdW5kLCBpbiBwaXhlbHMKICAJCWJnUG9zOiBudWxsLAoKICAJCWNsYXNzTmFtZTogJ2xlYWZsZXQtZGl2LWljb24nCiAgCX0sCgogIAljcmVhdGVJY29uOiBmdW5jdGlvbiAob2xkSWNvbikgewogIAkJdmFyIGRpdiA9IChvbGRJY29uICYmIG9sZEljb24udGFnTmFtZSA9PT0gJ0RJVicpID8gb2xkSWNvbiA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLAogIAkJICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgogIAkJaWYgKG9wdGlvbnMuaHRtbCBpbnN0YW5jZW9mIEVsZW1lbnQpIHsKICAJCQllbXB0eShkaXYpOwogIAkJCWRpdi5hcHBlbmRDaGlsZChvcHRpb25zLmh0bWwpOwogIAkJfSBlbHNlIHsKICAJCQlkaXYuaW5uZXJIVE1MID0gb3B0aW9ucy5odG1sICE9PSBmYWxzZSA/IG9wdGlvbnMuaHRtbCA6ICcnOwogIAkJfQoKICAJCWlmIChvcHRpb25zLmJnUG9zKSB7CiAgCQkJdmFyIGJnUG9zID0gdG9Qb2ludChvcHRpb25zLmJnUG9zKTsKICAJCQlkaXYuc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gKC1iZ1Bvcy54KSArICdweCAnICsgKC1iZ1Bvcy55KSArICdweCc7CiAgCQl9CiAgCQl0aGlzLl9zZXRJY29uU3R5bGVzKGRpdiwgJ2ljb24nKTsKCiAgCQlyZXR1cm4gZGl2OwogIAl9LAoKICAJY3JlYXRlU2hhZG93OiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gbnVsbDsKICAJfQogIH0pOwoKICAvLyBAZmFjdG9yeSBMLmRpdkljb24ob3B0aW9uczogRGl2SWNvbiBvcHRpb25zKQogIC8vIENyZWF0ZXMgYSBgRGl2SWNvbmAgaW5zdGFuY2Ugd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy4KICBmdW5jdGlvbiBkaXZJY29uKG9wdGlvbnMpIHsKICAJcmV0dXJuIG5ldyBEaXZJY29uKG9wdGlvbnMpOwogIH0KCiAgSWNvbi5EZWZhdWx0ID0gSWNvbkRlZmF1bHQ7CgogIC8qCiAgICogQGNsYXNzIEdyaWRMYXllcgogICAqIEBpbmhlcml0cyBMYXllcgogICAqIEBha2EgTC5HcmlkTGF5ZXIKICAgKgogICAqIEdlbmVyaWMgY2xhc3MgZm9yIGhhbmRsaW5nIGEgdGlsZWQgZ3JpZCBvZiBIVE1MIGVsZW1lbnRzLiBUaGlzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBhbGwgdGlsZSBsYXllcnMgYW5kIHJlcGxhY2VzIGBUaWxlTGF5ZXIuQ2FudmFzYC4KICAgKiBHcmlkTGF5ZXIgY2FuIGJlIGV4dGVuZGVkIHRvIGNyZWF0ZSBhIHRpbGVkIGdyaWQgb2YgSFRNTCBlbGVtZW50cyBsaWtlIGA8Y2FudmFzPmAsIGA8aW1nPmAgb3IgYDxkaXY+YC4gR3JpZExheWVyIHdpbGwgaGFuZGxlIGNyZWF0aW5nIGFuZCBhbmltYXRpbmcgdGhlc2UgRE9NIGVsZW1lbnRzIGZvciB5b3UuCiAgICoKICAgKgogICAqIEBzZWN0aW9uIFN5bmNocm9ub3VzIHVzYWdlCiAgICogQGV4YW1wbGUKICAgKgogICAqIFRvIGNyZWF0ZSBhIGN1c3RvbSBsYXllciwgZXh0ZW5kIEdyaWRMYXllciBhbmQgaW1wbGVtZW50IHRoZSBgY3JlYXRlVGlsZSgpYCBtZXRob2QsIHdoaWNoIHdpbGwgYmUgcGFzc2VkIGEgYFBvaW50YCBvYmplY3Qgd2l0aCB0aGUgYHhgLCBgeWAsIGFuZCBgemAgKHpvb20gbGV2ZWwpIGNvb3JkaW5hdGVzIHRvIGRyYXcgeW91ciB0aWxlLgogICAqCiAgICogYGBganMKICAgKiB2YXIgQ2FudmFzTGF5ZXIgPSBMLkdyaWRMYXllci5leHRlbmQoewogICAqICAgICBjcmVhdGVUaWxlOiBmdW5jdGlvbihjb29yZHMpewogICAqICAgICAgICAgLy8gY3JlYXRlIGEgPGNhbnZhcz4gZWxlbWVudCBmb3IgZHJhd2luZwogICAqICAgICAgICAgdmFyIHRpbGUgPSBMLkRvbVV0aWwuY3JlYXRlKCdjYW52YXMnLCAnbGVhZmxldC10aWxlJyk7CiAgICoKICAgKiAgICAgICAgIC8vIHNldHVwIHRpbGUgd2lkdGggYW5kIGhlaWdodCBhY2NvcmRpbmcgdG8gdGhlIG9wdGlvbnMKICAgKiAgICAgICAgIHZhciBzaXplID0gdGhpcy5nZXRUaWxlU2l6ZSgpOwogICAqICAgICAgICAgdGlsZS53aWR0aCA9IHNpemUueDsKICAgKiAgICAgICAgIHRpbGUuaGVpZ2h0ID0gc2l6ZS55OwogICAqCiAgICogICAgICAgICAvLyBnZXQgYSBjYW52YXMgY29udGV4dCBhbmQgZHJhdyBzb21ldGhpbmcgb24gaXQgdXNpbmcgY29vcmRzLngsIGNvb3Jkcy55IGFuZCBjb29yZHMuegogICAqICAgICAgICAgdmFyIGN0eCA9IHRpbGUuZ2V0Q29udGV4dCgnMmQnKTsKICAgKgogICAqICAgICAgICAgLy8gcmV0dXJuIHRoZSB0aWxlIHNvIGl0IGNhbiBiZSByZW5kZXJlZCBvbiBzY3JlZW4KICAgKiAgICAgICAgIHJldHVybiB0aWxlOwogICAqICAgICB9CiAgICogfSk7CiAgICogYGBgCiAgICoKICAgKiBAc2VjdGlvbiBBc3luY2hyb25vdXMgdXNhZ2UKICAgKiBAZXhhbXBsZQogICAqCiAgICogVGlsZSBjcmVhdGlvbiBjYW4gYWxzbyBiZSBhc3luY2hyb25vdXMsIHRoaXMgaXMgdXNlZnVsIHdoZW4gdXNpbmcgYSB0aGlyZC1wYXJ0eSBkcmF3aW5nIGxpYnJhcnkuIE9uY2UgdGhlIHRpbGUgaXMgZmluaXNoZWQgZHJhd2luZyBpdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBgZG9uZSgpYCBjYWxsYmFjay4KICAgKgogICAqIGBgYGpzCiAgICogdmFyIENhbnZhc0xheWVyID0gTC5HcmlkTGF5ZXIuZXh0ZW5kKHsKICAgKiAgICAgY3JlYXRlVGlsZTogZnVuY3Rpb24oY29vcmRzLCBkb25lKXsKICAgKiAgICAgICAgIHZhciBlcnJvcjsKICAgKgogICAqICAgICAgICAgLy8gY3JlYXRlIGEgPGNhbnZhcz4gZWxlbWVudCBmb3IgZHJhd2luZwogICAqICAgICAgICAgdmFyIHRpbGUgPSBMLkRvbVV0aWwuY3JlYXRlKCdjYW52YXMnLCAnbGVhZmxldC10aWxlJyk7CiAgICoKICAgKiAgICAgICAgIC8vIHNldHVwIHRpbGUgd2lkdGggYW5kIGhlaWdodCBhY2NvcmRpbmcgdG8gdGhlIG9wdGlvbnMKICAgKiAgICAgICAgIHZhciBzaXplID0gdGhpcy5nZXRUaWxlU2l6ZSgpOwogICAqICAgICAgICAgdGlsZS53aWR0aCA9IHNpemUueDsKICAgKiAgICAgICAgIHRpbGUuaGVpZ2h0ID0gc2l6ZS55OwogICAqCiAgICogICAgICAgICAvLyBkcmF3IHNvbWV0aGluZyBhc3luY2hyb25vdXNseSBhbmQgcGFzcyB0aGUgdGlsZSB0byB0aGUgZG9uZSgpIGNhbGxiYWNrCiAgICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAqICAgICAgICAgICAgIGRvbmUoZXJyb3IsIHRpbGUpOwogICAqICAgICAgICAgfSwgMTAwMCk7CiAgICoKICAgKiAgICAgICAgIHJldHVybiB0aWxlOwogICAqICAgICB9CiAgICogfSk7CiAgICogYGBgCiAgICoKICAgKiBAc2VjdGlvbgogICAqLwoKCiAgdmFyIEdyaWRMYXllciA9IExheWVyLmV4dGVuZCh7CgogIAkvLyBAc2VjdGlvbgogIAkvLyBAYWthIEdyaWRMYXllciBvcHRpb25zCiAgCW9wdGlvbnM6IHsKICAJCS8vIEBvcHRpb24gdGlsZVNpemU6IE51bWJlcnxQb2ludCA9IDI1NgogIAkJLy8gV2lkdGggYW5kIGhlaWdodCBvZiB0aWxlcyBpbiB0aGUgZ3JpZC4gVXNlIGEgbnVtYmVyIGlmIHdpZHRoIGFuZCBoZWlnaHQgYXJlIGVxdWFsLCBvciBgTC5wb2ludCh3aWR0aCwgaGVpZ2h0KWAgb3RoZXJ3aXNlLgogIAkJdGlsZVNpemU6IDI1NiwKCiAgCQkvLyBAb3B0aW9uIG9wYWNpdHk6IE51bWJlciA9IDEuMAogIAkJLy8gT3BhY2l0eSBvZiB0aGUgdGlsZXMuIENhbiBiZSB1c2VkIGluIHRoZSBgY3JlYXRlVGlsZSgpYCBmdW5jdGlvbi4KICAJCW9wYWNpdHk6IDEsCgogIAkJLy8gQG9wdGlvbiB1cGRhdGVXaGVuSWRsZTogQm9vbGVhbiA9IChkZXBlbmRzKQogIAkJLy8gTG9hZCBuZXcgdGlsZXMgb25seSB3aGVuIHBhbm5pbmcgZW5kcy4KICAJCS8vIGB0cnVlYCBieSBkZWZhdWx0IG9uIG1vYmlsZSBicm93c2VycywgaW4gb3JkZXIgdG8gYXZvaWQgdG9vIG1hbnkgcmVxdWVzdHMgYW5kIGtlZXAgc21vb3RoIG5hdmlnYXRpb24uCiAgCQkvLyBgZmFsc2VgIG90aGVyd2lzZSBpbiBvcmRlciB0byBkaXNwbGF5IG5ldyB0aWxlcyBfZHVyaW5nXyBwYW5uaW5nLCBzaW5jZSBpdCBpcyBlYXN5IHRvIHBhbiBvdXRzaWRlIHRoZQogIAkJLy8gW2BrZWVwQnVmZmVyYF0oI2dyaWRsYXllci1rZWVwYnVmZmVyKSBvcHRpb24gaW4gZGVza3RvcCBicm93c2Vycy4KICAJCXVwZGF0ZVdoZW5JZGxlOiBCcm93c2VyLm1vYmlsZSwKCiAgCQkvLyBAb3B0aW9uIHVwZGF0ZVdoZW5ab29taW5nOiBCb29sZWFuID0gdHJ1ZQogIAkJLy8gQnkgZGVmYXVsdCwgYSBzbW9vdGggem9vbSBhbmltYXRpb24gKGR1cmluZyBhIFt0b3VjaCB6b29tXSgjbWFwLXRvdWNoem9vbSkgb3IgYSBbYGZseVRvKClgXSgjbWFwLWZseXRvKSkgd2lsbCB1cGRhdGUgZ3JpZCBsYXllcnMgZXZlcnkgaW50ZWdlciB6b29tIGxldmVsLiBTZXR0aW5nIHRoaXMgb3B0aW9uIHRvIGBmYWxzZWAgd2lsbCB1cGRhdGUgdGhlIGdyaWQgbGF5ZXIgb25seSB3aGVuIHRoZSBzbW9vdGggYW5pbWF0aW9uIGVuZHMuCiAgCQl1cGRhdGVXaGVuWm9vbWluZzogdHJ1ZSwKCiAgCQkvLyBAb3B0aW9uIHVwZGF0ZUludGVydmFsOiBOdW1iZXIgPSAyMDAKICAJCS8vIFRpbGVzIHdpbGwgbm90IHVwZGF0ZSBtb3JlIHRoYW4gb25jZSBldmVyeSBgdXBkYXRlSW50ZXJ2YWxgIG1pbGxpc2Vjb25kcyB3aGVuIHBhbm5pbmcuCiAgCQl1cGRhdGVJbnRlcnZhbDogMjAwLAoKICAJCS8vIEBvcHRpb24gekluZGV4OiBOdW1iZXIgPSAxCiAgCQkvLyBUaGUgZXhwbGljaXQgekluZGV4IG9mIHRoZSB0aWxlIGxheWVyLgogIAkJekluZGV4OiAxLAoKICAJCS8vIEBvcHRpb24gYm91bmRzOiBMYXRMbmdCb3VuZHMgPSB1bmRlZmluZWQKICAJCS8vIElmIHNldCwgdGlsZXMgd2lsbCBvbmx5IGJlIGxvYWRlZCBpbnNpZGUgdGhlIHNldCBgTGF0TG5nQm91bmRzYC4KICAJCWJvdW5kczogbnVsbCwKCiAgCQkvLyBAb3B0aW9uIG1pblpvb206IE51bWJlciA9IDAKICAJCS8vIFRoZSBtaW5pbXVtIHpvb20gbGV2ZWwgZG93biB0byB3aGljaCB0aGlzIGxheWVyIHdpbGwgYmUgZGlzcGxheWVkIChpbmNsdXNpdmUpLgogIAkJbWluWm9vbTogMCwKCiAgCQkvLyBAb3B0aW9uIG1heFpvb206IE51bWJlciA9IHVuZGVmaW5lZAogIAkJLy8gVGhlIG1heGltdW0gem9vbSBsZXZlbCB1cCB0byB3aGljaCB0aGlzIGxheWVyIHdpbGwgYmUgZGlzcGxheWVkIChpbmNsdXNpdmUpLgogIAkJbWF4Wm9vbTogdW5kZWZpbmVkLAoKICAJCS8vIEBvcHRpb24gbWF4TmF0aXZlWm9vbTogTnVtYmVyID0gdW5kZWZpbmVkCiAgCQkvLyBNYXhpbXVtIHpvb20gbnVtYmVyIHRoZSB0aWxlIHNvdXJjZSBoYXMgYXZhaWxhYmxlLiBJZiBpdCBpcyBzcGVjaWZpZWQsCiAgCQkvLyB0aGUgdGlsZXMgb24gYWxsIHpvb20gbGV2ZWxzIGhpZ2hlciB0aGFuIGBtYXhOYXRpdmVab29tYCB3aWxsIGJlIGxvYWRlZAogIAkJLy8gZnJvbSBgbWF4TmF0aXZlWm9vbWAgbGV2ZWwgYW5kIGF1dG8tc2NhbGVkLgogIAkJbWF4TmF0aXZlWm9vbTogdW5kZWZpbmVkLAoKICAJCS8vIEBvcHRpb24gbWluTmF0aXZlWm9vbTogTnVtYmVyID0gdW5kZWZpbmVkCiAgCQkvLyBNaW5pbXVtIHpvb20gbnVtYmVyIHRoZSB0aWxlIHNvdXJjZSBoYXMgYXZhaWxhYmxlLiBJZiBpdCBpcyBzcGVjaWZpZWQsCiAgCQkvLyB0aGUgdGlsZXMgb24gYWxsIHpvb20gbGV2ZWxzIGxvd2VyIHRoYW4gYG1pbk5hdGl2ZVpvb21gIHdpbGwgYmUgbG9hZGVkCiAgCQkvLyBmcm9tIGBtaW5OYXRpdmVab29tYCBsZXZlbCBhbmQgYXV0by1zY2FsZWQuCiAgCQltaW5OYXRpdmVab29tOiB1bmRlZmluZWQsCgogIAkJLy8gQG9wdGlvbiBub1dyYXA6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gV2hldGhlciB0aGUgbGF5ZXIgaXMgd3JhcHBlZCBhcm91bmQgdGhlIGFudGltZXJpZGlhbi4gSWYgYHRydWVgLCB0aGUKICAJCS8vIEdyaWRMYXllciB3aWxsIG9ubHkgYmUgZGlzcGxheWVkIG9uY2UgYXQgbG93IHpvb20gbGV2ZWxzLiBIYXMgbm8KICAJCS8vIGVmZmVjdCB3aGVuIHRoZSBbbWFwIENSU10oI21hcC1jcnMpIGRvZXNuJ3Qgd3JhcCBhcm91bmQuIENhbiBiZSB1c2VkCiAgCQkvLyBpbiBjb21iaW5hdGlvbiB3aXRoIFtgYm91bmRzYF0oI2dyaWRsYXllci1ib3VuZHMpIHRvIHByZXZlbnQgcmVxdWVzdGluZwogIAkJLy8gdGlsZXMgb3V0c2lkZSB0aGUgQ1JTIGxpbWl0cy4KICAJCW5vV3JhcDogZmFsc2UsCgogIAkJLy8gQG9wdGlvbiBwYW5lOiBTdHJpbmcgPSAndGlsZVBhbmUnCiAgCQkvLyBgTWFwIHBhbmVgIHdoZXJlIHRoZSBncmlkIGxheWVyIHdpbGwgYmUgYWRkZWQuCiAgCQlwYW5lOiAndGlsZVBhbmUnLAoKICAJCS8vIEBvcHRpb24gY2xhc3NOYW1lOiBTdHJpbmcgPSAnJwogIAkJLy8gQSBjdXN0b20gY2xhc3MgbmFtZSB0byBhc3NpZ24gdG8gdGhlIHRpbGUgbGF5ZXIuIEVtcHR5IGJ5IGRlZmF1bHQuCiAgCQljbGFzc05hbWU6ICcnLAoKICAJCS8vIEBvcHRpb24ga2VlcEJ1ZmZlcjogTnVtYmVyID0gMgogIAkJLy8gV2hlbiBwYW5uaW5nIHRoZSBtYXAsIGtlZXAgdGhpcyBtYW55IHJvd3MgYW5kIGNvbHVtbnMgb2YgdGlsZXMgYmVmb3JlIHVubG9hZGluZyB0aGVtLgogIAkJa2VlcEJ1ZmZlcjogMgogIAl9LAoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAJCXNldE9wdGlvbnModGhpcywgb3B0aW9ucyk7CiAgCX0sCgogIAlvbkFkZDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5faW5pdENvbnRhaW5lcigpOwoKICAJCXRoaXMuX2xldmVscyA9IHt9OwogIAkJdGhpcy5fdGlsZXMgPSB7fTsKCiAgCQl0aGlzLl9yZXNldFZpZXcoKTsgLy8gaW1wbGljaXQgX3VwZGF0ZSgpIGNhbGwKICAJfSwKCiAgCWJlZm9yZUFkZDogZnVuY3Rpb24gKG1hcCkgewogIAkJbWFwLl9hZGRab29tTGltaXQodGhpcyk7CiAgCX0sCgogIAlvblJlbW92ZTogZnVuY3Rpb24gKG1hcCkgewogIAkJdGhpcy5fcmVtb3ZlQWxsVGlsZXMoKTsKICAJCXJlbW92ZSh0aGlzLl9jb250YWluZXIpOwogIAkJbWFwLl9yZW1vdmVab29tTGltaXQodGhpcyk7CiAgCQl0aGlzLl9jb250YWluZXIgPSBudWxsOwogIAkJdGhpcy5fdGlsZVpvb20gPSB1bmRlZmluZWQ7CiAgCX0sCgogIAkvLyBAbWV0aG9kIGJyaW5nVG9Gcm9udDogdGhpcwogIAkvLyBCcmluZ3MgdGhlIHRpbGUgbGF5ZXIgdG8gdGhlIHRvcCBvZiBhbGwgdGlsZSBsYXllcnMuCiAgCWJyaW5nVG9Gcm9udDogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX21hcCkgewogIAkJCXRvRnJvbnQodGhpcy5fY29udGFpbmVyKTsKICAJCQl0aGlzLl9zZXRBdXRvWkluZGV4KE1hdGgubWF4KTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJLy8gQG1ldGhvZCBicmluZ1RvQmFjazogdGhpcwogIAkvLyBCcmluZ3MgdGhlIHRpbGUgbGF5ZXIgdG8gdGhlIGJvdHRvbSBvZiBhbGwgdGlsZSBsYXllcnMuCiAgCWJyaW5nVG9CYWNrOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fbWFwKSB7CiAgCQkJdG9CYWNrKHRoaXMuX2NvbnRhaW5lcik7CiAgCQkJdGhpcy5fc2V0QXV0b1pJbmRleChNYXRoLm1pbik7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgZ2V0Q29udGFpbmVyOiBIVE1MRWxlbWVudAogIAkvLyBSZXR1cm5zIHRoZSBIVE1MIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgdGlsZXMgZm9yIHRoaXMgbGF5ZXIuCiAgCWdldENvbnRhaW5lcjogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjsKICAJfSwKCiAgCS8vIEBtZXRob2Qgc2V0T3BhY2l0eShvcGFjaXR5OiBOdW1iZXIpOiB0aGlzCiAgCS8vIENoYW5nZXMgdGhlIFtvcGFjaXR5XSgjZ3JpZGxheWVyLW9wYWNpdHkpIG9mIHRoZSBncmlkIGxheWVyLgogIAlzZXRPcGFjaXR5OiBmdW5jdGlvbiAob3BhY2l0eSkgewogIAkJdGhpcy5vcHRpb25zLm9wYWNpdHkgPSBvcGFjaXR5OwogIAkJdGhpcy5fdXBkYXRlT3BhY2l0eSgpOwogIAkJcmV0dXJuIHRoaXM7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFpJbmRleCh6SW5kZXg6IE51bWJlcik6IHRoaXMKICAJLy8gQ2hhbmdlcyB0aGUgW3pJbmRleF0oI2dyaWRsYXllci16aW5kZXgpIG9mIHRoZSBncmlkIGxheWVyLgogIAlzZXRaSW5kZXg6IGZ1bmN0aW9uICh6SW5kZXgpIHsKICAJCXRoaXMub3B0aW9ucy56SW5kZXggPSB6SW5kZXg7CiAgCQl0aGlzLl91cGRhdGVaSW5kZXgoKTsKCiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgaXNMb2FkaW5nOiBCb29sZWFuCiAgCS8vIFJldHVybnMgYHRydWVgIGlmIGFueSB0aWxlIGluIHRoZSBncmlkIGxheWVyIGhhcyBub3QgZmluaXNoZWQgbG9hZGluZy4KICAJaXNMb2FkaW5nOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbG9hZGluZzsKICAJfSwKCiAgCS8vIEBtZXRob2QgcmVkcmF3OiB0aGlzCiAgCS8vIENhdXNlcyB0aGUgbGF5ZXIgdG8gY2xlYXIgYWxsIHRoZSB0aWxlcyBhbmQgcmVxdWVzdCB0aGVtIGFnYWluLgogIAlyZWRyYXc6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9tYXApIHsKICAJCQl0aGlzLl9yZW1vdmVBbGxUaWxlcygpOwogIAkJCXZhciB0aWxlWm9vbSA9IHRoaXMuX2NsYW1wWm9vbSh0aGlzLl9tYXAuZ2V0Wm9vbSgpKTsKICAJCQlpZiAodGlsZVpvb20gIT09IHRoaXMuX3RpbGVab29tKSB7CiAgCQkJCXRoaXMuX3RpbGVab29tID0gdGlsZVpvb207CiAgCQkJCXRoaXMuX3VwZGF0ZUxldmVscygpOwogIAkJCX0KICAJCQl0aGlzLl91cGRhdGUoKTsKICAJCX0KICAJCXJldHVybiB0aGlzOwogIAl9LAoKICAJZ2V0RXZlbnRzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgZXZlbnRzID0gewogIAkJCXZpZXdwcmVyZXNldDogdGhpcy5faW52YWxpZGF0ZUFsbCwKICAJCQl2aWV3cmVzZXQ6IHRoaXMuX3Jlc2V0VmlldywKICAJCQl6b29tOiB0aGlzLl9yZXNldFZpZXcsCiAgCQkJbW92ZWVuZDogdGhpcy5fb25Nb3ZlRW5kCiAgCQl9OwoKICAJCWlmICghdGhpcy5vcHRpb25zLnVwZGF0ZVdoZW5JZGxlKSB7CiAgCQkJLy8gdXBkYXRlIHRpbGVzIG9uIG1vdmUsIGJ1dCBub3QgbW9yZSBvZnRlbiB0aGFuIG9uY2UgcGVyIGdpdmVuIGludGVydmFsCiAgCQkJaWYgKCF0aGlzLl9vbk1vdmUpIHsKICAJCQkJdGhpcy5fb25Nb3ZlID0gdGhyb3R0bGUodGhpcy5fb25Nb3ZlRW5kLCB0aGlzLm9wdGlvbnMudXBkYXRlSW50ZXJ2YWwsIHRoaXMpOwogIAkJCX0KCiAgCQkJZXZlbnRzLm1vdmUgPSB0aGlzLl9vbk1vdmU7CiAgCQl9CgogIAkJaWYgKHRoaXMuX3pvb21BbmltYXRlZCkgewogIAkJCWV2ZW50cy56b29tYW5pbSA9IHRoaXMuX2FuaW1hdGVab29tOwogIAkJfQoKICAJCXJldHVybiBldmVudHM7CiAgCX0sCgogIAkvLyBAc2VjdGlvbiBFeHRlbnNpb24gbWV0aG9kcwogIAkvLyBMYXllcnMgZXh0ZW5kaW5nIGBHcmlkTGF5ZXJgIHNoYWxsIHJlaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgbWV0aG9kLgogIAkvLyBAbWV0aG9kIGNyZWF0ZVRpbGUoY29vcmRzOiBPYmplY3QsIGRvbmU/OiBGdW5jdGlvbik6IEhUTUxFbGVtZW50CiAgCS8vIENhbGxlZCBvbmx5IGludGVybmFsbHksIG11c3QgYmUgb3ZlcnJpZGRlbiBieSBjbGFzc2VzIGV4dGVuZGluZyBgR3JpZExheWVyYC4KICAJLy8gUmV0dXJucyB0aGUgYEhUTUxFbGVtZW50YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBgY29vcmRzYC4gSWYgdGhlIGBkb25lYCBjYWxsYmFjawogIAkvLyBpcyBzcGVjaWZpZWQsIGl0IG11c3QgYmUgY2FsbGVkIHdoZW4gdGhlIHRpbGUgaGFzIGZpbmlzaGVkIGxvYWRpbmcgYW5kIGRyYXdpbmcuCiAgCWNyZWF0ZVRpbGU6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAJfSwKCiAgCS8vIEBzZWN0aW9uCiAgCS8vIEBtZXRob2QgZ2V0VGlsZVNpemU6IFBvaW50CiAgCS8vIE5vcm1hbGl6ZXMgdGhlIFt0aWxlU2l6ZSBvcHRpb25dKCNncmlkbGF5ZXItdGlsZXNpemUpIGludG8gYSBwb2ludC4gVXNlZCBieSB0aGUgYGNyZWF0ZVRpbGUoKWAgbWV0aG9kLgogIAlnZXRUaWxlU2l6ZTogZnVuY3Rpb24gKCkgewogIAkJdmFyIHMgPSB0aGlzLm9wdGlvbnMudGlsZVNpemU7CiAgCQlyZXR1cm4gcyBpbnN0YW5jZW9mIFBvaW50ID8gcyA6IG5ldyBQb2ludChzLCBzKTsKICAJfSwKCiAgCV91cGRhdGVaSW5kZXg6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9jb250YWluZXIgJiYgdGhpcy5vcHRpb25zLnpJbmRleCAhPT0gdW5kZWZpbmVkICYmIHRoaXMub3B0aW9ucy56SW5kZXggIT09IG51bGwpIHsKICAJCQl0aGlzLl9jb250YWluZXIuc3R5bGUuekluZGV4ID0gdGhpcy5vcHRpb25zLnpJbmRleDsKICAJCX0KICAJfSwKCiAgCV9zZXRBdXRvWkluZGV4OiBmdW5jdGlvbiAoY29tcGFyZSkgewogIAkJLy8gZ28gdGhyb3VnaCBhbGwgb3RoZXIgbGF5ZXJzIG9mIHRoZSBzYW1lIHBhbmUsIHNldCB6SW5kZXggdG8gbWF4ICsgMSAoZnJvbnQpIG9yIG1pbiAtIDEgKGJhY2spCgogIAkJdmFyIGxheWVycyA9IHRoaXMuZ2V0UGFuZSgpLmNoaWxkcmVuLAogIAkJICAgIGVkZ2VaSW5kZXggPSAtY29tcGFyZSgtSW5maW5pdHksIEluZmluaXR5KTsgLy8gLUluZmluaXR5IGZvciBtYXgsIEluZmluaXR5IGZvciBtaW4KCiAgCQlmb3IgKHZhciBpID0gMCwgbGVuID0gbGF5ZXJzLmxlbmd0aCwgekluZGV4OyBpIDwgbGVuOyBpKyspIHsKCiAgCQkJekluZGV4ID0gbGF5ZXJzW2ldLnN0eWxlLnpJbmRleDsKCiAgCQkJaWYgKGxheWVyc1tpXSAhPT0gdGhpcy5fY29udGFpbmVyICYmIHpJbmRleCkgewogIAkJCQllZGdlWkluZGV4ID0gY29tcGFyZShlZGdlWkluZGV4LCArekluZGV4KTsKICAJCQl9CiAgCQl9CgogIAkJaWYgKGlzRmluaXRlKGVkZ2VaSW5kZXgpKSB7CiAgCQkJdGhpcy5vcHRpb25zLnpJbmRleCA9IGVkZ2VaSW5kZXggKyBjb21wYXJlKC0xLCAxKTsKICAJCQl0aGlzLl91cGRhdGVaSW5kZXgoKTsKICAJCX0KICAJfSwKCiAgCV91cGRhdGVPcGFjaXR5OiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX21hcCkgeyByZXR1cm47IH0KCiAgCQkvLyBJRSBkb2Vzbid0IGluaGVyaXQgZmlsdGVyIG9wYWNpdHkgcHJvcGVybHksIHNvIHdlJ3JlIGZvcmNlZCB0byBzZXQgaXQgb24gdGlsZXMKICAJCWlmIChCcm93c2VyLmllbHQ5KSB7IHJldHVybjsgfQoKICAJCXNldE9wYWNpdHkodGhpcy5fY29udGFpbmVyLCB0aGlzLm9wdGlvbnMub3BhY2l0eSk7CgogIAkJdmFyIG5vdyA9ICtuZXcgRGF0ZSgpLAogIAkJICAgIG5leHRGcmFtZSA9IGZhbHNlLAogIAkJICAgIHdpbGxQcnVuZSA9IGZhbHNlOwoKICAJCWZvciAodmFyIGtleSBpbiB0aGlzLl90aWxlcykgewogIAkJCXZhciB0aWxlID0gdGhpcy5fdGlsZXNba2V5XTsKICAJCQlpZiAoIXRpbGUuY3VycmVudCB8fCAhdGlsZS5sb2FkZWQpIHsgY29udGludWU7IH0KCiAgCQkJdmFyIGZhZGUgPSBNYXRoLm1pbigxLCAobm93IC0gdGlsZS5sb2FkZWQpIC8gMjAwKTsKCiAgCQkJc2V0T3BhY2l0eSh0aWxlLmVsLCBmYWRlKTsKICAJCQlpZiAoZmFkZSA8IDEpIHsKICAJCQkJbmV4dEZyYW1lID0gdHJ1ZTsKICAJCQl9IGVsc2UgewogIAkJCQlpZiAodGlsZS5hY3RpdmUpIHsKICAJCQkJCXdpbGxQcnVuZSA9IHRydWU7CiAgCQkJCX0gZWxzZSB7CiAgCQkJCQl0aGlzLl9vbk9wYXF1ZVRpbGUodGlsZSk7CiAgCQkJCX0KICAJCQkJdGlsZS5hY3RpdmUgPSB0cnVlOwogIAkJCX0KICAJCX0KCiAgCQlpZiAod2lsbFBydW5lICYmICF0aGlzLl9ub1BydW5lKSB7IHRoaXMuX3BydW5lVGlsZXMoKTsgfQoKICAJCWlmIChuZXh0RnJhbWUpIHsKICAJCQljYW5jZWxBbmltRnJhbWUodGhpcy5fZmFkZUZyYW1lKTsKICAJCQl0aGlzLl9mYWRlRnJhbWUgPSByZXF1ZXN0QW5pbUZyYW1lKHRoaXMuX3VwZGF0ZU9wYWNpdHksIHRoaXMpOwogIAkJfQogIAl9LAoKICAJX29uT3BhcXVlVGlsZTogZmFsc2VGbiwKCiAgCV9pbml0Q29udGFpbmVyOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fY29udGFpbmVyKSB7IHJldHVybjsgfQoKICAJCXRoaXMuX2NvbnRhaW5lciA9IGNyZWF0ZSQxKCdkaXYnLCAnbGVhZmxldC1sYXllciAnICsgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUgfHwgJycpKTsKICAJCXRoaXMuX3VwZGF0ZVpJbmRleCgpOwoKICAJCWlmICh0aGlzLm9wdGlvbnMub3BhY2l0eSA8IDEpIHsKICAJCQl0aGlzLl91cGRhdGVPcGFjaXR5KCk7CiAgCQl9CgogIAkJdGhpcy5nZXRQYW5lKCkuYXBwZW5kQ2hpbGQodGhpcy5fY29udGFpbmVyKTsKICAJfSwKCiAgCV91cGRhdGVMZXZlbHM6IGZ1bmN0aW9uICgpIHsKCiAgCQl2YXIgem9vbSA9IHRoaXMuX3RpbGVab29tLAogIAkJICAgIG1heFpvb20gPSB0aGlzLm9wdGlvbnMubWF4Wm9vbTsKCiAgCQlpZiAoem9vbSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0KCiAgCQlmb3IgKHZhciB6IGluIHRoaXMuX2xldmVscykgewogIAkJCXogPSBOdW1iZXIoeik7CiAgCQkJaWYgKHRoaXMuX2xldmVsc1t6XS5lbC5jaGlsZHJlbi5sZW5ndGggfHwgeiA9PT0gem9vbSkgewogIAkJCQl0aGlzLl9sZXZlbHNbel0uZWwuc3R5bGUuekluZGV4ID0gbWF4Wm9vbSAtIE1hdGguYWJzKHpvb20gLSB6KTsKICAJCQkJdGhpcy5fb25VcGRhdGVMZXZlbCh6KTsKICAJCQl9IGVsc2UgewogIAkJCQlyZW1vdmUodGhpcy5fbGV2ZWxzW3pdLmVsKTsKICAJCQkJdGhpcy5fcmVtb3ZlVGlsZXNBdFpvb20oeik7CiAgCQkJCXRoaXMuX29uUmVtb3ZlTGV2ZWwoeik7CiAgCQkJCWRlbGV0ZSB0aGlzLl9sZXZlbHNbel07CiAgCQkJfQogIAkJfQoKICAJCXZhciBsZXZlbCA9IHRoaXMuX2xldmVsc1t6b29tXSwKICAJCSAgICBtYXAgPSB0aGlzLl9tYXA7CgogIAkJaWYgKCFsZXZlbCkgewogIAkJCWxldmVsID0gdGhpcy5fbGV2ZWxzW3pvb21dID0ge307CgogIAkJCWxldmVsLmVsID0gY3JlYXRlJDEoJ2RpdicsICdsZWFmbGV0LXRpbGUtY29udGFpbmVyIGxlYWZsZXQtem9vbS1hbmltYXRlZCcsIHRoaXMuX2NvbnRhaW5lcik7CiAgCQkJbGV2ZWwuZWwuc3R5bGUuekluZGV4ID0gbWF4Wm9vbTsKCiAgCQkJbGV2ZWwub3JpZ2luID0gbWFwLnByb2plY3QobWFwLnVucHJvamVjdChtYXAuZ2V0UGl4ZWxPcmlnaW4oKSksIHpvb20pLnJvdW5kKCk7CiAgCQkJbGV2ZWwuem9vbSA9IHpvb207CgogIAkJCXRoaXMuX3NldFpvb21UcmFuc2Zvcm0obGV2ZWwsIG1hcC5nZXRDZW50ZXIoKSwgbWFwLmdldFpvb20oKSk7CgogIAkJCS8vIGZvcmNlIHRoZSBicm93c2VyIHRvIGNvbnNpZGVyIHRoZSBuZXdseSBhZGRlZCBlbGVtZW50IGZvciB0cmFuc2l0aW9uCiAgCQkJZmFsc2VGbihsZXZlbC5lbC5vZmZzZXRXaWR0aCk7CgogIAkJCXRoaXMuX29uQ3JlYXRlTGV2ZWwobGV2ZWwpOwogIAkJfQoKICAJCXRoaXMuX2xldmVsID0gbGV2ZWw7CgogIAkJcmV0dXJuIGxldmVsOwogIAl9LAoKICAJX29uVXBkYXRlTGV2ZWw6IGZhbHNlRm4sCgogIAlfb25SZW1vdmVMZXZlbDogZmFsc2VGbiwKCiAgCV9vbkNyZWF0ZUxldmVsOiBmYWxzZUZuLAoKICAJX3BydW5lVGlsZXM6IGZ1bmN0aW9uICgpIHsKICAJCWlmICghdGhpcy5fbWFwKSB7CiAgCQkJcmV0dXJuOwogIAkJfQoKICAJCXZhciBrZXksIHRpbGU7CgogIAkJdmFyIHpvb20gPSB0aGlzLl9tYXAuZ2V0Wm9vbSgpOwogIAkJaWYgKHpvb20gPiB0aGlzLm9wdGlvbnMubWF4Wm9vbSB8fAogIAkJCXpvb20gPCB0aGlzLm9wdGlvbnMubWluWm9vbSkgewogIAkJCXRoaXMuX3JlbW92ZUFsbFRpbGVzKCk7CiAgCQkJcmV0dXJuOwogIAkJfQoKICAJCWZvciAoa2V5IGluIHRoaXMuX3RpbGVzKSB7CiAgCQkJdGlsZSA9IHRoaXMuX3RpbGVzW2tleV07CiAgCQkJdGlsZS5yZXRhaW4gPSB0aWxlLmN1cnJlbnQ7CiAgCQl9CgogIAkJZm9yIChrZXkgaW4gdGhpcy5fdGlsZXMpIHsKICAJCQl0aWxlID0gdGhpcy5fdGlsZXNba2V5XTsKICAJCQlpZiAodGlsZS5jdXJyZW50ICYmICF0aWxlLmFjdGl2ZSkgewogIAkJCQl2YXIgY29vcmRzID0gdGlsZS5jb29yZHM7CiAgCQkJCWlmICghdGhpcy5fcmV0YWluUGFyZW50KGNvb3Jkcy54LCBjb29yZHMueSwgY29vcmRzLnosIGNvb3Jkcy56IC0gNSkpIHsKICAJCQkJCXRoaXMuX3JldGFpbkNoaWxkcmVuKGNvb3Jkcy54LCBjb29yZHMueSwgY29vcmRzLnosIGNvb3Jkcy56ICsgMik7CiAgCQkJCX0KICAJCQl9CiAgCQl9CgogIAkJZm9yIChrZXkgaW4gdGhpcy5fdGlsZXMpIHsKICAJCQlpZiAoIXRoaXMuX3RpbGVzW2tleV0ucmV0YWluKSB7CiAgCQkJCXRoaXMuX3JlbW92ZVRpbGUoa2V5KTsKICAJCQl9CiAgCQl9CiAgCX0sCgogIAlfcmVtb3ZlVGlsZXNBdFpvb206IGZ1bmN0aW9uICh6b29tKSB7CiAgCQlmb3IgKHZhciBrZXkgaW4gdGhpcy5fdGlsZXMpIHsKICAJCQlpZiAodGhpcy5fdGlsZXNba2V5XS5jb29yZHMueiAhPT0gem9vbSkgewogIAkJCQljb250aW51ZTsKICAJCQl9CiAgCQkJdGhpcy5fcmVtb3ZlVGlsZShrZXkpOwogIAkJfQogIAl9LAoKICAJX3JlbW92ZUFsbFRpbGVzOiBmdW5jdGlvbiAoKSB7CiAgCQlmb3IgKHZhciBrZXkgaW4gdGhpcy5fdGlsZXMpIHsKICAJCQl0aGlzLl9yZW1vdmVUaWxlKGtleSk7CiAgCQl9CiAgCX0sCgogIAlfaW52YWxpZGF0ZUFsbDogZnVuY3Rpb24gKCkgewogIAkJZm9yICh2YXIgeiBpbiB0aGlzLl9sZXZlbHMpIHsKICAJCQlyZW1vdmUodGhpcy5fbGV2ZWxzW3pdLmVsKTsKICAJCQl0aGlzLl9vblJlbW92ZUxldmVsKE51bWJlcih6KSk7CiAgCQkJZGVsZXRlIHRoaXMuX2xldmVsc1t6XTsKICAJCX0KICAJCXRoaXMuX3JlbW92ZUFsbFRpbGVzKCk7CgogIAkJdGhpcy5fdGlsZVpvb20gPSB1bmRlZmluZWQ7CiAgCX0sCgogIAlfcmV0YWluUGFyZW50OiBmdW5jdGlvbiAoeCwgeSwgeiwgbWluWm9vbSkgewogIAkJdmFyIHgyID0gTWF0aC5mbG9vcih4IC8gMiksCiAgCQkgICAgeTIgPSBNYXRoLmZsb29yKHkgLyAyKSwKICAJCSAgICB6MiA9IHogLSAxLAogIAkJICAgIGNvb3JkczIgPSBuZXcgUG9pbnQoK3gyLCAreTIpOwogIAkJY29vcmRzMi56ID0gK3oyOwoKICAJCXZhciBrZXkgPSB0aGlzLl90aWxlQ29vcmRzVG9LZXkoY29vcmRzMiksCiAgCQkgICAgdGlsZSA9IHRoaXMuX3RpbGVzW2tleV07CgogIAkJaWYgKHRpbGUgJiYgdGlsZS5hY3RpdmUpIHsKICAJCQl0aWxlLnJldGFpbiA9IHRydWU7CiAgCQkJcmV0dXJuIHRydWU7CgogIAkJfSBlbHNlIGlmICh0aWxlICYmIHRpbGUubG9hZGVkKSB7CiAgCQkJdGlsZS5yZXRhaW4gPSB0cnVlOwogIAkJfQoKICAJCWlmICh6MiA+IG1pblpvb20pIHsKICAJCQlyZXR1cm4gdGhpcy5fcmV0YWluUGFyZW50KHgyLCB5MiwgejIsIG1pblpvb20pOwogIAkJfQoKICAJCXJldHVybiBmYWxzZTsKICAJfSwKCiAgCV9yZXRhaW5DaGlsZHJlbjogZnVuY3Rpb24gKHgsIHksIHosIG1heFpvb20pIHsKCiAgCQlmb3IgKHZhciBpID0gMiAqIHg7IGkgPCAyICogeCArIDI7IGkrKykgewogIAkJCWZvciAodmFyIGogPSAyICogeTsgaiA8IDIgKiB5ICsgMjsgaisrKSB7CgogIAkJCQl2YXIgY29vcmRzID0gbmV3IFBvaW50KGksIGopOwogIAkJCQljb29yZHMueiA9IHogKyAxOwoKICAJCQkJdmFyIGtleSA9IHRoaXMuX3RpbGVDb29yZHNUb0tleShjb29yZHMpLAogIAkJCQkgICAgdGlsZSA9IHRoaXMuX3RpbGVzW2tleV07CgogIAkJCQlpZiAodGlsZSAmJiB0aWxlLmFjdGl2ZSkgewogIAkJCQkJdGlsZS5yZXRhaW4gPSB0cnVlOwogIAkJCQkJY29udGludWU7CgogIAkJCQl9IGVsc2UgaWYgKHRpbGUgJiYgdGlsZS5sb2FkZWQpIHsKICAJCQkJCXRpbGUucmV0YWluID0gdHJ1ZTsKICAJCQkJfQoKICAJCQkJaWYgKHogKyAxIDwgbWF4Wm9vbSkgewogIAkJCQkJdGhpcy5fcmV0YWluQ2hpbGRyZW4oaSwgaiwgeiArIDEsIG1heFpvb20pOwogIAkJCQl9CiAgCQkJfQogIAkJfQogIAl9LAoKICAJX3Jlc2V0VmlldzogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBhbmltYXRpbmcgPSBlICYmIChlLnBpbmNoIHx8IGUuZmx5VG8pOwogIAkJdGhpcy5fc2V0Vmlldyh0aGlzLl9tYXAuZ2V0Q2VudGVyKCksIHRoaXMuX21hcC5nZXRab29tKCksIGFuaW1hdGluZywgYW5pbWF0aW5nKTsKICAJfSwKCiAgCV9hbmltYXRlWm9vbTogZnVuY3Rpb24gKGUpIHsKICAJCXRoaXMuX3NldFZpZXcoZS5jZW50ZXIsIGUuem9vbSwgdHJ1ZSwgZS5ub1VwZGF0ZSk7CiAgCX0sCgogIAlfY2xhbXBab29tOiBmdW5jdGlvbiAoem9vbSkgewogIAkJdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7CgogIAkJaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5taW5OYXRpdmVab29tICYmIHpvb20gPCBvcHRpb25zLm1pbk5hdGl2ZVpvb20pIHsKICAJCQlyZXR1cm4gb3B0aW9ucy5taW5OYXRpdmVab29tOwogIAkJfQoKICAJCWlmICh1bmRlZmluZWQgIT09IG9wdGlvbnMubWF4TmF0aXZlWm9vbSAmJiBvcHRpb25zLm1heE5hdGl2ZVpvb20gPCB6b29tKSB7CiAgCQkJcmV0dXJuIG9wdGlvbnMubWF4TmF0aXZlWm9vbTsKICAJCX0KCiAgCQlyZXR1cm4gem9vbTsKICAJfSwKCiAgCV9zZXRWaWV3OiBmdW5jdGlvbiAoY2VudGVyLCB6b29tLCBub1BydW5lLCBub1VwZGF0ZSkgewogIAkJdmFyIHRpbGVab29tID0gTWF0aC5yb3VuZCh6b29tKTsKICAJCWlmICgodGhpcy5vcHRpb25zLm1heFpvb20gIT09IHVuZGVmaW5lZCAmJiB0aWxlWm9vbSA+IHRoaXMub3B0aW9ucy5tYXhab29tKSB8fAogIAkJICAgICh0aGlzLm9wdGlvbnMubWluWm9vbSAhPT0gdW5kZWZpbmVkICYmIHRpbGVab29tIDwgdGhpcy5vcHRpb25zLm1pblpvb20pKSB7CiAgCQkJdGlsZVpvb20gPSB1bmRlZmluZWQ7CiAgCQl9IGVsc2UgewogIAkJCXRpbGVab29tID0gdGhpcy5fY2xhbXBab29tKHRpbGVab29tKTsKICAJCX0KCiAgCQl2YXIgdGlsZVpvb21DaGFuZ2VkID0gdGhpcy5vcHRpb25zLnVwZGF0ZVdoZW5ab29taW5nICYmICh0aWxlWm9vbSAhPT0gdGhpcy5fdGlsZVpvb20pOwoKICAJCWlmICghbm9VcGRhdGUgfHwgdGlsZVpvb21DaGFuZ2VkKSB7CgogIAkJCXRoaXMuX3RpbGVab29tID0gdGlsZVpvb207CgogIAkJCWlmICh0aGlzLl9hYm9ydExvYWRpbmcpIHsKICAJCQkJdGhpcy5fYWJvcnRMb2FkaW5nKCk7CiAgCQkJfQoKICAJCQl0aGlzLl91cGRhdGVMZXZlbHMoKTsKICAJCQl0aGlzLl9yZXNldEdyaWQoKTsKCiAgCQkJaWYgKHRpbGVab29tICE9PSB1bmRlZmluZWQpIHsKICAJCQkJdGhpcy5fdXBkYXRlKGNlbnRlcik7CiAgCQkJfQoKICAJCQlpZiAoIW5vUHJ1bmUpIHsKICAJCQkJdGhpcy5fcHJ1bmVUaWxlcygpOwogIAkJCX0KCiAgCQkJLy8gRmxhZyB0byBwcmV2ZW50IF91cGRhdGVPcGFjaXR5IGZyb20gcHJ1bmluZyB0aWxlcyBkdXJpbmcKICAJCQkvLyBhIHpvb20gYW5pbSBvciBhIHBpbmNoIGdlc3R1cmUKICAJCQl0aGlzLl9ub1BydW5lID0gISFub1BydW5lOwogIAkJfQoKICAJCXRoaXMuX3NldFpvb21UcmFuc2Zvcm1zKGNlbnRlciwgem9vbSk7CiAgCX0sCgogIAlfc2V0Wm9vbVRyYW5zZm9ybXM6IGZ1bmN0aW9uIChjZW50ZXIsIHpvb20pIHsKICAJCWZvciAodmFyIGkgaW4gdGhpcy5fbGV2ZWxzKSB7CiAgCQkJdGhpcy5fc2V0Wm9vbVRyYW5zZm9ybSh0aGlzLl9sZXZlbHNbaV0sIGNlbnRlciwgem9vbSk7CiAgCQl9CiAgCX0sCgogIAlfc2V0Wm9vbVRyYW5zZm9ybTogZnVuY3Rpb24gKGxldmVsLCBjZW50ZXIsIHpvb20pIHsKICAJCXZhciBzY2FsZSA9IHRoaXMuX21hcC5nZXRab29tU2NhbGUoem9vbSwgbGV2ZWwuem9vbSksCiAgCQkgICAgdHJhbnNsYXRlID0gbGV2ZWwub3JpZ2luLm11bHRpcGx5Qnkoc2NhbGUpCiAgCQkgICAgICAgIC5zdWJ0cmFjdCh0aGlzLl9tYXAuX2dldE5ld1BpeGVsT3JpZ2luKGNlbnRlciwgem9vbSkpLnJvdW5kKCk7CgogIAkJaWYgKEJyb3dzZXIuYW55M2QpIHsKICAJCQlzZXRUcmFuc2Zvcm0obGV2ZWwuZWwsIHRyYW5zbGF0ZSwgc2NhbGUpOwogIAkJfSBlbHNlIHsKICAJCQlzZXRQb3NpdGlvbihsZXZlbC5lbCwgdHJhbnNsYXRlKTsKICAJCX0KICAJfSwKCiAgCV9yZXNldEdyaWQ6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBtYXAgPSB0aGlzLl9tYXAsCiAgCQkgICAgY3JzID0gbWFwLm9wdGlvbnMuY3JzLAogIAkJICAgIHRpbGVTaXplID0gdGhpcy5fdGlsZVNpemUgPSB0aGlzLmdldFRpbGVTaXplKCksCiAgCQkgICAgdGlsZVpvb20gPSB0aGlzLl90aWxlWm9vbTsKCiAgCQl2YXIgYm91bmRzID0gdGhpcy5fbWFwLmdldFBpeGVsV29ybGRCb3VuZHModGhpcy5fdGlsZVpvb20pOwogIAkJaWYgKGJvdW5kcykgewogIAkJCXRoaXMuX2dsb2JhbFRpbGVSYW5nZSA9IHRoaXMuX3B4Qm91bmRzVG9UaWxlUmFuZ2UoYm91bmRzKTsKICAJCX0KCiAgCQl0aGlzLl93cmFwWCA9IGNycy53cmFwTG5nICYmICF0aGlzLm9wdGlvbnMubm9XcmFwICYmIFsKICAJCQlNYXRoLmZsb29yKG1hcC5wcm9qZWN0KFswLCBjcnMud3JhcExuZ1swXV0sIHRpbGVab29tKS54IC8gdGlsZVNpemUueCksCiAgCQkJTWF0aC5jZWlsKG1hcC5wcm9qZWN0KFswLCBjcnMud3JhcExuZ1sxXV0sIHRpbGVab29tKS54IC8gdGlsZVNpemUueSkKICAJCV07CiAgCQl0aGlzLl93cmFwWSA9IGNycy53cmFwTGF0ICYmICF0aGlzLm9wdGlvbnMubm9XcmFwICYmIFsKICAJCQlNYXRoLmZsb29yKG1hcC5wcm9qZWN0KFtjcnMud3JhcExhdFswXSwgMF0sIHRpbGVab29tKS55IC8gdGlsZVNpemUueCksCiAgCQkJTWF0aC5jZWlsKG1hcC5wcm9qZWN0KFtjcnMud3JhcExhdFsxXSwgMF0sIHRpbGVab29tKS55IC8gdGlsZVNpemUueSkKICAJCV07CiAgCX0sCgogIAlfb25Nb3ZlRW5kOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX21hcCB8fCB0aGlzLl9tYXAuX2FuaW1hdGluZ1pvb20pIHsgcmV0dXJuOyB9CgogIAkJdGhpcy5fdXBkYXRlKCk7CiAgCX0sCgogIAlfZ2V0VGlsZWRQaXhlbEJvdW5kczogZnVuY3Rpb24gKGNlbnRlcikgewogIAkJdmFyIG1hcCA9IHRoaXMuX21hcCwKICAJCSAgICBtYXBab29tID0gbWFwLl9hbmltYXRpbmdab29tID8gTWF0aC5tYXgobWFwLl9hbmltYXRlVG9ab29tLCBtYXAuZ2V0Wm9vbSgpKSA6IG1hcC5nZXRab29tKCksCiAgCQkgICAgc2NhbGUgPSBtYXAuZ2V0Wm9vbVNjYWxlKG1hcFpvb20sIHRoaXMuX3RpbGVab29tKSwKICAJCSAgICBwaXhlbENlbnRlciA9IG1hcC5wcm9qZWN0KGNlbnRlciwgdGhpcy5fdGlsZVpvb20pLmZsb29yKCksCiAgCQkgICAgaGFsZlNpemUgPSBtYXAuZ2V0U2l6ZSgpLmRpdmlkZUJ5KHNjYWxlICogMik7CgogIAkJcmV0dXJuIG5ldyBCb3VuZHMocGl4ZWxDZW50ZXIuc3VidHJhY3QoaGFsZlNpemUpLCBwaXhlbENlbnRlci5hZGQoaGFsZlNpemUpKTsKICAJfSwKCiAgCS8vIFByaXZhdGUgbWV0aG9kIHRvIGxvYWQgdGlsZXMgaW4gdGhlIGdyaWQncyBhY3RpdmUgem9vbSBsZXZlbCBhY2NvcmRpbmcgdG8gbWFwIGJvdW5kcwogIAlfdXBkYXRlOiBmdW5jdGlvbiAoY2VudGVyKSB7CiAgCQl2YXIgbWFwID0gdGhpcy5fbWFwOwogIAkJaWYgKCFtYXApIHsgcmV0dXJuOyB9CiAgCQl2YXIgem9vbSA9IHRoaXMuX2NsYW1wWm9vbShtYXAuZ2V0Wm9vbSgpKTsKCiAgCQlpZiAoY2VudGVyID09PSB1bmRlZmluZWQpIHsgY2VudGVyID0gbWFwLmdldENlbnRlcigpOyB9CiAgCQlpZiAodGhpcy5fdGlsZVpvb20gPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH0JLy8gaWYgb3V0IG9mIG1pbnpvb20vbWF4em9vbQoKICAJCXZhciBwaXhlbEJvdW5kcyA9IHRoaXMuX2dldFRpbGVkUGl4ZWxCb3VuZHMoY2VudGVyKSwKICAJCSAgICB0aWxlUmFuZ2UgPSB0aGlzLl9weEJvdW5kc1RvVGlsZVJhbmdlKHBpeGVsQm91bmRzKSwKICAJCSAgICB0aWxlQ2VudGVyID0gdGlsZVJhbmdlLmdldENlbnRlcigpLAogIAkJICAgIHF1ZXVlID0gW10sCiAgCQkgICAgbWFyZ2luID0gdGhpcy5vcHRpb25zLmtlZXBCdWZmZXIsCiAgCQkgICAgbm9QcnVuZVJhbmdlID0gbmV3IEJvdW5kcyh0aWxlUmFuZ2UuZ2V0Qm90dG9tTGVmdCgpLnN1YnRyYWN0KFttYXJnaW4sIC1tYXJnaW5dKSwKICAJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVSYW5nZS5nZXRUb3BSaWdodCgpLmFkZChbbWFyZ2luLCAtbWFyZ2luXSkpOwoKICAJCS8vIFNhbml0eSBjaGVjazogcGFuaWMgaWYgdGhlIHRpbGUgcmFuZ2UgY29udGFpbnMgSW5maW5pdHkgc29tZXdoZXJlLgogIAkJaWYgKCEoaXNGaW5pdGUodGlsZVJhbmdlLm1pbi54KSAmJgogIAkJICAgICAgaXNGaW5pdGUodGlsZVJhbmdlLm1pbi55KSAmJgogIAkJICAgICAgaXNGaW5pdGUodGlsZVJhbmdlLm1heC54KSAmJgogIAkJICAgICAgaXNGaW5pdGUodGlsZVJhbmdlLm1heC55KSkpIHsgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gbG9hZCBhbiBpbmZpbml0ZSBudW1iZXIgb2YgdGlsZXMnKTsgfQoKICAJCWZvciAodmFyIGtleSBpbiB0aGlzLl90aWxlcykgewogIAkJCXZhciBjID0gdGhpcy5fdGlsZXNba2V5XS5jb29yZHM7CiAgCQkJaWYgKGMueiAhPT0gdGhpcy5fdGlsZVpvb20gfHwgIW5vUHJ1bmVSYW5nZS5jb250YWlucyhuZXcgUG9pbnQoYy54LCBjLnkpKSkgewogIAkJCQl0aGlzLl90aWxlc1trZXldLmN1cnJlbnQgPSBmYWxzZTsKICAJCQl9CiAgCQl9CgogIAkJLy8gX3VwZGF0ZSBqdXN0IGxvYWRzIG1vcmUgdGlsZXMuIElmIHRoZSB0aWxlIHpvb20gbGV2ZWwgZGlmZmVycyB0b28gbXVjaAogIAkJLy8gZnJvbSB0aGUgbWFwJ3MsIGxldCBfc2V0VmlldyByZXNldCBsZXZlbHMgYW5kIHBydW5lIG9sZCB0aWxlcy4KICAJCWlmIChNYXRoLmFicyh6b29tIC0gdGhpcy5fdGlsZVpvb20pID4gMSkgeyB0aGlzLl9zZXRWaWV3KGNlbnRlciwgem9vbSk7IHJldHVybjsgfQoKICAJCS8vIGNyZWF0ZSBhIHF1ZXVlIG9mIGNvb3JkaW5hdGVzIHRvIGxvYWQgdGlsZXMgZnJvbQogIAkJZm9yICh2YXIgaiA9IHRpbGVSYW5nZS5taW4ueTsgaiA8PSB0aWxlUmFuZ2UubWF4Lnk7IGorKykgewogIAkJCWZvciAodmFyIGkgPSB0aWxlUmFuZ2UubWluLng7IGkgPD0gdGlsZVJhbmdlLm1heC54OyBpKyspIHsKICAJCQkJdmFyIGNvb3JkcyA9IG5ldyBQb2ludChpLCBqKTsKICAJCQkJY29vcmRzLnogPSB0aGlzLl90aWxlWm9vbTsKCiAgCQkJCWlmICghdGhpcy5faXNWYWxpZFRpbGUoY29vcmRzKSkgeyBjb250aW51ZTsgfQoKICAJCQkJdmFyIHRpbGUgPSB0aGlzLl90aWxlc1t0aGlzLl90aWxlQ29vcmRzVG9LZXkoY29vcmRzKV07CiAgCQkJCWlmICh0aWxlKSB7CiAgCQkJCQl0aWxlLmN1cnJlbnQgPSB0cnVlOwogIAkJCQl9IGVsc2UgewogIAkJCQkJcXVldWUucHVzaChjb29yZHMpOwogIAkJCQl9CiAgCQkJfQogIAkJfQoKICAJCS8vIHNvcnQgdGlsZSBxdWV1ZSB0byBsb2FkIHRpbGVzIGluIG9yZGVyIG9mIHRoZWlyIGRpc3RhbmNlIHRvIGNlbnRlcgogIAkJcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgewogIAkJCXJldHVybiBhLmRpc3RhbmNlVG8odGlsZUNlbnRlcikgLSBiLmRpc3RhbmNlVG8odGlsZUNlbnRlcik7CiAgCQl9KTsKCiAgCQlpZiAocXVldWUubGVuZ3RoICE9PSAwKSB7CiAgCQkJLy8gaWYgaXQncyB0aGUgZmlyc3QgYmF0Y2ggb2YgdGlsZXMgdG8gbG9hZAogIAkJCWlmICghdGhpcy5fbG9hZGluZykgewogIAkJCQl0aGlzLl9sb2FkaW5nID0gdHJ1ZTsKICAJCQkJLy8gQGV2ZW50IGxvYWRpbmc6IEV2ZW50CiAgCQkJCS8vIEZpcmVkIHdoZW4gdGhlIGdyaWQgbGF5ZXIgc3RhcnRzIGxvYWRpbmcgdGlsZXMuCiAgCQkJCXRoaXMuZmlyZSgnbG9hZGluZycpOwogIAkJCX0KCiAgCQkJLy8gY3JlYXRlIERPTSBmcmFnbWVudCB0byBhcHBlbmQgdGlsZXMgaW4gb25lIGJhdGNoCiAgCQkJdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpOwoKICAJCQlmb3IgKGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHsKICAJCQkJdGhpcy5fYWRkVGlsZShxdWV1ZVtpXSwgZnJhZ21lbnQpOwogIAkJCX0KCiAgCQkJdGhpcy5fbGV2ZWwuZWwuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpOwogIAkJfQogIAl9LAoKICAJX2lzVmFsaWRUaWxlOiBmdW5jdGlvbiAoY29vcmRzKSB7CiAgCQl2YXIgY3JzID0gdGhpcy5fbWFwLm9wdGlvbnMuY3JzOwoKICAJCWlmICghY3JzLmluZmluaXRlKSB7CiAgCQkJLy8gZG9uJ3QgbG9hZCB0aWxlIGlmIGl0J3Mgb3V0IG9mIGJvdW5kcyBhbmQgbm90IHdyYXBwZWQKICAJCQl2YXIgYm91bmRzID0gdGhpcy5fZ2xvYmFsVGlsZVJhbmdlOwogIAkJCWlmICgoIWNycy53cmFwTG5nICYmIChjb29yZHMueCA8IGJvdW5kcy5taW4ueCB8fCBjb29yZHMueCA+IGJvdW5kcy5tYXgueCkpIHx8CiAgCQkJICAgICghY3JzLndyYXBMYXQgJiYgKGNvb3Jkcy55IDwgYm91bmRzLm1pbi55IHx8IGNvb3Jkcy55ID4gYm91bmRzLm1heC55KSkpIHsgcmV0dXJuIGZhbHNlOyB9CiAgCQl9CgogIAkJaWYgKCF0aGlzLm9wdGlvbnMuYm91bmRzKSB7IHJldHVybiB0cnVlOyB9CgogIAkJLy8gZG9uJ3QgbG9hZCB0aWxlIGlmIGl0IGRvZXNuJ3QgaW50ZXJzZWN0IHRoZSBib3VuZHMgaW4gb3B0aW9ucwogIAkJdmFyIHRpbGVCb3VuZHMgPSB0aGlzLl90aWxlQ29vcmRzVG9Cb3VuZHMoY29vcmRzKTsKICAJCXJldHVybiB0b0xhdExuZ0JvdW5kcyh0aGlzLm9wdGlvbnMuYm91bmRzKS5vdmVybGFwcyh0aWxlQm91bmRzKTsKICAJfSwKCiAgCV9rZXlUb0JvdW5kczogZnVuY3Rpb24gKGtleSkgewogIAkJcmV0dXJuIHRoaXMuX3RpbGVDb29yZHNUb0JvdW5kcyh0aGlzLl9rZXlUb1RpbGVDb29yZHMoa2V5KSk7CiAgCX0sCgogIAlfdGlsZUNvb3Jkc1RvTndTZTogZnVuY3Rpb24gKGNvb3JkcykgewogIAkJdmFyIG1hcCA9IHRoaXMuX21hcCwKICAJCSAgICB0aWxlU2l6ZSA9IHRoaXMuZ2V0VGlsZVNpemUoKSwKICAJCSAgICBud1BvaW50ID0gY29vcmRzLnNjYWxlQnkodGlsZVNpemUpLAogIAkJICAgIHNlUG9pbnQgPSBud1BvaW50LmFkZCh0aWxlU2l6ZSksCiAgCQkgICAgbncgPSBtYXAudW5wcm9qZWN0KG53UG9pbnQsIGNvb3Jkcy56KSwKICAJCSAgICBzZSA9IG1hcC51bnByb2plY3Qoc2VQb2ludCwgY29vcmRzLnopOwogIAkJcmV0dXJuIFtudywgc2VdOwogIAl9LAoKICAJLy8gY29udmVydHMgdGlsZSBjb29yZGluYXRlcyB0byBpdHMgZ2VvZ3JhcGhpY2FsIGJvdW5kcwogIAlfdGlsZUNvb3Jkc1RvQm91bmRzOiBmdW5jdGlvbiAoY29vcmRzKSB7CiAgCQl2YXIgYnAgPSB0aGlzLl90aWxlQ29vcmRzVG9Od1NlKGNvb3JkcyksCiAgCQkgICAgYm91bmRzID0gbmV3IExhdExuZ0JvdW5kcyhicFswXSwgYnBbMV0pOwoKICAJCWlmICghdGhpcy5vcHRpb25zLm5vV3JhcCkgewogIAkJCWJvdW5kcyA9IHRoaXMuX21hcC53cmFwTGF0TG5nQm91bmRzKGJvdW5kcyk7CiAgCQl9CiAgCQlyZXR1cm4gYm91bmRzOwogIAl9LAogIAkvLyBjb252ZXJ0cyB0aWxlIGNvb3JkaW5hdGVzIHRvIGtleSBmb3IgdGhlIHRpbGUgY2FjaGUKICAJX3RpbGVDb29yZHNUb0tleTogZnVuY3Rpb24gKGNvb3JkcykgewogIAkJcmV0dXJuIGNvb3Jkcy54ICsgJzonICsgY29vcmRzLnkgKyAnOicgKyBjb29yZHMuejsKICAJfSwKCiAgCS8vIGNvbnZlcnRzIHRpbGUgY2FjaGUga2V5IHRvIGNvb3JkaW5hdGVzCiAgCV9rZXlUb1RpbGVDb29yZHM6IGZ1bmN0aW9uIChrZXkpIHsKICAJCXZhciBrID0ga2V5LnNwbGl0KCc6JyksCiAgCQkgICAgY29vcmRzID0gbmV3IFBvaW50KCtrWzBdLCAra1sxXSk7CiAgCQljb29yZHMueiA9ICtrWzJdOwogIAkJcmV0dXJuIGNvb3JkczsKICAJfSwKCiAgCV9yZW1vdmVUaWxlOiBmdW5jdGlvbiAoa2V5KSB7CiAgCQl2YXIgdGlsZSA9IHRoaXMuX3RpbGVzW2tleV07CiAgCQlpZiAoIXRpbGUpIHsgcmV0dXJuOyB9CgogIAkJcmVtb3ZlKHRpbGUuZWwpOwoKICAJCWRlbGV0ZSB0aGlzLl90aWxlc1trZXldOwoKICAJCS8vIEBldmVudCB0aWxldW5sb2FkOiBUaWxlRXZlbnQKICAJCS8vIEZpcmVkIHdoZW4gYSB0aWxlIGlzIHJlbW92ZWQgKGUuZy4gd2hlbiBhIHRpbGUgZ29lcyBvZmYgdGhlIHNjcmVlbikuCiAgCQl0aGlzLmZpcmUoJ3RpbGV1bmxvYWQnLCB7CiAgCQkJdGlsZTogdGlsZS5lbCwKICAJCQljb29yZHM6IHRoaXMuX2tleVRvVGlsZUNvb3JkcyhrZXkpCiAgCQl9KTsKICAJfSwKCiAgCV9pbml0VGlsZTogZnVuY3Rpb24gKHRpbGUpIHsKICAJCWFkZENsYXNzKHRpbGUsICdsZWFmbGV0LXRpbGUnKTsKCiAgCQl2YXIgdGlsZVNpemUgPSB0aGlzLmdldFRpbGVTaXplKCk7CiAgCQl0aWxlLnN0eWxlLndpZHRoID0gdGlsZVNpemUueCArICdweCc7CiAgCQl0aWxlLnN0eWxlLmhlaWdodCA9IHRpbGVTaXplLnkgKyAncHgnOwoKICAJCXRpbGUub25zZWxlY3RzdGFydCA9IGZhbHNlRm47CiAgCQl0aWxlLm9ubW91c2Vtb3ZlID0gZmFsc2VGbjsKCiAgCQkvLyB1cGRhdGUgb3BhY2l0eSBvbiB0aWxlcyBpbiBJRTctOCBiZWNhdXNlIG9mIGZpbHRlciBpbmhlcml0YW5jZSBwcm9ibGVtcwogIAkJaWYgKEJyb3dzZXIuaWVsdDkgJiYgdGhpcy5vcHRpb25zLm9wYWNpdHkgPCAxKSB7CiAgCQkJc2V0T3BhY2l0eSh0aWxlLCB0aGlzLm9wdGlvbnMub3BhY2l0eSk7CiAgCQl9CiAgCX0sCgogIAlfYWRkVGlsZTogZnVuY3Rpb24gKGNvb3JkcywgY29udGFpbmVyKSB7CiAgCQl2YXIgdGlsZVBvcyA9IHRoaXMuX2dldFRpbGVQb3MoY29vcmRzKSwKICAJCSAgICBrZXkgPSB0aGlzLl90aWxlQ29vcmRzVG9LZXkoY29vcmRzKTsKCiAgCQl2YXIgdGlsZSA9IHRoaXMuY3JlYXRlVGlsZSh0aGlzLl93cmFwQ29vcmRzKGNvb3JkcyksIGJpbmQodGhpcy5fdGlsZVJlYWR5LCB0aGlzLCBjb29yZHMpKTsKCiAgCQl0aGlzLl9pbml0VGlsZSh0aWxlKTsKCiAgCQkvLyBpZiBjcmVhdGVUaWxlIGlzIGRlZmluZWQgd2l0aCBhIHNlY29uZCBhcmd1bWVudCAoImRvbmUiIGNhbGxiYWNrKSwKICAJCS8vIHdlIGtub3cgdGhhdCB0aWxlIGlzIGFzeW5jIGFuZCB3aWxsIGJlIHJlYWR5IGxhdGVyOyBvdGhlcndpc2UKICAJCWlmICh0aGlzLmNyZWF0ZVRpbGUubGVuZ3RoIDwgMikgewogIAkJCS8vIG1hcmsgdGlsZSBhcyByZWFkeSwgYnV0IGRlbGF5IG9uZSBmcmFtZSBmb3Igb3BhY2l0eSBhbmltYXRpb24gdG8gaGFwcGVuCiAgCQkJcmVxdWVzdEFuaW1GcmFtZShiaW5kKHRoaXMuX3RpbGVSZWFkeSwgdGhpcywgY29vcmRzLCBudWxsLCB0aWxlKSk7CiAgCQl9CgogIAkJc2V0UG9zaXRpb24odGlsZSwgdGlsZVBvcyk7CgogIAkJLy8gc2F2ZSB0aWxlIGluIGNhY2hlCiAgCQl0aGlzLl90aWxlc1trZXldID0gewogIAkJCWVsOiB0aWxlLAogIAkJCWNvb3JkczogY29vcmRzLAogIAkJCWN1cnJlbnQ6IHRydWUKICAJCX07CgogIAkJY29udGFpbmVyLmFwcGVuZENoaWxkKHRpbGUpOwogIAkJLy8gQGV2ZW50IHRpbGVsb2Fkc3RhcnQ6IFRpbGVFdmVudAogIAkJLy8gRmlyZWQgd2hlbiBhIHRpbGUgaXMgcmVxdWVzdGVkIGFuZCBzdGFydHMgbG9hZGluZy4KICAJCXRoaXMuZmlyZSgndGlsZWxvYWRzdGFydCcsIHsKICAJCQl0aWxlOiB0aWxlLAogIAkJCWNvb3JkczogY29vcmRzCiAgCQl9KTsKICAJfSwKCiAgCV90aWxlUmVhZHk6IGZ1bmN0aW9uIChjb29yZHMsIGVyciwgdGlsZSkgewogIAkJaWYgKGVycikgewogIAkJCS8vIEBldmVudCB0aWxlZXJyb3I6IFRpbGVFcnJvckV2ZW50CiAgCQkJLy8gRmlyZWQgd2hlbiB0aGVyZSBpcyBhbiBlcnJvciBsb2FkaW5nIGEgdGlsZS4KICAJCQl0aGlzLmZpcmUoJ3RpbGVlcnJvcicsIHsKICAJCQkJZXJyb3I6IGVyciwKICAJCQkJdGlsZTogdGlsZSwKICAJCQkJY29vcmRzOiBjb29yZHMKICAJCQl9KTsKICAJCX0KCiAgCQl2YXIga2V5ID0gdGhpcy5fdGlsZUNvb3Jkc1RvS2V5KGNvb3Jkcyk7CgogIAkJdGlsZSA9IHRoaXMuX3RpbGVzW2tleV07CiAgCQlpZiAoIXRpbGUpIHsgcmV0dXJuOyB9CgogIAkJdGlsZS5sb2FkZWQgPSArbmV3IERhdGUoKTsKICAJCWlmICh0aGlzLl9tYXAuX2ZhZGVBbmltYXRlZCkgewogIAkJCXNldE9wYWNpdHkodGlsZS5lbCwgMCk7CiAgCQkJY2FuY2VsQW5pbUZyYW1lKHRoaXMuX2ZhZGVGcmFtZSk7CiAgCQkJdGhpcy5fZmFkZUZyYW1lID0gcmVxdWVzdEFuaW1GcmFtZSh0aGlzLl91cGRhdGVPcGFjaXR5LCB0aGlzKTsKICAJCX0gZWxzZSB7CiAgCQkJdGlsZS5hY3RpdmUgPSB0cnVlOwogIAkJCXRoaXMuX3BydW5lVGlsZXMoKTsKICAJCX0KCiAgCQlpZiAoIWVycikgewogIAkJCWFkZENsYXNzKHRpbGUuZWwsICdsZWFmbGV0LXRpbGUtbG9hZGVkJyk7CgogIAkJCS8vIEBldmVudCB0aWxlbG9hZDogVGlsZUV2ZW50CiAgCQkJLy8gRmlyZWQgd2hlbiBhIHRpbGUgbG9hZHMuCiAgCQkJdGhpcy5maXJlKCd0aWxlbG9hZCcsIHsKICAJCQkJdGlsZTogdGlsZS5lbCwKICAJCQkJY29vcmRzOiBjb29yZHMKICAJCQl9KTsKICAJCX0KCiAgCQlpZiAodGhpcy5fbm9UaWxlc1RvTG9hZCgpKSB7CiAgCQkJdGhpcy5fbG9hZGluZyA9IGZhbHNlOwogIAkJCS8vIEBldmVudCBsb2FkOiBFdmVudAogIAkJCS8vIEZpcmVkIHdoZW4gdGhlIGdyaWQgbGF5ZXIgbG9hZGVkIGFsbCB2aXNpYmxlIHRpbGVzLgogIAkJCXRoaXMuZmlyZSgnbG9hZCcpOwoKICAJCQlpZiAoQnJvd3Nlci5pZWx0OSB8fCAhdGhpcy5fbWFwLl9mYWRlQW5pbWF0ZWQpIHsKICAJCQkJcmVxdWVzdEFuaW1GcmFtZSh0aGlzLl9wcnVuZVRpbGVzLCB0aGlzKTsKICAJCQl9IGVsc2UgewogIAkJCQkvLyBXYWl0IGEgYml0IG1vcmUgdGhhbiAwLjIgc2VjcyAodGhlIGR1cmF0aW9uIG9mIHRoZSB0aWxlIGZhZGUtaW4pCiAgCQkJCS8vIHRvIHRyaWdnZXIgYSBwcnVuaW5nLgogIAkJCQlzZXRUaW1lb3V0KGJpbmQodGhpcy5fcHJ1bmVUaWxlcywgdGhpcyksIDI1MCk7CiAgCQkJfQogIAkJfQogIAl9LAoKICAJX2dldFRpbGVQb3M6IGZ1bmN0aW9uIChjb29yZHMpIHsKICAJCXJldHVybiBjb29yZHMuc2NhbGVCeSh0aGlzLmdldFRpbGVTaXplKCkpLnN1YnRyYWN0KHRoaXMuX2xldmVsLm9yaWdpbik7CiAgCX0sCgogIAlfd3JhcENvb3JkczogZnVuY3Rpb24gKGNvb3JkcykgewogIAkJdmFyIG5ld0Nvb3JkcyA9IG5ldyBQb2ludCgKICAJCQl0aGlzLl93cmFwWCA/IHdyYXBOdW0oY29vcmRzLngsIHRoaXMuX3dyYXBYKSA6IGNvb3Jkcy54LAogIAkJCXRoaXMuX3dyYXBZID8gd3JhcE51bShjb29yZHMueSwgdGhpcy5fd3JhcFkpIDogY29vcmRzLnkpOwogIAkJbmV3Q29vcmRzLnogPSBjb29yZHMuejsKICAJCXJldHVybiBuZXdDb29yZHM7CiAgCX0sCgogIAlfcHhCb3VuZHNUb1RpbGVSYW5nZTogZnVuY3Rpb24gKGJvdW5kcykgewogIAkJdmFyIHRpbGVTaXplID0gdGhpcy5nZXRUaWxlU2l6ZSgpOwogIAkJcmV0dXJuIG5ldyBCb3VuZHMoCiAgCQkJYm91bmRzLm1pbi51bnNjYWxlQnkodGlsZVNpemUpLmZsb29yKCksCiAgCQkJYm91bmRzLm1heC51bnNjYWxlQnkodGlsZVNpemUpLmNlaWwoKS5zdWJ0cmFjdChbMSwgMV0pKTsKICAJfSwKCiAgCV9ub1RpbGVzVG9Mb2FkOiBmdW5jdGlvbiAoKSB7CiAgCQlmb3IgKHZhciBrZXkgaW4gdGhpcy5fdGlsZXMpIHsKICAJCQlpZiAoIXRoaXMuX3RpbGVzW2tleV0ubG9hZGVkKSB7IHJldHVybiBmYWxzZTsgfQogIAkJfQogIAkJcmV0dXJuIHRydWU7CiAgCX0KICB9KTsKCiAgLy8gQGZhY3RvcnkgTC5ncmlkTGF5ZXIob3B0aW9ucz86IEdyaWRMYXllciBvcHRpb25zKQogIC8vIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgR3JpZExheWVyIHdpdGggdGhlIHN1cHBsaWVkIG9wdGlvbnMuCiAgZnVuY3Rpb24gZ3JpZExheWVyKG9wdGlvbnMpIHsKICAJcmV0dXJuIG5ldyBHcmlkTGF5ZXIob3B0aW9ucyk7CiAgfQoKICAvKgogICAqIEBjbGFzcyBUaWxlTGF5ZXIKICAgKiBAaW5oZXJpdHMgR3JpZExheWVyCiAgICogQGFrYSBMLlRpbGVMYXllcgogICAqIFVzZWQgdG8gbG9hZCBhbmQgZGlzcGxheSB0aWxlIGxheWVycyBvbiB0aGUgbWFwLiBOb3RlIHRoYXQgbW9zdCB0aWxlIHNlcnZlcnMgcmVxdWlyZSBhdHRyaWJ1dGlvbiwgd2hpY2ggeW91IGNhbiBzZXQgdW5kZXIgYExheWVyYC4gRXh0ZW5kcyBgR3JpZExheWVyYC4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIEwudGlsZUxheWVyKCdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZz97Zm9vfScsIHtmb286ICdiYXInLCBhdHRyaWJ1dGlvbjogJyZjb3B5OyA8YSBocmVmPSJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHQiPk9wZW5TdHJlZXRNYXA8L2E+IGNvbnRyaWJ1dG9ycyd9KS5hZGRUbyhtYXApOwogICAqIGBgYAogICAqCiAgICogQHNlY3Rpb24gVVJMIHRlbXBsYXRlCiAgICogQGV4YW1wbGUKICAgKgogICAqIEEgc3RyaW5nIG9mIHRoZSBmb2xsb3dpbmcgZm9ybToKICAgKgogICAqIGBgYAogICAqICdodHRwczovL3tzfS5zb21lZG9tYWluLmNvbS9ibGFibGEve3p9L3t4fS97eX17cn0ucG5nJwogICAqIGBgYAogICAqCiAgICogYHtzfWAgbWVhbnMgb25lIG9mIHRoZSBhdmFpbGFibGUgc3ViZG9tYWlucyAodXNlZCBzZXF1ZW50aWFsbHkgdG8gaGVscCB3aXRoIGJyb3dzZXIgcGFyYWxsZWwgcmVxdWVzdHMgcGVyIGRvbWFpbiBsaW1pdGF0aW9uOyBzdWJkb21haW4gdmFsdWVzIGFyZSBzcGVjaWZpZWQgaW4gb3B0aW9uczsgYGFgLCBgYmAgb3IgYGNgIGJ5IGRlZmF1bHQsIGNhbiBiZSBvbWl0dGVkKSwgYHt6fWAg4oCUIHpvb20gbGV2ZWwsIGB7eH1gIGFuZCBge3l9YCDigJQgdGlsZSBjb29yZGluYXRlcy4gYHtyfWAgY2FuIGJlIHVzZWQgdG8gYWRkICImY29tbWF0OzJ4IiB0byB0aGUgVVJMIHRvIGxvYWQgcmV0aW5hIHRpbGVzLgogICAqCiAgICogWW91IGNhbiB1c2UgY3VzdG9tIGtleXMgaW4gdGhlIHRlbXBsYXRlLCB3aGljaCB3aWxsIGJlIFtldmFsdWF0ZWRdKCN1dGlsLXRlbXBsYXRlKSBmcm9tIFRpbGVMYXllciBvcHRpb25zLCBsaWtlIHRoaXM6CiAgICoKICAgKiBgYGAKICAgKiBMLnRpbGVMYXllcignaHR0cHM6Ly97c30uc29tZWRvbWFpbi5jb20ve2Zvb30ve3p9L3t4fS97eX0ucG5nJywge2ZvbzogJ2Jhcid9KTsKICAgKiBgYGAKICAgKi8KCgogIHZhciBUaWxlTGF5ZXIgPSBHcmlkTGF5ZXIuZXh0ZW5kKHsKCiAgCS8vIEBzZWN0aW9uCiAgCS8vIEBha2EgVGlsZUxheWVyIG9wdGlvbnMKICAJb3B0aW9uczogewogIAkJLy8gQG9wdGlvbiBtaW5ab29tOiBOdW1iZXIgPSAwCiAgCQkvLyBUaGUgbWluaW11bSB6b29tIGxldmVsIGRvd24gdG8gd2hpY2ggdGhpcyBsYXllciB3aWxsIGJlIGRpc3BsYXllZCAoaW5jbHVzaXZlKS4KICAJCW1pblpvb206IDAsCgogIAkJLy8gQG9wdGlvbiBtYXhab29tOiBOdW1iZXIgPSAxOAogIAkJLy8gVGhlIG1heGltdW0gem9vbSBsZXZlbCB1cCB0byB3aGljaCB0aGlzIGxheWVyIHdpbGwgYmUgZGlzcGxheWVkIChpbmNsdXNpdmUpLgogIAkJbWF4Wm9vbTogMTgsCgogIAkJLy8gQG9wdGlvbiBzdWJkb21haW5zOiBTdHJpbmd8U3RyaW5nW10gPSAnYWJjJwogIAkJLy8gU3ViZG9tYWlucyBvZiB0aGUgdGlsZSBzZXJ2aWNlLiBDYW4gYmUgcGFzc2VkIGluIHRoZSBmb3JtIG9mIG9uZSBzdHJpbmcgKHdoZXJlIGVhY2ggbGV0dGVyIGlzIGEgc3ViZG9tYWluIG5hbWUpIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MuCiAgCQlzdWJkb21haW5zOiAnYWJjJywKCiAgCQkvLyBAb3B0aW9uIGVycm9yVGlsZVVybDogU3RyaW5nID0gJycKICAJCS8vIFVSTCB0byB0aGUgdGlsZSBpbWFnZSB0byBzaG93IGluIHBsYWNlIG9mIHRoZSB0aWxlIHRoYXQgZmFpbGVkIHRvIGxvYWQuCiAgCQllcnJvclRpbGVVcmw6ICcnLAoKICAJCS8vIEBvcHRpb24gem9vbU9mZnNldDogTnVtYmVyID0gMAogIAkJLy8gVGhlIHpvb20gbnVtYmVyIHVzZWQgaW4gdGlsZSBVUkxzIHdpbGwgYmUgb2Zmc2V0IHdpdGggdGhpcyB2YWx1ZS4KICAJCXpvb21PZmZzZXQ6IDAsCgogIAkJLy8gQG9wdGlvbiB0bXM6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gSWYgYHRydWVgLCBpbnZlcnNlcyBZIGF4aXMgbnVtYmVyaW5nIGZvciB0aWxlcyAodHVybiB0aGlzIG9uIGZvciBbVE1TXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UaWxlX01hcF9TZXJ2aWNlKSBzZXJ2aWNlcykuCiAgCQl0bXM6IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gem9vbVJldmVyc2U6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gSWYgc2V0IHRvIHRydWUsIHRoZSB6b29tIG51bWJlciB1c2VkIGluIHRpbGUgVVJMcyB3aWxsIGJlIHJldmVyc2VkIChgbWF4Wm9vbSAtIHpvb21gIGluc3RlYWQgb2YgYHpvb21gKQogIAkJem9vbVJldmVyc2U6IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gZGV0ZWN0UmV0aW5hOiBCb29sZWFuID0gZmFsc2UKICAJCS8vIElmIGB0cnVlYCBhbmQgdXNlciBpcyBvbiBhIHJldGluYSBkaXNwbGF5LCBpdCB3aWxsIHJlcXVlc3QgZm91ciB0aWxlcyBvZiBoYWxmIHRoZSBzcGVjaWZpZWQgc2l6ZSBhbmQgYSBiaWdnZXIgem9vbSBsZXZlbCBpbiBwbGFjZSBvZiBvbmUgdG8gdXRpbGl6ZSB0aGUgaGlnaCByZXNvbHV0aW9uLgogIAkJZGV0ZWN0UmV0aW5hOiBmYWxzZSwKCiAgCQkvLyBAb3B0aW9uIGNyb3NzT3JpZ2luOiBCb29sZWFufFN0cmluZyA9IGZhbHNlCiAgCQkvLyBXaGV0aGVyIHRoZSBjcm9zc09yaWdpbiBhdHRyaWJ1dGUgd2lsbCBiZSBhZGRlZCB0byB0aGUgdGlsZXMuCiAgCQkvLyBJZiBhIFN0cmluZyBpcyBwcm92aWRlZCwgYWxsIHRpbGVzIHdpbGwgaGF2ZSB0aGVpciBjcm9zc09yaWdpbiBhdHRyaWJ1dGUgc2V0IHRvIHRoZSBTdHJpbmcgcHJvdmlkZWQuIFRoaXMgaXMgbmVlZGVkIGlmIHlvdSB3YW50IHRvIGFjY2VzcyB0aWxlIHBpeGVsIGRhdGEuCiAgCQkvLyBSZWZlciB0byBbQ09SUyBTZXR0aW5nc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9DT1JTX3NldHRpbmdzX2F0dHJpYnV0ZXMpIGZvciB2YWxpZCBTdHJpbmcgdmFsdWVzLgogIAkJY3Jvc3NPcmlnaW46IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gcmVmZXJyZXJQb2xpY3k6IEJvb2xlYW58U3RyaW5nID0gZmFsc2UKICAJCS8vIFdoZXRoZXIgdGhlIHJlZmVycmVyUG9saWN5IGF0dHJpYnV0ZSB3aWxsIGJlIGFkZGVkIHRvIHRoZSB0aWxlcy4KICAJCS8vIElmIGEgU3RyaW5nIGlzIHByb3ZpZGVkLCBhbGwgdGlsZXMgd2lsbCBoYXZlIHRoZWlyIHJlZmVycmVyUG9saWN5IGF0dHJpYnV0ZSBzZXQgdG8gdGhlIFN0cmluZyBwcm92aWRlZC4KICAJCS8vIFRoaXMgbWF5IGJlIG5lZWRlZCBpZiB5b3VyIG1hcCdzIHJlbmRlcmluZyBjb250ZXh0IGhhcyBhIHN0cmljdCBkZWZhdWx0IGJ1dCB5b3VyIHRpbGUgcHJvdmlkZXIgZXhwZWN0cyBhIHZhbGlkIHJlZmVycmVyCiAgCQkvLyAoZS5nLiB0byB2YWxpZGF0ZSBhbiBBUEkgdG9rZW4pLgogIAkJLy8gUmVmZXIgdG8gW0hUTUxJbWFnZUVsZW1lbnQucmVmZXJyZXJQb2xpY3ldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MSW1hZ2VFbGVtZW50L3JlZmVycmVyUG9saWN5KSBmb3IgdmFsaWQgU3RyaW5nIHZhbHVlcy4KICAJCXJlZmVycmVyUG9saWN5OiBmYWxzZQogIAl9LAoKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKHVybCwgb3B0aW9ucykgewoKICAJCXRoaXMuX3VybCA9IHVybDsKCiAgCQlvcHRpb25zID0gc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKCiAgCQkvLyBkZXRlY3RpbmcgcmV0aW5hIGRpc3BsYXlzLCBhZGp1c3RpbmcgdGlsZVNpemUgYW5kIHpvb20gbGV2ZWxzCiAgCQlpZiAob3B0aW9ucy5kZXRlY3RSZXRpbmEgJiYgQnJvd3Nlci5yZXRpbmEgJiYgb3B0aW9ucy5tYXhab29tID4gMCkgewoKICAJCQlvcHRpb25zLnRpbGVTaXplID0gTWF0aC5mbG9vcihvcHRpb25zLnRpbGVTaXplIC8gMik7CgogIAkJCWlmICghb3B0aW9ucy56b29tUmV2ZXJzZSkgewogIAkJCQlvcHRpb25zLnpvb21PZmZzZXQrKzsKICAJCQkJb3B0aW9ucy5tYXhab29tLS07CiAgCQkJfSBlbHNlIHsKICAJCQkJb3B0aW9ucy56b29tT2Zmc2V0LS07CiAgCQkJCW9wdGlvbnMubWluWm9vbSsrOwogIAkJCX0KCiAgCQkJb3B0aW9ucy5taW5ab29tID0gTWF0aC5tYXgoMCwgb3B0aW9ucy5taW5ab29tKTsKICAJCX0KCiAgCQlpZiAodHlwZW9mIG9wdGlvbnMuc3ViZG9tYWlucyA9PT0gJ3N0cmluZycpIHsKICAJCQlvcHRpb25zLnN1YmRvbWFpbnMgPSBvcHRpb25zLnN1YmRvbWFpbnMuc3BsaXQoJycpOwogIAkJfQoKICAJCXRoaXMub24oJ3RpbGV1bmxvYWQnLCB0aGlzLl9vblRpbGVSZW1vdmUpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRVcmwodXJsOiBTdHJpbmcsIG5vUmVkcmF3PzogQm9vbGVhbik6IHRoaXMKICAJLy8gVXBkYXRlcyB0aGUgbGF5ZXIncyBVUkwgdGVtcGxhdGUgYW5kIHJlZHJhd3MgaXQgKHVubGVzcyBgbm9SZWRyYXdgIGlzIHNldCB0byBgdHJ1ZWApLgogIAkvLyBJZiB0aGUgVVJMIGRvZXMgbm90IGNoYW5nZSwgdGhlIGxheWVyIHdpbGwgbm90IGJlIHJlZHJhd24gdW5sZXNzCiAgCS8vIHRoZSBub1JlZHJhdyBwYXJhbWV0ZXIgaXMgc2V0IHRvIGZhbHNlLgogIAlzZXRVcmw6IGZ1bmN0aW9uICh1cmwsIG5vUmVkcmF3KSB7CiAgCQlpZiAodGhpcy5fdXJsID09PSB1cmwgJiYgbm9SZWRyYXcgPT09IHVuZGVmaW5lZCkgewogIAkJCW5vUmVkcmF3ID0gdHJ1ZTsKICAJCX0KCiAgCQl0aGlzLl91cmwgPSB1cmw7CgogIAkJaWYgKCFub1JlZHJhdykgewogIAkJCXRoaXMucmVkcmF3KCk7CiAgCQl9CiAgCQlyZXR1cm4gdGhpczsKICAJfSwKCiAgCS8vIEBtZXRob2QgY3JlYXRlVGlsZShjb29yZHM6IE9iamVjdCwgZG9uZT86IEZ1bmN0aW9uKTogSFRNTEVsZW1lbnQKICAJLy8gQ2FsbGVkIG9ubHkgaW50ZXJuYWxseSwgb3ZlcnJpZGVzIEdyaWRMYXllcidzIFtgY3JlYXRlVGlsZSgpYF0oI2dyaWRsYXllci1jcmVhdGV0aWxlKQogIAkvLyB0byByZXR1cm4gYW4gYDxpbWc+YCBIVE1MIGVsZW1lbnQgd2l0aCB0aGUgYXBwcm9wcmlhdGUgaW1hZ2UgVVJMIGdpdmVuIGBjb29yZHNgLiBUaGUgYGRvbmVgCiAgCS8vIGNhbGxiYWNrIGlzIGNhbGxlZCB3aGVuIHRoZSB0aWxlIGhhcyBiZWVuIGxvYWRlZC4KICAJY3JlYXRlVGlsZTogZnVuY3Rpb24gKGNvb3JkcywgZG9uZSkgewogIAkJdmFyIHRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKCiAgCQlvbih0aWxlLCAnbG9hZCcsIGJpbmQodGhpcy5fdGlsZU9uTG9hZCwgdGhpcywgZG9uZSwgdGlsZSkpOwogIAkJb24odGlsZSwgJ2Vycm9yJywgYmluZCh0aGlzLl90aWxlT25FcnJvciwgdGhpcywgZG9uZSwgdGlsZSkpOwoKICAJCWlmICh0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4gfHwgdGhpcy5vcHRpb25zLmNyb3NzT3JpZ2luID09PSAnJykgewogIAkJCXRpbGUuY3Jvc3NPcmlnaW4gPSB0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4gPT09IHRydWUgPyAnJyA6IHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbjsKICAJCX0KCiAgCQkvLyBmb3IgdGhpcyBuZXcgb3B0aW9uIHdlIGZvbGxvdyB0aGUgZG9jdW1lbnRlZCBiZWhhdmlvcgogIAkJLy8gbW9yZSBjbG9zZWx5IGJ5IG9ubHkgc2V0dGluZyB0aGUgcHJvcGVydHkgd2hlbiBzdHJpbmcKICAJCWlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnJlZmVycmVyUG9saWN5ID09PSAnc3RyaW5nJykgewogIAkJCXRpbGUucmVmZXJyZXJQb2xpY3kgPSB0aGlzLm9wdGlvbnMucmVmZXJyZXJQb2xpY3k7CiAgCQl9CgogIAkJLyoKICAJCSBBbHQgdGFnIGlzIHNldCB0byBlbXB0eSBzdHJpbmcgdG8ga2VlcCBzY3JlZW4gcmVhZGVycyBmcm9tIHJlYWRpbmcgVVJMIGFuZCBmb3IgY29tcGxpYW5jZSByZWFzb25zCiAgCQkgaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9INjcKICAJCSovCiAgCQl0aWxlLmFsdCA9ICcnOwoKICAJCS8qCiAgCQkgU2V0IHJvbGU9InByZXNlbnRhdGlvbiIgdG8gZm9yY2Ugc2NyZWVuIHJlYWRlcnMgdG8gaWdub3JlIHRoaXMKICAJCSBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEvcm9sZXMjdGV4dGFsdGVybmF0aXZlY29tcHV0YXRpb24KICAJCSovCiAgCQl0aWxlLnNldEF0dHJpYnV0ZSgncm9sZScsICdwcmVzZW50YXRpb24nKTsKCiAgCQl0aWxlLnNyYyA9IHRoaXMuZ2V0VGlsZVVybChjb29yZHMpOwoKICAJCXJldHVybiB0aWxlOwogIAl9LAoKICAJLy8gQHNlY3Rpb24gRXh0ZW5zaW9uIG1ldGhvZHMKICAJLy8gQHVuaW5oZXJpdGFibGUKICAJLy8gTGF5ZXJzIGV4dGVuZGluZyBgVGlsZUxheWVyYCBtaWdodCByZWltcGxlbWVudCB0aGUgZm9sbG93aW5nIG1ldGhvZC4KICAJLy8gQG1ldGhvZCBnZXRUaWxlVXJsKGNvb3JkczogT2JqZWN0KTogU3RyaW5nCiAgCS8vIENhbGxlZCBvbmx5IGludGVybmFsbHksIHJldHVybnMgdGhlIFVSTCBmb3IgYSB0aWxlIGdpdmVuIGl0cyBjb29yZGluYXRlcy4KICAJLy8gQ2xhc3NlcyBleHRlbmRpbmcgYFRpbGVMYXllcmAgY2FuIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gcHJvdmlkZSBjdXN0b20gdGlsZSBVUkwgbmFtaW5nIHNjaGVtZXMuCiAgCWdldFRpbGVVcmw6IGZ1bmN0aW9uIChjb29yZHMpIHsKICAJCXZhciBkYXRhID0gewogIAkJCXI6IEJyb3dzZXIucmV0aW5hID8gJ0AyeCcgOiAnJywKICAJCQlzOiB0aGlzLl9nZXRTdWJkb21haW4oY29vcmRzKSwKICAJCQl4OiBjb29yZHMueCwKICAJCQl5OiBjb29yZHMueSwKICAJCQl6OiB0aGlzLl9nZXRab29tRm9yVXJsKCkKICAJCX07CiAgCQlpZiAodGhpcy5fbWFwICYmICF0aGlzLl9tYXAub3B0aW9ucy5jcnMuaW5maW5pdGUpIHsKICAJCQl2YXIgaW52ZXJ0ZWRZID0gdGhpcy5fZ2xvYmFsVGlsZVJhbmdlLm1heC55IC0gY29vcmRzLnk7CiAgCQkJaWYgKHRoaXMub3B0aW9ucy50bXMpIHsKICAJCQkJZGF0YVsneSddID0gaW52ZXJ0ZWRZOwogIAkJCX0KICAJCQlkYXRhWycteSddID0gaW52ZXJ0ZWRZOwogIAkJfQoKICAJCXJldHVybiB0ZW1wbGF0ZSh0aGlzLl91cmwsIGV4dGVuZChkYXRhLCB0aGlzLm9wdGlvbnMpKTsKICAJfSwKCiAgCV90aWxlT25Mb2FkOiBmdW5jdGlvbiAoZG9uZSwgdGlsZSkgewogIAkJLy8gRm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFmbGV0L0xlYWZsZXQvaXNzdWVzLzMzMzIKICAJCWlmIChCcm93c2VyLmllbHQ5KSB7CiAgCQkJc2V0VGltZW91dChiaW5kKGRvbmUsIHRoaXMsIG51bGwsIHRpbGUpLCAwKTsKICAJCX0gZWxzZSB7CiAgCQkJZG9uZShudWxsLCB0aWxlKTsKICAJCX0KICAJfSwKCiAgCV90aWxlT25FcnJvcjogZnVuY3Rpb24gKGRvbmUsIHRpbGUsIGUpIHsKICAJCXZhciBlcnJvclVybCA9IHRoaXMub3B0aW9ucy5lcnJvclRpbGVVcmw7CiAgCQlpZiAoZXJyb3JVcmwgJiYgdGlsZS5nZXRBdHRyaWJ1dGUoJ3NyYycpICE9PSBlcnJvclVybCkgewogIAkJCXRpbGUuc3JjID0gZXJyb3JVcmw7CiAgCQl9CiAgCQlkb25lKGUsIHRpbGUpOwogIAl9LAoKICAJX29uVGlsZVJlbW92ZTogZnVuY3Rpb24gKGUpIHsKICAJCWUudGlsZS5vbmxvYWQgPSBudWxsOwogIAl9LAoKICAJX2dldFpvb21Gb3JVcmw6IGZ1bmN0aW9uICgpIHsKICAJCXZhciB6b29tID0gdGhpcy5fdGlsZVpvb20sCiAgCQltYXhab29tID0gdGhpcy5vcHRpb25zLm1heFpvb20sCiAgCQl6b29tUmV2ZXJzZSA9IHRoaXMub3B0aW9ucy56b29tUmV2ZXJzZSwKICAJCXpvb21PZmZzZXQgPSB0aGlzLm9wdGlvbnMuem9vbU9mZnNldDsKCiAgCQlpZiAoem9vbVJldmVyc2UpIHsKICAJCQl6b29tID0gbWF4Wm9vbSAtIHpvb207CiAgCQl9CgogIAkJcmV0dXJuIHpvb20gKyB6b29tT2Zmc2V0OwogIAl9LAoKICAJX2dldFN1YmRvbWFpbjogZnVuY3Rpb24gKHRpbGVQb2ludCkgewogIAkJdmFyIGluZGV4ID0gTWF0aC5hYnModGlsZVBvaW50LnggKyB0aWxlUG9pbnQueSkgJSB0aGlzLm9wdGlvbnMuc3ViZG9tYWlucy5sZW5ndGg7CiAgCQlyZXR1cm4gdGhpcy5vcHRpb25zLnN1YmRvbWFpbnNbaW5kZXhdOwogIAl9LAoKICAJLy8gc3RvcHMgbG9hZGluZyBhbGwgdGlsZXMgaW4gdGhlIGJhY2tncm91bmQgbGF5ZXIKICAJX2Fib3J0TG9hZGluZzogZnVuY3Rpb24gKCkgewogIAkJdmFyIGksIHRpbGU7CiAgCQlmb3IgKGkgaW4gdGhpcy5fdGlsZXMpIHsKICAJCQlpZiAodGhpcy5fdGlsZXNbaV0uY29vcmRzLnogIT09IHRoaXMuX3RpbGVab29tKSB7CiAgCQkJCXRpbGUgPSB0aGlzLl90aWxlc1tpXS5lbDsKCiAgCQkJCXRpbGUub25sb2FkID0gZmFsc2VGbjsKICAJCQkJdGlsZS5vbmVycm9yID0gZmFsc2VGbjsKCiAgCQkJCWlmICghdGlsZS5jb21wbGV0ZSkgewogIAkJCQkJdGlsZS5zcmMgPSBlbXB0eUltYWdlVXJsOwogIAkJCQkJdmFyIGNvb3JkcyA9IHRoaXMuX3RpbGVzW2ldLmNvb3JkczsKICAJCQkJCXJlbW92ZSh0aWxlKTsKICAJCQkJCWRlbGV0ZSB0aGlzLl90aWxlc1tpXTsKICAJCQkJCS8vIEBldmVudCB0aWxlYWJvcnQ6IFRpbGVFdmVudAogIAkJCQkJLy8gRmlyZWQgd2hlbiBhIHRpbGUgd2FzIGxvYWRpbmcgYnV0IGlzIG5vdyBub3Qgd2FudGVkLgogIAkJCQkJdGhpcy5maXJlKCd0aWxlYWJvcnQnLCB7CiAgCQkJCQkJdGlsZTogdGlsZSwKICAJCQkJCQljb29yZHM6IGNvb3JkcwogIAkJCQkJfSk7CiAgCQkJCX0KICAJCQl9CiAgCQl9CiAgCX0sCgogIAlfcmVtb3ZlVGlsZTogZnVuY3Rpb24gKGtleSkgewogIAkJdmFyIHRpbGUgPSB0aGlzLl90aWxlc1trZXldOwogIAkJaWYgKCF0aWxlKSB7IHJldHVybjsgfQoKICAJCS8vIENhbmNlbHMgYW55IHBlbmRpbmcgaHR0cCByZXF1ZXN0cyBhc3NvY2lhdGVkIHdpdGggdGhlIHRpbGUKICAJCXRpbGUuZWwuc2V0QXR0cmlidXRlKCdzcmMnLCBlbXB0eUltYWdlVXJsKTsKCiAgCQlyZXR1cm4gR3JpZExheWVyLnByb3RvdHlwZS5fcmVtb3ZlVGlsZS5jYWxsKHRoaXMsIGtleSk7CiAgCX0sCgogIAlfdGlsZVJlYWR5OiBmdW5jdGlvbiAoY29vcmRzLCBlcnIsIHRpbGUpIHsKICAJCWlmICghdGhpcy5fbWFwIHx8ICh0aWxlICYmIHRpbGUuZ2V0QXR0cmlidXRlKCdzcmMnKSA9PT0gZW1wdHlJbWFnZVVybCkpIHsKICAJCQlyZXR1cm47CiAgCQl9CgogIAkJcmV0dXJuIEdyaWRMYXllci5wcm90b3R5cGUuX3RpbGVSZWFkeS5jYWxsKHRoaXMsIGNvb3JkcywgZXJyLCB0aWxlKTsKICAJfQogIH0pOwoKCiAgLy8gQGZhY3RvcnkgTC50aWxlbGF5ZXIodXJsVGVtcGxhdGU6IFN0cmluZywgb3B0aW9ucz86IFRpbGVMYXllciBvcHRpb25zKQogIC8vIEluc3RhbnRpYXRlcyBhIHRpbGUgbGF5ZXIgb2JqZWN0IGdpdmVuIGEgYFVSTCB0ZW1wbGF0ZWAgYW5kIG9wdGlvbmFsbHkgYW4gb3B0aW9ucyBvYmplY3QuCgogIGZ1bmN0aW9uIHRpbGVMYXllcih1cmwsIG9wdGlvbnMpIHsKICAJcmV0dXJuIG5ldyBUaWxlTGF5ZXIodXJsLCBvcHRpb25zKTsKICB9CgogIC8qCiAgICogQGNsYXNzIFRpbGVMYXllci5XTVMKICAgKiBAaW5oZXJpdHMgVGlsZUxheWVyCiAgICogQGFrYSBMLlRpbGVMYXllci5XTVMKICAgKiBVc2VkIHRvIGRpc3BsYXkgW1dNU10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2ViX01hcF9TZXJ2aWNlKSBzZXJ2aWNlcyBhcyB0aWxlIGxheWVycyBvbiB0aGUgbWFwLiBFeHRlbmRzIGBUaWxlTGF5ZXJgLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIGBgYGpzCiAgICogdmFyIG5leHJhZCA9IEwudGlsZUxheWVyLndtcygiaHR0cDovL21lc29uZXQuYWdyb24uaWFzdGF0ZS5lZHUvY2dpLWJpbi93bXMvbmV4cmFkL24wci5jZ2kiLCB7CiAgICogCWxheWVyczogJ25leHJhZC1uMHItOTAwOTEzJywKICAgKiAJZm9ybWF0OiAnaW1hZ2UvcG5nJywKICAgKiAJdHJhbnNwYXJlbnQ6IHRydWUsCiAgICogCWF0dHJpYnV0aW9uOiAiV2VhdGhlciBkYXRhIMKpIDIwMTIgSUVNIE5leHJhZCIKICAgKiB9KTsKICAgKiBgYGAKICAgKi8KCiAgdmFyIFRpbGVMYXllcldNUyA9IFRpbGVMYXllci5leHRlbmQoewoKICAJLy8gQHNlY3Rpb24KICAJLy8gQGFrYSBUaWxlTGF5ZXIuV01TIG9wdGlvbnMKICAJLy8gSWYgYW55IGN1c3RvbSBvcHRpb25zIG5vdCBkb2N1bWVudGVkIGhlcmUgYXJlIHVzZWQsIHRoZXkgd2lsbCBiZSBzZW50IHRvIHRoZQogIAkvLyBXTVMgc2VydmVyIGFzIGV4dHJhIHBhcmFtZXRlcnMgaW4gZWFjaCByZXF1ZXN0IFVSTC4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvcgogIAkvLyBbbm9uLXN0YW5kYXJkIHZlbmRvciBXTVMgcGFyYW1ldGVyc10oaHR0cHM6Ly9kb2NzLmdlb3NlcnZlci5vcmcvc3RhYmxlL2VuL3VzZXIvc2VydmljZXMvd21zL3ZlbmRvci5odG1sKS4KICAJZGVmYXVsdFdtc1BhcmFtczogewogIAkJc2VydmljZTogJ1dNUycsCiAgCQlyZXF1ZXN0OiAnR2V0TWFwJywKCiAgCQkvLyBAb3B0aW9uIGxheWVyczogU3RyaW5nID0gJycKICAJCS8vICoqKHJlcXVpcmVkKSoqIENvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIFdNUyBsYXllcnMgdG8gc2hvdy4KICAJCWxheWVyczogJycsCgogIAkJLy8gQG9wdGlvbiBzdHlsZXM6IFN0cmluZyA9ICcnCiAgCQkvLyBDb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBXTVMgc3R5bGVzLgogIAkJc3R5bGVzOiAnJywKCiAgCQkvLyBAb3B0aW9uIGZvcm1hdDogU3RyaW5nID0gJ2ltYWdlL2pwZWcnCiAgCQkvLyBXTVMgaW1hZ2UgZm9ybWF0ICh1c2UgYCdpbWFnZS9wbmcnYCBmb3IgbGF5ZXJzIHdpdGggdHJhbnNwYXJlbmN5KS4KICAJCWZvcm1hdDogJ2ltYWdlL2pwZWcnLAoKICAJCS8vIEBvcHRpb24gdHJhbnNwYXJlbnQ6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gSWYgYHRydWVgLCB0aGUgV01TIHNlcnZpY2Ugd2lsbCByZXR1cm4gaW1hZ2VzIHdpdGggdHJhbnNwYXJlbmN5LgogIAkJdHJhbnNwYXJlbnQ6IGZhbHNlLAoKICAJCS8vIEBvcHRpb24gdmVyc2lvbjogU3RyaW5nID0gJzEuMS4xJwogIAkJLy8gVmVyc2lvbiBvZiB0aGUgV01TIHNlcnZpY2UgdG8gdXNlCiAgCQl2ZXJzaW9uOiAnMS4xLjEnCiAgCX0sCgogIAlvcHRpb25zOiB7CiAgCQkvLyBAb3B0aW9uIGNyczogQ1JTID0gbnVsbAogIAkJLy8gQ29vcmRpbmF0ZSBSZWZlcmVuY2UgU3lzdGVtIHRvIHVzZSBmb3IgdGhlIFdNUyByZXF1ZXN0cywgZGVmYXVsdHMgdG8KICAJCS8vIG1hcCBDUlMuIERvbid0IGNoYW5nZSB0aGlzIGlmIHlvdSdyZSBub3Qgc3VyZSB3aGF0IGl0IG1lYW5zLgogIAkJY3JzOiBudWxsLAoKICAJCS8vIEBvcHRpb24gdXBwZXJjYXNlOiBCb29sZWFuID0gZmFsc2UKICAJCS8vIElmIGB0cnVlYCwgV01TIHJlcXVlc3QgcGFyYW1ldGVyIGtleXMgd2lsbCBiZSB1cHBlcmNhc2UuCiAgCQl1cHBlcmNhc2U6IGZhbHNlCiAgCX0sCgogIAlpbml0aWFsaXplOiBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7CgogIAkJdGhpcy5fdXJsID0gdXJsOwoKICAJCXZhciB3bXNQYXJhbXMgPSBleHRlbmQoe30sIHRoaXMuZGVmYXVsdFdtc1BhcmFtcyk7CgogIAkJLy8gYWxsIGtleXMgdGhhdCBhcmUgbm90IFRpbGVMYXllciBvcHRpb25zIGdvIHRvIFdNUyBwYXJhbXMKICAJCWZvciAodmFyIGkgaW4gb3B0aW9ucykgewogIAkJCWlmICghKGkgaW4gdGhpcy5vcHRpb25zKSkgewogIAkJCQl3bXNQYXJhbXNbaV0gPSBvcHRpb25zW2ldOwogIAkJCX0KICAJCX0KCiAgCQlvcHRpb25zID0gc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKCiAgCQl2YXIgcmVhbFJldGluYSA9IG9wdGlvbnMuZGV0ZWN0UmV0aW5hICYmIEJyb3dzZXIucmV0aW5hID8gMiA6IDE7CiAgCQl2YXIgdGlsZVNpemUgPSB0aGlzLmdldFRpbGVTaXplKCk7CiAgCQl3bXNQYXJhbXMud2lkdGggPSB0aWxlU2l6ZS54ICogcmVhbFJldGluYTsKICAJCXdtc1BhcmFtcy5oZWlnaHQgPSB0aWxlU2l6ZS55ICogcmVhbFJldGluYTsKCiAgCQl0aGlzLndtc1BhcmFtcyA9IHdtc1BhcmFtczsKICAJfSwKCiAgCW9uQWRkOiBmdW5jdGlvbiAobWFwKSB7CgogIAkJdGhpcy5fY3JzID0gdGhpcy5vcHRpb25zLmNycyB8fCBtYXAub3B0aW9ucy5jcnM7CiAgCQl0aGlzLl93bXNWZXJzaW9uID0gcGFyc2VGbG9hdCh0aGlzLndtc1BhcmFtcy52ZXJzaW9uKTsKCiAgCQl2YXIgcHJvamVjdGlvbktleSA9IHRoaXMuX3dtc1ZlcnNpb24gPj0gMS4zID8gJ2NycycgOiAnc3JzJzsKICAJCXRoaXMud21zUGFyYW1zW3Byb2plY3Rpb25LZXldID0gdGhpcy5fY3JzLmNvZGU7CgogIAkJVGlsZUxheWVyLnByb3RvdHlwZS5vbkFkZC5jYWxsKHRoaXMsIG1hcCk7CiAgCX0sCgogIAlnZXRUaWxlVXJsOiBmdW5jdGlvbiAoY29vcmRzKSB7CgogIAkJdmFyIHRpbGVCb3VuZHMgPSB0aGlzLl90aWxlQ29vcmRzVG9Od1NlKGNvb3JkcyksCiAgCQkgICAgY3JzID0gdGhpcy5fY3JzLAogIAkJICAgIGJvdW5kcyA9IHRvQm91bmRzKGNycy5wcm9qZWN0KHRpbGVCb3VuZHNbMF0pLCBjcnMucHJvamVjdCh0aWxlQm91bmRzWzFdKSksCiAgCQkgICAgbWluID0gYm91bmRzLm1pbiwKICAJCSAgICBtYXggPSBib3VuZHMubWF4LAogIAkJICAgIGJib3ggPSAodGhpcy5fd21zVmVyc2lvbiA+PSAxLjMgJiYgdGhpcy5fY3JzID09PSBFUFNHNDMyNiA/CiAgCQkgICAgW21pbi55LCBtaW4ueCwgbWF4LnksIG1heC54XSA6CiAgCQkgICAgW21pbi54LCBtaW4ueSwgbWF4LngsIG1heC55XSkuam9pbignLCcpLAogIAkJICAgIHVybCA9IFRpbGVMYXllci5wcm90b3R5cGUuZ2V0VGlsZVVybC5jYWxsKHRoaXMsIGNvb3Jkcyk7CiAgCQlyZXR1cm4gdXJsICsKICAJCQlnZXRQYXJhbVN0cmluZyh0aGlzLndtc1BhcmFtcywgdXJsLCB0aGlzLm9wdGlvbnMudXBwZXJjYXNlKSArCiAgCQkJKHRoaXMub3B0aW9ucy51cHBlcmNhc2UgPyAnJkJCT1g9JyA6ICcmYmJveD0nKSArIGJib3g7CiAgCX0sCgogIAkvLyBAbWV0aG9kIHNldFBhcmFtcyhwYXJhbXM6IE9iamVjdCwgbm9SZWRyYXc/OiBCb29sZWFuKTogdGhpcwogIAkvLyBNZXJnZXMgYW4gb2JqZWN0IHdpdGggdGhlIG5ldyBwYXJhbWV0ZXJzIGFuZCByZS1yZXF1ZXN0cyB0aWxlcyBvbiB0aGUgY3VycmVudCBzY3JlZW4gKHVubGVzcyBgbm9SZWRyYXdgIHdhcyBzZXQgdG8gdHJ1ZSkuCiAgCXNldFBhcmFtczogZnVuY3Rpb24gKHBhcmFtcywgbm9SZWRyYXcpIHsKCiAgCQlleHRlbmQodGhpcy53bXNQYXJhbXMsIHBhcmFtcyk7CgogIAkJaWYgKCFub1JlZHJhdykgewogIAkJCXRoaXMucmVkcmF3KCk7CiAgCQl9CgogIAkJcmV0dXJuIHRoaXM7CiAgCX0KICB9KTsKCgogIC8vIEBmYWN0b3J5IEwudGlsZUxheWVyLndtcyhiYXNlVXJsOiBTdHJpbmcsIG9wdGlvbnM6IFRpbGVMYXllci5XTVMgb3B0aW9ucykKICAvLyBJbnN0YW50aWF0ZXMgYSBXTVMgdGlsZSBsYXllciBvYmplY3QgZ2l2ZW4gYSBiYXNlIFVSTCBvZiB0aGUgV01TIHNlcnZpY2UgYW5kIGEgV01TIHBhcmFtZXRlcnMvb3B0aW9ucyBvYmplY3QuCiAgZnVuY3Rpb24gdGlsZUxheWVyV01TKHVybCwgb3B0aW9ucykgewogIAlyZXR1cm4gbmV3IFRpbGVMYXllcldNUyh1cmwsIG9wdGlvbnMpOwogIH0KCiAgVGlsZUxheWVyLldNUyA9IFRpbGVMYXllcldNUzsKICB0aWxlTGF5ZXIud21zID0gdGlsZUxheWVyV01TOwoKICAvKgogICAqIEBjbGFzcyBSZW5kZXJlcgogICAqIEBpbmhlcml0cyBMYXllcgogICAqIEBha2EgTC5SZW5kZXJlcgogICAqCiAgICogQmFzZSBjbGFzcyBmb3IgdmVjdG9yIHJlbmRlcmVyIGltcGxlbWVudGF0aW9ucyAoYFNWR2AsIGBDYW52YXNgKS4gSGFuZGxlcyB0aGUKICAgKiBET00gY29udGFpbmVyIG9mIHRoZSByZW5kZXJlciwgaXRzIGJvdW5kcywgYW5kIGl0cyB6b29tIGFuaW1hdGlvbi4KICAgKgogICAqIEEgYFJlbmRlcmVyYCB3b3JrcyBhcyBhbiBpbXBsaWNpdCBsYXllciBncm91cCBmb3IgYWxsIGBQYXRoYHMgLSB0aGUgcmVuZGVyZXIKICAgKiBpdHNlbGYgY2FuIGJlIGFkZGVkIG9yIHJlbW92ZWQgdG8gdGhlIG1hcC4gQWxsIHBhdGhzIHVzZSBhIHJlbmRlcmVyLCB3aGljaCBjYW4KICAgKiBiZSBpbXBsaWNpdCAodGhlIG1hcCB3aWxsIGRlY2lkZSB0aGUgdHlwZSBvZiByZW5kZXJlciBhbmQgdXNlIGl0IGF1dG9tYXRpY2FsbHkpCiAgICogb3IgZXhwbGljaXQgKHVzaW5nIHRoZSBbYHJlbmRlcmVyYF0oI3BhdGgtcmVuZGVyZXIpIG9wdGlvbiBvZiB0aGUgcGF0aCkuCiAgICoKICAgKiBEbyBub3QgdXNlIHRoaXMgY2xhc3MgZGlyZWN0bHksIHVzZSBgU1ZHYCBhbmQgYENhbnZhc2AgaW5zdGVhZC4KICAgKgogICAqIEBldmVudCB1cGRhdGU6IEV2ZW50CiAgICogRmlyZWQgd2hlbiB0aGUgcmVuZGVyZXIgdXBkYXRlcyBpdHMgYm91bmRzLCBjZW50ZXIgYW5kIHpvb20sIGZvciBleGFtcGxlIHdoZW4KICAgKiBpdHMgbWFwIGhhcyBtb3ZlZAogICAqLwoKICB2YXIgUmVuZGVyZXIgPSBMYXllci5leHRlbmQoewoKICAJLy8gQHNlY3Rpb24KICAJLy8gQGFrYSBSZW5kZXJlciBvcHRpb25zCiAgCW9wdGlvbnM6IHsKICAJCS8vIEBvcHRpb24gcGFkZGluZzogTnVtYmVyID0gMC4xCiAgCQkvLyBIb3cgbXVjaCB0byBleHRlbmQgdGhlIGNsaXAgYXJlYSBhcm91bmQgdGhlIG1hcCB2aWV3IChyZWxhdGl2ZSB0byBpdHMgc2l6ZSkKICAJCS8vIGUuZy4gMC4xIHdvdWxkIGJlIDEwJSBvZiBtYXAgdmlldyBpbiBlYWNoIGRpcmVjdGlvbgogIAkJcGFkZGluZzogMC4xCiAgCX0sCgogIAlpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykgewogIAkJc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKICAJCXN0YW1wKHRoaXMpOwogIAkJdGhpcy5fbGF5ZXJzID0gdGhpcy5fbGF5ZXJzIHx8IHt9OwogIAl9LAoKICAJb25BZGQ6IGZ1bmN0aW9uICgpIHsKICAJCWlmICghdGhpcy5fY29udGFpbmVyKSB7CiAgCQkJdGhpcy5faW5pdENvbnRhaW5lcigpOyAvLyBkZWZpbmVkIGJ5IHJlbmRlcmVyIGltcGxlbWVudGF0aW9ucwoKICAJCQlpZiAodGhpcy5fem9vbUFuaW1hdGVkKSB7CiAgCQkJCWFkZENsYXNzKHRoaXMuX2NvbnRhaW5lciwgJ2xlYWZsZXQtem9vbS1hbmltYXRlZCcpOwogIAkJCX0KICAJCX0KCiAgCQl0aGlzLmdldFBhbmUoKS5hcHBlbmRDaGlsZCh0aGlzLl9jb250YWluZXIpOwogIAkJdGhpcy5fdXBkYXRlKCk7CiAgCQl0aGlzLm9uKCd1cGRhdGUnLCB0aGlzLl91cGRhdGVQYXRocywgdGhpcyk7CiAgCX0sCgogIAlvblJlbW92ZTogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5vZmYoJ3VwZGF0ZScsIHRoaXMuX3VwZGF0ZVBhdGhzLCB0aGlzKTsKICAJCXRoaXMuX2Rlc3Ryb3lDb250YWluZXIoKTsKICAJfSwKCiAgCWdldEV2ZW50czogZnVuY3Rpb24gKCkgewogIAkJdmFyIGV2ZW50cyA9IHsKICAJCQl2aWV3cmVzZXQ6IHRoaXMuX3Jlc2V0LAogIAkJCXpvb206IHRoaXMuX29uWm9vbSwKICAJCQltb3ZlZW5kOiB0aGlzLl91cGRhdGUsCiAgCQkJem9vbWVuZDogdGhpcy5fb25ab29tRW5kCiAgCQl9OwogIAkJaWYgKHRoaXMuX3pvb21BbmltYXRlZCkgewogIAkJCWV2ZW50cy56b29tYW5pbSA9IHRoaXMuX29uQW5pbVpvb207CiAgCQl9CiAgCQlyZXR1cm4gZXZlbnRzOwogIAl9LAoKICAJX29uQW5pbVpvb206IGZ1bmN0aW9uIChldikgewogIAkJdGhpcy5fdXBkYXRlVHJhbnNmb3JtKGV2LmNlbnRlciwgZXYuem9vbSk7CiAgCX0sCgogIAlfb25ab29tOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLl91cGRhdGVUcmFuc2Zvcm0odGhpcy5fbWFwLmdldENlbnRlcigpLCB0aGlzLl9tYXAuZ2V0Wm9vbSgpKTsKICAJfSwKCiAgCV91cGRhdGVUcmFuc2Zvcm06IGZ1bmN0aW9uIChjZW50ZXIsIHpvb20pIHsKICAJCXZhciBzY2FsZSA9IHRoaXMuX21hcC5nZXRab29tU2NhbGUoem9vbSwgdGhpcy5fem9vbSksCiAgCQkgICAgdmlld0hhbGYgPSB0aGlzLl9tYXAuZ2V0U2l6ZSgpLm11bHRpcGx5QnkoMC41ICsgdGhpcy5vcHRpb25zLnBhZGRpbmcpLAogIAkJICAgIGN1cnJlbnRDZW50ZXJQb2ludCA9IHRoaXMuX21hcC5wcm9qZWN0KHRoaXMuX2NlbnRlciwgem9vbSksCgogIAkJICAgIHRvcExlZnRPZmZzZXQgPSB2aWV3SGFsZi5tdWx0aXBseUJ5KC1zY2FsZSkuYWRkKGN1cnJlbnRDZW50ZXJQb2ludCkKICAJCQkJICAuc3VidHJhY3QodGhpcy5fbWFwLl9nZXROZXdQaXhlbE9yaWdpbihjZW50ZXIsIHpvb20pKTsKCiAgCQlpZiAoQnJvd3Nlci5hbnkzZCkgewogIAkJCXNldFRyYW5zZm9ybSh0aGlzLl9jb250YWluZXIsIHRvcExlZnRPZmZzZXQsIHNjYWxlKTsKICAJCX0gZWxzZSB7CiAgCQkJc2V0UG9zaXRpb24odGhpcy5fY29udGFpbmVyLCB0b3BMZWZ0T2Zmc2V0KTsKICAJCX0KICAJfSwKCiAgCV9yZXNldDogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fdXBkYXRlKCk7CiAgCQl0aGlzLl91cGRhdGVUcmFuc2Zvcm0odGhpcy5fY2VudGVyLCB0aGlzLl96b29tKTsKCiAgCQlmb3IgKHZhciBpZCBpbiB0aGlzLl9sYXllcnMpIHsKICAJCQl0aGlzLl9sYXllcnNbaWRdLl9yZXNldCgpOwogIAkJfQogIAl9LAoKICAJX29uWm9vbUVuZDogZnVuY3Rpb24gKCkgewogIAkJZm9yICh2YXIgaWQgaW4gdGhpcy5fbGF5ZXJzKSB7CiAgCQkJdGhpcy5fbGF5ZXJzW2lkXS5fcHJvamVjdCgpOwogIAkJfQogIAl9LAoKICAJX3VwZGF0ZVBhdGhzOiBmdW5jdGlvbiAoKSB7CiAgCQlmb3IgKHZhciBpZCBpbiB0aGlzLl9sYXllcnMpIHsKICAJCQl0aGlzLl9sYXllcnNbaWRdLl91cGRhdGUoKTsKICAJCX0KICAJfSwKCiAgCV91cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAJCS8vIFVwZGF0ZSBwaXhlbCBib3VuZHMgb2YgcmVuZGVyZXIgY29udGFpbmVyIChmb3IgcG9zaXRpb25pbmcvc2l6aW5nL2NsaXBwaW5nIGxhdGVyKQogIAkJLy8gU3ViY2xhc3NlcyBhcmUgcmVzcG9uc2libGUgb2YgZmlyaW5nIHRoZSAndXBkYXRlJyBldmVudC4KICAJCXZhciBwID0gdGhpcy5vcHRpb25zLnBhZGRpbmcsCiAgCQkgICAgc2l6ZSA9IHRoaXMuX21hcC5nZXRTaXplKCksCiAgCQkgICAgbWluID0gdGhpcy5fbWFwLmNvbnRhaW5lclBvaW50VG9MYXllclBvaW50KHNpemUubXVsdGlwbHlCeSgtcCkpLnJvdW5kKCk7CgogIAkJdGhpcy5fYm91bmRzID0gbmV3IEJvdW5kcyhtaW4sIG1pbi5hZGQoc2l6ZS5tdWx0aXBseUJ5KDEgKyBwICogMikpLnJvdW5kKCkpOwoKICAJCXRoaXMuX2NlbnRlciA9IHRoaXMuX21hcC5nZXRDZW50ZXIoKTsKICAJCXRoaXMuX3pvb20gPSB0aGlzLl9tYXAuZ2V0Wm9vbSgpOwogIAl9CiAgfSk7CgogIC8qCiAgICogQGNsYXNzIENhbnZhcwogICAqIEBpbmhlcml0cyBSZW5kZXJlcgogICAqIEBha2EgTC5DYW52YXMKICAgKgogICAqIEFsbG93cyB2ZWN0b3IgbGF5ZXJzIHRvIGJlIGRpc3BsYXllZCB3aXRoIFtgPGNhbnZhcz5gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQ2FudmFzX0FQSSkuCiAgICogSW5oZXJpdHMgYFJlbmRlcmVyYC4KICAgKgogICAqIER1ZSB0byBbdGVjaG5pY2FsIGxpbWl0YXRpb25zXShodHRwczovL2Nhbml1c2UuY29tL2NhbnZhcyksIENhbnZhcyBpcyBub3QKICAgKiBhdmFpbGFibGUgaW4gYWxsIHdlYiBicm93c2Vycywgbm90YWJseSBJRTgsIGFuZCBvdmVybGFwcGluZyBnZW9tZXRyaWVzIG1pZ2h0CiAgICogbm90IGRpc3BsYXkgcHJvcGVybHkgaW4gc29tZSBlZGdlIGNhc2VzLgogICAqCiAgICogQGV4YW1wbGUKICAgKgogICAqIFVzZSBDYW52YXMgYnkgZGVmYXVsdCBmb3IgYWxsIHBhdGhzIGluIHRoZSBtYXA6CiAgICoKICAgKiBgYGBqcwogICAqIHZhciBtYXAgPSBMLm1hcCgnbWFwJywgewogICAqIAlyZW5kZXJlcjogTC5jYW52YXMoKQogICAqIH0pOwogICAqIGBgYAogICAqCiAgICogVXNlIGEgQ2FudmFzIHJlbmRlcmVyIHdpdGggZXh0cmEgcGFkZGluZyBmb3Igc3BlY2lmaWMgdmVjdG9yIGdlb21ldHJpZXM6CiAgICoKICAgKiBgYGBqcwogICAqIHZhciBtYXAgPSBMLm1hcCgnbWFwJyk7CiAgICogdmFyIG15UmVuZGVyZXIgPSBMLmNhbnZhcyh7IHBhZGRpbmc6IDAuNSB9KTsKICAgKiB2YXIgbGluZSA9IEwucG9seWxpbmUoIGNvb3JkaW5hdGVzLCB7IHJlbmRlcmVyOiBteVJlbmRlcmVyIH0gKTsKICAgKiB2YXIgY2lyY2xlID0gTC5jaXJjbGUoIGNlbnRlciwgeyByZW5kZXJlcjogbXlSZW5kZXJlciB9ICk7CiAgICogYGBgCiAgICovCgogIHZhciBDYW52YXMgPSBSZW5kZXJlci5leHRlbmQoewoKICAJLy8gQHNlY3Rpb24KICAJLy8gQGFrYSBDYW52YXMgb3B0aW9ucwogIAlvcHRpb25zOiB7CiAgCQkvLyBAb3B0aW9uIHRvbGVyYW5jZTogTnVtYmVyID0gMAogIAkJLy8gSG93IG11Y2ggdG8gZXh0ZW5kIHRoZSBjbGljayB0b2xlcmFuY2UgYXJvdW5kIGEgcGF0aC9vYmplY3Qgb24gdGhlIG1hcC4KICAJCXRvbGVyYW5jZTogMAogIAl9LAoKICAJZ2V0RXZlbnRzOiBmdW5jdGlvbiAoKSB7CiAgCQl2YXIgZXZlbnRzID0gUmVuZGVyZXIucHJvdG90eXBlLmdldEV2ZW50cy5jYWxsKHRoaXMpOwogIAkJZXZlbnRzLnZpZXdwcmVyZXNldCA9IHRoaXMuX29uVmlld1ByZVJlc2V0OwogIAkJcmV0dXJuIGV2ZW50czsKICAJfSwKCiAgCV9vblZpZXdQcmVSZXNldDogZnVuY3Rpb24gKCkgewogIAkJLy8gU2V0IGEgZmxhZyBzbyB0aGF0IGEgdmlld3ByZXJlc2V0K21vdmVlbmQrdmlld3Jlc2V0IG9ubHkgdXBkYXRlcyZyZWRyYXdzIG9uY2UKICAJCXRoaXMuX3Bvc3Rwb25lVXBkYXRlUGF0aHMgPSB0cnVlOwogIAl9LAoKICAJb25BZGQ6IGZ1bmN0aW9uICgpIHsKICAJCVJlbmRlcmVyLnByb3RvdHlwZS5vbkFkZC5jYWxsKHRoaXMpOwoKICAJCS8vIFJlZHJhdyB2ZWN0b3JzIHNpbmNlIGNhbnZhcyBpcyBjbGVhcmVkIHVwb24gcmVtb3ZhbCwKICAJCS8vIGluIGNhc2Ugb2YgcmVtb3ZpbmcgdGhlIHJlbmRlcmVyIGl0c2VsZiBmcm9tIHRoZSBtYXAuCiAgCQl0aGlzLl9kcmF3KCk7CiAgCX0sCgogIAlfaW5pdENvbnRhaW5lcjogZnVuY3Rpb24gKCkgewogIAkJdmFyIGNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwoKICAJCW9uKGNvbnRhaW5lciwgJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCB0aGlzKTsKICAJCW9uKGNvbnRhaW5lciwgJ2NsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIGNvbnRleHRtZW51JywgdGhpcy5fb25DbGljaywgdGhpcyk7CiAgCQlvbihjb250YWluZXIsICdtb3VzZW91dCcsIHRoaXMuX2hhbmRsZU1vdXNlT3V0LCB0aGlzKTsKICAJCWNvbnRhaW5lclsnX2xlYWZsZXRfZGlzYWJsZV9ldmVudHMnXSA9IHRydWU7CgogIAkJdGhpcy5fY3R4ID0gY29udGFpbmVyLmdldENvbnRleHQoJzJkJyk7CiAgCX0sCgogIAlfZGVzdHJveUNvbnRhaW5lcjogZnVuY3Rpb24gKCkgewogIAkJY2FuY2VsQW5pbUZyYW1lKHRoaXMuX3JlZHJhd1JlcXVlc3QpOwogIAkJZGVsZXRlIHRoaXMuX2N0eDsKICAJCXJlbW92ZSh0aGlzLl9jb250YWluZXIpOwogIAkJb2ZmKHRoaXMuX2NvbnRhaW5lcik7CiAgCQlkZWxldGUgdGhpcy5fY29udGFpbmVyOwogIAl9LAoKICAJX3VwZGF0ZVBhdGhzOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fcG9zdHBvbmVVcGRhdGVQYXRocykgeyByZXR1cm47IH0KCiAgCQl2YXIgbGF5ZXI7CiAgCQl0aGlzLl9yZWRyYXdCb3VuZHMgPSBudWxsOwogIAkJZm9yICh2YXIgaWQgaW4gdGhpcy5fbGF5ZXJzKSB7CiAgCQkJbGF5ZXIgPSB0aGlzLl9sYXllcnNbaWRdOwogIAkJCWxheWVyLl91cGRhdGUoKTsKICAJCX0KICAJCXRoaXMuX3JlZHJhdygpOwogIAl9LAoKICAJX3VwZGF0ZTogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX21hcC5fYW5pbWF0aW5nWm9vbSAmJiB0aGlzLl9ib3VuZHMpIHsgcmV0dXJuOyB9CgogIAkJUmVuZGVyZXIucHJvdG90eXBlLl91cGRhdGUuY2FsbCh0aGlzKTsKCiAgCQl2YXIgYiA9IHRoaXMuX2JvdW5kcywKICAJCSAgICBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXIsCiAgCQkgICAgc2l6ZSA9IGIuZ2V0U2l6ZSgpLAogIAkJICAgIG0gPSBCcm93c2VyLnJldGluYSA/IDIgOiAxOwoKICAJCXNldFBvc2l0aW9uKGNvbnRhaW5lciwgYi5taW4pOwoKICAJCS8vIHNldCBjYW52YXMgc2l6ZSAoYWxzbyBjbGVhcmluZyBpdCk7IHVzZSBkb3VibGUgc2l6ZSBvbiByZXRpbmEKICAJCWNvbnRhaW5lci53aWR0aCA9IG0gKiBzaXplLng7CiAgCQljb250YWluZXIuaGVpZ2h0ID0gbSAqIHNpemUueTsKICAJCWNvbnRhaW5lci5zdHlsZS53aWR0aCA9IHNpemUueCArICdweCc7CiAgCQljb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gc2l6ZS55ICsgJ3B4JzsKCiAgCQlpZiAoQnJvd3Nlci5yZXRpbmEpIHsKICAJCQl0aGlzLl9jdHguc2NhbGUoMiwgMik7CiAgCQl9CgogIAkJLy8gdHJhbnNsYXRlIHNvIHdlIHVzZSB0aGUgc2FtZSBwYXRoIGNvb3JkaW5hdGVzIGFmdGVyIGNhbnZhcyBlbGVtZW50IG1vdmVzCiAgCQl0aGlzLl9jdHgudHJhbnNsYXRlKC1iLm1pbi54LCAtYi5taW4ueSk7CgogIAkJLy8gVGVsbCBwYXRocyB0byByZWRyYXcgdGhlbXNlbHZlcwogIAkJdGhpcy5maXJlKCd1cGRhdGUnKTsKICAJfSwKCiAgCV9yZXNldDogZnVuY3Rpb24gKCkgewogIAkJUmVuZGVyZXIucHJvdG90eXBlLl9yZXNldC5jYWxsKHRoaXMpOwoKICAJCWlmICh0aGlzLl9wb3N0cG9uZVVwZGF0ZVBhdGhzKSB7CiAgCQkJdGhpcy5fcG9zdHBvbmVVcGRhdGVQYXRocyA9IGZhbHNlOwogIAkJCXRoaXMuX3VwZGF0ZVBhdGhzKCk7CiAgCQl9CiAgCX0sCgogIAlfaW5pdFBhdGg6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdGhpcy5fdXBkYXRlRGFzaEFycmF5KGxheWVyKTsKICAJCXRoaXMuX2xheWVyc1tzdGFtcChsYXllcildID0gbGF5ZXI7CgogIAkJdmFyIG9yZGVyID0gbGF5ZXIuX29yZGVyID0gewogIAkJCWxheWVyOiBsYXllciwKICAJCQlwcmV2OiB0aGlzLl9kcmF3TGFzdCwKICAJCQluZXh0OiBudWxsCiAgCQl9OwogIAkJaWYgKHRoaXMuX2RyYXdMYXN0KSB7IHRoaXMuX2RyYXdMYXN0Lm5leHQgPSBvcmRlcjsgfQogIAkJdGhpcy5fZHJhd0xhc3QgPSBvcmRlcjsKICAJCXRoaXMuX2RyYXdGaXJzdCA9IHRoaXMuX2RyYXdGaXJzdCB8fCB0aGlzLl9kcmF3TGFzdDsKICAJfSwKCiAgCV9hZGRQYXRoOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXRoaXMuX3JlcXVlc3RSZWRyYXcobGF5ZXIpOwogIAl9LAoKICAJX3JlbW92ZVBhdGg6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIG9yZGVyID0gbGF5ZXIuX29yZGVyOwogIAkJdmFyIG5leHQgPSBvcmRlci5uZXh0OwogIAkJdmFyIHByZXYgPSBvcmRlci5wcmV2OwoKICAJCWlmIChuZXh0KSB7CiAgCQkJbmV4dC5wcmV2ID0gcHJldjsKICAJCX0gZWxzZSB7CiAgCQkJdGhpcy5fZHJhd0xhc3QgPSBwcmV2OwogIAkJfQogIAkJaWYgKHByZXYpIHsKICAJCQlwcmV2Lm5leHQgPSBuZXh0OwogIAkJfSBlbHNlIHsKICAJCQl0aGlzLl9kcmF3Rmlyc3QgPSBuZXh0OwogIAkJfQoKICAJCWRlbGV0ZSBsYXllci5fb3JkZXI7CgogIAkJZGVsZXRlIHRoaXMuX2xheWVyc1tzdGFtcChsYXllcildOwoKICAJCXRoaXMuX3JlcXVlc3RSZWRyYXcobGF5ZXIpOwogIAl9LAoKICAJX3VwZGF0ZVBhdGg6IGZ1bmN0aW9uIChsYXllcikgewogIAkJLy8gUmVkcmF3IHRoZSB1bmlvbiBvZiB0aGUgbGF5ZXIncyBvbGQgcGl4ZWwKICAJCS8vIGJvdW5kcyBhbmQgdGhlIG5ldyBwaXhlbCBib3VuZHMuCiAgCQl0aGlzLl9leHRlbmRSZWRyYXdCb3VuZHMobGF5ZXIpOwogIAkJbGF5ZXIuX3Byb2plY3QoKTsKICAJCWxheWVyLl91cGRhdGUoKTsKICAJCS8vIFRoZSByZWRyYXcgd2lsbCBleHRlbmQgdGhlIHJlZHJhdyBib3VuZHMKICAJCS8vIHdpdGggdGhlIG5ldyBwaXhlbCBib3VuZHMuCiAgCQl0aGlzLl9yZXF1ZXN0UmVkcmF3KGxheWVyKTsKICAJfSwKCiAgCV91cGRhdGVTdHlsZTogZnVuY3Rpb24gKGxheWVyKSB7CiAgCQl0aGlzLl91cGRhdGVEYXNoQXJyYXkobGF5ZXIpOwogIAkJdGhpcy5fcmVxdWVzdFJlZHJhdyhsYXllcik7CiAgCX0sCgogIAlfdXBkYXRlRGFzaEFycmF5OiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCWlmICh0eXBlb2YgbGF5ZXIub3B0aW9ucy5kYXNoQXJyYXkgPT09ICdzdHJpbmcnKSB7CiAgCQkJdmFyIHBhcnRzID0gbGF5ZXIub3B0aW9ucy5kYXNoQXJyYXkuc3BsaXQoL1ssIF0rLyksCiAgCQkJICAgIGRhc2hBcnJheSA9IFtdLAogIAkJCSAgICBkYXNoVmFsdWUsCiAgCQkJICAgIGk7CiAgCQkJZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7CiAgCQkJCWRhc2hWYWx1ZSA9IE51bWJlcihwYXJ0c1tpXSk7CiAgCQkJCS8vIElnbm9yZSBkYXNoIGFycmF5IGNvbnRhaW5pbmcgaW52YWxpZCBsZW5ndGhzCiAgCQkJCWlmIChpc05hTihkYXNoVmFsdWUpKSB7IHJldHVybjsgfQogIAkJCQlkYXNoQXJyYXkucHVzaChkYXNoVmFsdWUpOwogIAkJCX0KICAJCQlsYXllci5vcHRpb25zLl9kYXNoQXJyYXkgPSBkYXNoQXJyYXk7CiAgCQl9IGVsc2UgewogIAkJCWxheWVyLm9wdGlvbnMuX2Rhc2hBcnJheSA9IGxheWVyLm9wdGlvbnMuZGFzaEFycmF5OwogIAkJfQogIAl9LAoKICAJX3JlcXVlc3RSZWRyYXc6IGZ1bmN0aW9uIChsYXllcikgewogIAkJaWYgKCF0aGlzLl9tYXApIHsgcmV0dXJuOyB9CgogIAkJdGhpcy5fZXh0ZW5kUmVkcmF3Qm91bmRzKGxheWVyKTsKICAJCXRoaXMuX3JlZHJhd1JlcXVlc3QgPSB0aGlzLl9yZWRyYXdSZXF1ZXN0IHx8IHJlcXVlc3RBbmltRnJhbWUodGhpcy5fcmVkcmF3LCB0aGlzKTsKICAJfSwKCiAgCV9leHRlbmRSZWRyYXdCb3VuZHM6IGZ1bmN0aW9uIChsYXllcikgewogIAkJaWYgKGxheWVyLl9weEJvdW5kcykgewogIAkJCXZhciBwYWRkaW5nID0gKGxheWVyLm9wdGlvbnMud2VpZ2h0IHx8IDApICsgMTsKICAJCQl0aGlzLl9yZWRyYXdCb3VuZHMgPSB0aGlzLl9yZWRyYXdCb3VuZHMgfHwgbmV3IEJvdW5kcygpOwogIAkJCXRoaXMuX3JlZHJhd0JvdW5kcy5leHRlbmQobGF5ZXIuX3B4Qm91bmRzLm1pbi5zdWJ0cmFjdChbcGFkZGluZywgcGFkZGluZ10pKTsKICAJCQl0aGlzLl9yZWRyYXdCb3VuZHMuZXh0ZW5kKGxheWVyLl9weEJvdW5kcy5tYXguYWRkKFtwYWRkaW5nLCBwYWRkaW5nXSkpOwogIAkJfQogIAl9LAoKICAJX3JlZHJhdzogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fcmVkcmF3UmVxdWVzdCA9IG51bGw7CgogIAkJaWYgKHRoaXMuX3JlZHJhd0JvdW5kcykgewogIAkJCXRoaXMuX3JlZHJhd0JvdW5kcy5taW4uX2Zsb29yKCk7CiAgCQkJdGhpcy5fcmVkcmF3Qm91bmRzLm1heC5fY2VpbCgpOwogIAkJfQoKICAJCXRoaXMuX2NsZWFyKCk7IC8vIGNsZWFyIGxheWVycyBpbiByZWRyYXcgYm91bmRzCiAgCQl0aGlzLl9kcmF3KCk7IC8vIGRyYXcgbGF5ZXJzCgogIAkJdGhpcy5fcmVkcmF3Qm91bmRzID0gbnVsbDsKICAJfSwKCiAgCV9jbGVhcjogZnVuY3Rpb24gKCkgewogIAkJdmFyIGJvdW5kcyA9IHRoaXMuX3JlZHJhd0JvdW5kczsKICAJCWlmIChib3VuZHMpIHsKICAJCQl2YXIgc2l6ZSA9IGJvdW5kcy5nZXRTaXplKCk7CiAgCQkJdGhpcy5fY3R4LmNsZWFyUmVjdChib3VuZHMubWluLngsIGJvdW5kcy5taW4ueSwgc2l6ZS54LCBzaXplLnkpOwogIAkJfSBlbHNlIHsKICAJCQl0aGlzLl9jdHguc2F2ZSgpOwogIAkJCXRoaXMuX2N0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7CiAgCQkJdGhpcy5fY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLl9jb250YWluZXIud2lkdGgsIHRoaXMuX2NvbnRhaW5lci5oZWlnaHQpOwogIAkJCXRoaXMuX2N0eC5yZXN0b3JlKCk7CiAgCQl9CiAgCX0sCgogIAlfZHJhdzogZnVuY3Rpb24gKCkgewogIAkJdmFyIGxheWVyLCBib3VuZHMgPSB0aGlzLl9yZWRyYXdCb3VuZHM7CiAgCQl0aGlzLl9jdHguc2F2ZSgpOwogIAkJaWYgKGJvdW5kcykgewogIAkJCXZhciBzaXplID0gYm91bmRzLmdldFNpemUoKTsKICAJCQl0aGlzLl9jdHguYmVnaW5QYXRoKCk7CiAgCQkJdGhpcy5fY3R4LnJlY3QoYm91bmRzLm1pbi54LCBib3VuZHMubWluLnksIHNpemUueCwgc2l6ZS55KTsKICAJCQl0aGlzLl9jdHguY2xpcCgpOwogIAkJfQoKICAJCXRoaXMuX2RyYXdpbmcgPSB0cnVlOwoKICAJCWZvciAodmFyIG9yZGVyID0gdGhpcy5fZHJhd0ZpcnN0OyBvcmRlcjsgb3JkZXIgPSBvcmRlci5uZXh0KSB7CiAgCQkJbGF5ZXIgPSBvcmRlci5sYXllcjsKICAJCQlpZiAoIWJvdW5kcyB8fCAobGF5ZXIuX3B4Qm91bmRzICYmIGxheWVyLl9weEJvdW5kcy5pbnRlcnNlY3RzKGJvdW5kcykpKSB7CiAgCQkJCWxheWVyLl91cGRhdGVQYXRoKCk7CiAgCQkJfQogIAkJfQoKICAJCXRoaXMuX2RyYXdpbmcgPSBmYWxzZTsKCiAgCQl0aGlzLl9jdHgucmVzdG9yZSgpOyAgLy8gUmVzdG9yZSBzdGF0ZSBiZWZvcmUgY2xpcHBpbmcuCiAgCX0sCgogIAlfdXBkYXRlUG9seTogZnVuY3Rpb24gKGxheWVyLCBjbG9zZWQpIHsKICAJCWlmICghdGhpcy5fZHJhd2luZykgeyByZXR1cm47IH0KCiAgCQl2YXIgaSwgaiwgbGVuMiwgcCwKICAJCSAgICBwYXJ0cyA9IGxheWVyLl9wYXJ0cywKICAJCSAgICBsZW4gPSBwYXJ0cy5sZW5ndGgsCiAgCQkgICAgY3R4ID0gdGhpcy5fY3R4OwoKICAJCWlmICghbGVuKSB7IHJldHVybjsgfQoKICAJCWN0eC5iZWdpblBhdGgoKTsKCiAgCQlmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAJCQlmb3IgKGogPSAwLCBsZW4yID0gcGFydHNbaV0ubGVuZ3RoOyBqIDwgbGVuMjsgaisrKSB7CiAgCQkJCXAgPSBwYXJ0c1tpXVtqXTsKICAJCQkJY3R4W2ogPyAnbGluZVRvJyA6ICdtb3ZlVG8nXShwLngsIHAueSk7CiAgCQkJfQogIAkJCWlmIChjbG9zZWQpIHsKICAJCQkJY3R4LmNsb3NlUGF0aCgpOwogIAkJCX0KICAJCX0KCiAgCQl0aGlzLl9maWxsU3Ryb2tlKGN0eCwgbGF5ZXIpOwoKICAJCS8vIFRPRE8gb3B0aW1pemF0aW9uOiAxIGZpbGwvc3Ryb2tlIGZvciBhbGwgZmVhdHVyZXMgd2l0aCBlcXVhbCBzdHlsZSBpbnN0ZWFkIG9mIDEgZm9yIGVhY2ggZmVhdHVyZQogIAl9LAoKICAJX3VwZGF0ZUNpcmNsZTogZnVuY3Rpb24gKGxheWVyKSB7CgogIAkJaWYgKCF0aGlzLl9kcmF3aW5nIHx8IGxheWVyLl9lbXB0eSgpKSB7IHJldHVybjsgfQoKICAJCXZhciBwID0gbGF5ZXIuX3BvaW50LAogIAkJICAgIGN0eCA9IHRoaXMuX2N0eCwKICAJCSAgICByID0gTWF0aC5tYXgoTWF0aC5yb3VuZChsYXllci5fcmFkaXVzKSwgMSksCiAgCQkgICAgcyA9IChNYXRoLm1heChNYXRoLnJvdW5kKGxheWVyLl9yYWRpdXNZKSwgMSkgfHwgcikgLyByOwoKICAJCWlmIChzICE9PSAxKSB7CiAgCQkJY3R4LnNhdmUoKTsKICAJCQljdHguc2NhbGUoMSwgcyk7CiAgCQl9CgogIAkJY3R4LmJlZ2luUGF0aCgpOwogIAkJY3R4LmFyYyhwLngsIHAueSAvIHMsIHIsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7CgogIAkJaWYgKHMgIT09IDEpIHsKICAJCQljdHgucmVzdG9yZSgpOwogIAkJfQoKICAJCXRoaXMuX2ZpbGxTdHJva2UoY3R4LCBsYXllcik7CiAgCX0sCgogIAlfZmlsbFN0cm9rZTogZnVuY3Rpb24gKGN0eCwgbGF5ZXIpIHsKICAJCXZhciBvcHRpb25zID0gbGF5ZXIub3B0aW9uczsKCiAgCQlpZiAob3B0aW9ucy5maWxsKSB7CiAgCQkJY3R4Lmdsb2JhbEFscGhhID0gb3B0aW9ucy5maWxsT3BhY2l0eTsKICAJCQljdHguZmlsbFN0eWxlID0gb3B0aW9ucy5maWxsQ29sb3IgfHwgb3B0aW9ucy5jb2xvcjsKICAJCQljdHguZmlsbChvcHRpb25zLmZpbGxSdWxlIHx8ICdldmVub2RkJyk7CiAgCQl9CgogIAkJaWYgKG9wdGlvbnMuc3Ryb2tlICYmIG9wdGlvbnMud2VpZ2h0ICE9PSAwKSB7CiAgCQkJaWYgKGN0eC5zZXRMaW5lRGFzaCkgewogIAkJCQljdHguc2V0TGluZURhc2gobGF5ZXIub3B0aW9ucyAmJiBsYXllci5vcHRpb25zLl9kYXNoQXJyYXkgfHwgW10pOwogIAkJCX0KICAJCQljdHguZ2xvYmFsQWxwaGEgPSBvcHRpb25zLm9wYWNpdHk7CiAgCQkJY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMud2VpZ2h0OwogIAkJCWN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuY29sb3I7CiAgCQkJY3R4LmxpbmVDYXAgPSBvcHRpb25zLmxpbmVDYXA7CiAgCQkJY3R4LmxpbmVKb2luID0gb3B0aW9ucy5saW5lSm9pbjsKICAJCQljdHguc3Ryb2tlKCk7CiAgCQl9CiAgCX0sCgogIAkvLyBDYW52YXMgb2J2aW91c2x5IGRvZXNuJ3QgaGF2ZSBtb3VzZSBldmVudHMgZm9yIGluZGl2aWR1YWwgZHJhd24gb2JqZWN0cywKICAJLy8gc28gd2UgZW11bGF0ZSB0aGF0IGJ5IGNhbGN1bGF0aW5nIHdoYXQncyB1bmRlciB0aGUgbW91c2Ugb24gbW91c2Vtb3ZlL2NsaWNrIG1hbnVhbGx5CgogIAlfb25DbGljazogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBwb2ludCA9IHRoaXMuX21hcC5tb3VzZUV2ZW50VG9MYXllclBvaW50KGUpLCBsYXllciwgY2xpY2tlZExheWVyOwoKICAJCWZvciAodmFyIG9yZGVyID0gdGhpcy5fZHJhd0ZpcnN0OyBvcmRlcjsgb3JkZXIgPSBvcmRlci5uZXh0KSB7CiAgCQkJbGF5ZXIgPSBvcmRlci5sYXllcjsKICAJCQlpZiAobGF5ZXIub3B0aW9ucy5pbnRlcmFjdGl2ZSAmJiBsYXllci5fY29udGFpbnNQb2ludChwb2ludCkpIHsKICAJCQkJaWYgKCEoZS50eXBlID09PSAnY2xpY2snIHx8IGUudHlwZSA9PT0gJ3ByZWNsaWNrJykgfHwgIXRoaXMuX21hcC5fZHJhZ2dhYmxlTW92ZWQobGF5ZXIpKSB7CiAgCQkJCQljbGlja2VkTGF5ZXIgPSBsYXllcjsKICAJCQkJfQogIAkJCX0KICAJCX0KICAJCXRoaXMuX2ZpcmVFdmVudChjbGlja2VkTGF5ZXIgPyBbY2xpY2tlZExheWVyXSA6IGZhbHNlLCBlKTsKICAJfSwKCiAgCV9vbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHsKICAJCWlmICghdGhpcy5fbWFwIHx8IHRoaXMuX21hcC5kcmFnZ2luZy5tb3ZpbmcoKSB8fCB0aGlzLl9tYXAuX2FuaW1hdGluZ1pvb20pIHsgcmV0dXJuOyB9CgogIAkJdmFyIHBvaW50ID0gdGhpcy5fbWFwLm1vdXNlRXZlbnRUb0xheWVyUG9pbnQoZSk7CiAgCQl0aGlzLl9oYW5kbGVNb3VzZUhvdmVyKGUsIHBvaW50KTsKICAJfSwKCgogIAlfaGFuZGxlTW91c2VPdXQ6IGZ1bmN0aW9uIChlKSB7CiAgCQl2YXIgbGF5ZXIgPSB0aGlzLl9ob3ZlcmVkTGF5ZXI7CiAgCQlpZiAobGF5ZXIpIHsKICAJCQkvLyBpZiB3ZSdyZSBsZWF2aW5nIHRoZSBsYXllciwgZmlyZSBtb3VzZW91dAogIAkJCXJlbW92ZUNsYXNzKHRoaXMuX2NvbnRhaW5lciwgJ2xlYWZsZXQtaW50ZXJhY3RpdmUnKTsKICAJCQl0aGlzLl9maXJlRXZlbnQoW2xheWVyXSwgZSwgJ21vdXNlb3V0Jyk7CiAgCQkJdGhpcy5faG92ZXJlZExheWVyID0gbnVsbDsKICAJCQl0aGlzLl9tb3VzZUhvdmVyVGhyb3R0bGVkID0gZmFsc2U7CiAgCQl9CiAgCX0sCgogIAlfaGFuZGxlTW91c2VIb3ZlcjogZnVuY3Rpb24gKGUsIHBvaW50KSB7CiAgCQlpZiAodGhpcy5fbW91c2VIb3ZlclRocm90dGxlZCkgewogIAkJCXJldHVybjsKICAJCX0KCiAgCQl2YXIgbGF5ZXIsIGNhbmRpZGF0ZUhvdmVyZWRMYXllcjsKCiAgCQlmb3IgKHZhciBvcmRlciA9IHRoaXMuX2RyYXdGaXJzdDsgb3JkZXI7IG9yZGVyID0gb3JkZXIubmV4dCkgewogIAkJCWxheWVyID0gb3JkZXIubGF5ZXI7CiAgCQkJaWYgKGxheWVyLm9wdGlvbnMuaW50ZXJhY3RpdmUgJiYgbGF5ZXIuX2NvbnRhaW5zUG9pbnQocG9pbnQpKSB7CiAgCQkJCWNhbmRpZGF0ZUhvdmVyZWRMYXllciA9IGxheWVyOwogIAkJCX0KICAJCX0KCiAgCQlpZiAoY2FuZGlkYXRlSG92ZXJlZExheWVyICE9PSB0aGlzLl9ob3ZlcmVkTGF5ZXIpIHsKICAJCQl0aGlzLl9oYW5kbGVNb3VzZU91dChlKTsKCiAgCQkJaWYgKGNhbmRpZGF0ZUhvdmVyZWRMYXllcikgewogIAkJCQlhZGRDbGFzcyh0aGlzLl9jb250YWluZXIsICdsZWFmbGV0LWludGVyYWN0aXZlJyk7IC8vIGNoYW5nZSBjdXJzb3IKICAJCQkJdGhpcy5fZmlyZUV2ZW50KFtjYW5kaWRhdGVIb3ZlcmVkTGF5ZXJdLCBlLCAnbW91c2VvdmVyJyk7CiAgCQkJCXRoaXMuX2hvdmVyZWRMYXllciA9IGNhbmRpZGF0ZUhvdmVyZWRMYXllcjsKICAJCQl9CiAgCQl9CgogIAkJdGhpcy5fZmlyZUV2ZW50KHRoaXMuX2hvdmVyZWRMYXllciA/IFt0aGlzLl9ob3ZlcmVkTGF5ZXJdIDogZmFsc2UsIGUpOwoKICAJCXRoaXMuX21vdXNlSG92ZXJUaHJvdHRsZWQgPSB0cnVlOwogIAkJc2V0VGltZW91dChiaW5kKGZ1bmN0aW9uICgpIHsKICAJCQl0aGlzLl9tb3VzZUhvdmVyVGhyb3R0bGVkID0gZmFsc2U7CiAgCQl9LCB0aGlzKSwgMzIpOwogIAl9LAoKICAJX2ZpcmVFdmVudDogZnVuY3Rpb24gKGxheWVycywgZSwgdHlwZSkgewogIAkJdGhpcy5fbWFwLl9maXJlRE9NRXZlbnQoZSwgdHlwZSB8fCBlLnR5cGUsIGxheWVycyk7CiAgCX0sCgogIAlfYnJpbmdUb0Zyb250OiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXZhciBvcmRlciA9IGxheWVyLl9vcmRlcjsKCiAgCQlpZiAoIW9yZGVyKSB7IHJldHVybjsgfQoKICAJCXZhciBuZXh0ID0gb3JkZXIubmV4dDsKICAJCXZhciBwcmV2ID0gb3JkZXIucHJldjsKCiAgCQlpZiAobmV4dCkgewogIAkJCW5leHQucHJldiA9IHByZXY7CiAgCQl9IGVsc2UgewogIAkJCS8vIEFscmVhZHkgbGFzdAogIAkJCXJldHVybjsKICAJCX0KICAJCWlmIChwcmV2KSB7CiAgCQkJcHJldi5uZXh0ID0gbmV4dDsKICAJCX0gZWxzZSBpZiAobmV4dCkgewogIAkJCS8vIFVwZGF0ZSBmaXJzdCBlbnRyeSB1bmxlc3MgdGhpcyBpcyB0aGUKICAJCQkvLyBzaW5nbGUgZW50cnkKICAJCQl0aGlzLl9kcmF3Rmlyc3QgPSBuZXh0OwogIAkJfQoKICAJCW9yZGVyLnByZXYgPSB0aGlzLl9kcmF3TGFzdDsKICAJCXRoaXMuX2RyYXdMYXN0Lm5leHQgPSBvcmRlcjsKCiAgCQlvcmRlci5uZXh0ID0gbnVsbDsKICAJCXRoaXMuX2RyYXdMYXN0ID0gb3JkZXI7CgogIAkJdGhpcy5fcmVxdWVzdFJlZHJhdyhsYXllcik7CiAgCX0sCgogIAlfYnJpbmdUb0JhY2s6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIG9yZGVyID0gbGF5ZXIuX29yZGVyOwoKICAJCWlmICghb3JkZXIpIHsgcmV0dXJuOyB9CgogIAkJdmFyIG5leHQgPSBvcmRlci5uZXh0OwogIAkJdmFyIHByZXYgPSBvcmRlci5wcmV2OwoKICAJCWlmIChwcmV2KSB7CiAgCQkJcHJldi5uZXh0ID0gbmV4dDsKICAJCX0gZWxzZSB7CiAgCQkJLy8gQWxyZWFkeSBmaXJzdAogIAkJCXJldHVybjsKICAJCX0KICAJCWlmIChuZXh0KSB7CiAgCQkJbmV4dC5wcmV2ID0gcHJldjsKICAJCX0gZWxzZSBpZiAocHJldikgewogIAkJCS8vIFVwZGF0ZSBsYXN0IGVudHJ5IHVubGVzcyB0aGlzIGlzIHRoZQogIAkJCS8vIHNpbmdsZSBlbnRyeQogIAkJCXRoaXMuX2RyYXdMYXN0ID0gcHJldjsKICAJCX0KCiAgCQlvcmRlci5wcmV2ID0gbnVsbDsKCiAgCQlvcmRlci5uZXh0ID0gdGhpcy5fZHJhd0ZpcnN0OwogIAkJdGhpcy5fZHJhd0ZpcnN0LnByZXYgPSBvcmRlcjsKICAJCXRoaXMuX2RyYXdGaXJzdCA9IG9yZGVyOwoKICAJCXRoaXMuX3JlcXVlc3RSZWRyYXcobGF5ZXIpOwogIAl9CiAgfSk7CgogIC8vIEBmYWN0b3J5IEwuY2FudmFzKG9wdGlvbnM/OiBSZW5kZXJlciBvcHRpb25zKQogIC8vIENyZWF0ZXMgYSBDYW52YXMgcmVuZGVyZXIgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy4KICBmdW5jdGlvbiBjYW52YXMob3B0aW9ucykgewogIAlyZXR1cm4gQnJvd3Nlci5jYW52YXMgPyBuZXcgQ2FudmFzKG9wdGlvbnMpIDogbnVsbDsKICB9CgogIC8qCiAgICogVGhhbmtzIHRvIERtaXRyeSBCYXJhbm92c2t5IGFuZCBoaXMgUmFwaGFlbCBsaWJyYXJ5IGZvciBpbnNwaXJhdGlvbiEKICAgKi8KCgogIHZhciB2bWxDcmVhdGUgPSAoZnVuY3Rpb24gKCkgewogIAl0cnkgewogIAkJZG9jdW1lbnQubmFtZXNwYWNlcy5hZGQoJ2x2bWwnLCAndXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWwnKTsKICAJCXJldHVybiBmdW5jdGlvbiAobmFtZSkgewogIAkJCXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCc8bHZtbDonICsgbmFtZSArICcgY2xhc3M9Imx2bWwiPicpOwogIAkJfTsKICAJfSBjYXRjaCAoZSkgewogIAkJLy8gRG8gbm90IHJldHVybiBmbiBmcm9tIGNhdGNoIGJsb2NrIHNvIGBlYCBjYW4gYmUgZ2FyYmFnZSBjb2xsZWN0ZWQKICAJCS8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vTGVhZmxldC9MZWFmbGV0L3B1bGwvNzI3OQogIAl9CiAgCXJldHVybiBmdW5jdGlvbiAobmFtZSkgewogIAkJcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJzwnICsgbmFtZSArICcgeG1sbnM9InVybjpzY2hlbWFzLW1pY3Jvc29mdC5jb206dm1sIiBjbGFzcz0ibHZtbCI+Jyk7CiAgCX07CiAgfSkoKTsKCgogIC8qCiAgICogQGNsYXNzIFNWRwogICAqCiAgICoKICAgKiBWTUwgd2FzIGRlcHJlY2F0ZWQgaW4gMjAxMiwgd2hpY2ggbWVhbnMgVk1MIGZ1bmN0aW9uYWxpdHkgZXhpc3RzIG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5CiAgICogd2l0aCBvbGQgdmVyc2lvbnMgb2YgSW50ZXJuZXQgRXhwbG9yZXIuCiAgICovCgogIC8vIG1peGluIHRvIHJlZGVmaW5lIHNvbWUgU1ZHIG1ldGhvZHMgdG8gaGFuZGxlIFZNTCBzeW50YXggd2hpY2ggaXMgc2ltaWxhciBidXQgd2l0aCBzb21lIGRpZmZlcmVuY2VzCiAgdmFyIHZtbE1peGluID0gewoKICAJX2luaXRDb250YWluZXI6IGZ1bmN0aW9uICgpIHsKICAJCXRoaXMuX2NvbnRhaW5lciA9IGNyZWF0ZSQxKCdkaXYnLCAnbGVhZmxldC12bWwtY29udGFpbmVyJyk7CiAgCX0sCgogIAlfdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fbWFwLl9hbmltYXRpbmdab29tKSB7IHJldHVybjsgfQogIAkJUmVuZGVyZXIucHJvdG90eXBlLl91cGRhdGUuY2FsbCh0aGlzKTsKICAJCXRoaXMuZmlyZSgndXBkYXRlJyk7CiAgCX0sCgogIAlfaW5pdFBhdGg6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIGNvbnRhaW5lciA9IGxheWVyLl9jb250YWluZXIgPSB2bWxDcmVhdGUoJ3NoYXBlJyk7CgogIAkJYWRkQ2xhc3MoY29udGFpbmVyLCAnbGVhZmxldC12bWwtc2hhcGUgJyArICh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lIHx8ICcnKSk7CgogIAkJY29udGFpbmVyLmNvb3Jkc2l6ZSA9ICcxIDEnOwoKICAJCWxheWVyLl9wYXRoID0gdm1sQ3JlYXRlKCdwYXRoJyk7CiAgCQljb250YWluZXIuYXBwZW5kQ2hpbGQobGF5ZXIuX3BhdGgpOwoKICAJCXRoaXMuX3VwZGF0ZVN0eWxlKGxheWVyKTsKICAJCXRoaXMuX2xheWVyc1tzdGFtcChsYXllcildID0gbGF5ZXI7CiAgCX0sCgogIAlfYWRkUGF0aDogZnVuY3Rpb24gKGxheWVyKSB7CiAgCQl2YXIgY29udGFpbmVyID0gbGF5ZXIuX2NvbnRhaW5lcjsKICAJCXRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZChjb250YWluZXIpOwoKICAJCWlmIChsYXllci5vcHRpb25zLmludGVyYWN0aXZlKSB7CiAgCQkJbGF5ZXIuYWRkSW50ZXJhY3RpdmVUYXJnZXQoY29udGFpbmVyKTsKICAJCX0KICAJfSwKCiAgCV9yZW1vdmVQYXRoOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXZhciBjb250YWluZXIgPSBsYXllci5fY29udGFpbmVyOwogIAkJcmVtb3ZlKGNvbnRhaW5lcik7CiAgCQlsYXllci5yZW1vdmVJbnRlcmFjdGl2ZVRhcmdldChjb250YWluZXIpOwogIAkJZGVsZXRlIHRoaXMuX2xheWVyc1tzdGFtcChsYXllcildOwogIAl9LAoKICAJX3VwZGF0ZVN0eWxlOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXZhciBzdHJva2UgPSBsYXllci5fc3Ryb2tlLAogIAkJICAgIGZpbGwgPSBsYXllci5fZmlsbCwKICAJCSAgICBvcHRpb25zID0gbGF5ZXIub3B0aW9ucywKICAJCSAgICBjb250YWluZXIgPSBsYXllci5fY29udGFpbmVyOwoKICAJCWNvbnRhaW5lci5zdHJva2VkID0gISFvcHRpb25zLnN0cm9rZTsKICAJCWNvbnRhaW5lci5maWxsZWQgPSAhIW9wdGlvbnMuZmlsbDsKCiAgCQlpZiAob3B0aW9ucy5zdHJva2UpIHsKICAJCQlpZiAoIXN0cm9rZSkgewogIAkJCQlzdHJva2UgPSBsYXllci5fc3Ryb2tlID0gdm1sQ3JlYXRlKCdzdHJva2UnKTsKICAJCQl9CiAgCQkJY29udGFpbmVyLmFwcGVuZENoaWxkKHN0cm9rZSk7CiAgCQkJc3Ryb2tlLndlaWdodCA9IG9wdGlvbnMud2VpZ2h0ICsgJ3B4JzsKICAJCQlzdHJva2UuY29sb3IgPSBvcHRpb25zLmNvbG9yOwogIAkJCXN0cm9rZS5vcGFjaXR5ID0gb3B0aW9ucy5vcGFjaXR5OwoKICAJCQlpZiAob3B0aW9ucy5kYXNoQXJyYXkpIHsKICAJCQkJc3Ryb2tlLmRhc2hTdHlsZSA9IGlzQXJyYXkob3B0aW9ucy5kYXNoQXJyYXkpID8KICAJCQkJICAgIG9wdGlvbnMuZGFzaEFycmF5LmpvaW4oJyAnKSA6CiAgCQkJCSAgICBvcHRpb25zLmRhc2hBcnJheS5yZXBsYWNlKC8oICosICopL2csICcgJyk7CiAgCQkJfSBlbHNlIHsKICAJCQkJc3Ryb2tlLmRhc2hTdHlsZSA9ICcnOwogIAkJCX0KICAJCQlzdHJva2UuZW5kY2FwID0gb3B0aW9ucy5saW5lQ2FwLnJlcGxhY2UoJ2J1dHQnLCAnZmxhdCcpOwogIAkJCXN0cm9rZS5qb2luc3R5bGUgPSBvcHRpb25zLmxpbmVKb2luOwoKICAJCX0gZWxzZSBpZiAoc3Ryb2tlKSB7CiAgCQkJY29udGFpbmVyLnJlbW92ZUNoaWxkKHN0cm9rZSk7CiAgCQkJbGF5ZXIuX3N0cm9rZSA9IG51bGw7CiAgCQl9CgogIAkJaWYgKG9wdGlvbnMuZmlsbCkgewogIAkJCWlmICghZmlsbCkgewogIAkJCQlmaWxsID0gbGF5ZXIuX2ZpbGwgPSB2bWxDcmVhdGUoJ2ZpbGwnKTsKICAJCQl9CiAgCQkJY29udGFpbmVyLmFwcGVuZENoaWxkKGZpbGwpOwogIAkJCWZpbGwuY29sb3IgPSBvcHRpb25zLmZpbGxDb2xvciB8fCBvcHRpb25zLmNvbG9yOwogIAkJCWZpbGwub3BhY2l0eSA9IG9wdGlvbnMuZmlsbE9wYWNpdHk7CgogIAkJfSBlbHNlIGlmIChmaWxsKSB7CiAgCQkJY29udGFpbmVyLnJlbW92ZUNoaWxkKGZpbGwpOwogIAkJCWxheWVyLl9maWxsID0gbnVsbDsKICAJCX0KICAJfSwKCiAgCV91cGRhdGVDaXJjbGU6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIHAgPSBsYXllci5fcG9pbnQucm91bmQoKSwKICAJCSAgICByID0gTWF0aC5yb3VuZChsYXllci5fcmFkaXVzKSwKICAJCSAgICByMiA9IE1hdGgucm91bmQobGF5ZXIuX3JhZGl1c1kgfHwgcik7CgogIAkJdGhpcy5fc2V0UGF0aChsYXllciwgbGF5ZXIuX2VtcHR5KCkgPyAnTTAgMCcgOgogIAkJCSdBTCAnICsgcC54ICsgJywnICsgcC55ICsgJyAnICsgciArICcsJyArIHIyICsgJyAwLCcgKyAoNjU1MzUgKiAzNjApKTsKICAJfSwKCiAgCV9zZXRQYXRoOiBmdW5jdGlvbiAobGF5ZXIsIHBhdGgpIHsKICAJCWxheWVyLl9wYXRoLnYgPSBwYXRoOwogIAl9LAoKICAJX2JyaW5nVG9Gcm9udDogZnVuY3Rpb24gKGxheWVyKSB7CiAgCQl0b0Zyb250KGxheWVyLl9jb250YWluZXIpOwogIAl9LAoKICAJX2JyaW5nVG9CYWNrOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXRvQmFjayhsYXllci5fY29udGFpbmVyKTsKICAJfQogIH07CgogIHZhciBjcmVhdGUgPSBCcm93c2VyLnZtbCA/IHZtbENyZWF0ZSA6IHN2Z0NyZWF0ZTsKCiAgLyoKICAgKiBAY2xhc3MgU1ZHCiAgICogQGluaGVyaXRzIFJlbmRlcmVyCiAgICogQGFrYSBMLlNWRwogICAqCiAgICogQWxsb3dzIHZlY3RvciBsYXllcnMgdG8gYmUgZGlzcGxheWVkIHdpdGggW1NWR10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvU1ZHKS4KICAgKiBJbmhlcml0cyBgUmVuZGVyZXJgLgogICAqCiAgICogRHVlIHRvIFt0ZWNobmljYWwgbGltaXRhdGlvbnNdKGh0dHBzOi8vY2FuaXVzZS5jb20vc3ZnKSwgU1ZHIGlzIG5vdAogICAqIGF2YWlsYWJsZSBpbiBhbGwgd2ViIGJyb3dzZXJzLCBub3RhYmx5IEFuZHJvaWQgMi54IGFuZCAzLnguCiAgICoKICAgKiBBbHRob3VnaCBTVkcgaXMgbm90IGF2YWlsYWJsZSBvbiBJRTcgYW5kIElFOCwgdGhlc2UgYnJvd3NlcnMgc3VwcG9ydAogICAqIFtWTUxdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZlY3Rvcl9NYXJrdXBfTGFuZ3VhZ2UpCiAgICogKGEgbm93IGRlcHJlY2F0ZWQgdGVjaG5vbG9neSksIGFuZCB0aGUgU1ZHIHJlbmRlcmVyIHdpbGwgZmFsbCBiYWNrIHRvIFZNTCBpbgogICAqIHRoaXMgY2FzZS4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBVc2UgU1ZHIGJ5IGRlZmF1bHQgZm9yIGFsbCBwYXRocyBpbiB0aGUgbWFwOgogICAqCiAgICogYGBganMKICAgKiB2YXIgbWFwID0gTC5tYXAoJ21hcCcsIHsKICAgKiAJcmVuZGVyZXI6IEwuc3ZnKCkKICAgKiB9KTsKICAgKiBgYGAKICAgKgogICAqIFVzZSBhIFNWRyByZW5kZXJlciB3aXRoIGV4dHJhIHBhZGRpbmcgZm9yIHNwZWNpZmljIHZlY3RvciBnZW9tZXRyaWVzOgogICAqCiAgICogYGBganMKICAgKiB2YXIgbWFwID0gTC5tYXAoJ21hcCcpOwogICAqIHZhciBteVJlbmRlcmVyID0gTC5zdmcoeyBwYWRkaW5nOiAwLjUgfSk7CiAgICogdmFyIGxpbmUgPSBMLnBvbHlsaW5lKCBjb29yZGluYXRlcywgeyByZW5kZXJlcjogbXlSZW5kZXJlciB9ICk7CiAgICogdmFyIGNpcmNsZSA9IEwuY2lyY2xlKCBjZW50ZXIsIHsgcmVuZGVyZXI6IG15UmVuZGVyZXIgfSApOwogICAqIGBgYAogICAqLwoKICB2YXIgU1ZHID0gUmVuZGVyZXIuZXh0ZW5kKHsKCiAgCV9pbml0Q29udGFpbmVyOiBmdW5jdGlvbiAoKSB7CiAgCQl0aGlzLl9jb250YWluZXIgPSBjcmVhdGUoJ3N2ZycpOwoKICAJCS8vIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGNsaWNrIHRocm91Z2ggc3ZnIHJvb3Q7IHdlJ2xsIHJlc2V0IGl0IGJhY2sgaW4gaW5kaXZpZHVhbCBwYXRocwogIAkJdGhpcy5fY29udGFpbmVyLnNldEF0dHJpYnV0ZSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpOwoKICAJCXRoaXMuX3Jvb3RHcm91cCA9IGNyZWF0ZSgnZycpOwogIAkJdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX3Jvb3RHcm91cCk7CiAgCX0sCgogIAlfZGVzdHJveUNvbnRhaW5lcjogZnVuY3Rpb24gKCkgewogIAkJcmVtb3ZlKHRoaXMuX2NvbnRhaW5lcik7CiAgCQlvZmYodGhpcy5fY29udGFpbmVyKTsKICAJCWRlbGV0ZSB0aGlzLl9jb250YWluZXI7CiAgCQlkZWxldGUgdGhpcy5fcm9vdEdyb3VwOwogIAkJZGVsZXRlIHRoaXMuX3N2Z1NpemU7CiAgCX0sCgogIAlfdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAodGhpcy5fbWFwLl9hbmltYXRpbmdab29tICYmIHRoaXMuX2JvdW5kcykgeyByZXR1cm47IH0KCiAgCQlSZW5kZXJlci5wcm90b3R5cGUuX3VwZGF0ZS5jYWxsKHRoaXMpOwoKICAJCXZhciBiID0gdGhpcy5fYm91bmRzLAogIAkJICAgIHNpemUgPSBiLmdldFNpemUoKSwKICAJCSAgICBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXI7CgogIAkJLy8gc2V0IHNpemUgb2Ygc3ZnLWNvbnRhaW5lciBpZiBjaGFuZ2VkCiAgCQlpZiAoIXRoaXMuX3N2Z1NpemUgfHwgIXRoaXMuX3N2Z1NpemUuZXF1YWxzKHNpemUpKSB7CiAgCQkJdGhpcy5fc3ZnU2l6ZSA9IHNpemU7CiAgCQkJY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBzaXplLngpOwogIAkJCWNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHNpemUueSk7CiAgCQl9CgogIAkJLy8gbW92ZW1lbnQ6IHVwZGF0ZSBjb250YWluZXIgdmlld0JveCBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gY2hhbmdlIGNvb3JkaW5hdGVzIG9mIGluZGl2aWR1YWwgbGF5ZXJzCiAgCQlzZXRQb3NpdGlvbihjb250YWluZXIsIGIubWluKTsKICAJCWNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCBbYi5taW4ueCwgYi5taW4ueSwgc2l6ZS54LCBzaXplLnldLmpvaW4oJyAnKSk7CgogIAkJdGhpcy5maXJlKCd1cGRhdGUnKTsKICAJfSwKCiAgCS8vIG1ldGhvZHMgYmVsb3cgYXJlIGNhbGxlZCBieSB2ZWN0b3IgbGF5ZXJzIGltcGxlbWVudGF0aW9ucwoKICAJX2luaXRQYXRoOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCXZhciBwYXRoID0gbGF5ZXIuX3BhdGggPSBjcmVhdGUoJ3BhdGgnKTsKCiAgCQkvLyBAbmFtZXNwYWNlIFBhdGgKICAJCS8vIEBvcHRpb24gY2xhc3NOYW1lOiBTdHJpbmcgPSBudWxsCiAgCQkvLyBDdXN0b20gY2xhc3MgbmFtZSBzZXQgb24gYW4gZWxlbWVudC4gT25seSBmb3IgU1ZHIHJlbmRlcmVyLgogIAkJaWYgKGxheWVyLm9wdGlvbnMuY2xhc3NOYW1lKSB7CiAgCQkJYWRkQ2xhc3MocGF0aCwgbGF5ZXIub3B0aW9ucy5jbGFzc05hbWUpOwogIAkJfQoKICAJCWlmIChsYXllci5vcHRpb25zLmludGVyYWN0aXZlKSB7CiAgCQkJYWRkQ2xhc3MocGF0aCwgJ2xlYWZsZXQtaW50ZXJhY3RpdmUnKTsKICAJCX0KCiAgCQl0aGlzLl91cGRhdGVTdHlsZShsYXllcik7CiAgCQl0aGlzLl9sYXllcnNbc3RhbXAobGF5ZXIpXSA9IGxheWVyOwogIAl9LAoKICAJX2FkZFBhdGg6IGZ1bmN0aW9uIChsYXllcikgewogIAkJaWYgKCF0aGlzLl9yb290R3JvdXApIHsgdGhpcy5faW5pdENvbnRhaW5lcigpOyB9CiAgCQl0aGlzLl9yb290R3JvdXAuYXBwZW5kQ2hpbGQobGF5ZXIuX3BhdGgpOwogIAkJbGF5ZXIuYWRkSW50ZXJhY3RpdmVUYXJnZXQobGF5ZXIuX3BhdGgpOwogIAl9LAoKICAJX3JlbW92ZVBhdGg6IGZ1bmN0aW9uIChsYXllcikgewogIAkJcmVtb3ZlKGxheWVyLl9wYXRoKTsKICAJCWxheWVyLnJlbW92ZUludGVyYWN0aXZlVGFyZ2V0KGxheWVyLl9wYXRoKTsKICAJCWRlbGV0ZSB0aGlzLl9sYXllcnNbc3RhbXAobGF5ZXIpXTsKICAJfSwKCiAgCV91cGRhdGVQYXRoOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAJCWxheWVyLl9wcm9qZWN0KCk7CiAgCQlsYXllci5fdXBkYXRlKCk7CiAgCX0sCgogIAlfdXBkYXRlU3R5bGU6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIHBhdGggPSBsYXllci5fcGF0aCwKICAJCSAgICBvcHRpb25zID0gbGF5ZXIub3B0aW9uczsKCiAgCQlpZiAoIXBhdGgpIHsgcmV0dXJuOyB9CgogIAkJaWYgKG9wdGlvbnMuc3Ryb2tlKSB7CiAgCQkJcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIG9wdGlvbnMuY29sb3IpOwogIAkJCXBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utb3BhY2l0eScsIG9wdGlvbnMub3BhY2l0eSk7CiAgCQkJcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIG9wdGlvbnMud2VpZ2h0KTsKICAJCQlwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCBvcHRpb25zLmxpbmVDYXApOwogIAkJCXBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCBvcHRpb25zLmxpbmVKb2luKTsKCiAgCQkJaWYgKG9wdGlvbnMuZGFzaEFycmF5KSB7CiAgCQkJCXBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5Jywgb3B0aW9ucy5kYXNoQXJyYXkpOwogIAkJCX0gZWxzZSB7CiAgCQkJCXBhdGgucmVtb3ZlQXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5Jyk7CiAgCQkJfQoKICAJCQlpZiAob3B0aW9ucy5kYXNoT2Zmc2V0KSB7CiAgCQkJCXBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaG9mZnNldCcsIG9wdGlvbnMuZGFzaE9mZnNldCk7CiAgCQkJfSBlbHNlIHsKICAJCQkJcGF0aC5yZW1vdmVBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNob2Zmc2V0Jyk7CiAgCQkJfQogIAkJfSBlbHNlIHsKICAJCQlwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ25vbmUnKTsKICAJCX0KCiAgCQlpZiAob3B0aW9ucy5maWxsKSB7CiAgCQkJcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBvcHRpb25zLmZpbGxDb2xvciB8fCBvcHRpb25zLmNvbG9yKTsKICAJCQlwYXRoLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5Jywgb3B0aW9ucy5maWxsT3BhY2l0eSk7CiAgCQkJcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwtcnVsZScsIG9wdGlvbnMuZmlsbFJ1bGUgfHwgJ2V2ZW5vZGQnKTsKICAJCX0gZWxzZSB7CiAgCQkJcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnbm9uZScpOwogIAkJfQogIAl9LAoKICAJX3VwZGF0ZVBvbHk6IGZ1bmN0aW9uIChsYXllciwgY2xvc2VkKSB7CiAgCQl0aGlzLl9zZXRQYXRoKGxheWVyLCBwb2ludHNUb1BhdGgobGF5ZXIuX3BhcnRzLCBjbG9zZWQpKTsKICAJfSwKCiAgCV91cGRhdGVDaXJjbGU6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdmFyIHAgPSBsYXllci5fcG9pbnQsCiAgCQkgICAgciA9IE1hdGgubWF4KE1hdGgucm91bmQobGF5ZXIuX3JhZGl1cyksIDEpLAogIAkJICAgIHIyID0gTWF0aC5tYXgoTWF0aC5yb3VuZChsYXllci5fcmFkaXVzWSksIDEpIHx8IHIsCiAgCQkgICAgYXJjID0gJ2EnICsgciArICcsJyArIHIyICsgJyAwIDEsMCAnOwoKICAJCS8vIGRyYXdpbmcgYSBjaXJjbGUgd2l0aCB0d28gaGFsZi1hcmNzCiAgCQl2YXIgZCA9IGxheWVyLl9lbXB0eSgpID8gJ00wIDAnIDoKICAJCQknTScgKyAocC54IC0gcikgKyAnLCcgKyBwLnkgKwogIAkJCWFyYyArIChyICogMikgKyAnLDAgJyArCiAgCQkJYXJjICsgKC1yICogMikgKyAnLDAgJzsKCiAgCQl0aGlzLl9zZXRQYXRoKGxheWVyLCBkKTsKICAJfSwKCiAgCV9zZXRQYXRoOiBmdW5jdGlvbiAobGF5ZXIsIHBhdGgpIHsKICAJCWxheWVyLl9wYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHBhdGgpOwogIAl9LAoKICAJLy8gU1ZHIGRvZXMgbm90IGhhdmUgdGhlIGNvbmNlcHQgb2YgekluZGV4IHNvIHdlIHJlc29ydCB0byBjaGFuZ2luZyB0aGUgRE9NIG9yZGVyIG9mIGVsZW1lbnRzCiAgCV9icmluZ1RvRnJvbnQ6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdG9Gcm9udChsYXllci5fcGF0aCk7CiAgCX0sCgogIAlfYnJpbmdUb0JhY2s6IGZ1bmN0aW9uIChsYXllcikgewogIAkJdG9CYWNrKGxheWVyLl9wYXRoKTsKICAJfQogIH0pOwoKICBpZiAoQnJvd3Nlci52bWwpIHsKICAJU1ZHLmluY2x1ZGUodm1sTWl4aW4pOwogIH0KCiAgLy8gQG5hbWVzcGFjZSBTVkcKICAvLyBAZmFjdG9yeSBMLnN2ZyhvcHRpb25zPzogUmVuZGVyZXIgb3B0aW9ucykKICAvLyBDcmVhdGVzIGEgU1ZHIHJlbmRlcmVyIHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuCiAgZnVuY3Rpb24gc3ZnKG9wdGlvbnMpIHsKICAJcmV0dXJuIEJyb3dzZXIuc3ZnIHx8IEJyb3dzZXIudm1sID8gbmV3IFNWRyhvcHRpb25zKSA6IG51bGw7CiAgfQoKICBNYXAuaW5jbHVkZSh7CiAgCS8vIEBuYW1lc3BhY2UgTWFwOyBAbWV0aG9kIGdldFJlbmRlcmVyKGxheWVyOiBQYXRoKTogUmVuZGVyZXIKICAJLy8gUmV0dXJucyB0aGUgaW5zdGFuY2Ugb2YgYFJlbmRlcmVyYCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlbmRlciB0aGUgZ2l2ZW4KICAJLy8gYFBhdGhgLiBJdCB3aWxsIGVuc3VyZSB0aGF0IHRoZSBgcmVuZGVyZXJgIG9wdGlvbnMgb2YgdGhlIG1hcCBhbmQgcGF0aHMKICAJLy8gYXJlIHJlc3BlY3RlZCwgYW5kIHRoYXQgdGhlIHJlbmRlcmVycyBkbyBleGlzdCBvbiB0aGUgbWFwLgogIAlnZXRSZW5kZXJlcjogZnVuY3Rpb24gKGxheWVyKSB7CiAgCQkvLyBAbmFtZXNwYWNlIFBhdGg7IEBvcHRpb24gcmVuZGVyZXI6IFJlbmRlcmVyCiAgCQkvLyBVc2UgdGhpcyBzcGVjaWZpYyBpbnN0YW5jZSBvZiBgUmVuZGVyZXJgIGZvciB0aGlzIHBhdGguIFRha2VzCiAgCQkvLyBwcmVjZWRlbmNlIG92ZXIgdGhlIG1hcCdzIFtkZWZhdWx0IHJlbmRlcmVyXSgjbWFwLXJlbmRlcmVyKS4KICAJCXZhciByZW5kZXJlciA9IGxheWVyLm9wdGlvbnMucmVuZGVyZXIgfHwgdGhpcy5fZ2V0UGFuZVJlbmRlcmVyKGxheWVyLm9wdGlvbnMucGFuZSkgfHwgdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IHRoaXMuX3JlbmRlcmVyOwoKICAJCWlmICghcmVuZGVyZXIpIHsKICAJCQlyZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyID0gdGhpcy5fY3JlYXRlUmVuZGVyZXIoKTsKICAJCX0KCiAgCQlpZiAoIXRoaXMuaGFzTGF5ZXIocmVuZGVyZXIpKSB7CiAgCQkJdGhpcy5hZGRMYXllcihyZW5kZXJlcik7CiAgCQl9CiAgCQlyZXR1cm4gcmVuZGVyZXI7CiAgCX0sCgogIAlfZ2V0UGFuZVJlbmRlcmVyOiBmdW5jdGlvbiAobmFtZSkgewogIAkJaWYgKG5hbWUgPT09ICdvdmVybGF5UGFuZScgfHwgbmFtZSA9PT0gdW5kZWZpbmVkKSB7CiAgCQkJcmV0dXJuIGZhbHNlOwogIAkJfQoKICAJCXZhciByZW5kZXJlciA9IHRoaXMuX3BhbmVSZW5kZXJlcnNbbmFtZV07CiAgCQlpZiAocmVuZGVyZXIgPT09IHVuZGVmaW5lZCkgewogIAkJCXJlbmRlcmVyID0gdGhpcy5fY3JlYXRlUmVuZGVyZXIoe3BhbmU6IG5hbWV9KTsKICAJCQl0aGlzLl9wYW5lUmVuZGVyZXJzW25hbWVdID0gcmVuZGVyZXI7CiAgCQl9CiAgCQlyZXR1cm4gcmVuZGVyZXI7CiAgCX0sCgogIAlfY3JlYXRlUmVuZGVyZXI6IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgCQkvLyBAbmFtZXNwYWNlIE1hcDsgQG9wdGlvbiBwcmVmZXJDYW52YXM6IEJvb2xlYW4gPSBmYWxzZQogIAkJLy8gV2hldGhlciBgUGF0aGBzIHNob3VsZCBiZSByZW5kZXJlZCBvbiBhIGBDYW52YXNgIHJlbmRlcmVyLgogIAkJLy8gQnkgZGVmYXVsdCwgYWxsIGBQYXRoYHMgYXJlIHJlbmRlcmVkIGluIGEgYFNWR2AgcmVuZGVyZXIuCiAgCQlyZXR1cm4gKHRoaXMub3B0aW9ucy5wcmVmZXJDYW52YXMgJiYgY2FudmFzKG9wdGlvbnMpKSB8fCBzdmcob3B0aW9ucyk7CiAgCX0KICB9KTsKCiAgLyoKICAgKiBMLlJlY3RhbmdsZSBleHRlbmRzIFBvbHlnb24gYW5kIGNyZWF0ZXMgYSByZWN0YW5nbGUgd2hlbiBwYXNzZWQgYSBMYXRMbmdCb3VuZHMgb2JqZWN0LgogICAqLwoKICAvKgogICAqIEBjbGFzcyBSZWN0YW5nbGUKICAgKiBAYWthIEwuUmVjdGFuZ2xlCiAgICogQGluaGVyaXRzIFBvbHlnb24KICAgKgogICAqIEEgY2xhc3MgZm9yIGRyYXdpbmcgcmVjdGFuZ2xlIG92ZXJsYXlzIG9uIGEgbWFwLiBFeHRlbmRzIGBQb2x5Z29uYC4KICAgKgogICAqIEBleGFtcGxlCiAgICoKICAgKiBgYGBqcwogICAqIC8vIGRlZmluZSByZWN0YW5nbGUgZ2VvZ3JhcGhpY2FsIGJvdW5kcwogICAqIHZhciBib3VuZHMgPSBbWzU0LjU1OTMyMiwgLTUuNzY3ODIyXSwgWzU2LjEyMTA2MDQsIC0zLjAyMTI0MF1dOwogICAqCiAgICogLy8gY3JlYXRlIGFuIG9yYW5nZSByZWN0YW5nbGUKICAgKiBMLnJlY3RhbmdsZShib3VuZHMsIHtjb2xvcjogIiNmZjc4MDAiLCB3ZWlnaHQ6IDF9KS5hZGRUbyhtYXApOwogICAqCiAgICogLy8gem9vbSB0aGUgbWFwIHRvIHRoZSByZWN0YW5nbGUgYm91bmRzCiAgICogbWFwLmZpdEJvdW5kcyhib3VuZHMpOwogICAqIGBgYAogICAqCiAgICovCgoKICB2YXIgUmVjdGFuZ2xlID0gUG9seWdvbi5leHRlbmQoewogIAlpbml0aWFsaXplOiBmdW5jdGlvbiAobGF0TG5nQm91bmRzLCBvcHRpb25zKSB7CiAgCQlQb2x5Z29uLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgdGhpcy5fYm91bmRzVG9MYXRMbmdzKGxhdExuZ0JvdW5kcyksIG9wdGlvbnMpOwogIAl9LAoKICAJLy8gQG1ldGhvZCBzZXRCb3VuZHMobGF0TG5nQm91bmRzOiBMYXRMbmdCb3VuZHMpOiB0aGlzCiAgCS8vIFJlZHJhd3MgdGhlIHJlY3RhbmdsZSB3aXRoIHRoZSBwYXNzZWQgYm91bmRzLgogIAlzZXRCb3VuZHM6IGZ1bmN0aW9uIChsYXRMbmdCb3VuZHMpIHsKICAJCXJldHVybiB0aGlzLnNldExhdExuZ3ModGhpcy5fYm91bmRzVG9MYXRMbmdzKGxhdExuZ0JvdW5kcykpOwogIAl9LAoKICAJX2JvdW5kc1RvTGF0TG5nczogZnVuY3Rpb24gKGxhdExuZ0JvdW5kcykgewogIAkJbGF0TG5nQm91bmRzID0gdG9MYXRMbmdCb3VuZHMobGF0TG5nQm91bmRzKTsKICAJCXJldHVybiBbCiAgCQkJbGF0TG5nQm91bmRzLmdldFNvdXRoV2VzdCgpLAogIAkJCWxhdExuZ0JvdW5kcy5nZXROb3J0aFdlc3QoKSwKICAJCQlsYXRMbmdCb3VuZHMuZ2V0Tm9ydGhFYXN0KCksCiAgCQkJbGF0TG5nQm91bmRzLmdldFNvdXRoRWFzdCgpCiAgCQldOwogIAl9CiAgfSk7CgoKICAvLyBAZmFjdG9yeSBMLnJlY3RhbmdsZShsYXRMbmdCb3VuZHM6IExhdExuZ0JvdW5kcywgb3B0aW9ucz86IFBvbHlsaW5lIG9wdGlvbnMpCiAgZnVuY3Rpb24gcmVjdGFuZ2xlKGxhdExuZ0JvdW5kcywgb3B0aW9ucykgewogIAlyZXR1cm4gbmV3IFJlY3RhbmdsZShsYXRMbmdCb3VuZHMsIG9wdGlvbnMpOwogIH0KCiAgU1ZHLmNyZWF0ZSA9IGNyZWF0ZTsKICBTVkcucG9pbnRzVG9QYXRoID0gcG9pbnRzVG9QYXRoOwoKICBHZW9KU09OLmdlb21ldHJ5VG9MYXllciA9IGdlb21ldHJ5VG9MYXllcjsKICBHZW9KU09OLmNvb3Jkc1RvTGF0TG5nID0gY29vcmRzVG9MYXRMbmc7CiAgR2VvSlNPTi5jb29yZHNUb0xhdExuZ3MgPSBjb29yZHNUb0xhdExuZ3M7CiAgR2VvSlNPTi5sYXRMbmdUb0Nvb3JkcyA9IGxhdExuZ1RvQ29vcmRzOwogIEdlb0pTT04ubGF0TG5nc1RvQ29vcmRzID0gbGF0TG5nc1RvQ29vcmRzOwogIEdlb0pTT04uZ2V0RmVhdHVyZSA9IGdldEZlYXR1cmU7CiAgR2VvSlNPTi5hc0ZlYXR1cmUgPSBhc0ZlYXR1cmU7CgogIC8qCiAgICogTC5IYW5kbGVyLkJveFpvb20gaXMgdXNlZCB0byBhZGQgc2hpZnQtZHJhZyB6b29tIGludGVyYWN0aW9uIHRvIHRoZSBtYXAKICAgKiAoem9vbSB0byBhIHNlbGVjdGVkIGJvdW5kaW5nIGJveCksIGVuYWJsZWQgYnkgZGVmYXVsdC4KICAgKi8KCiAgLy8gQG5hbWVzcGFjZSBNYXAKICAvLyBAc2VjdGlvbiBJbnRlcmFjdGlvbiBPcHRpb25zCiAgTWFwLm1lcmdlT3B0aW9ucyh7CiAgCS8vIEBvcHRpb24gYm94Wm9vbTogQm9vbGVhbiA9IHRydWUKICAJLy8gV2hldGhlciB0aGUgbWFwIGNhbiBiZSB6b29tZWQgdG8gYSByZWN0YW5ndWxhciBhcmVhIHNwZWNpZmllZCBieQogIAkvLyBkcmFnZ2luZyB0aGUgbW91c2Ugd2hpbGUgcHJlc3NpbmcgdGhlIHNoaWZ0IGtleS4KICAJYm94Wm9vbTogdHJ1ZQogIH0pOwoKICB2YXIgQm94Wm9vbSA9IEhhbmRsZXIuZXh0ZW5kKHsKICAJaW5pdGlhbGl6ZTogZnVuY3Rpb24gKG1hcCkgewogIAkJdGhpcy5fbWFwID0gbWFwOwogIAkJdGhpcy5fY29udGFpbmVyID0gbWFwLl9jb250YWluZXI7CiAgCQl0aGlzLl9wYW5lID0gbWFwLl9wYW5lcy5vdmVybGF5UGFuZTsKICAJCXRoaXMuX3Jlc2V0U3RhdGVUaW1lb3V0ID0gMDsKICAJCW1hcC5vbigndW5sb2FkJywgdGhpcy5fZGVzdHJveSwgdGhpcyk7CiAgCX0sCgogIAlhZGRIb29rczogZnVuY3Rpb24gKCkgewogIAkJb24odGhpcy5fY29udGFpbmVyLCAnbW91c2Vkb3duJywgdGhpcy5fb25Nb3VzZURvd24sIHRoaXMpOwogIAl9LAoKICAJcmVtb3ZlSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCW9mZih0aGlzLl9jb250YWluZXIsICdtb3VzZWRvd24nLCB0aGlzLl9vbk1vdXNlRG93biwgdGhpcyk7CiAgCX0sCgogIAltb3ZlZDogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX21vdmVkOwogIAl9LAoKICAJX2Rlc3Ryb3k6IGZ1bmN0aW9uICgpIHsKICAJCXJlbW92ZSh0aGlzLl9wYW5lKTsKICAJCWRlbGV0ZSB0aGlzLl9wYW5lOwogIAl9LAoKICAJX3Jlc2V0U3RhdGU6IGZ1bmN0aW9uICgpIHsKICAJCXRoaXMuX3Jlc2V0U3RhdGVUaW1lb3V0ID0gMDsKICAJCXRoaXMuX21vdmVkID0gZmFsc2U7CiAgCX0sCgogIAlfY2xlYXJEZWZlcnJlZFJlc2V0U3RhdGU6IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9yZXNldFN0YXRlVGltZW91dCAhPT0gMCkgewogIAkJCWNsZWFyVGltZW91dCh0aGlzLl9yZXNldFN0YXRlVGltZW91dCk7CiAgCQkJdGhpcy5fcmVzZXRTdGF0ZVRpbWVvdXQgPSAwOwogIAkJfQogIAl9LAoKICAJX29uTW91c2VEb3duOiBmdW5jdGlvbiAoZSkgewogIAkJaWYgKCFlLnNoaWZ0S2V5IHx8ICgoZS53aGljaCAhPT0gMSkgJiYgKGUuYnV0dG9uICE9PSAxKSkpIHsgcmV0dXJuIGZhbHNlOyB9CgogIAkJLy8gQ2xlYXIgdGhlIGRlZmVycmVkIHJlc2V0U3RhdGUgaWYgaXQgaGFzbid0IGV4ZWN1dGVkIHlldCwgb3RoZXJ3aXNlIGl0CiAgCQkvLyB3aWxsIGludGVycnVwdCB0aGUgaW50ZXJhY3Rpb24gYW5kIG9ycGhhbiBhIGJveCBlbGVtZW50IGluIHRoZSBjb250YWluZXIuCiAgCQl0aGlzLl9jbGVhckRlZmVycmVkUmVzZXRTdGF0ZSgpOwogIAkJdGhpcy5fcmVzZXRTdGF0ZSgpOwoKICAJCWRpc2FibGVUZXh0U2VsZWN0aW9uKCk7CiAgCQlkaXNhYmxlSW1hZ2VEcmFnKCk7CgogIAkJdGhpcy5fc3RhcnRQb2ludCA9IHRoaXMuX21hcC5tb3VzZUV2ZW50VG9Db250YWluZXJQb2ludChlKTsKCiAgCQlvbihkb2N1bWVudCwgewogIAkJCWNvbnRleHRtZW51OiBzdG9wLAogIAkJCW1vdXNlbW92ZTogdGhpcy5fb25Nb3VzZU1vdmUsCiAgCQkJbW91c2V1cDogdGhpcy5fb25Nb3VzZVVwLAogIAkJCWtleWRvd246IHRoaXMuX29uS2V5RG93bgogIAkJfSwgdGhpcyk7CiAgCX0sCgogIAlfb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChlKSB7CiAgCQlpZiAoIXRoaXMuX21vdmVkKSB7CiAgCQkJdGhpcy5fbW92ZWQgPSB0cnVlOwoKICAJCQl0aGlzLl9ib3ggPSBjcmVhdGUkMSgnZGl2JywgJ2xlYWZsZXQtem9vbS1ib3gnLCB0aGlzLl9jb250YWluZXIpOwogIAkJCWFkZENsYXNzKHRoaXMuX2NvbnRhaW5lciwgJ2xlYWZsZXQtY3Jvc3NoYWlyJyk7CgogIAkJCXRoaXMuX21hcC5maXJlKCdib3h6b29tc3RhcnQnKTsKICAJCX0KCiAgCQl0aGlzLl9wb2ludCA9IHRoaXMuX21hcC5tb3VzZUV2ZW50VG9Db250YWluZXJQb2ludChlKTsKCiAgCQl2YXIgYm91bmRzID0gbmV3IEJvdW5kcyh0aGlzLl9wb2ludCwgdGhpcy5fc3RhcnRQb2ludCksCiAgCQkgICAgc2l6ZSA9IGJvdW5kcy5nZXRTaXplKCk7CgogIAkJc2V0UG9zaXRpb24odGhpcy5fYm94LCBib3VuZHMubWluKTsKCiAgCQl0aGlzLl9ib3guc3R5bGUud2lkdGggID0gc2l6ZS54ICsgJ3B4JzsKICAJCXRoaXMuX2JveC5zdHlsZS5oZWlnaHQgPSBzaXplLnkgKyAncHgnOwogIAl9LAoKICAJX2ZpbmlzaDogZnVuY3Rpb24gKCkgewogIAkJaWYgKHRoaXMuX21vdmVkKSB7CiAgCQkJcmVtb3ZlKHRoaXMuX2JveCk7CiAgCQkJcmVtb3ZlQ2xhc3ModGhpcy5fY29udGFpbmVyLCAnbGVhZmxldC1jcm9zc2hhaXInKTsKICAJCX0KCiAgCQllbmFibGVUZXh0U2VsZWN0aW9uKCk7CiAgCQllbmFibGVJbWFnZURyYWcoKTsKCiAgCQlvZmYoZG9jdW1lbnQsIHsKICAJCQljb250ZXh0bWVudTogc3RvcCwKICAJCQltb3VzZW1vdmU6IHRoaXMuX29uTW91c2VNb3ZlLAogIAkJCW1vdXNldXA6IHRoaXMuX29uTW91c2VVcCwKICAJCQlrZXlkb3duOiB0aGlzLl9vbktleURvd24KICAJCX0sIHRoaXMpOwogIAl9LAoKICAJX29uTW91c2VVcDogZnVuY3Rpb24gKGUpIHsKICAJCWlmICgoZS53aGljaCAhPT0gMSkgJiYgKGUuYnV0dG9uICE9PSAxKSkgeyByZXR1cm47IH0KCiAgCQl0aGlzLl9maW5pc2goKTsKCiAgCQlpZiAoIXRoaXMuX21vdmVkKSB7IHJldHVybjsgfQogIAkJLy8gUG9zdHBvbmUgdG8gbmV4dCBKUyB0aWNrIHNvIGludGVybmFsIGNsaWNrIGV2ZW50IGhhbmRsaW5nCiAgCQkvLyBzdGlsbCBzZWUgaXQgYXMgIm1vdmVkIi4KICAJCXRoaXMuX2NsZWFyRGVmZXJyZWRSZXNldFN0YXRlKCk7CiAgCQl0aGlzLl9yZXNldFN0YXRlVGltZW91dCA9IHNldFRpbWVvdXQoYmluZCh0aGlzLl9yZXNldFN0YXRlLCB0aGlzKSwgMCk7CgogIAkJdmFyIGJvdW5kcyA9IG5ldyBMYXRMbmdCb3VuZHMoCiAgCQkgICAgICAgIHRoaXMuX21hcC5jb250YWluZXJQb2ludFRvTGF0TG5nKHRoaXMuX3N0YXJ0UG9pbnQpLAogIAkJICAgICAgICB0aGlzLl9tYXAuY29udGFpbmVyUG9pbnRUb0xhdExuZyh0aGlzLl9wb2ludCkpOwoKICAJCXRoaXMuX21hcAogIAkJCS5maXRCb3VuZHMoYm91bmRzKQogIAkJCS5maXJlKCdib3h6b29tZW5kJywge2JveFpvb21Cb3VuZHM6IGJvdW5kc30pOwogIAl9LAoKICAJX29uS2V5RG93bjogZnVuY3Rpb24gKGUpIHsKICAJCWlmIChlLmtleUNvZGUgPT09IDI3KSB7CiAgCQkJdGhpcy5fZmluaXNoKCk7CiAgCQkJdGhpcy5fY2xlYXJEZWZlcnJlZFJlc2V0U3RhdGUoKTsKICAJCQl0aGlzLl9yZXNldFN0YXRlKCk7CiAgCQl9CiAgCX0KICB9KTsKCiAgLy8gQHNlY3Rpb24gSGFuZGxlcnMKICAvLyBAcHJvcGVydHkgYm94Wm9vbTogSGFuZGxlcgogIC8vIEJveCAoc2hpZnQtZHJhZyB3aXRoIG1vdXNlKSB6b29tIGhhbmRsZXIuCiAgTWFwLmFkZEluaXRIb29rKCdhZGRIYW5kbGVyJywgJ2JveFpvb20nLCBCb3hab29tKTsKCiAgLyoKICAgKiBMLkhhbmRsZXIuRG91YmxlQ2xpY2tab29tIGlzIHVzZWQgdG8gaGFuZGxlIGRvdWJsZS1jbGljayB6b29tIG9uIHRoZSBtYXAsIGVuYWJsZWQgYnkgZGVmYXVsdC4KICAgKi8KCiAgLy8gQG5hbWVzcGFjZSBNYXAKICAvLyBAc2VjdGlvbiBJbnRlcmFjdGlvbiBPcHRpb25zCgogIE1hcC5tZXJnZU9wdGlvbnMoewogIAkvLyBAb3B0aW9uIGRvdWJsZUNsaWNrWm9vbTogQm9vbGVhbnxTdHJpbmcgPSB0cnVlCiAgCS8vIFdoZXRoZXIgdGhlIG1hcCBjYW4gYmUgem9vbWVkIGluIGJ5IGRvdWJsZSBjbGlja2luZyBvbiBpdCBhbmQKICAJLy8gem9vbWVkIG91dCBieSBkb3VibGUgY2xpY2tpbmcgd2hpbGUgaG9sZGluZyBzaGlmdC4gSWYgcGFzc2VkCiAgCS8vIGAnY2VudGVyJ2AsIGRvdWJsZS1jbGljayB6b29tIHdpbGwgem9vbSB0byB0aGUgY2VudGVyIG9mIHRoZQogIAkvLyAgdmlldyByZWdhcmRsZXNzIG9mIHdoZXJlIHRoZSBtb3VzZSB3YXMuCiAgCWRvdWJsZUNsaWNrWm9vbTogdHJ1ZQogIH0pOwoKICB2YXIgRG91YmxlQ2xpY2tab29tID0gSGFuZGxlci5leHRlbmQoewogIAlhZGRIb29rczogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fbWFwLm9uKCdkYmxjbGljaycsIHRoaXMuX29uRG91YmxlQ2xpY2ssIHRoaXMpOwogIAl9LAoKICAJcmVtb3ZlSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCXRoaXMuX21hcC5vZmYoJ2RibGNsaWNrJywgdGhpcy5fb25Eb3VibGVDbGljaywgdGhpcyk7CiAgCX0sCgogIAlfb25Eb3VibGVDbGljazogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBtYXAgPSB0aGlzLl9tYXAsCiAgCQkgICAgb2xkWm9vbSA9IG1hcC5nZXRab29tKCksCiAgCQkgICAgZGVsdGEgPSBtYXAub3B0aW9ucy56b29tRGVsdGEsCiAgCQkgICAgem9vbSA9IGUub3JpZ2luYWxFdmVudC5zaGlmdEtleSA/IG9sZFpvb20gLSBkZWx0YSA6IG9sZFpvb20gKyBkZWx0YTsKCiAgCQlpZiAobWFwLm9wdGlvbnMuZG91YmxlQ2xpY2tab29tID09PSAnY2VudGVyJykgewogIAkJCW1hcC5zZXRab29tKHpvb20pOwogIAkJfSBlbHNlIHsKICAJCQltYXAuc2V0Wm9vbUFyb3VuZChlLmNvbnRhaW5lclBvaW50LCB6b29tKTsKICAJCX0KICAJfQogIH0pOwoKICAvLyBAc2VjdGlvbiBIYW5kbGVycwogIC8vCiAgLy8gTWFwIHByb3BlcnRpZXMgaW5jbHVkZSBpbnRlcmFjdGlvbiBoYW5kbGVycyB0aGF0IGFsbG93IHlvdSB0byBjb250cm9sCiAgLy8gaW50ZXJhY3Rpb24gYmVoYXZpb3IgaW4gcnVudGltZSwgZW5hYmxpbmcgb3IgZGlzYWJsaW5nIGNlcnRhaW4gZmVhdHVyZXMgc3VjaAogIC8vIGFzIGRyYWdnaW5nIG9yIHRvdWNoIHpvb20gKHNlZSBgSGFuZGxlcmAgbWV0aG9kcykuIEZvciBleGFtcGxlOgogIC8vCiAgLy8gYGBganMKICAvLyBtYXAuZG91YmxlQ2xpY2tab29tLmRpc2FibGUoKTsKICAvLyBgYGAKICAvLwogIC8vIEBwcm9wZXJ0eSBkb3VibGVDbGlja1pvb206IEhhbmRsZXIKICAvLyBEb3VibGUgY2xpY2sgem9vbSBoYW5kbGVyLgogIE1hcC5hZGRJbml0SG9vaygnYWRkSGFuZGxlcicsICdkb3VibGVDbGlja1pvb20nLCBEb3VibGVDbGlja1pvb20pOwoKICAvKgogICAqIEwuSGFuZGxlci5NYXBEcmFnIGlzIHVzZWQgdG8gbWFrZSB0aGUgbWFwIGRyYWdnYWJsZSAod2l0aCBwYW5uaW5nIGluZXJ0aWEpLCBlbmFibGVkIGJ5IGRlZmF1bHQuCiAgICovCgogIC8vIEBuYW1lc3BhY2UgTWFwCiAgLy8gQHNlY3Rpb24gSW50ZXJhY3Rpb24gT3B0aW9ucwogIE1hcC5tZXJnZU9wdGlvbnMoewogIAkvLyBAb3B0aW9uIGRyYWdnaW5nOiBCb29sZWFuID0gdHJ1ZQogIAkvLyBXaGV0aGVyIHRoZSBtYXAgaXMgZHJhZ2dhYmxlIHdpdGggbW91c2UvdG91Y2ggb3Igbm90LgogIAlkcmFnZ2luZzogdHJ1ZSwKCiAgCS8vIEBzZWN0aW9uIFBhbm5pbmcgSW5lcnRpYSBPcHRpb25zCiAgCS8vIEBvcHRpb24gaW5lcnRpYTogQm9vbGVhbiA9ICoKICAJLy8gSWYgZW5hYmxlZCwgcGFubmluZyBvZiB0aGUgbWFwIHdpbGwgaGF2ZSBhbiBpbmVydGlhIGVmZmVjdCB3aGVyZQogIAkvLyB0aGUgbWFwIGJ1aWxkcyBtb21lbnR1bSB3aGlsZSBkcmFnZ2luZyBhbmQgY29udGludWVzIG1vdmluZyBpbgogIAkvLyB0aGUgc2FtZSBkaXJlY3Rpb24gZm9yIHNvbWUgdGltZS4gRmVlbHMgZXNwZWNpYWxseSBuaWNlIG9uIHRvdWNoCiAgCS8vIGRldmljZXMuIEVuYWJsZWQgYnkgZGVmYXVsdC4KICAJaW5lcnRpYTogdHJ1ZSwKCiAgCS8vIEBvcHRpb24gaW5lcnRpYURlY2VsZXJhdGlvbjogTnVtYmVyID0gMzAwMAogIAkvLyBUaGUgcmF0ZSB3aXRoIHdoaWNoIHRoZSBpbmVydGlhbCBtb3ZlbWVudCBzbG93cyBkb3duLCBpbiBwaXhlbHMvc2Vjb25kwrIuCiAgCWluZXJ0aWFEZWNlbGVyYXRpb246IDM0MDAsIC8vIHB4L3NeMgoKICAJLy8gQG9wdGlvbiBpbmVydGlhTWF4U3BlZWQ6IE51bWJlciA9IEluZmluaXR5CiAgCS8vIE1heCBzcGVlZCBvZiB0aGUgaW5lcnRpYWwgbW92ZW1lbnQsIGluIHBpeGVscy9zZWNvbmQuCiAgCWluZXJ0aWFNYXhTcGVlZDogSW5maW5pdHksIC8vIHB4L3MKCiAgCS8vIEBvcHRpb24gZWFzZUxpbmVhcml0eTogTnVtYmVyID0gMC4yCiAgCWVhc2VMaW5lYXJpdHk6IDAuMiwKCiAgCS8vIFRPRE8gcmVmYWN0b3IsIG1vdmUgdG8gQ1JTCiAgCS8vIEBvcHRpb24gd29ybGRDb3B5SnVtcDogQm9vbGVhbiA9IGZhbHNlCiAgCS8vIFdpdGggdGhpcyBvcHRpb24gZW5hYmxlZCwgdGhlIG1hcCB0cmFja3Mgd2hlbiB5b3UgcGFuIHRvIGFub3RoZXIgImNvcHkiCiAgCS8vIG9mIHRoZSB3b3JsZCBhbmQgc2VhbWxlc3NseSBqdW1wcyB0byB0aGUgb3JpZ2luYWwgb25lIHNvIHRoYXQgYWxsIG92ZXJsYXlzCiAgCS8vIGxpa2UgbWFya2VycyBhbmQgdmVjdG9yIGxheWVycyBhcmUgc3RpbGwgdmlzaWJsZS4KICAJd29ybGRDb3B5SnVtcDogZmFsc2UsCgogIAkvLyBAb3B0aW9uIG1heEJvdW5kc1Zpc2Nvc2l0eTogTnVtYmVyID0gMC4wCiAgCS8vIElmIGBtYXhCb3VuZHNgIGlzIHNldCwgdGhpcyBvcHRpb24gd2lsbCBjb250cm9sIGhvdyBzb2xpZCB0aGUgYm91bmRzCiAgCS8vIGFyZSB3aGVuIGRyYWdnaW5nIHRoZSBtYXAgYXJvdW5kLiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiBgMC4wYCBhbGxvd3MgdGhlCiAgCS8vIHVzZXIgdG8gZHJhZyBvdXRzaWRlIHRoZSBib3VuZHMgYXQgbm9ybWFsIHNwZWVkLCBoaWdoZXIgdmFsdWVzIHdpbGwKICAJLy8gc2xvdyBkb3duIG1hcCBkcmFnZ2luZyBvdXRzaWRlIGJvdW5kcywgYW5kIGAxLjBgIG1ha2VzIHRoZSBib3VuZHMgZnVsbHkKICAJLy8gc29saWQsIHByZXZlbnRpbmcgdGhlIHVzZXIgZnJvbSBkcmFnZ2luZyBvdXRzaWRlIHRoZSBib3VuZHMuCiAgCW1heEJvdW5kc1Zpc2Nvc2l0eTogMC4wCiAgfSk7CgogIHZhciBEcmFnID0gSGFuZGxlci5leHRlbmQoewogIAlhZGRIb29rczogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9kcmFnZ2FibGUpIHsKICAJCQl2YXIgbWFwID0gdGhpcy5fbWFwOwoKICAJCQl0aGlzLl9kcmFnZ2FibGUgPSBuZXcgRHJhZ2dhYmxlKG1hcC5fbWFwUGFuZSwgbWFwLl9jb250YWluZXIpOwoKICAJCQl0aGlzLl9kcmFnZ2FibGUub24oewogIAkJCQlkcmFnc3RhcnQ6IHRoaXMuX29uRHJhZ1N0YXJ0LAogIAkJCQlkcmFnOiB0aGlzLl9vbkRyYWcsCiAgCQkJCWRyYWdlbmQ6IHRoaXMuX29uRHJhZ0VuZAogIAkJCX0sIHRoaXMpOwoKICAJCQl0aGlzLl9kcmFnZ2FibGUub24oJ3ByZWRyYWcnLCB0aGlzLl9vblByZURyYWdMaW1pdCwgdGhpcyk7CiAgCQkJaWYgKG1hcC5vcHRpb25zLndvcmxkQ29weUp1bXApIHsKICAJCQkJdGhpcy5fZHJhZ2dhYmxlLm9uKCdwcmVkcmFnJywgdGhpcy5fb25QcmVEcmFnV3JhcCwgdGhpcyk7CiAgCQkJCW1hcC5vbignem9vbWVuZCcsIHRoaXMuX29uWm9vbUVuZCwgdGhpcyk7CgogIAkJCQltYXAud2hlblJlYWR5KHRoaXMuX29uWm9vbUVuZCwgdGhpcyk7CiAgCQkJfQogIAkJfQogIAkJYWRkQ2xhc3ModGhpcy5fbWFwLl9jb250YWluZXIsICdsZWFmbGV0LWdyYWIgbGVhZmxldC10b3VjaC1kcmFnJyk7CiAgCQl0aGlzLl9kcmFnZ2FibGUuZW5hYmxlKCk7CiAgCQl0aGlzLl9wb3NpdGlvbnMgPSBbXTsKICAJCXRoaXMuX3RpbWVzID0gW107CiAgCX0sCgogIAlyZW1vdmVIb29rczogZnVuY3Rpb24gKCkgewogIAkJcmVtb3ZlQ2xhc3ModGhpcy5fbWFwLl9jb250YWluZXIsICdsZWFmbGV0LWdyYWInKTsKICAJCXJlbW92ZUNsYXNzKHRoaXMuX21hcC5fY29udGFpbmVyLCAnbGVhZmxldC10b3VjaC1kcmFnJyk7CiAgCQl0aGlzLl9kcmFnZ2FibGUuZGlzYWJsZSgpOwogIAl9LAoKICAJbW92ZWQ6IGZ1bmN0aW9uICgpIHsKICAJCXJldHVybiB0aGlzLl9kcmFnZ2FibGUgJiYgdGhpcy5fZHJhZ2dhYmxlLl9tb3ZlZDsKICAJfSwKCiAgCW1vdmluZzogZnVuY3Rpb24gKCkgewogIAkJcmV0dXJuIHRoaXMuX2RyYWdnYWJsZSAmJiB0aGlzLl9kcmFnZ2FibGUuX21vdmluZzsKICAJfSwKCiAgCV9vbkRyYWdTdGFydDogZnVuY3Rpb24gKCkgewogIAkJdmFyIG1hcCA9IHRoaXMuX21hcDsKCiAgCQltYXAuX3N0b3AoKTsKICAJCWlmICh0aGlzLl9tYXAub3B0aW9ucy5tYXhCb3VuZHMgJiYgdGhpcy5fbWFwLm9wdGlvbnMubWF4Qm91bmRzVmlzY29zaXR5KSB7CiAgCQkJdmFyIGJvdW5kcyA9IHRvTGF0TG5nQm91bmRzKHRoaXMuX21hcC5vcHRpb25zLm1heEJvdW5kcyk7CgogIAkJCXRoaXMuX29mZnNldExpbWl0ID0gdG9Cb3VuZHMoCiAgCQkJCXRoaXMuX21hcC5sYXRMbmdUb0NvbnRhaW5lclBvaW50KGJvdW5kcy5nZXROb3J0aFdlc3QoKSkubXVsdGlwbHlCeSgtMSksCiAgCQkJCXRoaXMuX21hcC5sYXRMbmdUb0NvbnRhaW5lclBvaW50KGJvdW5kcy5nZXRTb3V0aEVhc3QoKSkubXVsdGlwbHlCeSgtMSkKICAJCQkJCS5hZGQodGhpcy5fbWFwLmdldFNpemUoKSkpOwoKICAJCQl0aGlzLl92aXNjb3NpdHkgPSBNYXRoLm1pbigxLjAsIE1hdGgubWF4KDAuMCwgdGhpcy5fbWFwLm9wdGlvbnMubWF4Qm91bmRzVmlzY29zaXR5KSk7CiAgCQl9IGVsc2UgewogIAkJCXRoaXMuX29mZnNldExpbWl0ID0gbnVsbDsKICAJCX0KCiAgCQltYXAKICAJCSAgICAuZmlyZSgnbW92ZXN0YXJ0JykKICAJCSAgICAuZmlyZSgnZHJhZ3N0YXJ0Jyk7CgogIAkJaWYgKG1hcC5vcHRpb25zLmluZXJ0aWEpIHsKICAJCQl0aGlzLl9wb3NpdGlvbnMgPSBbXTsKICAJCQl0aGlzLl90aW1lcyA9IFtdOwogIAkJfQogIAl9LAoKICAJX29uRHJhZzogZnVuY3Rpb24gKGUpIHsKICAJCWlmICh0aGlzLl9tYXAub3B0aW9ucy5pbmVydGlhKSB7CiAgCQkJdmFyIHRpbWUgPSB0aGlzLl9sYXN0VGltZSA9ICtuZXcgRGF0ZSgpLAogIAkJCSAgICBwb3MgPSB0aGlzLl9sYXN0UG9zID0gdGhpcy5fZHJhZ2dhYmxlLl9hYnNQb3MgfHwgdGhpcy5fZHJhZ2dhYmxlLl9uZXdQb3M7CgogIAkJCXRoaXMuX3Bvc2l0aW9ucy5wdXNoKHBvcyk7CiAgCQkJdGhpcy5fdGltZXMucHVzaCh0aW1lKTsKCiAgCQkJdGhpcy5fcHJ1bmVQb3NpdGlvbnModGltZSk7CiAgCQl9CgogIAkJdGhpcy5fbWFwCiAgCQkgICAgLmZpcmUoJ21vdmUnLCBlKQogIAkJICAgIC5maXJlKCdkcmFnJywgZSk7CiAgCX0sCgogIAlfcHJ1bmVQb3NpdGlvbnM6IGZ1bmN0aW9uICh0aW1lKSB7CiAgCQl3aGlsZSAodGhpcy5fcG9zaXRpb25zLmxlbmd0aCA+IDEgJiYgdGltZSAtIHRoaXMuX3RpbWVzWzBdID4gNTApIHsKICAJCQl0aGlzLl9wb3NpdGlvbnMuc2hpZnQoKTsKICAJCQl0aGlzLl90aW1lcy5zaGlmdCgpOwogIAkJfQogIAl9LAoKICAJX29uWm9vbUVuZDogZnVuY3Rpb24gKCkgewogIAkJdmFyIHB4Q2VudGVyID0gdGhpcy5fbWFwLmdldFNpemUoKS5kaXZpZGVCeSgyKSwKICAJCSAgICBweFdvcmxkQ2VudGVyID0gdGhpcy5fbWFwLmxhdExuZ1RvTGF5ZXJQb2ludChbMCwgMF0pOwoKICAJCXRoaXMuX2luaXRpYWxXb3JsZE9mZnNldCA9IHB4V29ybGRDZW50ZXIuc3VidHJhY3QocHhDZW50ZXIpLng7CiAgCQl0aGlzLl93b3JsZFdpZHRoID0gdGhpcy5fbWFwLmdldFBpeGVsV29ybGRCb3VuZHMoKS5nZXRTaXplKCkueDsKICAJfSwKCiAgCV92aXNjb3VzTGltaXQ6IGZ1bmN0aW9uICh2YWx1ZSwgdGhyZXNob2xkKSB7CiAgCQlyZXR1cm4gdmFsdWUgLSAodmFsdWUgLSB0aHJlc2hvbGQpICogdGhpcy5fdmlzY29zaXR5OwogIAl9LAoKICAJX29uUHJlRHJhZ0xpbWl0OiBmdW5jdGlvbiAoKSB7CiAgCQlpZiAoIXRoaXMuX3Zpc2Nvc2l0eSB8fCAhdGhpcy5fb2Zmc2V0TGltaXQpIHsgcmV0dXJuOyB9CgogIAkJdmFyIG9mZnNldCA9IHRoaXMuX2RyYWdnYWJsZS5fbmV3UG9zLnN1YnRyYWN0KHRoaXMuX2RyYWdnYWJsZS5fc3RhcnRQb3MpOwoKICAJCXZhciBsaW1pdCA9IHRoaXMuX29mZnNldExpbWl0OwogIAkJaWYgKG9mZnNldC54IDwgbGltaXQubWluLngpIHsgb2Zmc2V0LnggPSB0aGlzLl92aXNjb3VzTGltaXQob2Zmc2V0LngsIGxpbWl0Lm1pbi54KTsgfQogIAkJaWYgKG9mZnNldC55IDwgbGltaXQubWluLnkpIHsgb2Zmc2V0LnkgPSB0aGlzLl92aXNjb3VzTGltaXQob2Zmc2V0LnksIGxpbWl0Lm1pbi55KTsgfQogIAkJaWYgKG9mZnNldC54ID4gbGltaXQubWF4LngpIHsgb2Zmc2V0LnggPSB0aGlzLl92aXNjb3VzTGltaXQob2Zmc2V0LngsIGxpbWl0Lm1heC54KTsgfQogIAkJaWYgKG9mZnNldC55ID4gbGltaXQubWF4LnkpIHsgb2Zmc2V0LnkgPSB0aGlzLl92aXNjb3VzTGltaXQob2Zmc2V0LnksIGxpbWl0Lm1heC55KTsgfQoKICAJCXRoaXMuX2RyYWdnYWJsZS5fbmV3UG9zID0gdGhpcy5fZHJhZ2dhYmxlLl9zdGFydFBvcy5hZGQob2Zmc2V0KTsKICAJfSwKCiAgCV9vblByZURyYWdXcmFwOiBmdW5jdGlvbiAoKSB7CiAgCQkvLyBUT0RPIHJlZmFjdG9yIHRvIGJlIGFibGUgdG8gYWRqdXN0IG1hcCBwYW5lIHBvc2l0aW9uIGFmdGVyIHpvb20KICAJCXZhciB3b3JsZFdpZHRoID0gdGhpcy5fd29ybGRXaWR0aCwKICAJCSAgICBoYWxmV2lkdGggPSBNYXRoLnJvdW5kKHdvcmxkV2lkdGggLyAyKSwKICAJCSAgICBkeCA9IHRoaXMuX2luaXRpYWxXb3JsZE9mZnNldCwKICAJCSAgICB4ID0gdGhpcy5fZHJhZ2dhYmxlLl9uZXdQb3MueCwKICAJCSAgICBuZXdYMSA9ICh4IC0gaGFsZldpZHRoICsgZHgpICUgd29ybGRXaWR0aCArIGhhbGZXaWR0aCAtIGR4LAogIAkJICAgIG5ld1gyID0gKHggKyBoYWxmV2lkdGggKyBkeCkgJSB3b3JsZFdpZHRoIC0gaGFsZldpZHRoIC0gZHgsCiAgCQkgICAgbmV3WCA9IE1hdGguYWJzKG5ld1gxICsgZHgpIDwgTWF0aC5hYnMobmV3WDIgKyBkeCkgPyBuZXdYMSA6IG5ld1gyOwoKICAJCXRoaXMuX2RyYWdnYWJsZS5fYWJzUG9zID0gdGhpcy5fZHJhZ2dhYmxlLl9uZXdQb3MuY2xvbmUoKTsKICAJCXRoaXMuX2RyYWdnYWJsZS5fbmV3UG9zLnggPSBuZXdYOwogIAl9LAoKICAJX29uRHJhZ0VuZDogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBtYXAgPSB0aGlzLl9tYXAsCiAgCQkgICAgb3B0aW9ucyA9IG1hcC5vcHRpb25zLAoKICAJCSAgICBub0luZXJ0aWEgPSAhb3B0aW9ucy5pbmVydGlhIHx8IGUubm9JbmVydGlhIHx8IHRoaXMuX3RpbWVzLmxlbmd0aCA8IDI7CgogIAkJbWFwLmZpcmUoJ2RyYWdlbmQnLCBlKTsKCiAgCQlpZiAobm9JbmVydGlhKSB7CiAgCQkJbWFwLmZpcmUoJ21vdmVlbmQnKTsKCiAgCQl9IGVsc2UgewogIAkJCXRoaXMuX3BydW5lUG9zaXRpb25zKCtuZXcgRGF0ZSgpKTsKCiAgCQkJdmFyIGRpcmVjdGlvbiA9IHRoaXMuX2xhc3RQb3Muc3VidHJhY3QodGhpcy5fcG9zaXRpb25zWzBdKSwKICAJCQkgICAgZHVyYXRpb24gPSAodGhpcy5fbGFzdFRpbWUgLSB0aGlzLl90aW1lc1swXSkgLyAxMDAwLAogIAkJCSAgICBlYXNlID0gb3B0aW9ucy5lYXNlTGluZWFyaXR5LAoKICAJCQkgICAgc3BlZWRWZWN0b3IgPSBkaXJlY3Rpb24ubXVsdGlwbHlCeShlYXNlIC8gZHVyYXRpb24pLAogIAkJCSAgICBzcGVlZCA9IHNwZWVkVmVjdG9yLmRpc3RhbmNlVG8oWzAsIDBdKSwKCiAgCQkJICAgIGxpbWl0ZWRTcGVlZCA9IE1hdGgubWluKG9wdGlvbnMuaW5lcnRpYU1heFNwZWVkLCBzcGVlZCksCiAgCQkJICAgIGxpbWl0ZWRTcGVlZFZlY3RvciA9IHNwZWVkVmVjdG9yLm11bHRpcGx5QnkobGltaXRlZFNwZWVkIC8gc3BlZWQpLAoKICAJCQkgICAgZGVjZWxlcmF0aW9uRHVyYXRpb24gPSBsaW1pdGVkU3BlZWQgLyAob3B0aW9ucy5pbmVydGlhRGVjZWxlcmF0aW9uICogZWFzZSksCiAgCQkJICAgIG9mZnNldCA9IGxpbWl0ZWRTcGVlZFZlY3Rvci5tdWx0aXBseUJ5KC1kZWNlbGVyYXRpb25EdXJhdGlvbiAvIDIpLnJvdW5kKCk7CgogIAkJCWlmICghb2Zmc2V0LnggJiYgIW9mZnNldC55KSB7CiAgCQkJCW1hcC5maXJlKCdtb3ZlZW5kJyk7CgogIAkJCX0gZWxzZSB7CiAgCQkJCW9mZnNldCA9IG1hcC5fbGltaXRPZmZzZXQob2Zmc2V0LCBtYXAub3B0aW9ucy5tYXhCb3VuZHMpOwoKICAJCQkJcmVxdWVzdEFuaW1GcmFtZShmdW5jdGlvbiAoKSB7CiAgCQkJCQltYXAucGFuQnkob2Zmc2V0LCB7CiAgCQkJCQkJZHVyYXRpb246IGRlY2VsZXJhdGlvbkR1cmF0aW9uLAogIAkJCQkJCWVhc2VMaW5lYXJpdHk6IGVhc2UsCiAgCQkJCQkJbm9Nb3ZlU3RhcnQ6IHRydWUsCiAgCQkJCQkJYW5pbWF0ZTogdHJ1ZQogIAkJCQkJfSk7CiAgCQkJCX0pOwogIAkJCX0KICAJCX0KICAJfQogIH0pOwoKICAvLyBAc2VjdGlvbiBIYW5kbGVycwogIC8vIEBwcm9wZXJ0eSBkcmFnZ2luZzogSGFuZGxlcgogIC8vIE1hcCBkcmFnZ2luZyBoYW5kbGVyIChieSBib3RoIG1vdXNlIGFuZCB0b3VjaCkuCiAgTWFwLmFkZEluaXRIb29rKCdhZGRIYW5kbGVyJywgJ2RyYWdnaW5nJywgRHJhZyk7CgogIC8qCiAgICogTC5NYXAuS2V5Ym9hcmQgaXMgaGFuZGxpbmcga2V5Ym9hcmQgaW50ZXJhY3Rpb24gd2l0aCB0aGUgbWFwLCBlbmFibGVkIGJ5IGRlZmF1bHQuCiAgICovCgogIC8vIEBuYW1lc3BhY2UgTWFwCiAgLy8gQHNlY3Rpb24gS2V5Ym9hcmQgTmF2aWdhdGlvbiBPcHRpb25zCiAgTWFwLm1lcmdlT3B0aW9ucyh7CiAgCS8vIEBvcHRpb24ga2V5Ym9hcmQ6IEJvb2xlYW4gPSB0cnVlCiAgCS8vIE1ha2VzIHRoZSBtYXAgZm9jdXNhYmxlIGFuZCBhbGxvd3MgdXNlcnMgdG8gbmF2aWdhdGUgdGhlIG1hcCB3aXRoIGtleWJvYXJkCiAgCS8vIGFycm93cyBhbmQgYCtgL2AtYCBrZXlzLgogIAlrZXlib2FyZDogdHJ1ZSwKCiAgCS8vIEBvcHRpb24ga2V5Ym9hcmRQYW5EZWx0YTogTnVtYmVyID0gODAKICAJLy8gQW1vdW50IG9mIHBpeGVscyB0byBwYW4gd2hlbiBwcmVzc2luZyBhbiBhcnJvdyBrZXkuCiAgCWtleWJvYXJkUGFuRGVsdGE6IDgwCiAgfSk7CgogIHZhciBLZXlib2FyZCA9IEhhbmRsZXIuZXh0ZW5kKHsKCiAgCWtleUNvZGVzOiB7CiAgCQlsZWZ0OiAgICBbMzddLAogIAkJcmlnaHQ6ICAgWzM5XSwKICAJCWRvd246ICAgIFs0MF0sCiAgCQl1cDogICAgICBbMzhdLAogIAkJem9vbUluOiAgWzE4NywgMTA3LCA2MSwgMTcxXSwKICAJCXpvb21PdXQ6IFsxODksIDEwOSwgNTQsIDE3M10KICAJfSwKCiAgCWluaXRpYWxpemU6IGZ1bmN0aW9uIChtYXApIHsKICAJCXRoaXMuX21hcCA9IG1hcDsKCiAgCQl0aGlzLl9zZXRQYW5EZWx0YShtYXAub3B0aW9ucy5rZXlib2FyZFBhbkRlbHRhKTsKICAJCXRoaXMuX3NldFpvb21EZWx0YShtYXAub3B0aW9ucy56b29tRGVsdGEpOwogIAl9LAoKICAJYWRkSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCXZhciBjb250YWluZXIgPSB0aGlzLl9tYXAuX2NvbnRhaW5lcjsKCiAgCQkvLyBtYWtlIHRoZSBjb250YWluZXIgZm9jdXNhYmxlIGJ5IHRhYmJpbmcKICAJCWlmIChjb250YWluZXIudGFiSW5kZXggPD0gMCkgewogIAkJCWNvbnRhaW5lci50YWJJbmRleCA9ICcwJzsKICAJCX0KCiAgCQlvbihjb250YWluZXIsIHsKICAJCQlmb2N1czogdGhpcy5fb25Gb2N1cywKICAJCQlibHVyOiB0aGlzLl9vbkJsdXIsCiAgCQkJbW91c2Vkb3duOiB0aGlzLl9vbk1vdXNlRG93bgogIAkJfSwgdGhpcyk7CgogIAkJdGhpcy5fbWFwLm9uKHsKICAJCQlmb2N1czogdGhpcy5fYWRkSG9va3MsCiAgCQkJYmx1cjogdGhpcy5fcmVtb3ZlSG9va3MKICAJCX0sIHRoaXMpOwogIAl9LAoKICAJcmVtb3ZlSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCXRoaXMuX3JlbW92ZUhvb2tzKCk7CgogIAkJb2ZmKHRoaXMuX21hcC5fY29udGFpbmVyLCB7CiAgCQkJZm9jdXM6IHRoaXMuX29uRm9jdXMsCiAgCQkJYmx1cjogdGhpcy5fb25CbHVyLAogIAkJCW1vdXNlZG93bjogdGhpcy5fb25Nb3VzZURvd24KICAJCX0sIHRoaXMpOwoKICAJCXRoaXMuX21hcC5vZmYoewogIAkJCWZvY3VzOiB0aGlzLl9hZGRIb29rcywKICAJCQlibHVyOiB0aGlzLl9yZW1vdmVIb29rcwogIAkJfSwgdGhpcyk7CiAgCX0sCgogIAlfb25Nb3VzZURvd246IGZ1bmN0aW9uICgpIHsKICAJCWlmICh0aGlzLl9mb2N1c2VkKSB7IHJldHVybjsgfQoKICAJCXZhciBib2R5ID0gZG9jdW1lbnQuYm9keSwKICAJCSAgICBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwKICAJCSAgICB0b3AgPSBib2R5LnNjcm9sbFRvcCB8fCBkb2NFbC5zY3JvbGxUb3AsCiAgCQkgICAgbGVmdCA9IGJvZHkuc2Nyb2xsTGVmdCB8fCBkb2NFbC5zY3JvbGxMZWZ0OwoKICAJCXRoaXMuX21hcC5fY29udGFpbmVyLmZvY3VzKCk7CgogIAkJd2luZG93LnNjcm9sbFRvKGxlZnQsIHRvcCk7CiAgCX0sCgogIAlfb25Gb2N1czogZnVuY3Rpb24gKCkgewogIAkJdGhpcy5fZm9jdXNlZCA9IHRydWU7CiAgCQl0aGlzLl9tYXAuZmlyZSgnZm9jdXMnKTsKICAJfSwKCiAgCV9vbkJsdXI6IGZ1bmN0aW9uICgpIHsKICAJCXRoaXMuX2ZvY3VzZWQgPSBmYWxzZTsKICAJCXRoaXMuX21hcC5maXJlKCdibHVyJyk7CiAgCX0sCgogIAlfc2V0UGFuRGVsdGE6IGZ1bmN0aW9uIChwYW5EZWx0YSkgewogIAkJdmFyIGtleXMgPSB0aGlzLl9wYW5LZXlzID0ge30sCiAgCQkgICAgY29kZXMgPSB0aGlzLmtleUNvZGVzLAogIAkJICAgIGksIGxlbjsKCiAgCQlmb3IgKGkgPSAwLCBsZW4gPSBjb2Rlcy5sZWZ0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJa2V5c1tjb2Rlcy5sZWZ0W2ldXSA9IFstMSAqIHBhbkRlbHRhLCAwXTsKICAJCX0KICAJCWZvciAoaSA9IDAsIGxlbiA9IGNvZGVzLnJpZ2h0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgCQkJa2V5c1tjb2Rlcy5yaWdodFtpXV0gPSBbcGFuRGVsdGEsIDBdOwogIAkJfQogIAkJZm9yIChpID0gMCwgbGVuID0gY29kZXMuZG93bi5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJCWtleXNbY29kZXMuZG93bltpXV0gPSBbMCwgcGFuRGVsdGFdOwogIAkJfQogIAkJZm9yIChpID0gMCwgbGVuID0gY29kZXMudXAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCQlrZXlzW2NvZGVzLnVwW2ldXSA9IFswLCAtMSAqIHBhbkRlbHRhXTsKICAJCX0KICAJfSwKCiAgCV9zZXRab29tRGVsdGE6IGZ1bmN0aW9uICh6b29tRGVsdGEpIHsKICAJCXZhciBrZXlzID0gdGhpcy5fem9vbUtleXMgPSB7fSwKICAJCSAgICBjb2RlcyA9IHRoaXMua2V5Q29kZXMsCiAgCQkgICAgaSwgbGVuOwoKICAJCWZvciAoaSA9IDAsIGxlbiA9IGNvZGVzLnpvb21Jbi5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogIAkJCWtleXNbY29kZXMuem9vbUluW2ldXSA9IHpvb21EZWx0YTsKICAJCX0KICAJCWZvciAoaSA9IDAsIGxlbiA9IGNvZGVzLnpvb21PdXQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAJCQlrZXlzW2NvZGVzLnpvb21PdXRbaV1dID0gLXpvb21EZWx0YTsKICAJCX0KICAJfSwKCiAgCV9hZGRIb29rczogZnVuY3Rpb24gKCkgewogIAkJb24oZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duLCB0aGlzKTsKICAJfSwKCiAgCV9yZW1vdmVIb29rczogZnVuY3Rpb24gKCkgewogIAkJb2ZmKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuX29uS2V5RG93biwgdGhpcyk7CiAgCX0sCgogIAlfb25LZXlEb3duOiBmdW5jdGlvbiAoZSkgewogIAkJaWYgKGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHsgcmV0dXJuOyB9CgogIAkJdmFyIGtleSA9IGUua2V5Q29kZSwKICAJCSAgICBtYXAgPSB0aGlzLl9tYXAsCiAgCQkgICAgb2Zmc2V0OwoKICAJCWlmIChrZXkgaW4gdGhpcy5fcGFuS2V5cykgewogIAkJCWlmICghbWFwLl9wYW5BbmltIHx8ICFtYXAuX3BhbkFuaW0uX2luUHJvZ3Jlc3MpIHsKICAJCQkJb2Zmc2V0ID0gdGhpcy5fcGFuS2V5c1trZXldOwogIAkJCQlpZiAoZS5zaGlmdEtleSkgewogIAkJCQkJb2Zmc2V0ID0gdG9Qb2ludChvZmZzZXQpLm11bHRpcGx5QnkoMyk7CiAgCQkJCX0KCiAgCQkJCW1hcC5wYW5CeShvZmZzZXQpOwoKICAJCQkJaWYgKG1hcC5vcHRpb25zLm1heEJvdW5kcykgewogIAkJCQkJbWFwLnBhbkluc2lkZUJvdW5kcyhtYXAub3B0aW9ucy5tYXhCb3VuZHMpOwogIAkJCQl9CiAgCQkJfQogIAkJfSBlbHNlIGlmIChrZXkgaW4gdGhpcy5fem9vbUtleXMpIHsKICAJCQltYXAuc2V0Wm9vbShtYXAuZ2V0Wm9vbSgpICsgKGUuc2hpZnRLZXkgPyAzIDogMSkgKiB0aGlzLl96b29tS2V5c1trZXldKTsKCiAgCQl9IGVsc2UgaWYgKGtleSA9PT0gMjcgJiYgbWFwLl9wb3B1cCAmJiBtYXAuX3BvcHVwLm9wdGlvbnMuY2xvc2VPbkVzY2FwZUtleSkgewogIAkJCW1hcC5jbG9zZVBvcHVwKCk7CgogIAkJfSBlbHNlIHsKICAJCQlyZXR1cm47CiAgCQl9CgogIAkJc3RvcChlKTsKICAJfQogIH0pOwoKICAvLyBAc2VjdGlvbiBIYW5kbGVycwogIC8vIEBzZWN0aW9uIEhhbmRsZXJzCiAgLy8gQHByb3BlcnR5IGtleWJvYXJkOiBIYW5kbGVyCiAgLy8gS2V5Ym9hcmQgbmF2aWdhdGlvbiBoYW5kbGVyLgogIE1hcC5hZGRJbml0SG9vaygnYWRkSGFuZGxlcicsICdrZXlib2FyZCcsIEtleWJvYXJkKTsKCiAgLyoKICAgKiBMLkhhbmRsZXIuU2Nyb2xsV2hlZWxab29tIGlzIHVzZWQgYnkgTC5NYXAgdG8gZW5hYmxlIG1vdXNlIHNjcm9sbCB3aGVlbCB6b29tIG9uIHRoZSBtYXAuCiAgICovCgogIC8vIEBuYW1lc3BhY2UgTWFwCiAgLy8gQHNlY3Rpb24gSW50ZXJhY3Rpb24gT3B0aW9ucwogIE1hcC5tZXJnZU9wdGlvbnMoewogIAkvLyBAc2VjdGlvbiBNb3VzZSB3aGVlbCBvcHRpb25zCiAgCS8vIEBvcHRpb24gc2Nyb2xsV2hlZWxab29tOiBCb29sZWFufFN0cmluZyA9IHRydWUKICAJLy8gV2hldGhlciB0aGUgbWFwIGNhbiBiZSB6b29tZWQgYnkgdXNpbmcgdGhlIG1vdXNlIHdoZWVsLiBJZiBwYXNzZWQgYCdjZW50ZXInYCwKICAJLy8gaXQgd2lsbCB6b29tIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHZpZXcgcmVnYXJkbGVzcyBvZiB3aGVyZSB0aGUgbW91c2Ugd2FzLgogIAlzY3JvbGxXaGVlbFpvb206IHRydWUsCgogIAkvLyBAb3B0aW9uIHdoZWVsRGVib3VuY2VUaW1lOiBOdW1iZXIgPSA0MAogIAkvLyBMaW1pdHMgdGhlIHJhdGUgYXQgd2hpY2ggYSB3aGVlbCBjYW4gZmlyZSAoaW4gbWlsbGlzZWNvbmRzKS4gQnkgZGVmYXVsdAogIAkvLyB1c2VyIGNhbid0IHpvb20gdmlhIHdoZWVsIG1vcmUgb2Z0ZW4gdGhhbiBvbmNlIHBlciA0MCBtcy4KICAJd2hlZWxEZWJvdW5jZVRpbWU6IDQwLAoKICAJLy8gQG9wdGlvbiB3aGVlbFB4UGVyWm9vbUxldmVsOiBOdW1iZXIgPSA2MAogIAkvLyBIb3cgbWFueSBzY3JvbGwgcGl4ZWxzIChhcyByZXBvcnRlZCBieSBbTC5Eb21FdmVudC5nZXRXaGVlbERlbHRhXSgjZG9tZXZlbnQtZ2V0d2hlZWxkZWx0YSkpCiAgCS8vIG1lYW4gYSBjaGFuZ2Ugb2Ygb25lIGZ1bGwgem9vbSBsZXZlbC4gU21hbGxlciB2YWx1ZXMgd2lsbCBtYWtlIHdoZWVsLXpvb21pbmcKICAJLy8gZmFzdGVyIChhbmQgdmljZSB2ZXJzYSkuCiAgCXdoZWVsUHhQZXJab29tTGV2ZWw6IDYwCiAgfSk7CgogIHZhciBTY3JvbGxXaGVlbFpvb20gPSBIYW5kbGVyLmV4dGVuZCh7CiAgCWFkZEhvb2tzOiBmdW5jdGlvbiAoKSB7CiAgCQlvbih0aGlzLl9tYXAuX2NvbnRhaW5lciwgJ3doZWVsJywgdGhpcy5fb25XaGVlbFNjcm9sbCwgdGhpcyk7CgogIAkJdGhpcy5fZGVsdGEgPSAwOwogIAl9LAoKICAJcmVtb3ZlSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCW9mZih0aGlzLl9tYXAuX2NvbnRhaW5lciwgJ3doZWVsJywgdGhpcy5fb25XaGVlbFNjcm9sbCwgdGhpcyk7CiAgCX0sCgogIAlfb25XaGVlbFNjcm9sbDogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBkZWx0YSA9IGdldFdoZWVsRGVsdGEoZSk7CgogIAkJdmFyIGRlYm91bmNlID0gdGhpcy5fbWFwLm9wdGlvbnMud2hlZWxEZWJvdW5jZVRpbWU7CgogIAkJdGhpcy5fZGVsdGEgKz0gZGVsdGE7CiAgCQl0aGlzLl9sYXN0TW91c2VQb3MgPSB0aGlzLl9tYXAubW91c2VFdmVudFRvQ29udGFpbmVyUG9pbnQoZSk7CgogIAkJaWYgKCF0aGlzLl9zdGFydFRpbWUpIHsKICAJCQl0aGlzLl9zdGFydFRpbWUgPSArbmV3IERhdGUoKTsKICAJCX0KCiAgCQl2YXIgbGVmdCA9IE1hdGgubWF4KGRlYm91bmNlIC0gKCtuZXcgRGF0ZSgpIC0gdGhpcy5fc3RhcnRUaW1lKSwgMCk7CgogIAkJY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTsKICAJCXRoaXMuX3RpbWVyID0gc2V0VGltZW91dChiaW5kKHRoaXMuX3BlcmZvcm1ab29tLCB0aGlzKSwgbGVmdCk7CgogIAkJc3RvcChlKTsKICAJfSwKCiAgCV9wZXJmb3JtWm9vbTogZnVuY3Rpb24gKCkgewogIAkJdmFyIG1hcCA9IHRoaXMuX21hcCwKICAJCSAgICB6b29tID0gbWFwLmdldFpvb20oKSwKICAJCSAgICBzbmFwID0gdGhpcy5fbWFwLm9wdGlvbnMuem9vbVNuYXAgfHwgMDsKCiAgCQltYXAuX3N0b3AoKTsgLy8gc3RvcCBwYW5uaW5nIGFuZCBmbHkgYW5pbWF0aW9ucyBpZiBhbnkKCiAgCQkvLyBtYXAgdGhlIGRlbHRhIHdpdGggYSBzaWdtb2lkIGZ1bmN0aW9uIHRvIC00Li40IHJhbmdlIGxlYW5pbmcgb24gLTEuLjEKICAJCXZhciBkMiA9IHRoaXMuX2RlbHRhIC8gKHRoaXMuX21hcC5vcHRpb25zLndoZWVsUHhQZXJab29tTGV2ZWwgKiA0KSwKICAJCSAgICBkMyA9IDQgKiBNYXRoLmxvZygyIC8gKDEgKyBNYXRoLmV4cCgtTWF0aC5hYnMoZDIpKSkpIC8gTWF0aC5MTjIsCiAgCQkgICAgZDQgPSBzbmFwID8gTWF0aC5jZWlsKGQzIC8gc25hcCkgKiBzbmFwIDogZDMsCiAgCQkgICAgZGVsdGEgPSBtYXAuX2xpbWl0Wm9vbSh6b29tICsgKHRoaXMuX2RlbHRhID4gMCA/IGQ0IDogLWQ0KSkgLSB6b29tOwoKICAJCXRoaXMuX2RlbHRhID0gMDsKICAJCXRoaXMuX3N0YXJ0VGltZSA9IG51bGw7CgogIAkJaWYgKCFkZWx0YSkgeyByZXR1cm47IH0KCiAgCQlpZiAobWFwLm9wdGlvbnMuc2Nyb2xsV2hlZWxab29tID09PSAnY2VudGVyJykgewogIAkJCW1hcC5zZXRab29tKHpvb20gKyBkZWx0YSk7CiAgCQl9IGVsc2UgewogIAkJCW1hcC5zZXRab29tQXJvdW5kKHRoaXMuX2xhc3RNb3VzZVBvcywgem9vbSArIGRlbHRhKTsKICAJCX0KICAJfQogIH0pOwoKICAvLyBAc2VjdGlvbiBIYW5kbGVycwogIC8vIEBwcm9wZXJ0eSBzY3JvbGxXaGVlbFpvb206IEhhbmRsZXIKICAvLyBTY3JvbGwgd2hlZWwgem9vbSBoYW5kbGVyLgogIE1hcC5hZGRJbml0SG9vaygnYWRkSGFuZGxlcicsICdzY3JvbGxXaGVlbFpvb20nLCBTY3JvbGxXaGVlbFpvb20pOwoKICAvKgogICAqIEwuTWFwLlRhcEhvbGQgaXMgdXNlZCB0byBzaW11bGF0ZSBgY29udGV4dG1lbnVgIGV2ZW50IG9uIGxvbmcgaG9sZCwKICAgKiB3aGljaCBvdGhlcndpc2UgaXMgbm90IGZpcmVkIGJ5IG1vYmlsZSBTYWZhcmkuCiAgICovCgogIHZhciB0YXBIb2xkRGVsYXkgPSA2MDA7CgogIC8vIEBuYW1lc3BhY2UgTWFwCiAgLy8gQHNlY3Rpb24gSW50ZXJhY3Rpb24gT3B0aW9ucwogIE1hcC5tZXJnZU9wdGlvbnMoewogIAkvLyBAc2VjdGlvbiBUb3VjaCBpbnRlcmFjdGlvbiBvcHRpb25zCiAgCS8vIEBvcHRpb24gdGFwSG9sZDogQm9vbGVhbgogIAkvLyBFbmFibGVzIHNpbXVsYXRpb24gb2YgYGNvbnRleHRtZW51YCBldmVudCwgZGVmYXVsdCBpcyBgdHJ1ZWAgZm9yIG1vYmlsZSBTYWZhcmkuCiAgCXRhcEhvbGQ6IEJyb3dzZXIudG91Y2hOYXRpdmUgJiYgQnJvd3Nlci5zYWZhcmkgJiYgQnJvd3Nlci5tb2JpbGUsCgogIAkvLyBAb3B0aW9uIHRhcFRvbGVyYW5jZTogTnVtYmVyID0gMTUKICAJLy8gVGhlIG1heCBudW1iZXIgb2YgcGl4ZWxzIGEgdXNlciBjYW4gc2hpZnQgaGlzIGZpbmdlciBkdXJpbmcgdG91Y2gKICAJLy8gZm9yIGl0IHRvIGJlIGNvbnNpZGVyZWQgYSB2YWxpZCB0YXAuCiAgCXRhcFRvbGVyYW5jZTogMTUKICB9KTsKCiAgdmFyIFRhcEhvbGQgPSBIYW5kbGVyLmV4dGVuZCh7CiAgCWFkZEhvb2tzOiBmdW5jdGlvbiAoKSB7CiAgCQlvbih0aGlzLl9tYXAuX2NvbnRhaW5lciwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vbkRvd24sIHRoaXMpOwogIAl9LAoKICAJcmVtb3ZlSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCW9mZih0aGlzLl9tYXAuX2NvbnRhaW5lciwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vbkRvd24sIHRoaXMpOwogIAl9LAoKICAJX29uRG93bjogZnVuY3Rpb24gKGUpIHsKICAJCWNsZWFyVGltZW91dCh0aGlzLl9ob2xkVGltZW91dCk7CiAgCQlpZiAoZS50b3VjaGVzLmxlbmd0aCAhPT0gMSkgeyByZXR1cm47IH0KCiAgCQl2YXIgZmlyc3QgPSBlLnRvdWNoZXNbMF07CiAgCQl0aGlzLl9zdGFydFBvcyA9IHRoaXMuX25ld1BvcyA9IG5ldyBQb2ludChmaXJzdC5jbGllbnRYLCBmaXJzdC5jbGllbnRZKTsKCiAgCQl0aGlzLl9ob2xkVGltZW91dCA9IHNldFRpbWVvdXQoYmluZChmdW5jdGlvbiAoKSB7CiAgCQkJdGhpcy5fY2FuY2VsKCk7CiAgCQkJaWYgKCF0aGlzLl9pc1RhcFZhbGlkKCkpIHsgcmV0dXJuOyB9CgogIAkJCS8vIHByZXZlbnQgc2ltdWxhdGVkIG1vdXNlIGV2ZW50cyBodHRwczovL3czYy5naXRodWIuaW8vdG91Y2gtZXZlbnRzLyNtb3VzZS1ldmVudHMKICAJCQlvbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgcHJldmVudERlZmF1bHQpOwogIAkJCW9uKGRvY3VtZW50LCAndG91Y2hlbmQgdG91Y2hjYW5jZWwnLCB0aGlzLl9jYW5jZWxDbGlja1ByZXZlbnQpOwogIAkJCXRoaXMuX3NpbXVsYXRlRXZlbnQoJ2NvbnRleHRtZW51JywgZmlyc3QpOwogIAkJfSwgdGhpcyksIHRhcEhvbGREZWxheSk7CgogIAkJb24oZG9jdW1lbnQsICd0b3VjaGVuZCB0b3VjaGNhbmNlbCBjb250ZXh0bWVudScsIHRoaXMuX2NhbmNlbCwgdGhpcyk7CiAgCQlvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uTW92ZSwgdGhpcyk7CiAgCX0sCgogIAlfY2FuY2VsQ2xpY2tQcmV2ZW50OiBmdW5jdGlvbiBjYW5jZWxDbGlja1ByZXZlbnQoKSB7CiAgCQlvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHByZXZlbnREZWZhdWx0KTsKICAJCW9mZihkb2N1bWVudCwgJ3RvdWNoZW5kIHRvdWNoY2FuY2VsJywgY2FuY2VsQ2xpY2tQcmV2ZW50KTsKICAJfSwKCiAgCV9jYW5jZWw6IGZ1bmN0aW9uICgpIHsKICAJCWNsZWFyVGltZW91dCh0aGlzLl9ob2xkVGltZW91dCk7CiAgCQlvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCB0b3VjaGNhbmNlbCBjb250ZXh0bWVudScsIHRoaXMuX2NhbmNlbCwgdGhpcyk7CiAgCQlvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdmUsIHRoaXMpOwogIAl9LAoKICAJX29uTW92ZTogZnVuY3Rpb24gKGUpIHsKICAJCXZhciBmaXJzdCA9IGUudG91Y2hlc1swXTsKICAJCXRoaXMuX25ld1BvcyA9IG5ldyBQb2ludChmaXJzdC5jbGllbnRYLCBmaXJzdC5jbGllbnRZKTsKICAJfSwKCiAgCV9pc1RhcFZhbGlkOiBmdW5jdGlvbiAoKSB7CiAgCQlyZXR1cm4gdGhpcy5fbmV3UG9zLmRpc3RhbmNlVG8odGhpcy5fc3RhcnRQb3MpIDw9IHRoaXMuX21hcC5vcHRpb25zLnRhcFRvbGVyYW5jZTsKICAJfSwKCiAgCV9zaW11bGF0ZUV2ZW50OiBmdW5jdGlvbiAodHlwZSwgZSkgewogIAkJdmFyIHNpbXVsYXRlZEV2ZW50ID0gbmV3IE1vdXNlRXZlbnQodHlwZSwgewogIAkJCWJ1YmJsZXM6IHRydWUsCiAgCQkJY2FuY2VsYWJsZTogdHJ1ZSwKICAJCQl2aWV3OiB3aW5kb3csCiAgCQkJLy8gZGV0YWlsOiAxLAogIAkJCXNjcmVlblg6IGUuc2NyZWVuWCwKICAJCQlzY3JlZW5ZOiBlLnNjcmVlblksCiAgCQkJY2xpZW50WDogZS5jbGllbnRYLAogIAkJCWNsaWVudFk6IGUuY2xpZW50WSwKICAJCQkvLyBidXR0b246IDIsCiAgCQkJLy8gYnV0dG9uczogMgogIAkJfSk7CgogIAkJc2ltdWxhdGVkRXZlbnQuX3NpbXVsYXRlZCA9IHRydWU7CgogIAkJZS50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7CiAgCX0KICB9KTsKCiAgLy8gQHNlY3Rpb24gSGFuZGxlcnMKICAvLyBAcHJvcGVydHkgdGFwSG9sZDogSGFuZGxlcgogIC8vIExvbmcgdGFwIGhhbmRsZXIgdG8gc2ltdWxhdGUgYGNvbnRleHRtZW51YCBldmVudCAodXNlZnVsIGluIG1vYmlsZSBTYWZhcmkpLgogIE1hcC5hZGRJbml0SG9vaygnYWRkSGFuZGxlcicsICd0YXBIb2xkJywgVGFwSG9sZCk7CgogIC8qCiAgICogTC5IYW5kbGVyLlRvdWNoWm9vbSBpcyB1c2VkIGJ5IEwuTWFwIHRvIGFkZCBwaW5jaCB6b29tIG9uIHN1cHBvcnRlZCBtb2JpbGUgYnJvd3NlcnMuCiAgICovCgogIC8vIEBuYW1lc3BhY2UgTWFwCiAgLy8gQHNlY3Rpb24gSW50ZXJhY3Rpb24gT3B0aW9ucwogIE1hcC5tZXJnZU9wdGlvbnMoewogIAkvLyBAc2VjdGlvbiBUb3VjaCBpbnRlcmFjdGlvbiBvcHRpb25zCiAgCS8vIEBvcHRpb24gdG91Y2hab29tOiBCb29sZWFufFN0cmluZyA9ICoKICAJLy8gV2hldGhlciB0aGUgbWFwIGNhbiBiZSB6b29tZWQgYnkgdG91Y2gtZHJhZ2dpbmcgd2l0aCB0d28gZmluZ2Vycy4gSWYKICAJLy8gcGFzc2VkIGAnY2VudGVyJ2AsIGl0IHdpbGwgem9vbSB0byB0aGUgY2VudGVyIG9mIHRoZSB2aWV3IHJlZ2FyZGxlc3Mgb2YKICAJLy8gd2hlcmUgdGhlIHRvdWNoIGV2ZW50cyAoZmluZ2Vycykgd2VyZS4gRW5hYmxlZCBmb3IgdG91Y2gtY2FwYWJsZSB3ZWIKICAJLy8gYnJvd3NlcnMuCiAgCXRvdWNoWm9vbTogQnJvd3Nlci50b3VjaCwKCiAgCS8vIEBvcHRpb24gYm91bmNlQXRab29tTGltaXRzOiBCb29sZWFuID0gdHJ1ZQogIAkvLyBTZXQgaXQgdG8gZmFsc2UgaWYgeW91IGRvbid0IHdhbnQgdGhlIG1hcCB0byB6b29tIGJleW9uZCBtaW4vbWF4IHpvb20KICAJLy8gYW5kIHRoZW4gYm91bmNlIGJhY2sgd2hlbiBwaW5jaC16b29taW5nLgogIAlib3VuY2VBdFpvb21MaW1pdHM6IHRydWUKICB9KTsKCiAgdmFyIFRvdWNoWm9vbSA9IEhhbmRsZXIuZXh0ZW5kKHsKICAJYWRkSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCWFkZENsYXNzKHRoaXMuX21hcC5fY29udGFpbmVyLCAnbGVhZmxldC10b3VjaC16b29tJyk7CiAgCQlvbih0aGlzLl9tYXAuX2NvbnRhaW5lciwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRvdWNoU3RhcnQsIHRoaXMpOwogIAl9LAoKICAJcmVtb3ZlSG9va3M6IGZ1bmN0aW9uICgpIHsKICAJCXJlbW92ZUNsYXNzKHRoaXMuX21hcC5fY29udGFpbmVyLCAnbGVhZmxldC10b3VjaC16b29tJyk7CiAgCQlvZmYodGhpcy5fbWFwLl9jb250YWluZXIsICd0b3VjaHN0YXJ0JywgdGhpcy5fb25Ub3VjaFN0YXJ0LCB0aGlzKTsKICAJfSwKCiAgCV9vblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIChlKSB7CiAgCQl2YXIgbWFwID0gdGhpcy5fbWFwOwogIAkJaWYgKCFlLnRvdWNoZXMgfHwgZS50b3VjaGVzLmxlbmd0aCAhPT0gMiB8fCBtYXAuX2FuaW1hdGluZ1pvb20gfHwgdGhpcy5fem9vbWluZykgeyByZXR1cm47IH0KCiAgCQl2YXIgcDEgPSBtYXAubW91c2VFdmVudFRvQ29udGFpbmVyUG9pbnQoZS50b3VjaGVzWzBdKSwKICAJCSAgICBwMiA9IG1hcC5tb3VzZUV2ZW50VG9Db250YWluZXJQb2ludChlLnRvdWNoZXNbMV0pOwoKICAJCXRoaXMuX2NlbnRlclBvaW50ID0gbWFwLmdldFNpemUoKS5fZGl2aWRlQnkoMik7CiAgCQl0aGlzLl9zdGFydExhdExuZyA9IG1hcC5jb250YWluZXJQb2ludFRvTGF0TG5nKHRoaXMuX2NlbnRlclBvaW50KTsKICAJCWlmIChtYXAub3B0aW9ucy50b3VjaFpvb20gIT09ICdjZW50ZXInKSB7CiAgCQkJdGhpcy5fcGluY2hTdGFydExhdExuZyA9IG1hcC5jb250YWluZXJQb2ludFRvTGF0TG5nKHAxLmFkZChwMikuX2RpdmlkZUJ5KDIpKTsKICAJCX0KCiAgCQl0aGlzLl9zdGFydERpc3QgPSBwMS5kaXN0YW5jZVRvKHAyKTsKICAJCXRoaXMuX3N0YXJ0Wm9vbSA9IG1hcC5nZXRab29tKCk7CgogIAkJdGhpcy5fbW92ZWQgPSBmYWxzZTsKICAJCXRoaXMuX3pvb21pbmcgPSB0cnVlOwoKICAJCW1hcC5fc3RvcCgpOwoKICAJCW9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUsIHRoaXMpOwogIAkJb24oZG9jdW1lbnQsICd0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIHRoaXMuX29uVG91Y2hFbmQsIHRoaXMpOwoKICAJCXByZXZlbnREZWZhdWx0KGUpOwogIAl9LAoKICAJX29uVG91Y2hNb3ZlOiBmdW5jdGlvbiAoZSkgewogIAkJaWYgKCFlLnRvdWNoZXMgfHwgZS50b3VjaGVzLmxlbmd0aCAhPT0gMiB8fCAhdGhpcy5fem9vbWluZykgeyByZXR1cm47IH0KCiAgCQl2YXIgbWFwID0gdGhpcy5fbWFwLAogIAkJICAgIHAxID0gbWFwLm1vdXNlRXZlbnRUb0NvbnRhaW5lclBvaW50KGUudG91Y2hlc1swXSksCiAgCQkgICAgcDIgPSBtYXAubW91c2VFdmVudFRvQ29udGFpbmVyUG9pbnQoZS50b3VjaGVzWzFdKSwKICAJCSAgICBzY2FsZSA9IHAxLmRpc3RhbmNlVG8ocDIpIC8gdGhpcy5fc3RhcnREaXN0OwoKICAJCXRoaXMuX3pvb20gPSBtYXAuZ2V0U2NhbGVab29tKHNjYWxlLCB0aGlzLl9zdGFydFpvb20pOwoKICAJCWlmICghbWFwLm9wdGlvbnMuYm91bmNlQXRab29tTGltaXRzICYmICgKICAJCQkodGhpcy5fem9vbSA8IG1hcC5nZXRNaW5ab29tKCkgJiYgc2NhbGUgPCAxKSB8fAogIAkJCSh0aGlzLl96b29tID4gbWFwLmdldE1heFpvb20oKSAmJiBzY2FsZSA+IDEpKSkgewogIAkJCXRoaXMuX3pvb20gPSBtYXAuX2xpbWl0Wm9vbSh0aGlzLl96b29tKTsKICAJCX0KCiAgCQlpZiAobWFwLm9wdGlvbnMudG91Y2hab29tID09PSAnY2VudGVyJykgewogIAkJCXRoaXMuX2NlbnRlciA9IHRoaXMuX3N0YXJ0TGF0TG5nOwogIAkJCWlmIChzY2FsZSA9PT0gMSkgeyByZXR1cm47IH0KICAJCX0gZWxzZSB7CiAgCQkJLy8gR2V0IGRlbHRhIGZyb20gcGluY2ggdG8gY2VudGVyLCBzbyBjZW50ZXJMYXRMbmcgaXMgZGVsdGEgYXBwbGllZCB0byBpbml0aWFsIHBpbmNoTGF0TG5nCiAgCQkJdmFyIGRlbHRhID0gcDEuX2FkZChwMikuX2RpdmlkZUJ5KDIpLl9zdWJ0cmFjdCh0aGlzLl9jZW50ZXJQb2ludCk7CiAgCQkJaWYgKHNjYWxlID09PSAxICYmIGRlbHRhLnggPT09IDAgJiYgZGVsdGEueSA9PT0gMCkgeyByZXR1cm47IH0KICAJCQl0aGlzLl9jZW50ZXIgPSBtYXAudW5wcm9qZWN0KG1hcC5wcm9qZWN0KHRoaXMuX3BpbmNoU3RhcnRMYXRMbmcsIHRoaXMuX3pvb20pLnN1YnRyYWN0KGRlbHRhKSwgdGhpcy5fem9vbSk7CiAgCQl9CgogIAkJaWYgKCF0aGlzLl9tb3ZlZCkgewogIAkJCW1hcC5fbW92ZVN0YXJ0KHRydWUsIGZhbHNlKTsKICAJCQl0aGlzLl9tb3ZlZCA9IHRydWU7CiAgCQl9CgogIAkJY2FuY2VsQW5pbUZyYW1lKHRoaXMuX2FuaW1SZXF1ZXN0KTsKCiAgCQl2YXIgbW92ZUZuID0gYmluZChtYXAuX21vdmUsIG1hcCwgdGhpcy5fY2VudGVyLCB0aGlzLl96b29tLCB7cGluY2g6IHRydWUsIHJvdW5kOiBmYWxzZX0pOwogIAkJdGhpcy5fYW5pbVJlcXVlc3QgPSByZXF1ZXN0QW5pbUZyYW1lKG1vdmVGbiwgdGhpcywgdHJ1ZSk7CgogIAkJcHJldmVudERlZmF1bHQoZSk7CiAgCX0sCgogIAlfb25Ub3VjaEVuZDogZnVuY3Rpb24gKCkgewogIAkJaWYgKCF0aGlzLl9tb3ZlZCB8fCAhdGhpcy5fem9vbWluZykgewogIAkJCXRoaXMuX3pvb21pbmcgPSBmYWxzZTsKICAJCQlyZXR1cm47CiAgCQl9CgogIAkJdGhpcy5fem9vbWluZyA9IGZhbHNlOwogIAkJY2FuY2VsQW5pbUZyYW1lKHRoaXMuX2FuaW1SZXF1ZXN0KTsKCiAgCQlvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSwgdGhpcyk7CiAgCQlvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIHRoaXMuX29uVG91Y2hFbmQsIHRoaXMpOwoKICAJCS8vIFBpbmNoIHVwZGF0ZXMgR3JpZExheWVycycgbGV2ZWxzIG9ubHkgd2hlbiB6b29tU25hcCBpcyBvZmYsIHNvIHpvb21TbmFwIGJlY29tZXMgbm9VcGRhdGUuCiAgCQlpZiAodGhpcy5fbWFwLm9wdGlvbnMuem9vbUFuaW1hdGlvbikgewogIAkJCXRoaXMuX21hcC5fYW5pbWF0ZVpvb20odGhpcy5fY2VudGVyLCB0aGlzLl9tYXAuX2xpbWl0Wm9vbSh0aGlzLl96b29tKSwgdHJ1ZSwgdGhpcy5fbWFwLm9wdGlvbnMuem9vbVNuYXApOwogIAkJfSBlbHNlIHsKICAJCQl0aGlzLl9tYXAuX3Jlc2V0Vmlldyh0aGlzLl9jZW50ZXIsIHRoaXMuX21hcC5fbGltaXRab29tKHRoaXMuX3pvb20pKTsKICAJCX0KICAJfQogIH0pOwoKICAvLyBAc2VjdGlvbiBIYW5kbGVycwogIC8vIEBwcm9wZXJ0eSB0b3VjaFpvb206IEhhbmRsZXIKICAvLyBUb3VjaCB6b29tIGhhbmRsZXIuCiAgTWFwLmFkZEluaXRIb29rKCdhZGRIYW5kbGVyJywgJ3RvdWNoWm9vbScsIFRvdWNoWm9vbSk7CgogIE1hcC5Cb3hab29tID0gQm94Wm9vbTsKICBNYXAuRG91YmxlQ2xpY2tab29tID0gRG91YmxlQ2xpY2tab29tOwogIE1hcC5EcmFnID0gRHJhZzsKICBNYXAuS2V5Ym9hcmQgPSBLZXlib2FyZDsKICBNYXAuU2Nyb2xsV2hlZWxab29tID0gU2Nyb2xsV2hlZWxab29tOwogIE1hcC5UYXBIb2xkID0gVGFwSG9sZDsKICBNYXAuVG91Y2hab29tID0gVG91Y2hab29tOwoKICBleHBvcnRzLkJvdW5kcyA9IEJvdW5kczsKICBleHBvcnRzLkJyb3dzZXIgPSBCcm93c2VyOwogIGV4cG9ydHMuQ1JTID0gQ1JTOwogIGV4cG9ydHMuQ2FudmFzID0gQ2FudmFzOwogIGV4cG9ydHMuQ2lyY2xlID0gQ2lyY2xlOwogIGV4cG9ydHMuQ2lyY2xlTWFya2VyID0gQ2lyY2xlTWFya2VyOwogIGV4cG9ydHMuQ2xhc3MgPSBDbGFzczsKICBleHBvcnRzLkNvbnRyb2wgPSBDb250cm9sOwogIGV4cG9ydHMuRGl2SWNvbiA9IERpdkljb247CiAgZXhwb3J0cy5EaXZPdmVybGF5ID0gRGl2T3ZlcmxheTsKICBleHBvcnRzLkRvbUV2ZW50ID0gRG9tRXZlbnQ7CiAgZXhwb3J0cy5Eb21VdGlsID0gRG9tVXRpbDsKICBleHBvcnRzLkRyYWdnYWJsZSA9IERyYWdnYWJsZTsKICBleHBvcnRzLkV2ZW50ZWQgPSBFdmVudGVkOwogIGV4cG9ydHMuRmVhdHVyZUdyb3VwID0gRmVhdHVyZUdyb3VwOwogIGV4cG9ydHMuR2VvSlNPTiA9IEdlb0pTT047CiAgZXhwb3J0cy5HcmlkTGF5ZXIgPSBHcmlkTGF5ZXI7CiAgZXhwb3J0cy5IYW5kbGVyID0gSGFuZGxlcjsKICBleHBvcnRzLkljb24gPSBJY29uOwogIGV4cG9ydHMuSW1hZ2VPdmVybGF5ID0gSW1hZ2VPdmVybGF5OwogIGV4cG9ydHMuTGF0TG5nID0gTGF0TG5nOwogIGV4cG9ydHMuTGF0TG5nQm91bmRzID0gTGF0TG5nQm91bmRzOwogIGV4cG9ydHMuTGF5ZXIgPSBMYXllcjsKICBleHBvcnRzLkxheWVyR3JvdXAgPSBMYXllckdyb3VwOwogIGV4cG9ydHMuTGluZVV0aWwgPSBMaW5lVXRpbDsKICBleHBvcnRzLk1hcCA9IE1hcDsKICBleHBvcnRzLk1hcmtlciA9IE1hcmtlcjsKICBleHBvcnRzLk1peGluID0gTWl4aW47CiAgZXhwb3J0cy5QYXRoID0gUGF0aDsKICBleHBvcnRzLlBvaW50ID0gUG9pbnQ7CiAgZXhwb3J0cy5Qb2x5VXRpbCA9IFBvbHlVdGlsOwogIGV4cG9ydHMuUG9seWdvbiA9IFBvbHlnb247CiAgZXhwb3J0cy5Qb2x5bGluZSA9IFBvbHlsaW5lOwogIGV4cG9ydHMuUG9wdXAgPSBQb3B1cDsKICBleHBvcnRzLlBvc0FuaW1hdGlvbiA9IFBvc0FuaW1hdGlvbjsKICBleHBvcnRzLlByb2plY3Rpb24gPSBpbmRleDsKICBleHBvcnRzLlJlY3RhbmdsZSA9IFJlY3RhbmdsZTsKICBleHBvcnRzLlJlbmRlcmVyID0gUmVuZGVyZXI7CiAgZXhwb3J0cy5TVkcgPSBTVkc7CiAgZXhwb3J0cy5TVkdPdmVybGF5ID0gU1ZHT3ZlcmxheTsKICBleHBvcnRzLlRpbGVMYXllciA9IFRpbGVMYXllcjsKICBleHBvcnRzLlRvb2x0aXAgPSBUb29sdGlwOwogIGV4cG9ydHMuVHJhbnNmb3JtYXRpb24gPSBUcmFuc2Zvcm1hdGlvbjsKICBleHBvcnRzLlV0aWwgPSBVdGlsOwogIGV4cG9ydHMuVmlkZW9PdmVybGF5ID0gVmlkZW9PdmVybGF5OwogIGV4cG9ydHMuYmluZCA9IGJpbmQ7CiAgZXhwb3J0cy5ib3VuZHMgPSB0b0JvdW5kczsKICBleHBvcnRzLmNhbnZhcyA9IGNhbnZhczsKICBleHBvcnRzLmNpcmNsZSA9IGNpcmNsZTsKICBleHBvcnRzLmNpcmNsZU1hcmtlciA9IGNpcmNsZU1hcmtlcjsKICBleHBvcnRzLmNvbnRyb2wgPSBjb250cm9sOwogIGV4cG9ydHMuZGl2SWNvbiA9IGRpdkljb247CiAgZXhwb3J0cy5leHRlbmQgPSBleHRlbmQ7CiAgZXhwb3J0cy5mZWF0dXJlR3JvdXAgPSBmZWF0dXJlR3JvdXA7CiAgZXhwb3J0cy5nZW9KU09OID0gZ2VvSlNPTjsKICBleHBvcnRzLmdlb0pzb24gPSBnZW9Kc29uOwogIGV4cG9ydHMuZ3JpZExheWVyID0gZ3JpZExheWVyOwogIGV4cG9ydHMuaWNvbiA9IGljb247CiAgZXhwb3J0cy5pbWFnZU92ZXJsYXkgPSBpbWFnZU92ZXJsYXk7CiAgZXhwb3J0cy5sYXRMbmcgPSB0b0xhdExuZzsKICBleHBvcnRzLmxhdExuZ0JvdW5kcyA9IHRvTGF0TG5nQm91bmRzOwogIGV4cG9ydHMubGF5ZXJHcm91cCA9IGxheWVyR3JvdXA7CiAgZXhwb3J0cy5tYXAgPSBjcmVhdGVNYXA7CiAgZXhwb3J0cy5tYXJrZXIgPSBtYXJrZXI7CiAgZXhwb3J0cy5wb2ludCA9IHRvUG9pbnQ7CiAgZXhwb3J0cy5wb2x5Z29uID0gcG9seWdvbjsKICBleHBvcnRzLnBvbHlsaW5lID0gcG9seWxpbmU7CiAgZXhwb3J0cy5wb3B1cCA9IHBvcHVwOwogIGV4cG9ydHMucmVjdGFuZ2xlID0gcmVjdGFuZ2xlOwogIGV4cG9ydHMuc2V0T3B0aW9ucyA9IHNldE9wdGlvbnM7CiAgZXhwb3J0cy5zdGFtcCA9IHN0YW1wOwogIGV4cG9ydHMuc3ZnID0gc3ZnOwogIGV4cG9ydHMuc3ZnT3ZlcmxheSA9IHN2Z092ZXJsYXk7CiAgZXhwb3J0cy50aWxlTGF5ZXIgPSB0aWxlTGF5ZXI7CiAgZXhwb3J0cy50b29sdGlwID0gdG9vbHRpcDsKICBleHBvcnRzLnRyYW5zZm9ybWF0aW9uID0gdG9UcmFuc2Zvcm1hdGlvbjsKICBleHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uOwogIGV4cG9ydHMudmlkZW9PdmVybGF5ID0gdmlkZW9PdmVybGF5OwoKICB2YXIgb2xkTCA9IHdpbmRvdy5MOwogIGV4cG9ydHMubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkgewogIAl3aW5kb3cuTCA9IG9sZEw7CiAgCXJldHVybiB0aGlzOwogIH0KICAvLyBBbHdheXMgZXhwb3J0IHVzIHRvIHdpbmRvdyBnbG9iYWwgKHNlZSAjMjM2NCkKICB3aW5kb3cuTCA9IGV4cG9ydHM7Cgp9KSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlYWZsZXQtc3JjLmpzLm1hcAoKCjsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAvLyAqKiogaW5jbHVkZWQ6IGV4dGVybmFsL0wuR2VvZGVzaWMuanMgKioqCihmdW5jdGlvbiAoKSB7CiAgLy8gY29uc3RhbnRzCiAgdmFyIGQyciA9IE1hdGguUEkvMTgwLjA7CiAgdmFyIHIyZCA9IDE4MC4wL01hdGguUEk7CiAgdmFyIGVhcnRoUiA9IDYzNjcwMDAuMDsgLy8gZWFydGggcmFkaXVzIGluIG1ldGVycyAoZG9lc24ndCBoYXZlIHRvIGJlIGV4YWN0KQoKICAvLyBhbHRlcm5hdGl2ZSBnZW9kZXNpYyBsaW5lIGludGVybWVkaWF0ZSBwb2ludHMgZnVuY3Rpb24KICAvLyBhcyBub3J0aC9zb3V0aCBsaW5lcyBoYXZlIHZlcnkgbGl0dGxlIGN1cnZhdHVyZSBpbiB0aGUgcHJvamVjdGlvbiwgd2UgY2FuIHVzZSBsb25naXR1ZGUgKGVhc3Qvd2VzdCkgc2VwZXJhdGlvbgogIC8vIHRvIGNhbGN1bGF0ZSBpbnRlcm1lZGlhdGUgcG9pbnRzLiBob3BlZnVsbHkgdGhpcyB3aWxsIGF2b2lkIHRoZSByb3VuZGluZyBpc3N1ZXMgc2VlbiBpbiB0aGUgZnVsbCBpbnRlcm1lZGlhdGUKICAvLyBwb2ludHMgY29kZSB0aGF0IGhhdmUgYmVlbiBzZWVuCiAgZnVuY3Rpb24gZ2VvZGVzaWNDb252ZXJ0TGluZSAoc3RhcnQsIGVuZCwgY29udmVydGVkUG9pbnRzKSB7IC8vIHB1c2ggaW50ZXJtZWRpYXRlIHBvaW50cyBpbnRvIGNvbnZlcnRlZFBvaW50cwoKICAgIHZhciBsbmcxID0gc3RhcnQubG5nICogZDJyOwogICAgdmFyIGxuZzIgPSBlbmQubG5nICogZDJyOwogICAgdmFyIGRMbmcgPSBsbmcxLWxuZzI7CgogICAgdmFyIHNlZ21lbnRzID0gTWF0aC5mbG9vcihNYXRoLmFicyhkTG5nICogZWFydGhSIC8gdGhpcy5vcHRpb25zLnNlZ21lbnRzQ29lZmYpKTsKICAgIGlmIChzZWdtZW50cyA8IDIpIHsgcmV0dXJuOyB9CgogICAgLy8gbWF0aHMgYmFzZWQgb24gaHR0cHM6Ly9lZHdpbGxpYW1zLm9yZy9hdmZvcm0uaHRtI0ludAoKICAgIC8vIHByZS1jYWxjdWxhdGUgc29tZSBjb25zdGFudCB2YWx1ZXMgZm9yIHRoZSBsb29wCiAgICB2YXIgbGF0MSA9IHN0YXJ0LmxhdCAqIGQycjsKICAgIHZhciBsYXQyID0gZW5kLmxhdCAqIGQycjsKICAgIHZhciBzaW5MYXQxID0gTWF0aC5zaW4obGF0MSk7CiAgICB2YXIgc2luTGF0MiA9IE1hdGguc2luKGxhdDIpOwogICAgdmFyIGNvc0xhdDEgPSBNYXRoLmNvcyhsYXQxKTsKICAgIHZhciBjb3NMYXQyID0gTWF0aC5jb3MobGF0Mik7CiAgICB2YXIgc2luTGF0MUNvc0xhdDIgPSBzaW5MYXQxKmNvc0xhdDI7CiAgICB2YXIgc2luTGF0MkNvc0xhdDEgPSBzaW5MYXQyKmNvc0xhdDE7CiAgICB2YXIgY29zTGF0MUNvc0xhdDJTaW5ETG5nID0gY29zTGF0MSpjb3NMYXQyKk1hdGguc2luKGRMbmcpOwoKICAgIGZvciAodmFyIGk9MTsgaSA8IHNlZ21lbnRzOyBpKyspIHsKICAgICAgdmFyIGlMbmcgPSBsbmcxLWRMbmcqKGkvc2VnbWVudHMpOwogICAgICB2YXIgaUxhdCA9IE1hdGguYXRhbigKICAgICAgICAoc2luTGF0MUNvc0xhdDIgKiBNYXRoLnNpbihpTG5nLWxuZzIpIC0gc2luTGF0MkNvc0xhdDEgKiBNYXRoLnNpbihpTG5nLWxuZzEpKQogICAgICAgICAgLyBjb3NMYXQxQ29zTGF0MlNpbkRMbmcKICAgICAgKTsKICAgICAgY29udmVydGVkUG9pbnRzLnB1c2goTC5sYXRMbmcoaUxhdCpyMmQsIGlMbmcqcjJkKSk7CiAgICB9CiAgfQoKCiAgLy8gaXRlcmF0ZSBwYWlycyBvZiBjb25uZWN0ZWQgdmVydGljZXMgd2l0aCBmbigpLCBhZGRpbmcgbmV3IGludGVybWVkaWF0ZSB2ZXJ0aWNlcyAoaWYgcmV0dXJuZWQpCiAgZnVuY3Rpb24gcHJvY2Vzc1BvbHkgKGxhdGxuZ3MsIGZuKSB7CiAgICB2YXIgcmVzdWx0ID0gW107CgogICAgLy8gdmFyIGlzUG9seWdvbiA9IHRoaXMub3B0aW9ucy5maWxsOyAvLyAhd3Jvbmc6IEwuRHJhdyB1c2Ugb3B0aW9ucy5maWxsIHdpdGggcG9seWxpbmVzCiAgICB2YXIgaXNQb2x5Z29uID0gdGhpcyBpbnN0YW5jZW9mIEwuUG9seWdvbjsKICAgIGlmIChpc1BvbHlnb24pIHsKICAgICAgbGF0bG5ncy5wdXNoKGxhdGxuZ3NbMF0pOwogICAgfSBlbHNlIHsKICAgICAgcmVzdWx0LnB1c2gobGF0bG5nc1swXSk7CiAgICB9CiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGF0bG5ncy5sZW5ndGggLSAxOyBpIDwgbGVuOyBpKyspIHsKICAgICAgZm4uY2FsbCh0aGlzLCBsYXRsbmdzW2ldLCBsYXRsbmdzW2krMV0sIHJlc3VsdCk7CiAgICAgIHJlc3VsdC5wdXNoKGxhdGxuZ3NbaSsxXSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gZ2VvZGVzaWNDb252ZXJ0TGluZXMgKGxhdGxuZ3MpIHsKICAgIGlmIChsYXRsbmdzLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gW107CiAgICB9CgogICAgLy8gZ2VvZGVzaWMgY2FsY3VsYXRpb25zIGhhdmUgaXNzdWVzIHdoZW4gY3Jvc3NpbmcgdGhlIGFudGktbWVyaWRpYW4uIHNvIG9mZnNldCB0aGUgcG9pbnRzCiAgICAvLyBzbyB0aGlzIGlzbid0IGFuIGlzc3VlLCB0aGVuIGFkZCBiYWNrIHRoZSBvZmZzZXQgYWZ0ZXJ3YXJkcwogICAgLy8gYSBjZW50ZXIgbG9uZ2l0dWRlIHdvdWxkIGJlIGlkZWFsIC0gYnV0IHRoZSBzdGFydCBwb2ludCBsb25naXR1ZGUgd2lsbCBiZSAnZ29vZCBlbm91Z2gnCiAgICB2YXIgbG5nT2Zmc2V0ID0gbGF0bG5nc1swXS5sbmc7CgogICAgLy8gcG9pbnRzIGFyZSB3cmFwcGVkIGFmdGVyIGJlaW5nIG9mZnNldCByZWxhdGl2ZSB0byB0aGUgZmlyc3QgcG9pbnQgY29vcmRpbmF0ZSwgc28gdGhleSdyZQogICAgLy8gd2l0aGluICstMTgwIGRlZ3JlZXMKICAgIGxhdGxuZ3MgPSBsYXRsbmdzLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gTC5sYXRMbmcoYS5sYXQsIGEubG5nLWxuZ09mZnNldCkud3JhcCgpOyB9KTsKCiAgICB2YXIgZ2VvZGVzaWNsYXRsbmdzID0gdGhpcy5fcHJvY2Vzc1BvbHkobGF0bG5ncyx0aGlzLl9nZW9kZXNpY0NvbnZlcnRMaW5lKTsKCiAgICAvLyBub3cgYWRkIGJhY2sgdGhlIG9mZnNldCBzdWJ0cmFjdGVkIGFib3ZlLiBubyB3cmFwcGluZyBoZXJlIC0gdGhlIGRyYXdpbmcgY29kZSBoYW5kbGVzCiAgICAvLyB0aGluZ3MgYmV0dGVyIHdoZW4gdGhlcmUncyBubyBzdWRkZW4ganVtcHMgaW4gY29vcmRpbmF0ZXMuIHllcywgbGluZXMgd2lsbCBleHRlbmQKICAgIC8vIGJleW9uZCArLTE4MCBkZWdyZWVzIC0gYnV0IHRoZXkgd29uJ3QgYmUgJ2Jyb2tlbicKICAgIGdlb2Rlc2ljbGF0bG5ncyA9IGdlb2Rlc2ljbGF0bG5ncy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIEwubGF0TG5nKGEubGF0LCBhLmxuZytsbmdPZmZzZXQpOyB9KTsKCiAgICByZXR1cm4gZ2VvZGVzaWNsYXRsbmdzOwogIH0KCiAgdmFyIHBvbHlPcHRpb25zID0gewogICAgc2VnbWVudHNDb2VmZjogNTAwMAogIH07CgogIHZhciBQb2x5TWl4aW4gPSB7CiAgICBfZ2VvZGVzaWNDb252ZXJ0TGluZTogZ2VvZGVzaWNDb252ZXJ0TGluZSwKCiAgICBfcHJvY2Vzc1BvbHk6IHByb2Nlc3NQb2x5LAoKICAgIF9nZW9kZXNpY0NvbnZlcnRMaW5lczogZ2VvZGVzaWNDb252ZXJ0TGluZXMsCgogICAgX2dlb2Rlc2ljQ29udmVydDogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLl9sYXRsbmdzID0gdGhpcy5fZ2VvZGVzaWNDb252ZXJ0TGluZXModGhpcy5fbGF0bG5nc2luaXQpOwogICAgICB0aGlzLl9jb252ZXJ0TGF0TG5ncyh0aGlzLl9sYXRsbmdzKTsgLy8gdXBkYXRlIGJvdW5kcwogICAgfSwKCiAgICBvcHRpb25zOiBwb2x5T3B0aW9ucywKCiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAobGF0bG5ncywgb3B0aW9ucykgewogICAgICBMLlBvbHlsaW5lLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgbGF0bG5ncywgb3B0aW9ucyk7CiAgICAgIHRoaXMuX2dlb2Rlc2ljQ29udmVydCgpOwogICAgfSwKCiAgICBnZXRMYXRMbmdzOiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLl9sYXRsbmdzaW5pdDsKICAgIH0sCgogICAgX3NldExhdExuZ3M6IGZ1bmN0aW9uIChsYXRsbmdzKSB7CiAgICAgIHRoaXMuX2JvdW5kcyA9IEwubGF0TG5nQm91bmRzKCk7CiAgICAgIHRoaXMuX2xhdGxuZ3Npbml0ID0gdGhpcy5fY29udmVydExhdExuZ3MobGF0bG5ncyk7CiAgICB9LAoKICAgIF9kZWZhdWx0U2hhcGU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGxhdGxuZ3MgPSB0aGlzLl9sYXRsbmdzaW5pdDsKICAgICAgcmV0dXJuIEwuTGluZVV0aWwuaXNGbGF0KGxhdGxuZ3MpID8gbGF0bG5ncyA6IGxhdGxuZ3NbMF07CiAgICB9LAoKICAgIHJlZHJhdzogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLl9nZW9kZXNpY0NvbnZlcnQoKTsKICAgICAgcmV0dXJuIEwuUGF0aC5wcm90b3R5cGUucmVkcmF3LmNhbGwodGhpcyk7CiAgICB9CiAgfTsKCiAgTC5HZW9kZXNpY1BvbHlsaW5lID0gTC5Qb2x5bGluZS5leHRlbmQoUG9seU1peGluKTsKCiAgUG9seU1peGluLm9wdGlvbnMgPSBwb2x5T3B0aW9uczsgLy8gd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL0xlYWZsZXQvTGVhZmxldC9wdWxsLzY3NjYvCiAgTC5HZW9kZXNpY1BvbHlnb24gPSBMLlBvbHlnb24uZXh0ZW5kKFBvbHlNaXhpbik7CgogIEwuR2VvZGVzaWNDaXJjbGUgPSBMLlBvbHlnb24uZXh0ZW5kKHsKICAgIG9wdGlvbnM6IHsKICAgICAgc2VnbWVudHNDb2VmZjogMTAwMCwKICAgICAgc2VnbWVudHNNaW46IDQ4CiAgICB9LAoKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChsYXRsbmcsIG9wdGlvbnMsIGxlZ2FjeU9wdGlvbnMpIHsKICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykgewogICAgICAgIC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggMC43LnggZmFjdG9yeSAobGF0bG5nLCByYWRpdXMsIG9wdGlvbnM/KQogICAgICAgIG9wdGlvbnMgPSBMLmV4dGVuZCh7fSwgbGVnYWN5T3B0aW9ucywge3JhZGl1czogb3B0aW9uc30pOwogICAgICB9CiAgICAgIHRoaXMuX2xhdGxuZyA9IEwubGF0TG5nKGxhdGxuZyk7CiAgICAgIHRoaXMuX3JhZGl1cyA9IG9wdGlvbnMucmFkaXVzOyAvLyBub3RlOiBodHRwczovL2dpdGh1Yi5jb20vTGVhZmxldC9MZWFmbGV0L2lzc3Vlcy82NjU2CiAgICAgIHZhciBwb2ludHMgPSB0aGlzLl9jYWxjUG9pbnRzKCk7CiAgICAgIEwuUG9seWdvbi5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIHBvaW50cywgb3B0aW9ucyk7CiAgICB9LAoKICAgIHNldExhdExuZzogZnVuY3Rpb24gKGxhdGxuZykgewogICAgICB0aGlzLl9sYXRsbmcgPSBMLmxhdExuZyhsYXRsbmcpOwogICAgICB2YXIgcG9pbnRzID0gdGhpcy5fY2FsY1BvaW50cygpOwogICAgICB0aGlzLnNldExhdExuZ3MocG9pbnRzKTsKICAgIH0sCgogICAgc2V0UmFkaXVzOiBmdW5jdGlvbiAocmFkaXVzKSB7CiAgICAgIHRoaXMuX3JhZGl1cyA9IHJhZGl1czsKICAgICAgdmFyIHBvaW50cyA9IHRoaXMuX2NhbGNQb2ludHMoKTsKICAgICAgdGhpcy5zZXRMYXRMbmdzKHBvaW50cyk7CiAgICB9LAoKICAgIGdldExhdExuZzogZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gdGhpcy5fbGF0bG5nOwogICAgfSwKCiAgICBnZXRSYWRpdXM6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3JhZGl1czsKICAgIH0sCgogICAgX2NhbGNQb2ludHM6IGZ1bmN0aW9uICgpIHsKCiAgICAgIC8vIGNpcmNsZSByYWRpdXMgYXMgYW4gYW5nbGUgZnJvbSB0aGUgY2VudHJlIG9mIHRoZSBlYXJ0aAogICAgICB2YXIgcmFkUmFkaXVzID0gdGhpcy5fcmFkaXVzIC8gZWFydGhSOwoKICAgICAgLy8gcHJlLWNhbGN1bGF0ZSB2YXJpb3VzIHZhbHVlcyB1c2VkIGZvciBldmVyeSBwb2ludCBvbiB0aGUgY2lyY2xlCiAgICAgIHZhciBjZW50cmVMYXQgPSB0aGlzLl9sYXRsbmcubGF0ICogZDJyOwogICAgICB2YXIgY2VudHJlTG5nID0gdGhpcy5fbGF0bG5nLmxuZyAqIGQycjsKCiAgICAgIHZhciBjb3NDZW50cmVMYXQgPSBNYXRoLmNvcyhjZW50cmVMYXQpOwogICAgICB2YXIgc2luQ2VudHJlTGF0ID0gTWF0aC5zaW4oY2VudHJlTGF0KTsKCiAgICAgIHZhciBjb3NSYWRSYWRpdXMgPSBNYXRoLmNvcyhyYWRSYWRpdXMpOwogICAgICB2YXIgc2luUmFkUmFkaXVzID0gTWF0aC5zaW4ocmFkUmFkaXVzKTsKCiAgICAgIHZhciBjYWxjTGF0TG5nQXRBbmdsZSA9IGZ1bmN0aW9uIChhbmdsZSkgewogICAgICAgIHZhciBsYXQgPSBNYXRoLmFzaW4oc2luQ2VudHJlTGF0KmNvc1JhZFJhZGl1cyArIGNvc0NlbnRyZUxhdCpzaW5SYWRSYWRpdXMqTWF0aC5jb3MoYW5nbGUpKTsKICAgICAgICB2YXIgbG5nID0gY2VudHJlTG5nICsgTWF0aC5hdGFuMihNYXRoLnNpbihhbmdsZSkqc2luUmFkUmFkaXVzKmNvc0NlbnRyZUxhdCwgY29zUmFkUmFkaXVzLXNpbkNlbnRyZUxhdCpNYXRoLnNpbihsYXQpKTsKCiAgICAgICAgcmV0dXJuIEwubGF0TG5nKGxhdCAqIHIyZCxsbmcgKiByMmQpOwogICAgICB9OwoKICAgICAgdmFyIG8gPSB0aGlzLm9wdGlvbnM7CiAgICAgIHZhciBzZWdtZW50cyA9IE1hdGgubWF4KG8uc2VnbWVudHNNaW4sTWF0aC5mbG9vcih0aGlzLl9yYWRpdXMvby5zZWdtZW50c0NvZWZmKSk7CiAgICAgIHZhciBwb2ludHMgPSBbXTsKICAgICAgZm9yICh2YXIgaT0wOyBpPHNlZ21lbnRzOyBpKyspIHsKICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJKjIvc2VnbWVudHMqaTsKCiAgICAgICAgdmFyIHBvaW50ID0gY2FsY0xhdExuZ0F0QW5nbGUoYW5nbGUpOwogICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvaW50czsKICAgIH0KCiAgfSk7CgoKICBMLmdlb2Rlc2ljUG9seWxpbmUgPSBmdW5jdGlvbiAobGF0bG5ncywgb3B0aW9ucykgewogICAgcmV0dXJuIG5ldyBMLkdlb2Rlc2ljUG9seWxpbmUobGF0bG5ncywgb3B0aW9ucyk7CiAgfTsKCiAgTC5nZW9kZXNpY1BvbHlnb24gPSBmdW5jdGlvbiAobGF0bG5ncywgb3B0aW9ucykgewogICAgcmV0dXJuIG5ldyBMLkdlb2Rlc2ljUG9seWdvbihsYXRsbmdzLCBvcHRpb25zKTsKICB9OwoKICBMLmdlb2Rlc2ljQ2lyY2xlID0gZnVuY3Rpb24gKGxhdGxuZywgcmFkaXVzLCBvcHRpb25zKSB7CiAgICByZXR1cm4gbmV3IEwuR2VvZGVzaWNDaXJjbGUobGF0bG5nLCByYWRpdXMsIG9wdGlvbnMpOwogIH07Cgp9KCkpOwoKCjsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAvLyAqKiogaW5jbHVkZWQ6IGV4dGVybmFsL0xlYWZsZXQuR29vZ2xlTXV0YW50LmpzICoqKgooZnVuY3Rpb24gKCkgewoJJ3VzZSBzdHJpY3QnOwoKCS8qKgoJICogR29vZ2xlTXV0YW50IGJ5IEl2w6FuIFPDoW5jaGV6IE9ydGVnYSA8aXZhbkBzYW5jaGV6b3J0ZWdhLmVzPiBodHRwczovL2l2YW4uc2FuY2hlem9ydGVnYS5lcwoJICogU291cmNlIGFuZCBpc3N1ZSB0cmFja2luZzogaHR0cHM6Ly9naXRsYWIuY29tL0l2YW5TYW5jaGV6L0xlYWZsZXQuR3JpZExheWVyLkdvb2dsZU11dGFudC8KCSAqCgkgKiBCYXNlZCBvbiB0ZWNobmlxdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3NocmFtb3YvbGVhZmxldC1wbHVnaW5zCgkgKiBhbmQgaHR0cHM6Ly9hdmlubWF0aGV3LmNvbS9sZWFmbGV0LWFuZC1nb29nbGUtbWFwcy8gLCBidXQgcmVseWluZyBvbiBNdXRhdGlvbk9ic2VydmVyLgoJICoKCSAqICJUSEUgQkVFUi1XQVJFIExJQ0VOU0UiOgoJICogPGl2YW5Ac2FuY2hlem9ydGVnYS5lcz4gd3JvdGUgdGhpcyBmaWxlLiBBcyBsb25nIGFzIHlvdSByZXRhaW4gdGhpcyBub3RpY2UgeW91CgkgKiBjYW4gZG8gd2hhdGV2ZXIgeW91IHdhbnQgd2l0aCB0aGlzIHN0dWZmLiBJZiB3ZSBtZWV0IHNvbWUgZGF5LCBhbmQgeW91IHRoaW5rCgkgKiB0aGlzIHN0dWZmIGlzIHdvcnRoIGl0LCB5b3UgY2FuIGJ1eSBtZSBhIGJlZXIgaW4gcmV0dXJuLgoJICoKCSAqIFVzZXMgTUlULWxpY2Vuc2VkIGNvZGUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcnNtcy9qcy1scnUvCgkgKi8KCgkvLyBUaGlzIGltcGxlbWVudGF0aW9uIG9mIExSVU1hcCBpcyBhIGNvcHkgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JzbXMvanMtbHJ1LyAsCgkvLyB0cml2aWFsbHkgYWRhcHRlZCBmb3IgRVM2IGV4cG9ydHMuCgoJLyoKCVRoZSBNSVQgTGljZW5zZQoKCUNvcHlyaWdodCAoYykgMjAxMC0yMDIwIFJhc211cyBBbmRlcnNzb24gPGh0dHBzOi8vcnNtcy5tZS8+CgoJUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQoJb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKCWluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKCXRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKCWNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwoJZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKCglUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgoJYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgoJVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKCUlNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLAoJRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCglBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCglMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLAoJT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgoJVEhFIFNPRlRXQVJFLgoJKi8KCgkvKioKCSAqIEEgZG91Ymx5IGxpbmtlZCBsaXN0LWJhc2VkIExlYXN0IFJlY2VudGx5IFVzZWQgKExSVSkgY2FjaGUuIFdpbGwga2VlcCBtb3N0CgkgKiByZWNlbnRseSB1c2VkIGl0ZW1zIHdoaWxlIGRpc2NhcmRpbmcgbGVhc3QgcmVjZW50bHkgdXNlZCBpdGVtcyB3aGVuIGl0cyBsaW1pdAoJICogaXMgcmVhY2hlZC4KCSAqCgkgKiBMaWNlbnNlZCB1bmRlciBNSVQuIENvcHlyaWdodCAoYykgMjAxMCBSYXNtdXMgQW5kZXJzc29uIDxodHRwOi8vaHVuY2guc2UvPgoJICogU2VlIFJFQURNRS5tZCBmb3IgZGV0YWlscy4KCSAqCgkgKiBJbGx1c3RyYXRpb24gb2YgdGhlIGRlc2lnbjoKCSAqCgkgKiAgICAgICBlbnRyeSAgICAgICAgICAgICBlbnRyeSAgICAgICAgICAgICBlbnRyeSAgICAgICAgICAgICBlbnRyeQoJICogICAgICAgX19fX19fICAgICAgICAgICAgX19fX19fICAgICAgICAgICAgX19fX19fICAgICAgICAgICAgX19fX19fCgkgKiAgICAgIHwgaGVhZCB8Lm5ld2VyID0+IHwgICAgICB8Lm5ld2VyID0+IHwgICAgICB8Lm5ld2VyID0+IHwgdGFpbCB8CgkgKiAgICAgIHwgIEEgICB8ICAgICAgICAgIHwgIEIgICB8ICAgICAgICAgIHwgIEMgICB8ICAgICAgICAgIHwgIEQgICB8CgkgKiAgICAgIHxfX19fX198IDw9IG9sZGVyLnxfX19fX198IDw9IG9sZGVyLnxfX19fX198IDw9IG9sZGVyLnxfX19fX198CgkgKgoJICogIHJlbW92ZWQgIDwtLSAgPC0tICA8LS0gIDwtLSAgPC0tICA8LS0gIDwtLSAgPC0tICA8LS0gIDwtLSAgPC0tICBhZGRlZAoJICovCgoJdmFyIE5FV0VSID0gU3ltYm9sKCJuZXdlciIpOwoJdmFyIE9MREVSID0gU3ltYm9sKCJvbGRlciIpOwoKCXZhciBMUlVNYXAgPSBmdW5jdGlvbiBMUlVNYXAobGltaXQsIGVudHJpZXMpIHsKCQlpZiAodHlwZW9mIGxpbWl0ICE9PSAibnVtYmVyIikgewoJCQkvLyBjYWxsZWQgYXMgKGVudHJpZXMpCgkJCWVudHJpZXMgPSBsaW1pdDsKCQkJbGltaXQgPSAwOwoJCX0KCgkJdGhpcy5zaXplID0gMDsKCQl0aGlzLmxpbWl0ID0gbGltaXQ7CgkJdGhpcy5vbGRlc3QgPSB0aGlzLm5ld2VzdCA9IHVuZGVmaW5lZDsKCQl0aGlzLl9rZXltYXAgPSBuZXcgTWFwKCk7CgoJCWlmIChlbnRyaWVzKSB7CgkJCXRoaXMuYXNzaWduKGVudHJpZXMpOwoJCQlpZiAobGltaXQgPCAxKSB7CgkJCQl0aGlzLmxpbWl0ID0gdGhpcy5zaXplOwoJCQl9CgkJfQoJfTsKCglMUlVNYXAucHJvdG90eXBlLl9tYXJrRW50cnlBc1VzZWQgPSBmdW5jdGlvbiBfbWFya0VudHJ5QXNVc2VkIChlbnRyeSkgewoJCWlmIChlbnRyeSA9PT0gdGhpcy5uZXdlc3QpIHsKCQkJLy8gQWxyZWFkeSB0aGUgbW9zdCByZWNlbmx0eSB1c2VkIGVudHJ5LCBzbyBubyBuZWVkIHRvIHVwZGF0ZSB0aGUgbGlzdAoJCQlyZXR1cm47CgkJfQoJCS8vIEhFQUQtLS0tLS0tLS0tLS0tLVRBSUwKCQkvLyAgIDwub2xkZXIgICAubmV3ZXI+CgkJLy8gIDwtLS0gYWRkIGRpcmVjdGlvbiAtLQoJCS8vICAgQSAgQiAgQyAgPEQ+ICBFCgkJaWYgKGVudHJ5W05FV0VSXSkgewoJCQlpZiAoZW50cnkgPT09IHRoaXMub2xkZXN0KSB7CgkJCQl0aGlzLm9sZGVzdCA9IGVudHJ5W05FV0VSXTsKCQkJfQoJCQllbnRyeVtORVdFUl1bT0xERVJdID0gZW50cnlbT0xERVJdOyAvLyBDIDwtLSBFLgoJCX0KCQlpZiAoZW50cnlbT0xERVJdKSB7CgkJCWVudHJ5W09MREVSXVtORVdFUl0gPSBlbnRyeVtORVdFUl07IC8vIEMuIC0tPiBFCgkJfQoJCWVudHJ5W05FV0VSXSA9IHVuZGVmaW5lZDsgLy8gRCAtLXgKCQllbnRyeVtPTERFUl0gPSB0aGlzLm5ld2VzdDsgLy8gRC4gLS0+IEUKCQlpZiAodGhpcy5uZXdlc3QpIHsKCQkJdGhpcy5uZXdlc3RbTkVXRVJdID0gZW50cnk7IC8vIEUuIDwtLSBECgkJfQoJCXRoaXMubmV3ZXN0ID0gZW50cnk7Cgl9OwoKCUxSVU1hcC5wcm90b3R5cGUuYXNzaWduID0gZnVuY3Rpb24gYXNzaWduIChlbnRyaWVzKSB7CgkJdmFyIGVudHJ5LAoJCQlsaW1pdCA9IHRoaXMubGltaXQgfHwgTnVtYmVyLk1BWF9WQUxVRTsKCQl0aGlzLl9rZXltYXAuY2xlYXIoKTsKCQl2YXIgaXQgPSBlbnRyaWVzW1N5bWJvbC5pdGVyYXRvcl0oKTsKCQlmb3IgKHZhciBpdHYgPSBpdC5uZXh0KCk7ICFpdHYuZG9uZTsgaXR2ID0gaXQubmV4dCgpKSB7CgkJCXZhciBlID0gbmV3IEVudHJ5KGl0di52YWx1ZVswXSwgaXR2LnZhbHVlWzFdKTsKCQkJdGhpcy5fa2V5bWFwLnNldChlLmtleSwgZSk7CgkJCWlmICghZW50cnkpIHsKCQkJCXRoaXMub2xkZXN0ID0gZTsKCQkJfSBlbHNlIHsKCQkJCWVudHJ5W05FV0VSXSA9IGU7CgkJCQllW09MREVSXSA9IGVudHJ5OwoJCQl9CgkJCWVudHJ5ID0gZTsKCQkJaWYgKGxpbWl0LS0gPT0gMCkgewoJCQkJdGhyb3cgbmV3IEVycm9yKCJvdmVyZmxvdyIpOwoJCQl9CgkJfQoJCXRoaXMubmV3ZXN0ID0gZW50cnk7CgkJdGhpcy5zaXplID0gdGhpcy5fa2V5bWFwLnNpemU7Cgl9OwoKCUxSVU1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChrZXkpIHsKCQkvLyBGaXJzdCwgZmluZCBvdXIgY2FjaGUgZW50cnkKCQl2YXIgZW50cnkgPSB0aGlzLl9rZXltYXAuZ2V0KGtleSk7CgkJaWYgKCFlbnRyeSkgeyByZXR1cm47IH0gLy8gTm90IGNhY2hlZC4gU29ycnkuCgkJLy8gQXMgPGtleT4gd2FzIGZvdW5kIGluIHRoZSBjYWNoZSwgcmVnaXN0ZXIgaXQgYXMgYmVpbmcgcmVxdWVzdGVkIHJlY2VudGx5CgkJdGhpcy5fbWFya0VudHJ5QXNVc2VkKGVudHJ5KTsKCQlyZXR1cm4gZW50cnkudmFsdWU7Cgl9OwoKCUxSVU1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0IChrZXksIHZhbHVlKSB7CgkJdmFyIGVudHJ5ID0gdGhpcy5fa2V5bWFwLmdldChrZXkpOwoKCQlpZiAoZW50cnkpIHsKCQkJLy8gdXBkYXRlIGV4aXN0aW5nCgkJCWVudHJ5LnZhbHVlID0gdmFsdWU7CgkJCXRoaXMuX21hcmtFbnRyeUFzVXNlZChlbnRyeSk7CgkJCXJldHVybiB0aGlzOwoJCX0KCgkJLy8gbmV3IGVudHJ5CgkJdGhpcy5fa2V5bWFwLnNldChrZXksIChlbnRyeSA9IG5ldyBFbnRyeShrZXksIHZhbHVlKSkpOwoKCQlpZiAodGhpcy5uZXdlc3QpIHsKCQkJLy8gbGluayBwcmV2aW91cyB0YWlsIHRvIHRoZSBuZXcgdGFpbCAoZW50cnkpCgkJCXRoaXMubmV3ZXN0W05FV0VSXSA9IGVudHJ5OwoJCQllbnRyeVtPTERFUl0gPSB0aGlzLm5ld2VzdDsKCQl9IGVsc2UgewoJCQkvLyB3ZSdyZSBmaXJzdCBpbiAtLSB5YXkKCQkJdGhpcy5vbGRlc3QgPSBlbnRyeTsKCQl9CgoJCS8vIGFkZCBuZXcgZW50cnkgdG8gdGhlIGVuZCBvZiB0aGUgbGlua2VkIGxpc3QgLS0gaXQncyBub3cgdGhlIGZyZXNoZXN0IGVudHJ5LgoJCXRoaXMubmV3ZXN0ID0gZW50cnk7CgkJKyt0aGlzLnNpemU7CgkJaWYgKHRoaXMuc2l6ZSA+IHRoaXMubGltaXQpIHsKCQkJLy8gd2UgaGl0IHRoZSBsaW1pdCAtLSByZW1vdmUgdGhlIGhlYWQKCQkJdGhpcy5zaGlmdCgpOwoJCX0KCgkJcmV0dXJuIHRoaXM7Cgl9OwoKCUxSVU1hcC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCAoKSB7CgkJLy8gdG9kbzogaGFuZGxlIHNwZWNpYWwgY2FzZSB3aGVuIGxpbWl0ID09IDEKCQl2YXIgZW50cnkgPSB0aGlzLm9sZGVzdDsKCQlpZiAoZW50cnkpIHsKCQkJaWYgKHRoaXMub2xkZXN0W05FV0VSXSkgewoJCQkJLy8gYWR2YW5jZSB0aGUgbGlzdAoJCQkJdGhpcy5vbGRlc3QgPSB0aGlzLm9sZGVzdFtORVdFUl07CgkJCQl0aGlzLm9sZGVzdFtPTERFUl0gPSB1bmRlZmluZWQ7CgkJCX0gZWxzZSB7CgkJCQkvLyB0aGUgY2FjaGUgaXMgZXhoYXVzdGVkCgkJCQl0aGlzLm9sZGVzdCA9IHVuZGVmaW5lZDsKCQkJCXRoaXMubmV3ZXN0ID0gdW5kZWZpbmVkOwoJCQl9CgkJCS8vIFJlbW92ZSBsYXN0IHN0cm9uZyByZWZlcmVuY2UgdG8gPGVudHJ5PiBhbmQgcmVtb3ZlIGxpbmtzIGZyb20gdGhlIHB1cmdlZAoJCQkvLyBlbnRyeSBiZWluZyByZXR1cm5lZDoKCQkJZW50cnlbTkVXRVJdID0gZW50cnlbT0xERVJdID0gdW5kZWZpbmVkOwoJCQl0aGlzLl9rZXltYXAuZGVsZXRlKGVudHJ5LmtleSk7CgkJCS0tdGhpcy5zaXplOwoJCQlyZXR1cm4gW2VudHJ5LmtleSwgZW50cnkudmFsdWVdOwoJCX0KCX07CgoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJLy8gRm9sbG93aW5nIGNvZGUgKHVudGlsIGVuZCBvZiBjbGFzcyBkZWZpbml0aW9uKSBpcyBvcHRpb25hbCBhbmQgY2FuIGJlIHJlbW92ZWQgd2l0aG91dAoJLy8gYnJlYWtpbmcgdGhlIGNvcmUgZnVuY3Rpb25hbGl0eS4KCglMUlVNYXAucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiBmaW5kIChrZXkpIHsKCQl2YXIgZSA9IHRoaXMuX2tleW1hcC5nZXQoa2V5KTsKCQlyZXR1cm4gZSA/IGUudmFsdWUgOiB1bmRlZmluZWQ7Cgl9OwoKCUxSVU1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHsKCQlyZXR1cm4gdGhpcy5fa2V5bWFwLmhhcyhrZXkpOwoJfTsKCglMUlVNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIGRlbGV0ZSQxIChrZXkpIHsKCQl2YXIgZW50cnkgPSB0aGlzLl9rZXltYXAuZ2V0KGtleSk7CgkJaWYgKCFlbnRyeSkgeyByZXR1cm47IH0KCQl0aGlzLl9rZXltYXAuZGVsZXRlKGVudHJ5LmtleSk7CgkJaWYgKGVudHJ5W05FV0VSXSAmJiBlbnRyeVtPTERFUl0pIHsKCQkJLy8gcmVsaW5rIHRoZSBvbGRlciBlbnRyeSB3aXRoIHRoZSBuZXdlciBlbnRyeQoJCQllbnRyeVtPTERFUl1bTkVXRVJdID0gZW50cnlbTkVXRVJdOwoJCQllbnRyeVtORVdFUl1bT0xERVJdID0gZW50cnlbT0xERVJdOwoJCX0gZWxzZSBpZiAoZW50cnlbTkVXRVJdKSB7CgkJCS8vIHJlbW92ZSB0aGUgbGluayB0byB1cwoJCQllbnRyeVtORVdFUl1bT0xERVJdID0gdW5kZWZpbmVkOwoJCQkvLyBsaW5rIHRoZSBuZXdlciBlbnRyeSB0byBoZWFkCgkJCXRoaXMub2xkZXN0ID0gZW50cnlbTkVXRVJdOwoJCX0gZWxzZSBpZiAoZW50cnlbT0xERVJdKSB7CgkJCS8vIHJlbW92ZSB0aGUgbGluayB0byB1cwoJCQllbnRyeVtPTERFUl1bTkVXRVJdID0gdW5kZWZpbmVkOwoJCQkvLyBsaW5rIHRoZSBuZXdlciBlbnRyeSB0byBoZWFkCgkJCXRoaXMubmV3ZXN0ID0gZW50cnlbT0xERVJdOwoJCX0gZWxzZSB7CgkJCS8vIGlmKGVudHJ5W09MREVSXSA9PT0gdW5kZWZpbmVkICYmIGVudHJ5Lm5ld2VyID09PSB1bmRlZmluZWQpIHsKCQkJdGhpcy5vbGRlc3QgPSB0aGlzLm5ld2VzdCA9IHVuZGVmaW5lZDsKCQl9CgoJCXRoaXMuc2l6ZS0tOwoJCXJldHVybiBlbnRyeS52YWx1ZTsKCX07CgoJTFJVTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHsKCQkvLyBOb3QgY2xlYXJpbmcgbGlua3Mgc2hvdWxkIGJlIHNhZmUsIGFzIHdlIGRvbid0IGV4cG9zZSBsaXZlIGxpbmtzIHRvIHVzZXIKCQl0aGlzLm9sZGVzdCA9IHRoaXMubmV3ZXN0ID0gdW5kZWZpbmVkOwoJCXRoaXMuc2l6ZSA9IDA7CgkJdGhpcy5fa2V5bWFwLmNsZWFyKCk7Cgl9OwoKCUxSVU1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uIGtleXMgKCkgewoJCXJldHVybiBuZXcgS2V5SXRlcmF0b3IodGhpcy5vbGRlc3QpOwoJfTsKCglMUlVNYXAucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcyAoKSB7CgkJcmV0dXJuIG5ldyBWYWx1ZUl0ZXJhdG9yKHRoaXMub2xkZXN0KTsKCX07CgoJTFJVTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gZW50cmllcyAoKSB7CgkJcmV0dXJuIHRoaXM7Cgl9OwoKCUxSVU1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsKCQlyZXR1cm4gbmV3IEVudHJ5SXRlcmF0b3IodGhpcy5vbGRlc3QpOwoJfTsKCglMUlVNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoIChmdW4sIHRoaXNPYmopIHsKCQlpZiAodHlwZW9mIHRoaXNPYmogIT09ICJvYmplY3QiKSB7CgkJCXRoaXNPYmogPSB0aGlzOwoJCX0KCQl2YXIgZW50cnkgPSB0aGlzLm9sZGVzdDsKCQl3aGlsZSAoZW50cnkpIHsKCQkJZnVuLmNhbGwodGhpc09iaiwgZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7CgkJCWVudHJ5ID0gZW50cnlbTkVXRVJdOwoJCX0KCX07CgoJLyoqIFJldHVybnMgYSBKU09OIChhcnJheSkgcmVwcmVzZW50YXRpb24gKi8KCUxSVU1hcC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHsKCQl2YXIgcyA9IG5ldyBBcnJheSh0aGlzLnNpemUpLAoJCQlpID0gMCwKCQkJZW50cnkgPSB0aGlzLm9sZGVzdDsKCQl3aGlsZSAoZW50cnkpIHsKCQkJc1tpKytdID0geyBrZXk6IGVudHJ5LmtleSwgdmFsdWU6IGVudHJ5LnZhbHVlIH07CgkJCWVudHJ5ID0gZW50cnlbTkVXRVJdOwoJCX0KCQlyZXR1cm4gczsKCX07CgoJLyoqIFJldHVybnMgYSBTdHJpbmcgcmVwcmVzZW50YXRpb24gKi8KCUxSVU1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7CgkJdmFyIHMgPSAiIiwKCQkJZW50cnkgPSB0aGlzLm9sZGVzdDsKCQl3aGlsZSAoZW50cnkpIHsKCQkJcyArPSBTdHJpbmcoZW50cnkua2V5KSArICI6IiArIGVudHJ5LnZhbHVlOwoJCQllbnRyeSA9IGVudHJ5W05FV0VSXTsKCQkJaWYgKGVudHJ5KSB7CgkJCQlzICs9ICIgPCAiOwoJCQl9CgkJfQoJCXJldHVybiBzOwoJfTsKCglmdW5jdGlvbiBFbnRyeShrZXksIHZhbHVlKSB7CgkJdGhpcy5rZXkgPSBrZXk7CgkJdGhpcy52YWx1ZSA9IHZhbHVlOwoJCXRoaXNbTkVXRVJdID0gdW5kZWZpbmVkOwoJCXRoaXNbT0xERVJdID0gdW5kZWZpbmVkOwoJfQoKCWZ1bmN0aW9uIEVudHJ5SXRlcmF0b3Iob2xkZXN0RW50cnkpIHsKCQl0aGlzLmVudHJ5ID0gb2xkZXN0RW50cnk7Cgl9CglFbnRyeUl0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgewoJCXJldHVybiB0aGlzOwoJfTsKCUVudHJ5SXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7CgkJdmFyIGVudCA9IHRoaXMuZW50cnk7CgkJaWYgKGVudCkgewoJCQl0aGlzLmVudHJ5ID0gZW50W05FV0VSXTsKCQkJcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBbZW50LmtleSwgZW50LnZhbHVlXSB9OwoJCX0gZWxzZSB7CgkJCXJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTsKCQl9Cgl9OwoKCWZ1bmN0aW9uIEtleUl0ZXJhdG9yKG9sZGVzdEVudHJ5KSB7CgkJdGhpcy5lbnRyeSA9IG9sZGVzdEVudHJ5OwoJfQoJS2V5SXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuIHRoaXM7Cgl9OwoJS2V5SXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7CgkJdmFyIGVudCA9IHRoaXMuZW50cnk7CgkJaWYgKGVudCkgewoJCQl0aGlzLmVudHJ5ID0gZW50W05FV0VSXTsKCQkJcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBlbnQua2V5IH07CgkJfSBlbHNlIHsKCQkJcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9OwoJCX0KCX07CgoJZnVuY3Rpb24gVmFsdWVJdGVyYXRvcihvbGRlc3RFbnRyeSkgewoJCXRoaXMuZW50cnkgPSBvbGRlc3RFbnRyeTsKCX0KCVZhbHVlSXRlcmF0b3IucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7CgkJcmV0dXJuIHRoaXM7Cgl9OwoJVmFsdWVJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHsKCQl2YXIgZW50ID0gdGhpcy5lbnRyeTsKCQlpZiAoZW50KSB7CgkJCXRoaXMuZW50cnkgPSBlbnRbTkVXRVJdOwoJCQlyZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IGVudC52YWx1ZSB9OwoJCX0gZWxzZSB7CgkJCXJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTsKCQl9Cgl9OwoKCS8vIEdvb2dsZU11dGFudCBieSBJdsOhbiBTw6FuY2hleiBPcnRlZ2EgPGl2YW5Ac2FuY2hlem9ydGVnYS5lcz4KCglmdW5jdGlvbiB3YWl0Rm9yQVBJKGNhbGxiYWNrLCBjb250ZXh0KSB7CgkJdmFyIGNoZWNrQ291bnRlciA9IDAsCgkJCWludGVydmFsSWQgPSBudWxsOwoKCQlpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewoJCQlpZiAoY2hlY2tDb3VudGVyID49IDIwKSB7CgkJCQljbGVhckludGVydmFsKGludGVydmFsSWQpOwoJCQkJdGhyb3cgbmV3IEVycm9yKCJ3aW5kb3cuZ29vZ2xlIG5vdCBmb3VuZCBhZnRlciAxMCBzZWNvbmRzIik7CgkJCX0KCQkJaWYgKCEhd2luZG93Lmdvb2dsZSAmJiAhIXdpbmRvdy5nb29nbGUubWFwcyAmJiAhIXdpbmRvdy5nb29nbGUubWFwcy5NYXApIHsKCQkJCWNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7CgkJCQljYWxsYmFjay5jYWxsKGNvbnRleHQpOwoJCQl9CgkJCSsrY2hlY2tDb3VudGVyOwoJCX0sIDUwMCk7Cgl9CgoJLy8g8J+NgmNsYXNzIEdyaWRMYXllci5Hb29nbGVNdXRhbnQKCS8vIPCfjYJleHRlbmRzIEdyaWRMYXllcgoJTC5HcmlkTGF5ZXIuR29vZ2xlTXV0YW50ID0gTC5HcmlkTGF5ZXIuZXh0ZW5kKHsKCQlvcHRpb25zOiB7CgkJCW1heFpvb206IDIxLCAvLyBjYW4gYmUgMjMsIGJ1dCB1Z2x5IGlmIG1vcmUgdGhhbiBtYXhOYXRpdmVab29tCgkJCS8vIPCfjYJvcHRpb24gdHlwZTogU3RyaW5nID0gJ3JvYWRtYXAnCgkJCS8vIEdvb2dsZSdzIG1hcCB0eXBlLiBWYWxpZCB2YWx1ZXMgYXJlICdyb2FkbWFwJywgJ3NhdGVsbGl0ZScsICd0ZXJyYWluJyBvciAnaHlicmlkJy4KCQkJdHlwZTogInJvYWRtYXAiLAoJCQltYXhOYXRpdmVab29tOiAyMSwKCQl9LAoKCQlpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykgewoJCQlMLkdyaWRMYXllci5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIG9wdGlvbnMpOwoKCQkJLy8gQ291cGxlIGRhdGEgc3RydWN0dXJlcyBpbmRleGVkIGJ5IHRpbGUga2V5CgkJCXRoaXMuX3RpbGVDYWxsYmFja3MgPSB7fTsgLy8gQ2FsbGJhY2tzIGZvciBwcm9taXNlcyBmb3IgdGlsZXMgdGhhdCBhcmUgZXhwZWN0ZWQKCQkJdGhpcy5fbHJ1ID0gbmV3IExSVU1hcCgxMDApOyAvLyBUaWxlIExSVSBjYWNoZQoKCQkJdGhpcy5faW1hZ2VzUGVyVGlsZSA9IHRoaXMub3B0aW9ucy50eXBlID09PSAiaHlicmlkIiA/IDIgOiAxOwoKCQkJdGhpcy5fYm91bmRPbk11dGF0ZWRJbWFnZSA9IHRoaXMuX29uTXV0YXRlZEltYWdlLmJpbmQodGhpcyk7CgkJfSwKCgkJb25BZGQ6IGZ1bmN0aW9uIChtYXApIHsKCQkJdmFyIHRoaXMkMSQxID0gdGhpczsKCgkJCUwuR3JpZExheWVyLnByb3RvdHlwZS5vbkFkZC5jYWxsKHRoaXMsIG1hcCk7CgkJCXRoaXMuX2luaXRNdXRhbnRDb250YWluZXIoKTsKCgkJCS8vIEF0dHJpYnV0aW9uIGFuZCBsb2dvIG5vZGVzIGFyZSBub3QgbXV0YXRlZCBhIHNlY29uZCB0aW1lIGlmIHRoZQoJCQkvLyBtdXRhbnQgaXMgcmVtb3ZlZCBhbmQgcmUtYWRkZWQgdG8gdGhlIG1hcCwgaGVuY2UgdGhleSBhcmUKCQkJLy8gbm90IGNsZWFuZWQgdXAgb24gbGF5ZXIgcmVtb3ZhbCwgc28gdGhleSBjYW4gYmUgYWRkZWQgaGVyZS4KCQkJaWYgKHRoaXMuX2xvZ29Db250YWluZXIpIHsKCQkJCW1hcC5fY29udHJvbENvcm5lcnMuYm90dG9tbGVmdC5hcHBlbmRDaGlsZCh0aGlzLl9sb2dvQ29udGFpbmVyKTsKCQkJfQoJCQlpZiAodGhpcy5fYXR0cmlidXRpb25Db250YWluZXIpIHsKCQkJCW1hcC5fY29udHJvbENvcm5lcnMuYm90dG9tcmlnaHQuYXBwZW5kQ2hpbGQodGhpcy5fYXR0cmlidXRpb25Db250YWluZXIpOwoJCQl9CgoJCQl3YWl0Rm9yQVBJKGZ1bmN0aW9uICgpIHsKCQkJCWlmICghdGhpcyQxJDEuX21hcCkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJCXRoaXMkMSQxLl9pbml0TXV0YW50KCk7CgoJCQkJLy9oYW5kbGUgbGF5ZXIgYmVpbmcgYWRkZWQgdG8gYSBtYXAgZm9yIHdoaWNoIHRoZXJlIGFyZSBubyBHb29nbGUgdGlsZXMgYXQgdGhlIGdpdmVuIHpvb20KCQkJCWdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyT25jZSh0aGlzJDEkMS5fbXV0YW50LCAiaWRsZSIsIGZ1bmN0aW9uICgpIHsKCQkJCQlpZiAoIXRoaXMkMSQxLl9tYXApIHsKCQkJCQkJcmV0dXJuOwoJCQkJCX0KCQkJCQl0aGlzJDEkMS5fY2hlY2tab29tTGV2ZWxzKCk7CgkJCQkJdGhpcyQxJDEuX211dGFudElzUmVhZHkgPSB0cnVlOwoJCQkJfSk7CgkJCX0pOwoJCX0sCgoJCW9uUmVtb3ZlOiBmdW5jdGlvbiAobWFwKSB7CgkJCUwuR3JpZExheWVyLnByb3RvdHlwZS5vblJlbW92ZS5jYWxsKHRoaXMsIG1hcCk7CgkJCXRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTsKCQkJbWFwLl9jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fbXV0YW50Q29udGFpbmVyKTsKCQkJaWYgKHRoaXMuX2xvZ29Db250YWluZXIpIHsKCQkJCUwuRG9tVXRpbC5yZW1vdmUodGhpcy5fbG9nb0NvbnRhaW5lcik7CgkJCX0KCQkJaWYgKHRoaXMuX2F0dHJpYnV0aW9uQ29udGFpbmVyKSB7CgkJCQlMLkRvbVV0aWwucmVtb3ZlKHRoaXMuX2F0dHJpYnV0aW9uQ29udGFpbmVyKTsKCQkJfQoJCQlpZiAodGhpcy5fbXV0YW50KSB7CgkJCQlnb29nbGUubWFwcy5ldmVudC5jbGVhckxpc3RlbmVycyh0aGlzLl9tdXRhbnQsICJpZGxlIik7CgkJCX0KCQl9LAoKCQkvLyDwn42CbWV0aG9kIGFkZEdvb2dsZUxheWVyKG5hbWU6IFN0cmluZywgb3B0aW9ucz86IE9iamVjdCk6IHRoaXMKCQkvLyBBZGRzIGxheWVyIHdpdGggdGhlIGdpdmVuIG5hbWUgYW5kIG9wdGlvbnMgdG8gdGhlIGdvb2dsZSBNYXAgaW5zdGFuY2UuCgkJLy8gYG5hbWVgOiBvbmUgb2YgdGhlIGdvb2dsZSBtYXBzIEFQSSBsYXllcnMsIHdpdGggaXQncyBjb25zdHJ1Y3RvciBhdmFpbGFibGUgaW4gYGdvb2dsZS5tYXBzYCBvYmplY3QuCgkJLy8gY3VycmVudGx5IGZvbGxvd2luZyB2YWx1ZXMgc3VwcG9ydGVkOiAnVHJhZmZpY0xheWVyJywgJ1RyYW5zaXRMYXllcicsICdCaWN5Y2xpbmdMYXllcicuCgkJLy8gYG9wdGlvbnNgOiBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWFwcy9kb2N1bWVudGF0aW9uL2phdmFzY3JpcHQvcmVmZXJlbmNlL21hcAoJCWFkZEdvb2dsZUxheWVyOiBmdW5jdGlvbiAoZ29vZ2xlTGF5ZXJOYW1lLCBvcHRpb25zKSB7CgkJCXZhciB0aGlzJDEkMSA9IHRoaXM7CgoJCQlpZiAoIXRoaXMuX3N1YkxheWVycykgeyB0aGlzLl9zdWJMYXllcnMgPSB7fTsgfQoJCQl0aGlzLndoZW5SZWFkeShmdW5jdGlvbiAoKSB7CgkJCQl2YXIgQ29uc3RydWN0b3IgPSBnb29nbGUubWFwc1tnb29nbGVMYXllck5hbWVdOwoJCQkJdmFyIGdvb2dsZUxheWVyID0gbmV3IENvbnN0cnVjdG9yKG9wdGlvbnMpOwoJCQkJZ29vZ2xlTGF5ZXIuc2V0TWFwKHRoaXMkMSQxLl9tdXRhbnQpOwoJCQkJdGhpcyQxJDEuX3N1YkxheWVyc1tnb29nbGVMYXllck5hbWVdID0gZ29vZ2xlTGF5ZXI7CgkJCX0pOwoJCQlyZXR1cm4gdGhpczsKCQl9LAoKCQkvLyDwn42CbWV0aG9kIHJlbW92ZUdvb2dsZUxheWVyKG5hbWU6IFN0cmluZyk6IHRoaXMKCQkvLyBSZW1vdmVzIGxheWVyIHdpdGggdGhlIGdpdmVuIG5hbWUgZnJvbSB0aGUgZ29vZ2xlIE1hcCBpbnN0YW5jZS4KCQlyZW1vdmVHb29nbGVMYXllcjogZnVuY3Rpb24gKGdvb2dsZUxheWVyTmFtZSkgewoJCQl2YXIgdGhpcyQxJDEgPSB0aGlzOwoKCQkJdGhpcy53aGVuUmVhZHkoZnVuY3Rpb24gKCkgewoJCQkJdmFyIGdvb2dsZUxheWVyID0gdGhpcyQxJDEuX3N1YkxheWVycyAmJiB0aGlzJDEkMS5fc3ViTGF5ZXJzW2dvb2dsZUxheWVyTmFtZV07CgkJCQlpZiAoZ29vZ2xlTGF5ZXIpIHsKCQkJCQlnb29nbGVMYXllci5zZXRNYXAobnVsbCk7CgkJCQkJZGVsZXRlIHRoaXMkMSQxLl9zdWJMYXllcnNbZ29vZ2xlTGF5ZXJOYW1lXTsKCQkJCX0KCQkJfSk7CgkJCXJldHVybiB0aGlzOwoJCX0sCgoJCV9pbml0TXV0YW50Q29udGFpbmVyOiBmdW5jdGlvbiAoKSB7CgkJCWlmICghdGhpcy5fbXV0YW50Q29udGFpbmVyKSB7CgkJCQl0aGlzLl9tdXRhbnRDb250YWluZXIgPSBMLkRvbVV0aWwuY3JlYXRlKAoJCQkJCSJkaXYiLAoJCQkJCSJsZWFmbGV0LWdvb2dsZS1tdXRhbnQgbGVhZmxldC10b3AgbGVhZmxldC1sZWZ0IgoJCQkJKTsKCQkJCXRoaXMuX211dGFudENvbnRhaW5lci5pZCA9ICJfTXV0YW50Q29udGFpbmVyXyIgKyBMLlV0aWwuc3RhbXAodGhpcy5fbXV0YW50Q29udGFpbmVyKTsKCQkJCXRoaXMuX211dGFudENvbnRhaW5lci5zdHlsZS5wb2ludGVyRXZlbnRzID0gIm5vbmUiOwoJCQkJdGhpcy5fbXV0YW50Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAiaGlkZGVuIjsKCgkJCQlMLkRvbUV2ZW50Lm9mZih0aGlzLl9tdXRhbnRDb250YWluZXIpOwoJCQl9CgkJCXRoaXMuX21hcC5nZXRDb250YWluZXIoKS5hcHBlbmRDaGlsZCh0aGlzLl9tdXRhbnRDb250YWluZXIpOwoKCQkJdGhpcy5zZXRPcGFjaXR5KHRoaXMub3B0aW9ucy5vcGFjaXR5KTsKCQkJdmFyIHN0eWxlID0gdGhpcy5fbXV0YW50Q29udGFpbmVyLnN0eWxlOwoJCQlpZiAodGhpcy5fbWFwLm9wdGlvbnMuem9vbVNuYXAgPCAxKSB7CgkJCQkvLyBGcmFjdGlvbmFsIHpvb20gbmVlZHMgYSBiaWdnZXIgbXV0YW50IGNvbnRhaW5lciBpbiBvcmRlciB0byBsb2FkIG1vcmUgKHNtYWxsZXIpIHRpbGVzCgkJCQlzdHlsZS53aWR0aCA9ICIxODAlIjsKCQkJCXN0eWxlLmhlaWdodCA9ICIxODAlIjsKCQkJfSBlbHNlIHsKCQkJCXN0eWxlLndpZHRoID0gIjEwMCUiOwoJCQkJc3R5bGUuaGVpZ2h0ID0gIjEwMCUiOwoJCQl9CgkJCXN0eWxlLnpJbmRleCA9IC0xOwoKCQkJdGhpcy5fYXR0YWNoT2JzZXJ2ZXIodGhpcy5fbXV0YW50Q29udGFpbmVyKTsKCQl9LAoKCQlfaW5pdE11dGFudDogZnVuY3Rpb24gKCkgewoJCQlpZiAodGhpcy5fbXV0YW50KSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCXZhciBvcHRpb25zID0gewoJCQkJY2VudGVyOiB7IGxhdDogMCwgbG5nOiAwIH0sCgkJCQl6b29tOiAwLAoJCQkJdGlsdDogMCwKCQkJCW1hcFR5cGVJZDogdGhpcy5vcHRpb25zLnR5cGUsCgkJCQlkaXNhYmxlRGVmYXVsdFVJOiB0cnVlLAoJCQkJa2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlLAoJCQkJZHJhZ2dhYmxlOiBmYWxzZSwKCQkJCWRpc2FibGVEb3VibGVDbGlja1pvb206IHRydWUsCgkJCQlzY3JvbGx3aGVlbDogZmFsc2UsCgkJCQlzdHlsZXM6IHRoaXMub3B0aW9ucy5zdHlsZXMgfHwgW10sCgkJCQliYWNrZ3JvdW5kQ29sb3I6ICJ0cmFuc3BhcmVudCIsCgkJCX07CgkJCWlmICh0aGlzLm9wdGlvbnMubWFwSWQgIT0gbnVsbCkgewoJCQkJb3B0aW9ucy5tYXBJZCA9IHRoaXMub3B0aW9ucy5tYXBJZDsKCQkJfQoJCQl2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcCh0aGlzLl9tdXRhbnRDb250YWluZXIsIG9wdGlvbnMpOwoKCQkJdGhpcy5fbXV0YW50ID0gbWFwOwoKCQkJdGhpcy5fdXBkYXRlKCk7CgoJCQkvLyDwn42CZXZlbnQgc3Bhd25lZAoJCQkvLyBGaXJlZCB3aGVuIHRoZSBtdXRhbnQgaGFzIGJlZW4gY3JlYXRlZC4KCQkJdGhpcy5maXJlKCJzcGF3bmVkIiwgeyBtYXBPYmplY3Q6IG1hcCB9KTsKCgkJCXRoaXMuX3dhaXRDb250cm9scygpOwoJCQl0aGlzLm9uY2UoJ2NvbnRyb2xzX3JlYWR5JywgdGhpcy5fc2V0dXBBdHRyaWJ1dGlvbik7CgkJfSwKCgkJX2F0dGFjaE9ic2VydmVyOiBmdW5jdGlvbiBfYXR0YWNoT2JzZXJ2ZXIobm9kZSkgewoJCQlpZiAoIXRoaXMuX29ic2VydmVyKSB7IHRoaXMuX29ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5fb25NdXRhdGlvbnMuYmluZCh0aGlzKSk7IH0KCgkJCS8vIHBhc3MgaW4gdGhlIHRhcmdldCBub2RlLCBhcyB3ZWxsIGFzIHRoZSBvYnNlcnZlciBvcHRpb25zCgkJCXRoaXMuX29ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7CgoJCQkvLyBpZiB3ZSBhcmUgcmV1c2luZyBhbiBvbGQgX211dGFudENvbnRhaW5lciwgd2UgbXVzdCBtYW51YWxseSBkZXRlY3QKCQkJLy8gYWxsIGV4aXN0aW5nIHRpbGVzIGluIGl0CgkJCUFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobm9kZS5xdWVyeVNlbGVjdG9yQWxsKCJpbWciKSwgdGhpcy5fYm91bmRPbk11dGF0ZWRJbWFnZSk7CgkJfSwKCgkJX3dhaXRDb250cm9sczogZnVuY3Rpb24gKCkgewoJCQl2YXIgdGhpcyQxJDEgPSB0aGlzOwoKCQkJdmFyIGlkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewoJCQkJdmFyIGxheW91dE1hbmFnZXIgPSB0aGlzJDEkMS5fbXV0YW50Ll9fZ20ubGF5b3V0TWFuYWdlcjsKCQkJCWlmICghbGF5b3V0TWFuYWdlcikgeyByZXR1cm47IH0KCQkJCWNsZWFySW50ZXJ2YWwoaWQpOwoJCQkJdmFyIHBvc2l0aW9uczsKCQkJCS8vIGl0ZXJhdGUgdGhyb3VnaCBvYmZ1c2NhdGVkIGtleSBuYW1lcyB0byBmaW5kIHBvc2l0aW9ucyBzZXQgKGF0bTogbGF5b3V0TWFuYWdlci5vKQoJCQkJT2JqZWN0LmtleXMobGF5b3V0TWFuYWdlcikuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKCQkJCQl2YXIgZWwgPSBsYXlvdXRNYW5hZ2VyW2tleV07CgkJCQkJaWYgKGVsLmdldCkgewoJCQkJCQlpZiAoZWwuZ2V0KDEpIGluc3RhbmNlb2YgTm9kZSkgewoJCQkJCQkJcG9zaXRpb25zID0gZWw7CgkJCQkJCX0KCQkJCQl9CgkJCQl9KTsKCQkJCS8vIPCfjYJldmVudCBjb250cm9sc19yZWFkeQoJCQkJLy8gRmlyZWQgd2hlbiBjb250cm9scyBwb3NpdGlvbnMgZ2V0IGF2YWlsYWJsZSAocGFzc2VkIGluIGBwb3NpdGlvbnNgIHByb3BlcnR5KS4KCQkJCXRoaXMkMSQxLmZpcmUoImNvbnRyb2xzX3JlYWR5IiwgeyBwb3NpdGlvbnM6IHBvc2l0aW9ucyB9KTsKCQkJfSwgNTApOwoJCX0sCgoJCV9zZXR1cEF0dHJpYnV0aW9uOiBmdW5jdGlvbiAoZXYpIHsKCQkJaWYgKCF0aGlzLl9tYXApIHsKCQkJCXJldHVybjsKCQkJfQoJCQkvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tYXBzL2RvY3VtZW50YXRpb24vamF2YXNjcmlwdC9yZWZlcmVuY2UvY29udHJvbCNDb250cm9sUG9zaXRpb24KCQkJdmFyIHBvcyA9IGdvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbjsKCQkJdmFyIGN0ciA9IHRoaXMuX2F0dHJpYnV0aW9uQ29udGFpbmVyID0gZXYucG9zaXRpb25zLmdldChwb3MuQk9UVE9NX1JJR0hUKTsKCQkJTC5Eb21VdGlsLmFkZENsYXNzKGN0ciwgImxlYWZsZXQtY29udHJvbCBsZWFmbGV0LWNvbnRyb2wtYXR0cmlidXRpb24iKTsKCQkJTC5Eb21FdmVudC5kaXNhYmxlQ2xpY2tQcm9wYWdhdGlvbihjdHIpOwoJCQljdHIuc3R5bGUuaGVpZ2h0ID0gIjE0cHgiOwoJCQl0aGlzLl9tYXAuX2NvbnRyb2xDb3JuZXJzLmJvdHRvbXJpZ2h0LmFwcGVuZENoaWxkKGN0cik7CgoJCQl0aGlzLl9sb2dvQ29udGFpbmVyID0gZXYucG9zaXRpb25zLmdldChwb3MuQk9UVE9NX0xFRlQpOwoJCQl0aGlzLl9sb2dvQ29udGFpbmVyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAiYXV0byI7CgkJCXRoaXMuX21hcC5fY29udHJvbENvcm5lcnMuYm90dG9tbGVmdC5hcHBlbmRDaGlsZCh0aGlzLl9sb2dvQ29udGFpbmVyKTsKCQl9LAoKCQlfb25NdXRhdGlvbnM6IGZ1bmN0aW9uIF9vbk11dGF0aW9ucyhtdXRhdGlvbnMpIHsKCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyArK2kpIHsKCQkJCXZhciBtdXRhdGlvbiA9IG11dGF0aW9uc1tpXTsKCQkJCWZvciAodmFyIGogPSAwOyBqIDwgbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGg7ICsraikgewoJCQkJCXZhciBub2RlID0gbXV0YXRpb24uYWRkZWROb2Rlc1tqXTsKCgkJCQkJaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7CgkJCQkJCXRoaXMuX29uTXV0YXRlZEltYWdlKG5vZGUpOwoJCQkJCX0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7CgkJCQkJCUFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoCgkJCQkJCQlub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoImltZyIpLAoJCQkJCQkJdGhpcy5fYm91bmRPbk11dGF0ZWRJbWFnZQoJCQkJCQkpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0sCgoJCS8vIE9ubHkgaW1hZ2VzIHdoaWNoICdzcmMnIGF0dHJpYiBtYXRjaCB0aGlzIHdpbGwgYmUgY29uc2lkZXJlZCBmb3IgbW92aW5nIGFyb3VuZC4KCQkvLyBMb29rcyBsaWtlIHNvbWUga2luZCBvZiBzdHJpbmctYmFzZWQgcHJvdG9idWYsIG1heWJlPz8KCQkvLyBPbmx5IHRoZSByb2FkcyAoYW5kIHRlcnJhaW4sIGFuZCB2ZWN0b3ItYmFzZWQgc3R1ZmYpIG1hdGNoIHRoaXMgcGF0dGVybgoJCV9yb2FkUmVnZXhwOiAvITFpKFxkKykhMmkoXGQrKSEzaShcZCt8VmluYUZuYXB1cm1CZWdydG4pIS8sCgoJCS8vIE9uIHRoZSBvdGhlciBoYW5kLCByYXN0ZXIgaW1hZ2VyeSBtYXRjaGVzIHRoaXMgb3RoZXIgcGF0dGVybgoJCV9zYXRSZWdleHA6IC94PShcZCspJnk9KFxkKykmej0oXGQrfFZpbmFGbmFwdXJtQmVncnRuKS8sCgoJCV9vbk11dGF0ZWRJbWFnZTogZnVuY3Rpb24gX29uTXV0YXRlZEltYWdlKGltZ05vZGUpIHsKCQkJdmFyIGNvb3JkczsKCQkJdmFyIG1hdGNoID0gaW1nTm9kZS5zcmMubWF0Y2godGhpcy5fcm9hZFJlZ2V4cCk7CgkJCXZhciBzdWJsYXllciA9IDA7CgoJCQlpZiAobWF0Y2gpIHsKCQkJCWNvb3JkcyA9IHsKCQkJCQl6OiBtYXRjaFsxXSwKCQkJCQl4OiBtYXRjaFsyXSwKCQkJCQl5OiBtYXRjaFszXSwKCQkJCX07CgkJCQlpZiAodGhpcy5faW1hZ2VzUGVyVGlsZSA+IDEpIHsKCQkJCQlpbWdOb2RlLnN0eWxlLnpJbmRleCA9IDE7CgkJCQkJc3VibGF5ZXIgPSAxOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJbWF0Y2ggPSBpbWdOb2RlLnNyYy5tYXRjaCh0aGlzLl9zYXRSZWdleHApOwoJCQkJaWYgKG1hdGNoKSB7CgkJCQkJY29vcmRzID0gewoJCQkJCQl4OiBtYXRjaFsxXSwKCQkJCQkJeTogbWF0Y2hbMl0sCgkJCQkJCXo6IG1hdGNoWzNdLAoJCQkJCX07CgkJCQl9CgkJCQkvLyBpbWdOb2RlLnN0eWxlLnpJbmRleCA9IDA7CgkJCQlzdWJsYXllciA9IDA7CgkJCX0KCgkJCWlmIChjb29yZHMpIHsKCQkJCXZhciB0aWxlS2V5ID0gdGhpcy5fdGlsZUNvb3Jkc1RvS2V5KGNvb3Jkcyk7CgkJCQlpbWdOb2RlLnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKCgkJCQl2YXIga2V5ID0gdGlsZUtleSArICIvIiArIHN1YmxheWVyOwoJCQkJLy8gQ2FjaGUgaW1nIHNvIGl0IGNhbiBhbHNvIGJlIHVzZWQgaW4gc3Vic2VxdWVudCB0aWxlIHJlcXVlc3RzCgkJCQl0aGlzLl9scnUuc2V0KGtleSwgaW1nTm9kZSk7CgoJCQkJaWYgKGtleSBpbiB0aGlzLl90aWxlQ2FsbGJhY2tzICYmIHRoaXMuX3RpbGVDYWxsYmFja3Nba2V5XSkgewoJCQkJCS8vIFVzZSB0aGUgdGlsZSBmb3IgKmFsbCogcGVuZGluZyBjYWxsYmFja3MuIFRoZXknbGwgYmUgY2xvbmVkIGFueXdheS4KCQkJCQl0aGlzLl90aWxlQ2FsbGJhY2tzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIGNhbGxiYWNrKGltZ05vZGUpOyB9KTsKCQkJCQlkZWxldGUgdGhpcy5fdGlsZUNhbGxiYWNrc1trZXldOwoJCQkJfQoJCQl9CgkJfSwKCgkJY3JlYXRlVGlsZTogZnVuY3Rpb24gKGNvb3JkcywgZG9uZSkgewoJCQl2YXIga2V5ID0gdGhpcy5fdGlsZUNvb3Jkc1RvS2V5KGNvb3JkcyksCgkJCQl0aWxlQ29udGFpbmVyID0gTC5Eb21VdGlsLmNyZWF0ZSgiZGl2Iik7CgoJCQl0aWxlQ29udGFpbmVyLnN0eWxlLnRleHRBbGlnbiA9ICJsZWZ0IjsKCQkJdGlsZUNvbnRhaW5lci5kYXRhc2V0LnBlbmRpbmcgPSB0aGlzLl9pbWFnZXNQZXJUaWxlOwoJCQlkb25lID0gZG9uZS5iaW5kKHRoaXMsIG51bGwsIHRpbGVDb250YWluZXIpOwoKCQkJZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9pbWFnZXNQZXJUaWxlOyArK2kpIHsKCQkJCXZhciBrZXkyID0ga2V5ICsgIi8iICsgaSwKCQkJCQlpbWdOb2RlID0gdGhpcy5fbHJ1LmdldChrZXkyKTsKCQkJCWlmIChpbWdOb2RlKSB7CgkJCQkJdGlsZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9jbG9uZShpbWdOb2RlKSk7CgkJCQkJLS10aWxlQ29udGFpbmVyLmRhdGFzZXQucGVuZGluZzsKCQkJCX0gZWxzZSB7CgkJCQkJdGhpcy5fdGlsZUNhbGxiYWNrc1trZXkyXSA9IHRoaXMuX3RpbGVDYWxsYmFja3Nba2V5Ml0gfHwgW107CgkJCQkJdGhpcy5fdGlsZUNhbGxiYWNrc1trZXkyXS5wdXNoKAoJCQkJCQlmdW5jdGlvbiAoYyAvKiwgazIqLykgewoJCQkJCQkJcmV0dXJuIGZ1bmN0aW9uIChpbWdOb2RlKSB7CgkJCQkJCQkJYy5hcHBlbmRDaGlsZCh0aGlzLl9jbG9uZShpbWdOb2RlKSk7CgkJCQkJCQkJLS1jLmRhdGFzZXQucGVuZGluZzsKCQkJCQkJCQlpZiAoIXBhcnNlSW50KGMuZGF0YXNldC5wZW5kaW5nKSkgewoJCQkJCQkJCQlkb25lKCk7CgkJCQkJCQkJfQoJCQkJCQkJfS5iaW5kKHRoaXMpOwoJCQkJCQl9LmJpbmQodGhpcykodGlsZUNvbnRhaW5lciAvKiwga2V5MiovKQoJCQkJCSk7CgkJCQl9CgkJCX0KCgkJCWlmICghcGFyc2VJbnQodGlsZUNvbnRhaW5lci5kYXRhc2V0LnBlbmRpbmcpKSB7CgkJCQlMLlV0aWwucmVxdWVzdEFuaW1GcmFtZShkb25lKTsKCQkJfQoJCQlyZXR1cm4gdGlsZUNvbnRhaW5lcjsKCQl9LAoKCQlfY2xvbmU6IGZ1bmN0aW9uIChpbWdOb2RlKSB7CgkJCXZhciBjbG9uZWRJbWdOb2RlID0gaW1nTm9kZS5jbG9uZU5vZGUodHJ1ZSk7CgkJCWNsb25lZEltZ05vZGUuc3R5bGUudmlzaWJpbGl0eSA9ICJ2aXNpYmxlIjsKCQkJcmV0dXJuIGNsb25lZEltZ05vZGU7CgkJfSwKCgkJX2NoZWNrWm9vbUxldmVsczogZnVuY3Rpb24gKCkgewoJCQkvL3NldHRpbmcgdGhlIHpvb20gbGV2ZWwgb24gdGhlIEdvb2dsZSBtYXAgbWF5IHJlc3VsdCBpbiBhIGRpZmZlcmVudCB6b29tIGxldmVsIHRoYW4gdGhlIG9uZSByZXF1ZXN0ZWQKCQkJLy8oaXQgd29uJ3QgZ28gYmV5b25kIHRoZSBsZXZlbCBmb3Igd2hpY2ggdGhleSBoYXZlIGRhdGEpLgoJCQl2YXIgem9vbUxldmVsID0gdGhpcy5fbWFwLmdldFpvb20oKSwKCQkJCWdNYXBab29tTGV2ZWwgPSB0aGlzLl9tdXRhbnQuZ2V0Wm9vbSgpOwoKCQkJaWYgKCF6b29tTGV2ZWwgfHwgIWdNYXBab29tTGV2ZWwpIHsgcmV0dXJuOyB9CgoJCQlpZiAoCgkJCQlnTWFwWm9vbUxldmVsICE9PSB6b29tTGV2ZWwgfHwgLy96b29tIGxldmVscyBhcmUgb3V0IG9mIHN5bmMsIEdvb2dsZSBkb2Vzbid0IGhhdmUgZGF0YQoJCQkJZ01hcFpvb21MZXZlbCA+IHRoaXMub3B0aW9ucy5tYXhOYXRpdmVab29tCgkJCSkgewoJCQkJLy9hdCBjdXJyZW50IGxvY2F0aW9uLCBHb29nbGUgZG9lcyBoYXZlIGRhdGEgKGNvbnRyYXJ5IHRvIG1heE5hdGl2ZVpvb20pCgkJCQkvL1VwZGF0ZSBtYXhOYXRpdmVab29tCgkJCQl0aGlzLl9zZXRNYXhOYXRpdmVab29tKGdNYXBab29tTGV2ZWwpOwoJCQl9CgkJfSwKCgkJX3NldE1heE5hdGl2ZVpvb206IGZ1bmN0aW9uICh6b29tTGV2ZWwpIHsKCQkJaWYgKHpvb21MZXZlbCAhPT0gdGhpcy5vcHRpb25zLm1heE5hdGl2ZVpvb20pIHsKCQkJCXRoaXMub3B0aW9ucy5tYXhOYXRpdmVab29tID0gem9vbUxldmVsOwoJCQkJdGhpcy5fcmVzZXRWaWV3KCk7CgkJCX0KCQl9LAoKCQlfdXBkYXRlOiBmdW5jdGlvbiAoY2VudGVyKSB7CgkJCS8vIHpvb20gbGV2ZWwgY2hlY2sgbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSBzdXBlcidzIGltcGxlbWVudGF0aW9uICh0aWxlIGFkZGl0aW9uL2NyZWF0aW9uKQoJCQkvLyBvdGhlcndpc2UgdGlsZXMgbWF5IGJlIG1pc3NlZCBpZiBtYXhOYXRpdmVab29tIGlzIG5vdCB5ZXQgY29ycmVjdGx5IGRldGVybWluZWQKCQkJaWYgKHRoaXMuX211dGFudCkgewoJCQkJY2VudGVyID0gY2VudGVyIHx8IHRoaXMuX21hcC5nZXRDZW50ZXIoKTsKCQkJCXZhciBfY2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhjZW50ZXIubGF0LCBjZW50ZXIubG5nKSwKCQkJCQl6b29tID0gTWF0aC5yb3VuZCh0aGlzLl9tYXAuZ2V0Wm9vbSgpKSwKCQkJCQltdXRhbnRab29tID0gdGhpcy5fbXV0YW50LmdldFpvb20oKTsKCgkJCQl0aGlzLl9tdXRhbnQuc2V0Q2VudGVyKF9jZW50ZXIpOwoKCQkJCS8vaWdub3JlIGZyYWN0aW9uYWwgem9vbSBsZXZlbHMKCQkJCWlmICh6b29tICE9PSBtdXRhbnRab29tKSB7CgkJCQkJdGhpcy5fbXV0YW50LnNldFpvb20oem9vbSk7CgoJCQkJCWlmICh0aGlzLl9tdXRhbnRJc1JlYWR5KSB7IHRoaXMuX2NoZWNrWm9vbUxldmVscygpOyB9CgkJCQkJLy9lbHNlIHpvb20gbGV2ZWwgY2hlY2sgd2lsbCBiZSBkb25lIGxhdGVyIGJ5ICdpZGxlJyBoYW5kbGVyCgkJCQl9CgkJCX0KCgkJCUwuR3JpZExheWVyLnByb3RvdHlwZS5fdXBkYXRlLmNhbGwodGhpcywgY2VudGVyKTsKCQl9LAoKCQkvLyBAbWV0aG9kIHdoZW5SZWFkeShmbjogRnVuY3Rpb24sIGNvbnRleHQ/OiBPYmplY3QpOiB0aGlzCgkJLy8gUnVucyB0aGUgZ2l2ZW4gZnVuY3Rpb24gYGZuYCB3aGVuIHRoZSBtdXRhbnQgZ2V0cyBpbml0aWFsaXplZCwgb3IgaW1tZWRpYXRlbHkKCQkvLyBpZiBpdCdzIGFscmVhZHkgaW5pdGlhbGl6ZWQsIG9wdGlvbmFsbHkgcGFzc2luZyBhIGZ1bmN0aW9uIGNvbnRleHQuCgkJd2hlblJlYWR5OiBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHsKCQkJaWYgKHRoaXMuX211dGFudCkgewoJCQkJY2FsbGJhY2suY2FsbChjb250ZXh0IHx8IHRoaXMsIHsgdGFyZ2V0OiB0aGlzIH0pOwoJCQl9IGVsc2UgewoJCQkJdGhpcy5vbigic3Bhd25lZCIsIGNhbGxiYWNrLCBjb250ZXh0KTsKCQkJfQoJCQlyZXR1cm4gdGhpczsKCQl9LAoJfSk7CgoJLy8g8J+NgmZhY3RvcnkgZ3JpZExheWVyLmdvb2dsZU11dGFudChvcHRpb25zKQoJLy8gUmV0dXJucyBhIG5ldyBgR3JpZExheWVyLkdvb2dsZU11dGFudGAgZ2l2ZW4gaXRzIG9wdGlvbnMKCUwuZ3JpZExheWVyLmdvb2dsZU11dGFudCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CgkJcmV0dXJuIG5ldyBMLkdyaWRMYXllci5Hb29nbGVNdXRhbnQob3B0aW9ucyk7Cgl9OwoKfSkoKTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGVhZmxldC5Hb29nbGVNdXRhbnQuanMubWFwCgoKOwogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogIC8vICoqKiBpbmNsdWRlZDogZXh0ZXJuYWwvb21zLm1pbi5qcyAqKioKKGZ1bmN0aW9uKCl7LyoKIE92ZXJsYXBwaW5nTWFya2VyU3BpZGVyZmllcgpodHRwczovL2dpdGh1Yi5jb20vamF3ai9PdmVybGFwcGluZ01hcmtlclNwaWRlcmZpZXItTGVhZmxldApDb3B5cmlnaHQgKGMpIDIwMTEgLSAyMDEyIEdlb3JnZSBNYWNLZXJyb24KUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbmNlOiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UKTm90ZTogVGhlIExlYWZsZXQgbWFwcyBBUEkgbXVzdCBiZSBpbmNsdWRlZCAqYmVmb3JlKiB0aGlzIGNvZGUKKi8KKGZ1bmN0aW9uKCl7dmFyIHE9e30uaGFzT3duUHJvcGVydHkscj1bXS5zbGljZTtudWxsIT10aGlzLkwmJih0aGlzLk92ZXJsYXBwaW5nTWFya2VyU3BpZGVyZmllcj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oYyxiKXt2YXIgYSxlLGcsZixkPXRoaXM7dGhpcy5tYXA9YztudWxsPT1iJiYoYj17fSk7Zm9yKGEgaW4gYilxLmNhbGwoYixhKSYmKGU9YlthXSx0aGlzW2FdPWUpO3RoaXMuaW5pdE1hcmtlckFycmF5cygpO3RoaXMubGlzdGVuZXJzPXt9O2Y9WyJjbGljayIsInpvb21lbmQiXTtlPTA7Zm9yKGc9Zi5sZW5ndGg7ZTxnO2UrKylhPWZbZV0sdGhpcy5tYXAuYWRkRXZlbnRMaXN0ZW5lcihhLGZ1bmN0aW9uKCl7cmV0dXJuIGQudW5zcGlkZXJmeSgpfSl9dmFyIGQsaztkPW4ucHJvdG90eXBlO2QuVkVSU0lPTj0iMC4yLjYiO2s9MipNYXRoLlBJO2Qua2VlcFNwaWRlcmZpZWQ9ITE7ZC5uZWFyYnlEaXN0YW5jZT0yMDtkLmNpcmNsZVNwaXJhbFN3aXRjaG92ZXI9OTtkLmNpcmNsZUZvb3RTZXBhcmF0aW9uPQoyNTtkLmNpcmNsZVN0YXJ0QW5nbGU9ay8xMjtkLnNwaXJhbEZvb3RTZXBhcmF0aW9uPTI4O2Quc3BpcmFsTGVuZ3RoU3RhcnQ9MTE7ZC5zcGlyYWxMZW5ndGhGYWN0b3I9NTtkLmxlZ1dlaWdodD0xLjU7ZC5sZWdDb2xvcnM9e3VzdWFsOiIjMjIyIixoaWdobGlnaHRlZDoiI2YwMCJ9O2QuaW5pdE1hcmtlckFycmF5cz1mdW5jdGlvbigpe3RoaXMubWFya2Vycz1bXTtyZXR1cm4gdGhpcy5tYXJrZXJMaXN0ZW5lcnM9W119O2QuYWRkTWFya2VyPWZ1bmN0aW9uKGMpe3ZhciBiLGE9dGhpcztpZihudWxsIT1jLl9vbXMpcmV0dXJuIHRoaXM7Yy5fb21zPSEwO2I9ZnVuY3Rpb24oKXtyZXR1cm4gYS5zcGlkZXJMaXN0ZW5lcihjKX07Yy5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsYik7dGhpcy5tYXJrZXJMaXN0ZW5lcnMucHVzaChiKTt0aGlzLm1hcmtlcnMucHVzaChjKTtyZXR1cm4gdGhpc307ZC5nZXRNYXJrZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFya2Vycy5zbGljZSgwKX07CmQucmVtb3ZlTWFya2VyPWZ1bmN0aW9uKGMpe3ZhciBiLGE7bnVsbCE9Yy5fb21zRGF0YSYmdGhpcy51bnNwaWRlcmZ5KCk7Yj10aGlzLmFyckluZGV4T2YodGhpcy5tYXJrZXJzLGMpO2lmKDA+YilyZXR1cm4gdGhpczthPXRoaXMubWFya2VyTGlzdGVuZXJzLnNwbGljZShiLDEpWzBdO2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLGEpO2RlbGV0ZSBjLl9vbXM7dGhpcy5tYXJrZXJzLnNwbGljZShiLDEpO3JldHVybiB0aGlzfTtkLmNsZWFyTWFya2Vycz1mdW5jdGlvbigpe3ZhciBjLGIsYSxlLGc7dGhpcy51bnNwaWRlcmZ5KCk7Zz10aGlzLm1hcmtlcnM7Yz1hPTA7Zm9yKGU9Zy5sZW5ndGg7YTxlO2M9KythKWI9Z1tjXSxjPXRoaXMubWFya2VyTGlzdGVuZXJzW2NdLGIucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLGMpLGRlbGV0ZSBiLl9vbXM7dGhpcy5pbml0TWFya2VyQXJyYXlzKCk7cmV0dXJuIHRoaXN9O2QuYWRkTGlzdGVuZXI9ZnVuY3Rpb24oYyxiKXt2YXIgYSwKZTsobnVsbCE9KGU9KGE9dGhpcy5saXN0ZW5lcnMpW2NdKT9lOmFbY109W10pLnB1c2goYik7cmV0dXJuIHRoaXN9O2QucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24oYyxiKXt2YXIgYTthPXRoaXMuYXJySW5kZXhPZih0aGlzLmxpc3RlbmVyc1tjXSxiKTswPmF8fHRoaXMubGlzdGVuZXJzW2NdLnNwbGljZShhLDEpO3JldHVybiB0aGlzfTtkLmNsZWFyTGlzdGVuZXJzPWZ1bmN0aW9uKGMpe3RoaXMubGlzdGVuZXJzW2NdPVtdO3JldHVybiB0aGlzfTtkLnRyaWdnZXI9ZnVuY3Rpb24oKXt2YXIgYyxiLGEsZSxnLGY7Yj1hcmd1bWVudHNbMF07Yz0yPD1hcmd1bWVudHMubGVuZ3RoP3IuY2FsbChhcmd1bWVudHMsMSk6W107Yj1udWxsIT0oYT10aGlzLmxpc3RlbmVyc1tiXSk/YTpbXTtmPVtdO2U9MDtmb3IoZz1iLmxlbmd0aDtlPGc7ZSsrKWE9YltlXSxmLnB1c2goYS5hcHBseShudWxsLGMpKTtyZXR1cm4gZn07ZC5nZW5lcmF0ZVB0c0NpcmNsZT1mdW5jdGlvbihjLGIpe3ZhciBhLGUsCmcsZixkO2c9dGhpcy5jaXJjbGVGb290U2VwYXJhdGlvbiooMitjKS9rO2U9ay9jO2Q9W107Zm9yKGE9Zj0wOzA8PWM/ZjxjOmY+YzthPTA8PWM/KytmOi0tZilhPXRoaXMuY2lyY2xlU3RhcnRBbmdsZSthKmUsZC5wdXNoKG5ldyBMLlBvaW50KGIueCtnKk1hdGguY29zKGEpLGIueStnKk1hdGguc2luKGEpKSk7cmV0dXJuIGR9O2QuZ2VuZXJhdGVQdHNTcGlyYWw9ZnVuY3Rpb24oYyxiKXt2YXIgYSxlLGcsZixkO2c9dGhpcy5zcGlyYWxMZW5ndGhTdGFydDthPTA7ZD1bXTtmb3IoZT1mPTA7MDw9Yz9mPGM6Zj5jO2U9MDw9Yz8rK2Y6LS1mKWErPXRoaXMuc3BpcmFsRm9vdFNlcGFyYXRpb24vZys1RS00KmUsZT1uZXcgTC5Qb2ludChiLngrZypNYXRoLmNvcyhhKSxiLnkrZypNYXRoLnNpbihhKSksZys9ayp0aGlzLnNwaXJhbExlbmd0aEZhY3Rvci9hLGQucHVzaChlKTtyZXR1cm4gZH07ZC5zcGlkZXJMaXN0ZW5lcj1mdW5jdGlvbihjKXt2YXIgYixhLGUsZyxmLGQsaCxrLGw7KGI9bnVsbCE9CmMuX29tc0RhdGEpJiZ0aGlzLmtlZXBTcGlkZXJmaWVkfHx0aGlzLnVuc3BpZGVyZnkoKTtpZihiKXJldHVybiB0aGlzLnRyaWdnZXIoImNsaWNrIixjKTtnPVtdO2Y9W107ZD10aGlzLm5lYXJieURpc3RhbmNlKnRoaXMubmVhcmJ5RGlzdGFuY2U7ZT10aGlzLm1hcC5sYXRMbmdUb0xheWVyUG9pbnQoYy5nZXRMYXRMbmcoKSk7bD10aGlzLm1hcmtlcnM7aD0wO2ZvcihrPWwubGVuZ3RoO2g8aztoKyspYj1sW2hdLHRoaXMubWFwLmhhc0xheWVyKGIpJiYoYT10aGlzLm1hcC5sYXRMbmdUb0xheWVyUG9pbnQoYi5nZXRMYXRMbmcoKSksdGhpcy5wdERpc3RhbmNlU3EoYSxlKTxkP2cucHVzaCh7bWFya2VyOmIsbWFya2VyUHQ6YX0pOmYucHVzaChiKSk7cmV0dXJuIDE9PT1nLmxlbmd0aD90aGlzLnRyaWdnZXIoImNsaWNrIixjKTp0aGlzLnNwaWRlcmZ5KGcsZil9O2QubWFrZUhpZ2hsaWdodExpc3RlbmVycz1mdW5jdGlvbihjKXt2YXIgYj10aGlzO3JldHVybntoaWdobGlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5fb21zRGF0YS5sZWcuc2V0U3R5bGUoe2NvbG9yOmIubGVnQ29sb3JzLmhpZ2hsaWdodGVkfSl9LAp1bmhpZ2hsaWdodDpmdW5jdGlvbigpe3JldHVybiBjLl9vbXNEYXRhLmxlZy5zZXRTdHlsZSh7Y29sb3I6Yi5sZWdDb2xvcnMudXN1YWx9KX19fTtkLnNwaWRlcmZ5PWZ1bmN0aW9uKGMsYil7dmFyIGEsZSxnLGQscCxoLGssbCxuLG07dGhpcy5zcGlkZXJmeWluZz0hMDttPWMubGVuZ3RoO2E9dGhpcy5wdEF2ZXJhZ2UoZnVuY3Rpb24oKXt2YXIgYSxiLGU7ZT1bXTthPTA7Zm9yKGI9Yy5sZW5ndGg7YTxiO2ErKylrPWNbYV0sZS5wdXNoKGsubWFya2VyUHQpO3JldHVybiBlfSgpKTtkPW0+PXRoaXMuY2lyY2xlU3BpcmFsU3dpdGNob3Zlcj90aGlzLmdlbmVyYXRlUHRzU3BpcmFsKG0sYSkucmV2ZXJzZSgpOnRoaXMuZ2VuZXJhdGVQdHNDaXJjbGUobSxhKTthPWZ1bmN0aW9uKCl7dmFyIGEsYixrLG09dGhpcztrPVtdO2E9MDtmb3IoYj1kLmxlbmd0aDthPGI7YSsrKWc9ZFthXSxlPXRoaXMubWFwLmxheWVyUG9pbnRUb0xhdExuZyhnKSxuPXRoaXMubWluRXh0cmFjdChjLGZ1bmN0aW9uKGEpe3JldHVybiBtLnB0RGlzdGFuY2VTcShhLm1hcmtlclB0LApnKX0pLGg9bi5tYXJrZXIscD1uZXcgTC5Qb2x5bGluZShbaC5nZXRMYXRMbmcoKSxlXSx7Y29sb3I6dGhpcy5sZWdDb2xvcnMudXN1YWwsd2VpZ2h0OnRoaXMubGVnV2VpZ2h0LGludGVyYWN0aXZlOiExfSksdGhpcy5tYXAuYWRkTGF5ZXIocCksaC5fb21zRGF0YT17dXN1YWxQb3NpdGlvbjpoLmdldExhdExuZygpLGxlZzpwfSx0aGlzLmxlZ0NvbG9ycy5oaWdobGlnaHRlZCE9PXRoaXMubGVnQ29sb3JzLnVzdWFsJiYobD10aGlzLm1ha2VIaWdobGlnaHRMaXN0ZW5lcnMoaCksaC5fb21zRGF0YS5oaWdobGlnaHRMaXN0ZW5lcnM9bCxoLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsbC5oaWdobGlnaHQpLGguYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLGwudW5oaWdobGlnaHQpKSxoLnNldExhdExuZyhlKSxoLnNldFpJbmRleE9mZnNldCgxRTYpLGsucHVzaChoKTtyZXR1cm4ga30uY2FsbCh0aGlzKTtkZWxldGUgdGhpcy5zcGlkZXJmeWluZzt0aGlzLnNwaWRlcmZpZWQ9ITA7CnJldHVybiB0aGlzLnRyaWdnZXIoInNwaWRlcmZ5IixhLGIpfTtkLnVuc3BpZGVyZnk9ZnVuY3Rpb24oYyl7dmFyIGIsYSxlLGQsZixrLGg7bnVsbD09YyYmKGM9bnVsbCk7aWYobnVsbD09dGhpcy5zcGlkZXJmaWVkKXJldHVybiB0aGlzO3RoaXMudW5zcGlkZXJmeWluZz0hMDtkPVtdO2U9W107aD10aGlzLm1hcmtlcnM7Zj0wO2ZvcihrPWgubGVuZ3RoO2Y8aztmKyspYj1oW2ZdLG51bGwhPWIuX29tc0RhdGE/KHRoaXMubWFwLnJlbW92ZUxheWVyKGIuX29tc0RhdGEubGVnKSxiIT09YyYmYi5zZXRMYXRMbmcoYi5fb21zRGF0YS51c3VhbFBvc2l0aW9uKSxiLnNldFpJbmRleE9mZnNldCgwKSxhPWIuX29tc0RhdGEuaGlnaGxpZ2h0TGlzdGVuZXJzLG51bGwhPWEmJihiLnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsYS5oaWdobGlnaHQpLGIucmVtb3ZlRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLGEudW5oaWdobGlnaHQpKSxkZWxldGUgYi5fb21zRGF0YSxkLnB1c2goYikpOgplLnB1c2goYik7ZGVsZXRlIHRoaXMudW5zcGlkZXJmeWluZztkZWxldGUgdGhpcy5zcGlkZXJmaWVkO3RoaXMudHJpZ2dlcigidW5zcGlkZXJmeSIsZCxlKTtyZXR1cm4gdGhpc307ZC5wdERpc3RhbmNlU3E9ZnVuY3Rpb24oYyxiKXt2YXIgYSxlO2E9Yy54LWIueDtlPWMueS1iLnk7cmV0dXJuIGEqYStlKmV9O2QucHRBdmVyYWdlPWZ1bmN0aW9uKGMpe3ZhciBiLGEsZSxkLGY7ZD1hPWU9MDtmb3IoZj1jLmxlbmd0aDtkPGY7ZCsrKWI9Y1tkXSxhKz1iLngsZSs9Yi55O2M9Yy5sZW5ndGg7cmV0dXJuIG5ldyBMLlBvaW50KGEvYyxlL2MpfTtkLm1pbkV4dHJhY3Q9ZnVuY3Rpb24oYyxiKXt2YXIgYSxkLGcsZixrLGg7Zz1rPTA7Zm9yKGg9Yy5sZW5ndGg7azxoO2c9KytrKWlmKGY9Y1tnXSxmPWIoZiksInVuZGVmaW5lZCI9PT10eXBlb2YgYXx8bnVsbD09PWF8fGY8ZClkPWYsYT1nO3JldHVybiBjLnNwbGljZShhLDEpWzBdfTtkLmFyckluZGV4T2Y9ZnVuY3Rpb24oYyxiKXt2YXIgYSwKZCxnLGY7aWYobnVsbCE9Yy5pbmRleE9mKXJldHVybiBjLmluZGV4T2YoYik7YT1nPTA7Zm9yKGY9Yy5sZW5ndGg7ZzxmO2E9KytnKWlmKGQ9Y1thXSxkPT09YilyZXR1cm4gYTtyZXR1cm4tMX07cmV0dXJuIG59KCkpfSkuY2FsbCh0aGlzKTt9KS5jYWxsKHRoaXMpOwovKiBNb24gMTQgT2N0IDIwMTMgMTA6NTQ6NTkgQlNUICovCgoKOwogIEwuQ2FudmFzSWNvbkxheWVyID0gKGZ1bmN0aW9uIChtb2R1bGUpIHsKICAgIC8vICoqKiBpbmNsdWRlZDogZXh0ZXJuYWwvcmJ1c2gubWluLmpzICoqKgohZnVuY3Rpb24odCl7aWYoIm9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KCk7ZWxzZSBpZigiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNleygidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpLnJidXNoPXQoKX19KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIHQoaSxuLGUpe2Z1bmN0aW9uIHIoaCxvKXtpZighbltoXSl7aWYoIWlbaF0pe3ZhciBzPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFvJiZzKXJldHVybiBzKGgsITApO2lmKGEpcmV0dXJuIGEoaCwhMCk7dmFyIGY9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIraCsiJyIpO3Rocm93IGYuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsZn12YXIgbD1uW2hdPXtleHBvcnRzOnt9fTtpW2hdWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKHQpe3ZhciBuPWlbaF1bMV1bdF07cmV0dXJuIHIobnx8dCl9LGwsbC5leHBvcnRzLHQsaSxuLGUpfXJldHVybiBuW2hdLmV4cG9ydHN9Zm9yKHZhciBhPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGg9MDtoPGUubGVuZ3RoO2grKylyKGVbaF0pO3JldHVybiByfSh7MTpbZnVuY3Rpb24odCxpLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKHQsaSl7aWYoISh0aGlzIGluc3RhbmNlb2YgZSkpcmV0dXJuIG5ldyBlKHQsaSk7dGhpcy5fbWF4RW50cmllcz1NYXRoLm1heCg0LHR8fDkpLHRoaXMuX21pbkVudHJpZXM9TWF0aC5tYXgoMixNYXRoLmNlaWwoLjQqdGhpcy5fbWF4RW50cmllcykpLGkmJnRoaXMuX2luaXRGb3JtYXQoaSksdGhpcy5jbGVhcigpfWZ1bmN0aW9uIHIodCxpKXthKHQsMCx0LmNoaWxkcmVuLmxlbmd0aCxpLHQpfWZ1bmN0aW9uIGEodCxpLG4sZSxyKXtyfHwocj1tKG51bGwpKSxyLm1pblg9MS8wLHIubWluWT0xLzAsci5tYXhYPS0xLzAsci5tYXhZPS0xLzA7Zm9yKHZhciBhLG89aTtvPG47bysrKWE9dC5jaGlsZHJlbltvXSxoKHIsdC5sZWFmP2UoYSk6YSk7cmV0dXJuIHJ9ZnVuY3Rpb24gaCh0LGkpe3JldHVybiB0Lm1pblg9TWF0aC5taW4odC5taW5YLGkubWluWCksdC5taW5ZPU1hdGgubWluKHQubWluWSxpLm1pblkpLHQubWF4WD1NYXRoLm1heCh0Lm1heFgsaS5tYXhYKSx0Lm1heFk9TWF0aC5tYXgodC5tYXhZLGkubWF4WSksdH1mdW5jdGlvbiBvKHQsaSl7cmV0dXJuIHQubWluWC1pLm1pblh9ZnVuY3Rpb24gcyh0LGkpe3JldHVybiB0Lm1pblktaS5taW5ZfWZ1bmN0aW9uIGYodCl7cmV0dXJuKHQubWF4WC10Lm1pblgpKih0Lm1heFktdC5taW5ZKX1mdW5jdGlvbiBsKHQpe3JldHVybiB0Lm1heFgtdC5taW5YKyh0Lm1heFktdC5taW5ZKX1mdW5jdGlvbiB1KHQsaSl7cmV0dXJuIHQubWluWDw9aS5taW5YJiZ0Lm1pblk8PWkubWluWSYmaS5tYXhYPD10Lm1heFgmJmkubWF4WTw9dC5tYXhZfWZ1bmN0aW9uIGModCxpKXtyZXR1cm4gaS5taW5YPD10Lm1heFgmJmkubWluWTw9dC5tYXhZJiZpLm1heFg+PXQubWluWCYmaS5tYXhZPj10Lm1pbll9ZnVuY3Rpb24gbSh0KXtyZXR1cm57Y2hpbGRyZW46dCxoZWlnaHQ6MSxsZWFmOiEwLG1pblg6MS8wLG1pblk6MS8wLG1heFg6LTEvMCxtYXhZOi0xLzB9fWZ1bmN0aW9uIGQodCxpLG4sZSxyKXtmb3IodmFyIGEsaD1baSxuXTtoLmxlbmd0aDspKG49aC5wb3AoKSktKGk9aC5wb3AoKSk8PWV8fChhPWkrTWF0aC5jZWlsKChuLWkpL2UvMikqZSx4KHQsYSxpLG4sciksaC5wdXNoKGksYSxhLG4pKX1pLmV4cG9ydHM9ZSxpLmV4cG9ydHMuZGVmYXVsdD1lO3ZhciB4PXQoInF1aWNrc2VsZWN0Iik7ZS5wcm90b3R5cGU9e2FsbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hbGwodGhpcy5kYXRhLFtdKX0sc2VhcmNoOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuZGF0YSxuPVtdLGU9dGhpcy50b0JCb3g7aWYoIWModCxpKSlyZXR1cm4gbjtmb3IodmFyIHIsYSxoLG8scz1bXTtpOyl7Zm9yKHI9MCxhPWkuY2hpbGRyZW4ubGVuZ3RoO3I8YTtyKyspaD1pLmNoaWxkcmVuW3JdLGModCxvPWkubGVhZj9lKGgpOmgpJiYoaS5sZWFmP24ucHVzaChoKTp1KHQsbyk/dGhpcy5fYWxsKGgsbik6cy5wdXNoKGgpKTtpPXMucG9wKCl9cmV0dXJuIG59LGNvbGxpZGVzOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMuZGF0YSxuPXRoaXMudG9CQm94O2lmKCFjKHQsaSkpcmV0dXJuITE7Zm9yKHZhciBlLHIsYSxoLG89W107aTspe2ZvcihlPTAscj1pLmNoaWxkcmVuLmxlbmd0aDtlPHI7ZSsrKWlmKGE9aS5jaGlsZHJlbltlXSxoPWkubGVhZj9uKGEpOmEsYyh0LGgpKXtpZihpLmxlYWZ8fHUodCxoKSlyZXR1cm4hMDtvLnB1c2goYSl9aT1vLnBvcCgpfXJldHVybiExfSxsb2FkOmZ1bmN0aW9uKHQpe2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuIHRoaXM7aWYodC5sZW5ndGg8dGhpcy5fbWluRW50cmllcyl7Zm9yKHZhciBpPTAsbj10Lmxlbmd0aDtpPG47aSsrKXRoaXMuaW5zZXJ0KHRbaV0pO3JldHVybiB0aGlzfXZhciBlPXRoaXMuX2J1aWxkKHQuc2xpY2UoKSwwLHQubGVuZ3RoLTEsMCk7aWYodGhpcy5kYXRhLmNoaWxkcmVuLmxlbmd0aClpZih0aGlzLmRhdGEuaGVpZ2h0PT09ZS5oZWlnaHQpdGhpcy5fc3BsaXRSb290KHRoaXMuZGF0YSxlKTtlbHNle2lmKHRoaXMuZGF0YS5oZWlnaHQ8ZS5oZWlnaHQpe3ZhciByPXRoaXMuZGF0YTt0aGlzLmRhdGE9ZSxlPXJ9dGhpcy5faW5zZXJ0KGUsdGhpcy5kYXRhLmhlaWdodC1lLmhlaWdodC0xLCEwKX1lbHNlIHRoaXMuZGF0YT1lO3JldHVybiB0aGlzfSxpbnNlcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnRoaXMuX2luc2VydCh0LHRoaXMuZGF0YS5oZWlnaHQtMSksdGhpc30sY2xlYXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhPW0oW10pLHRoaXN9LHJlbW92ZTpmdW5jdGlvbih0LGkpe2lmKCF0KXJldHVybiB0aGlzO2Zvcih2YXIgbixlLHIsYSxoPXRoaXMuZGF0YSxvPXRoaXMudG9CQm94KHQpLHM9W10sZj1bXTtofHxzLmxlbmd0aDspe2lmKGh8fChoPXMucG9wKCksZT1zW3MubGVuZ3RoLTFdLG49Zi5wb3AoKSxhPSEwKSxoLmxlYWYmJi0xIT09KHI9ZnVuY3Rpb24odCxpLG4pe2lmKCFuKXJldHVybiBpLmluZGV4T2YodCk7Zm9yKHZhciBlPTA7ZTxpLmxlbmd0aDtlKyspaWYobih0LGlbZV0pKXJldHVybiBlO3JldHVybi0xfSh0LGguY2hpbGRyZW4saSkpKXJldHVybiBoLmNoaWxkcmVuLnNwbGljZShyLDEpLHMucHVzaChoKSx0aGlzLl9jb25kZW5zZShzKSx0aGlzO2F8fGgubGVhZnx8IXUoaCxvKT9lPyhuKyssaD1lLmNoaWxkcmVuW25dLGE9ITEpOmg9bnVsbDoocy5wdXNoKGgpLGYucHVzaChuKSxuPTAsZT1oLGg9aC5jaGlsZHJlblswXSl9cmV0dXJuIHRoaXN9LHRvQkJveDpmdW5jdGlvbih0KXtyZXR1cm4gdH0sY29tcGFyZU1pblg6byxjb21wYXJlTWluWTpzLHRvSlNPTjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGF9LGZyb21KU09OOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGE9dCx0aGlzfSxfYWxsOmZ1bmN0aW9uKHQsaSl7Zm9yKHZhciBuPVtdO3Q7KXQubGVhZj9pLnB1c2guYXBwbHkoaSx0LmNoaWxkcmVuKTpuLnB1c2guYXBwbHkobix0LmNoaWxkcmVuKSx0PW4ucG9wKCk7cmV0dXJuIGl9LF9idWlsZDpmdW5jdGlvbih0LGksbixlKXt2YXIgYSxoPW4taSsxLG89dGhpcy5fbWF4RW50cmllcztpZihoPD1vKXJldHVybiBhPW0odC5zbGljZShpLG4rMSkpLHIoYSx0aGlzLnRvQkJveCksYTtlfHwoZT1NYXRoLmNlaWwoTWF0aC5sb2coaCkvTWF0aC5sb2cobykpLG89TWF0aC5jZWlsKGgvTWF0aC5wb3cobyxlLTEpKSksKGE9bShbXSkpLmxlYWY9ITEsYS5oZWlnaHQ9ZTt2YXIgcyxmLGwsdSxjPU1hdGguY2VpbChoL28pLHg9YypNYXRoLmNlaWwoTWF0aC5zcXJ0KG8pKTtmb3IoZCh0LGksbix4LHRoaXMuY29tcGFyZU1pblgpLHM9aTtzPD1uO3MrPXgpZm9yKGQodCxzLGw9TWF0aC5taW4ocyt4LTEsbiksYyx0aGlzLmNvbXBhcmVNaW5ZKSxmPXM7Zjw9bDtmKz1jKXU9TWF0aC5taW4oZitjLTEsbCksYS5jaGlsZHJlbi5wdXNoKHRoaXMuX2J1aWxkKHQsZix1LGUtMSkpO3JldHVybiByKGEsdGhpcy50b0JCb3gpLGF9LF9jaG9vc2VTdWJ0cmVlOmZ1bmN0aW9uKHQsaSxuLGUpe2Zvcih2YXIgcixhLGgsbyxzLGwsdSxjO2UucHVzaChpKSwhaS5sZWFmJiZlLmxlbmd0aC0xIT09bjspe2Zvcih1PWM9MS8wLHI9MCxhPWkuY2hpbGRyZW4ubGVuZ3RoO3I8YTtyKyspcz1mKGg9aS5jaGlsZHJlbltyXSksKGw9ZnVuY3Rpb24odCxpKXtyZXR1cm4oTWF0aC5tYXgoaS5tYXhYLHQubWF4WCktTWF0aC5taW4oaS5taW5YLHQubWluWCkpKihNYXRoLm1heChpLm1heFksdC5tYXhZKS1NYXRoLm1pbihpLm1pblksdC5taW5ZKSl9KHQsaCktcyk8Yz8oYz1sLHU9czx1P3M6dSxvPWgpOmw9PT1jJiZzPHUmJih1PXMsbz1oKTtpPW98fGkuY2hpbGRyZW5bMF19cmV0dXJuIGl9LF9pbnNlcnQ6ZnVuY3Rpb24odCxpLG4pe3ZhciBlPXRoaXMudG9CQm94LHI9bj90OmUodCksYT1bXSxvPXRoaXMuX2Nob29zZVN1YnRyZWUocix0aGlzLmRhdGEsaSxhKTtmb3Ioby5jaGlsZHJlbi5wdXNoKHQpLGgobyxyKTtpPj0wJiZhW2ldLmNoaWxkcmVuLmxlbmd0aD50aGlzLl9tYXhFbnRyaWVzOyl0aGlzLl9zcGxpdChhLGkpLGktLTt0aGlzLl9hZGp1c3RQYXJlbnRCQm94ZXMocixhLGkpfSxfc3BsaXQ6ZnVuY3Rpb24odCxpKXt2YXIgbj10W2ldLGU9bi5jaGlsZHJlbi5sZW5ndGgsYT10aGlzLl9taW5FbnRyaWVzO3RoaXMuX2Nob29zZVNwbGl0QXhpcyhuLGEsZSk7dmFyIGg9dGhpcy5fY2hvb3NlU3BsaXRJbmRleChuLGEsZSksbz1tKG4uY2hpbGRyZW4uc3BsaWNlKGgsbi5jaGlsZHJlbi5sZW5ndGgtaCkpO28uaGVpZ2h0PW4uaGVpZ2h0LG8ubGVhZj1uLmxlYWYscihuLHRoaXMudG9CQm94KSxyKG8sdGhpcy50b0JCb3gpLGk/dFtpLTFdLmNoaWxkcmVuLnB1c2gobyk6dGhpcy5fc3BsaXRSb290KG4sbyl9LF9zcGxpdFJvb3Q6ZnVuY3Rpb24odCxpKXt0aGlzLmRhdGE9bShbdCxpXSksdGhpcy5kYXRhLmhlaWdodD10LmhlaWdodCsxLHRoaXMuZGF0YS5sZWFmPSExLHIodGhpcy5kYXRhLHRoaXMudG9CQm94KX0sX2Nob29zZVNwbGl0SW5kZXg6ZnVuY3Rpb24odCxpLG4pe3ZhciBlLHIsaCxvLHMsbCx1LGM7Zm9yKGw9dT0xLzAsZT1pO2U8PW4taTtlKyspbz1mdW5jdGlvbih0LGkpe3ZhciBuPU1hdGgubWF4KHQubWluWCxpLm1pblgpLGU9TWF0aC5tYXgodC5taW5ZLGkubWluWSkscj1NYXRoLm1pbih0Lm1heFgsaS5tYXhYKSxhPU1hdGgubWluKHQubWF4WSxpLm1heFkpO3JldHVybiBNYXRoLm1heCgwLHItbikqTWF0aC5tYXgoMCxhLWUpfShyPWEodCwwLGUsdGhpcy50b0JCb3gpLGg9YSh0LGUsbix0aGlzLnRvQkJveCkpLHM9ZihyKStmKGgpLG88bD8obD1vLGM9ZSx1PXM8dT9zOnUpOm89PT1sJiZzPHUmJih1PXMsYz1lKTtyZXR1cm4gY30sX2Nob29zZVNwbGl0QXhpczpmdW5jdGlvbih0LGksbil7dmFyIGU9dC5sZWFmP3RoaXMuY29tcGFyZU1pblg6byxyPXQubGVhZj90aGlzLmNvbXBhcmVNaW5ZOnM7dGhpcy5fYWxsRGlzdE1hcmdpbih0LGksbixlKTx0aGlzLl9hbGxEaXN0TWFyZ2luKHQsaSxuLHIpJiZ0LmNoaWxkcmVuLnNvcnQoZSl9LF9hbGxEaXN0TWFyZ2luOmZ1bmN0aW9uKHQsaSxuLGUpe3QuY2hpbGRyZW4uc29ydChlKTt2YXIgcixvLHM9dGhpcy50b0JCb3gsZj1hKHQsMCxpLHMpLHU9YSh0LG4taSxuLHMpLGM9bChmKStsKHUpO2ZvcihyPWk7cjxuLWk7cisrKW89dC5jaGlsZHJlbltyXSxoKGYsdC5sZWFmP3Mobyk6byksYys9bChmKTtmb3Iocj1uLWktMTtyPj1pO3ItLSlvPXQuY2hpbGRyZW5bcl0saCh1LHQubGVhZj9zKG8pOm8pLGMrPWwodSk7cmV0dXJuIGN9LF9hZGp1c3RQYXJlbnRCQm94ZXM6ZnVuY3Rpb24odCxpLG4pe2Zvcih2YXIgZT1uO2U+PTA7ZS0tKWgoaVtlXSx0KX0sX2NvbmRlbnNlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgaSxuPXQubGVuZ3RoLTE7bj49MDtuLS0pMD09PXRbbl0uY2hpbGRyZW4ubGVuZ3RoP24+MD8oaT10W24tMV0uY2hpbGRyZW4pLnNwbGljZShpLmluZGV4T2YodFtuXSksMSk6dGhpcy5jbGVhcigpOnIodFtuXSx0aGlzLnRvQkJveCl9LF9pbml0Rm9ybWF0OmZ1bmN0aW9uKHQpe3ZhciBpPVsicmV0dXJuIGEiLCIgLSBiIiwiOyJdO3RoaXMuY29tcGFyZU1pblg9bmV3IEZ1bmN0aW9uKCJhIiwiYiIsaS5qb2luKHRbMF0pKSx0aGlzLmNvbXBhcmVNaW5ZPW5ldyBGdW5jdGlvbigiYSIsImIiLGkuam9pbih0WzFdKSksdGhpcy50b0JCb3g9bmV3IEZ1bmN0aW9uKCJhIiwicmV0dXJuIHttaW5YOiBhIit0WzBdKyIsIG1pblk6IGEiK3RbMV0rIiwgbWF4WDogYSIrdFsyXSsiLCBtYXhZOiBhIit0WzNdKyJ9OyIpfX19LHtxdWlja3NlbGVjdDoyfV0sMjpbZnVuY3Rpb24odCxpLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKHQsaSxuLGUsYSl7cih0LGksbnx8MCxlfHx0Lmxlbmd0aC0xLGF8fGZ1bmN0aW9uKHQsaSl7cmV0dXJuIHQ8aT8tMTp0Pmk/MTowfSl9ZnVuY3Rpb24gcih0LGksbixlLGgpe2Zvcig7ZT5uOyl7aWYoZS1uPjYwMCl7dmFyIG89ZS1uKzEscz1pLW4rMSxmPU1hdGgubG9nKG8pLGw9LjUqTWF0aC5leHAoMipmLzMpLHU9LjUqTWF0aC5zcXJ0KGYqbCooby1sKS9vKSoocy1vLzI8MD8tMToxKTtyKHQsaSxNYXRoLm1heChuLE1hdGguZmxvb3IoaS1zKmwvbyt1KSksTWF0aC5taW4oZSxNYXRoLmZsb29yKGkrKG8tcykqbC9vK3UpKSxoKX12YXIgYz10W2ldLG09bixkPWU7Zm9yKGEodCxuLGkpLGgodFtlXSxjKT4wJiZhKHQsbixlKTttPGQ7KXtmb3IoYSh0LG0sZCksbSsrLGQtLTtoKHRbbV0sYyk8MDspbSsrO2Zvcig7aCh0W2RdLGMpPjA7KWQtLX0wPT09aCh0W25dLGMpP2EodCxuLGQpOmEodCwrK2QsZSksZDw9aSYmKG49ZCsxKSxpPD1kJiYoZT1kLTEpfX1mdW5jdGlvbiBhKHQsaSxuKXt2YXIgZT10W2ldO3RbaV09dFtuXSx0W25dPWV9aS5leHBvcnRzPWUsaS5leHBvcnRzLmRlZmF1bHQ9ZX0se31dfSx7fSxbMV0pKDEpfSk7CgoKOwogICAgLy8gKioqIGluY2x1ZGVkOiBleHRlcm5hbC9sZWFmbGV0LmNhbnZhcy1tYXJrZXJzLmpzICoqKgondXNlIHN0cmljdCc7CgpmdW5jdGlvbiBsYXllckZhY3RvcnkgKEwpIHsKCiAgICBmdW5jdGlvbiBleHRlbmQgKFBhcmVudCwgcHJvcHMpIHsKICAgICAgICB2YXIgTmV3Q2xhc3MgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmluaXQpIHsgdGhpcy5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0KICAgICAgICB9OwogICAgICAgIHZhciBwcm90byA9IEwuVXRpbC5jcmVhdGUoUGFyZW50LnByb3RvdHlwZSk7CiAgICAgICAgTC5VdGlsLmV4dGVuZChwcm90bywgcHJvcHMpOwogICAgICAgIE5ld0NsYXNzLnByb3RvdHlwZSA9IHByb3RvOwogICAgICAgIHJldHVybiBOZXdDbGFzczsKICAgIH0KCiAgICB2YXIgQ29tbW9uID0gZXh0ZW5kKHJidXNoLCB7CiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByYnVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB0aGlzLl9iYXRjaCA9IFtdOwogICAgICAgIH0sCiAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiAoaXRlbSwgYmF0Y2gpIHsKICAgICAgICAgICAgaWYgKGJhdGNoKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9iYXRjaC5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJidXNoLnByb3RvdHlwZS5pbnNlcnQuY2FsbCh0aGlzLCBpdGVtKTsKICAgICAgICB9LAogICAgICAgIGZsdXNoOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLl9iYXRjaCk7CiAgICAgICAgICAgIHRoaXMuX2JhdGNoLmxlbmd0aCA9IDA7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0KICAgIH0pOwoKICAgIHZhciBMYXRMbmdzSW5kZXggPSBleHRlbmQoQ29tbW9uLCB7CiAgICAgICAgdG9CQm94OiBmdW5jdGlvbiAobWFya2VyKSB7CiAgICAgICAgICAgIHZhciBsbCA9IG1hcmtlci5fbGF0bG5nOwogICAgICAgICAgICByZXR1cm4ge21pblg6IGxsLmxuZywgbWluWTogbGwubGF0LCBtYXhYOiBsbC5sbmcsIG1heFk6IGxsLmxhdH07CiAgICAgICAgfSwKICAgICAgICBjb21wYXJlTWluWDogZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuX2xhdGxuZy5sbmcgLSBiLl9sYXRsbmcubG5nOyB9LAogICAgICAgIGNvbXBhcmVNaW5ZOiBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5fbGF0bG5nLmxhdCAtIGIuX2xhdGxuZy5sYXQ7IH0sCiAgICAgICAgc2VhcmNoSW46IGZ1bmN0aW9uIChib3VuZHMpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoKHsKICAgICAgICAgICAgICAgIG1pblg6IGJvdW5kcy5nZXRXZXN0KCksCiAgICAgICAgICAgICAgICBtaW5ZOiBib3VuZHMuZ2V0U291dGgoKSwKICAgICAgICAgICAgICAgIG1heFg6IGJvdW5kcy5nZXRFYXN0KCksCiAgICAgICAgICAgICAgICBtYXhZOiBib3VuZHMuZ2V0Tm9ydGgoKQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgQ29tbW9uLnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gMDsKICAgICAgICAgICAgdGhpcy5fdG90YWwgPSAwOwogICAgICAgIH0sCiAgICAgICAgLy8gSWYgd2UgYXJlIDEwJSBpbmRpdmlkdWFsIGluc2VydHNccmVtb3ZhbHMsIHJlY29uc3RydWN0IGxvb2t1cCBmb3IgZWZmaWNpZW5jeQogICAgICAgIGNsZWFudXA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKHRoaXMuX2RpcnR5IC8gdGhpcy5fdG90YWwgPj0gLjEpIHsKICAgICAgICAgICAgICAgIHZhciBhbGwgPSB0aGlzLmFsbCgpOwogICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpOwogICAgICAgICAgICAgICAgdGhpcy5fZGlydHkgPSAwOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkKGFsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5fZGlydHkrKzsKICAgICAgICAgICAgdGhpcy5fdG90YWwrKzsKICAgICAgICAgICAgcmV0dXJuIENvbW1vbi5wcm90b3R5cGUuaW5zZXJ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5fdG90YWwtLTsKICAgICAgICAgICAgcmV0dXJuIENvbW1vbi5wcm90b3R5cGUucmVtb3ZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBjbGVhcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IDA7CiAgICAgICAgICAgIHRoaXMuX3RvdGFsID0gMDsKICAgICAgICAgICAgcmV0dXJuIHJidXNoLnByb3RvdHlwZS5jbGVhci5hcHBseSh0aGlzKTsKICAgICAgICB9CiAgICB9KTsKCiAgICB2YXIgUG9pbnRzSW5kZXggPSBleHRlbmQoQ29tbW9uLCB7CiAgICAgICAgdG9CQm94OiBmdW5jdGlvbiAobWFya2VyKSB7CiAgICAgICAgICAgIHZhciBpY29uU2l6ZSA9IG1hcmtlci5vcHRpb25zLmljb24ub3B0aW9ucy5pY29uU2l6ZTsKICAgICAgICAgICAgdmFyIHBvcyA9IG1hcmtlci5fcG9pbnQ7CiAgICAgICAgICAgIHZhciBhZGpfeCA9IGljb25TaXplWzBdIC8gMjsKICAgICAgICAgICAgdmFyIGFkal95ID0gaWNvblNpemVbMV0gLyAyOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgbWluWDogcG9zLnggLSBhZGpfeCwKICAgICAgICAgICAgICAgIG1pblk6IHBvcy55IC0gYWRqX3ksCiAgICAgICAgICAgICAgICBtYXhYOiBwb3MueCArIGFkal94LAogICAgICAgICAgICAgICAgbWF4WTogcG9zLnkgKyBhZGpfeSwKICAgICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIGNvbXBhcmVNaW5YOiBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5fcG9pbnQueCAtIGIuX3BvaW50Lng7IH0sCiAgICAgICAgY29tcGFyZU1pblk6IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLl9wb2ludC55IC0gYi5fcG9pbnQueTsgfSwKICAgICAgICBzZWFyY2hCeTogZnVuY3Rpb24gKHBvaW50KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlYXJjaCh7CiAgICAgICAgICAgICAgICBtaW5YOiBwb2ludC54LCBtaW5ZOiBwb2ludC55LCBtYXhYOiBwb2ludC54LCBtYXhZOiBwb2ludC55CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0pOwoKICAgIHZhciBDYW52YXNJY29uTGF5ZXIgPSBMLkxheWVyLmV4dGVuZCh7IC8vIHRvZG8gaW5oZXJpdCBmcm9tIEwuUmVuZGVyZXIgb3IgTC5DYW52YXMKCiAgICAgICAgb3B0aW9uczogTC5DYW52YXMucHJvdG90eXBlLm9wdGlvbnMsCgogICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgICAgICAgIEwuUmVuZGVyZXIucHJvdG90eXBlLmluaXRpYWxpemUuY2FsbCh0aGlzLCBvcHRpb25zKTsKICAgICAgICAgICAgLy8gX3BvaW50c0lkeCBjb250YWlucyBQb2ludHMgb2YgbWFya2VycyBjdXJyZW50bHkgZGlzcGxheWluZyBvbiBtYXAKICAgICAgICAgICAgdGhpcy5fcG9pbnRzSWR4ID0gbmV3IFBvaW50c0luZGV4KCk7CiAgICAgICAgICAgIC8vIF9sYXRsbmdzSWR4IGNvbnRhaW5zIExhdFxMb25nIGNvb3JkaW5hdGVzIG9mIGFsbCBtYXJrZXJzIGluIGxheWVyLgogICAgICAgICAgICB0aGlzLl9sYXRsbmdzSWR4ID0gbmV3IExhdExuZ3NJbmRleCgpOwogICAgICAgIH0sCgogICAgICAgIG9uQWRkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEwuUmVuZGVyZXIucHJvdG90eXBlLm9uQWRkLmNhbGwodGhpcyk7CiAgICAgICAgICAgIEwuRG9tVXRpbC50b0JhY2sodGhpcy5fY29udGFpbmVyKTsKICAgICAgICB9LAoKICAgICAgICBfaW5pdENvbnRhaW5lcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBMLkNhbnZhcy5wcm90b3R5cGUuX2luaXRDb250YWluZXIuY2FsbCh0aGlzKTsKICAgICAgICAgICAgdGhpcy5faGlkZUNvbnRhaW5lcih0cnVlKTsKICAgICAgICB9LAoKICAgICAgICBvblJlbW92ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICBMLlJlbmRlcmVyLnByb3RvdHlwZS5vblJlbW92ZS5jYWxsKHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIF9kZXN0cm95Q29udGFpbmVyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEwuQ2FudmFzLnByb3RvdHlwZS5fZGVzdHJveUNvbnRhaW5lci5jYWxsKHRoaXMpOwogICAgICAgICAgICB0aGlzLl9wb2ludHNJZHguY2xlYXIoKTsKICAgICAgICB9LAoKICAgICAgICBnZXRFdmVudHM6IGZ1bmN0aW9uICgpIHsgLy8gdG9kbyB1c2UgTC5SZW5kZXJlci5wcm90b3R5cGUuZ2V0RXZlbnRzCiAgICAgICAgICAgIHZhciBldmVudHMgPSB7CiAgICAgICAgICAgICAgICB2aWV3cmVzZXQ6IHRoaXMuX3Jlc2V0LAogICAgICAgICAgICAgICAgem9vbTogdGhpcy5fb25ab29tLAogICAgICAgICAgICAgICAgbW92ZWVuZDogdGhpcy5fdXBkYXRlLAogICAgICAgICAgICAgICAgY2xpY2s6IHRoaXMuX29uQ2xpY2ssCiAgICAgICAgICAgICAgICBtb3VzZW1vdmU6IHRoaXMuX29uTW91c2VNb3ZlLAogICAgICAgICAgICAgICAgbW91c2VvdXQ6IHRoaXMuX2hhbmRsZU1vdXNlT3V0CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmICh0aGlzLl96b29tQW5pbWF0ZWQpIHsKICAgICAgICAgICAgICAgIGV2ZW50cy56b29tYW5pbSA9IHRoaXMuX29uQW5pbVpvb207CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGV2ZW50czsKICAgICAgICB9LAoKICAgICAgICBfb25BbmltWm9vbTogZnVuY3Rpb24gKGV2KSB7CiAgICAgICAgICAgIEwuUmVuZGVyZXIucHJvdG90eXBlLl9vbkFuaW1ab29tLmNhbGwodGhpcywgZXYpOwogICAgICAgIH0sCgogICAgICAgIF9vblpvb206IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgTC5SZW5kZXJlci5wcm90b3R5cGUuX29uWm9vbS5jYWxsKHRoaXMpOwogICAgICAgIH0sCgogICAgICAgIF91cGRhdGVUcmFuc2Zvcm06IGZ1bmN0aW9uIChjZW50ZXIsIHpvb20pIHsKICAgICAgICAgICAgTC5SZW5kZXJlci5wcm90b3R5cGUuX3VwZGF0ZVRyYW5zZm9ybS5jYWxsKHRoaXMsIGNlbnRlciwgem9vbSk7CiAgICAgICAgfSwKCiAgICAgICAgX3VwZGF0ZVBhdGhzOiBMLlV0aWwuZmFsc2VGbiwgLy8gc3R1YiBmb3IgTC5SZW5kZXJlciBvbkFkZC9vblJlbW92ZQoKICAgICAgICBfdXBkYXRlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEwuQ2FudmFzLnByb3RvdHlwZS5fdXBkYXRlLmNhbGwodGhpcyk7CiAgICAgICAgICAgIHRoaXMuX2RyYXcoKTsKICAgICAgICB9LAoKICAgICAgICBfcmVzZXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7CiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRyYW5zZm9ybSh0aGlzLl9jZW50ZXIsIHRoaXMuX3pvb20pOwogICAgICAgIH0sCgogICAgICAgIF9yZWRyYXc6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhpcy5fcmVkcmF3UmVxdWVzdCA9IHRoaXMuX3JlZHJhd1JlcXVlc3QgfHwgCiAgICAgICAgICAgICAgICBMLlV0aWwucmVxdWVzdEFuaW1GcmFtZShMLkNhbnZhcy5wcm90b3R5cGUuX3JlZHJhdywgdGhpcyk7CiAgICAgICAgfSwKCiAgICAgICAgX2NsZWFyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIEwuQ2FudmFzLnByb3RvdHlwZS5fY2xlYXIuY2FsbCh0aGlzKTsKICAgICAgICB9LAoKICAgICAgICBfZHJhdzogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYm91bmRzID0gdGhpcy5fcmVkcmF3Qm91bmRzOwogICAgICAgICAgICBpZiAoYm91bmRzKSB7CiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IGJvdW5kcy5nZXRTaXplKCk7CiAgICAgICAgICAgICAgICB0aGlzLl9jdHguYmVnaW5QYXRoKCk7CiAgICAgICAgICAgICAgICB0aGlzLl9jdHgucmVjdChib3VuZHMubWluLngsIGJvdW5kcy5taW4ueSwgc2l6ZS54LCBzaXplLnkpOwogICAgICAgICAgICAgICAgdGhpcy5fY3R4LmNsaXAoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9kcmF3aW5nID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5fbGF0bG5nc0lkeC5jbGVhbnVwKCk7CiAgICAgICAgICAgIHZhciBtYXBCb3VuZHMgPSB0aGlzLl9tYXAuZ2V0Qm91bmRzKCkucGFkKHRoaXMub3B0aW9ucy5wYWRkaW5nKTsKCiAgICAgICAgICAgIC8vIE9ubHkgcmUtZHJhdyB3aGF0IHdlIGFyZSBzaG93aW5nIG9uIHRoZSBtYXAuCiAgICAgICAgICAgIHZhciBpc0VtcHR5ID0gdHJ1ZTsKICAgICAgICAgICAgdGhpcy5fbGF0bG5nc0lkeC5zZWFyY2hJbihtYXBCb3VuZHMpLmZvckVhY2goZnVuY3Rpb24gKG1hcmtlcikgewogICAgICAgICAgICAgICAgLy8gUmVhZGp1c3QgUG9pbnQgTWFwCiAgICAgICAgICAgICAgICBpZiAoIW1hcmtlci5fbWFwKSB7IG1hcmtlci5fbWFwID0gdGhpcy5fbWFwOyB9IC8vIHRvZG8gPz9pbXBsZW1lbnQgcHJvcGVyIGhhbmRsaW5nIGluIChvbilhZGQqL3JlbW92ZSoKICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdNYXJrZXIobWFya2VyKTsKICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50c0lkeC5pbnNlcnQobWFya2VyLHRydWUpOwogICAgICAgICAgICAgICAgaXNFbXB0eSA9IGZhbHNlOwogICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5fZHJhd2luZyA9IGZhbHNlOwogICAgICAgICAgICAvLyBDbGVhciByQnVzaCAmIEJ1bGsgTG9hZCBmb3IgcGVyZm9ybWFuY2UKICAgICAgICAgICAgdGhpcy5fcG9pbnRzSWR4LmNsZWFyKCkuZmx1c2goKTsKICAgICAgICAgICAgdGhpcy5faGlkZUNvbnRhaW5lcihpc0VtcHR5KTsKICAgICAgICB9LAoKICAgICAgICBfZHJhd01hcmtlcjogZnVuY3Rpb24gKG1hcmtlcikgewogICAgICAgICAgICBtYXJrZXIuX3BvaW50ID0gdGhpcy5fbWFwLmxhdExuZ1RvTGF5ZXJQb2ludChtYXJrZXIuZ2V0TGF0TG5nKCkpOwogICAgICAgICAgICB0aGlzLl9pbWFnZUxvb2t1cCA9IHRoaXMuX2ltYWdlTG9va3VwIHx8IHt9OwoKICAgICAgICAgICAgdmFyIGljb25VcmwgPSBtYXJrZXIub3B0aW9ucy5pY29uLm9wdGlvbnMuaWNvblVybDsKICAgICAgICAgICAgdmFyIHF1ZXVlZCA9IHRoaXMuX2ltYWdlTG9va3VwW2ljb25VcmxdOwogICAgICAgICAgICBpZiAoIW1hcmtlci5jYW52YXNfaW1nKSB7CiAgICAgICAgICAgICAgICBpZiAocXVldWVkKSB7CiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmNhbnZhc19pbWcgPSBxdWV1ZWQuaW1nOwogICAgICAgICAgICAgICAgICAgIGlmIChxdWV1ZWQubG9hZGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdJbWFnZShtYXJrZXIpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlZC5xdWV1ZS5wdXNoKG1hcmtlcik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7CiAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IGljb25Vcmw7CiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmNhbnZhc19pbWcgPSBpbWc7CiAgICAgICAgICAgICAgICAgICAgcXVldWVkID0gewogICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGltZywKICAgICAgICAgICAgICAgICAgICAgICAgcXVldWU6IFttYXJrZXJdCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZUxvb2t1cFtpY29uVXJsXSA9IHF1ZXVlZDsKICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZWQubG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVkLnF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKF9tYXJrZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0xheWVyKF9tYXJrZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJhd0ltYWdlKF9tYXJrZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAocXVldWVkLmxvYWRlZCkgeyAvLyBpbWFnZSBtYXkgYmUgbm90IGxvYWRlZCAvIGJhZCB1cmwKICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdJbWFnZShtYXJrZXIpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgX2RyYXdJbWFnZTogZnVuY3Rpb24gKG1hcmtlcikgewogICAgICAgICAgICB2YXIgb3B0aW9ucyA9IG1hcmtlci5vcHRpb25zLmljb24ub3B0aW9uczsKICAgICAgICAgICAgdmFyIHBvcyA9IG1hcmtlci5fcG9pbnQuc3VidHJhY3Qob3B0aW9ucy5pY29uQW5jaG9yKTsKICAgICAgICAgICAgdGhpcy5fY3R4LmRyYXdJbWFnZSgKICAgICAgICAgICAgICAgIG1hcmtlci5jYW52YXNfaW1nLAogICAgICAgICAgICAgICAgcG9zLngsCiAgICAgICAgICAgICAgICBwb3MueSwKICAgICAgICAgICAgICAgIG9wdGlvbnMuaWNvblNpemVbMF0sCiAgICAgICAgICAgICAgICBvcHRpb25zLmljb25TaXplWzFdCiAgICAgICAgICAgICk7CiAgICAgICAgfSwKCiAgICAgICAgX29uQ2xpY2s6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHZhciBwb2ludCA9IGUubGF5ZXJQb2ludCB8fCB0aGlzLl9tYXAubW91c2VFdmVudFRvTGF5ZXJQb2ludChlKSwgY2xpY2tlZExheWVyOwoKICAgICAgICAgICAgdmFyIGxheWVyX2ludGVyc2VjdCA9IHRoaXMuX3BvaW50c0lkeCAmJiB0aGlzLl9wb2ludHNJZHguc2VhcmNoQnkocG9pbnQpOwogICAgICAgICAgICBpZiAobGF5ZXJfaW50ZXJzZWN0KSB7CiAgICAgICAgICAgICAgICBsYXllcl9pbnRlcnNlY3QuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIub3B0aW9ucy5pbnRlcmFjdGl2ZSAmJiAhdGhpcy5fbWFwLl9kcmFnZ2FibGVNb3ZlZChsYXllcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tlZExheWVyID0gbGF5ZXI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNsaWNrZWRMYXllcikgewogICAgICAgICAgICAgICAgTC5Eb21FdmVudC5mYWtlU3RvcChlKTsKICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudChbY2xpY2tlZExheWVyXSwgZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBfb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5fbWFwIHx8IHRoaXMuX21hcC5kcmFnZ2luZy5tb3ZpbmcoKSB8fCB0aGlzLl9tYXAuX2FuaW1hdGluZ1pvb20pIHsgcmV0dXJuOyB9CgogICAgICAgICAgICB2YXIgcG9pbnQgPSBlLmxheWVyUG9pbnQgfHwgdGhpcy5fbWFwLm1vdXNlRXZlbnRUb0xheWVyUG9pbnQoZSk7CiAgICAgICAgICAgIHRoaXMuX2hhbmRsZU1vdXNlSG92ZXIoZSwgcG9pbnQpOwogICAgICAgIH0sCgogICAgICAgIF9oYW5kbGVNb3VzZUhvdmVyOiBmdW5jdGlvbiAoZSwgcG9pbnQpIHsKICAgICAgICAgICAgaWYgKHRoaXMuX21vdXNlSG92ZXJUaHJvdHRsZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgY2FuZGlkYXRlSG92ZXJlZExheWVyOwogICAgICAgICAgICB2YXIgbGF5ZXJfaW50ZXJzZWN0ID0gdGhpcy5fcG9pbnRzSWR4ICYmIHRoaXMuX3BvaW50c0lkeC5zZWFyY2hCeShwb2ludCk7CiAgICAgICAgICAgIGlmIChsYXllcl9pbnRlcnNlY3QpIHsKICAgICAgICAgICAgICAgIGxheWVyX2ludGVyc2VjdC5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcikgewogICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5vcHRpb25zLmludGVyYWN0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZUhvdmVyZWRMYXllciA9IGxheWVyOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIHRoaXMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoY2FuZGlkYXRlSG92ZXJlZExheWVyICE9PSB0aGlzLl9ob3ZlcmVkTGF5ZXIpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZU1vdXNlT3V0KGUpOwoKICAgICAgICAgICAgICAgIGlmIChjYW5kaWRhdGVIb3ZlcmVkTGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICBMLkRvbVV0aWwuYWRkQ2xhc3ModGhpcy5fY29udGFpbmVyLCAnbGVhZmxldC1pbnRlcmFjdGl2ZScpOyAvLyBjaGFuZ2UgY3Vyc29yCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KFtjYW5kaWRhdGVIb3ZlcmVkTGF5ZXJdLCBlLCAnbW91c2VvdmVyJyk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5faG92ZXJlZExheWVyID0gY2FuZGlkYXRlSG92ZXJlZExheWVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodGhpcy5faG92ZXJlZExheWVyKSB7CiAgICAgICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoW3RoaXMuX2hvdmVyZWRMYXllcl0sIGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLl9tb3VzZUhvdmVyVGhyb3R0bGVkID0gdHJ1ZTsKICAgICAgICAgICAgc2V0VGltZW91dChMLmJpbmQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdGhpcy5fbW91c2VIb3ZlclRocm90dGxlZCA9IGZhbHNlOwogICAgICAgICAgICB9LCB0aGlzKSwgMzIpOwogICAgICAgIH0sCgogICAgICAgIF9oYW5kbGVNb3VzZU91dDogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgTC5DYW52YXMucHJvdG90eXBlLl9oYW5kbGVNb3VzZU91dC5jYWxsKHRoaXMsZSk7CiAgICAgICAgfSwKCiAgICAgICAgX2ZpcmVFdmVudDogZnVuY3Rpb24gKGxheWVycywgZSwgdHlwZSkgewogICAgICAgICAgICBpZiAoZS5sYXllclBvaW50KSB7CiAgICAgICAgICAgICAgICBsYXllcnNbMF0uZmlyZSh0eXBlIHx8IGUudHlwZSwgZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgTC5DYW52YXMucHJvdG90eXBlLl9maXJlRXZlbnQuY2FsbCh0aGlzLCBsYXllcnMsIGUsIHR5cGUpOwogICAgICAgIH0sCgogICAgICAgIF9hZGRNYXJrZXI6IGZ1bmN0aW9uIChtYXJrZXIsIGxhdGxuZywgaXNEaXNwbGF5aW5nLCBiYXRjaCkgewogICAgICAgICAgICBpZiAoIShtYXJrZXIgaW5zdGFuY2VvZiBMLk1hcmtlcikpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiTGF5ZXIgaXNuJ3QgYSBtYXJrZXIiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBtYXJrZXIuX21hcCA9IHRoaXMuX21hcDsgLy8gTmVlZGVkIGZvciBwb3AtdXAgJiB0b29sdGlwIHRvIHdvcmsKICAgICAgICAgICAgTC5VdGlsLnN0YW1wKG1hcmtlcik7CiAgICAgICAgICAgIG1hcmtlci5hZGRFdmVudFBhcmVudCh0aGlzKTsKCiAgICAgICAgICAgIGlmIChpc0Rpc3BsYXlpbmcpIHsKICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdNYXJrZXIobWFya2VyKTsKICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50c0lkeC5pbnNlcnQobWFya2VyLCBiYXRjaCk7CiAgICAgICAgICAgICAgICB0aGlzLl9oaWRlQ29udGFpbmVyKGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9sYXRsbmdzSWR4Lmluc2VydChtYXJrZXIsIGJhdGNoKTsKICAgICAgICB9LAoKICAgICAgICAvLyBBZGRzIHNpbmdsZSBsYXllciBhdCBhIHRpbWUuIExlc3MgZWZmaWNpZW50IGZvciByQnVzaAogICAgICAgIGFkZE1hcmtlcjogZnVuY3Rpb24gKG1hcmtlciwgZ3JvdXBJRCkgewogICAgICAgICAgICBncm91cElEID0gZ3JvdXBJRCA/IGdyb3VwSUQudG9TdHJpbmcoKSA6ICcwJzsKICAgICAgICAgICAgdGhpcy5fZ3JvdXBJRHMgPSB0aGlzLl9ncm91cElEcyB8fCB7fTsKCiAgICAgICAgICAgIHZhciBsYXRsbmcgPSBtYXJrZXIuZ2V0TGF0TG5nKCk7CiAgICAgICAgICAgIHZhciBpc0Rpc3BsYXlpbmcgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLmdldEJvdW5kcygpLnBhZCh0aGlzLm9wdGlvbnMucGFkZGluZykuY29udGFpbnMobGF0bG5nKTsKICAgICAgICAgICAgdGhpcy5fYWRkTWFya2VyKG1hcmtlciwgbGF0bG5nLCBpc0Rpc3BsYXlpbmcpOwogICAgICAgICAgICB0aGlzLl9ncm91cElEc1tncm91cElEXSA9ICh0aGlzLl9ncm91cElEc1tncm91cElEXSB8fCAwKSArIDE7CiAgICAgICAgICAgIG1hcmtlci5fY2FudmFzR3JvdXBJRCA9IGdyb3VwSUQ7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIGFkZExheWVyOiBmdW5jdGlvbiAobGF5ZXIsIGdyb3VwSUQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkTWFya2VyKGxheWVyLGdyb3VwSUQpOwogICAgICAgIH0sCgogICAgICAgIC8vIE11bHRpcGxlIGxheWVycyBhdCBhIHRpbWUgZm9yIHJCdXNoIHBlcmZvcm1hbmNlCiAgICAgICAgYWRkTWFya2VyczogZnVuY3Rpb24gKG1hcmtlcnMsIGdyb3VwSUQpIHsKICAgICAgICAgICAgZ3JvdXBJRCA9IGdyb3VwSUQgPyBncm91cElELnRvU3RyaW5nKCkgOiAnMCc7CiAgICAgICAgICAgIHRoaXMuX2dyb3VwSURzID0gdGhpcy5fZ3JvdXBJRHMgfHwge307CiAgICAgICAgICAgIHRoaXMuX2dyb3VwSURzW2dyb3VwSURdID0gdGhpcy5fZ3JvdXBJRHNbZ3JvdXBJRF0gfHwgMDsKCiAgICAgICAgICAgIHZhciBtYXBCb3VuZHMgPSB0aGlzLl9tYXAgJiYgdGhpcy5fbWFwLmdldEJvdW5kcygpLnBhZCh0aGlzLm9wdGlvbnMucGFkZGluZyk7CiAgICAgICAgICAgIG1hcmtlcnMuZm9yRWFjaChmdW5jdGlvbiAobWFya2VyKSB7CiAgICAgICAgICAgICAgICB2YXIgbGF0bG5nID0gbWFya2VyLmdldExhdExuZygpOwogICAgICAgICAgICAgICAgdmFyIGlzRGlzcGxheWluZyA9IG1hcEJvdW5kcyAmJiBtYXBCb3VuZHMuY29udGFpbnMobGF0bG5nKTsKICAgICAgICAgICAgICAgIHRoaXMuX2FkZE1hcmtlcihtYXJrZXIsIGxhdGxuZywgaXNEaXNwbGF5aW5nLCB0cnVlKTsKICAgICAgICAgICAgICAgIHRoaXMuX2dyb3VwSURzW2dyb3VwSURdKys7CiAgICAgICAgICAgICAgICBtYXJrZXIuX2NhbnZhc0dyb3VwSUQgPSBncm91cElEOwogICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5fcG9pbnRzSWR4LmZsdXNoKCk7CiAgICAgICAgICAgIHRoaXMuX2xhdGxuZ3NJZHguZmx1c2goKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgYWRkTGF5ZXJzOiBmdW5jdGlvbiAobGF5ZXJzLCBncm91cElEKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZE1hcmtlcnMobGF5ZXJzLGdyb3VwSUQpOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUdyb3VwczogZnVuY3Rpb24gKGdyb3VwSURzKSB7CiAgICAgICAgICAgIGdyb3VwSURzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwSUQpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUdyb3VwKGdyb3VwSUQpOwogICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5fcmVkcmF3KCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIHJlbW92ZUdyb3VwOiBmdW5jdGlvbiAoZ3JvdXBJRCkgewogICAgICAgICAgICB0aGlzLl9yZW1vdmVHcm91cChncm91cElEKTsKICAgICAgICAgICAgdGhpcy5fcmVkcmF3KCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCgogICAgICAgIF9yZW1vdmVHcm91cDogZnVuY3Rpb24gKGdyb3VwSUQpIHsKICAgICAgICAgICAgZ3JvdXBJRCA9IGdyb3VwSUQudG9TdHJpbmcoKTsKICAgICAgICAgICAgaWYgKCF0aGlzLl9ncm91cElEc1tncm91cElEXSkgeyByZXR1cm47IH0KICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2dyb3VwSURzW2dyb3VwSURdOwogICAgICAgICAgICB0aGlzLl9sYXRsbmdzSWR4LmFsbCgpLmZpbHRlcihmdW5jdGlvbiAobWFya2VyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWFya2VyLl9jYW52YXNHcm91cElEID09PSBncm91cElEOwogICAgICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVNYXJrZXIoZWwsIGZhbHNlLCB0cnVlKTsKICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlTWFya2VyOiBmdW5jdGlvbiAobWFya2VyLCByZWRyYXcsIGhhc0xheWVyKSB7CiAgICAgICAgICAgIGlmICghaGFzTGF5ZXIgJiYgIXRoaXMuaGFzTGF5ZXIobWFya2VyKSkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5fbGF0bG5nc0lkeC5yZW1vdmUobWFya2VyKTsKCiAgICAgICAgICAgIGlmIChyZWRyYXcgJiYgdGhpcy5fbWFwICYmCiAgICAgICAgICAgICAgICAgIHRoaXMuX21hcC5nZXRCb3VuZHMoKS5wYWQodGhpcy5vcHRpb25zLnBhZGRpbmcpLmNvbnRhaW5zKG1hcmtlci5nZXRMYXRMbmcoKSkpIHsKICAgICAgICAgICAgICAgIHRoaXMuX3JlZHJhdygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG1hcmtlci5yZW1vdmVFdmVudFBhcmVudCh0aGlzKTsKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKCiAgICAgICAgcmVtb3ZlTGF5ZXI6IGZ1bmN0aW9uIChsYXllcikgewogICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVNYXJrZXIobGF5ZXIsIHRydWUpOwogICAgICAgIH0sCiAgICAgICAgLyoKICAgICAgICByZW1vdmVMYXllcnM6IGZ1bmN0aW9uIChsYXllcnMpIHsKICAgICAgICAgICAgbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZU1hcmtlcihlbCwgZmFsc2UpOwogICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICAgICAgdGhpcy5fcmVkcmF3KCk7CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAgICAgKi8KICAgICAgICBjbGVhckxheWVyczogZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLl9sYXRsbmdzSWR4LmNsZWFyKCk7CiAgICAgICAgICAgIHRoaXMuX3BvaW50c0lkeC5jbGVhcigpOwogICAgICAgICAgICB0aGlzLl9jbGVhcigpOwogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBoYXNMYXllcjogZnVuY3Rpb24gKGxheWVyKSB7CiAgICAgICAgICAgIC8vIHJldHVybiB0aGlzLl9sYXRsbmdzSWR4LmFsbCgpLmluZGV4T2YobGF5ZXIpICE9PSAtMTsKICAgICAgICAgICAgcmV0dXJuIGxheWVyLl9ldmVudFBhcmVudHNbTC5VdGlsLnN0YW1wKHRoaXMpXTsgLy8gISEgdG8gY3V0IGNvcm5lcnMKICAgICAgICB9LAoKICAgICAgICBfaGlkZUNvbnRhaW5lcjogZnVuY3Rpb24gKGhpZGUpIHsKICAgICAgICAgICAgaWYgKHRoaXMuX2lzRW1wdHkgPT09IGhpZGUpIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIHRoaXMuX2lzRW1wdHkgPSBoaWRlOwogICAgICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUuZGlzcGxheSA9IGhpZGUgPyAnbm9uZScgOiAnaW5pdGlhbCc7CiAgICAgICAgfQogICAgfSk7CgogICAgTC5jYW52YXNJY29uTGF5ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgIHJldHVybiBuZXcgQ2FudmFzSWNvbkxheWVyKG9wdGlvbnMpOwogICAgfTsKCiAgICByZXR1cm4gQ2FudmFzSWNvbkxheWVyOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGxheWVyRmFjdG9yeTsKCgo7CiAgICByZXR1cm4gbW9kdWxlOwogIH0pKHt9KS5leHBvcnRzKEwpOwoKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAvLyAqKiogaW5jbHVkZWQ6IGV4dGVybmFsL2pxdWVyeS0zLjYuMC5taW4uanMgKioqCi8qISBqUXVlcnkgdjMuNi4wIHwgKGMpIE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi8KIWZ1bmN0aW9uKGUsdCl7InVzZSBzdHJpY3QiOyJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUuZG9jdW1lbnQ/dChlLCEwKTpmdW5jdGlvbihlKXtpZighZS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQiKTtyZXR1cm4gdChlKX06dChlKX0oInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oQyxlKXsidXNlIHN0cmljdCI7dmFyIHQ9W10scj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yscz10LnNsaWNlLGc9dC5mbGF0P2Z1bmN0aW9uKGUpe3JldHVybiB0LmZsYXQuY2FsbChlKX06ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY29uY2F0LmFwcGx5KFtdLGUpfSx1PXQucHVzaCxpPXQuaW5kZXhPZixuPXt9LG89bi50b1N0cmluZyx2PW4uaGFzT3duUHJvcGVydHksYT12LnRvU3RyaW5nLGw9YS5jYWxsKE9iamVjdCkseT17fSxtPWZ1bmN0aW9uKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlJiYibnVtYmVyIiE9dHlwZW9mIGUubm9kZVR5cGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlLml0ZW19LHg9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUmJmU9PT1lLndpbmRvd30sRT1DLmRvY3VtZW50LGM9e3R5cGU6ITAsc3JjOiEwLG5vbmNlOiEwLG5vTW9kdWxlOiEwfTtmdW5jdGlvbiBiKGUsdCxuKXt2YXIgcixpLG89KG49bnx8RSkuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7aWYoby50ZXh0PWUsdClmb3IociBpbiBjKShpPXRbcl18fHQuZ2V0QXR0cmlidXRlJiZ0LmdldEF0dHJpYnV0ZShyKSkmJm8uc2V0QXR0cmlidXRlKHIsaSk7bi5oZWFkLmFwcGVuZENoaWxkKG8pLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyl9ZnVuY3Rpb24gdyhlKXtyZXR1cm4gbnVsbD09ZT9lKyIiOiJvYmplY3QiPT10eXBlb2YgZXx8ImZ1bmN0aW9uIj09dHlwZW9mIGU/bltvLmNhbGwoZSldfHwib2JqZWN0Ijp0eXBlb2YgZX12YXIgZj0iMy42LjAiLFM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IFMuZm4uaW5pdChlLHQpfTtmdW5jdGlvbiBwKGUpe3ZhciB0PSEhZSYmImxlbmd0aCJpbiBlJiZlLmxlbmd0aCxuPXcoZSk7cmV0dXJuIW0oZSkmJiF4KGUpJiYoImFycmF5Ij09PW58fDA9PT10fHwibnVtYmVyIj09dHlwZW9mIHQmJjA8dCYmdC0xIGluIGUpfVMuZm49Uy5wcm90b3R5cGU9e2pxdWVyeTpmLGNvbnN0cnVjdG9yOlMsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBzLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9zLmNhbGwodGhpcyk6ZTwwP3RoaXNbZSt0aGlzLmxlbmd0aF06dGhpc1tlXX0scHVzaFN0YWNrOmZ1bmN0aW9uKGUpe3ZhciB0PVMubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGUpO3JldHVybiB0LnByZXZPYmplY3Q9dGhpcyx0fSxlYWNoOmZ1bmN0aW9uKGUpe3JldHVybiBTLmVhY2godGhpcyxlKX0sbWFwOmZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnB1c2hTdGFjayhTLm1hcCh0aGlzLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FsbChlLHQsZSl9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHMuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXZlbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhTLmdyZXAodGhpcyxmdW5jdGlvbihlLHQpe3JldHVybih0KzEpJTJ9KSl9LG9kZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhTLmdyZXAodGhpcyxmdW5jdGlvbihlLHQpe3JldHVybiB0JTJ9KSl9LGVxOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubGVuZ3RoLG49K2UrKGU8MD90OjApO3JldHVybiB0aGlzLnB1c2hTdGFjaygwPD1uJiZuPHQ/W3RoaXNbbl1dOltdKX0sZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJldk9iamVjdHx8dGhpcy5jb25zdHJ1Y3RvcigpfSxwdXNoOnUsc29ydDp0LnNvcnQsc3BsaWNlOnQuc3BsaWNlfSxTLmV4dGVuZD1TLmZuLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBlLHQsbixyLGksbyxhPWFyZ3VtZW50c1swXXx8e30scz0xLHU9YXJndW1lbnRzLmxlbmd0aCxsPSExO2ZvcigiYm9vbGVhbiI9PXR5cGVvZiBhJiYobD1hLGE9YXJndW1lbnRzW3NdfHx7fSxzKyspLCJvYmplY3QiPT10eXBlb2YgYXx8bShhKXx8KGE9e30pLHM9PT11JiYoYT10aGlzLHMtLSk7czx1O3MrKylpZihudWxsIT0oZT1hcmd1bWVudHNbc10pKWZvcih0IGluIGUpcj1lW3RdLCJfX3Byb3RvX18iIT09dCYmYSE9PXImJihsJiZyJiYoUy5pc1BsYWluT2JqZWN0KHIpfHwoaT1BcnJheS5pc0FycmF5KHIpKSk/KG49YVt0XSxvPWkmJiFBcnJheS5pc0FycmF5KG4pP1tdOml8fFMuaXNQbGFpbk9iamVjdChuKT9uOnt9LGk9ITEsYVt0XT1TLmV4dGVuZChsLG8scikpOnZvaWQgMCE9PXImJihhW3RdPXIpKTtyZXR1cm4gYX0sUy5leHRlbmQoe2V4cGFuZG86ImpRdWVyeSIrKGYrTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXEQvZywiIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoZSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQsbjtyZXR1cm4hKCFlfHwiW29iamVjdCBPYmplY3RdIiE9PW8uY2FsbChlKSkmJighKHQ9cihlKSl8fCJmdW5jdGlvbiI9PXR5cGVvZihuPXYuY2FsbCh0LCJjb25zdHJ1Y3RvciIpJiZ0LmNvbnN0cnVjdG9yKSYmYS5jYWxsKG4pPT09bCl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sZ2xvYmFsRXZhbDpmdW5jdGlvbihlLHQsbil7YihlLHtub25jZTp0JiZ0Lm5vbmNlfSxuKX0sZWFjaDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MDtpZihwKGUpKXtmb3Iobj1lLmxlbmd0aDtyPG47cisrKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVha31lbHNlIGZvcihyIGluIGUpaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrO3JldHVybiBlfSxtYWtlQXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHxbXTtyZXR1cm4gbnVsbCE9ZSYmKHAoT2JqZWN0KGUpKT9TLm1lcmdlKG4sInN0cmluZyI9PXR5cGVvZiBlP1tlXTplKTp1LmNhbGwobixlKSksbn0saW5BcnJheTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PXQ/LTE6aS5jYWxsKHQsZSxuKX0sbWVyZ2U6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49K3QubGVuZ3RoLHI9MCxpPWUubGVuZ3RoO3I8bjtyKyspZVtpKytdPXRbcl07cmV0dXJuIGUubGVuZ3RoPWksZX0sZ3JlcDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPVtdLGk9MCxvPWUubGVuZ3RoLGE9IW47aTxvO2krKykhdChlW2ldLGkpIT09YSYmci5wdXNoKGVbaV0pO3JldHVybiByfSxtYXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz0wLGE9W107aWYocChlKSlmb3Iocj1lLmxlbmd0aDtvPHI7bysrKW51bGwhPShpPXQoZVtvXSxvLG4pKSYmYS5wdXNoKGkpO2Vsc2UgZm9yKG8gaW4gZSludWxsIT0oaT10KGVbb10sbyxuKSkmJmEucHVzaChpKTtyZXR1cm4gZyhhKX0sZ3VpZDoxLHN1cHBvcnQ6eX0pLCJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJihTLmZuW1N5bWJvbC5pdGVyYXRvcl09dFtTeW1ib2wuaXRlcmF0b3JdKSxTLmVhY2goIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sIi5zcGxpdCgiICIpLGZ1bmN0aW9uKGUsdCl7blsiW29iamVjdCAiK3QrIl0iXT10LnRvTG93ZXJDYXNlKCl9KTt2YXIgZD1mdW5jdGlvbihuKXt2YXIgZSxkLGIsbyxpLGgsZixnLHcsdSxsLFQsQyxhLEUsdixzLGMseSxTPSJzaXp6bGUiKzEqbmV3IERhdGUscD1uLmRvY3VtZW50LGs9MCxyPTAsbT11ZSgpLHg9dWUoKSxBPXVlKCksTj11ZSgpLGo9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXQmJihsPSEwKSwwfSxEPXt9Lmhhc093blByb3BlcnR5LHQ9W10scT10LnBvcCxMPXQucHVzaCxIPXQucHVzaCxPPXQuc2xpY2UsUD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihlW25dPT09dClyZXR1cm4gbjtyZXR1cm4tMX0sUj0iY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWQiLE09IltcXHgyMFxcdFxcclxcblxcZl0iLEk9Iig/OlxcXFxbXFxkYS1mQS1GXXsxLDZ9IitNKyI/fFxcXFxbXlxcclxcblxcZl18W1xcdy1dfFteXDAtXFx4N2ZdKSsiLFc9IlxcWyIrTSsiKigiK0krIikoPzoiK00rIiooWypeJHwhfl0/PSkiK00rIiooPzonKCg/OlxcXFwufFteXFxcXCddKSopJ3xcIigoPzpcXFxcLnxbXlxcXFxcIl0pKilcInwoIitJKyIpKXwpIitNKyIqXFxdIixGPSI6KCIrSSsiKSg/OlxcKCgoJygoPzpcXFxcLnxbXlxcXFwnXSkqKSd8XCIoKD86XFxcXC58W15cXFxcXCJdKSopXCIpfCgoPzpcXFxcLnxbXlxcXFwoKVtcXF1dfCIrVysiKSopfC4qKVxcKXwpIixCPW5ldyBSZWdFeHAoTSsiKyIsImciKSwkPW5ldyBSZWdFeHAoIl4iK00rIit8KCg/Ol58W15cXFxcXSkoPzpcXFxcLikqKSIrTSsiKyQiLCJnIiksXz1uZXcgUmVnRXhwKCJeIitNKyIqLCIrTSsiKiIpLHo9bmV3IFJlZ0V4cCgiXiIrTSsiKihbPit+XXwiK00rIikiK00rIioiKSxVPW5ldyBSZWdFeHAoTSsifD4iKSxYPW5ldyBSZWdFeHAoRiksVj1uZXcgUmVnRXhwKCJeIitJKyIkIiksRz17SUQ6bmV3IFJlZ0V4cCgiXiMoIitJKyIpIiksQ0xBU1M6bmV3IFJlZ0V4cCgiXlxcLigiK0krIikiKSxUQUc6bmV3IFJlZ0V4cCgiXigiK0krInxbKl0pIiksQVRUUjpuZXcgUmVnRXhwKCJeIitXKSxQU0VVRE86bmV3IFJlZ0V4cCgiXiIrRiksQ0hJTEQ6bmV3IFJlZ0V4cCgiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFwoIitNKyIqKGV2ZW58b2RkfCgoWystXXwpKFxcZCopbnwpIitNKyIqKD86KFsrLV18KSIrTSsiKihcXGQrKXwpKSIrTSsiKlxcKXwpIiwiaSIpLGJvb2w6bmV3IFJlZ0V4cCgiXig/OiIrUisiKSQiLCJpIiksbmVlZHNDb250ZXh0Om5ldyBSZWdFeHAoIl4iK00rIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcKCIrTSsiKigoPzotXFxkKT9cXGQqKSIrTSsiKlxcKXwpKD89W14tXXwkKSIsImkiKX0sWT0vSFRNTCQvaSxRPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksSj0vXmhcZCQvaSxLPS9eW157XStce1xzKlxbbmF0aXZlIFx3LyxaPS9eKD86IyhbXHctXSspfChcdyspfFwuKFtcdy1dKykpJC8sZWU9L1srfl0vLHRlPW5ldyBSZWdFeHAoIlxcXFxbXFxkYS1mQS1GXXsxLDZ9IitNKyI/fFxcXFwoW15cXHJcXG5cXGZdKSIsImciKSxuZT1mdW5jdGlvbihlLHQpe3ZhciBuPSIweCIrZS5zbGljZSgxKS02NTUzNjtyZXR1cm4gdHx8KG48MD9TdHJpbmcuZnJvbUNoYXJDb2RlKG4rNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUobj4+MTB8NTUyOTYsMTAyMyZufDU2MzIwKSl9LHJlPS8oW1wwLVx4MWZceDdmXXxeLT9cZCl8Xi0kfFteXDAtXHgxZlx4N2YtXHVGRkZGXHctXS9nLGllPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/IlwwIj09PWU/Ilx1ZmZmZCI6ZS5zbGljZSgwLC0xKSsiXFwiK2UuY2hhckNvZGVBdChlLmxlbmd0aC0xKS50b1N0cmluZygxNikrIiAiOiJcXCIrZX0sb2U9ZnVuY3Rpb24oKXtUKCl9LGFlPWJlKGZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZS5kaXNhYmxlZCYmImZpZWxkc2V0Ij09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKX0se2RpcjoicGFyZW50Tm9kZSIsbmV4dDoibGVnZW5kIn0pO3RyeXtILmFwcGx5KHQ9Ty5jYWxsKHAuY2hpbGROb2RlcykscC5jaGlsZE5vZGVzKSx0W3AuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGUpe0g9e2FwcGx5OnQubGVuZ3RoP2Z1bmN0aW9uKGUsdCl7TC5hcHBseShlLE8uY2FsbCh0KSl9OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5sZW5ndGgscj0wO3doaWxlKGVbbisrXT10W3IrK10pO2UubGVuZ3RoPW4tMX19fWZ1bmN0aW9uIHNlKHQsZSxuLHIpe3ZhciBpLG8sYSxzLHUsbCxjLGY9ZSYmZS5vd25lckRvY3VtZW50LHA9ZT9lLm5vZGVUeXBlOjk7aWYobj1ufHxbXSwic3RyaW5nIiE9dHlwZW9mIHR8fCF0fHwxIT09cCYmOSE9PXAmJjExIT09cClyZXR1cm4gbjtpZighciYmKFQoZSksZT1lfHxDLEUpKXtpZigxMSE9PXAmJih1PVouZXhlYyh0KSkpaWYoaT11WzFdKXtpZig5PT09cCl7aWYoIShhPWUuZ2V0RWxlbWVudEJ5SWQoaSkpKXJldHVybiBuO2lmKGEuaWQ9PT1pKXJldHVybiBuLnB1c2goYSksbn1lbHNlIGlmKGYmJihhPWYuZ2V0RWxlbWVudEJ5SWQoaSkpJiZ5KGUsYSkmJmEuaWQ9PT1pKXJldHVybiBuLnB1c2goYSksbn1lbHNle2lmKHVbMl0pcmV0dXJuIEguYXBwbHkobixlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpKSxuO2lmKChpPXVbM10pJiZkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gSC5hcHBseShuLGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShpKSksbn1pZihkLnFzYSYmIU5bdCsiICJdJiYoIXZ8fCF2LnRlc3QodCkpJiYoMSE9PXB8fCJvYmplY3QiIT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSl7aWYoYz10LGY9ZSwxPT09cCYmKFUudGVzdCh0KXx8ei50ZXN0KHQpKSl7KGY9ZWUudGVzdCh0KSYmeWUoZS5wYXJlbnROb2RlKXx8ZSk9PT1lJiZkLnNjb3BlfHwoKHM9ZS5nZXRBdHRyaWJ1dGUoImlkIikpP3M9cy5yZXBsYWNlKHJlLGllKTplLnNldEF0dHJpYnV0ZSgiaWQiLHM9UykpLG89KGw9aCh0KSkubGVuZ3RoO3doaWxlKG8tLSlsW29dPShzPyIjIitzOiI6c2NvcGUiKSsiICIreGUobFtvXSk7Yz1sLmpvaW4oIiwiKX10cnl7cmV0dXJuIEguYXBwbHkobixmLnF1ZXJ5U2VsZWN0b3JBbGwoYykpLG59Y2F0Y2goZSl7Tih0LCEwKX1maW5hbGx5e3M9PT1TJiZlLnJlbW92ZUF0dHJpYnV0ZSgiaWQiKX19fXJldHVybiBnKHQucmVwbGFjZSgkLCIkMSIpLGUsbixyKX1mdW5jdGlvbiB1ZSgpe3ZhciByPVtdO3JldHVybiBmdW5jdGlvbiBlKHQsbil7cmV0dXJuIHIucHVzaCh0KyIgIik+Yi5jYWNoZUxlbmd0aCYmZGVsZXRlIGVbci5zaGlmdCgpXSxlW3QrIiAiXT1ufX1mdW5jdGlvbiBsZShlKXtyZXR1cm4gZVtTXT0hMCxlfWZ1bmN0aW9uIGNlKGUpe3ZhciB0PUMuY3JlYXRlRWxlbWVudCgiZmllbGRzZXQiKTt0cnl7cmV0dXJuISFlKHQpfWNhdGNoKGUpe3JldHVybiExfWZpbmFsbHl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfX1mdW5jdGlvbiBmZShlLHQpe3ZhciBuPWUuc3BsaXQoInwiKSxyPW4ubGVuZ3RoO3doaWxlKHItLSliLmF0dHJIYW5kbGVbbltyXV09dH1mdW5jdGlvbiBwZShlLHQpe3ZhciBuPXQmJmUscj1uJiYxPT09ZS5ub2RlVHlwZSYmMT09PXQubm9kZVR5cGUmJmUuc291cmNlSW5kZXgtdC5zb3VyY2VJbmRleDtpZihyKXJldHVybiByO2lmKG4pd2hpbGUobj1uLm5leHRTaWJsaW5nKWlmKG49PT10KXJldHVybi0xO3JldHVybiBlPzE6LTF9ZnVuY3Rpb24gZGUodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiJpbnB1dCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJmUudHlwZT09PXR9fWZ1bmN0aW9uIGhlKG4pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKCJpbnB1dCI9PT10fHwiYnV0dG9uIj09PXQpJiZlLnR5cGU9PT1ufX1mdW5jdGlvbiBnZSh0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuImZvcm0iaW4gZT9lLnBhcmVudE5vZGUmJiExPT09ZS5kaXNhYmxlZD8ibGFiZWwiaW4gZT8ibGFiZWwiaW4gZS5wYXJlbnROb2RlP2UucGFyZW50Tm9kZS5kaXNhYmxlZD09PXQ6ZS5kaXNhYmxlZD09PXQ6ZS5pc0Rpc2FibGVkPT09dHx8ZS5pc0Rpc2FibGVkIT09IXQmJmFlKGUpPT09dDplLmRpc2FibGVkPT09dDoibGFiZWwiaW4gZSYmZS5kaXNhYmxlZD09PXR9fWZ1bmN0aW9uIHZlKGEpe3JldHVybiBsZShmdW5jdGlvbihvKXtyZXR1cm4gbz0rbyxsZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShbXSxlLmxlbmd0aCxvKSxpPXIubGVuZ3RoO3doaWxlKGktLSllW249cltpXV0mJihlW25dPSEodFtuXT1lW25dKSl9KX0pfWZ1bmN0aW9uIHllKGUpe3JldHVybiBlJiYidW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmV9Zm9yKGUgaW4gZD1zZS5zdXBwb3J0PXt9LGk9c2UuaXNYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5uYW1lc3BhY2VVUkksbj1lJiYoZS5vd25lckRvY3VtZW50fHxlKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIVkudGVzdCh0fHxuJiZuLm5vZGVOYW1lfHwiSFRNTCIpfSxUPXNlLnNldERvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciB0LG4scj1lP2Uub3duZXJEb2N1bWVudHx8ZTpwO3JldHVybiByIT1DJiY5PT09ci5ub2RlVHlwZSYmci5kb2N1bWVudEVsZW1lbnQmJihhPShDPXIpLmRvY3VtZW50RWxlbWVudCxFPSFpKEMpLHAhPUMmJihuPUMuZGVmYXVsdFZpZXcpJiZuLnRvcCE9PW4mJihuLmFkZEV2ZW50TGlzdGVuZXI/bi5hZGRFdmVudExpc3RlbmVyKCJ1bmxvYWQiLG9lLCExKTpuLmF0dGFjaEV2ZW50JiZuLmF0dGFjaEV2ZW50KCJvbnVubG9hZCIsb2UpKSxkLnNjb3BlPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBhLmFwcGVuZENoaWxkKGUpLmFwcGVuZENoaWxkKEMuY3JlYXRlRWxlbWVudCgiZGl2IikpLCJ1bmRlZmluZWQiIT10eXBlb2YgZS5xdWVyeVNlbGVjdG9yQWxsJiYhZS5xdWVyeVNlbGVjdG9yQWxsKCI6c2NvcGUgZmllbGRzZXQgZGl2IikubGVuZ3RofSksZC5hdHRyaWJ1dGVzPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmNsYXNzTmFtZT0iaSIsIWUuZ2V0QXR0cmlidXRlKCJjbGFzc05hbWUiKX0pLGQuZ2V0RWxlbWVudHNCeVRhZ05hbWU9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuYXBwZW5kQ2hpbGQoQy5jcmVhdGVDb21tZW50KCIiKSksIWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKS5sZW5ndGh9KSxkLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9Sy50ZXN0KEMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksZC5nZXRCeUlkPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBhLmFwcGVuZENoaWxkKGUpLmlkPVMsIUMuZ2V0RWxlbWVudHNCeU5hbWV8fCFDLmdldEVsZW1lbnRzQnlOYW1lKFMpLmxlbmd0aH0pLGQuZ2V0QnlJZD8oYi5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHRlLG5lKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKCJpZCIpPT09dH19LGIuZmluZC5JRD1mdW5jdGlvbihlLHQpe2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmRSl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbj9bbl06W119fSk6KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciBuPWUucmVwbGFjZSh0ZSxuZSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PSJ1bmRlZmluZWQiIT10eXBlb2YgZS5nZXRBdHRyaWJ1dGVOb2RlJiZlLmdldEF0dHJpYnV0ZU5vZGUoImlkIik7cmV0dXJuIHQmJnQudmFsdWU9PT1ufX0sYi5maW5kLklEPWZ1bmN0aW9uKGUsdCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiB0LmdldEVsZW1lbnRCeUlkJiZFKXt2YXIgbixyLGksbz10LmdldEVsZW1lbnRCeUlkKGUpO2lmKG8pe2lmKChuPW8uZ2V0QXR0cmlidXRlTm9kZSgiaWQiKSkmJm4udmFsdWU9PT1lKXJldHVybltvXTtpPXQuZ2V0RWxlbWVudHNCeU5hbWUoZSkscj0wO3doaWxlKG89aVtyKytdKWlmKChuPW8uZ2V0QXR0cmlidXRlTm9kZSgiaWQiKSkmJm4udmFsdWU9PT1lKXJldHVybltvXX1yZXR1cm5bXX19KSxiLmZpbmQuVEFHPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oZSx0KXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeVRhZ05hbWU/dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTpkLnFzYT90LnF1ZXJ5U2VsZWN0b3JBbGwoZSk6dm9pZCAwfTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9W10saT0wLG89dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTtpZigiKiI9PT1lKXt3aGlsZShuPW9baSsrXSkxPT09bi5ub2RlVHlwZSYmci5wdXNoKG4pO3JldHVybiByfXJldHVybiBvfSxiLmZpbmQuQ0xBU1M9ZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZmdW5jdGlvbihlLHQpe2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZFKXJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSl9LHM9W10sdj1bXSwoZC5xc2E9Sy50ZXN0KEMucXVlcnlTZWxlY3RvckFsbCkpJiYoY2UoZnVuY3Rpb24oZSl7dmFyIHQ7YS5hcHBlbmRDaGlsZChlKS5pbm5lckhUTUw9IjxhIGlkPSciK1MrIic+PC9hPjxzZWxlY3QgaWQ9JyIrUysiLVxyXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+IixlLnF1ZXJ5U2VsZWN0b3JBbGwoIlttc2FsbG93Y2FwdHVyZV49JyddIikubGVuZ3RoJiZ2LnB1c2goIlsqXiRdPSIrTSsiKig/OicnfFwiXCIpIiksZS5xdWVyeVNlbGVjdG9yQWxsKCJbc2VsZWN0ZWRdIikubGVuZ3RofHx2LnB1c2goIlxcWyIrTSsiKig/OnZhbHVlfCIrUisiKSIpLGUucXVlcnlTZWxlY3RvckFsbCgiW2lkfj0iK1MrIi1dIikubGVuZ3RofHx2LnB1c2goIn49IiksKHQ9Qy5jcmVhdGVFbGVtZW50KCJpbnB1dCIpKS5zZXRBdHRyaWJ1dGUoIm5hbWUiLCIiKSxlLmFwcGVuZENoaWxkKHQpLGUucXVlcnlTZWxlY3RvckFsbCgiW25hbWU9JyddIikubGVuZ3RofHx2LnB1c2goIlxcWyIrTSsiKm5hbWUiK00rIio9IitNKyIqKD86Jyd8XCJcIikiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIjpjaGVja2VkIikubGVuZ3RofHx2LnB1c2goIjpjaGVja2VkIiksZS5xdWVyeVNlbGVjdG9yQWxsKCJhIyIrUysiKyoiKS5sZW5ndGh8fHYucHVzaCgiLiMuK1srfl0iKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIlxcXGYiKSx2LnB1c2goIltcXHJcXG5cXGZdIil9KSxjZShmdW5jdGlvbihlKXtlLmlubmVySFRNTD0iPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT48c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+Ijt2YXIgdD1DLmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7dC5zZXRBdHRyaWJ1dGUoInR5cGUiLCJoaWRkZW4iKSxlLmFwcGVuZENoaWxkKHQpLnNldEF0dHJpYnV0ZSgibmFtZSIsIkQiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIltuYW1lPWRdIikubGVuZ3RoJiZ2LnB1c2goIm5hbWUiK00rIipbKl4kfCF+XT89IiksMiE9PWUucXVlcnlTZWxlY3RvckFsbCgiOmVuYWJsZWQiKS5sZW5ndGgmJnYucHVzaCgiOmVuYWJsZWQiLCI6ZGlzYWJsZWQiKSxhLmFwcGVuZENoaWxkKGUpLmRpc2FibGVkPSEwLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoIjpkaXNhYmxlZCIpLmxlbmd0aCYmdi5wdXNoKCI6ZW5hYmxlZCIsIjpkaXNhYmxlZCIpLGUucXVlcnlTZWxlY3RvckFsbCgiKiw6eCIpLHYucHVzaCgiLC4qOiIpfSkpLChkLm1hdGNoZXNTZWxlY3Rvcj1LLnRlc3QoYz1hLm1hdGNoZXN8fGEud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxhLm1vek1hdGNoZXNTZWxlY3Rvcnx8YS5vTWF0Y2hlc1NlbGVjdG9yfHxhLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJmNlKGZ1bmN0aW9uKGUpe2QuZGlzY29ubmVjdGVkTWF0Y2g9Yy5jYWxsKGUsIioiKSxjLmNhbGwoZSwiW3MhPScnXTp4Iikscy5wdXNoKCIhPSIsRil9KSx2PXYubGVuZ3RoJiZuZXcgUmVnRXhwKHYuam9pbigifCIpKSxzPXMubGVuZ3RoJiZuZXcgUmVnRXhwKHMuam9pbigifCIpKSx0PUsudGVzdChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx5PXR8fEsudGVzdChhLmNvbnRhaW5zKT9mdW5jdGlvbihlLHQpe3ZhciBuPTk9PT1lLm5vZGVUeXBlP2UuZG9jdW1lbnRFbGVtZW50OmUscj10JiZ0LnBhcmVudE5vZGU7cmV0dXJuIGU9PT1yfHwhKCFyfHwxIT09ci5ub2RlVHlwZXx8IShuLmNvbnRhaW5zP24uY29udGFpbnMocik6ZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihyKSkpfTpmdW5jdGlvbihlLHQpe2lmKHQpd2hpbGUodD10LnBhcmVudE5vZGUpaWYodD09PWUpcmV0dXJuITA7cmV0dXJuITF9LGo9dD9mdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBsPSEwLDA7dmFyIG49IWUuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIXQuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIG58fCgxJihuPShlLm93bmVyRG9jdW1lbnR8fGUpPT0odC5vd25lckRvY3VtZW50fHx0KT9lLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpOjEpfHwhZC5zb3J0RGV0YWNoZWQmJnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSk9PT1uP2U9PUN8fGUub3duZXJEb2N1bWVudD09cCYmeShwLGUpPy0xOnQ9PUN8fHQub3duZXJEb2N1bWVudD09cCYmeShwLHQpPzE6dT9QKHUsZSktUCh1LHQpOjA6NCZuPy0xOjEpfTpmdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBsPSEwLDA7dmFyIG4scj0wLGk9ZS5wYXJlbnROb2RlLG89dC5wYXJlbnROb2RlLGE9W2VdLHM9W3RdO2lmKCFpfHwhbylyZXR1cm4gZT09Qz8tMTp0PT1DPzE6aT8tMTpvPzE6dT9QKHUsZSktUCh1LHQpOjA7aWYoaT09PW8pcmV0dXJuIHBlKGUsdCk7bj1lO3doaWxlKG49bi5wYXJlbnROb2RlKWEudW5zaGlmdChuKTtuPXQ7d2hpbGUobj1uLnBhcmVudE5vZGUpcy51bnNoaWZ0KG4pO3doaWxlKGFbcl09PT1zW3JdKXIrKztyZXR1cm4gcj9wZShhW3JdLHNbcl0pOmFbcl09PXA/LTE6c1tyXT09cD8xOjB9KSxDfSxzZS5tYXRjaGVzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHNlKGUsbnVsbCxudWxsLHQpfSxzZS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oZSx0KXtpZihUKGUpLGQubWF0Y2hlc1NlbGVjdG9yJiZFJiYhTlt0KyIgIl0mJighc3x8IXMudGVzdCh0KSkmJighdnx8IXYudGVzdCh0KSkpdHJ5e3ZhciBuPWMuY2FsbChlLHQpO2lmKG58fGQuZGlzY29ubmVjdGVkTWF0Y2h8fGUuZG9jdW1lbnQmJjExIT09ZS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gbn1jYXRjaChlKXtOKHQsITApfXJldHVybiAwPHNlKHQsQyxudWxsLFtlXSkubGVuZ3RofSxzZS5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT1DJiZUKGUpLHkoZSx0KX0sc2UuYXR0cj1mdW5jdGlvbihlLHQpeyhlLm93bmVyRG9jdW1lbnR8fGUpIT1DJiZUKGUpO3ZhciBuPWIuYXR0ckhhbmRsZVt0LnRvTG93ZXJDYXNlKCldLHI9biYmRC5jYWxsKGIuYXR0ckhhbmRsZSx0LnRvTG93ZXJDYXNlKCkpP24oZSx0LCFFKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PXI/cjpkLmF0dHJpYnV0ZXN8fCFFP2UuZ2V0QXR0cmlidXRlKHQpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0sc2UuZXNjYXBlPWZ1bmN0aW9uKGUpe3JldHVybihlKyIiKS5yZXBsYWNlKHJlLGllKX0sc2UuZXJyb3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiAiK2UpfSxzZS51bmlxdWVTb3J0PWZ1bmN0aW9uKGUpe3ZhciB0LG49W10scj0wLGk9MDtpZihsPSFkLmRldGVjdER1cGxpY2F0ZXMsdT0hZC5zb3J0U3RhYmxlJiZlLnNsaWNlKDApLGUuc29ydChqKSxsKXt3aGlsZSh0PWVbaSsrXSl0PT09ZVtpXSYmKHI9bi5wdXNoKGkpKTt3aGlsZShyLS0pZS5zcGxpY2UobltyXSwxKX1yZXR1cm4gdT1udWxsLGV9LG89c2UuZ2V0VGV4dD1mdW5jdGlvbihlKXt2YXIgdCxuPSIiLHI9MCxpPWUubm9kZVR5cGU7aWYoaSl7aWYoMT09PWl8fDk9PT1pfHwxMT09PWkpe2lmKCJzdHJpbmciPT10eXBlb2YgZS50ZXh0Q29udGVudClyZXR1cm4gZS50ZXh0Q29udGVudDtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpbis9byhlKX1lbHNlIGlmKDM9PT1pfHw0PT09aSlyZXR1cm4gZS5ub2RlVmFsdWV9ZWxzZSB3aGlsZSh0PWVbcisrXSluKz1vKHQpO3JldHVybiBufSwoYj1zZS5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzpsZSxtYXRjaDpHLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7Ij4iOntkaXI6InBhcmVudE5vZGUiLGZpcnN0OiEwfSwiICI6e2RpcjoicGFyZW50Tm9kZSJ9LCIrIjp7ZGlyOiJwcmV2aW91c1NpYmxpbmciLGZpcnN0OiEwfSwifiI6e2RpcjoicHJldmlvdXNTaWJsaW5nIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UodGUsbmUpLGVbM109KGVbM118fGVbNF18fGVbNV18fCIiKS5yZXBsYWNlKHRlLG5lKSwifj0iPT09ZVsyXSYmKGVbM109IiAiK2VbM10rIiAiKSxlLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0udG9Mb3dlckNhc2UoKSwibnRoIj09PWVbMV0uc2xpY2UoMCwzKT8oZVszXXx8c2UuZXJyb3IoZVswXSksZVs0XT0rKGVbNF0/ZVs1XSsoZVs2XXx8MSk6MiooImV2ZW4iPT09ZVszXXx8Im9kZCI9PT1lWzNdKSksZVs1XT0rKGVbN10rZVs4XXx8Im9kZCI9PT1lWzNdKSk6ZVszXSYmc2UuZXJyb3IoZVswXSksZX0sUFNFVURPOmZ1bmN0aW9uKGUpe3ZhciB0LG49IWVbNl0mJmVbMl07cmV0dXJuIEcuQ0hJTEQudGVzdChlWzBdKT9udWxsOihlWzNdP2VbMl09ZVs0XXx8ZVs1XXx8IiI6biYmWC50ZXN0KG4pJiYodD1oKG4sITApKSYmKHQ9bi5pbmRleE9mKCIpIixuLmxlbmd0aC10KS1uLmxlbmd0aCkmJihlWzBdPWVbMF0uc2xpY2UoMCx0KSxlWzJdPW4uc2xpY2UoMCx0KSksZS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSh0ZSxuZSkudG9Mb3dlckNhc2UoKTtyZXR1cm4iKiI9PT1lP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGUpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10fX0sQ0xBU1M6ZnVuY3Rpb24oZSl7dmFyIHQ9bVtlKyIgIl07cmV0dXJuIHR8fCh0PW5ldyBSZWdFeHAoIihefCIrTSsiKSIrZSsiKCIrTSsifCQpIikpJiZtKGUsZnVuY3Rpb24oZSl7cmV0dXJuIHQudGVzdCgic3RyaW5nIj09dHlwZW9mIGUuY2xhc3NOYW1lJiZlLmNsYXNzTmFtZXx8InVuZGVmaW5lZCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoImNsYXNzIil8fCIiKX0pfSxBVFRSOmZ1bmN0aW9uKG4scixpKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9c2UuYXR0cihlLG4pO3JldHVybiBudWxsPT10PyIhPSI9PT1yOiFyfHwodCs9IiIsIj0iPT09cj90PT09aToiIT0iPT09cj90IT09aToiXj0iPT09cj9pJiYwPT09dC5pbmRleE9mKGkpOiIqPSI9PT1yP2kmJi0xPHQuaW5kZXhPZihpKToiJD0iPT09cj9pJiZ0LnNsaWNlKC1pLmxlbmd0aCk9PT1pOiJ+PSI9PT1yPy0xPCgiICIrdC5yZXBsYWNlKEIsIiAiKSsiICIpLmluZGV4T2YoaSk6Inw9Ij09PXImJih0PT09aXx8dC5zbGljZSgwLGkubGVuZ3RoKzEpPT09aSsiLSIpKX19LENISUxEOmZ1bmN0aW9uKGgsZSx0LGcsdil7dmFyIHk9Im50aCIhPT1oLnNsaWNlKDAsMyksbT0ibGFzdCIhPT1oLnNsaWNlKC00KSx4PSJvZi10eXBlIj09PWU7cmV0dXJuIDE9PT1nJiYwPT09dj9mdW5jdGlvbihlKXtyZXR1cm4hIWUucGFyZW50Tm9kZX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPXkhPT1tPyJuZXh0U2libGluZyI6InByZXZpb3VzU2libGluZyIsYz1lLnBhcmVudE5vZGUsZj14JiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkscD0hbiYmIXgsZD0hMTtpZihjKXtpZih5KXt3aGlsZShsKXthPWU7d2hpbGUoYT1hW2xdKWlmKHg/YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09ZjoxPT09YS5ub2RlVHlwZSlyZXR1cm4hMTt1PWw9Im9ubHkiPT09aCYmIXUmJiJuZXh0U2libGluZyJ9cmV0dXJuITB9aWYodT1bbT9jLmZpcnN0Q2hpbGQ6Yy5sYXN0Q2hpbGRdLG0mJnApe2Q9KHM9KHI9KGk9KG89KGE9YylbU118fChhW1NdPXt9KSlbYS51bmlxdWVJRF18fChvW2EudW5pcXVlSURdPXt9KSlbaF18fFtdKVswXT09PWsmJnJbMV0pJiZyWzJdLGE9cyYmYy5jaGlsZE5vZGVzW3NdO3doaWxlKGE9KytzJiZhJiZhW2xdfHwoZD1zPTApfHx1LnBvcCgpKWlmKDE9PT1hLm5vZGVUeXBlJiYrK2QmJmE9PT1lKXtpW2hdPVtrLHMsZF07YnJlYWt9fWVsc2UgaWYocCYmKGQ9cz0ocj0oaT0obz0oYT1lKVtTXXx8KGFbU109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXXx8W10pWzBdPT09ayYmclsxXSksITE9PT1kKXdoaWxlKGE9KytzJiZhJiZhW2xdfHwoZD1zPTApfHx1LnBvcCgpKWlmKCh4P2Eubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWY6MT09PWEubm9kZVR5cGUpJiYrK2QmJihwJiYoKGk9KG89YVtTXXx8KGFbU109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXT1bayxkXSksYT09PWUpKWJyZWFrO3JldHVybihkLT12KT09PWd8fGQlZz09MCYmMDw9ZC9nfX19LFBTRVVETzpmdW5jdGlvbihlLG8pe3ZhciB0LGE9Yi5wc2V1ZG9zW2VdfHxiLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXXx8c2UuZXJyb3IoInVuc3VwcG9ydGVkIHBzZXVkbzogIitlKTtyZXR1cm4gYVtTXT9hKG8pOjE8YS5sZW5ndGg/KHQ9W2UsZSwiIixvXSxiLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKT9sZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShlLG8pLGk9ci5sZW5ndGg7d2hpbGUoaS0tKWVbbj1QKGUscltpXSldPSEodFtuXT1yW2ldKX0pOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsMCx0KX0pOmF9fSxwc2V1ZG9zOntub3Q6bGUoZnVuY3Rpb24oZSl7dmFyIHI9W10saT1bXSxzPWYoZS5yZXBsYWNlKCQsIiQxIikpO3JldHVybiBzW1NdP2xlKGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG89cyhlLG51bGwscixbXSksYT1lLmxlbmd0aDt3aGlsZShhLS0pKGk9b1thXSkmJihlW2FdPSEodFthXT1pKSl9KTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHJbMF09ZSxzKHIsbnVsbCxuLGkpLHJbMF09bnVsbCwhaS5wb3AoKX19KSxoYXM6bGUoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiAwPHNlKHQsZSkubGVuZ3RofX0pLGNvbnRhaW5zOmxlKGZ1bmN0aW9uKHQpe3JldHVybiB0PXQucmVwbGFjZSh0ZSxuZSksZnVuY3Rpb24oZSl7cmV0dXJuLTE8KGUudGV4dENvbnRlbnR8fG8oZSkpLmluZGV4T2YodCl9fSksbGFuZzpsZShmdW5jdGlvbihuKXtyZXR1cm4gVi50ZXN0KG58fCIiKXx8c2UuZXJyb3IoInVuc3VwcG9ydGVkIGxhbmc6ICIrbiksbj1uLnJlcGxhY2UodGUsbmUpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oZSl7dmFyIHQ7ZG97aWYodD1FP2UubGFuZzplLmdldEF0dHJpYnV0ZSgieG1sOmxhbmciKXx8ZS5nZXRBdHRyaWJ1dGUoImxhbmciKSlyZXR1cm4odD10LnRvTG93ZXJDYXNlKCkpPT09bnx8MD09PXQuaW5kZXhPZihuKyItIil9d2hpbGUoKGU9ZS5wYXJlbnROb2RlKSYmMT09PWUubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihlKXt2YXIgdD1uLmxvY2F0aW9uJiZuLmxvY2F0aW9uLmhhc2g7cmV0dXJuIHQmJnQuc2xpY2UoMSk9PT1lLmlkfSxyb290OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09YX0sZm9jdXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1DLmFjdGl2ZUVsZW1lbnQmJighQy5oYXNGb2N1c3x8Qy5oYXNGb2N1cygpKSYmISEoZS50eXBlfHxlLmhyZWZ8fH5lLnRhYkluZGV4KX0sZW5hYmxlZDpnZSghMSksZGlzYWJsZWQ6Z2UoITApLGNoZWNrZWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT10JiYhIWUuY2hlY2tlZHx8Im9wdGlvbiI9PT10JiYhIWUuc2VsZWN0ZWR9LHNlbGVjdGVkOmZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LCEwPT09ZS5zZWxlY3RlZH0sZW1wdHk6ZnVuY3Rpb24oZSl7Zm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKWlmKGUubm9kZVR5cGU8NilyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGUpe3JldHVybiFiLnBzZXVkb3MuZW1wdHkoZSl9LGhlYWRlcjpmdW5jdGlvbihlKXtyZXR1cm4gSi50ZXN0KGUubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihlKXtyZXR1cm4gUS50ZXN0KGUubm9kZU5hbWUpfSxidXR0b246ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT10JiYiYnV0dG9uIj09PWUudHlwZXx8ImJ1dHRvbiI9PT10fSx0ZXh0OmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiJpbnB1dCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJiJ0ZXh0Ij09PWUudHlwZSYmKG51bGw9PSh0PWUuZ2V0QXR0cmlidXRlKCJ0eXBlIikpfHwidGV4dCI9PT10LnRvTG93ZXJDYXNlKCkpfSxmaXJzdDp2ZShmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6dmUoZnVuY3Rpb24oZSx0KXtyZXR1cm5bdC0xXX0pLGVxOnZlKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5bbjwwP24rdDpuXX0pLGV2ZW46dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxvZGQ6dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MTtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxsdDp2ZShmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPW48MD9uK3Q6dDxuP3Q6bjswPD0tLXI7KWUucHVzaChyKTtyZXR1cm4gZX0pLGd0OnZlKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bjwwP24rdDpuOysrcjx0OyllLnB1c2gocik7cmV0dXJuIGV9KX19KS5wc2V1ZG9zLm50aD1iLnBzZXVkb3MuZXEse3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWIucHNldWRvc1tlXT1kZShlKTtmb3IoZSBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWIucHNldWRvc1tlXT1oZShlKTtmdW5jdGlvbiBtZSgpe31mdW5jdGlvbiB4ZShlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoLHI9IiI7dDxuO3QrKylyKz1lW3RdLnZhbHVlO3JldHVybiByfWZ1bmN0aW9uIGJlKHMsZSx0KXt2YXIgdT1lLmRpcixsPWUubmV4dCxjPWx8fHUsZj10JiYicGFyZW50Tm9kZSI9PT1jLHA9cisrO3JldHVybiBlLmZpcnN0P2Z1bmN0aW9uKGUsdCxuKXt3aGlsZShlPWVbdV0paWYoMT09PWUubm9kZVR5cGV8fGYpcmV0dXJuIHMoZSx0LG4pO3JldHVybiExfTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGE9W2sscF07aWYobil7d2hpbGUoZT1lW3VdKWlmKCgxPT09ZS5ub2RlVHlwZXx8ZikmJnMoZSx0LG4pKXJldHVybiEwfWVsc2Ugd2hpbGUoZT1lW3VdKWlmKDE9PT1lLm5vZGVUeXBlfHxmKWlmKGk9KG89ZVtTXXx8KGVbU109e30pKVtlLnVuaXF1ZUlEXXx8KG9bZS51bmlxdWVJRF09e30pLGwmJmw9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpZT1lW3VdfHxlO2Vsc2V7aWYoKHI9aVtjXSkmJnJbMF09PT1rJiZyWzFdPT09cClyZXR1cm4gYVsyXT1yWzJdO2lmKChpW2NdPWEpWzJdPXMoZSx0LG4pKXJldHVybiEwfXJldHVybiExfX1mdW5jdGlvbiB3ZShpKXtyZXR1cm4gMTxpLmxlbmd0aD9mdW5jdGlvbihlLHQsbil7dmFyIHI9aS5sZW5ndGg7d2hpbGUoci0tKWlmKCFpW3JdKGUsdCxuKSlyZXR1cm4hMTtyZXR1cm4hMH06aVswXX1mdW5jdGlvbiBUZShlLHQsbixyLGkpe2Zvcih2YXIgbyxhPVtdLHM9MCx1PWUubGVuZ3RoLGw9bnVsbCE9dDtzPHU7cysrKShvPWVbc10pJiYobiYmIW4obyxyLGkpfHwoYS5wdXNoKG8pLGwmJnQucHVzaChzKSkpO3JldHVybiBhfWZ1bmN0aW9uIENlKGQsaCxnLHYseSxlKXtyZXR1cm4gdiYmIXZbU10mJih2PUNlKHYpKSx5JiYheVtTXSYmKHk9Q2UoeSxlKSksbGUoZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHM9W10sdT1bXSxsPXQubGVuZ3RoLGM9ZXx8ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj0wLGk9dC5sZW5ndGg7cjxpO3IrKylzZShlLHRbcl0sbik7cmV0dXJuIG59KGh8fCIqIixuLm5vZGVUeXBlP1tuXTpuLFtdKSxmPSFkfHwhZSYmaD9jOlRlKGMscyxkLG4scikscD1nP3l8fChlP2Q6bHx8dik/W106dDpmO2lmKGcmJmcoZixwLG4sciksdil7aT1UZShwLHUpLHYoaSxbXSxuLHIpLG89aS5sZW5ndGg7d2hpbGUoby0tKShhPWlbb10pJiYocFt1W29dXT0hKGZbdVtvXV09YSkpfWlmKGUpe2lmKHl8fGQpe2lmKHkpe2k9W10sbz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJmkucHVzaChmW29dPWEpO3kobnVsbCxwPVtdLGkscil9bz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJi0xPChpPXk/UChlLGEpOnNbb10pJiYoZVtpXT0hKHRbaV09YSkpfX1lbHNlIHA9VGUocD09PXQ/cC5zcGxpY2UobCxwLmxlbmd0aCk6cCkseT95KG51bGwsdCxwLHIpOkguYXBwbHkodCxwKX0pfWZ1bmN0aW9uIEVlKGUpe2Zvcih2YXIgaSx0LG4scj1lLmxlbmd0aCxvPWIucmVsYXRpdmVbZVswXS50eXBlXSxhPW98fGIucmVsYXRpdmVbIiAiXSxzPW8/MTowLHU9YmUoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1pfSxhLCEwKSxsPWJlKGZ1bmN0aW9uKGUpe3JldHVybi0xPFAoaSxlKX0sYSwhMCksYz1bZnVuY3Rpb24oZSx0LG4pe3ZhciByPSFvJiYobnx8dCE9PXcpfHwoKGk9dCkubm9kZVR5cGU/dShlLHQsbik6bChlLHQsbikpO3JldHVybiBpPW51bGwscn1dO3M8cjtzKyspaWYodD1iLnJlbGF0aXZlW2Vbc10udHlwZV0pYz1bYmUod2UoYyksdCldO2Vsc2V7aWYoKHQ9Yi5maWx0ZXJbZVtzXS50eXBlXS5hcHBseShudWxsLGVbc10ubWF0Y2hlcykpW1NdKXtmb3Iobj0rK3M7bjxyO24rKylpZihiLnJlbGF0aXZlW2Vbbl0udHlwZV0pYnJlYWs7cmV0dXJuIENlKDE8cyYmd2UoYyksMTxzJiZ4ZShlLnNsaWNlKDAscy0xKS5jb25jYXQoe3ZhbHVlOiIgIj09PWVbcy0yXS50eXBlPyIqIjoiIn0pKS5yZXBsYWNlKCQsIiQxIiksdCxzPG4mJkVlKGUuc2xpY2UocyxuKSksbjxyJiZFZShlPWUuc2xpY2UobikpLG48ciYmeGUoZSkpfWMucHVzaCh0KX1yZXR1cm4gd2UoYyl9cmV0dXJuIG1lLnByb3RvdHlwZT1iLmZpbHRlcnM9Yi5wc2V1ZG9zLGIuc2V0RmlsdGVycz1uZXcgbWUsaD1zZS50b2tlbml6ZT1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGEscyx1LGw9eFtlKyIgIl07aWYobClyZXR1cm4gdD8wOmwuc2xpY2UoMCk7YT1lLHM9W10sdT1iLnByZUZpbHRlcjt3aGlsZShhKXtmb3IobyBpbiBuJiYhKHI9Xy5leGVjKGEpKXx8KHImJihhPWEuc2xpY2UoclswXS5sZW5ndGgpfHxhKSxzLnB1c2goaT1bXSkpLG49ITEsKHI9ei5leGVjKGEpKSYmKG49ci5zaGlmdCgpLGkucHVzaCh7dmFsdWU6bix0eXBlOnJbMF0ucmVwbGFjZSgkLCIgIil9KSxhPWEuc2xpY2Uobi5sZW5ndGgpKSxiLmZpbHRlcikhKHI9R1tvXS5leGVjKGEpKXx8dVtvXSYmIShyPXVbb10ocikpfHwobj1yLnNoaWZ0KCksaS5wdXNoKHt2YWx1ZTpuLHR5cGU6byxtYXRjaGVzOnJ9KSxhPWEuc2xpY2Uobi5sZW5ndGgpKTtpZighbilicmVha31yZXR1cm4gdD9hLmxlbmd0aDphP3NlLmVycm9yKGUpOngoZSxzKS5zbGljZSgwKX0sZj1zZS5jb21waWxlPWZ1bmN0aW9uKGUsdCl7dmFyIG4sdix5LG0seCxyLGk9W10sbz1bXSxhPUFbZSsiICJdO2lmKCFhKXt0fHwodD1oKGUpKSxuPXQubGVuZ3RoO3doaWxlKG4tLSkoYT1FZSh0W25dKSlbU10/aS5wdXNoKGEpOm8ucHVzaChhKTsoYT1BKGUsKHY9byxtPTA8KHk9aSkubGVuZ3RoLHg9MDx2Lmxlbmd0aCxyPWZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHU9MCxsPSIwIixjPWUmJltdLGY9W10scD13LGQ9ZXx8eCYmYi5maW5kLlRBRygiKiIsaSksaD1rKz1udWxsPT1wPzE6TWF0aC5yYW5kb20oKXx8LjEsZz1kLmxlbmd0aDtmb3IoaSYmKHc9dD09Q3x8dHx8aSk7bCE9PWcmJm51bGwhPShvPWRbbF0pO2wrKyl7aWYoeCYmbyl7YT0wLHR8fG8ub3duZXJEb2N1bWVudD09Q3x8KFQobyksbj0hRSk7d2hpbGUocz12W2ErK10paWYocyhvLHR8fEMsbikpe3IucHVzaChvKTticmVha31pJiYoaz1oKX1tJiYoKG89IXMmJm8pJiZ1LS0sZSYmYy5wdXNoKG8pKX1pZih1Kz1sLG0mJmwhPT11KXthPTA7d2hpbGUocz15W2ErK10pcyhjLGYsdCxuKTtpZihlKXtpZigwPHUpd2hpbGUobC0tKWNbbF18fGZbbF18fChmW2xdPXEuY2FsbChyKSk7Zj1UZShmKX1ILmFwcGx5KHIsZiksaSYmIWUmJjA8Zi5sZW5ndGgmJjE8dSt5Lmxlbmd0aCYmc2UudW5pcXVlU29ydChyKX1yZXR1cm4gaSYmKGs9aCx3PXApLGN9LG0/bGUocik6cikpKS5zZWxlY3Rvcj1lfXJldHVybiBhfSxnPXNlLnNlbGVjdD1mdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscyx1LGw9ImZ1bmN0aW9uIj09dHlwZW9mIGUmJmUsYz0hciYmaChlPWwuc2VsZWN0b3J8fGUpO2lmKG49bnx8W10sMT09PWMubGVuZ3RoKXtpZigyPChvPWNbMF09Y1swXS5zbGljZSgwKSkubGVuZ3RoJiYiSUQiPT09KGE9b1swXSkudHlwZSYmOT09PXQubm9kZVR5cGUmJkUmJmIucmVsYXRpdmVbb1sxXS50eXBlXSl7aWYoISh0PShiLmZpbmQuSUQoYS5tYXRjaGVzWzBdLnJlcGxhY2UodGUsbmUpLHQpfHxbXSlbMF0pKXJldHVybiBuO2wmJih0PXQucGFyZW50Tm9kZSksZT1lLnNsaWNlKG8uc2hpZnQoKS52YWx1ZS5sZW5ndGgpfWk9Ry5uZWVkc0NvbnRleHQudGVzdChlKT8wOm8ubGVuZ3RoO3doaWxlKGktLSl7aWYoYT1vW2ldLGIucmVsYXRpdmVbcz1hLnR5cGVdKWJyZWFrO2lmKCh1PWIuZmluZFtzXSkmJihyPXUoYS5tYXRjaGVzWzBdLnJlcGxhY2UodGUsbmUpLGVlLnRlc3Qob1swXS50eXBlKSYmeWUodC5wYXJlbnROb2RlKXx8dCkpKXtpZihvLnNwbGljZShpLDEpLCEoZT1yLmxlbmd0aCYmeGUobykpKXJldHVybiBILmFwcGx5KG4sciksbjticmVha319fXJldHVybihsfHxmKGUsYykpKHIsdCwhRSxuLCF0fHxlZS50ZXN0KGUpJiZ5ZSh0LnBhcmVudE5vZGUpfHx0KSxufSxkLnNvcnRTdGFibGU9Uy5zcGxpdCgiIikuc29ydChqKS5qb2luKCIiKT09PVMsZC5kZXRlY3REdXBsaWNhdGVzPSEhbCxUKCksZC5zb3J0RGV0YWNoZWQ9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIDEmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihDLmNyZWF0ZUVsZW1lbnQoImZpZWxkc2V0IikpfSksY2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPSI8YSBocmVmPScjJz48L2E+IiwiIyI9PT1lLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCJocmVmIil9KXx8ZmUoInR5cGV8aHJlZnxoZWlnaHR8d2lkdGgiLGZ1bmN0aW9uKGUsdCxuKXtpZighbilyZXR1cm4gZS5nZXRBdHRyaWJ1dGUodCwidHlwZSI9PT10LnRvTG93ZXJDYXNlKCk/MToyKX0pLGQuYXR0cmlidXRlcyYmY2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPSI8aW5wdXQvPiIsZS5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSgidmFsdWUiLCIiKSwiIj09PWUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoInZhbHVlIil9KXx8ZmUoInZhbHVlIixmdW5jdGlvbihlLHQsbil7aWYoIW4mJiJpbnB1dCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpcmV0dXJuIGUuZGVmYXVsdFZhbHVlfSksY2UoZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWUuZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpfSl8fGZlKFIsZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKCFuKXJldHVybiEwPT09ZVt0XT90LnRvTG93ZXJDYXNlKCk6KHI9ZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSYmci5zcGVjaWZpZWQ/ci52YWx1ZTpudWxsfSksc2V9KEMpO1MuZmluZD1kLFMuZXhwcj1kLnNlbGVjdG9ycyxTLmV4cHJbIjoiXT1TLmV4cHIucHNldWRvcyxTLnVuaXF1ZVNvcnQ9Uy51bmlxdWU9ZC51bmlxdWVTb3J0LFMudGV4dD1kLmdldFRleHQsUy5pc1hNTERvYz1kLmlzWE1MLFMuY29udGFpbnM9ZC5jb250YWlucyxTLmVzY2FwZVNlbGVjdG9yPWQuZXNjYXBlO3ZhciBoPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1bXSxpPXZvaWQgMCE9PW47d2hpbGUoKGU9ZVt0XSkmJjkhPT1lLm5vZGVUeXBlKWlmKDE9PT1lLm5vZGVUeXBlKXtpZihpJiZTKGUpLmlzKG4pKWJyZWFrO3IucHVzaChlKX1yZXR1cm4gcn0sVD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXTtlO2U9ZS5uZXh0U2libGluZykxPT09ZS5ub2RlVHlwZSYmZSE9PXQmJm4ucHVzaChlKTtyZXR1cm4gbn0saz1TLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O2Z1bmN0aW9uIEEoZSx0KXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dC50b0xvd2VyQ2FzZSgpfXZhciBOPS9ePChbYS16XVteXC9cMD46XHgyMFx0XHJcblxmXSopW1x4MjBcdFxyXG5cZl0qXC8/Pig/OjxcL1wxPnwpJC9pO2Z1bmN0aW9uIGooZSxuLHIpe3JldHVybiBtKG4pP1MuZ3JlcChlLGZ1bmN0aW9uKGUsdCl7cmV0dXJuISFuLmNhbGwoZSx0LGUpIT09cn0pOm4ubm9kZVR5cGU/Uy5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1uIT09cn0pOiJzdHJpbmciIT10eXBlb2Ygbj9TLmdyZXAoZSxmdW5jdGlvbihlKXtyZXR1cm4tMTxpLmNhbGwobixlKSE9PXJ9KTpTLmZpbHRlcihuLGUscil9Uy5maWx0ZXI9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRbMF07cmV0dXJuIG4mJihlPSI6bm90KCIrZSsiKSIpLDE9PT10Lmxlbmd0aCYmMT09PXIubm9kZVR5cGU/Uy5maW5kLm1hdGNoZXNTZWxlY3RvcihyLGUpP1tyXTpbXTpTLmZpbmQubWF0Y2hlcyhlLFMuZ3JlcCh0LGZ1bmN0aW9uKGUpe3JldHVybiAxPT09ZS5ub2RlVHlwZX0pKX0sUy5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oZSl7dmFyIHQsbixyPXRoaXMubGVuZ3RoLGk9dGhpcztpZigic3RyaW5nIiE9dHlwZW9mIGUpcmV0dXJuIHRoaXMucHVzaFN0YWNrKFMoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDt0PHI7dCsrKWlmKFMuY29udGFpbnMoaVt0XSx0aGlzKSlyZXR1cm4hMH0pKTtmb3Iobj10aGlzLnB1c2hTdGFjayhbXSksdD0wO3Q8cjt0KyspUy5maW5kKGUsaVt0XSxuKTtyZXR1cm4gMTxyP1MudW5pcXVlU29ydChuKTpufSxmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcyxlfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcyxlfHxbXSwhMCkpfSxpczpmdW5jdGlvbihlKXtyZXR1cm4hIWoodGhpcywic3RyaW5nIj09dHlwZW9mIGUmJmsudGVzdChlKT9TKGUpOmV8fFtdLCExKS5sZW5ndGh9fSk7dmFyIEQscT0vXig/OlxzKig8W1x3XFddKz4pW14+XSp8IyhbXHctXSspKSQvOyhTLmZuLmluaXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk7aWYoIWUpcmV0dXJuIHRoaXM7aWYobj1ufHxELCJzdHJpbmciPT10eXBlb2YgZSl7aWYoIShyPSI8Ij09PWVbMF0mJiI+Ij09PWVbZS5sZW5ndGgtMV0mJjM8PWUubGVuZ3RoP1tudWxsLGUsbnVsbF06cS5leGVjKGUpKXx8IXJbMV0mJnQpcmV0dXJuIXR8fHQuanF1ZXJ5Pyh0fHxuKS5maW5kKGUpOnRoaXMuY29uc3RydWN0b3IodCkuZmluZChlKTtpZihyWzFdKXtpZih0PXQgaW5zdGFuY2VvZiBTP3RbMF06dCxTLm1lcmdlKHRoaXMsUy5wYXJzZUhUTUwoclsxXSx0JiZ0Lm5vZGVUeXBlP3Qub3duZXJEb2N1bWVudHx8dDpFLCEwKSksTi50ZXN0KHJbMV0pJiZTLmlzUGxhaW5PYmplY3QodCkpZm9yKHIgaW4gdCltKHRoaXNbcl0pP3RoaXNbcl0odFtyXSk6dGhpcy5hdHRyKHIsdFtyXSk7cmV0dXJuIHRoaXN9cmV0dXJuKGk9RS5nZXRFbGVtZW50QnlJZChyWzJdKSkmJih0aGlzWzBdPWksdGhpcy5sZW5ndGg9MSksdGhpc31yZXR1cm4gZS5ub2RlVHlwZT8odGhpc1swXT1lLHRoaXMubGVuZ3RoPTEsdGhpcyk6bShlKT92b2lkIDAhPT1uLnJlYWR5P24ucmVhZHkoZSk6ZShTKTpTLm1ha2VBcnJheShlLHRoaXMpfSkucHJvdG90eXBlPVMuZm4sRD1TKEUpO3ZhciBMPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEg9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07ZnVuY3Rpb24gTyhlLHQpe3doaWxlKChlPWVbdF0pJiYxIT09ZS5ub2RlVHlwZSk7cmV0dXJuIGV9Uy5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihlKXt2YXIgdD1TKGUsdGhpcyksbj10Lmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPG47ZSsrKWlmKFMuY29udGFpbnModGhpcyx0W2VdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dGhpcy5sZW5ndGgsbz1bXSxhPSJzdHJpbmciIT10eXBlb2YgZSYmUyhlKTtpZighay50ZXN0KGUpKWZvcig7cjxpO3IrKylmb3Iobj10aGlzW3JdO24mJm4hPT10O249bi5wYXJlbnROb2RlKWlmKG4ubm9kZVR5cGU8MTEmJihhPy0xPGEuaW5kZXgobik6MT09PW4ubm9kZVR5cGUmJlMuZmluZC5tYXRjaGVzU2VsZWN0b3IobixlKSkpe28ucHVzaChuKTticmVha31yZXR1cm4gdGhpcy5wdXNoU3RhY2soMTxvLmxlbmd0aD9TLnVuaXF1ZVNvcnQobyk6byl9LGluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiBlPyJzdHJpbmciPT10eXBlb2YgZT9pLmNhbGwoUyhlKSx0aGlzWzBdKTppLmNhbGwodGhpcyxlLmpxdWVyeT9lWzBdOmUpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKFMudW5pcXVlU29ydChTLm1lcmdlKHRoaXMuZ2V0KCksUyhlLHQpKSkpfSxhZGRCYWNrOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmFkZChudWxsPT1lP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGUpKX19KSxTLmVhY2goe3BhcmVudDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7cmV0dXJuIHQmJjExIT09dC5ub2RlVHlwZT90Om51bGx9LHBhcmVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuIGgoZSwicGFyZW50Tm9kZSIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBoKGUsInBhcmVudE5vZGUiLG4pfSxuZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBPKGUsIm5leHRTaWJsaW5nIil9LHByZXY6ZnVuY3Rpb24oZSl7cmV0dXJuIE8oZSwicHJldmlvdXNTaWJsaW5nIil9LG5leHRBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIGgoZSwibmV4dFNpYmxpbmciKX0scHJldkFsbDpmdW5jdGlvbihlKXtyZXR1cm4gaChlLCJwcmV2aW91c1NpYmxpbmciKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gaChlLCJuZXh0U2libGluZyIsbil9LHByZXZVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGgoZSwicHJldmlvdXNTaWJsaW5nIixuKX0sc2libGluZ3M6ZnVuY3Rpb24oZSl7cmV0dXJuIFQoKGUucGFyZW50Tm9kZXx8e30pLmZpcnN0Q2hpbGQsZSl9LGNoaWxkcmVuOmZ1bmN0aW9uKGUpe3JldHVybiBUKGUuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lLmNvbnRlbnREb2N1bWVudCYmcihlLmNvbnRlbnREb2N1bWVudCk/ZS5jb250ZW50RG9jdW1lbnQ6KEEoZSwidGVtcGxhdGUiKSYmKGU9ZS5jb250ZW50fHxlKSxTLm1lcmdlKFtdLGUuY2hpbGROb2RlcykpfX0sZnVuY3Rpb24ocixpKXtTLmZuW3JdPWZ1bmN0aW9uKGUsdCl7dmFyIG49Uy5tYXAodGhpcyxpLGUpO3JldHVybiJVbnRpbCIhPT1yLnNsaWNlKC01KSYmKHQ9ZSksdCYmInN0cmluZyI9PXR5cGVvZiB0JiYobj1TLmZpbHRlcih0LG4pKSwxPHRoaXMubGVuZ3RoJiYoSFtyXXx8Uy51bmlxdWVTb3J0KG4pLEwudGVzdChyKSYmbi5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKG4pfX0pO3ZhciBQPS9bXlx4MjBcdFxyXG5cZl0rL2c7ZnVuY3Rpb24gUihlKXtyZXR1cm4gZX1mdW5jdGlvbiBNKGUpe3Rocm93IGV9ZnVuY3Rpb24gSShlLHQsbixyKXt2YXIgaTt0cnl7ZSYmbShpPWUucHJvbWlzZSk/aS5jYWxsKGUpLmRvbmUodCkuZmFpbChuKTplJiZtKGk9ZS50aGVuKT9pLmNhbGwoZSx0LG4pOnQuYXBwbHkodm9pZCAwLFtlXS5zbGljZShyKSl9Y2F0Y2goZSl7bi5hcHBseSh2b2lkIDAsW2VdKX19Uy5DYWxsYmFja3M9ZnVuY3Rpb24ocil7dmFyIGUsbjtyPSJzdHJpbmciPT10eXBlb2Ygcj8oZT1yLG49e30sUy5lYWNoKGUubWF0Y2goUCl8fFtdLGZ1bmN0aW9uKGUsdCl7blt0XT0hMH0pLG4pOlMuZXh0ZW5kKHt9LHIpO3ZhciBpLHQsbyxhLHM9W10sdT1bXSxsPS0xLGM9ZnVuY3Rpb24oKXtmb3IoYT1hfHxyLm9uY2Usbz1pPSEwO3UubGVuZ3RoO2w9LTEpe3Q9dS5zaGlmdCgpO3doaWxlKCsrbDxzLmxlbmd0aCkhMT09PXNbbF0uYXBwbHkodFswXSx0WzFdKSYmci5zdG9wT25GYWxzZSYmKGw9cy5sZW5ndGgsdD0hMSl9ci5tZW1vcnl8fCh0PSExKSxpPSExLGEmJihzPXQ/W106IiIpfSxmPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gcyYmKHQmJiFpJiYobD1zLmxlbmd0aC0xLHUucHVzaCh0KSksZnVuY3Rpb24gbihlKXtTLmVhY2goZSxmdW5jdGlvbihlLHQpe20odCk/ci51bmlxdWUmJmYuaGFzKHQpfHxzLnB1c2godCk6dCYmdC5sZW5ndGgmJiJzdHJpbmciIT09dyh0KSYmbih0KX0pfShhcmd1bWVudHMpLHQmJiFpJiZjKCkpLHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiBTLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGUsdCl7dmFyIG47d2hpbGUoLTE8KG49Uy5pbkFycmF5KHQscyxuKSkpcy5zcGxpY2UobiwxKSxuPD1sJiZsLS19KSx0aGlzfSxoYXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/LTE8Uy5pbkFycmF5KGUscyk6MDxzLmxlbmd0aH0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gcyYmKHM9W10pLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gYT11PVtdLHM9dD0iIix0aGlzfSxkaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiFzfSxsb2NrOmZ1bmN0aW9uKCl7cmV0dXJuIGE9dT1bXSx0fHxpfHwocz10PSIiKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWF9LGZpcmVXaXRoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGF8fCh0PVtlLCh0PXR8fFtdKS5zbGljZT90LnNsaWNlKCk6dF0sdS5wdXNoKHQpLGl8fGMoKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBmLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhb319O3JldHVybiBmfSxTLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oZSl7dmFyIG89W1sibm90aWZ5IiwicHJvZ3Jlc3MiLFMuQ2FsbGJhY2tzKCJtZW1vcnkiKSxTLkNhbGxiYWNrcygibWVtb3J5IiksMl0sWyJyZXNvbHZlIiwiZG9uZSIsUy5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksUy5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksMCwicmVzb2x2ZWQiXSxbInJlamVjdCIsImZhaWwiLFMuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLFMuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLDEsInJlamVjdGVkIl1dLGk9InBlbmRpbmciLGE9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGl9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBzLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sImNhdGNoIjpmdW5jdGlvbihlKXtyZXR1cm4gYS50aGVuKG51bGwsZSl9LHBpcGU6ZnVuY3Rpb24oKXt2YXIgaT1hcmd1bWVudHM7cmV0dXJuIFMuRGVmZXJyZWQoZnVuY3Rpb24ocil7Uy5lYWNoKG8sZnVuY3Rpb24oZSx0KXt2YXIgbj1tKGlbdFs0XV0pJiZpW3RbNF1dO3NbdFsxXV0oZnVuY3Rpb24oKXt2YXIgZT1uJiZuLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtlJiZtKGUucHJvbWlzZSk/ZS5wcm9taXNlKCkucHJvZ3Jlc3Moci5ub3RpZnkpLmRvbmUoci5yZXNvbHZlKS5mYWlsKHIucmVqZWN0KTpyW3RbMF0rIldpdGgiXSh0aGlzLG4/W2VdOmFyZ3VtZW50cyl9KX0pLGk9bnVsbH0pLnByb21pc2UoKX0sdGhlbjpmdW5jdGlvbih0LG4scil7dmFyIHU9MDtmdW5jdGlvbiBsKGksbyxhLHMpe3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXRoaXMscj1hcmd1bWVudHMsZT1mdW5jdGlvbigpe3ZhciBlLHQ7aWYoIShpPHUpKXtpZigoZT1hLmFwcGx5KG4scikpPT09by5wcm9taXNlKCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uIik7dD1lJiYoIm9iamVjdCI9PXR5cGVvZiBlfHwiZnVuY3Rpb24iPT10eXBlb2YgZSkmJmUudGhlbixtKHQpP3M/dC5jYWxsKGUsbCh1LG8sUixzKSxsKHUsbyxNLHMpKToodSsrLHQuY2FsbChlLGwodSxvLFIscyksbCh1LG8sTSxzKSxsKHUsbyxSLG8ubm90aWZ5V2l0aCkpKTooYSE9PVImJihuPXZvaWQgMCxyPVtlXSksKHN8fG8ucmVzb2x2ZVdpdGgpKG4scikpfX0sdD1zP2U6ZnVuY3Rpb24oKXt0cnl7ZSgpfWNhdGNoKGUpe1MuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayYmUy5EZWZlcnJlZC5leGNlcHRpb25Ib29rKGUsdC5zdGFja1RyYWNlKSx1PD1pKzEmJihhIT09TSYmKG49dm9pZCAwLHI9W2VdKSxvLnJlamVjdFdpdGgobixyKSl9fTtpP3QoKTooUy5EZWZlcnJlZC5nZXRTdGFja0hvb2smJih0LnN0YWNrVHJhY2U9Uy5EZWZlcnJlZC5nZXRTdGFja0hvb2soKSksQy5zZXRUaW1lb3V0KHQpKX19cmV0dXJuIFMuRGVmZXJyZWQoZnVuY3Rpb24oZSl7b1swXVszXS5hZGQobCgwLGUsbShyKT9yOlIsZS5ub3RpZnlXaXRoKSksb1sxXVszXS5hZGQobCgwLGUsbSh0KT90OlIpKSxvWzJdWzNdLmFkZChsKDAsZSxtKG4pP246TSkpfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lP1MuZXh0ZW5kKGUsYSk6YX19LHM9e307cmV0dXJuIFMuZWFjaChvLGZ1bmN0aW9uKGUsdCl7dmFyIG49dFsyXSxyPXRbNV07YVt0WzFdXT1uLmFkZCxyJiZuLmFkZChmdW5jdGlvbigpe2k9cn0sb1szLWVdWzJdLmRpc2FibGUsb1szLWVdWzNdLmRpc2FibGUsb1swXVsyXS5sb2NrLG9bMF1bM10ubG9jayksbi5hZGQodFszXS5maXJlKSxzW3RbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIHNbdFswXSsiV2l0aCJdKHRoaXM9PT1zP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sc1t0WzBdKyJXaXRoIl09bi5maXJlV2l0aH0pLGEucHJvbWlzZShzKSxlJiZlLmNhbGwocyxzKSxzfSx3aGVuOmZ1bmN0aW9uKGUpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGgsdD1uLHI9QXJyYXkodCksaT1zLmNhbGwoYXJndW1lbnRzKSxvPVMuRGVmZXJyZWQoKSxhPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXtyW3RdPXRoaXMsaVt0XT0xPGFyZ3VtZW50cy5sZW5ndGg/cy5jYWxsKGFyZ3VtZW50cyk6ZSwtLW58fG8ucmVzb2x2ZVdpdGgocixpKX19O2lmKG48PTEmJihJKGUsby5kb25lKGEodCkpLnJlc29sdmUsby5yZWplY3QsIW4pLCJwZW5kaW5nIj09PW8uc3RhdGUoKXx8bShpW3RdJiZpW3RdLnRoZW4pKSlyZXR1cm4gby50aGVuKCk7d2hpbGUodC0tKUkoaVt0XSxhKHQpLG8ucmVqZWN0KTtyZXR1cm4gby5wcm9taXNlKCl9fSk7dmFyIFc9L14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87Uy5EZWZlcnJlZC5leGNlcHRpb25Ib29rPWZ1bmN0aW9uKGUsdCl7Qy5jb25zb2xlJiZDLmNvbnNvbGUud2FybiYmZSYmVy50ZXN0KGUubmFtZSkmJkMuY29uc29sZS53YXJuKCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiAiK2UubWVzc2FnZSxlLnN0YWNrLHQpfSxTLnJlYWR5RXhjZXB0aW9uPWZ1bmN0aW9uKGUpe0Muc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGV9KX07dmFyIEY9Uy5EZWZlcnJlZCgpO2Z1bmN0aW9uIEIoKXtFLnJlbW92ZUV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLEIpLEMucmVtb3ZlRXZlbnRMaXN0ZW5lcigibG9hZCIsQiksUy5yZWFkeSgpfVMuZm4ucmVhZHk9ZnVuY3Rpb24oZSl7cmV0dXJuIEYudGhlbihlKVsiY2F0Y2giXShmdW5jdGlvbihlKXtTLnJlYWR5RXhjZXB0aW9uKGUpfSksdGhpc30sUy5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEscmVhZHk6ZnVuY3Rpb24oZSl7KCEwPT09ZT8tLVMucmVhZHlXYWl0OlMuaXNSZWFkeSl8fChTLmlzUmVhZHk9ITApIT09ZSYmMDwtLVMucmVhZHlXYWl0fHxGLnJlc29sdmVXaXRoKEUsW1NdKX19KSxTLnJlYWR5LnRoZW49Ri50aGVuLCJjb21wbGV0ZSI9PT1FLnJlYWR5U3RhdGV8fCJsb2FkaW5nIiE9PUUucmVhZHlTdGF0ZSYmIUUuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsP0Muc2V0VGltZW91dChTLnJlYWR5KTooRS5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIixCKSxDLmFkZEV2ZW50TGlzdGVuZXIoImxvYWQiLEIpKTt2YXIgJD1mdW5jdGlvbihlLHQsbixyLGksbyxhKXt2YXIgcz0wLHU9ZS5sZW5ndGgsbD1udWxsPT1uO2lmKCJvYmplY3QiPT09dyhuKSlmb3IocyBpbiBpPSEwLG4pJChlLHQscyxuW3NdLCEwLG8sYSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYoaT0hMCxtKHIpfHwoYT0hMCksbCYmKGE/KHQuY2FsbChlLHIpLHQ9bnVsbCk6KGw9dCx0PWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbC5jYWxsKFMoZSksbil9KSksdCkpZm9yKDtzPHU7cysrKXQoZVtzXSxuLGE/cjpyLmNhbGwoZVtzXSxzLHQoZVtzXSxuKSkpO3JldHVybiBpP2U6bD90LmNhbGwoZSk6dT90KGVbMF0sbik6b30sXz0vXi1tcy0vLHo9Ly0oW2Etel0pL2c7ZnVuY3Rpb24gVShlLHQpe3JldHVybiB0LnRvVXBwZXJDYXNlKCl9ZnVuY3Rpb24gWChlKXtyZXR1cm4gZS5yZXBsYWNlKF8sIm1zLSIpLnJlcGxhY2UoeixVKX12YXIgVj1mdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV8fDk9PT1lLm5vZGVUeXBlfHwhK2Uubm9kZVR5cGV9O2Z1bmN0aW9uIEcoKXt0aGlzLmV4cGFuZG89Uy5leHBhbmRvK0cudWlkKyt9Ry51aWQ9MSxHLnByb3RvdHlwZT17Y2FjaGU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB0fHwodD17fSxWKGUpJiYoZS5ub2RlVHlwZT9lW3RoaXMuZXhwYW5kb109dDpPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLmV4cGFuZG8se3ZhbHVlOnQsY29uZmlndXJhYmxlOiEwfSkpKSx0fSxzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9dGhpcy5jYWNoZShlKTtpZigic3RyaW5nIj09dHlwZW9mIHQpaVtYKHQpXT1uO2Vsc2UgZm9yKHIgaW4gdClpW1gocildPXRbcl07cmV0dXJuIGl9LGdldDpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3RoaXMuY2FjaGUoZSk6ZVt0aGlzLmV4cGFuZG9dJiZlW3RoaXMuZXhwYW5kb11bWCh0KV19LGFjY2VzczpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PXR8fHQmJiJzdHJpbmciPT10eXBlb2YgdCYmdm9pZCAwPT09bj90aGlzLmdldChlLHQpOih0aGlzLnNldChlLHQsbiksdm9pZCAwIT09bj9uOnQpfSxyZW1vdmU6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWVbdGhpcy5leHBhbmRvXTtpZih2b2lkIDAhPT1yKXtpZih2b2lkIDAhPT10KXtuPSh0PUFycmF5LmlzQXJyYXkodCk/dC5tYXAoWCk6KHQ9WCh0KSlpbiByP1t0XTp0Lm1hdGNoKFApfHxbXSkubGVuZ3RoO3doaWxlKG4tLSlkZWxldGUgclt0W25dXX0odm9pZCAwPT09dHx8Uy5pc0VtcHR5T2JqZWN0KHIpKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXZvaWQgMDpkZWxldGUgZVt0aGlzLmV4cGFuZG9dKX19LGhhc0RhdGE6ZnVuY3Rpb24oZSl7dmFyIHQ9ZVt0aGlzLmV4cGFuZG9dO3JldHVybiB2b2lkIDAhPT10JiYhUy5pc0VtcHR5T2JqZWN0KHQpfX07dmFyIFk9bmV3IEcsUT1uZXcgRyxKPS9eKD86XHtbXHdcV10qXH18XFtbXHdcV10qXF0pJC8sSz0vW0EtWl0vZztmdW5jdGlvbiBaKGUsdCxuKXt2YXIgcixpO2lmKHZvaWQgMD09PW4mJjE9PT1lLm5vZGVUeXBlKWlmKHI9ImRhdGEtIit0LnJlcGxhY2UoSywiLSQmIikudG9Mb3dlckNhc2UoKSwic3RyaW5nIj09dHlwZW9mKG49ZS5nZXRBdHRyaWJ1dGUocikpKXt0cnl7bj0idHJ1ZSI9PT0oaT1uKXx8ImZhbHNlIiE9PWkmJigibnVsbCI9PT1pP251bGw6aT09PStpKyIiPytpOkoudGVzdChpKT9KU09OLnBhcnNlKGkpOmkpfWNhdGNoKGUpe31RLnNldChlLHQsbil9ZWxzZSBuPXZvaWQgMDtyZXR1cm4gbn1TLmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gUS5oYXNEYXRhKGUpfHxZLmhhc0RhdGEoZSl9LGRhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBRLmFjY2VzcyhlLHQsbil9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtRLnJlbW92ZShlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFkuYWNjZXNzKGUsdCxuKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtZLnJlbW92ZShlLHQpfX0pLFMuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKG4sZSl7dmFyIHQscixpLG89dGhpc1swXSxhPW8mJm8uYXR0cmlidXRlcztpZih2b2lkIDA9PT1uKXtpZih0aGlzLmxlbmd0aCYmKGk9US5nZXQobyksMT09PW8ubm9kZVR5cGUmJiFZLmdldChvLCJoYXNEYXRhQXR0cnMiKSkpe3Q9YS5sZW5ndGg7d2hpbGUodC0tKWFbdF0mJjA9PT0ocj1hW3RdLm5hbWUpLmluZGV4T2YoImRhdGEtIikmJihyPVgoci5zbGljZSg1KSksWihvLHIsaVtyXSkpO1kuc2V0KG8sImhhc0RhdGFBdHRycyIsITApfXJldHVybiBpfXJldHVybiJvYmplY3QiPT10eXBlb2Ygbj90aGlzLmVhY2goZnVuY3Rpb24oKXtRLnNldCh0aGlzLG4pfSk6JCh0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0O2lmKG8mJnZvaWQgMD09PWUpcmV0dXJuIHZvaWQgMCE9PSh0PVEuZ2V0KG8sbikpP3Q6dm9pZCAwIT09KHQ9WihvLG4pKT90OnZvaWQgMDt0aGlzLmVhY2goZnVuY3Rpb24oKXtRLnNldCh0aGlzLG4sZSl9KX0sbnVsbCxlLDE8YXJndW1lbnRzLmxlbmd0aCxudWxsLCEwKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7US5yZW1vdmUodGhpcyxlKX0pfX0pLFMuZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoZSlyZXR1cm4gdD0odHx8ImZ4IikrInF1ZXVlIixyPVkuZ2V0KGUsdCksbiYmKCFyfHxBcnJheS5pc0FycmF5KG4pP3I9WS5hY2Nlc3MoZSx0LFMubWFrZUFycmF5KG4pKTpyLnB1c2gobikpLHJ8fFtdfSxkZXF1ZXVlOmZ1bmN0aW9uKGUsdCl7dD10fHwiZngiO3ZhciBuPVMucXVldWUoZSx0KSxyPW4ubGVuZ3RoLGk9bi5zaGlmdCgpLG89Uy5fcXVldWVIb29rcyhlLHQpOyJpbnByb2dyZXNzIj09PWkmJihpPW4uc2hpZnQoKSxyLS0pLGkmJigiZngiPT09dCYmbi51bnNoaWZ0KCJpbnByb2dyZXNzIiksZGVsZXRlIG8uc3RvcCxpLmNhbGwoZSxmdW5jdGlvbigpe1MuZGVxdWV1ZShlLHQpfSxvKSksIXImJm8mJm8uZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihlLHQpe3ZhciBuPXQrInF1ZXVlSG9va3MiO3JldHVybiBZLmdldChlLG4pfHxZLmFjY2VzcyhlLG4se2VtcHR5OlMuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLmFkZChmdW5jdGlvbigpe1kucmVtb3ZlKGUsW3QrInF1ZXVlIixuXSl9KX0pfX0pLFMuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbih0LG4pe3ZhciBlPTI7cmV0dXJuInN0cmluZyIhPXR5cGVvZiB0JiYobj10LHQ9ImZ4IixlLS0pLGFyZ3VtZW50cy5sZW5ndGg8ZT9TLnF1ZXVlKHRoaXNbMF0sdCk6dm9pZCAwPT09bj90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPVMucXVldWUodGhpcyx0LG4pO1MuX3F1ZXVlSG9va3ModGhpcyx0KSwiZngiPT09dCYmImlucHJvZ3Jlc3MiIT09ZVswXSYmUy5kZXF1ZXVlKHRoaXMsdCl9KX0sZGVxdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Uy5kZXF1ZXVlKHRoaXMsZSl9KX0sY2xlYXJRdWV1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5xdWV1ZShlfHwiZngiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MSxpPVMuRGVmZXJyZWQoKSxvPXRoaXMsYT10aGlzLmxlbmd0aCxzPWZ1bmN0aW9uKCl7LS1yfHxpLnJlc29sdmVXaXRoKG8sW29dKX07InN0cmluZyIhPXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSxlPWV8fCJmeCI7d2hpbGUoYS0tKShuPVkuZ2V0KG9bYV0sZSsicXVldWVIb29rcyIpKSYmbi5lbXB0eSYmKHIrKyxuLmVtcHR5LmFkZChzKSk7cmV0dXJuIHMoKSxpLnByb21pc2UodCl9fSk7dmFyIGVlPS9bKy1dPyg/OlxkKlwufClcZCsoPzpbZUVdWystXT9cZCt8KS8uc291cmNlLHRlPW5ldyBSZWdFeHAoIl4oPzooWystXSk9fCkoIitlZSsiKShbYS16JV0qKSQiLCJpIiksbmU9WyJUb3AiLCJSaWdodCIsIkJvdHRvbSIsIkxlZnQiXSxyZT1FLmRvY3VtZW50RWxlbWVudCxpZT1mdW5jdGlvbihlKXtyZXR1cm4gUy5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSl9LG9lPXtjb21wb3NlZDohMH07cmUuZ2V0Um9vdE5vZGUmJihpZT1mdW5jdGlvbihlKXtyZXR1cm4gUy5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSl8fGUuZ2V0Um9vdE5vZGUob2UpPT09ZS5vd25lckRvY3VtZW50fSk7dmFyIGFlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIm5vbmUiPT09KGU9dHx8ZSkuc3R5bGUuZGlzcGxheXx8IiI9PT1lLnN0eWxlLmRpc3BsYXkmJmllKGUpJiYibm9uZSI9PT1TLmNzcyhlLCJkaXNwbGF5Iil9O2Z1bmN0aW9uIHNlKGUsdCxuLHIpe3ZhciBpLG8sYT0yMCxzPXI/ZnVuY3Rpb24oKXtyZXR1cm4gci5jdXIoKX06ZnVuY3Rpb24oKXtyZXR1cm4gUy5jc3MoZSx0LCIiKX0sdT1zKCksbD1uJiZuWzNdfHwoUy5jc3NOdW1iZXJbdF0/IiI6InB4IiksYz1lLm5vZGVUeXBlJiYoUy5jc3NOdW1iZXJbdF18fCJweCIhPT1sJiYrdSkmJnRlLmV4ZWMoUy5jc3MoZSx0KSk7aWYoYyYmY1szXSE9PWwpe3UvPTIsbD1sfHxjWzNdLGM9K3V8fDE7d2hpbGUoYS0tKVMuc3R5bGUoZSx0LGMrbCksKDEtbykqKDEtKG89cygpL3V8fC41KSk8PTAmJihhPTApLGMvPW87Yyo9MixTLnN0eWxlKGUsdCxjK2wpLG49bnx8W119cmV0dXJuIG4mJihjPStjfHwrdXx8MCxpPW5bMV0/YysoblsxXSsxKSpuWzJdOituWzJdLHImJihyLnVuaXQ9bCxyLnN0YXJ0PWMsci5lbmQ9aSkpLGl9dmFyIHVlPXt9O2Z1bmN0aW9uIGxlKGUsdCl7Zm9yKHZhciBuLHIsaSxvLGEscyx1LGw9W10sYz0wLGY9ZS5sZW5ndGg7YzxmO2MrKykocj1lW2NdKS5zdHlsZSYmKG49ci5zdHlsZS5kaXNwbGF5LHQ/KCJub25lIj09PW4mJihsW2NdPVkuZ2V0KHIsImRpc3BsYXkiKXx8bnVsbCxsW2NdfHwoci5zdHlsZS5kaXNwbGF5PSIiKSksIiI9PT1yLnN0eWxlLmRpc3BsYXkmJmFlKHIpJiYobFtjXT0odT1hPW89dm9pZCAwLGE9KGk9cikub3duZXJEb2N1bWVudCxzPWkubm9kZU5hbWUsKHU9dWVbc10pfHwobz1hLmJvZHkuYXBwZW5kQ2hpbGQoYS5jcmVhdGVFbGVtZW50KHMpKSx1PVMuY3NzKG8sImRpc3BsYXkiKSxvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyksIm5vbmUiPT09dSYmKHU9ImJsb2NrIiksdWVbc109dSkpKSk6Im5vbmUiIT09biYmKGxbY109Im5vbmUiLFkuc2V0KHIsImRpc3BsYXkiLG4pKSk7Zm9yKGM9MDtjPGY7YysrKW51bGwhPWxbY10mJihlW2NdLnN0eWxlLmRpc3BsYXk9bFtjXSk7cmV0dXJuIGV9Uy5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gbGUodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gbGUodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihlKXtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBlP2U/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7YWUodGhpcyk/Uyh0aGlzKS5zaG93KCk6Uyh0aGlzKS5oaWRlKCl9KX19KTt2YXIgY2UsZmUscGU9L14oPzpjaGVja2JveHxyYWRpbykkL2ksZGU9LzwoW2Etel1bXlwvXDA+XHgyMFx0XHJcblxmXSopL2ksaGU9L14kfF5tb2R1bGUkfFwvKD86amF2YXxlY21hKXNjcmlwdC9pO2NlPUUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKEUuY3JlYXRlRWxlbWVudCgiZGl2IikpLChmZT1FLmNyZWF0ZUVsZW1lbnQoImlucHV0IikpLnNldEF0dHJpYnV0ZSgidHlwZSIsInJhZGlvIiksZmUuc2V0QXR0cmlidXRlKCJjaGVja2VkIiwiY2hlY2tlZCIpLGZlLnNldEF0dHJpYnV0ZSgibmFtZSIsInQiKSxjZS5hcHBlbmRDaGlsZChmZSkseS5jaGVja0Nsb25lPWNlLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxjZS5pbm5lckhUTUw9Ijx0ZXh0YXJlYT54PC90ZXh0YXJlYT4iLHkubm9DbG9uZUNoZWNrZWQ9ISFjZS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWUsY2UuaW5uZXJIVE1MPSI8b3B0aW9uPjwvb3B0aW9uPiIseS5vcHRpb249ISFjZS5sYXN0Q2hpbGQ7dmFyIGdlPXt0aGVhZDpbMSwiPHRhYmxlPiIsIjwvdGFibGU+Il0sY29sOlsyLCI8dGFibGU+PGNvbGdyb3VwPiIsIjwvY29sZ3JvdXA+PC90YWJsZT4iXSx0cjpbMiwiPHRhYmxlPjx0Ym9keT4iLCI8L3Rib2R5PjwvdGFibGU+Il0sdGQ6WzMsIjx0YWJsZT48dGJvZHk+PHRyPiIsIjwvdHI+PC90Ym9keT48L3RhYmxlPiJdLF9kZWZhdWx0OlswLCIiLCIiXX07ZnVuY3Rpb24gdmUoZSx0KXt2YXIgbjtyZXR1cm4gbj0idW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0fHwiKiIpOiJ1bmRlZmluZWQiIT10eXBlb2YgZS5xdWVyeVNlbGVjdG9yQWxsP2UucXVlcnlTZWxlY3RvckFsbCh0fHwiKiIpOltdLHZvaWQgMD09PXR8fHQmJkEoZSx0KT9TLm1lcmdlKFtlXSxuKTpufWZ1bmN0aW9uIHllKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKVkuc2V0KGVbbl0sImdsb2JhbEV2YWwiLCF0fHxZLmdldCh0W25dLCJnbG9iYWxFdmFsIikpfWdlLnRib2R5PWdlLnRmb290PWdlLmNvbGdyb3VwPWdlLmNhcHRpb249Z2UudGhlYWQsZ2UudGg9Z2UudGQseS5vcHRpb258fChnZS5vcHRncm91cD1nZS5vcHRpb249WzEsIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz4iLCI8L3NlbGVjdD4iXSk7dmFyIG1lPS88fCYjP1x3KzsvO2Z1bmN0aW9uIHhlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGEscyx1LGwsYyxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sZD0wLGg9ZS5sZW5ndGg7ZDxoO2QrKylpZigobz1lW2RdKXx8MD09PW8paWYoIm9iamVjdCI9PT13KG8pKVMubWVyZ2UocCxvLm5vZGVUeXBlP1tvXTpvKTtlbHNlIGlmKG1lLnRlc3Qobykpe2E9YXx8Zi5hcHBlbmRDaGlsZCh0LmNyZWF0ZUVsZW1lbnQoImRpdiIpKSxzPShkZS5leGVjKG8pfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpLHU9Z2Vbc118fGdlLl9kZWZhdWx0LGEuaW5uZXJIVE1MPXVbMV0rUy5odG1sUHJlZmlsdGVyKG8pK3VbMl0sYz11WzBdO3doaWxlKGMtLSlhPWEubGFzdENoaWxkO1MubWVyZ2UocCxhLmNoaWxkTm9kZXMpLChhPWYuZmlyc3RDaGlsZCkudGV4dENvbnRlbnQ9IiJ9ZWxzZSBwLnB1c2godC5jcmVhdGVUZXh0Tm9kZShvKSk7Zi50ZXh0Q29udGVudD0iIixkPTA7d2hpbGUobz1wW2QrK10paWYociYmLTE8Uy5pbkFycmF5KG8scikpaSYmaS5wdXNoKG8pO2Vsc2UgaWYobD1pZShvKSxhPXZlKGYuYXBwZW5kQ2hpbGQobyksInNjcmlwdCIpLGwmJnllKGEpLG4pe2M9MDt3aGlsZShvPWFbYysrXSloZS50ZXN0KG8udHlwZXx8IiIpJiZuLnB1c2gobyl9cmV0dXJuIGZ9dmFyIGJlPS9eKFteLl0qKSg/OlwuKC4rKXwpLztmdW5jdGlvbiB3ZSgpe3JldHVybiEwfWZ1bmN0aW9uIFRlKCl7cmV0dXJuITF9ZnVuY3Rpb24gQ2UoZSx0KXtyZXR1cm4gZT09PWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBFLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZSl7fX0oKT09KCJmb2N1cyI9PT10KX1mdW5jdGlvbiBFZShlLHQsbixyLGksbyl7dmFyIGEscztpZigib2JqZWN0Ij09dHlwZW9mIHQpe2ZvcihzIGluInN0cmluZyIhPXR5cGVvZiBuJiYocj1yfHxuLG49dm9pZCAwKSx0KUVlKGUscyxuLHIsdFtzXSxvKTtyZXR1cm4gZX1pZihudWxsPT1yJiZudWxsPT1pPyhpPW4scj1uPXZvaWQgMCk6bnVsbD09aSYmKCJzdHJpbmciPT10eXBlb2Ygbj8oaT1yLHI9dm9pZCAwKTooaT1yLHI9bixuPXZvaWQgMCkpLCExPT09aSlpPVRlO2Vsc2UgaWYoIWkpcmV0dXJuIGU7cmV0dXJuIDE9PT1vJiYoYT1pLChpPWZ1bmN0aW9uKGUpe3JldHVybiBTKCkub2ZmKGUpLGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfSkuZ3VpZD1hLmd1aWR8fChhLmd1aWQ9Uy5ndWlkKyspKSxlLmVhY2goZnVuY3Rpb24oKXtTLmV2ZW50LmFkZCh0aGlzLHQsaSxyLG4pfSl9ZnVuY3Rpb24gU2UoZSxpLG8pe28/KFkuc2V0KGUsaSwhMSksUy5ldmVudC5hZGQoZSxpLHtuYW1lc3BhY2U6ITEsaGFuZGxlcjpmdW5jdGlvbihlKXt2YXIgdCxuLHI9WS5nZXQodGhpcyxpKTtpZigxJmUuaXNUcmlnZ2VyJiZ0aGlzW2ldKXtpZihyLmxlbmd0aCkoUy5ldmVudC5zcGVjaWFsW2ldfHx7fSkuZGVsZWdhdGVUeXBlJiZlLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYocj1zLmNhbGwoYXJndW1lbnRzKSxZLnNldCh0aGlzLGksciksdD1vKHRoaXMsaSksdGhpc1tpXSgpLHIhPT0obj1ZLmdldCh0aGlzLGkpKXx8dD9ZLnNldCh0aGlzLGksITEpOm49e30sciE9PW4pcmV0dXJuIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpLG4mJm4udmFsdWV9ZWxzZSByLmxlbmd0aCYmKFkuc2V0KHRoaXMsaSx7dmFsdWU6Uy5ldmVudC50cmlnZ2VyKFMuZXh0ZW5kKHJbMF0sUy5FdmVudC5wcm90b3R5cGUpLHIuc2xpY2UoMSksdGhpcyl9KSxlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpKX19KSk6dm9pZCAwPT09WS5nZXQoZSxpKSYmUy5ldmVudC5hZGQoZSxpLHdlKX1TLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKHQsZSxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PVkuZ2V0KHQpO2lmKFYodCkpe24uaGFuZGxlciYmKG49KG89bikuaGFuZGxlcixpPW8uc2VsZWN0b3IpLGkmJlMuZmluZC5tYXRjaGVzU2VsZWN0b3IocmUsaSksbi5ndWlkfHwobi5ndWlkPVMuZ3VpZCsrKSwodT12LmV2ZW50cyl8fCh1PXYuZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCkpLChhPXYuaGFuZGxlKXx8KGE9di5oYW5kbGU9ZnVuY3Rpb24oZSl7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiBTJiZTLmV2ZW50LnRyaWdnZXJlZCE9PWUudHlwZT9TLmV2ZW50LmRpc3BhdGNoLmFwcGx5KHQsYXJndW1lbnRzKTp2b2lkIDB9KSxsPShlPShlfHwiIikubWF0Y2goUCl8fFsiIl0pLmxlbmd0aDt3aGlsZShsLS0pZD1nPShzPWJlLmV4ZWMoZVtsXSl8fFtdKVsxXSxoPShzWzJdfHwiIikuc3BsaXQoIi4iKS5zb3J0KCksZCYmKGY9Uy5ldmVudC5zcGVjaWFsW2RdfHx7fSxkPShpP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkLGY9Uy5ldmVudC5zcGVjaWFsW2RdfHx7fSxjPVMuZXh0ZW5kKHt0eXBlOmQsb3JpZ1R5cGU6ZyxkYXRhOnIsaGFuZGxlcjpuLGd1aWQ6bi5ndWlkLHNlbGVjdG9yOmksbmVlZHNDb250ZXh0OmkmJlMuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChpKSxuYW1lc3BhY2U6aC5qb2luKCIuIil9LG8pLChwPXVbZF0pfHwoKHA9dVtkXT1bXSkuZGVsZWdhdGVDb3VudD0wLGYuc2V0dXAmJiExIT09Zi5zZXR1cC5jYWxsKHQscixoLGEpfHx0LmFkZEV2ZW50TGlzdGVuZXImJnQuYWRkRXZlbnRMaXN0ZW5lcihkLGEpKSxmLmFkZCYmKGYuYWRkLmNhbGwodCxjKSxjLmhhbmRsZXIuZ3VpZHx8KGMuaGFuZGxlci5ndWlkPW4uZ3VpZCkpLGk/cC5zcGxpY2UocC5kZWxlZ2F0ZUNvdW50KyssMCxjKTpwLnB1c2goYyksUy5ldmVudC5nbG9iYWxbZF09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PVkuaGFzRGF0YShlKSYmWS5nZXQoZSk7aWYodiYmKHU9di5ldmVudHMpKXtsPSh0PSh0fHwiIikubWF0Y2goUCl8fFsiIl0pLmxlbmd0aDt3aGlsZShsLS0paWYoZD1nPShzPWJlLmV4ZWModFtsXSl8fFtdKVsxXSxoPShzWzJdfHwiIikuc3BsaXQoIi4iKS5zb3J0KCksZCl7Zj1TLmV2ZW50LnNwZWNpYWxbZF18fHt9LHA9dVtkPShyP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkXXx8W10scz1zWzJdJiZuZXcgUmVnRXhwKCIoXnxcXC4pIitoLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpLGE9bz1wLmxlbmd0aDt3aGlsZShvLS0pYz1wW29dLCFpJiZnIT09Yy5vcmlnVHlwZXx8biYmbi5ndWlkIT09Yy5ndWlkfHxzJiYhcy50ZXN0KGMubmFtZXNwYWNlKXx8ciYmciE9PWMuc2VsZWN0b3ImJigiKioiIT09cnx8IWMuc2VsZWN0b3IpfHwocC5zcGxpY2UobywxKSxjLnNlbGVjdG9yJiZwLmRlbGVnYXRlQ291bnQtLSxmLnJlbW92ZSYmZi5yZW1vdmUuY2FsbChlLGMpKTthJiYhcC5sZW5ndGgmJihmLnRlYXJkb3duJiYhMSE9PWYudGVhcmRvd24uY2FsbChlLGgsdi5oYW5kbGUpfHxTLnJlbW92ZUV2ZW50KGUsZCx2LmhhbmRsZSksZGVsZXRlIHVbZF0pfWVsc2UgZm9yKGQgaW4gdSlTLmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO1MuaXNFbXB0eU9iamVjdCh1KSYmWS5yZW1vdmUoZSwiaGFuZGxlIGV2ZW50cyIpfX0sZGlzcGF0Y2g6ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHM9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLHU9Uy5ldmVudC5maXgoZSksbD0oWS5nZXQodGhpcywiZXZlbnRzIil8fE9iamVjdC5jcmVhdGUobnVsbCkpW3UudHlwZV18fFtdLGM9Uy5ldmVudC5zcGVjaWFsW3UudHlwZV18fHt9O2ZvcihzWzBdPXUsdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspc1t0XT1hcmd1bWVudHNbdF07aWYodS5kZWxlZ2F0ZVRhcmdldD10aGlzLCFjLnByZURpc3BhdGNofHwhMSE9PWMucHJlRGlzcGF0Y2guY2FsbCh0aGlzLHUpKXthPVMuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLHUsbCksdD0wO3doaWxlKChpPWFbdCsrXSkmJiF1LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe3UuY3VycmVudFRhcmdldD1pLmVsZW0sbj0wO3doaWxlKChvPWkuaGFuZGxlcnNbbisrXSkmJiF1LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpdS5ybmFtZXNwYWNlJiYhMSE9PW8ubmFtZXNwYWNlJiYhdS5ybmFtZXNwYWNlLnRlc3Qoby5uYW1lc3BhY2UpfHwodS5oYW5kbGVPYmo9byx1LmRhdGE9by5kYXRhLHZvaWQgMCE9PShyPSgoUy5ldmVudC5zcGVjaWFsW28ub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxvLmhhbmRsZXIpLmFwcGx5KGkuZWxlbSxzKSkmJiExPT09KHUucmVzdWx0PXIpJiYodS5wcmV2ZW50RGVmYXVsdCgpLHUuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gYy5wb3N0RGlzcGF0Y2gmJmMucG9zdERpc3BhdGNoLmNhbGwodGhpcyx1KSx1LnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzPVtdLHU9dC5kZWxlZ2F0ZUNvdW50LGw9ZS50YXJnZXQ7aWYodSYmbC5ub2RlVHlwZSYmISgiY2xpY2siPT09ZS50eXBlJiYxPD1lLmJ1dHRvbikpZm9yKDtsIT09dGhpcztsPWwucGFyZW50Tm9kZXx8dGhpcylpZigxPT09bC5ub2RlVHlwZSYmKCJjbGljayIhPT1lLnR5cGV8fCEwIT09bC5kaXNhYmxlZCkpe2ZvcihvPVtdLGE9e30sbj0wO248dTtuKyspdm9pZCAwPT09YVtpPShyPXRbbl0pLnNlbGVjdG9yKyIgIl0mJihhW2ldPXIubmVlZHNDb250ZXh0Py0xPFMoaSx0aGlzKS5pbmRleChsKTpTLmZpbmQoaSx0aGlzLG51bGwsW2xdKS5sZW5ndGgpLGFbaV0mJm8ucHVzaChyKTtvLmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6b30pfXJldHVybiBsPXRoaXMsdTx0Lmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6dC5zbGljZSh1KX0pLHN9LGFkZFByb3A6ZnVuY3Rpb24odCxlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoUy5FdmVudC5wcm90b3R5cGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0Om0oZSk/ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIGUodGhpcy5vcmlnaW5hbEV2ZW50KX06ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFt0XX0sc2V0OmZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KX19KX0sZml4OmZ1bmN0aW9uKGUpe3JldHVybiBlW1MuZXhwYW5kb10/ZTpuZXcgUy5FdmVudChlKX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGNsaWNrOntzZXR1cDpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCwiaW5wdXQiKSYmU2UodCwiY2xpY2siLHdlKSwhMX0sdHJpZ2dlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCwiaW5wdXQiKSYmU2UodCwiY2xpY2siKSwhMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7cmV0dXJuIHBlLnRlc3QodC50eXBlKSYmdC5jbGljayYmQSh0LCJpbnB1dCIpJiZZLmdldCh0LCJjbGljayIpfHxBKHQsImEiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWUucmVzdWx0JiZlLm9yaWdpbmFsRXZlbnQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19fSxTLnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSxTLkV2ZW50PWZ1bmN0aW9uKGUsdCl7aWYoISh0aGlzIGluc3RhbmNlb2YgUy5FdmVudCkpcmV0dXJuIG5ldyBTLkV2ZW50KGUsdCk7ZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09ZS5kZWZhdWx0UHJldmVudGVkJiYhMT09PWUucmV0dXJuVmFsdWU/d2U6VGUsdGhpcy50YXJnZXQ9ZS50YXJnZXQmJjM9PT1lLnRhcmdldC5ub2RlVHlwZT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1lLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWUsdCYmUy5leHRlbmQodGhpcyx0KSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKSx0aGlzW1MuZXhwYW5kb109ITB9LFMuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpTLkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDpUZSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpUZSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpUZSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD13ZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD13ZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9d2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LFMuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCwiY2hhciI6ITAsY29kZTohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDohMH0sUy5ldmVudC5hZGRQcm9wKSxTLmVhY2goe2ZvY3VzOiJmb2N1c2luIixibHVyOiJmb2N1c291dCJ9LGZ1bmN0aW9uKGUsdCl7Uy5ldmVudC5zcGVjaWFsW2VdPXtzZXR1cDpmdW5jdGlvbigpe3JldHVybiBTZSh0aGlzLGUsQ2UpLCExfSx0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIFNlKHRoaXMsZSksITB9LF9kZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuITB9LGRlbGVnYXRlVHlwZTp0fX0pLFMuZWFjaCh7bW91c2VlbnRlcjoibW91c2VvdmVyIixtb3VzZWxlYXZlOiJtb3VzZW91dCIscG9pbnRlcmVudGVyOiJwb2ludGVyb3ZlciIscG9pbnRlcmxlYXZlOiJwb2ludGVyb3V0In0sZnVuY3Rpb24oZSxpKXtTLmV2ZW50LnNwZWNpYWxbZV09e2RlbGVnYXRlVHlwZTppLGJpbmRUeXBlOmksaGFuZGxlOmZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5yZWxhdGVkVGFyZ2V0LHI9ZS5oYW5kbGVPYmo7cmV0dXJuIG4mJihuPT09dGhpc3x8Uy5jb250YWlucyh0aGlzLG4pKXx8KGUudHlwZT1yLm9yaWdUeXBlLHQ9ci5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlLnR5cGU9aSksdH19fSksUy5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBFZSh0aGlzLGUsdCxuLHIpfSxvbmU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIEVlKHRoaXMsZSx0LG4sciwxKX0sb2ZmOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKGUmJmUucHJldmVudERlZmF1bHQmJmUuaGFuZGxlT2JqKXJldHVybiByPWUuaGFuZGxlT2JqLFMoZS5kZWxlZ2F0ZVRhcmdldCkub2ZmKHIubmFtZXNwYWNlP3Iub3JpZ1R5cGUrIi4iK3IubmFtZXNwYWNlOnIub3JpZ1R5cGUsci5zZWxlY3RvcixyLmhhbmRsZXIpLHRoaXM7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXtmb3IoaSBpbiBlKXRoaXMub2ZmKGksdCxlW2ldKTtyZXR1cm4gdGhpc31yZXR1cm4hMSE9PXQmJiJmdW5jdGlvbiIhPXR5cGVvZiB0fHwobj10LHQ9dm9pZCAwKSwhMT09PW4mJihuPVRlKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtTLmV2ZW50LnJlbW92ZSh0aGlzLGUsbix0KX0pfX0pO3ZhciBrZT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxBZT0vY2hlY2tlZFxzKig/OltePV18PVxzKi5jaGVja2VkLikvaSxOZT0vXlxzKjwhKD86XFtDREFUQVxbfC0tKXwoPzpcXVxdfC0tKT5ccyokL2c7ZnVuY3Rpb24gamUoZSx0KXtyZXR1cm4gQShlLCJ0YWJsZSIpJiZBKDExIT09dC5ub2RlVHlwZT90OnQuZmlyc3RDaGlsZCwidHIiKSYmUyhlKS5jaGlsZHJlbigidGJvZHkiKVswXXx8ZX1mdW5jdGlvbiBEZShlKXtyZXR1cm4gZS50eXBlPShudWxsIT09ZS5nZXRBdHRyaWJ1dGUoInR5cGUiKSkrIi8iK2UudHlwZSxlfWZ1bmN0aW9uIHFlKGUpe3JldHVybiJ0cnVlLyI9PT0oZS50eXBlfHwiIikuc2xpY2UoMCw1KT9lLnR5cGU9ZS50eXBlLnNsaWNlKDUpOmUucmVtb3ZlQXR0cmlidXRlKCJ0eXBlIiksZX1mdW5jdGlvbiBMZShlLHQpe3ZhciBuLHIsaSxvLGEscztpZigxPT09dC5ub2RlVHlwZSl7aWYoWS5oYXNEYXRhKGUpJiYocz1ZLmdldChlKS5ldmVudHMpKWZvcihpIGluIFkucmVtb3ZlKHQsImhhbmRsZSBldmVudHMiKSxzKWZvcihuPTAscj1zW2ldLmxlbmd0aDtuPHI7bisrKVMuZXZlbnQuYWRkKHQsaSxzW2ldW25dKTtRLmhhc0RhdGEoZSkmJihvPVEuYWNjZXNzKGUpLGE9Uy5leHRlbmQoe30sbyksUS5zZXQodCxhKSl9fWZ1bmN0aW9uIEhlKG4scixpLG8pe3I9ZyhyKTt2YXIgZSx0LGEscyx1LGwsYz0wLGY9bi5sZW5ndGgscD1mLTEsZD1yWzBdLGg9bShkKTtpZihofHwxPGYmJiJzdHJpbmciPT10eXBlb2YgZCYmIXkuY2hlY2tDbG9uZSYmQWUudGVzdChkKSlyZXR1cm4gbi5lYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW4uZXEoZSk7aCYmKHJbMF09ZC5jYWxsKHRoaXMsZSx0Lmh0bWwoKSkpLEhlKHQscixpLG8pfSk7aWYoZiYmKHQ9KGU9eGUocixuWzBdLm93bmVyRG9jdW1lbnQsITEsbixvKSkuZmlyc3RDaGlsZCwxPT09ZS5jaGlsZE5vZGVzLmxlbmd0aCYmKGU9dCksdHx8bykpe2ZvcihzPShhPVMubWFwKHZlKGUsInNjcmlwdCIpLERlKSkubGVuZ3RoO2M8ZjtjKyspdT1lLGMhPT1wJiYodT1TLmNsb25lKHUsITAsITApLHMmJlMubWVyZ2UoYSx2ZSh1LCJzY3JpcHQiKSkpLGkuY2FsbChuW2NdLHUsYyk7aWYocylmb3IobD1hW2EubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsUy5tYXAoYSxxZSksYz0wO2M8cztjKyspdT1hW2NdLGhlLnRlc3QodS50eXBlfHwiIikmJiFZLmFjY2Vzcyh1LCJnbG9iYWxFdmFsIikmJlMuY29udGFpbnMobCx1KSYmKHUuc3JjJiYibW9kdWxlIiE9PSh1LnR5cGV8fCIiKS50b0xvd2VyQ2FzZSgpP1MuX2V2YWxVcmwmJiF1Lm5vTW9kdWxlJiZTLl9ldmFsVXJsKHUuc3JjLHtub25jZTp1Lm5vbmNlfHx1LmdldEF0dHJpYnV0ZSgibm9uY2UiKX0sbCk6Yih1LnRleHRDb250ZW50LnJlcGxhY2UoTmUsIiIpLHUsbCkpfXJldHVybiBufWZ1bmN0aW9uIE9lKGUsdCxuKXtmb3IodmFyIHIsaT10P1MuZmlsdGVyKHQsZSk6ZSxvPTA7bnVsbCE9KHI9aVtvXSk7bysrKW58fDEhPT1yLm5vZGVUeXBlfHxTLmNsZWFuRGF0YSh2ZShyKSksci5wYXJlbnROb2RlJiYobiYmaWUocikmJnllKHZlKHIsInNjcmlwdCIpKSxyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocikpO3JldHVybiBlfVMuZXh0ZW5kKHtodG1sUHJlZmlsdGVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxjbG9uZTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYz1lLmNsb25lTm9kZSghMCksZj1pZShlKTtpZighKHkubm9DbG9uZUNoZWNrZWR8fDEhPT1lLm5vZGVUeXBlJiYxMSE9PWUubm9kZVR5cGV8fFMuaXNYTUxEb2MoZSkpKWZvcihhPXZlKGMpLHI9MCxpPShvPXZlKGUpKS5sZW5ndGg7cjxpO3IrKylzPW9bcl0sdT1hW3JdLHZvaWQgMCwiaW5wdXQiPT09KGw9dS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSYmcGUudGVzdChzLnR5cGUpP3UuY2hlY2tlZD1zLmNoZWNrZWQ6ImlucHV0IiE9PWwmJiJ0ZXh0YXJlYSIhPT1sfHwodS5kZWZhdWx0VmFsdWU9cy5kZWZhdWx0VmFsdWUpO2lmKHQpaWYobilmb3Iobz1vfHx2ZShlKSxhPWF8fHZlKGMpLHI9MCxpPW8ubGVuZ3RoO3I8aTtyKyspTGUob1tyXSxhW3JdKTtlbHNlIExlKGUsYyk7cmV0dXJuIDA8KGE9dmUoYywic2NyaXB0IikpLmxlbmd0aCYmeWUoYSwhZiYmdmUoZSwic2NyaXB0IikpLGN9LGNsZWFuRGF0YTpmdW5jdGlvbihlKXtmb3IodmFyIHQsbixyLGk9Uy5ldmVudC5zcGVjaWFsLG89MDt2b2lkIDAhPT0obj1lW29dKTtvKyspaWYoVihuKSl7aWYodD1uW1kuZXhwYW5kb10pe2lmKHQuZXZlbnRzKWZvcihyIGluIHQuZXZlbnRzKWlbcl0/Uy5ldmVudC5yZW1vdmUobixyKTpTLnJlbW92ZUV2ZW50KG4scix0LmhhbmRsZSk7bltZLmV4cGFuZG9dPXZvaWQgMH1uW1EuZXhwYW5kb10mJihuW1EuZXhwYW5kb109dm9pZCAwKX19fSksUy5mbi5leHRlbmQoe2RldGFjaDpmdW5jdGlvbihlKXtyZXR1cm4gT2UodGhpcyxlLCEwKX0scmVtb3ZlOmZ1bmN0aW9uKGUpe3JldHVybiBPZSh0aGlzLGUpfSx0ZXh0OmZ1bmN0aW9uKGUpe3JldHVybiAkKHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWU/Uy50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCl7MSE9PXRoaXMubm9kZVR5cGUmJjExIT09dGhpcy5ub2RlVHlwZSYmOSE9PXRoaXMubm9kZVR5cGV8fCh0aGlzLnRleHRDb250ZW50PWUpfSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0sYXBwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEhlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHxqZSh0aGlzLGUpLmFwcGVuZENoaWxkKGUpfSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciB0PWplKHRoaXMsZSk7dC5pbnNlcnRCZWZvcmUoZSx0LmZpcnN0Q2hpbGQpfX0pfSxiZWZvcmU6ZnVuY3Rpb24oKXtyZXR1cm4gSGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdGhpcyl9KX0sYWZ0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gSGUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdGhpcy5uZXh0U2libGluZyl9KX0sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGUsdD0wO251bGwhPShlPXRoaXNbdF0pO3QrKykxPT09ZS5ub2RlVHlwZSYmKFMuY2xlYW5EYXRhKHZlKGUsITEpKSxlLnRleHRDb250ZW50PSIiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1udWxsIT1lJiZlLHQ9bnVsbD09dD9lOnQsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gUy5jbG9uZSh0aGlzLGUsdCl9KX0saHRtbDpmdW5jdGlvbihlKXtyZXR1cm4gJCh0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbMF18fHt9LG49MCxyPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWUmJjE9PT10Lm5vZGVUeXBlKXJldHVybiB0LmlubmVySFRNTDtpZigic3RyaW5nIj09dHlwZW9mIGUmJiFrZS50ZXN0KGUpJiYhZ2VbKGRlLmV4ZWMoZSl8fFsiIiwiIl0pWzFdLnRvTG93ZXJDYXNlKCldKXtlPVMuaHRtbFByZWZpbHRlcihlKTt0cnl7Zm9yKDtuPHI7bisrKTE9PT0odD10aGlzW25dfHx7fSkubm9kZVR5cGUmJihTLmNsZWFuRGF0YSh2ZSh0LCExKSksdC5pbm5lckhUTUw9ZSk7dD0wfWNhdGNoKGUpe319dCYmdGhpcy5lbXB0eSgpLmFwcGVuZChlKX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBuPVtdO3JldHVybiBIZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt2YXIgdD10aGlzLnBhcmVudE5vZGU7Uy5pbkFycmF5KHRoaXMsbik8MCYmKFMuY2xlYW5EYXRhKHZlKHRoaXMpKSx0JiZ0LnJlcGxhY2VDaGlsZChlLHRoaXMpKX0sbil9fSksUy5lYWNoKHthcHBlbmRUbzoiYXBwZW5kIixwcmVwZW5kVG86InByZXBlbmQiLGluc2VydEJlZm9yZToiYmVmb3JlIixpbnNlcnRBZnRlcjoiYWZ0ZXIiLHJlcGxhY2VBbGw6InJlcGxhY2VXaXRoIn0sZnVuY3Rpb24oZSxhKXtTLmZuW2VdPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPVtdLHI9UyhlKSxpPXIubGVuZ3RoLTEsbz0wO288PWk7bysrKXQ9bz09PWk/dGhpczp0aGlzLmNsb25lKCEwKSxTKHJbb10pW2FdKHQpLHUuYXBwbHkobix0LmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2sobil9fSk7dmFyIFBlPW5ldyBSZWdFeHAoIl4oIitlZSsiKSg/IXB4KVthLXolXSskIiwiaSIpLFJlPWZ1bmN0aW9uKGUpe3ZhciB0PWUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztyZXR1cm4gdCYmdC5vcGVuZXJ8fCh0PUMpLHQuZ2V0Q29tcHV0ZWRTdHlsZShlKX0sTWU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz17fTtmb3IoaSBpbiB0KW9baV09ZS5zdHlsZVtpXSxlLnN0eWxlW2ldPXRbaV07Zm9yKGkgaW4gcj1uLmNhbGwoZSksdCllLnN0eWxlW2ldPW9baV07cmV0dXJuIHJ9LEllPW5ldyBSZWdFeHAobmUuam9pbigifCIpLCJpIik7ZnVuY3Rpb24gV2UoZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5zdHlsZTtyZXR1cm4obj1ufHxSZShlKSkmJigiIiE9PShhPW4uZ2V0UHJvcGVydHlWYWx1ZSh0KXx8blt0XSl8fGllKGUpfHwoYT1TLnN0eWxlKGUsdCkpLCF5LnBpeGVsQm94U3R5bGVzKCkmJlBlLnRlc3QoYSkmJkllLnRlc3QodCkmJihyPXMud2lkdGgsaT1zLm1pbldpZHRoLG89cy5tYXhXaWR0aCxzLm1pbldpZHRoPXMubWF4V2lkdGg9cy53aWR0aD1hLGE9bi53aWR0aCxzLndpZHRoPXIscy5taW5XaWR0aD1pLHMubWF4V2lkdGg9bykpLHZvaWQgMCE9PWE/YSsiIjphfWZ1bmN0aW9uIEZlKGUsdCl7cmV0dXJue2dldDpmdW5jdGlvbigpe2lmKCFlKCkpcmV0dXJuKHRoaXMuZ2V0PXQpLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtkZWxldGUgdGhpcy5nZXR9fX0hZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7aWYobCl7dS5zdHlsZS5jc3NUZXh0PSJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowIixsLnN0eWxlLmNzc1RleHQ9InBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjYwJTt0b3A6MSUiLHJlLmFwcGVuZENoaWxkKHUpLmFwcGVuZENoaWxkKGwpO3ZhciBlPUMuZ2V0Q29tcHV0ZWRTdHlsZShsKTtuPSIxJSIhPT1lLnRvcCxzPTEyPT09dChlLm1hcmdpbkxlZnQpLGwuc3R5bGUucmlnaHQ9IjYwJSIsbz0zNj09PXQoZS5yaWdodCkscj0zNj09PXQoZS53aWR0aCksbC5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGk9MTI9PT10KGwub2Zmc2V0V2lkdGgvMykscmUucmVtb3ZlQ2hpbGQodSksbD1udWxsfX1mdW5jdGlvbiB0KGUpe3JldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZSkpfXZhciBuLHIsaSxvLGEscyx1PUUuY3JlYXRlRWxlbWVudCgiZGl2IiksbD1FLmNyZWF0ZUVsZW1lbnQoImRpdiIpO2wuc3R5bGUmJihsLnN0eWxlLmJhY2tncm91bmRDbGlwPSJjb250ZW50LWJveCIsbC5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPSIiLHkuY2xlYXJDbG9uZVN0eWxlPSJjb250ZW50LWJveCI9PT1sLnN0eWxlLmJhY2tncm91bmRDbGlwLFMuZXh0ZW5kKHkse2JveFNpemluZ1JlbGlhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxyfSxwaXhlbEJveFN0eWxlczpmdW5jdGlvbigpe3JldHVybiBlKCksb30scGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBlKCksbn0scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxzfSxzY3JvbGxib3hTaXplOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxpfSxyZWxpYWJsZVRyRGltZW5zaW9uczpmdW5jdGlvbigpe3ZhciBlLHQsbixyO3JldHVybiBudWxsPT1hJiYoZT1FLmNyZWF0ZUVsZW1lbnQoInRhYmxlIiksdD1FLmNyZWF0ZUVsZW1lbnQoInRyIiksbj1FLmNyZWF0ZUVsZW1lbnQoImRpdiIpLGUuc3R5bGUuY3NzVGV4dD0icG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGUiLHQuc3R5bGUuY3NzVGV4dD0iYm9yZGVyOjFweCBzb2xpZCIsdC5zdHlsZS5oZWlnaHQ9IjFweCIsbi5zdHlsZS5oZWlnaHQ9IjlweCIsbi5zdHlsZS5kaXNwbGF5PSJibG9jayIscmUuYXBwZW5kQ2hpbGQoZSkuYXBwZW5kQ2hpbGQodCkuYXBwZW5kQ2hpbGQobikscj1DLmdldENvbXB1dGVkU3R5bGUodCksYT1wYXJzZUludChyLmhlaWdodCwxMCkrcGFyc2VJbnQoci5ib3JkZXJUb3BXaWR0aCwxMCkrcGFyc2VJbnQoci5ib3JkZXJCb3R0b21XaWR0aCwxMCk9PT10Lm9mZnNldEhlaWdodCxyZS5yZW1vdmVDaGlsZChlKSksYX19KSl9KCk7dmFyIEJlPVsiV2Via2l0IiwiTW96IiwibXMiXSwkZT1FLmNyZWF0ZUVsZW1lbnQoImRpdiIpLnN0eWxlLF9lPXt9O2Z1bmN0aW9uIHplKGUpe3ZhciB0PVMuY3NzUHJvcHNbZV18fF9lW2VdO3JldHVybiB0fHwoZSBpbiAkZT9lOl9lW2VdPWZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49QmUubGVuZ3RoO3doaWxlKG4tLSlpZigoZT1CZVtuXSt0KWluICRlKXJldHVybiBlfShlKXx8ZSl9dmFyIFVlPS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxYZT0vXi0tLyxWZT17cG9zaXRpb246ImFic29sdXRlIix2aXNpYmlsaXR5OiJoaWRkZW4iLGRpc3BsYXk6ImJsb2NrIn0sR2U9e2xldHRlclNwYWNpbmc6IjAiLGZvbnRXZWlnaHQ6IjQwMCJ9O2Z1bmN0aW9uIFllKGUsdCxuKXt2YXIgcj10ZS5leGVjKHQpO3JldHVybiByP01hdGgubWF4KDAsclsyXS0obnx8MCkpKyhyWzNdfHwicHgiKTp0fWZ1bmN0aW9uIFFlKGUsdCxuLHIsaSxvKXt2YXIgYT0id2lkdGgiPT09dD8xOjAscz0wLHU9MDtpZihuPT09KHI/ImJvcmRlciI6ImNvbnRlbnQiKSlyZXR1cm4gMDtmb3IoO2E8NDthKz0yKSJtYXJnaW4iPT09biYmKHUrPVMuY3NzKGUsbituZVthXSwhMCxpKSkscj8oImNvbnRlbnQiPT09biYmKHUtPVMuY3NzKGUsInBhZGRpbmciK25lW2FdLCEwLGkpKSwibWFyZ2luIiE9PW4mJih1LT1TLmNzcyhlLCJib3JkZXIiK25lW2FdKyJXaWR0aCIsITAsaSkpKToodSs9Uy5jc3MoZSwicGFkZGluZyIrbmVbYV0sITAsaSksInBhZGRpbmciIT09bj91Kz1TLmNzcyhlLCJib3JkZXIiK25lW2FdKyJXaWR0aCIsITAsaSk6cys9Uy5jc3MoZSwiYm9yZGVyIituZVthXSsiV2lkdGgiLCEwLGkpKTtyZXR1cm4hciYmMDw9byYmKHUrPU1hdGgubWF4KDAsTWF0aC5jZWlsKGVbIm9mZnNldCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLW8tdS1zLS41KSl8fDApLHV9ZnVuY3Rpb24gSmUoZSx0LG4pe3ZhciByPVJlKGUpLGk9KCF5LmJveFNpemluZ1JlbGlhYmxlKCl8fG4pJiYiYm9yZGVyLWJveCI9PT1TLmNzcyhlLCJib3hTaXppbmciLCExLHIpLG89aSxhPVdlKGUsdCxyKSxzPSJvZmZzZXQiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2lmKFBlLnRlc3QoYSkpe2lmKCFuKXJldHVybiBhO2E9ImF1dG8ifXJldHVybigheS5ib3hTaXppbmdSZWxpYWJsZSgpJiZpfHwheS5yZWxpYWJsZVRyRGltZW5zaW9ucygpJiZBKGUsInRyIil8fCJhdXRvIj09PWF8fCFwYXJzZUZsb2F0KGEpJiYiaW5saW5lIj09PVMuY3NzKGUsImRpc3BsYXkiLCExLHIpKSYmZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmKGk9ImJvcmRlci1ib3giPT09Uy5jc3MoZSwiYm94U2l6aW5nIiwhMSxyKSwobz1zIGluIGUpJiYoYT1lW3NdKSksKGE9cGFyc2VGbG9hdChhKXx8MCkrUWUoZSx0LG58fChpPyJib3JkZXIiOiJjb250ZW50IiksbyxyLGEpKyJweCJ9ZnVuY3Rpb24gS2UoZSx0LG4scixpKXtyZXR1cm4gbmV3IEtlLnByb3RvdHlwZS5pbml0KGUsdCxuLHIsaSl9Uy5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oZSx0KXtpZih0KXt2YXIgbj1XZShlLCJvcGFjaXR5Iik7cmV0dXJuIiI9PT1uPyIxIjpufX19fSxjc3NOdW1iZXI6e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGNvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxncmlkQXJlYTohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3RhcnQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7fSxzdHlsZTpmdW5jdGlvbihlLHQsbixyKXtpZihlJiYzIT09ZS5ub2RlVHlwZSYmOCE9PWUubm9kZVR5cGUmJmUuc3R5bGUpe3ZhciBpLG8sYSxzPVgodCksdT1YZS50ZXN0KHQpLGw9ZS5zdHlsZTtpZih1fHwodD16ZShzKSksYT1TLmNzc0hvb2tzW3RdfHxTLmNzc0hvb2tzW3NdLHZvaWQgMD09PW4pcmV0dXJuIGEmJiJnZXQiaW4gYSYmdm9pZCAwIT09KGk9YS5nZXQoZSwhMSxyKSk/aTpsW3RdOyJzdHJpbmciPT09KG89dHlwZW9mIG4pJiYoaT10ZS5leGVjKG4pKSYmaVsxXSYmKG49c2UoZSx0LGkpLG89Im51bWJlciIpLG51bGwhPW4mJm49PW4mJigibnVtYmVyIiE9PW98fHV8fChuKz1pJiZpWzNdfHwoUy5jc3NOdW1iZXJbc10/IiI6InB4IikpLHkuY2xlYXJDbG9uZVN0eWxlfHwiIiE9PW58fDAhPT10LmluZGV4T2YoImJhY2tncm91bmQiKXx8KGxbdF09ImluaGVyaXQiKSxhJiYic2V0ImluIGEmJnZvaWQgMD09PShuPWEuc2V0KGUsbixyKSl8fCh1P2wuc2V0UHJvcGVydHkodCxuKTpsW3RdPW4pKX19LGNzczpmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscz1YKHQpO3JldHVybiBYZS50ZXN0KHQpfHwodD16ZShzKSksKGE9Uy5jc3NIb29rc1t0XXx8Uy5jc3NIb29rc1tzXSkmJiJnZXQiaW4gYSYmKGk9YS5nZXQoZSwhMCxuKSksdm9pZCAwPT09aSYmKGk9V2UoZSx0LHIpKSwibm9ybWFsIj09PWkmJnQgaW4gR2UmJihpPUdlW3RdKSwiIj09PW58fG4/KG89cGFyc2VGbG9hdChpKSwhMD09PW58fGlzRmluaXRlKG8pP298fDA6aSk6aX19KSxTLmVhY2goWyJoZWlnaHQiLCJ3aWR0aCJdLGZ1bmN0aW9uKGUsdSl7Uy5jc3NIb29rc1t1XT17Z2V0OmZ1bmN0aW9uKGUsdCxuKXtpZih0KXJldHVybiFVZS50ZXN0KFMuY3NzKGUsImRpc3BsYXkiKSl8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg/SmUoZSx1LG4pOk1lKGUsVmUsZnVuY3Rpb24oKXtyZXR1cm4gSmUoZSx1LG4pfSl9LHNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaT1SZShlKSxvPSF5LnNjcm9sbGJveFNpemUoKSYmImFic29sdXRlIj09PWkucG9zaXRpb24sYT0ob3x8bikmJiJib3JkZXItYm94Ij09PVMuY3NzKGUsImJveFNpemluZyIsITEsaSkscz1uP1FlKGUsdSxuLGEsaSk6MDtyZXR1cm4gYSYmbyYmKHMtPU1hdGguY2VpbChlWyJvZmZzZXQiK3VbMF0udG9VcHBlckNhc2UoKSt1LnNsaWNlKDEpXS1wYXJzZUZsb2F0KGlbdV0pLVFlKGUsdSwiYm9yZGVyIiwhMSxpKS0uNSkpLHMmJihyPXRlLmV4ZWModCkpJiYicHgiIT09KHJbM118fCJweCIpJiYoZS5zdHlsZVt1XT10LHQ9Uy5jc3MoZSx1KSksWWUoMCx0LHMpfX19KSxTLmNzc0hvb2tzLm1hcmdpbkxlZnQ9RmUoeS5yZWxpYWJsZU1hcmdpbkxlZnQsZnVuY3Rpb24oZSx0KXtpZih0KXJldHVybihwYXJzZUZsb2F0KFdlKGUsIm1hcmdpbkxlZnQiKSl8fGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1NZShlLHttYXJnaW5MZWZ0OjB9LGZ1bmN0aW9uKCl7cmV0dXJuIGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdH0pKSsicHgifSksUy5lYWNoKHttYXJnaW46IiIscGFkZGluZzoiIixib3JkZXI6IldpZHRoIn0sZnVuY3Rpb24oaSxvKXtTLmNzc0hvb2tzW2krb109e2V4cGFuZDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPXt9LHI9InN0cmluZyI9PXR5cGVvZiBlP2Uuc3BsaXQoIiAiKTpbZV07dDw0O3QrKyluW2krbmVbdF0rb109clt0XXx8clt0LTJdfHxyWzBdO3JldHVybiBufX0sIm1hcmdpbiIhPT1pJiYoUy5jc3NIb29rc1tpK29dLnNldD1ZZSl9KSxTLmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuICQodGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXt9LGE9MDtpZihBcnJheS5pc0FycmF5KHQpKXtmb3Iocj1SZShlKSxpPXQubGVuZ3RoO2E8aTthKyspb1t0W2FdXT1TLmNzcyhlLHRbYV0sITEscik7cmV0dXJuIG99cmV0dXJuIHZvaWQgMCE9PW4/Uy5zdHlsZShlLHQsbik6Uy5jc3MoZSx0KX0sZSx0LDE8YXJndW1lbnRzLmxlbmd0aCl9fSksKChTLlR3ZWVuPUtlKS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOktlLGluaXQ6ZnVuY3Rpb24oZSx0LG4scixpLG8pe3RoaXMuZWxlbT1lLHRoaXMucHJvcD1uLHRoaXMuZWFzaW5nPWl8fFMuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz10LHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1yLHRoaXMudW5pdD1vfHwoUy5jc3NOdW1iZXJbbl0/IiI6InB4Iil9LGN1cjpmdW5jdGlvbigpe3ZhciBlPUtlLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBlJiZlLmdldD9lLmdldCh0aGlzKTpLZS5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24oZSl7dmFyIHQsbj1LZS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uP3RoaXMucG9zPXQ9Uy5lYXNpbmdbdGhpcy5lYXNpbmddKGUsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmUsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6dGhpcy5wb3M9dD1lLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSp0K3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLG4mJm4uc2V0P24uc2V0KHRoaXMpOktlLnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319KS5pbml0LnByb3RvdHlwZT1LZS5wcm90b3R5cGUsKEtlLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gMSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbCE9ZS5lbGVtW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtlLnByb3BdP2UuZWxlbVtlLnByb3BdOih0PVMuY3NzKGUuZWxlbSxlLnByb3AsIiIpKSYmImF1dG8iIT09dD90OjB9LHNldDpmdW5jdGlvbihlKXtTLmZ4LnN0ZXBbZS5wcm9wXT9TLmZ4LnN0ZXBbZS5wcm9wXShlKToxIT09ZS5lbGVtLm5vZGVUeXBlfHwhUy5jc3NIb29rc1tlLnByb3BdJiZudWxsPT1lLmVsZW0uc3R5bGVbemUoZS5wcm9wKV0/ZS5lbGVtW2UucHJvcF09ZS5ub3c6Uy5zdHlsZShlLmVsZW0sZS5wcm9wLGUubm93K2UudW5pdCl9fX0pLnNjcm9sbFRvcD1LZS5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGUpe2UuZWxlbS5ub2RlVHlwZSYmZS5lbGVtLnBhcmVudE5vZGUmJihlLmVsZW1bZS5wcm9wXT1lLm5vdyl9fSxTLmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxzd2luZzpmdW5jdGlvbihlKXtyZXR1cm4uNS1NYXRoLmNvcyhlKk1hdGguUEkpLzJ9LF9kZWZhdWx0OiJzd2luZyJ9LFMuZng9S2UucHJvdG90eXBlLmluaXQsUy5meC5zdGVwPXt9O3ZhciBaZSxldCx0dCxudCxydD0vXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8saXQ9L3F1ZXVlSG9va3MkLztmdW5jdGlvbiBvdCgpe2V0JiYoITE9PT1FLmhpZGRlbiYmQy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/Qy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob3QpOkMuc2V0VGltZW91dChvdCxTLmZ4LmludGVydmFsKSxTLmZ4LnRpY2soKSl9ZnVuY3Rpb24gYXQoKXtyZXR1cm4gQy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7WmU9dm9pZCAwfSksWmU9RGF0ZS5ub3coKX1mdW5jdGlvbiBzdChlLHQpe3ZhciBuLHI9MCxpPXtoZWlnaHQ6ZX07Zm9yKHQ9dD8xOjA7cjw0O3IrPTItdClpWyJtYXJnaW4iKyhuPW5lW3JdKV09aVsicGFkZGluZyIrbl09ZTtyZXR1cm4gdCYmKGkub3BhY2l0eT1pLndpZHRoPWUpLGl9ZnVuY3Rpb24gdXQoZSx0LG4pe2Zvcih2YXIgcixpPShsdC50d2VlbmVyc1t0XXx8W10pLmNvbmNhdChsdC50d2VlbmVyc1siKiJdKSxvPTAsYT1pLmxlbmd0aDtvPGE7bysrKWlmKHI9aVtvXS5jYWxsKG4sdCxlKSlyZXR1cm4gcn1mdW5jdGlvbiBsdChvLGUsdCl7dmFyIG4sYSxyPTAsaT1sdC5wcmVmaWx0ZXJzLmxlbmd0aCxzPVMuRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgdS5lbGVtfSksdT1mdW5jdGlvbigpe2lmKGEpcmV0dXJuITE7Zm9yKHZhciBlPVplfHxhdCgpLHQ9TWF0aC5tYXgoMCxsLnN0YXJ0VGltZStsLmR1cmF0aW9uLWUpLG49MS0odC9sLmR1cmF0aW9ufHwwKSxyPTAsaT1sLnR3ZWVucy5sZW5ndGg7cjxpO3IrKylsLnR3ZWVuc1tyXS5ydW4obik7cmV0dXJuIHMubm90aWZ5V2l0aChvLFtsLG4sdF0pLG48MSYmaT90OihpfHxzLm5vdGlmeVdpdGgobyxbbCwxLDBdKSxzLnJlc29sdmVXaXRoKG8sW2xdKSwhMSl9LGw9cy5wcm9taXNlKHtlbGVtOm8scHJvcHM6Uy5leHRlbmQoe30sZSksb3B0czpTLmV4dGVuZCghMCx7c3BlY2lhbEVhc2luZzp7fSxlYXNpbmc6Uy5lYXNpbmcuX2RlZmF1bHR9LHQpLG9yaWdpbmFsUHJvcGVydGllczplLG9yaWdpbmFsT3B0aW9uczp0LHN0YXJ0VGltZTpaZXx8YXQoKSxkdXJhdGlvbjp0LmR1cmF0aW9uLHR3ZWVuczpbXSxjcmVhdGVUd2VlbjpmdW5jdGlvbihlLHQpe3ZhciBuPVMuVHdlZW4obyxsLm9wdHMsZSx0LGwub3B0cy5zcGVjaWFsRWFzaW5nW2VdfHxsLm9wdHMuZWFzaW5nKTtyZXR1cm4gbC50d2VlbnMucHVzaChuKSxufSxzdG9wOmZ1bmN0aW9uKGUpe3ZhciB0PTAsbj1lP2wudHdlZW5zLmxlbmd0aDowO2lmKGEpcmV0dXJuIHRoaXM7Zm9yKGE9ITA7dDxuO3QrKylsLnR3ZWVuc1t0XS5ydW4oMSk7cmV0dXJuIGU/KHMubm90aWZ5V2l0aChvLFtsLDEsMF0pLHMucmVzb2x2ZVdpdGgobyxbbCxlXSkpOnMucmVqZWN0V2l0aChvLFtsLGVdKSx0aGlzfX0pLGM9bC5wcm9wcztmb3IoIWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYTtmb3IobiBpbiBlKWlmKGk9dFtyPVgobildLG89ZVtuXSxBcnJheS5pc0FycmF5KG8pJiYoaT1vWzFdLG89ZVtuXT1vWzBdKSxuIT09ciYmKGVbcl09byxkZWxldGUgZVtuXSksKGE9Uy5jc3NIb29rc1tyXSkmJiJleHBhbmQiaW4gYSlmb3IobiBpbiBvPWEuZXhwYW5kKG8pLGRlbGV0ZSBlW3JdLG8pbiBpbiBlfHwoZVtuXT1vW25dLHRbbl09aSk7ZWxzZSB0W3JdPWl9KGMsbC5vcHRzLnNwZWNpYWxFYXNpbmcpO3I8aTtyKyspaWYobj1sdC5wcmVmaWx0ZXJzW3JdLmNhbGwobCxvLGMsbC5vcHRzKSlyZXR1cm4gbShuLnN0b3ApJiYoUy5fcXVldWVIb29rcyhsLmVsZW0sbC5vcHRzLnF1ZXVlKS5zdG9wPW4uc3RvcC5iaW5kKG4pKSxuO3JldHVybiBTLm1hcChjLHV0LGwpLG0obC5vcHRzLnN0YXJ0KSYmbC5vcHRzLnN0YXJ0LmNhbGwobyxsKSxsLnByb2dyZXNzKGwub3B0cy5wcm9ncmVzcykuZG9uZShsLm9wdHMuZG9uZSxsLm9wdHMuY29tcGxldGUpLmZhaWwobC5vcHRzLmZhaWwpLmFsd2F5cyhsLm9wdHMuYWx3YXlzKSxTLmZ4LnRpbWVyKFMuZXh0ZW5kKHUse2VsZW06byxhbmltOmwscXVldWU6bC5vcHRzLnF1ZXVlfSkpLGx9Uy5BbmltYXRpb249Uy5leHRlbmQobHQse3R3ZWVuZXJzOnsiKiI6W2Z1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5jcmVhdGVUd2VlbihlLHQpO3JldHVybiBzZShuLmVsZW0sZSx0ZS5leGVjKHQpLG4pLG59XX0sdHdlZW5lcjpmdW5jdGlvbihlLHQpe20oZSk/KHQ9ZSxlPVsiKiJdKTplPWUubWF0Y2goUCk7Zm9yKHZhciBuLHI9MCxpPWUubGVuZ3RoO3I8aTtyKyspbj1lW3JdLGx0LnR3ZWVuZXJzW25dPWx0LnR3ZWVuZXJzW25dfHxbXSxsdC50d2VlbmVyc1tuXS51bnNoaWZ0KHQpfSxwcmVmaWx0ZXJzOltmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYyxmPSJ3aWR0aCJpbiB0fHwiaGVpZ2h0ImluIHQscD10aGlzLGQ9e30saD1lLnN0eWxlLGc9ZS5ub2RlVHlwZSYmYWUoZSksdj1ZLmdldChlLCJmeHNob3ciKTtmb3IociBpbiBuLnF1ZXVlfHwobnVsbD09KGE9Uy5fcXVldWVIb29rcyhlLCJmeCIpKS51bnF1ZXVlZCYmKGEudW5xdWV1ZWQ9MCxzPWEuZW1wdHkuZmlyZSxhLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXthLnVucXVldWVkfHxzKCl9KSxhLnVucXVldWVkKysscC5hbHdheXMoZnVuY3Rpb24oKXtwLmFsd2F5cyhmdW5jdGlvbigpe2EudW5xdWV1ZWQtLSxTLnF1ZXVlKGUsImZ4IikubGVuZ3RofHxhLmVtcHR5LmZpcmUoKX0pfSkpLHQpaWYoaT10W3JdLHJ0LnRlc3QoaSkpe2lmKGRlbGV0ZSB0W3JdLG89b3x8InRvZ2dsZSI9PT1pLGk9PT0oZz8iaGlkZSI6InNob3ciKSl7aWYoInNob3ciIT09aXx8IXZ8fHZvaWQgMD09PXZbcl0pY29udGludWU7Zz0hMH1kW3JdPXYmJnZbcl18fFMuc3R5bGUoZSxyKX1pZigodT0hUy5pc0VtcHR5T2JqZWN0KHQpKXx8IVMuaXNFbXB0eU9iamVjdChkKSlmb3IociBpbiBmJiYxPT09ZS5ub2RlVHlwZSYmKG4ub3ZlcmZsb3c9W2gub3ZlcmZsb3csaC5vdmVyZmxvd1gsaC5vdmVyZmxvd1ldLG51bGw9PShsPXYmJnYuZGlzcGxheSkmJihsPVkuZ2V0KGUsImRpc3BsYXkiKSksIm5vbmUiPT09KGM9Uy5jc3MoZSwiZGlzcGxheSIpKSYmKGw/Yz1sOihsZShbZV0sITApLGw9ZS5zdHlsZS5kaXNwbGF5fHxsLGM9Uy5jc3MoZSwiZGlzcGxheSIpLGxlKFtlXSkpKSwoImlubGluZSI9PT1jfHwiaW5saW5lLWJsb2NrIj09PWMmJm51bGwhPWwpJiYibm9uZSI9PT1TLmNzcyhlLCJmbG9hdCIpJiYodXx8KHAuZG9uZShmdW5jdGlvbigpe2guZGlzcGxheT1sfSksbnVsbD09bCYmKGM9aC5kaXNwbGF5LGw9Im5vbmUiPT09Yz8iIjpjKSksaC5kaXNwbGF5PSJpbmxpbmUtYmxvY2siKSksbi5vdmVyZmxvdyYmKGgub3ZlcmZsb3c9ImhpZGRlbiIscC5hbHdheXMoZnVuY3Rpb24oKXtoLm92ZXJmbG93PW4ub3ZlcmZsb3dbMF0saC5vdmVyZmxvd1g9bi5vdmVyZmxvd1sxXSxoLm92ZXJmbG93WT1uLm92ZXJmbG93WzJdfSkpLHU9ITEsZCl1fHwodj8iaGlkZGVuImluIHYmJihnPXYuaGlkZGVuKTp2PVkuYWNjZXNzKGUsImZ4c2hvdyIse2Rpc3BsYXk6bH0pLG8mJih2LmhpZGRlbj0hZyksZyYmbGUoW2VdLCEwKSxwLmRvbmUoZnVuY3Rpb24oKXtmb3IociBpbiBnfHxsZShbZV0pLFkucmVtb3ZlKGUsImZ4c2hvdyIpLGQpUy5zdHlsZShlLHIsZFtyXSl9KSksdT11dChnP3Zbcl06MCxyLHApLHIgaW4gdnx8KHZbcl09dS5zdGFydCxnJiYodS5lbmQ9dS5zdGFydCx1LnN0YXJ0PTApKX1dLHByZWZpbHRlcjpmdW5jdGlvbihlLHQpe3Q/bHQucHJlZmlsdGVycy51bnNoaWZ0KGUpOmx0LnByZWZpbHRlcnMucHVzaChlKX19KSxTLnNwZWVkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lJiYib2JqZWN0Ij09dHlwZW9mIGU/Uy5leHRlbmQoe30sZSk6e2NvbXBsZXRlOm58fCFuJiZ0fHxtKGUpJiZlLGR1cmF0aW9uOmUsZWFzaW5nOm4mJnR8fHQmJiFtKHQpJiZ0fTtyZXR1cm4gUy5meC5vZmY/ci5kdXJhdGlvbj0wOiJudW1iZXIiIT10eXBlb2Ygci5kdXJhdGlvbiYmKHIuZHVyYXRpb24gaW4gUy5meC5zcGVlZHM/ci5kdXJhdGlvbj1TLmZ4LnNwZWVkc1tyLmR1cmF0aW9uXTpyLmR1cmF0aW9uPVMuZnguc3BlZWRzLl9kZWZhdWx0KSxudWxsIT1yLnF1ZXVlJiYhMCE9PXIucXVldWV8fChyLnF1ZXVlPSJmeCIpLHIub2xkPXIuY29tcGxldGUsci5jb21wbGV0ZT1mdW5jdGlvbigpe20oci5vbGQpJiZyLm9sZC5jYWxsKHRoaXMpLHIucXVldWUmJlMuZGVxdWV1ZSh0aGlzLHIucXVldWUpfSxyfSxTLmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLmZpbHRlcihhZSkuY3NzKCJvcGFjaXR5IiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTp0fSxlLG4scil9LGFuaW1hdGU6ZnVuY3Rpb24odCxlLG4scil7dmFyIGk9Uy5pc0VtcHR5T2JqZWN0KHQpLG89Uy5zcGVlZChlLG4sciksYT1mdW5jdGlvbigpe3ZhciBlPWx0KHRoaXMsUy5leHRlbmQoe30sdCksbyk7KGl8fFkuZ2V0KHRoaXMsImZpbmlzaCIpKSYmZS5zdG9wKCEwKX07cmV0dXJuIGEuZmluaXNoPWEsaXx8ITE9PT1vLnF1ZXVlP3RoaXMuZWFjaChhKTp0aGlzLnF1ZXVlKG8ucXVldWUsYSl9LHN0b3A6ZnVuY3Rpb24oaSxlLG8pe3ZhciBhPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3RvcDtkZWxldGUgZS5zdG9wLHQobyl9O3JldHVybiJzdHJpbmciIT10eXBlb2YgaSYmKG89ZSxlPWksaT12b2lkIDApLGUmJnRoaXMucXVldWUoaXx8ImZ4IixbXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9ITAsdD1udWxsIT1pJiZpKyJxdWV1ZUhvb2tzIixuPVMudGltZXJzLHI9WS5nZXQodGhpcyk7aWYodClyW3RdJiZyW3RdLnN0b3AmJmEoclt0XSk7ZWxzZSBmb3IodCBpbiByKXJbdF0mJnJbdF0uc3RvcCYmaXQudGVzdCh0KSYmYShyW3RdKTtmb3IodD1uLmxlbmd0aDt0LS07KW5bdF0uZWxlbSE9PXRoaXN8fG51bGwhPWkmJm5bdF0ucXVldWUhPT1pfHwoblt0XS5hbmltLnN0b3AobyksZT0hMSxuLnNwbGljZSh0LDEpKTshZSYmb3x8Uy5kZXF1ZXVlKHRoaXMsaSl9KX0sZmluaXNoOmZ1bmN0aW9uKGEpe3JldHVybiExIT09YSYmKGE9YXx8ImZ4IiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdD1ZLmdldCh0aGlzKSxuPXRbYSsicXVldWUiXSxyPXRbYSsicXVldWVIb29rcyJdLGk9Uy50aW1lcnMsbz1uP24ubGVuZ3RoOjA7Zm9yKHQuZmluaXNoPSEwLFMucXVldWUodGhpcyxhLFtdKSxyJiZyLnN0b3AmJnIuc3RvcC5jYWxsKHRoaXMsITApLGU9aS5sZW5ndGg7ZS0tOylpW2VdLmVsZW09PT10aGlzJiZpW2VdLnF1ZXVlPT09YSYmKGlbZV0uYW5pbS5zdG9wKCEwKSxpLnNwbGljZShlLDEpKTtmb3IoZT0wO2U8bztlKyspbltlXSYmbltlXS5maW5pc2gmJm5bZV0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIHQuZmluaXNofSl9fSksUy5lYWNoKFsidG9nZ2xlIiwic2hvdyIsImhpZGUiXSxmdW5jdGlvbihlLHIpe3ZhciBpPVMuZm5bcl07Uy5mbltyXT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PWV8fCJib29sZWFuIj09dHlwZW9mIGU/aS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKHN0KHIsITApLGUsdCxuKX19KSxTLmVhY2goe3NsaWRlRG93bjpzdCgic2hvdyIpLHNsaWRlVXA6c3QoImhpZGUiKSxzbGlkZVRvZ2dsZTpzdCgidG9nZ2xlIiksZmFkZUluOntvcGFjaXR5OiJzaG93In0sZmFkZU91dDp7b3BhY2l0eToiaGlkZSJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6InRvZ2dsZSJ9fSxmdW5jdGlvbihlLHIpe1MuZm5bZV09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLmFuaW1hdGUocixlLHQsbil9fSksUy50aW1lcnM9W10sUy5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGUsdD0wLG49Uy50aW1lcnM7Zm9yKFplPURhdGUubm93KCk7dDxuLmxlbmd0aDt0KyspKGU9blt0XSkoKXx8blt0XSE9PWV8fG4uc3BsaWNlKHQtLSwxKTtuLmxlbmd0aHx8Uy5meC5zdG9wKCksWmU9dm9pZCAwfSxTLmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe1MudGltZXJzLnB1c2goZSksUy5meC5zdGFydCgpfSxTLmZ4LmludGVydmFsPTEzLFMuZnguc3RhcnQ9ZnVuY3Rpb24oKXtldHx8KGV0PSEwLG90KCkpfSxTLmZ4LnN0b3A9ZnVuY3Rpb24oKXtldD1udWxsfSxTLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxTLmZuLmRlbGF5PWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHI9Uy5meCYmUy5meC5zcGVlZHNbcl18fHIsZT1lfHwiZngiLHRoaXMucXVldWUoZSxmdW5jdGlvbihlLHQpe3ZhciBuPUMuc2V0VGltZW91dChlLHIpO3Quc3RvcD1mdW5jdGlvbigpe0MuY2xlYXJUaW1lb3V0KG4pfX0pfSx0dD1FLmNyZWF0ZUVsZW1lbnQoImlucHV0IiksbnQ9RS5jcmVhdGVFbGVtZW50KCJzZWxlY3QiKS5hcHBlbmRDaGlsZChFLmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpKSx0dC50eXBlPSJjaGVja2JveCIseS5jaGVja09uPSIiIT09dHQudmFsdWUseS5vcHRTZWxlY3RlZD1udC5zZWxlY3RlZCwodHQ9RS5jcmVhdGVFbGVtZW50KCJpbnB1dCIpKS52YWx1ZT0idCIsdHQudHlwZT0icmFkaW8iLHkucmFkaW9WYWx1ZT0idCI9PT10dC52YWx1ZTt2YXIgY3QsZnQ9Uy5leHByLmF0dHJIYW5kbGU7Uy5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gJCh0aGlzLFMuYXR0cixlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Uy5yZW1vdmVBdHRyKHRoaXMsZSl9KX19KSxTLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4idW5kZWZpbmVkIj09dHlwZW9mIGUuZ2V0QXR0cmlidXRlP1MucHJvcChlLHQsbik6KDE9PT1vJiZTLmlzWE1MRG9jKGUpfHwoaT1TLmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldfHwoUy5leHByLm1hdGNoLmJvb2wudGVzdCh0KT9jdDp2b2lkIDApKSx2b2lkIDAhPT1uP251bGw9PT1uP3ZvaWQgUy5yZW1vdmVBdHRyKGUsdCk6aSYmInNldCJpbiBpJiZ2b2lkIDAhPT0ocj1pLnNldChlLG4sdCkpP3I6KGUuc2V0QXR0cmlidXRlKHQsbisiIiksbik6aSYmImdldCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjpudWxsPT0ocj1TLmZpbmQuYXR0cihlLHQpKT92b2lkIDA6cil9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGUsdCl7aWYoIXkucmFkaW9WYWx1ZSYmInJhZGlvIj09PXQmJkEoZSwiaW5wdXQiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoInR5cGUiLHQpLG4mJihlLnZhbHVlPW4pLHR9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10JiZ0Lm1hdGNoKFApO2lmKGkmJjE9PT1lLm5vZGVUeXBlKXdoaWxlKG49aVtyKytdKWUucmVtb3ZlQXR0cmlidXRlKG4pfX0pLGN0PXtzZXQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiExPT09dD9TLnJlbW92ZUF0dHIoZSxuKTplLnNldEF0dHJpYnV0ZShuLG4pLG59fSxTLmVhY2goUy5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cdysvZyksZnVuY3Rpb24oZSx0KXt2YXIgYT1mdFt0XXx8Uy5maW5kLmF0dHI7ZnRbdF09ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz10LnRvTG93ZXJDYXNlKCk7cmV0dXJuIG58fChpPWZ0W29dLGZ0W29dPXIscj1udWxsIT1hKGUsdCxuKT9vOm51bGwsZnRbb109aSkscn19KTt2YXIgcHQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxkdD0vXig/OmF8YXJlYSkkL2k7ZnVuY3Rpb24gaHQoZSl7cmV0dXJuKGUubWF0Y2goUCl8fFtdKS5qb2luKCIgIil9ZnVuY3Rpb24gZ3QoZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiJ9ZnVuY3Rpb24gdnQoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZToic3RyaW5nIj09dHlwZW9mIGUmJmUubWF0Y2goUCl8fFtdfVMuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGUsdCl7cmV0dXJuICQodGhpcyxTLnByb3AsZSx0LDE8YXJndW1lbnRzLmxlbmd0aCl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW1MucHJvcEZpeFtlXXx8ZV19KX19KSxTLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4gMT09PW8mJlMuaXNYTUxEb2MoZSl8fCh0PVMucHJvcEZpeFt0XXx8dCxpPVMucHJvcEhvb2tzW3RdKSx2b2lkIDAhPT1uP2kmJiJzZXQiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOmVbdF09bjppJiYiZ2V0ImluIGkmJm51bGwhPT0ocj1pLmdldChlLHQpKT9yOmVbdF19LHByb3BIb29rczp7dGFiSW5kZXg6e2dldDpmdW5jdGlvbihlKXt2YXIgdD1TLmZpbmQuYXR0cihlLCJ0YWJpbmRleCIpO3JldHVybiB0P3BhcnNlSW50KHQsMTApOnB0LnRlc3QoZS5ub2RlTmFtZSl8fGR0LnRlc3QoZS5ub2RlTmFtZSkmJmUuaHJlZj8wOi0xfX19LHByb3BGaXg6eyJmb3IiOiJodG1sRm9yIiwiY2xhc3MiOiJjbGFzc05hbWUifX0pLHkub3B0U2VsZWN0ZWR8fChTLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3QmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksUy5lYWNoKFsidGFiSW5kZXgiLCJyZWFkT25seSIsIm1heExlbmd0aCIsImNlbGxTcGFjaW5nIiwiY2VsbFBhZGRpbmciLCJyb3dTcGFuIiwiY29sU3BhbiIsInVzZU1hcCIsImZyYW1lQm9yZGVyIiwiY29udGVudEVkaXRhYmxlIl0sZnVuY3Rpb24oKXtTLnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXT10aGlzfSksUy5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLHU9MDtpZihtKHQpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7Uyh0aGlzKS5hZGRDbGFzcyh0LmNhbGwodGhpcyxlLGd0KHRoaXMpKSl9KTtpZigoZT12dCh0KSkubGVuZ3RoKXdoaWxlKG49dGhpc1t1KytdKWlmKGk9Z3Qobikscj0xPT09bi5ub2RlVHlwZSYmIiAiK2h0KGkpKyIgIil7YT0wO3doaWxlKG89ZVthKytdKXIuaW5kZXhPZigiICIrbysiICIpPDAmJihyKz1vKyIgIik7aSE9PShzPWh0KHIpKSYmbi5zZXRBdHRyaWJ1dGUoImNsYXNzIixzKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsdT0wO2lmKG0odCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtTKHRoaXMpLnJlbW92ZUNsYXNzKHQuY2FsbCh0aGlzLGUsZ3QodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoImNsYXNzIiwiIik7aWYoKGU9dnQodCkpLmxlbmd0aCl3aGlsZShuPXRoaXNbdSsrXSlpZihpPWd0KG4pLHI9MT09PW4ubm9kZVR5cGUmJiIgIitodChpKSsiICIpe2E9MDt3aGlsZShvPWVbYSsrXSl3aGlsZSgtMTxyLmluZGV4T2YoIiAiK28rIiAiKSlyPXIucmVwbGFjZSgiICIrbysiICIsIiAiKTtpIT09KHM9aHQocikpJiZuLnNldEF0dHJpYnV0ZSgiY2xhc3MiLHMpfXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihpLHQpe3ZhciBvPXR5cGVvZiBpLGE9InN0cmluZyI9PT1vfHxBcnJheS5pc0FycmF5KGkpO3JldHVybiJib29sZWFuIj09dHlwZW9mIHQmJmE/dD90aGlzLmFkZENsYXNzKGkpOnRoaXMucmVtb3ZlQ2xhc3MoaSk6bShpKT90aGlzLmVhY2goZnVuY3Rpb24oZSl7Uyh0aGlzKS50b2dnbGVDbGFzcyhpLmNhbGwodGhpcyxlLGd0KHRoaXMpLHQpLHQpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHI7aWYoYSl7dD0wLG49Uyh0aGlzKSxyPXZ0KGkpO3doaWxlKGU9clt0KytdKW4uaGFzQ2xhc3MoZSk/bi5yZW1vdmVDbGFzcyhlKTpuLmFkZENsYXNzKGUpfWVsc2Ugdm9pZCAwIT09aSYmImJvb2xlYW4iIT09b3x8KChlPWd0KHRoaXMpKSYmWS5zZXQodGhpcywiX19jbGFzc05hbWVfXyIsZSksdGhpcy5zZXRBdHRyaWJ1dGUmJnRoaXMuc2V0QXR0cmlidXRlKCJjbGFzcyIsZXx8ITE9PT1pPyIiOlkuZ2V0KHRoaXMsIl9fY2xhc3NOYW1lX18iKXx8IiIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHI9MDt0PSIgIitlKyIgIjt3aGlsZShuPXRoaXNbcisrXSlpZigxPT09bi5ub2RlVHlwZSYmLTE8KCIgIitodChndChuKSkrIiAiKS5pbmRleE9mKHQpKXJldHVybiEwO3JldHVybiExfX0pO3ZhciB5dD0vXHIvZztTLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKG4pe3ZhciByLGUsaSx0PXRoaXNbMF07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGk9bShuKSx0aGlzLmVhY2goZnVuY3Rpb24oZSl7dmFyIHQ7MT09PXRoaXMubm9kZVR5cGUmJihudWxsPT0odD1pP24uY2FsbCh0aGlzLGUsUyh0aGlzKS52YWwoKSk6bik/dD0iIjoibnVtYmVyIj09dHlwZW9mIHQ/dCs9IiI6QXJyYXkuaXNBcnJheSh0KSYmKHQ9Uy5tYXAodCxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT8iIjplKyIifSkpLChyPVMudmFsSG9va3NbdGhpcy50eXBlXXx8Uy52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmInNldCJpbiByJiZ2b2lkIDAhPT1yLnNldCh0aGlzLHQsInZhbHVlIil8fCh0aGlzLnZhbHVlPXQpKX0pKTp0PyhyPVMudmFsSG9va3NbdC50eXBlXXx8Uy52YWxIb29rc1t0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmImdldCJpbiByJiZ2b2lkIDAhPT0oZT1yLmdldCh0LCJ2YWx1ZSIpKT9lOiJzdHJpbmciPT10eXBlb2YoZT10LnZhbHVlKT9lLnJlcGxhY2UoeXQsIiIpOm51bGw9PWU/IiI6ZTp2b2lkIDB9fSksUy5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD1TLmZpbmQuYXR0cihlLCJ2YWx1ZSIpO3JldHVybiBudWxsIT10P3Q6aHQoUy50ZXh0KGUpKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpPWUub3B0aW9ucyxvPWUuc2VsZWN0ZWRJbmRleCxhPSJzZWxlY3Qtb25lIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IUEobi5wYXJlbnROb2RlLCJvcHRncm91cCIpKSl7aWYodD1TKG4pLnZhbCgpLGEpcmV0dXJuIHQ7cy5wdXNoKHQpfXJldHVybiBzfSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk9ZS5vcHRpb25zLG89Uy5tYWtlQXJyYXkodCksYT1pLmxlbmd0aDt3aGlsZShhLS0pKChyPWlbYV0pLnNlbGVjdGVkPS0xPFMuaW5BcnJheShTLnZhbEhvb2tzLm9wdGlvbi5nZXQociksbykpJiYobj0hMCk7cmV0dXJuIG58fChlLnNlbGVjdGVkSW5kZXg9LTEpLG99fX19KSxTLmVhY2goWyJyYWRpbyIsImNoZWNrYm94Il0sZnVuY3Rpb24oKXtTLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBlLmNoZWNrZWQ9LTE8Uy5pbkFycmF5KFMoZSkudmFsKCksdCl9fSx5LmNoZWNrT258fChTLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpPyJvbiI6ZS52YWx1ZX0pfSkseS5mb2N1c2luPSJvbmZvY3VzaW4iaW4gQzt2YXIgbXQ9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLHh0PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O1MuZXh0ZW5kKFMuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsLGMsZixwPVtufHxFXSxkPXYuY2FsbChlLCJ0eXBlIik/ZS50eXBlOmUsaD12LmNhbGwoZSwibmFtZXNwYWNlIik/ZS5uYW1lc3BhY2Uuc3BsaXQoIi4iKTpbXTtpZihvPWY9YT1uPW58fEUsMyE9PW4ubm9kZVR5cGUmJjghPT1uLm5vZGVUeXBlJiYhbXQudGVzdChkK1MuZXZlbnQudHJpZ2dlcmVkKSYmKC0xPGQuaW5kZXhPZigiLiIpJiYoZD0oaD1kLnNwbGl0KCIuIikpLnNoaWZ0KCksaC5zb3J0KCkpLHU9ZC5pbmRleE9mKCI6Iik8MCYmIm9uIitkLChlPWVbUy5leHBhbmRvXT9lOm5ldyBTLkV2ZW50KGQsIm9iamVjdCI9PXR5cGVvZiBlJiZlKSkuaXNUcmlnZ2VyPXI/MjozLGUubmFtZXNwYWNlPWguam9pbigiLiIpLGUucm5hbWVzcGFjZT1lLm5hbWVzcGFjZT9uZXcgUmVnRXhwKCIoXnxcXC4pIitoLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpOm51bGwsZS5yZXN1bHQ9dm9pZCAwLGUudGFyZ2V0fHwoZS50YXJnZXQ9biksdD1udWxsPT10P1tlXTpTLm1ha2VBcnJheSh0LFtlXSksYz1TLmV2ZW50LnNwZWNpYWxbZF18fHt9LHJ8fCFjLnRyaWdnZXJ8fCExIT09Yy50cmlnZ2VyLmFwcGx5KG4sdCkpKXtpZighciYmIWMubm9CdWJibGUmJiF4KG4pKXtmb3Iocz1jLmRlbGVnYXRlVHlwZXx8ZCxtdC50ZXN0KHMrZCl8fChvPW8ucGFyZW50Tm9kZSk7bztvPW8ucGFyZW50Tm9kZSlwLnB1c2gobyksYT1vO2E9PT0obi5vd25lckRvY3VtZW50fHxFKSYmcC5wdXNoKGEuZGVmYXVsdFZpZXd8fGEucGFyZW50V2luZG93fHxDKX1pPTA7d2hpbGUoKG89cFtpKytdKSYmIWUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlmPW8sZS50eXBlPTE8aT9zOmMuYmluZFR5cGV8fGQsKGw9KFkuZ2V0KG8sImV2ZW50cyIpfHxPYmplY3QuY3JlYXRlKG51bGwpKVtlLnR5cGVdJiZZLmdldChvLCJoYW5kbGUiKSkmJmwuYXBwbHkobyx0KSwobD11JiZvW3VdKSYmbC5hcHBseSYmVihvKSYmKGUucmVzdWx0PWwuYXBwbHkobyx0KSwhMT09PWUucmVzdWx0JiZlLnByZXZlbnREZWZhdWx0KCkpO3JldHVybiBlLnR5cGU9ZCxyfHxlLmlzRGVmYXVsdFByZXZlbnRlZCgpfHxjLl9kZWZhdWx0JiYhMSE9PWMuX2RlZmF1bHQuYXBwbHkocC5wb3AoKSx0KXx8IVYobil8fHUmJm0obltkXSkmJiF4KG4pJiYoKGE9blt1XSkmJihuW3VdPW51bGwpLFMuZXZlbnQudHJpZ2dlcmVkPWQsZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpJiZmLmFkZEV2ZW50TGlzdGVuZXIoZCx4dCksbltkXSgpLGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmZi5yZW1vdmVFdmVudExpc3RlbmVyKGQseHQpLFMuZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxhJiYoblt1XT1hKSksZS5yZXN1bHR9fSxzaW11bGF0ZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9Uy5leHRlbmQobmV3IFMuRXZlbnQsbix7dHlwZTplLGlzU2ltdWxhdGVkOiEwfSk7Uy5ldmVudC50cmlnZ2VyKHIsbnVsbCx0KX19KSxTLmZuLmV4dGVuZCh7dHJpZ2dlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtTLmV2ZW50LnRyaWdnZXIoZSx0LHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpc1swXTtpZihuKXJldHVybiBTLmV2ZW50LnRyaWdnZXIoZSx0LG4sITApfX0pLHkuZm9jdXNpbnx8Uy5lYWNoKHtmb2N1czoiZm9jdXNpbiIsYmx1cjoiZm9jdXNvdXQifSxmdW5jdGlvbihuLHIpe3ZhciBpPWZ1bmN0aW9uKGUpe1MuZXZlbnQuc2ltdWxhdGUocixlLnRhcmdldCxTLmV2ZW50LmZpeChlKSl9O1MuZXZlbnQuc3BlY2lhbFtyXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMuZG9jdW1lbnR8fHRoaXMsdD1ZLmFjY2VzcyhlLHIpO3R8fGUuYWRkRXZlbnRMaXN0ZW5lcihuLGksITApLFkuYWNjZXNzKGUsciwodHx8MCkrMSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLmRvY3VtZW50fHx0aGlzLHQ9WS5hY2Nlc3MoZSxyKS0xO3Q/WS5hY2Nlc3MoZSxyLHQpOihlLnJlbW92ZUV2ZW50TGlzdGVuZXIobixpLCEwKSxZLnJlbW92ZShlLHIpKX19fSk7dmFyIGJ0PUMubG9jYXRpb24sd3Q9e2d1aWQ6RGF0ZS5ub3coKX0sVHQ9L1w/LztTLnBhcnNlWE1MPWZ1bmN0aW9uKGUpe3ZhciB0LG47aWYoIWV8fCJzdHJpbmciIT10eXBlb2YgZSlyZXR1cm4gbnVsbDt0cnl7dD0obmV3IEMuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcoZSwidGV4dC94bWwiKX1jYXRjaChlKXt9cmV0dXJuIG49dCYmdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgicGFyc2VyZXJyb3IiKVswXSx0JiYhbnx8Uy5lcnJvcigiSW52YWxpZCBYTUw6ICIrKG4/Uy5tYXAobi5jaGlsZE5vZGVzLGZ1bmN0aW9uKGUpe3JldHVybiBlLnRleHRDb250ZW50fSkuam9pbigiXG4iKTplKSksdH07dmFyIEN0PS9cW1xdJC8sRXQ9L1xyP1xuL2csU3Q9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLGt0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBBdChuLGUscixpKXt2YXIgdDtpZihBcnJheS5pc0FycmF5KGUpKVMuZWFjaChlLGZ1bmN0aW9uKGUsdCl7cnx8Q3QudGVzdChuKT9pKG4sdCk6QXQobisiWyIrKCJvYmplY3QiPT10eXBlb2YgdCYmbnVsbCE9dD9lOiIiKSsiXSIsdCxyLGkpfSk7ZWxzZSBpZihyfHwib2JqZWN0IiE9PXcoZSkpaShuLGUpO2Vsc2UgZm9yKHQgaW4gZSlBdChuKyJbIit0KyJdIixlW3RdLHIsaSl9Uy5wYXJhbT1mdW5jdGlvbihlLHQpe3ZhciBuLHI9W10saT1mdW5jdGlvbihlLHQpe3ZhciBuPW0odCk/dCgpOnQ7cltyLmxlbmd0aF09ZW5jb2RlVVJJQ29tcG9uZW50KGUpKyI9IitlbmNvZGVVUklDb21wb25lbnQobnVsbD09bj8iIjpuKX07aWYobnVsbD09ZSlyZXR1cm4iIjtpZihBcnJheS5pc0FycmF5KGUpfHxlLmpxdWVyeSYmIVMuaXNQbGFpbk9iamVjdChlKSlTLmVhY2goZSxmdW5jdGlvbigpe2kodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IobiBpbiBlKUF0KG4sZVtuXSx0LGkpO3JldHVybiByLmpvaW4oIiYiKX0sUy5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiBTLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9Uy5wcm9wKHRoaXMsImVsZW1lbnRzIik7cmV0dXJuIGU/Uy5tYWtlQXJyYXkoZSk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhUyh0aGlzKS5pcygiOmRpc2FibGVkIikmJmt0LnRlc3QodGhpcy5ub2RlTmFtZSkmJiFTdC50ZXN0KGUpJiYodGhpcy5jaGVja2VkfHwhcGUudGVzdChlKSl9KS5tYXAoZnVuY3Rpb24oZSx0KXt2YXIgbj1TKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1uP251bGw6QXJyYXkuaXNBcnJheShuKT9TLm1hcChuLGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOnQubmFtZSx2YWx1ZTplLnJlcGxhY2UoRXQsIlxyXG4iKX19KTp7bmFtZTp0Lm5hbWUsdmFsdWU6bi5yZXBsYWNlKEV0LCJcclxuIil9fSkuZ2V0KCl9fSk7dmFyIE50PS8lMjAvZyxqdD0vIy4qJC8sRHQ9LyhbPyZdKV89W14mXSovLHF0PS9eKC4qPyk6WyBcdF0qKFteXHJcbl0qKSQvZ20sTHQ9L14oPzpHRVR8SEVBRCkkLyxIdD0vXlwvXC8vLE90PXt9LFB0PXt9LFJ0PSIqLyIuY29uY2F0KCIqIiksTXQ9RS5jcmVhdGVFbGVtZW50KCJhIik7ZnVuY3Rpb24gSXQobyl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7InN0cmluZyIhPXR5cGVvZiBlJiYodD1lLGU9IioiKTt2YXIgbixyPTAsaT1lLnRvTG93ZXJDYXNlKCkubWF0Y2goUCl8fFtdO2lmKG0odCkpd2hpbGUobj1pW3IrK10pIisiPT09blswXT8obj1uLnNsaWNlKDEpfHwiKiIsKG9bbl09b1tuXXx8W10pLnVuc2hpZnQodCkpOihvW25dPW9bbl18fFtdKS5wdXNoKHQpfX1mdW5jdGlvbiBXdCh0LGksbyxhKXt2YXIgcz17fSx1PXQ9PT1QdDtmdW5jdGlvbiBsKGUpe3ZhciByO3JldHVybiBzW2VdPSEwLFMuZWFjaCh0W2VdfHxbXSxmdW5jdGlvbihlLHQpe3ZhciBuPXQoaSxvLGEpO3JldHVybiJzdHJpbmciIT10eXBlb2Ygbnx8dXx8c1tuXT91PyEocj1uKTp2b2lkIDA6KGkuZGF0YVR5cGVzLnVuc2hpZnQobiksbChuKSwhMSl9KSxyfXJldHVybiBsKGkuZGF0YVR5cGVzWzBdKXx8IXNbIioiXSYmbCgiKiIpfWZ1bmN0aW9uIEZ0KGUsdCl7dmFyIG4scixpPVMuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IobiBpbiB0KXZvaWQgMCE9PXRbbl0mJigoaVtuXT9lOnJ8fChyPXt9KSlbbl09dFtuXSk7cmV0dXJuIHImJlMuZXh0ZW5kKCEwLGUsciksZX1NdC5ocmVmPWJ0LmhyZWYsUy5leHRlbmQoe2FjdGl2ZTowLGxhc3RNb2RpZmllZDp7fSxldGFnOnt9LGFqYXhTZXR0aW5nczp7dXJsOmJ0LmhyZWYsdHlwZToiR0VUIixpc0xvY2FsOi9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoYnQucHJvdG9jb2wpLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZToiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IixhY2NlcHRzOnsiKiI6UnQsdGV4dDoidGV4dC9wbGFpbiIsaHRtbDoidGV4dC9odG1sIix4bWw6ImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwiLGpzb246ImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCJ9LGNvbnRlbnRzOnt4bWw6L1xieG1sXGIvLGh0bWw6L1xiaHRtbC8sanNvbjovXGJqc29uXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOiJyZXNwb25zZVhNTCIsdGV4dDoicmVzcG9uc2VUZXh0Iixqc29uOiJyZXNwb25zZUpTT04ifSxjb252ZXJ0ZXJzOnsiKiB0ZXh0IjpTdHJpbmcsInRleHQgaHRtbCI6ITAsInRleHQganNvbiI6SlNPTi5wYXJzZSwidGV4dCB4bWwiOlMucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihlLHQpe3JldHVybiB0P0Z0KEZ0KGUsUy5hamF4U2V0dGluZ3MpLHQpOkZ0KFMuYWpheFNldHRpbmdzLGUpfSxhamF4UHJlZmlsdGVyOkl0KE90KSxhamF4VHJhbnNwb3J0Okl0KFB0KSxhamF4OmZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSx0PXR8fHt9O3ZhciBjLGYscCxuLGQscixoLGcsaSxvLHY9Uy5hamF4U2V0dXAoe30sdCkseT12LmNvbnRleHR8fHYsbT12LmNvbnRleHQmJih5Lm5vZGVUeXBlfHx5LmpxdWVyeSk/Uyh5KTpTLmV2ZW50LHg9Uy5EZWZlcnJlZCgpLGI9Uy5DYWxsYmFja3MoIm9uY2UgbWVtb3J5Iiksdz12LnN0YXR1c0NvZGV8fHt9LGE9e30scz17fSx1PSJjYW5jZWxlZCIsVD17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGgpe2lmKCFuKXtuPXt9O3doaWxlKHQ9cXQuZXhlYyhwKSluW3RbMV0udG9Mb3dlckNhc2UoKSsiICJdPShuW3RbMV0udG9Mb3dlckNhc2UoKSsiICJdfHxbXSkuY29uY2F0KHRbMl0pfXQ9bltlLnRvTG93ZXJDYXNlKCkrIiAiXX1yZXR1cm4gbnVsbD09dD9udWxsOnQuam9pbigiLCAiKX0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGg/cDpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWgmJihlPXNbZS50b0xvd2VyQ2FzZSgpXT1zW2UudG9Mb3dlckNhc2UoKV18fGUsYVtlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1oJiYodi5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoaClULmFsd2F5cyhlW1Quc3RhdHVzXSk7ZWxzZSBmb3IodCBpbiBlKXdbdF09W3dbdF0sZVt0XV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fHU7cmV0dXJuIGMmJmMuYWJvcnQodCksbCgwLHQpLHRoaXN9fTtpZih4LnByb21pc2UoVCksdi51cmw9KChlfHx2LnVybHx8YnQuaHJlZikrIiIpLnJlcGxhY2UoSHQsYnQucHJvdG9jb2wrIi8vIiksdi50eXBlPXQubWV0aG9kfHx0LnR5cGV8fHYubWV0aG9kfHx2LnR5cGUsdi5kYXRhVHlwZXM9KHYuZGF0YVR5cGV8fCIqIikudG9Mb3dlckNhc2UoKS5tYXRjaChQKXx8WyIiXSxudWxsPT12LmNyb3NzRG9tYWluKXtyPUUuY3JlYXRlRWxlbWVudCgiYSIpO3RyeXtyLmhyZWY9di51cmwsci5ocmVmPXIuaHJlZix2LmNyb3NzRG9tYWluPU10LnByb3RvY29sKyIvLyIrTXQuaG9zdCE9ci5wcm90b2NvbCsiLy8iK3IuaG9zdH1jYXRjaChlKXt2LmNyb3NzRG9tYWluPSEwfX1pZih2LmRhdGEmJnYucHJvY2Vzc0RhdGEmJiJzdHJpbmciIT10eXBlb2Ygdi5kYXRhJiYodi5kYXRhPVMucGFyYW0odi5kYXRhLHYudHJhZGl0aW9uYWwpKSxXdChPdCx2LHQsVCksaClyZXR1cm4gVDtmb3IoaSBpbihnPVMuZXZlbnQmJnYuZ2xvYmFsKSYmMD09Uy5hY3RpdmUrKyYmUy5ldmVudC50cmlnZ2VyKCJhamF4U3RhcnQiKSx2LnR5cGU9di50eXBlLnRvVXBwZXJDYXNlKCksdi5oYXNDb250ZW50PSFMdC50ZXN0KHYudHlwZSksZj12LnVybC5yZXBsYWNlKGp0LCIiKSx2Lmhhc0NvbnRlbnQ/di5kYXRhJiZ2LnByb2Nlc3NEYXRhJiYwPT09KHYuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmKHYuZGF0YT12LmRhdGEucmVwbGFjZShOdCwiKyIpKToobz12LnVybC5zbGljZShmLmxlbmd0aCksdi5kYXRhJiYodi5wcm9jZXNzRGF0YXx8InN0cmluZyI9PXR5cGVvZiB2LmRhdGEpJiYoZis9KFR0LnRlc3QoZik/IiYiOiI/Iikrdi5kYXRhLGRlbGV0ZSB2LmRhdGEpLCExPT09di5jYWNoZSYmKGY9Zi5yZXBsYWNlKER0LCIkMSIpLG89KFR0LnRlc3QoZik/IiYiOiI/IikrIl89Iit3dC5ndWlkKysrbyksdi51cmw9ZitvKSx2LmlmTW9kaWZpZWQmJihTLmxhc3RNb2RpZmllZFtmXSYmVC5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Nb2RpZmllZC1TaW5jZSIsUy5sYXN0TW9kaWZpZWRbZl0pLFMuZXRhZ1tmXSYmVC5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Ob25lLU1hdGNoIixTLmV0YWdbZl0pKSwodi5kYXRhJiZ2Lmhhc0NvbnRlbnQmJiExIT09di5jb250ZW50VHlwZXx8dC5jb250ZW50VHlwZSkmJlQuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1UeXBlIix2LmNvbnRlbnRUeXBlKSxULnNldFJlcXVlc3RIZWFkZXIoIkFjY2VwdCIsdi5kYXRhVHlwZXNbMF0mJnYuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0/di5hY2NlcHRzW3YuZGF0YVR5cGVzWzBdXSsoIioiIT09di5kYXRhVHlwZXNbMF0/IiwgIitSdCsiOyBxPTAuMDEiOiIiKTp2LmFjY2VwdHNbIioiXSksdi5oZWFkZXJzKVQuc2V0UmVxdWVzdEhlYWRlcihpLHYuaGVhZGVyc1tpXSk7aWYodi5iZWZvcmVTZW5kJiYoITE9PT12LmJlZm9yZVNlbmQuY2FsbCh5LFQsdil8fGgpKXJldHVybiBULmFib3J0KCk7aWYodT0iYWJvcnQiLGIuYWRkKHYuY29tcGxldGUpLFQuZG9uZSh2LnN1Y2Nlc3MpLFQuZmFpbCh2LmVycm9yKSxjPVd0KFB0LHYsdCxUKSl7aWYoVC5yZWFkeVN0YXRlPTEsZyYmbS50cmlnZ2VyKCJhamF4U2VuZCIsW1Qsdl0pLGgpcmV0dXJuIFQ7di5hc3luYyYmMDx2LnRpbWVvdXQmJihkPUMuc2V0VGltZW91dChmdW5jdGlvbigpe1QuYWJvcnQoInRpbWVvdXQiKX0sdi50aW1lb3V0KSk7dHJ5e2g9ITEsYy5zZW5kKGEsbCl9Y2F0Y2goZSl7aWYoaCl0aHJvdyBlO2woLTEsZSl9fWVsc2UgbCgtMSwiTm8gVHJhbnNwb3J0Iik7ZnVuY3Rpb24gbChlLHQsbixyKXt2YXIgaSxvLGEscyx1LGw9dDtofHwoaD0hMCxkJiZDLmNsZWFyVGltZW91dChkKSxjPXZvaWQgMCxwPXJ8fCIiLFQucmVhZHlTdGF0ZT0wPGU/NDowLGk9MjAwPD1lJiZlPDMwMHx8MzA0PT09ZSxuJiYocz1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscz1lLmNvbnRlbnRzLHU9ZS5kYXRhVHlwZXM7d2hpbGUoIioiPT09dVswXSl1LnNoaWZ0KCksdm9pZCAwPT09ciYmKHI9ZS5taW1lVHlwZXx8dC5nZXRSZXNwb25zZUhlYWRlcigiQ29udGVudC1UeXBlIikpO2lmKHIpZm9yKGkgaW4gcylpZihzW2ldJiZzW2ldLnRlc3Qocikpe3UudW5zaGlmdChpKTticmVha31pZih1WzBdaW4gbilvPXVbMF07ZWxzZXtmb3IoaSBpbiBuKXtpZighdVswXXx8ZS5jb252ZXJ0ZXJzW2krIiAiK3VbMF1dKXtvPWk7YnJlYWt9YXx8KGE9aSl9bz1vfHxhfWlmKG8pcmV0dXJuIG8hPT11WzBdJiZ1LnVuc2hpZnQobyksbltvXX0odixULG4pKSwhaSYmLTE8Uy5pbkFycmF5KCJzY3JpcHQiLHYuZGF0YVR5cGVzKSYmUy5pbkFycmF5KCJqc29uIix2LmRhdGFUeXBlcyk8MCYmKHYuY29udmVydGVyc1sidGV4dCBzY3JpcHQiXT1mdW5jdGlvbigpe30pLHM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXt9LGM9ZS5kYXRhVHlwZXMuc2xpY2UoKTtpZihjWzFdKWZvcihhIGluIGUuY29udmVydGVycylsW2EudG9Mb3dlckNhc2UoKV09ZS5jb252ZXJ0ZXJzW2FdO289Yy5zaGlmdCgpO3doaWxlKG8paWYoZS5yZXNwb25zZUZpZWxkc1tvXSYmKG5bZS5yZXNwb25zZUZpZWxkc1tvXV09dCksIXUmJnImJmUuZGF0YUZpbHRlciYmKHQ9ZS5kYXRhRmlsdGVyKHQsZS5kYXRhVHlwZSkpLHU9byxvPWMuc2hpZnQoKSlpZigiKiI9PT1vKW89dTtlbHNlIGlmKCIqIiE9PXUmJnUhPT1vKXtpZighKGE9bFt1KyIgIitvXXx8bFsiKiAiK29dKSlmb3IoaSBpbiBsKWlmKChzPWkuc3BsaXQoIiAiKSlbMV09PT1vJiYoYT1sW3UrIiAiK3NbMF1dfHxsWyIqICIrc1swXV0pKXshMD09PWE/YT1sW2ldOiEwIT09bFtpXSYmKG89c1swXSxjLnVuc2hpZnQoc1sxXSkpO2JyZWFrfWlmKCEwIT09YSlpZihhJiZlWyJ0aHJvd3MiXSl0PWEodCk7ZWxzZSB0cnl7dD1hKHQpfWNhdGNoKGUpe3JldHVybntzdGF0ZToicGFyc2VyZXJyb3IiLGVycm9yOmE/ZToiTm8gY29udmVyc2lvbiBmcm9tICIrdSsiIHRvICIrb319fXJldHVybntzdGF0ZToic3VjY2VzcyIsZGF0YTp0fX0odixzLFQsaSksaT8odi5pZk1vZGlmaWVkJiYoKHU9VC5nZXRSZXNwb25zZUhlYWRlcigiTGFzdC1Nb2RpZmllZCIpKSYmKFMubGFzdE1vZGlmaWVkW2ZdPXUpLCh1PVQuZ2V0UmVzcG9uc2VIZWFkZXIoImV0YWciKSkmJihTLmV0YWdbZl09dSkpLDIwND09PWV8fCJIRUFEIj09PXYudHlwZT9sPSJub2NvbnRlbnQiOjMwND09PWU/bD0ibm90bW9kaWZpZWQiOihsPXMuc3RhdGUsbz1zLmRhdGEsaT0hKGE9cy5lcnJvcikpKTooYT1sLCFlJiZsfHwobD0iZXJyb3IiLGU8MCYmKGU9MCkpKSxULnN0YXR1cz1lLFQuc3RhdHVzVGV4dD0odHx8bCkrIiIsaT94LnJlc29sdmVXaXRoKHksW28sbCxUXSk6eC5yZWplY3RXaXRoKHksW1QsbCxhXSksVC5zdGF0dXNDb2RlKHcpLHc9dm9pZCAwLGcmJm0udHJpZ2dlcihpPyJhamF4U3VjY2VzcyI6ImFqYXhFcnJvciIsW1QsdixpP286YV0pLGIuZmlyZVdpdGgoeSxbVCxsXSksZyYmKG0udHJpZ2dlcigiYWpheENvbXBsZXRlIixbVCx2XSksLS1TLmFjdGl2ZXx8Uy5ldmVudC50cmlnZ2VyKCJhamF4U3RvcCIpKSl9cmV0dXJuIFR9LGdldEpTT046ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBTLmdldChlLHQsbiwianNvbiIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gUy5nZXQoZSx2b2lkIDAsdCwic2NyaXB0Iil9fSksUy5lYWNoKFsiZ2V0IiwicG9zdCJdLGZ1bmN0aW9uKGUsaSl7U1tpXT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbSh0KSYmKHI9cnx8bixuPXQsdD12b2lkIDApLFMuYWpheChTLmV4dGVuZCh7dXJsOmUsdHlwZTppLGRhdGFUeXBlOnIsZGF0YTp0LHN1Y2Nlc3M6bn0sUy5pc1BsYWluT2JqZWN0KGUpJiZlKSl9fSksUy5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe3ZhciB0O2Zvcih0IGluIGUuaGVhZGVycykiY29udGVudC10eXBlIj09PXQudG9Mb3dlckNhc2UoKSYmKGUuY29udGVudFR5cGU9ZS5oZWFkZXJzW3RdfHwiIil9KSxTLl9ldmFsVXJsPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUy5hamF4KHt1cmw6ZSx0eXBlOiJHRVQiLGRhdGFUeXBlOiJzY3JpcHQiLGNhY2hlOiEwLGFzeW5jOiExLGdsb2JhbDohMSxjb252ZXJ0ZXJzOnsidGV4dCBzY3JpcHQiOmZ1bmN0aW9uKCl7fX0sZGF0YUZpbHRlcjpmdW5jdGlvbihlKXtTLmdsb2JhbEV2YWwoZSx0LG4pfX0pfSxTLmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gdGhpc1swXSYmKG0oZSkmJihlPWUuY2FsbCh0aGlzWzBdKSksdD1TKGUsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksdGhpc1swXS5wYXJlbnROb2RlJiZ0Lmluc2VydEJlZm9yZSh0aGlzWzBdKSx0Lm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXM7d2hpbGUoZS5maXJzdEVsZW1lbnRDaGlsZCllPWUuZmlyc3RFbGVtZW50Q2hpbGQ7cmV0dXJuIGV9KS5hcHBlbmQodGhpcykpLHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihuKXtyZXR1cm4gbShuKT90aGlzLmVhY2goZnVuY3Rpb24oZSl7Uyh0aGlzKS53cmFwSW5uZXIobi5jYWxsKHRoaXMsZSkpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9Uyh0aGlzKSx0PWUuY29udGVudHMoKTt0Lmxlbmd0aD90LndyYXBBbGwobik6ZS5hcHBlbmQobil9KX0sd3JhcDpmdW5jdGlvbih0KXt2YXIgbj1tKHQpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7Uyh0aGlzKS53cmFwQWxsKG4/dC5jYWxsKHRoaXMsZSk6dCl9KX0sdW53cmFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnBhcmVudChlKS5ub3QoImJvZHkiKS5lYWNoKGZ1bmN0aW9uKCl7Uyh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxTLmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oZSl7cmV0dXJuIVMuZXhwci5wc2V1ZG9zLnZpc2libGUoZSl9LFMuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZS5vZmZzZXRXaWR0aHx8ZS5vZmZzZXRIZWlnaHR8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxTLmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBDLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe319O3ZhciBCdD17MDoyMDAsMTIyMzoyMDR9LCR0PVMuYWpheFNldHRpbmdzLnhocigpO3kuY29ycz0hISR0JiYid2l0aENyZWRlbnRpYWxzImluICR0LHkuYWpheD0kdD0hISR0LFMuYWpheFRyYW5zcG9ydChmdW5jdGlvbihpKXt2YXIgbyxhO2lmKHkuY29yc3x8JHQmJiFpLmNyb3NzRG9tYWluKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1pLnhocigpO2lmKHIub3BlbihpLnR5cGUsaS51cmwsaS5hc3luYyxpLnVzZXJuYW1lLGkucGFzc3dvcmQpLGkueGhyRmllbGRzKWZvcihuIGluIGkueGhyRmllbGRzKXJbbl09aS54aHJGaWVsZHNbbl07Zm9yKG4gaW4gaS5taW1lVHlwZSYmci5vdmVycmlkZU1pbWVUeXBlJiZyLm92ZXJyaWRlTWltZVR5cGUoaS5taW1lVHlwZSksaS5jcm9zc0RvbWFpbnx8ZVsiWC1SZXF1ZXN0ZWQtV2l0aCJdfHwoZVsiWC1SZXF1ZXN0ZWQtV2l0aCJdPSJYTUxIdHRwUmVxdWVzdCIpLGUpci5zZXRSZXF1ZXN0SGVhZGVyKG4sZVtuXSk7bz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtvJiYobz1hPXIub25sb2FkPXIub25lcnJvcj1yLm9uYWJvcnQ9ci5vbnRpbWVvdXQ9ci5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCwiYWJvcnQiPT09ZT9yLmFib3J0KCk6ImVycm9yIj09PWU/Im51bWJlciIhPXR5cGVvZiByLnN0YXR1cz90KDAsImVycm9yIik6dChyLnN0YXR1cyxyLnN0YXR1c1RleHQpOnQoQnRbci5zdGF0dXNdfHxyLnN0YXR1cyxyLnN0YXR1c1RleHQsInRleHQiIT09KHIucmVzcG9uc2VUeXBlfHwidGV4dCIpfHwic3RyaW5nIiE9dHlwZW9mIHIucmVzcG9uc2VUZXh0P3tiaW5hcnk6ci5yZXNwb25zZX06e3RleHQ6ci5yZXNwb25zZVRleHR9LHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKX19LHIub25sb2FkPW8oKSxhPXIub25lcnJvcj1yLm9udGltZW91dD1vKCJlcnJvciIpLHZvaWQgMCE9PXIub25hYm9ydD9yLm9uYWJvcnQ9YTpyLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1yLnJlYWR5U3RhdGUmJkMuc2V0VGltZW91dChmdW5jdGlvbigpe28mJmEoKX0pfSxvPW8oImFib3J0Iik7dHJ5e3Iuc2VuZChpLmhhc0NvbnRlbnQmJmkuZGF0YXx8bnVsbCl9Y2F0Y2goZSl7aWYobyl0aHJvdyBlfX0sYWJvcnQ6ZnVuY3Rpb24oKXtvJiZvKCl9fX0pLFMuYWpheFByZWZpbHRlcihmdW5jdGlvbihlKXtlLmNyb3NzRG9tYWluJiYoZS5jb250ZW50cy5zY3JpcHQ9ITEpfSksUy5hamF4U2V0dXAoe2FjY2VwdHM6e3NjcmlwdDoidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHQifSxjb250ZW50czp7c2NyaXB0Oi9cYig/OmphdmF8ZWNtYSlzY3JpcHRcYi99LGNvbnZlcnRlcnM6eyJ0ZXh0IHNjcmlwdCI6ZnVuY3Rpb24oZSl7cmV0dXJuIFMuZ2xvYmFsRXZhbChlKSxlfX19KSxTLmFqYXhQcmVmaWx0ZXIoInNjcmlwdCIsZnVuY3Rpb24oZSl7dm9pZCAwPT09ZS5jYWNoZSYmKGUuY2FjaGU9ITEpLGUuY3Jvc3NEb21haW4mJihlLnR5cGU9IkdFVCIpfSksUy5hamF4VHJhbnNwb3J0KCJzY3JpcHQiLGZ1bmN0aW9uKG4pe3ZhciByLGk7aWYobi5jcm9zc0RvbWFpbnx8bi5zY3JpcHRBdHRycylyZXR1cm57c2VuZDpmdW5jdGlvbihlLHQpe3I9UygiPHNjcmlwdD4iKS5hdHRyKG4uc2NyaXB0QXR0cnN8fHt9KS5wcm9wKHtjaGFyc2V0Om4uc2NyaXB0Q2hhcnNldCxzcmM6bi51cmx9KS5vbigibG9hZCBlcnJvciIsaT1mdW5jdGlvbihlKXtyLnJlbW92ZSgpLGk9bnVsbCxlJiZ0KCJlcnJvciI9PT1lLnR5cGU/NDA0OjIwMCxlLnR5cGUpfSksRS5oZWFkLmFwcGVuZENoaWxkKHJbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2kmJmkoKX19fSk7dmFyIF90LHp0PVtdLFV0PS8oPSlcPyg/PSZ8JCl8XD9cPy87Uy5hamF4U2V0dXAoe2pzb25wOiJjYWxsYmFjayIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBlPXp0LnBvcCgpfHxTLmV4cGFuZG8rIl8iK3d0Lmd1aWQrKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLFMuYWpheFByZWZpbHRlcigianNvbiBqc29ucCIsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPSExIT09ZS5qc29ucCYmKFV0LnRlc3QoZS51cmwpPyJ1cmwiOiJzdHJpbmciPT10eXBlb2YgZS5kYXRhJiYwPT09KGUuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmVXQudGVzdChlLmRhdGEpJiYiZGF0YSIpO2lmKGF8fCJqc29ucCI9PT1lLmRhdGFUeXBlc1swXSlyZXR1cm4gcj1lLmpzb25wQ2FsbGJhY2s9bShlLmpzb25wQ2FsbGJhY2spP2UuanNvbnBDYWxsYmFjaygpOmUuanNvbnBDYWxsYmFjayxhP2VbYV09ZVthXS5yZXBsYWNlKFV0LCIkMSIrcik6ITEhPT1lLmpzb25wJiYoZS51cmwrPShUdC50ZXN0KGUudXJsKT8iJiI6Ij8iKStlLmpzb25wKyI9IityKSxlLmNvbnZlcnRlcnNbInNjcmlwdCBqc29uIl09ZnVuY3Rpb24oKXtyZXR1cm4gb3x8Uy5lcnJvcihyKyIgd2FzIG5vdCBjYWxsZWQiKSxvWzBdfSxlLmRhdGFUeXBlc1swXT0ianNvbiIsaT1DW3JdLENbcl09ZnVuY3Rpb24oKXtvPWFyZ3VtZW50c30sbi5hbHdheXMoZnVuY3Rpb24oKXt2b2lkIDA9PT1pP1MoQykucmVtb3ZlUHJvcChyKTpDW3JdPWksZVtyXSYmKGUuanNvbnBDYWxsYmFjaz10Lmpzb25wQ2FsbGJhY2ssenQucHVzaChyKSksbyYmbShpKSYmaShvWzBdKSxvPWk9dm9pZCAwfSksInNjcmlwdCJ9KSx5LmNyZWF0ZUhUTUxEb2N1bWVudD0oKF90PUUuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCIiKS5ib2R5KS5pbm5lckhUTUw9Ijxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+IiwyPT09X3QuY2hpbGROb2Rlcy5sZW5ndGgpLFMucGFyc2VIVE1MPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGU/W106KCJib29sZWFuIj09dHlwZW9mIHQmJihuPXQsdD0hMSksdHx8KHkuY3JlYXRlSFRNTERvY3VtZW50Pygocj0odD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgiIikpLmNyZWF0ZUVsZW1lbnQoImJhc2UiKSkuaHJlZj1FLmxvY2F0aW9uLmhyZWYsdC5oZWFkLmFwcGVuZENoaWxkKHIpKTp0PUUpLG89IW4mJltdLChpPU4uZXhlYyhlKSk/W3QuY3JlYXRlRWxlbWVudChpWzFdKV06KGk9eGUoW2VdLHQsbyksbyYmby5sZW5ndGgmJlMobykucmVtb3ZlKCksUy5tZXJnZShbXSxpLmNoaWxkTm9kZXMpKSk7dmFyIHIsaSxvfSxTLmZuLmxvYWQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPXRoaXMscz1lLmluZGV4T2YoIiAiKTtyZXR1cm4tMTxzJiYocj1odChlLnNsaWNlKHMpKSxlPWUuc2xpY2UoMCxzKSksbSh0KT8obj10LHQ9dm9pZCAwKTp0JiYib2JqZWN0Ij09dHlwZW9mIHQmJihpPSJQT1NUIiksMDxhLmxlbmd0aCYmUy5hamF4KHt1cmw6ZSx0eXBlOml8fCJHRVQiLGRhdGFUeXBlOiJodG1sIixkYXRhOnR9KS5kb25lKGZ1bmN0aW9uKGUpe289YXJndW1lbnRzLGEuaHRtbChyP1MoIjxkaXY+IikuYXBwZW5kKFMucGFyc2VIVE1MKGUpKS5maW5kKHIpOmUpfSkuYWx3YXlzKG4mJmZ1bmN0aW9uKGUsdCl7YS5lYWNoKGZ1bmN0aW9uKCl7bi5hcHBseSh0aGlzLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30sUy5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIFMuZ3JlcChTLnRpbWVycyxmdW5jdGlvbihlKXtyZXR1cm4gdD09PWUuZWxlbX0pLmxlbmd0aH0sUy5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGw9Uy5jc3MoZSwicG9zaXRpb24iKSxjPVMoZSksZj17fTsic3RhdGljIj09PWwmJihlLnN0eWxlLnBvc2l0aW9uPSJyZWxhdGl2ZSIpLHM9Yy5vZmZzZXQoKSxvPVMuY3NzKGUsInRvcCIpLHU9Uy5jc3MoZSwibGVmdCIpLCgiYWJzb2x1dGUiPT09bHx8ImZpeGVkIj09PWwpJiYtMTwobyt1KS5pbmRleE9mKCJhdXRvIik/KGE9KHI9Yy5wb3NpdGlvbigpKS50b3AsaT1yLmxlZnQpOihhPXBhcnNlRmxvYXQobyl8fDAsaT1wYXJzZUZsb2F0KHUpfHwwKSxtKHQpJiYodD10LmNhbGwoZSxuLFMuZXh0ZW5kKHt9LHMpKSksbnVsbCE9dC50b3AmJihmLnRvcD10LnRvcC1zLnRvcCthKSxudWxsIT10LmxlZnQmJihmLmxlZnQ9dC5sZWZ0LXMubGVmdCtpKSwidXNpbmciaW4gdD90LnVzaW5nLmNhbGwoZSxmKTpjLmNzcyhmKX19LFMuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24odCl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihlKXtTLm9mZnNldC5zZXRPZmZzZXQodGhpcyx0LGUpfSk7dmFyIGUsbixyPXRoaXNbMF07cmV0dXJuIHI/ci5nZXRDbGllbnRSZWN0cygpLmxlbmd0aD8oZT1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49ci5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LHt0b3A6ZS50b3Arbi5wYWdlWU9mZnNldCxsZWZ0OmUubGVmdCtuLnBhZ2VYT2Zmc2V0fSk6e3RvcDowLGxlZnQ6MH06dm9pZCAwfSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBlLHQsbixyPXRoaXNbMF0saT17dG9wOjAsbGVmdDowfTtpZigiZml4ZWQiPT09Uy5jc3MociwicG9zaXRpb24iKSl0PXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZWxzZXt0PXRoaXMub2Zmc2V0KCksbj1yLm93bmVyRG9jdW1lbnQsZT1yLm9mZnNldFBhcmVudHx8bi5kb2N1bWVudEVsZW1lbnQ7d2hpbGUoZSYmKGU9PT1uLmJvZHl8fGU9PT1uLmRvY3VtZW50RWxlbWVudCkmJiJzdGF0aWMiPT09Uy5jc3MoZSwicG9zaXRpb24iKSllPWUucGFyZW50Tm9kZTtlJiZlIT09ciYmMT09PWUubm9kZVR5cGUmJigoaT1TKGUpLm9mZnNldCgpKS50b3ArPVMuY3NzKGUsImJvcmRlclRvcFdpZHRoIiwhMCksaS5sZWZ0Kz1TLmNzcyhlLCJib3JkZXJMZWZ0V2lkdGgiLCEwKSl9cmV0dXJue3RvcDp0LnRvcC1pLnRvcC1TLmNzcyhyLCJtYXJnaW5Ub3AiLCEwKSxsZWZ0OnQubGVmdC1pLmxlZnQtUy5jc3MociwibWFyZ2luTGVmdCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGUmJiJzdGF0aWMiPT09Uy5jc3MoZSwicG9zaXRpb24iKSllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxyZX0pfX0pLFMuZWFjaCh7c2Nyb2xsTGVmdDoicGFnZVhPZmZzZXQiLHNjcm9sbFRvcDoicGFnZVlPZmZzZXQifSxmdW5jdGlvbih0LGkpe3ZhciBvPSJwYWdlWU9mZnNldCI9PT1pO1MuZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuICQodGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoeChlKT9yPWU6OT09PWUubm9kZVR5cGUmJihyPWUuZGVmYXVsdFZpZXcpLHZvaWQgMD09PW4pcmV0dXJuIHI/cltpXTplW3RdO3I/ci5zY3JvbGxUbyhvP3IucGFnZVhPZmZzZXQ6bixvP246ci5wYWdlWU9mZnNldCk6ZVt0XT1ufSx0LGUsYXJndW1lbnRzLmxlbmd0aCl9fSksUy5lYWNoKFsidG9wIiwibGVmdCJdLGZ1bmN0aW9uKGUsbil7Uy5jc3NIb29rc1tuXT1GZSh5LnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oZSx0KXtpZih0KXJldHVybiB0PVdlKGUsbiksUGUudGVzdCh0KT9TKGUpLnBvc2l0aW9uKClbbl0rInB4Ijp0fSl9KSxTLmVhY2goe0hlaWdodDoiaGVpZ2h0IixXaWR0aDoid2lkdGgifSxmdW5jdGlvbihhLHMpe1MuZWFjaCh7cGFkZGluZzoiaW5uZXIiK2EsY29udGVudDpzLCIiOiJvdXRlciIrYX0sZnVuY3Rpb24ocixvKXtTLmZuW29dPWZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aCYmKHJ8fCJib29sZWFuIiE9dHlwZW9mIGUpLGk9cnx8KCEwPT09ZXx8ITA9PT10PyJtYXJnaW4iOiJib3JkZXIiKTtyZXR1cm4gJCh0aGlzLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtyZXR1cm4geChlKT8wPT09by5pbmRleE9mKCJvdXRlciIpP2VbImlubmVyIithXTplLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsiY2xpZW50IithXTo5PT09ZS5ub2RlVHlwZT8ocj1lLmRvY3VtZW50RWxlbWVudCxNYXRoLm1heChlLmJvZHlbInNjcm9sbCIrYV0sclsic2Nyb2xsIithXSxlLmJvZHlbIm9mZnNldCIrYV0sclsib2Zmc2V0IithXSxyWyJjbGllbnQiK2FdKSk6dm9pZCAwPT09bj9TLmNzcyhlLHQsaSk6Uy5zdHlsZShlLHQsbixpKX0scyxuP2U6dm9pZCAwLG4pfX0pfSksUy5lYWNoKFsiYWpheFN0YXJ0IiwiYWpheFN0b3AiLCJhamF4Q29tcGxldGUiLCJhamF4RXJyb3IiLCJhamF4U3VjY2VzcyIsImFqYXhTZW5kIl0sZnVuY3Rpb24oZSx0KXtTLmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9uKHQsZSl9fSksUy5mbi5leHRlbmQoe2JpbmQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLm9uKGUsbnVsbCx0LG4pfSx1bmJpbmQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5vZmYoZSxudWxsLHQpfSxkZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5vbih0LGUsbixyKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGUsIioqIik6dGhpcy5vZmYodCxlfHwiKioiLG4pfSxob3ZlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0fHxlKX19KSxTLmVhY2goImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnUiLnNwbGl0KCIgIiksZnVuY3Rpb24oZSxuKXtTLmZuW25dPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA8YXJndW1lbnRzLmxlbmd0aD90aGlzLm9uKG4sbnVsbCxlLHQpOnRoaXMudHJpZ2dlcihuKX19KTt2YXIgWHQ9L15bXHNcdUZFRkZceEEwXSt8W1xzXHVGRUZGXHhBMF0rJC9nO1MucHJveHk9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk7aWYoInN0cmluZyI9PXR5cGVvZiB0JiYobj1lW3RdLHQ9ZSxlPW4pLG0oZSkpcmV0dXJuIHI9cy5jYWxsKGFyZ3VtZW50cywyKSwoaT1mdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHR8fHRoaXMsci5jb25jYXQocy5jYWxsKGFyZ3VtZW50cykpKX0pLmd1aWQ9ZS5ndWlkPWUuZ3VpZHx8Uy5ndWlkKyssaX0sUy5ob2xkUmVhZHk9ZnVuY3Rpb24oZSl7ZT9TLnJlYWR5V2FpdCsrOlMucmVhZHkoITApfSxTLmlzQXJyYXk9QXJyYXkuaXNBcnJheSxTLnBhcnNlSlNPTj1KU09OLnBhcnNlLFMubm9kZU5hbWU9QSxTLmlzRnVuY3Rpb249bSxTLmlzV2luZG93PXgsUy5jYW1lbENhc2U9WCxTLnR5cGU9dyxTLm5vdz1EYXRlLm5vdyxTLmlzTnVtZXJpYz1mdW5jdGlvbihlKXt2YXIgdD1TLnR5cGUoZSk7cmV0dXJuKCJudW1iZXIiPT09dHx8InN0cmluZyI9PT10KSYmIWlzTmFOKGUtcGFyc2VGbG9hdChlKSl9LFMudHJpbT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT8iIjooZSsiIikucmVwbGFjZShYdCwiIil9LCJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZSgianF1ZXJ5IixbXSxmdW5jdGlvbigpe3JldHVybiBTfSk7dmFyIFZ0PUMualF1ZXJ5LEd0PUMuJDtyZXR1cm4gUy5ub0NvbmZsaWN0PWZ1bmN0aW9uKGUpe3JldHVybiBDLiQ9PT1TJiYoQy4kPUd0KSxlJiZDLmpRdWVyeT09PVMmJihDLmpRdWVyeT1WdCksU30sInVuZGVmaW5lZCI9PXR5cGVvZiBlJiYoQy5qUXVlcnk9Qy4kPVMpLFN9KTsKCgo7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgLy8gKioqIGluY2x1ZGVkOiBleHRlcm5hbC9qcXVlcnktdWktMS4xMi4xLm1pbi5qcyAqKioKLyohIGpRdWVyeSBVSSAtIHYxLjEyLjEgLSAyMDE2LTA5LTE0CiogaHR0cDovL2pxdWVyeXVpLmNvbQoqIEluY2x1ZGVzOiB3aWRnZXQuanMsIHBvc2l0aW9uLmpzLCBkYXRhLmpzLCBkaXNhYmxlLXNlbGVjdGlvbi5qcywgZWZmZWN0LmpzLCBlZmZlY3RzL2VmZmVjdC1ibGluZC5qcywgZWZmZWN0cy9lZmZlY3QtYm91bmNlLmpzLCBlZmZlY3RzL2VmZmVjdC1jbGlwLmpzLCBlZmZlY3RzL2VmZmVjdC1kcm9wLmpzLCBlZmZlY3RzL2VmZmVjdC1leHBsb2RlLmpzLCBlZmZlY3RzL2VmZmVjdC1mYWRlLmpzLCBlZmZlY3RzL2VmZmVjdC1mb2xkLmpzLCBlZmZlY3RzL2VmZmVjdC1oaWdobGlnaHQuanMsIGVmZmVjdHMvZWZmZWN0LXB1ZmYuanMsIGVmZmVjdHMvZWZmZWN0LXB1bHNhdGUuanMsIGVmZmVjdHMvZWZmZWN0LXNjYWxlLmpzLCBlZmZlY3RzL2VmZmVjdC1zaGFrZS5qcywgZWZmZWN0cy9lZmZlY3Qtc2l6ZS5qcywgZWZmZWN0cy9lZmZlY3Qtc2xpZGUuanMsIGVmZmVjdHMvZWZmZWN0LXRyYW5zZmVyLmpzLCBmb2N1c2FibGUuanMsIGZvcm0tcmVzZXQtbWl4aW4uanMsIGpxdWVyeS0xLTcuanMsIGtleWNvZGUuanMsIGxhYmVscy5qcywgc2Nyb2xsLXBhcmVudC5qcywgdGFiYmFibGUuanMsIHVuaXF1ZS1pZC5qcywgd2lkZ2V0cy9hY2NvcmRpb24uanMsIHdpZGdldHMvYXV0b2NvbXBsZXRlLmpzLCB3aWRnZXRzL2J1dHRvbi5qcywgd2lkZ2V0cy9jaGVja2JveHJhZGlvLmpzLCB3aWRnZXRzL2NvbnRyb2xncm91cC5qcywgd2lkZ2V0cy9kYXRlcGlja2VyLmpzLCB3aWRnZXRzL2RpYWxvZy5qcywgd2lkZ2V0cy9kcmFnZ2FibGUuanMsIHdpZGdldHMvZHJvcHBhYmxlLmpzLCB3aWRnZXRzL21lbnUuanMsIHdpZGdldHMvbW91c2UuanMsIHdpZGdldHMvcHJvZ3Jlc3NiYXIuanMsIHdpZGdldHMvcmVzaXphYmxlLmpzLCB3aWRnZXRzL3NlbGVjdGFibGUuanMsIHdpZGdldHMvc2VsZWN0bWVudS5qcywgd2lkZ2V0cy9zbGlkZXIuanMsIHdpZGdldHMvc29ydGFibGUuanMsIHdpZGdldHMvc3Bpbm5lci5qcywgd2lkZ2V0cy90YWJzLmpzLCB3aWRnZXRzL3Rvb2x0aXAuanMKKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yczsgTGljZW5zZWQgTUlUICovCgooZnVuY3Rpb24odCl7ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoWyJqcXVlcnkiXSx0KTp0KGpRdWVyeSl9KShmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe2Zvcih2YXIgZT10LmNzcygidmlzaWJpbGl0eSIpOyJpbmhlcml0Ij09PWU7KXQ9dC5wYXJlbnQoKSxlPXQuY3NzKCJ2aXNpYmlsaXR5Iik7cmV0dXJuImhpZGRlbiIhPT1lfWZ1bmN0aW9uIGkodCl7Zm9yKHZhciBlLGk7dC5sZW5ndGgmJnRbMF0hPT1kb2N1bWVudDspe2lmKGU9dC5jc3MoInBvc2l0aW9uIiksKCJhYnNvbHV0ZSI9PT1lfHwicmVsYXRpdmUiPT09ZXx8ImZpeGVkIj09PWUpJiYoaT1wYXJzZUludCh0LmNzcygiekluZGV4IiksMTApLCFpc05hTihpKSYmMCE9PWkpKXJldHVybiBpO3Q9dC5wYXJlbnQoKX1yZXR1cm4gMH1mdW5jdGlvbiBzKCl7dGhpcy5fY3VySW5zdD1udWxsLHRoaXMuX2tleUV2ZW50PSExLHRoaXMuX2Rpc2FibGVkSW5wdXRzPVtdLHRoaXMuX2RhdGVwaWNrZXJTaG93aW5nPSExLHRoaXMuX2luRGlhbG9nPSExLHRoaXMuX21haW5EaXZJZD0idWktZGF0ZXBpY2tlci1kaXYiLHRoaXMuX2lubGluZUNsYXNzPSJ1aS1kYXRlcGlja2VyLWlubGluZSIsdGhpcy5fYXBwZW5kQ2xhc3M9InVpLWRhdGVwaWNrZXItYXBwZW5kIix0aGlzLl90cmlnZ2VyQ2xhc3M9InVpLWRhdGVwaWNrZXItdHJpZ2dlciIsdGhpcy5fZGlhbG9nQ2xhc3M9InVpLWRhdGVwaWNrZXItZGlhbG9nIix0aGlzLl9kaXNhYmxlQ2xhc3M9InVpLWRhdGVwaWNrZXItZGlzYWJsZWQiLHRoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzPSJ1aS1kYXRlcGlja2VyLXVuc2VsZWN0YWJsZSIsdGhpcy5fY3VycmVudENsYXNzPSJ1aS1kYXRlcGlja2VyLWN1cnJlbnQtZGF5Iix0aGlzLl9kYXlPdmVyQ2xhc3M9InVpLWRhdGVwaWNrZXItZGF5cy1jZWxsLW92ZXIiLHRoaXMucmVnaW9uYWw9W10sdGhpcy5yZWdpb25hbFsiIl09e2Nsb3NlVGV4dDoiRG9uZSIscHJldlRleHQ6IlByZXYiLG5leHRUZXh0OiJOZXh0IixjdXJyZW50VGV4dDoiVG9kYXkiLG1vbnRoTmFtZXM6WyJKYW51YXJ5IiwiRmVicnVhcnkiLCJNYXJjaCIsIkFwcmlsIiwiTWF5IiwiSnVuZSIsIkp1bHkiLCJBdWd1c3QiLCJTZXB0ZW1iZXIiLCJPY3RvYmVyIiwiTm92ZW1iZXIiLCJEZWNlbWJlciJdLG1vbnRoTmFtZXNTaG9ydDpbIkphbiIsIkZlYiIsIk1hciIsIkFwciIsIk1heSIsIkp1biIsIkp1bCIsIkF1ZyIsIlNlcCIsIk9jdCIsIk5vdiIsIkRlYyJdLGRheU5hbWVzOlsiU3VuZGF5IiwiTW9uZGF5IiwiVHVlc2RheSIsIldlZG5lc2RheSIsIlRodXJzZGF5IiwiRnJpZGF5IiwiU2F0dXJkYXkiXSxkYXlOYW1lc1Nob3J0OlsiU3VuIiwiTW9uIiwiVHVlIiwiV2VkIiwiVGh1IiwiRnJpIiwiU2F0Il0sZGF5TmFtZXNNaW46WyJTdSIsIk1vIiwiVHUiLCJXZSIsIlRoIiwiRnIiLCJTYSJdLHdlZWtIZWFkZXI6IldrIixkYXRlRm9ybWF0OiJtbS9kZC95eSIsZmlyc3REYXk6MCxpc1JUTDohMSxzaG93TW9udGhBZnRlclllYXI6ITEseWVhclN1ZmZpeDoiIn0sdGhpcy5fZGVmYXVsdHM9e3Nob3dPbjoiZm9jdXMiLHNob3dBbmltOiJmYWRlSW4iLHNob3dPcHRpb25zOnt9LGRlZmF1bHREYXRlOm51bGwsYXBwZW5kVGV4dDoiIixidXR0b25UZXh0OiIuLi4iLGJ1dHRvbkltYWdlOiIiLGJ1dHRvbkltYWdlT25seTohMSxoaWRlSWZOb1ByZXZOZXh0OiExLG5hdmlnYXRpb25Bc0RhdGVGb3JtYXQ6ITEsZ290b0N1cnJlbnQ6ITEsY2hhbmdlTW9udGg6ITEsY2hhbmdlWWVhcjohMSx5ZWFyUmFuZ2U6ImMtMTA6YysxMCIsc2hvd090aGVyTW9udGhzOiExLHNlbGVjdE90aGVyTW9udGhzOiExLHNob3dXZWVrOiExLGNhbGN1bGF0ZVdlZWs6dGhpcy5pc284NjAxV2VlayxzaG9ydFllYXJDdXRvZmY6IisxMCIsbWluRGF0ZTpudWxsLG1heERhdGU6bnVsbCxkdXJhdGlvbjoiZmFzdCIsYmVmb3JlU2hvd0RheTpudWxsLGJlZm9yZVNob3c6bnVsbCxvblNlbGVjdDpudWxsLG9uQ2hhbmdlTW9udGhZZWFyOm51bGwsb25DbG9zZTpudWxsLG51bWJlck9mTW9udGhzOjEsc2hvd0N1cnJlbnRBdFBvczowLHN0ZXBNb250aHM6MSxzdGVwQmlnTW9udGhzOjEyLGFsdEZpZWxkOiIiLGFsdEZvcm1hdDoiIixjb25zdHJhaW5JbnB1dDohMCxzaG93QnV0dG9uUGFuZWw6ITEsYXV0b1NpemU6ITEsZGlzYWJsZWQ6ITF9LHQuZXh0ZW5kKHRoaXMuX2RlZmF1bHRzLHRoaXMucmVnaW9uYWxbIiJdKSx0aGlzLnJlZ2lvbmFsLmVuPXQuZXh0ZW5kKCEwLHt9LHRoaXMucmVnaW9uYWxbIiJdKSx0aGlzLnJlZ2lvbmFsWyJlbi1VUyJdPXQuZXh0ZW5kKCEwLHt9LHRoaXMucmVnaW9uYWwuZW4pLHRoaXMuZHBEaXY9bih0KCI8ZGl2IGlkPSciK3RoaXMuX21haW5EaXZJZCsiJyBjbGFzcz0ndWktZGF0ZXBpY2tlciB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktaGVscGVyLWNsZWFyZml4IHVpLWNvcm5lci1hbGwnPjwvZGl2PiIpKX1mdW5jdGlvbiBuKGUpe3ZhciBpPSJidXR0b24sIC51aS1kYXRlcGlja2VyLXByZXYsIC51aS1kYXRlcGlja2VyLW5leHQsIC51aS1kYXRlcGlja2VyLWNhbGVuZGFyIHRkIGEiO3JldHVybiBlLm9uKCJtb3VzZW91dCIsaSxmdW5jdGlvbigpe3QodGhpcykucmVtb3ZlQ2xhc3MoInVpLXN0YXRlLWhvdmVyIiksLTEhPT10aGlzLmNsYXNzTmFtZS5pbmRleE9mKCJ1aS1kYXRlcGlja2VyLXByZXYiKSYmdCh0aGlzKS5yZW1vdmVDbGFzcygidWktZGF0ZXBpY2tlci1wcmV2LWhvdmVyIiksLTEhPT10aGlzLmNsYXNzTmFtZS5pbmRleE9mKCJ1aS1kYXRlcGlja2VyLW5leHQiKSYmdCh0aGlzKS5yZW1vdmVDbGFzcygidWktZGF0ZXBpY2tlci1uZXh0LWhvdmVyIil9KS5vbigibW91c2VvdmVyIixpLG8pfWZ1bmN0aW9uIG8oKXt0LmRhdGVwaWNrZXIuX2lzRGlzYWJsZWREYXRlcGlja2VyKG0uaW5saW5lP20uZHBEaXYucGFyZW50KClbMF06bS5pbnB1dFswXSl8fCh0KHRoaXMpLnBhcmVudHMoIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyIikuZmluZCgiYSIpLnJlbW92ZUNsYXNzKCJ1aS1zdGF0ZS1ob3ZlciIpLHQodGhpcykuYWRkQ2xhc3MoInVpLXN0YXRlLWhvdmVyIiksLTEhPT10aGlzLmNsYXNzTmFtZS5pbmRleE9mKCJ1aS1kYXRlcGlja2VyLXByZXYiKSYmdCh0aGlzKS5hZGRDbGFzcygidWktZGF0ZXBpY2tlci1wcmV2LWhvdmVyIiksLTEhPT10aGlzLmNsYXNzTmFtZS5pbmRleE9mKCJ1aS1kYXRlcGlja2VyLW5leHQiKSYmdCh0aGlzKS5hZGRDbGFzcygidWktZGF0ZXBpY2tlci1uZXh0LWhvdmVyIikpfWZ1bmN0aW9uIGEoZSxpKXt0LmV4dGVuZChlLGkpO2Zvcih2YXIgcyBpbiBpKW51bGw9PWlbc10mJihlW3NdPWlbc10pO3JldHVybiBlfWZ1bmN0aW9uIHIodCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbGVtZW50LnZhbCgpO3QuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX3JlZnJlc2goKSxlIT09dGhpcy5lbGVtZW50LnZhbCgpJiZ0aGlzLl90cmlnZ2VyKCJjaGFuZ2UiKX19dC51aT10LnVpfHx7fSx0LnVpLnZlcnNpb249IjEuMTIuMSI7dmFyIGg9MCxsPUFycmF5LnByb3RvdHlwZS5zbGljZTt0LmNsZWFuRGF0YT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oaSl7dmFyIHMsbixvO2ZvcihvPTA7bnVsbCE9KG49aVtvXSk7bysrKXRyeXtzPXQuX2RhdGEobiwiZXZlbnRzIikscyYmcy5yZW1vdmUmJnQobikudHJpZ2dlckhhbmRsZXIoInJlbW92ZSIpfWNhdGNoKGEpe31lKGkpfX0odC5jbGVhbkRhdGEpLHQud2lkZ2V0PWZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvLGEscj17fSxoPWUuc3BsaXQoIi4iKVswXTtlPWUuc3BsaXQoIi4iKVsxXTt2YXIgbD1oKyItIitlO3JldHVybiBzfHwocz1pLGk9dC5XaWRnZXQpLHQuaXNBcnJheShzKSYmKHM9dC5leHRlbmQuYXBwbHkobnVsbCxbe31dLmNvbmNhdChzKSkpLHQuZXhwclsiOiJdW2wudG9Mb3dlckNhc2UoKV09ZnVuY3Rpb24oZSl7cmV0dXJuISF0LmRhdGEoZSxsKX0sdFtoXT10W2hdfHx7fSxuPXRbaF1bZV0sbz10W2hdW2VdPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVdpZGdldD8oYXJndW1lbnRzLmxlbmd0aCYmdGhpcy5fY3JlYXRlV2lkZ2V0KHQsZSksdm9pZCAwKTpuZXcgbyh0LGUpfSx0LmV4dGVuZChvLG4se3ZlcnNpb246cy52ZXJzaW9uLF9wcm90bzp0LmV4dGVuZCh7fSxzKSxfY2hpbGRDb25zdHJ1Y3RvcnM6W119KSxhPW5ldyBpLGEub3B0aW9ucz10LndpZGdldC5leHRlbmQoe30sYS5vcHRpb25zKSx0LmVhY2gocyxmdW5jdGlvbihlLHMpe3JldHVybiB0LmlzRnVuY3Rpb24ocyk/KHJbZV09ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGkucHJvdG90eXBlW2VdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBuKHQpe3JldHVybiBpLnByb3RvdHlwZVtlXS5hcHBseSh0aGlzLHQpfXJldHVybiBmdW5jdGlvbigpe3ZhciBlLGk9dGhpcy5fc3VwZXIsbz10aGlzLl9zdXBlckFwcGx5O3JldHVybiB0aGlzLl9zdXBlcj10LHRoaXMuX3N1cGVyQXBwbHk9bixlPXMuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX3N1cGVyPWksdGhpcy5fc3VwZXJBcHBseT1vLGV9fSgpLHZvaWQgMCk6KHJbZV09cyx2b2lkIDApfSksby5wcm90b3R5cGU9dC53aWRnZXQuZXh0ZW5kKGEse3dpZGdldEV2ZW50UHJlZml4Om4/YS53aWRnZXRFdmVudFByZWZpeHx8ZTplfSxyLHtjb25zdHJ1Y3RvcjpvLG5hbWVzcGFjZTpoLHdpZGdldE5hbWU6ZSx3aWRnZXRGdWxsTmFtZTpsfSksbj8odC5lYWNoKG4uX2NoaWxkQ29uc3RydWN0b3JzLGZ1bmN0aW9uKGUsaSl7dmFyIHM9aS5wcm90b3R5cGU7dC53aWRnZXQocy5uYW1lc3BhY2UrIi4iK3Mud2lkZ2V0TmFtZSxvLGkuX3Byb3RvKX0pLGRlbGV0ZSBuLl9jaGlsZENvbnN0cnVjdG9ycyk6aS5fY2hpbGRDb25zdHJ1Y3RvcnMucHVzaChvKSx0LndpZGdldC5icmlkZ2UoZSxvKSxvfSx0LndpZGdldC5leHRlbmQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciBpLHMsbj1sLmNhbGwoYXJndW1lbnRzLDEpLG89MCxhPW4ubGVuZ3RoO2E+bztvKyspZm9yKGkgaW4gbltvXSlzPW5bb11baV0sbltvXS5oYXNPd25Qcm9wZXJ0eShpKSYmdm9pZCAwIT09cyYmKGVbaV09dC5pc1BsYWluT2JqZWN0KHMpP3QuaXNQbGFpbk9iamVjdChlW2ldKT90LndpZGdldC5leHRlbmQoe30sZVtpXSxzKTp0LndpZGdldC5leHRlbmQoe30scyk6cyk7cmV0dXJuIGV9LHQud2lkZ2V0LmJyaWRnZT1mdW5jdGlvbihlLGkpe3ZhciBzPWkucHJvdG90eXBlLndpZGdldEZ1bGxOYW1lfHxlO3QuZm5bZV09ZnVuY3Rpb24obil7dmFyIG89InN0cmluZyI9PXR5cGVvZiBuLGE9bC5jYWxsKGFyZ3VtZW50cywxKSxyPXRoaXM7cmV0dXJuIG8/dGhpcy5sZW5ndGh8fCJpbnN0YW5jZSIhPT1uP3RoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpLG89dC5kYXRhKHRoaXMscyk7cmV0dXJuImluc3RhbmNlIj09PW4/KHI9bywhMSk6bz90LmlzRnVuY3Rpb24ob1tuXSkmJiJfIiE9PW4uY2hhckF0KDApPyhpPW9bbl0uYXBwbHkobyxhKSxpIT09byYmdm9pZCAwIT09aT8ocj1pJiZpLmpxdWVyeT9yLnB1c2hTdGFjayhpLmdldCgpKTppLCExKTp2b2lkIDApOnQuZXJyb3IoIm5vIHN1Y2ggbWV0aG9kICciK24rIicgZm9yICIrZSsiIHdpZGdldCBpbnN0YW5jZSIpOnQuZXJyb3IoImNhbm5vdCBjYWxsIG1ldGhvZHMgb24gIitlKyIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247ICIrImF0dGVtcHRlZCB0byBjYWxsIG1ldGhvZCAnIituKyInIil9KTpyPXZvaWQgMDooYS5sZW5ndGgmJihuPXQud2lkZ2V0LmV4dGVuZC5hcHBseShudWxsLFtuXS5jb25jYXQoYSkpKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10LmRhdGEodGhpcyxzKTtlPyhlLm9wdGlvbihufHx7fSksZS5faW5pdCYmZS5faW5pdCgpKTp0LmRhdGEodGhpcyxzLG5ldyBpKG4sdGhpcykpfSkpLHJ9fSx0LldpZGdldD1mdW5jdGlvbigpe30sdC5XaWRnZXQuX2NoaWxkQ29uc3RydWN0b3JzPVtdLHQuV2lkZ2V0LnByb3RvdHlwZT17d2lkZ2V0TmFtZToid2lkZ2V0Iix3aWRnZXRFdmVudFByZWZpeDoiIixkZWZhdWx0RWxlbWVudDoiPGRpdj4iLG9wdGlvbnM6e2NsYXNzZXM6e30sZGlzYWJsZWQ6ITEsY3JlYXRlOm51bGx9LF9jcmVhdGVXaWRnZXQ6ZnVuY3Rpb24oZSxpKXtpPXQoaXx8dGhpcy5kZWZhdWx0RWxlbWVudHx8dGhpcylbMF0sdGhpcy5lbGVtZW50PXQoaSksdGhpcy51dWlkPWgrKyx0aGlzLmV2ZW50TmFtZXNwYWNlPSIuIit0aGlzLndpZGdldE5hbWUrdGhpcy51dWlkLHRoaXMuYmluZGluZ3M9dCgpLHRoaXMuaG92ZXJhYmxlPXQoKSx0aGlzLmZvY3VzYWJsZT10KCksdGhpcy5jbGFzc2VzRWxlbWVudExvb2t1cD17fSxpIT09dGhpcyYmKHQuZGF0YShpLHRoaXMud2lkZ2V0RnVsbE5hbWUsdGhpcyksdGhpcy5fb24oITAsdGhpcy5lbGVtZW50LHtyZW1vdmU6ZnVuY3Rpb24odCl7dC50YXJnZXQ9PT1pJiZ0aGlzLmRlc3Ryb3koKX19KSx0aGlzLmRvY3VtZW50PXQoaS5zdHlsZT9pLm93bmVyRG9jdW1lbnQ6aS5kb2N1bWVudHx8aSksdGhpcy53aW5kb3c9dCh0aGlzLmRvY3VtZW50WzBdLmRlZmF1bHRWaWV3fHx0aGlzLmRvY3VtZW50WzBdLnBhcmVudFdpbmRvdykpLHRoaXMub3B0aW9ucz10LndpZGdldC5leHRlbmQoe30sdGhpcy5vcHRpb25zLHRoaXMuX2dldENyZWF0ZU9wdGlvbnMoKSxlKSx0aGlzLl9jcmVhdGUoKSx0aGlzLm9wdGlvbnMuZGlzYWJsZWQmJnRoaXMuX3NldE9wdGlvbkRpc2FibGVkKHRoaXMub3B0aW9ucy5kaXNhYmxlZCksdGhpcy5fdHJpZ2dlcigiY3JlYXRlIixudWxsLHRoaXMuX2dldENyZWF0ZUV2ZW50RGF0YSgpKSx0aGlzLl9pbml0KCl9LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7cmV0dXJue319LF9nZXRDcmVhdGVFdmVudERhdGE6dC5ub29wLF9jcmVhdGU6dC5ub29wLF9pbml0OnQubm9vcCxkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9kZXN0cm95KCksdC5lYWNoKHRoaXMuY2xhc3Nlc0VsZW1lbnRMb29rdXAsZnVuY3Rpb24odCxpKXtlLl9yZW1vdmVDbGFzcyhpLHQpfSksdGhpcy5lbGVtZW50Lm9mZih0aGlzLmV2ZW50TmFtZXNwYWNlKS5yZW1vdmVEYXRhKHRoaXMud2lkZ2V0RnVsbE5hbWUpLHRoaXMud2lkZ2V0KCkub2ZmKHRoaXMuZXZlbnROYW1lc3BhY2UpLnJlbW92ZUF0dHIoImFyaWEtZGlzYWJsZWQiKSx0aGlzLmJpbmRpbmdzLm9mZih0aGlzLmV2ZW50TmFtZXNwYWNlKX0sX2Rlc3Ryb3k6dC5ub29wLHdpZGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnR9LG9wdGlvbjpmdW5jdGlvbihlLGkpe3ZhciBzLG4sbyxhPWU7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHQud2lkZ2V0LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMpO2lmKCJzdHJpbmciPT10eXBlb2YgZSlpZihhPXt9LHM9ZS5zcGxpdCgiLiIpLGU9cy5zaGlmdCgpLHMubGVuZ3RoKXtmb3Iobj1hW2VdPXQud2lkZ2V0LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnNbZV0pLG89MDtzLmxlbmd0aC0xPm87bysrKW5bc1tvXV09bltzW29dXXx8e30sbj1uW3Nbb11dO2lmKGU9cy5wb3AoKSwxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09bltlXT9udWxsOm5bZV07bltlXT1pfWVsc2V7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PXRoaXMub3B0aW9uc1tlXT9udWxsOnRoaXMub3B0aW9uc1tlXTthW2VdPWl9cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoYSksdGhpc30sX3NldE9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU7Zm9yKGUgaW4gdCl0aGlzLl9zZXRPcHRpb24oZSx0W2VdKTtyZXR1cm4gdGhpc30sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe3JldHVybiJjbGFzc2VzIj09PXQmJnRoaXMuX3NldE9wdGlvbkNsYXNzZXMoZSksdGhpcy5vcHRpb25zW3RdPWUsImRpc2FibGVkIj09PXQmJnRoaXMuX3NldE9wdGlvbkRpc2FibGVkKGUpLHRoaXN9LF9zZXRPcHRpb25DbGFzc2VzOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbjtmb3IoaSBpbiBlKW49dGhpcy5jbGFzc2VzRWxlbWVudExvb2t1cFtpXSxlW2ldIT09dGhpcy5vcHRpb25zLmNsYXNzZXNbaV0mJm4mJm4ubGVuZ3RoJiYocz10KG4uZ2V0KCkpLHRoaXMuX3JlbW92ZUNsYXNzKG4saSkscy5hZGRDbGFzcyh0aGlzLl9jbGFzc2VzKHtlbGVtZW50OnMsa2V5czppLGNsYXNzZXM6ZSxhZGQ6ITB9KSkpfSxfc2V0T3B0aW9uRGlzYWJsZWQ6ZnVuY3Rpb24odCl7dGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy53aWRnZXQoKSx0aGlzLndpZGdldEZ1bGxOYW1lKyItZGlzYWJsZWQiLG51bGwsISF0KSx0JiYodGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5ob3ZlcmFibGUsbnVsbCwidWktc3RhdGUtaG92ZXIiKSx0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmZvY3VzYWJsZSxudWxsLCJ1aS1zdGF0ZS1mb2N1cyIpKX0sZW5hYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NldE9wdGlvbnMoe2Rpc2FibGVkOiExfSl9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2V0T3B0aW9ucyh7ZGlzYWJsZWQ6ITB9KX0sX2NsYXNzZXM6ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gaShpLG8pe3ZhciBhLHI7Zm9yKHI9MDtpLmxlbmd0aD5yO3IrKylhPW4uY2xhc3Nlc0VsZW1lbnRMb29rdXBbaVtyXV18fHQoKSxhPWUuYWRkP3QodC51bmlxdWUoYS5nZXQoKS5jb25jYXQoZS5lbGVtZW50LmdldCgpKSkpOnQoYS5ub3QoZS5lbGVtZW50KS5nZXQoKSksbi5jbGFzc2VzRWxlbWVudExvb2t1cFtpW3JdXT1hLHMucHVzaChpW3JdKSxvJiZlLmNsYXNzZXNbaVtyXV0mJnMucHVzaChlLmNsYXNzZXNbaVtyXV0pfXZhciBzPVtdLG49dGhpcztyZXR1cm4gZT10LmV4dGVuZCh7ZWxlbWVudDp0aGlzLmVsZW1lbnQsY2xhc3Nlczp0aGlzLm9wdGlvbnMuY2xhc3Nlc3x8e319LGUpLHRoaXMuX29uKGUuZWxlbWVudCx7cmVtb3ZlOiJfdW50cmFja0NsYXNzZXNFbGVtZW50In0pLGUua2V5cyYmaShlLmtleXMubWF0Y2goL1xTKy9nKXx8W10sITApLGUuZXh0cmEmJmkoZS5leHRyYS5tYXRjaCgvXFMrL2cpfHxbXSkscy5qb2luKCIgIil9LF91bnRyYWNrQ2xhc3Nlc0VsZW1lbnQ6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpczt0LmVhY2goaS5jbGFzc2VzRWxlbWVudExvb2t1cCxmdW5jdGlvbihzLG4pey0xIT09dC5pbkFycmF5KGUudGFyZ2V0LG4pJiYoaS5jbGFzc2VzRWxlbWVudExvb2t1cFtzXT10KG4ubm90KGUudGFyZ2V0KS5nZXQoKSkpfSl9LF9yZW1vdmVDbGFzczpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHRoaXMuX3RvZ2dsZUNsYXNzKHQsZSxpLCExKX0sX2FkZENsYXNzOmZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3ModCxlLGksITApfSxfdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24odCxlLGkscyl7cz0iYm9vbGVhbiI9PXR5cGVvZiBzP3M6aTt2YXIgbj0ic3RyaW5nIj09dHlwZW9mIHR8fG51bGw9PT10LG89e2V4dHJhOm4/ZTppLGtleXM6bj90OmUsZWxlbWVudDpuP3RoaXMuZWxlbWVudDp0LGFkZDpzfTtyZXR1cm4gby5lbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuX2NsYXNzZXMobykscyksdGhpc30sX29uOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvPXRoaXM7ImJvb2xlYW4iIT10eXBlb2YgZSYmKHM9aSxpPWUsZT0hMSkscz8oaT1uPXQoaSksdGhpcy5iaW5kaW5ncz10aGlzLmJpbmRpbmdzLmFkZChpKSk6KHM9aSxpPXRoaXMuZWxlbWVudCxuPXRoaXMud2lkZ2V0KCkpLHQuZWFjaChzLGZ1bmN0aW9uKHMsYSl7ZnVuY3Rpb24gcigpe3JldHVybiBlfHxvLm9wdGlvbnMuZGlzYWJsZWQhPT0hMCYmIXQodGhpcykuaGFzQ2xhc3MoInVpLXN0YXRlLWRpc2FibGVkIik/KCJzdHJpbmciPT10eXBlb2YgYT9vW2FdOmEpLmFwcGx5KG8sYXJndW1lbnRzKTp2b2lkIDB9InN0cmluZyIhPXR5cGVvZiBhJiYoci5ndWlkPWEuZ3VpZD1hLmd1aWR8fHIuZ3VpZHx8dC5ndWlkKyspO3ZhciBoPXMubWF0Y2goL14oW1x3Oi1dKilccyooLiopJC8pLGw9aFsxXStvLmV2ZW50TmFtZXNwYWNlLGM9aFsyXTtjP24ub24obCxjLHIpOmkub24obCxyKX0pfSxfb2ZmOmZ1bmN0aW9uKGUsaSl7aT0oaXx8IiIpLnNwbGl0KCIgIikuam9pbih0aGlzLmV2ZW50TmFtZXNwYWNlKyIgIikrdGhpcy5ldmVudE5hbWVzcGFjZSxlLm9mZihpKS5vZmYoaSksdGhpcy5iaW5kaW5ncz10KHRoaXMuYmluZGluZ3Mubm90KGUpLmdldCgpKSx0aGlzLmZvY3VzYWJsZT10KHRoaXMuZm9jdXNhYmxlLm5vdChlKS5nZXQoKSksdGhpcy5ob3ZlcmFibGU9dCh0aGlzLmhvdmVyYWJsZS5ub3QoZSkuZ2V0KCkpfSxfZGVsYXk6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBpKCl7cmV0dXJuKCJzdHJpbmciPT10eXBlb2YgdD9zW3RdOnQpLmFwcGx5KHMsYXJndW1lbnRzKX12YXIgcz10aGlzO3JldHVybiBzZXRUaW1lb3V0KGksZXx8MCl9LF9ob3ZlcmFibGU6ZnVuY3Rpb24oZSl7dGhpcy5ob3ZlcmFibGU9dGhpcy5ob3ZlcmFibGUuYWRkKGUpLHRoaXMuX29uKGUse21vdXNlZW50ZXI6ZnVuY3Rpb24oZSl7dGhpcy5fYWRkQ2xhc3ModChlLmN1cnJlbnRUYXJnZXQpLG51bGwsInVpLXN0YXRlLWhvdmVyIil9LG1vdXNlbGVhdmU6ZnVuY3Rpb24oZSl7dGhpcy5fcmVtb3ZlQ2xhc3ModChlLmN1cnJlbnRUYXJnZXQpLG51bGwsInVpLXN0YXRlLWhvdmVyIil9fSl9LF9mb2N1c2FibGU6ZnVuY3Rpb24oZSl7dGhpcy5mb2N1c2FibGU9dGhpcy5mb2N1c2FibGUuYWRkKGUpLHRoaXMuX29uKGUse2ZvY3VzaW46ZnVuY3Rpb24oZSl7dGhpcy5fYWRkQ2xhc3ModChlLmN1cnJlbnRUYXJnZXQpLG51bGwsInVpLXN0YXRlLWZvY3VzIil9LGZvY3Vzb3V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlbW92ZUNsYXNzKHQoZS5jdXJyZW50VGFyZ2V0KSxudWxsLCJ1aS1zdGF0ZS1mb2N1cyIpfX0pfSxfdHJpZ2dlcjpmdW5jdGlvbihlLGkscyl7dmFyIG4sbyxhPXRoaXMub3B0aW9uc1tlXTtpZihzPXN8fHt9LGk9dC5FdmVudChpKSxpLnR5cGU9KGU9PT10aGlzLndpZGdldEV2ZW50UHJlZml4P2U6dGhpcy53aWRnZXRFdmVudFByZWZpeCtlKS50b0xvd2VyQ2FzZSgpLGkudGFyZ2V0PXRoaXMuZWxlbWVudFswXSxvPWkub3JpZ2luYWxFdmVudClmb3IobiBpbiBvKW4gaW4gaXx8KGlbbl09b1tuXSk7cmV0dXJuIHRoaXMuZWxlbWVudC50cmlnZ2VyKGkscyksISh0LmlzRnVuY3Rpb24oYSkmJmEuYXBwbHkodGhpcy5lbGVtZW50WzBdLFtpXS5jb25jYXQocykpPT09ITF8fGkuaXNEZWZhdWx0UHJldmVudGVkKCkpfX0sdC5lYWNoKHtzaG93OiJmYWRlSW4iLGhpZGU6ImZhZGVPdXQifSxmdW5jdGlvbihlLGkpe3QuV2lkZ2V0LnByb3RvdHlwZVsiXyIrZV09ZnVuY3Rpb24ocyxuLG8peyJzdHJpbmciPT10eXBlb2YgbiYmKG49e2VmZmVjdDpufSk7dmFyIGEscj1uP249PT0hMHx8Im51bWJlciI9PXR5cGVvZiBuP2k6bi5lZmZlY3R8fGk6ZTtuPW58fHt9LCJudW1iZXIiPT10eXBlb2YgbiYmKG49e2R1cmF0aW9uOm59KSxhPSF0LmlzRW1wdHlPYmplY3Qobiksbi5jb21wbGV0ZT1vLG4uZGVsYXkmJnMuZGVsYXkobi5kZWxheSksYSYmdC5lZmZlY3RzJiZ0LmVmZmVjdHMuZWZmZWN0W3JdP3NbZV0obik6ciE9PWUmJnNbcl0/c1tyXShuLmR1cmF0aW9uLG4uZWFzaW5nLG8pOnMucXVldWUoZnVuY3Rpb24oaSl7dCh0aGlzKVtlXSgpLG8mJm8uY2FsbChzWzBdKSxpKCl9KX19KSx0LndpZGdldCxmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxlLGkpe3JldHVybltwYXJzZUZsb2F0KHRbMF0pKih1LnRlc3QodFswXSk/ZS8xMDA6MSkscGFyc2VGbG9hdCh0WzFdKSoodS50ZXN0KHRbMV0pP2kvMTAwOjEpXX1mdW5jdGlvbiBpKGUsaSl7cmV0dXJuIHBhcnNlSW50KHQuY3NzKGUsaSksMTApfHwwfWZ1bmN0aW9uIHMoZSl7dmFyIGk9ZVswXTtyZXR1cm4gOT09PWkubm9kZVR5cGU/e3dpZHRoOmUud2lkdGgoKSxoZWlnaHQ6ZS5oZWlnaHQoKSxvZmZzZXQ6e3RvcDowLGxlZnQ6MH19OnQuaXNXaW5kb3coaSk/e3dpZHRoOmUud2lkdGgoKSxoZWlnaHQ6ZS5oZWlnaHQoKSxvZmZzZXQ6e3RvcDplLnNjcm9sbFRvcCgpLGxlZnQ6ZS5zY3JvbGxMZWZ0KCl9fTppLnByZXZlbnREZWZhdWx0P3t3aWR0aDowLGhlaWdodDowLG9mZnNldDp7dG9wOmkucGFnZVksbGVmdDppLnBhZ2VYfX06e3dpZHRoOmUub3V0ZXJXaWR0aCgpLGhlaWdodDplLm91dGVySGVpZ2h0KCksb2Zmc2V0OmUub2Zmc2V0KCl9fXZhciBuLG89TWF0aC5tYXgsYT1NYXRoLmFicyxyPS9sZWZ0fGNlbnRlcnxyaWdodC8saD0vdG9wfGNlbnRlcnxib3R0b20vLGw9L1tcK1wtXVxkKyhcLltcZF0rKT8lPy8sYz0vXlx3Ky8sdT0vJSQvLGQ9dC5mbi5wb3NpdGlvbjt0LnBvc2l0aW9uPXtzY3JvbGxiYXJXaWR0aDpmdW5jdGlvbigpe2lmKHZvaWQgMCE9PW4pcmV0dXJuIG47dmFyIGUsaSxzPXQoIjxkaXYgc3R5bGU9J2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NTBweDtoZWlnaHQ6NTBweDtvdmVyZmxvdzpoaWRkZW47Jz48ZGl2IHN0eWxlPSdoZWlnaHQ6MTAwcHg7d2lkdGg6YXV0bzsnPjwvZGl2PjwvZGl2PiIpLG89cy5jaGlsZHJlbigpWzBdO3JldHVybiB0KCJib2R5IikuYXBwZW5kKHMpLGU9by5vZmZzZXRXaWR0aCxzLmNzcygib3ZlcmZsb3ciLCJzY3JvbGwiKSxpPW8ub2Zmc2V0V2lkdGgsZT09PWkmJihpPXNbMF0uY2xpZW50V2lkdGgpLHMucmVtb3ZlKCksbj1lLWl9LGdldFNjcm9sbEluZm86ZnVuY3Rpb24oZSl7dmFyIGk9ZS5pc1dpbmRvd3x8ZS5pc0RvY3VtZW50PyIiOmUuZWxlbWVudC5jc3MoIm92ZXJmbG93LXgiKSxzPWUuaXNXaW5kb3d8fGUuaXNEb2N1bWVudD8iIjplLmVsZW1lbnQuY3NzKCJvdmVyZmxvdy15Iiksbj0ic2Nyb2xsIj09PWl8fCJhdXRvIj09PWkmJmUud2lkdGg8ZS5lbGVtZW50WzBdLnNjcm9sbFdpZHRoLG89InNjcm9sbCI9PT1zfHwiYXV0byI9PT1zJiZlLmhlaWdodDxlLmVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0O3JldHVybnt3aWR0aDpvP3QucG9zaXRpb24uc2Nyb2xsYmFyV2lkdGgoKTowLGhlaWdodDpuP3QucG9zaXRpb24uc2Nyb2xsYmFyV2lkdGgoKTowfX0sZ2V0V2l0aGluSW5mbzpmdW5jdGlvbihlKXt2YXIgaT10KGV8fHdpbmRvdykscz10LmlzV2luZG93KGlbMF0pLG49ISFpWzBdJiY5PT09aVswXS5ub2RlVHlwZSxvPSFzJiYhbjtyZXR1cm57ZWxlbWVudDppLGlzV2luZG93OnMsaXNEb2N1bWVudDpuLG9mZnNldDpvP3QoZSkub2Zmc2V0KCk6e2xlZnQ6MCx0b3A6MH0sc2Nyb2xsTGVmdDppLnNjcm9sbExlZnQoKSxzY3JvbGxUb3A6aS5zY3JvbGxUb3AoKSx3aWR0aDppLm91dGVyV2lkdGgoKSxoZWlnaHQ6aS5vdXRlckhlaWdodCgpfX19LHQuZm4ucG9zaXRpb249ZnVuY3Rpb24obil7aWYoIW58fCFuLm9mKXJldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtuPXQuZXh0ZW5kKHt9LG4pO3ZhciB1LHAsZixnLG0sXyx2PXQobi5vZiksYj10LnBvc2l0aW9uLmdldFdpdGhpbkluZm8obi53aXRoaW4pLHk9dC5wb3NpdGlvbi5nZXRTY3JvbGxJbmZvKGIpLHc9KG4uY29sbGlzaW9ufHwiZmxpcCIpLnNwbGl0KCIgIiksaz17fTtyZXR1cm4gXz1zKHYpLHZbMF0ucHJldmVudERlZmF1bHQmJihuLmF0PSJsZWZ0IHRvcCIpLHA9Xy53aWR0aCxmPV8uaGVpZ2h0LGc9Xy5vZmZzZXQsbT10LmV4dGVuZCh7fSxnKSx0LmVhY2goWyJteSIsImF0Il0sZnVuY3Rpb24oKXt2YXIgdCxlLGk9KG5bdGhpc118fCIiKS5zcGxpdCgiICIpOzE9PT1pLmxlbmd0aCYmKGk9ci50ZXN0KGlbMF0pP2kuY29uY2F0KFsiY2VudGVyIl0pOmgudGVzdChpWzBdKT9bImNlbnRlciJdLmNvbmNhdChpKTpbImNlbnRlciIsImNlbnRlciJdKSxpWzBdPXIudGVzdChpWzBdKT9pWzBdOiJjZW50ZXIiLGlbMV09aC50ZXN0KGlbMV0pP2lbMV06ImNlbnRlciIsdD1sLmV4ZWMoaVswXSksZT1sLmV4ZWMoaVsxXSksa1t0aGlzXT1bdD90WzBdOjAsZT9lWzBdOjBdLG5bdGhpc109W2MuZXhlYyhpWzBdKVswXSxjLmV4ZWMoaVsxXSlbMF1dfSksMT09PXcubGVuZ3RoJiYod1sxXT13WzBdKSwicmlnaHQiPT09bi5hdFswXT9tLmxlZnQrPXA6ImNlbnRlciI9PT1uLmF0WzBdJiYobS5sZWZ0Kz1wLzIpLCJib3R0b20iPT09bi5hdFsxXT9tLnRvcCs9ZjoiY2VudGVyIj09PW4uYXRbMV0mJihtLnRvcCs9Zi8yKSx1PWUoay5hdCxwLGYpLG0ubGVmdCs9dVswXSxtLnRvcCs9dVsxXSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgcyxyLGg9dCh0aGlzKSxsPWgub3V0ZXJXaWR0aCgpLGM9aC5vdXRlckhlaWdodCgpLGQ9aSh0aGlzLCJtYXJnaW5MZWZ0IiksXz1pKHRoaXMsIm1hcmdpblRvcCIpLHg9bCtkK2kodGhpcywibWFyZ2luUmlnaHQiKSt5LndpZHRoLEM9YytfK2kodGhpcywibWFyZ2luQm90dG9tIikreS5oZWlnaHQsRD10LmV4dGVuZCh7fSxtKSxJPWUoay5teSxoLm91dGVyV2lkdGgoKSxoLm91dGVySGVpZ2h0KCkpOyJyaWdodCI9PT1uLm15WzBdP0QubGVmdC09bDoiY2VudGVyIj09PW4ubXlbMF0mJihELmxlZnQtPWwvMiksImJvdHRvbSI9PT1uLm15WzFdP0QudG9wLT1jOiJjZW50ZXIiPT09bi5teVsxXSYmKEQudG9wLT1jLzIpLEQubGVmdCs9SVswXSxELnRvcCs9SVsxXSxzPXttYXJnaW5MZWZ0OmQsbWFyZ2luVG9wOl99LHQuZWFjaChbImxlZnQiLCJ0b3AiXSxmdW5jdGlvbihlLGkpe3QudWkucG9zaXRpb25bd1tlXV0mJnQudWkucG9zaXRpb25bd1tlXV1baV0oRCx7dGFyZ2V0V2lkdGg6cCx0YXJnZXRIZWlnaHQ6ZixlbGVtV2lkdGg6bCxlbGVtSGVpZ2h0OmMsY29sbGlzaW9uUG9zaXRpb246cyxjb2xsaXNpb25XaWR0aDp4LGNvbGxpc2lvbkhlaWdodDpDLG9mZnNldDpbdVswXStJWzBdLHVbMV0rSVsxXV0sbXk6bi5teSxhdDpuLmF0LHdpdGhpbjpiLGVsZW06aH0pfSksbi51c2luZyYmKHI9ZnVuY3Rpb24odCl7dmFyIGU9Zy5sZWZ0LUQubGVmdCxpPWUrcC1sLHM9Zy50b3AtRC50b3Ascj1zK2YtYyx1PXt0YXJnZXQ6e2VsZW1lbnQ6dixsZWZ0OmcubGVmdCx0b3A6Zy50b3Asd2lkdGg6cCxoZWlnaHQ6Zn0sZWxlbWVudDp7ZWxlbWVudDpoLGxlZnQ6RC5sZWZ0LHRvcDpELnRvcCx3aWR0aDpsLGhlaWdodDpjfSxob3Jpem9udGFsOjA+aT8ibGVmdCI6ZT4wPyJyaWdodCI6ImNlbnRlciIsdmVydGljYWw6MD5yPyJ0b3AiOnM+MD8iYm90dG9tIjoibWlkZGxlIn07bD5wJiZwPmEoZStpKSYmKHUuaG9yaXpvbnRhbD0iY2VudGVyIiksYz5mJiZmPmEocytyKSYmKHUudmVydGljYWw9Im1pZGRsZSIpLHUuaW1wb3J0YW50PW8oYShlKSxhKGkpKT5vKGEocyksYShyKSk/Imhvcml6b250YWwiOiJ2ZXJ0aWNhbCIsbi51c2luZy5jYWxsKHRoaXMsdCx1KX0pLGgub2Zmc2V0KHQuZXh0ZW5kKEQse3VzaW5nOnJ9KSl9KX0sdC51aS5wb3NpdGlvbj17Zml0OntsZWZ0OmZ1bmN0aW9uKHQsZSl7dmFyIGkscz1lLndpdGhpbixuPXMuaXNXaW5kb3c/cy5zY3JvbGxMZWZ0OnMub2Zmc2V0LmxlZnQsYT1zLndpZHRoLHI9dC5sZWZ0LWUuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCxoPW4tcixsPXIrZS5jb2xsaXNpb25XaWR0aC1hLW47ZS5jb2xsaXNpb25XaWR0aD5hP2g+MCYmMD49bD8oaT10LmxlZnQraCtlLmNvbGxpc2lvbldpZHRoLWEtbix0LmxlZnQrPWgtaSk6dC5sZWZ0PWw+MCYmMD49aD9uOmg+bD9uK2EtZS5jb2xsaXNpb25XaWR0aDpuOmg+MD90LmxlZnQrPWg6bD4wP3QubGVmdC09bDp0LmxlZnQ9byh0LmxlZnQtcix0LmxlZnQpfSx0b3A6ZnVuY3Rpb24odCxlKXt2YXIgaSxzPWUud2l0aGluLG49cy5pc1dpbmRvdz9zLnNjcm9sbFRvcDpzLm9mZnNldC50b3AsYT1lLndpdGhpbi5oZWlnaHQscj10LnRvcC1lLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCxoPW4tcixsPXIrZS5jb2xsaXNpb25IZWlnaHQtYS1uO2UuY29sbGlzaW9uSGVpZ2h0PmE/aD4wJiYwPj1sPyhpPXQudG9wK2grZS5jb2xsaXNpb25IZWlnaHQtYS1uLHQudG9wKz1oLWkpOnQudG9wPWw+MCYmMD49aD9uOmg+bD9uK2EtZS5jb2xsaXNpb25IZWlnaHQ6bjpoPjA/dC50b3ArPWg6bD4wP3QudG9wLT1sOnQudG9wPW8odC50b3Atcix0LnRvcCl9fSxmbGlwOntsZWZ0OmZ1bmN0aW9uKHQsZSl7dmFyIGkscyxuPWUud2l0aGluLG89bi5vZmZzZXQubGVmdCtuLnNjcm9sbExlZnQscj1uLndpZHRoLGg9bi5pc1dpbmRvdz9uLnNjcm9sbExlZnQ6bi5vZmZzZXQubGVmdCxsPXQubGVmdC1lLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpbkxlZnQsYz1sLWgsdT1sK2UuY29sbGlzaW9uV2lkdGgtci1oLGQ9ImxlZnQiPT09ZS5teVswXT8tZS5lbGVtV2lkdGg6InJpZ2h0Ij09PWUubXlbMF0/ZS5lbGVtV2lkdGg6MCxwPSJsZWZ0Ij09PWUuYXRbMF0/ZS50YXJnZXRXaWR0aDoicmlnaHQiPT09ZS5hdFswXT8tZS50YXJnZXRXaWR0aDowLGY9LTIqZS5vZmZzZXRbMF07MD5jPyhpPXQubGVmdCtkK3ArZitlLmNvbGxpc2lvbldpZHRoLXItbywoMD5pfHxhKGMpPmkpJiYodC5sZWZ0Kz1kK3ArZikpOnU+MCYmKHM9dC5sZWZ0LWUuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCtkK3ArZi1oLChzPjB8fHU+YShzKSkmJih0LmxlZnQrPWQrcCtmKSl9LHRvcDpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbj1lLndpdGhpbixvPW4ub2Zmc2V0LnRvcCtuLnNjcm9sbFRvcCxyPW4uaGVpZ2h0LGg9bi5pc1dpbmRvdz9uLnNjcm9sbFRvcDpuLm9mZnNldC50b3AsbD10LnRvcC1lLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCxjPWwtaCx1PWwrZS5jb2xsaXNpb25IZWlnaHQtci1oLGQ9InRvcCI9PT1lLm15WzFdLHA9ZD8tZS5lbGVtSGVpZ2h0OiJib3R0b20iPT09ZS5teVsxXT9lLmVsZW1IZWlnaHQ6MCxmPSJ0b3AiPT09ZS5hdFsxXT9lLnRhcmdldEhlaWdodDoiYm90dG9tIj09PWUuYXRbMV0/LWUudGFyZ2V0SGVpZ2h0OjAsZz0tMiplLm9mZnNldFsxXTswPmM/KHM9dC50b3ArcCtmK2crZS5jb2xsaXNpb25IZWlnaHQtci1vLCgwPnN8fGEoYyk+cykmJih0LnRvcCs9cCtmK2cpKTp1PjAmJihpPXQudG9wLWUuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luVG9wK3ArZitnLWgsKGk+MHx8dT5hKGkpKSYmKHQudG9wKz1wK2YrZykpfX0sZmxpcGZpdDp7bGVmdDpmdW5jdGlvbigpe3QudWkucG9zaXRpb24uZmxpcC5sZWZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0LnVpLnBvc2l0aW9uLmZpdC5sZWZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sdG9wOmZ1bmN0aW9uKCl7dC51aS5wb3NpdGlvbi5mbGlwLnRvcC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdC51aS5wb3NpdGlvbi5maXQudG9wLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fX0oKSx0LnVpLnBvc2l0aW9uLHQuZXh0ZW5kKHQuZXhwclsiOiJdLHtkYXRhOnQuZXhwci5jcmVhdGVQc2V1ZG8/dC5leHByLmNyZWF0ZVBzZXVkbyhmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oaSl7cmV0dXJuISF0LmRhdGEoaSxlKX19KTpmdW5jdGlvbihlLGkscyl7cmV0dXJuISF0LmRhdGEoZSxzWzNdKX19KSx0LmZuLmV4dGVuZCh7ZGlzYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3ZhciB0PSJvbnNlbGVjdHN0YXJ0ImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpPyJzZWxlY3RzdGFydCI6Im1vdXNlZG93biI7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub24odCsiLnVpLWRpc2FibGVTZWxlY3Rpb24iLGZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKX0pfX0oKSxlbmFibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vZmYoIi51aS1kaXNhYmxlU2VsZWN0aW9uIil9fSk7dmFyIGM9InVpLWVmZmVjdHMtIix1PSJ1aS1lZmZlY3RzLXN0eWxlIixkPSJ1aS1lZmZlY3RzLWFuaW1hdGVkIixwPXQ7dC5lZmZlY3RzPXtlZmZlY3Q6e319LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gaSh0LGUsaSl7dmFyIHM9dVtlLnR5cGVdfHx7fTtyZXR1cm4gbnVsbD09dD9pfHwhZS5kZWY/bnVsbDplLmRlZjoodD1zLmZsb29yP35+dDpwYXJzZUZsb2F0KHQpLGlzTmFOKHQpP2UuZGVmOnMubW9kPyh0K3MubW9kKSVzLm1vZDowPnQ/MDp0PnMubWF4P3MubWF4OnQpfWZ1bmN0aW9uIHMoaSl7dmFyIHM9bCgpLG49cy5fcmdiYT1bXTtyZXR1cm4gaT1pLnRvTG93ZXJDYXNlKCksZihoLGZ1bmN0aW9uKHQsbyl7dmFyIGEscj1vLnJlLmV4ZWMoaSksaD1yJiZvLnBhcnNlKHIpLGw9by5zcGFjZXx8InJnYmEiO3JldHVybiBoPyhhPXNbbF0oaCksc1tjW2xdLmNhY2hlXT1hW2NbbF0uY2FjaGVdLG49cy5fcmdiYT1hLl9yZ2JhLCExKTplfSksbi5sZW5ndGg/KCIwLDAsMCwwIj09PW4uam9pbigpJiZ0LmV4dGVuZChuLG8udHJhbnNwYXJlbnQpLHMpOm9baV19ZnVuY3Rpb24gbih0LGUsaSl7cmV0dXJuIGk9KGkrMSklMSwxPjYqaT90KzYqKGUtdCkqaToxPjIqaT9lOjI+MyppP3QrNiooZS10KSooMi8zLWkpOnR9dmFyIG8sYT0iYmFja2dyb3VuZENvbG9yIGJvcmRlckJvdHRvbUNvbG9yIGJvcmRlckxlZnRDb2xvciBib3JkZXJSaWdodENvbG9yIGJvcmRlclRvcENvbG9yIGNvbG9yIGNvbHVtblJ1bGVDb2xvciBvdXRsaW5lQ29sb3IgdGV4dERlY29yYXRpb25Db2xvciB0ZXh0RW1waGFzaXNDb2xvciIscj0vXihbXC0rXSk9XHMqKFxkK1wuP1xkKikvLGg9W3tyZTovcmdiYT9cKFxzKihcZHsxLDN9KVxzKixccyooXGR7MSwzfSlccyosXHMqKFxkezEsM30pXHMqKD86LFxzKihcZD8oPzpcLlxkKyk/KVxzKik/XCkvLHBhcnNlOmZ1bmN0aW9uKHQpe3JldHVyblt0WzFdLHRbMl0sdFszXSx0WzRdXX19LHtyZTovcmdiYT9cKFxzKihcZCsoPzpcLlxkKyk/KVwlXHMqLFxzKihcZCsoPzpcLlxkKyk/KVwlXHMqLFxzKihcZCsoPzpcLlxkKyk/KVwlXHMqKD86LFxzKihcZD8oPzpcLlxkKyk/KVxzKik/XCkvLHBhcnNlOmZ1bmN0aW9uKHQpe3JldHVyblsyLjU1KnRbMV0sMi41NSp0WzJdLDIuNTUqdFszXSx0WzRdXX19LHtyZTovIyhbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pKFthLWYwLTldezJ9KS8scGFyc2U6ZnVuY3Rpb24odCl7cmV0dXJuW3BhcnNlSW50KHRbMV0sMTYpLHBhcnNlSW50KHRbMl0sMTYpLHBhcnNlSW50KHRbM10sMTYpXX19LHtyZTovIyhbYS1mMC05XSkoW2EtZjAtOV0pKFthLWYwLTldKS8scGFyc2U6ZnVuY3Rpb24odCl7cmV0dXJuW3BhcnNlSW50KHRbMV0rdFsxXSwxNikscGFyc2VJbnQodFsyXSt0WzJdLDE2KSxwYXJzZUludCh0WzNdK3RbM10sMTYpXX19LHtyZTovaHNsYT9cKFxzKihcZCsoPzpcLlxkKyk/KVxzKixccyooXGQrKD86XC5cZCspPylcJVxzKixccyooXGQrKD86XC5cZCspPylcJVxzKig/OixccyooXGQ/KD86XC5cZCspPylccyopP1wpLyxzcGFjZToiaHNsYSIscGFyc2U6ZnVuY3Rpb24odCl7cmV0dXJuW3RbMV0sdFsyXS8xMDAsdFszXS8xMDAsdFs0XV19fV0sbD10LkNvbG9yPWZ1bmN0aW9uKGUsaSxzLG4pe3JldHVybiBuZXcgdC5Db2xvci5mbi5wYXJzZShlLGkscyxuKX0sYz17cmdiYTp7cHJvcHM6e3JlZDp7aWR4OjAsdHlwZToiYnl0ZSJ9LGdyZWVuOntpZHg6MSx0eXBlOiJieXRlIn0sYmx1ZTp7aWR4OjIsdHlwZToiYnl0ZSJ9fX0saHNsYTp7cHJvcHM6e2h1ZTp7aWR4OjAsdHlwZToiZGVncmVlcyJ9LHNhdHVyYXRpb246e2lkeDoxLHR5cGU6InBlcmNlbnQifSxsaWdodG5lc3M6e2lkeDoyLHR5cGU6InBlcmNlbnQifX19fSx1PXsiYnl0ZSI6e2Zsb29yOiEwLG1heDoyNTV9LHBlcmNlbnQ6e21heDoxfSxkZWdyZWVzOnttb2Q6MzYwLGZsb29yOiEwfX0sZD1sLnN1cHBvcnQ9e30scD10KCI8cD4iKVswXSxmPXQuZWFjaDtwLnN0eWxlLmNzc1RleHQ9ImJhY2tncm91bmQtY29sb3I6cmdiYSgxLDEsMSwuNSkiLGQucmdiYT1wLnN0eWxlLmJhY2tncm91bmRDb2xvci5pbmRleE9mKCJyZ2JhIik+LTEsZihjLGZ1bmN0aW9uKHQsZSl7ZS5jYWNoZT0iXyIrdCxlLnByb3BzLmFscGhhPXtpZHg6Myx0eXBlOiJwZXJjZW50IixkZWY6MX19KSxsLmZuPXQuZXh0ZW5kKGwucHJvdG90eXBlLHtwYXJzZTpmdW5jdGlvbihuLGEscixoKXtpZihuPT09ZSlyZXR1cm4gdGhpcy5fcmdiYT1bbnVsbCxudWxsLG51bGwsbnVsbF0sdGhpczsobi5qcXVlcnl8fG4ubm9kZVR5cGUpJiYobj10KG4pLmNzcyhhKSxhPWUpO3ZhciB1PXRoaXMsZD10LnR5cGUobikscD10aGlzLl9yZ2JhPVtdO3JldHVybiBhIT09ZSYmKG49W24sYSxyLGhdLGQ9ImFycmF5IiksInN0cmluZyI9PT1kP3RoaXMucGFyc2UocyhuKXx8by5fZGVmYXVsdCk6ImFycmF5Ij09PWQ/KGYoYy5yZ2JhLnByb3BzLGZ1bmN0aW9uKHQsZSl7cFtlLmlkeF09aShuW2UuaWR4XSxlKX0pLHRoaXMpOiJvYmplY3QiPT09ZD8obiBpbnN0YW5jZW9mIGw/ZihjLGZ1bmN0aW9uKHQsZSl7bltlLmNhY2hlXSYmKHVbZS5jYWNoZV09bltlLmNhY2hlXS5zbGljZSgpKX0pOmYoYyxmdW5jdGlvbihlLHMpe3ZhciBvPXMuY2FjaGU7ZihzLnByb3BzLGZ1bmN0aW9uKHQsZSl7aWYoIXVbb10mJnMudG8pe2lmKCJhbHBoYSI9PT10fHxudWxsPT1uW3RdKXJldHVybjt1W29dPXMudG8odS5fcmdiYSl9dVtvXVtlLmlkeF09aShuW3RdLGUsITApfSksdVtvXSYmMD50LmluQXJyYXkobnVsbCx1W29dLnNsaWNlKDAsMykpJiYodVtvXVszXT0xLHMuZnJvbSYmKHUuX3JnYmE9cy5mcm9tKHVbb10pKSl9KSx0aGlzKTplfSxpczpmdW5jdGlvbih0KXt2YXIgaT1sKHQpLHM9ITAsbj10aGlzO3JldHVybiBmKGMsZnVuY3Rpb24odCxvKXt2YXIgYSxyPWlbby5jYWNoZV07cmV0dXJuIHImJihhPW5bby5jYWNoZV18fG8udG8mJm8udG8obi5fcmdiYSl8fFtdLGYoby5wcm9wcyxmdW5jdGlvbih0LGkpe3JldHVybiBudWxsIT1yW2kuaWR4XT9zPXJbaS5pZHhdPT09YVtpLmlkeF06ZX0pKSxzfSksc30sX3NwYWNlOmZ1bmN0aW9uKCl7dmFyIHQ9W10sZT10aGlzO3JldHVybiBmKGMsZnVuY3Rpb24oaSxzKXtlW3MuY2FjaGVdJiZ0LnB1c2goaSl9KSx0LnBvcCgpfSx0cmFuc2l0aW9uOmZ1bmN0aW9uKHQsZSl7dmFyIHM9bCh0KSxuPXMuX3NwYWNlKCksbz1jW25dLGE9MD09PXRoaXMuYWxwaGEoKT9sKCJ0cmFuc3BhcmVudCIpOnRoaXMscj1hW28uY2FjaGVdfHxvLnRvKGEuX3JnYmEpLGg9ci5zbGljZSgpO3JldHVybiBzPXNbby5jYWNoZV0sZihvLnByb3BzLGZ1bmN0aW9uKHQsbil7dmFyIG89bi5pZHgsYT1yW29dLGw9c1tvXSxjPXVbbi50eXBlXXx8e307bnVsbCE9PWwmJihudWxsPT09YT9oW29dPWw6KGMubW9kJiYobC1hPmMubW9kLzI/YSs9Yy5tb2Q6YS1sPmMubW9kLzImJihhLT1jLm1vZCkpLGhbb109aSgobC1hKSplK2EsbikpKX0pLHRoaXNbbl0oaCl9LGJsZW5kOmZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLl9yZ2JhWzNdKXJldHVybiB0aGlzO3ZhciBpPXRoaXMuX3JnYmEuc2xpY2UoKSxzPWkucG9wKCksbj1sKGUpLl9yZ2JhO3JldHVybiBsKHQubWFwKGksZnVuY3Rpb24odCxlKXtyZXR1cm4oMS1zKSpuW2VdK3MqdH0pKX0sdG9SZ2JhU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIGU9InJnYmEoIixpPXQubWFwKHRoaXMuX3JnYmEsZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09dD9lPjI/MTowOnR9KTtyZXR1cm4gMT09PWlbM10mJihpLnBvcCgpLGU9InJnYigiKSxlK2kuam9pbigpKyIpIn0sdG9Ic2xhU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIGU9ImhzbGEoIixpPXQubWFwKHRoaXMuaHNsYSgpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGw9PXQmJih0PWU+Mj8xOjApLGUmJjM+ZSYmKHQ9TWF0aC5yb3VuZCgxMDAqdCkrIiUiKSx0fSk7cmV0dXJuIDE9PT1pWzNdJiYoaS5wb3AoKSxlPSJoc2woIiksZStpLmpvaW4oKSsiKSJ9LHRvSGV4U3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX3JnYmEuc2xpY2UoKSxzPWkucG9wKCk7cmV0dXJuIGUmJmkucHVzaCh+figyNTUqcykpLCIjIit0Lm1hcChpLGZ1bmN0aW9uKHQpe3JldHVybiB0PSh0fHwwKS50b1N0cmluZygxNiksMT09PXQubGVuZ3RoPyIwIit0OnR9KS5qb2luKCIiKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX3JnYmFbM10/InRyYW5zcGFyZW50Ijp0aGlzLnRvUmdiYVN0cmluZygpfX0pLGwuZm4ucGFyc2UucHJvdG90eXBlPWwuZm4sYy5oc2xhLnRvPWZ1bmN0aW9uKHQpe2lmKG51bGw9PXRbMF18fG51bGw9PXRbMV18fG51bGw9PXRbMl0pcmV0dXJuW251bGwsbnVsbCxudWxsLHRbM11dO3ZhciBlLGkscz10WzBdLzI1NSxuPXRbMV0vMjU1LG89dFsyXS8yNTUsYT10WzNdLHI9TWF0aC5tYXgocyxuLG8pLGg9TWF0aC5taW4ocyxuLG8pLGw9ci1oLGM9citoLHU9LjUqYztyZXR1cm4gZT1oPT09cj8wOnM9PT1yPzYwKihuLW8pL2wrMzYwOm49PT1yPzYwKihvLXMpL2wrMTIwOjYwKihzLW4pL2wrMjQwLGk9MD09PWw/MDouNT49dT9sL2M6bC8oMi1jKSxbTWF0aC5yb3VuZChlKSUzNjAsaSx1LG51bGw9PWE/MTphXX0sYy5oc2xhLmZyb209ZnVuY3Rpb24odCl7aWYobnVsbD09dFswXXx8bnVsbD09dFsxXXx8bnVsbD09dFsyXSlyZXR1cm5bbnVsbCxudWxsLG51bGwsdFszXV07dmFyIGU9dFswXS8zNjAsaT10WzFdLHM9dFsyXSxvPXRbM10sYT0uNT49cz9zKigxK2kpOnMraS1zKmkscj0yKnMtYTtyZXR1cm5bTWF0aC5yb3VuZCgyNTUqbihyLGEsZSsxLzMpKSxNYXRoLnJvdW5kKDI1NSpuKHIsYSxlKSksTWF0aC5yb3VuZCgyNTUqbihyLGEsZS0xLzMpKSxvXX0sZihjLGZ1bmN0aW9uKHMsbil7dmFyIG89bi5wcm9wcyxhPW4uY2FjaGUsaD1uLnRvLGM9bi5mcm9tO2wuZm5bc109ZnVuY3Rpb24ocyl7aWYoaCYmIXRoaXNbYV0mJih0aGlzW2FdPWgodGhpcy5fcmdiYSkpLHM9PT1lKXJldHVybiB0aGlzW2FdLnNsaWNlKCk7dmFyIG4scj10LnR5cGUocyksdT0iYXJyYXkiPT09cnx8Im9iamVjdCI9PT1yP3M6YXJndW1lbnRzLGQ9dGhpc1thXS5zbGljZSgpO3JldHVybiBmKG8sZnVuY3Rpb24odCxlKXt2YXIgcz11WyJvYmplY3QiPT09cj90OmUuaWR4XTtudWxsPT1zJiYocz1kW2UuaWR4XSksZFtlLmlkeF09aShzLGUpfSksYz8obj1sKGMoZCkpLG5bYV09ZCxuKTpsKGQpfSxmKG8sZnVuY3Rpb24oZSxpKXtsLmZuW2VdfHwobC5mbltlXT1mdW5jdGlvbihuKXt2YXIgbyxhPXQudHlwZShuKSxoPSJhbHBoYSI9PT1lP3RoaXMuX2hzbGE/ImhzbGEiOiJyZ2JhIjpzLGw9dGhpc1toXSgpLGM9bFtpLmlkeF07cmV0dXJuInVuZGVmaW5lZCI9PT1hP2M6KCJmdW5jdGlvbiI9PT1hJiYobj1uLmNhbGwodGhpcyxjKSxhPXQudHlwZShuKSksbnVsbD09biYmaS5lbXB0eT90aGlzOigic3RyaW5nIj09PWEmJihvPXIuZXhlYyhuKSxvJiYobj1jK3BhcnNlRmxvYXQob1syXSkqKCIrIj09PW9bMV0/MTotMSkpKSxsW2kuaWR4XT1uLHRoaXNbaF0obCkpKX0pfSl9KSxsLmhvb2s9ZnVuY3Rpb24oZSl7dmFyIGk9ZS5zcGxpdCgiICIpO2YoaSxmdW5jdGlvbihlLGkpe3QuY3NzSG9va3NbaV09e3NldDpmdW5jdGlvbihlLG4pe3ZhciBvLGEscj0iIjtpZigidHJhbnNwYXJlbnQiIT09biYmKCJzdHJpbmciIT09dC50eXBlKG4pfHwobz1zKG4pKSkpe2lmKG49bChvfHxuKSwhZC5yZ2JhJiYxIT09bi5fcmdiYVszXSl7Zm9yKGE9ImJhY2tncm91bmRDb2xvciI9PT1pP2UucGFyZW50Tm9kZTplOygiIj09PXJ8fCJ0cmFuc3BhcmVudCI9PT1yKSYmYSYmYS5zdHlsZTspdHJ5e3I9dC5jc3MoYSwiYmFja2dyb3VuZENvbG9yIiksYT1hLnBhcmVudE5vZGV9Y2F0Y2goaCl7fW49bi5ibGVuZChyJiYidHJhbnNwYXJlbnQiIT09cj9yOiJfZGVmYXVsdCIpfW49bi50b1JnYmFTdHJpbmcoKX10cnl7ZS5zdHlsZVtpXT1ufWNhdGNoKGgpe319fSx0LmZ4LnN0ZXBbaV09ZnVuY3Rpb24oZSl7ZS5jb2xvckluaXR8fChlLnN0YXJ0PWwoZS5lbGVtLGkpLGUuZW5kPWwoZS5lbmQpLGUuY29sb3JJbml0PSEwKSx0LmNzc0hvb2tzW2ldLnNldChlLmVsZW0sZS5zdGFydC50cmFuc2l0aW9uKGUuZW5kLGUucG9zKSl9fSl9LGwuaG9vayhhKSx0LmNzc0hvb2tzLmJvcmRlckNvbG9yPXtleHBhbmQ6ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIGYoWyJUb3AiLCJSaWdodCIsIkJvdHRvbSIsIkxlZnQiXSxmdW5jdGlvbihpLHMpe2VbImJvcmRlciIrcysiQ29sb3IiXT10fSksZX19LG89dC5Db2xvci5uYW1lcz17YXF1YToiIzAwZmZmZiIsYmxhY2s6IiMwMDAwMDAiLGJsdWU6IiMwMDAwZmYiLGZ1Y2hzaWE6IiNmZjAwZmYiLGdyYXk6IiM4MDgwODAiLGdyZWVuOiIjMDA4MDAwIixsaW1lOiIjMDBmZjAwIixtYXJvb246IiM4MDAwMDAiLG5hdnk6IiMwMDAwODAiLG9saXZlOiIjODA4MDAwIixwdXJwbGU6IiM4MDAwODAiLHJlZDoiI2ZmMDAwMCIsc2lsdmVyOiIjYzBjMGMwIix0ZWFsOiIjMDA4MDgwIix3aGl0ZToiI2ZmZmZmZiIseWVsbG93OiIjZmZmZjAwIix0cmFuc3BhcmVudDpbbnVsbCxudWxsLG51bGwsMF0sX2RlZmF1bHQ6IiNmZmZmZmYifX0ocCksZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciBpLHMsbj1lLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc/ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZSxudWxsKTplLmN1cnJlbnRTdHlsZSxvPXt9O2lmKG4mJm4ubGVuZ3RoJiZuWzBdJiZuW25bMF1dKWZvcihzPW4ubGVuZ3RoO3MtLTspaT1uW3NdLCJzdHJpbmciPT10eXBlb2YgbltpXSYmKG9bdC5jYW1lbENhc2UoaSldPW5baV0pO2Vsc2UgZm9yKGkgaW4gbikic3RyaW5nIj09dHlwZW9mIG5baV0mJihvW2ldPW5baV0pO3JldHVybiBvfWZ1bmN0aW9uIGkoZSxpKXt2YXIgcyxvLGE9e307Zm9yKHMgaW4gaSlvPWlbc10sZVtzXSE9PW8mJihuW3NdfHwodC5meC5zdGVwW3NdfHwhaXNOYU4ocGFyc2VGbG9hdChvKSkpJiYoYVtzXT1vKSk7cmV0dXJuIGF9dmFyIHM9WyJhZGQiLCJyZW1vdmUiLCJ0b2dnbGUiXSxuPXtib3JkZXI6MSxib3JkZXJCb3R0b206MSxib3JkZXJDb2xvcjoxLGJvcmRlckxlZnQ6MSxib3JkZXJSaWdodDoxLGJvcmRlclRvcDoxLGJvcmRlcldpZHRoOjEsbWFyZ2luOjEscGFkZGluZzoxfTt0LmVhY2goWyJib3JkZXJMZWZ0U3R5bGUiLCJib3JkZXJSaWdodFN0eWxlIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJib3JkZXJUb3BTdHlsZSJdLGZ1bmN0aW9uKGUsaSl7dC5meC5zdGVwW2ldPWZ1bmN0aW9uKHQpeygibm9uZSIhPT10LmVuZCYmIXQuc2V0QXR0cnx8MT09PXQucG9zJiYhdC5zZXRBdHRyKSYmKHAuc3R5bGUodC5lbGVtLGksdC5lbmQpLHQuc2V0QXR0cj0hMCl9fSksdC5mbi5hZGRCYWNrfHwodC5mbi5hZGRCYWNrPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFkZChudWxsPT10P3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKHQpKX0pLHQuZWZmZWN0cy5hbmltYXRlQ2xhc3M9ZnVuY3Rpb24obixvLGEscil7dmFyIGg9dC5zcGVlZChvLGEscik7cmV0dXJuIHRoaXMucXVldWUoZnVuY3Rpb24oKXt2YXIgbyxhPXQodGhpcykscj1hLmF0dHIoImNsYXNzIil8fCIiLGw9aC5jaGlsZHJlbj9hLmZpbmQoIioiKS5hZGRCYWNrKCk6YTtsPWwubWFwKGZ1bmN0aW9uKCl7dmFyIGk9dCh0aGlzKTtyZXR1cm57ZWw6aSxzdGFydDplKHRoaXMpfX0pLG89ZnVuY3Rpb24oKXt0LmVhY2gocyxmdW5jdGlvbih0LGUpe25bZV0mJmFbZSsiQ2xhc3MiXShuW2VdKX0pfSxvKCksbD1sLm1hcChmdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZD1lKHRoaXMuZWxbMF0pLHRoaXMuZGlmZj1pKHRoaXMuc3RhcnQsdGhpcy5lbmQpLHRoaXN9KSxhLmF0dHIoImNsYXNzIixyKSxsPWwubWFwKGZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxpPXQuRGVmZXJyZWQoKSxzPXQuZXh0ZW5kKHt9LGgse3F1ZXVlOiExLGNvbXBsZXRlOmZ1bmN0aW9uKCl7aS5yZXNvbHZlKGUpfX0pO3JldHVybiB0aGlzLmVsLmFuaW1hdGUodGhpcy5kaWZmLHMpLGkucHJvbWlzZSgpfSksdC53aGVuLmFwcGx5KHQsbC5nZXQoKSkuZG9uZShmdW5jdGlvbigpe28oKSx0LmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbDt0LmVhY2godGhpcy5kaWZmLGZ1bmN0aW9uKHQpe2UuY3NzKHQsIiIpfSl9KSxoLmNvbXBsZXRlLmNhbGwoYVswXSl9KX0pfSx0LmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkscyxuLG8pe3JldHVybiBzP3QuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCh0aGlzLHthZGQ6aX0scyxuLG8pOmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0odC5mbi5hZGRDbGFzcykscmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkscyxuLG8pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjE/dC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKHRoaXMse3JlbW92ZTppfSxzLG4sbyk6ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSh0LmZuLnJlbW92ZUNsYXNzKSx0b2dnbGVDbGFzczpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oaSxzLG4sbyxhKXtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBzfHx2b2lkIDA9PT1zP24/dC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKHRoaXMscz97YWRkOml9OntyZW1vdmU6aX0sbixvLGEpOmUuYXBwbHkodGhpcyxhcmd1bWVudHMpOnQuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCh0aGlzLHt0b2dnbGU6aX0scyxuLG8pfX0odC5mbi50b2dnbGVDbGFzcyksc3dpdGNoQ2xhc3M6ZnVuY3Rpb24oZSxpLHMsbixvKXtyZXR1cm4gdC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKHRoaXMse2FkZDppLHJlbW92ZTplfSxzLG4sbyl9fSl9KCksZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsaSxzLG4pe3JldHVybiB0LmlzUGxhaW5PYmplY3QoZSkmJihpPWUsZT1lLmVmZmVjdCksZT17ZWZmZWN0OmV9LG51bGw9PWkmJihpPXt9KSx0LmlzRnVuY3Rpb24oaSkmJihuPWkscz1udWxsLGk9e30pLCgibnVtYmVyIj09dHlwZW9mIGl8fHQuZnguc3BlZWRzW2ldKSYmKG49cyxzPWksaT17fSksdC5pc0Z1bmN0aW9uKHMpJiYobj1zLHM9bnVsbCksaSYmdC5leHRlbmQoZSxpKSxzPXN8fGkuZHVyYXRpb24sZS5kdXJhdGlvbj10LmZ4Lm9mZj8wOiJudW1iZXIiPT10eXBlb2Ygcz9zOnMgaW4gdC5meC5zcGVlZHM/dC5meC5zcGVlZHNbc106dC5meC5zcGVlZHMuX2RlZmF1bHQsZS5jb21wbGV0ZT1ufHxpLmNvbXBsZXRlLGV9ZnVuY3Rpb24gaShlKXtyZXR1cm4hZXx8Im51bWJlciI9PXR5cGVvZiBlfHx0LmZ4LnNwZWVkc1tlXT8hMDoic3RyaW5nIiE9dHlwZW9mIGV8fHQuZWZmZWN0cy5lZmZlY3RbZV0/dC5pc0Z1bmN0aW9uKGUpPyEwOiJvYmplY3QiIT10eXBlb2YgZXx8ZS5lZmZlY3Q/ITE6ITA6ITB9ZnVuY3Rpb24gcyh0LGUpe3ZhciBpPWUub3V0ZXJXaWR0aCgpLHM9ZS5vdXRlckhlaWdodCgpLG49L15yZWN0XCgoLT9cZCpcLj9cZCpweHwtP1xkKyV8YXV0byksP1xzKigtP1xkKlwuP1xkKnB4fC0/XGQrJXxhdXRvKSw/XHMqKC0/XGQqXC4/XGQqcHh8LT9cZCslfGF1dG8pLD9ccyooLT9cZCpcLj9cZCpweHwtP1xkKyV8YXV0bylcKSQvLG89bi5leGVjKHQpfHxbIiIsMCxpLHMsMF07cmV0dXJue3RvcDpwYXJzZUZsb2F0KG9bMV0pfHwwLHJpZ2h0OiJhdXRvIj09PW9bMl0/aTpwYXJzZUZsb2F0KG9bMl0pLGJvdHRvbToiYXV0byI9PT1vWzNdP3M6cGFyc2VGbG9hdChvWzNdKSxsZWZ0OnBhcnNlRmxvYXQob1s0XSl8fDB9fXQuZXhwciYmdC5leHByLmZpbHRlcnMmJnQuZXhwci5maWx0ZXJzLmFuaW1hdGVkJiYodC5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiEhdChpKS5kYXRhKGQpfHxlKGkpfX0odC5leHByLmZpbHRlcnMuYW5pbWF0ZWQpKSx0LnVpQmFja0NvbXBhdCE9PSExJiZ0LmV4dGVuZCh0LmVmZmVjdHMse3NhdmU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIGk9MCxzPWUubGVuZ3RoO3M+aTtpKyspbnVsbCE9PWVbaV0mJnQuZGF0YShjK2VbaV0sdFswXS5zdHlsZVtlW2ldXSl9LHJlc3RvcmU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIGkscz0wLG49ZS5sZW5ndGg7bj5zO3MrKyludWxsIT09ZVtzXSYmKGk9dC5kYXRhKGMrZVtzXSksdC5jc3MoZVtzXSxpKSl9LHNldE1vZGU6ZnVuY3Rpb24odCxlKXtyZXR1cm4idG9nZ2xlIj09PWUmJihlPXQuaXMoIjpoaWRkZW4iKT8ic2hvdyI6ImhpZGUiKSxlfSxjcmVhdGVXcmFwcGVyOmZ1bmN0aW9uKGUpe2lmKGUucGFyZW50KCkuaXMoIi51aS1lZmZlY3RzLXdyYXBwZXIiKSlyZXR1cm4gZS5wYXJlbnQoKTt2YXIgaT17d2lkdGg6ZS5vdXRlcldpZHRoKCEwKSxoZWlnaHQ6ZS5vdXRlckhlaWdodCghMCksImZsb2F0IjplLmNzcygiZmxvYXQiKX0scz10KCI8ZGl2PjwvZGl2PiIpLmFkZENsYXNzKCJ1aS1lZmZlY3RzLXdyYXBwZXIiKS5jc3Moe2ZvbnRTaXplOiIxMDAlIixiYWNrZ3JvdW5kOiJ0cmFuc3BhcmVudCIsYm9yZGVyOiJub25lIixtYXJnaW46MCxwYWRkaW5nOjB9KSxuPXt3aWR0aDplLndpZHRoKCksaGVpZ2h0OmUuaGVpZ2h0KCl9LG89ZG9jdW1lbnQuYWN0aXZlRWxlbWVudDt0cnl7by5pZH1jYXRjaChhKXtvPWRvY3VtZW50LmJvZHl9cmV0dXJuIGUud3JhcChzKSwoZVswXT09PW98fHQuY29udGFpbnMoZVswXSxvKSkmJnQobykudHJpZ2dlcigiZm9jdXMiKSxzPWUucGFyZW50KCksInN0YXRpYyI9PT1lLmNzcygicG9zaXRpb24iKT8ocy5jc3Moe3Bvc2l0aW9uOiJyZWxhdGl2ZSJ9KSxlLmNzcyh7cG9zaXRpb246InJlbGF0aXZlIn0pKToodC5leHRlbmQoaSx7cG9zaXRpb246ZS5jc3MoInBvc2l0aW9uIiksekluZGV4OmUuY3NzKCJ6LWluZGV4Iil9KSx0LmVhY2goWyJ0b3AiLCJsZWZ0IiwiYm90dG9tIiwicmlnaHQiXSxmdW5jdGlvbih0LHMpe2lbc109ZS5jc3MocyksaXNOYU4ocGFyc2VJbnQoaVtzXSwxMCkpJiYoaVtzXT0iYXV0byIpfSksZS5jc3Moe3Bvc2l0aW9uOiJyZWxhdGl2ZSIsdG9wOjAsbGVmdDowLHJpZ2h0OiJhdXRvIixib3R0b206ImF1dG8ifSkpLGUuY3NzKG4pLHMuY3NzKGkpLnNob3coKX0scmVtb3ZlV3JhcHBlcjpmdW5jdGlvbihlKXt2YXIgaT1kb2N1bWVudC5hY3RpdmVFbGVtZW50O3JldHVybiBlLnBhcmVudCgpLmlzKCIudWktZWZmZWN0cy13cmFwcGVyIikmJihlLnBhcmVudCgpLnJlcGxhY2VXaXRoKGUpLChlWzBdPT09aXx8dC5jb250YWlucyhlWzBdLGkpKSYmdChpKS50cmlnZ2VyKCJmb2N1cyIpKSxlfX0pLHQuZXh0ZW5kKHQuZWZmZWN0cyx7dmVyc2lvbjoiMS4xMi4xIixkZWZpbmU6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiBzfHwocz1pLGk9ImVmZmVjdCIpLHQuZWZmZWN0cy5lZmZlY3RbZV09cyx0LmVmZmVjdHMuZWZmZWN0W2VdLm1vZGU9aSxzfSxzY2FsZWREaW1lbnNpb25zOmZ1bmN0aW9uKHQsZSxpKXtpZigwPT09ZSlyZXR1cm57aGVpZ2h0OjAsd2lkdGg6MCxvdXRlckhlaWdodDowLG91dGVyV2lkdGg6MH07dmFyIHM9Imhvcml6b250YWwiIT09aT8oZXx8MTAwKS8xMDA6MSxuPSJ2ZXJ0aWNhbCIhPT1pPyhlfHwxMDApLzEwMDoxO3JldHVybntoZWlnaHQ6dC5oZWlnaHQoKSpuLHdpZHRoOnQud2lkdGgoKSpzLG91dGVySGVpZ2h0OnQub3V0ZXJIZWlnaHQoKSpuLG91dGVyV2lkdGg6dC5vdXRlcldpZHRoKCkqc319LGNsaXBUb0JveDpmdW5jdGlvbih0KXtyZXR1cm57d2lkdGg6dC5jbGlwLnJpZ2h0LXQuY2xpcC5sZWZ0LGhlaWdodDp0LmNsaXAuYm90dG9tLXQuY2xpcC50b3AsbGVmdDp0LmNsaXAubGVmdCx0b3A6dC5jbGlwLnRvcH19LHVuc2hpZnQ6ZnVuY3Rpb24odCxlLGkpe3ZhciBzPXQucXVldWUoKTtlPjEmJnMuc3BsaWNlLmFwcGx5KHMsWzEsMF0uY29uY2F0KHMuc3BsaWNlKGUsaSkpKSx0LmRlcXVldWUoKX0sc2F2ZVN0eWxlOmZ1bmN0aW9uKHQpe3QuZGF0YSh1LHRbMF0uc3R5bGUuY3NzVGV4dCl9LHJlc3RvcmVTdHlsZTpmdW5jdGlvbih0KXt0WzBdLnN0eWxlLmNzc1RleHQ9dC5kYXRhKHUpfHwiIix0LnJlbW92ZURhdGEodSl9LG1vZGU6ZnVuY3Rpb24odCxlKXt2YXIgaT10LmlzKCI6aGlkZGVuIik7cmV0dXJuInRvZ2dsZSI9PT1lJiYoZT1pPyJzaG93IjoiaGlkZSIpLChpPyJoaWRlIj09PWU6InNob3ciPT09ZSkmJihlPSJub25lIiksZX0sZ2V0QmFzZWxpbmU6ZnVuY3Rpb24odCxlKXt2YXIgaSxzO3N3aXRjaCh0WzBdKXtjYXNlInRvcCI6aT0wO2JyZWFrO2Nhc2UibWlkZGxlIjppPS41O2JyZWFrO2Nhc2UiYm90dG9tIjppPTE7YnJlYWs7ZGVmYXVsdDppPXRbMF0vZS5oZWlnaHR9c3dpdGNoKHRbMV0pe2Nhc2UibGVmdCI6cz0wO2JyZWFrO2Nhc2UiY2VudGVyIjpzPS41O2JyZWFrO2Nhc2UicmlnaHQiOnM9MTticmVhaztkZWZhdWx0OnM9dFsxXS9lLndpZHRofXJldHVybnt4OnMseTppfX0sY3JlYXRlUGxhY2Vob2xkZXI6ZnVuY3Rpb24oZSl7dmFyIGkscz1lLmNzcygicG9zaXRpb24iKSxuPWUucG9zaXRpb24oKTtyZXR1cm4gZS5jc3Moe21hcmdpblRvcDplLmNzcygibWFyZ2luVG9wIiksbWFyZ2luQm90dG9tOmUuY3NzKCJtYXJnaW5Cb3R0b20iKSxtYXJnaW5MZWZ0OmUuY3NzKCJtYXJnaW5MZWZ0IiksbWFyZ2luUmlnaHQ6ZS5jc3MoIm1hcmdpblJpZ2h0Iil9KS5vdXRlcldpZHRoKGUub3V0ZXJXaWR0aCgpKS5vdXRlckhlaWdodChlLm91dGVySGVpZ2h0KCkpLC9eKHN0YXRpY3xyZWxhdGl2ZSkvLnRlc3QocykmJihzPSJhYnNvbHV0ZSIsaT10KCI8IitlWzBdLm5vZGVOYW1lKyI+IikuaW5zZXJ0QWZ0ZXIoZSkuY3NzKHtkaXNwbGF5Oi9eKGlubGluZXxydWJ5KS8udGVzdChlLmNzcygiZGlzcGxheSIpKT8iaW5saW5lLWJsb2NrIjoiYmxvY2siLHZpc2liaWxpdHk6ImhpZGRlbiIsbWFyZ2luVG9wOmUuY3NzKCJtYXJnaW5Ub3AiKSxtYXJnaW5Cb3R0b206ZS5jc3MoIm1hcmdpbkJvdHRvbSIpLG1hcmdpbkxlZnQ6ZS5jc3MoIm1hcmdpbkxlZnQiKSxtYXJnaW5SaWdodDplLmNzcygibWFyZ2luUmlnaHQiKSwiZmxvYXQiOmUuY3NzKCJmbG9hdCIpfSkub3V0ZXJXaWR0aChlLm91dGVyV2lkdGgoKSkub3V0ZXJIZWlnaHQoZS5vdXRlckhlaWdodCgpKS5hZGRDbGFzcygidWktZWZmZWN0cy1wbGFjZWhvbGRlciIpLGUuZGF0YShjKyJwbGFjZWhvbGRlciIsaSkpLGUuY3NzKHtwb3NpdGlvbjpzLGxlZnQ6bi5sZWZ0LHRvcDpuLnRvcH0pLGl9LHJlbW92ZVBsYWNlaG9sZGVyOmZ1bmN0aW9uKHQpe3ZhciBlPWMrInBsYWNlaG9sZGVyIixpPXQuZGF0YShlKTtpJiYoaS5yZW1vdmUoKSx0LnJlbW92ZURhdGEoZSkpfSxjbGVhblVwOmZ1bmN0aW9uKGUpe3QuZWZmZWN0cy5yZXN0b3JlU3R5bGUoZSksdC5lZmZlY3RzLnJlbW92ZVBsYWNlaG9sZGVyKGUpfSxzZXRUcmFuc2l0aW9uOmZ1bmN0aW9uKGUsaSxzLG4pe3JldHVybiBuPW58fHt9LHQuZWFjaChpLGZ1bmN0aW9uKHQsaSl7dmFyIG89ZS5jc3NVbml0KGkpO29bMF0+MCYmKG5baV09b1swXSpzK29bMV0pfSksbn19KSx0LmZuLmV4dGVuZCh7ZWZmZWN0OmZ1bmN0aW9uKCl7ZnVuY3Rpb24gaShlKXtmdW5jdGlvbiBpKCl7ci5yZW1vdmVEYXRhKGQpLHQuZWZmZWN0cy5jbGVhblVwKHIpLCJoaWRlIj09PXMubW9kZSYmci5oaWRlKCksYSgpfWZ1bmN0aW9uIGEoKXt0LmlzRnVuY3Rpb24oaCkmJmguY2FsbChyWzBdKSx0LmlzRnVuY3Rpb24oZSkmJmUoKX12YXIgcj10KHRoaXMpO3MubW9kZT1jLnNoaWZ0KCksdC51aUJhY2tDb21wYXQ9PT0hMXx8bz8ibm9uZSI9PT1zLm1vZGU/KHJbbF0oKSxhKCkpOm4uY2FsbChyWzBdLHMsaSk6KHIuaXMoIjpoaWRkZW4iKT8iaGlkZSI9PT1sOiJzaG93Ij09PWwpPyhyW2xdKCksYSgpKTpuLmNhbGwoclswXSxzLGEpfXZhciBzPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpLG49dC5lZmZlY3RzLmVmZmVjdFtzLmVmZmVjdF0sbz1uLm1vZGUsYT1zLnF1ZXVlLHI9YXx8ImZ4IixoPXMuY29tcGxldGUsbD1zLm1vZGUsYz1bXSx1PWZ1bmN0aW9uKGUpe3ZhciBpPXQodGhpcykscz10LmVmZmVjdHMubW9kZShpLGwpfHxvO2kuZGF0YShkLCEwKSxjLnB1c2gocyksbyYmKCJzaG93Ij09PXN8fHM9PT1vJiYiaGlkZSI9PT1zKSYmaS5zaG93KCksbyYmIm5vbmUiPT09c3x8dC5lZmZlY3RzLnNhdmVTdHlsZShpKSx0LmlzRnVuY3Rpb24oZSkmJmUoKX07cmV0dXJuIHQuZngub2ZmfHwhbj9sP3RoaXNbbF0ocy5kdXJhdGlvbixoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtoJiZoLmNhbGwodGhpcyl9KTphPT09ITE/dGhpcy5lYWNoKHUpLmVhY2goaSk6dGhpcy5xdWV1ZShyLHUpLnF1ZXVlKHIsaSl9LHNob3c6ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHMpe2lmKGkocykpcmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBuPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBuLm1vZGU9InNob3ciLHRoaXMuZWZmZWN0LmNhbGwodGhpcyxuKQp9fSh0LmZuLnNob3cpLGhpZGU6ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHMpe2lmKGkocykpcmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBuPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBuLm1vZGU9ImhpZGUiLHRoaXMuZWZmZWN0LmNhbGwodGhpcyxuKX19KHQuZm4uaGlkZSksdG9nZ2xlOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihzKXtpZihpKHMpfHwiYm9vbGVhbiI9PXR5cGVvZiBzKXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgbj1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbi5tb2RlPSJ0b2dnbGUiLHRoaXMuZWZmZWN0LmNhbGwodGhpcyxuKX19KHQuZm4udG9nZ2xlKSxjc3NVbml0OmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuY3NzKGUpLHM9W107cmV0dXJuIHQuZWFjaChbImVtIiwicHgiLCIlIiwicHQiXSxmdW5jdGlvbih0LGUpe2kuaW5kZXhPZihlKT4wJiYocz1bcGFyc2VGbG9hdChpKSxlXSl9KSxzfSxjc3NDbGlwOmZ1bmN0aW9uKHQpe3JldHVybiB0P3RoaXMuY3NzKCJjbGlwIiwicmVjdCgiK3QudG9wKyJweCAiK3QucmlnaHQrInB4ICIrdC5ib3R0b20rInB4ICIrdC5sZWZ0KyJweCkiKTpzKHRoaXMuY3NzKCJjbGlwIiksdGhpcyl9LHRyYW5zZmVyOmZ1bmN0aW9uKGUsaSl7dmFyIHM9dCh0aGlzKSxuPXQoZS50byksbz0iZml4ZWQiPT09bi5jc3MoInBvc2l0aW9uIiksYT10KCJib2R5Iikscj1vP2Euc2Nyb2xsVG9wKCk6MCxoPW8/YS5zY3JvbGxMZWZ0KCk6MCxsPW4ub2Zmc2V0KCksYz17dG9wOmwudG9wLXIsbGVmdDpsLmxlZnQtaCxoZWlnaHQ6bi5pbm5lckhlaWdodCgpLHdpZHRoOm4uaW5uZXJXaWR0aCgpfSx1PXMub2Zmc2V0KCksZD10KCI8ZGl2IGNsYXNzPSd1aS1lZmZlY3RzLXRyYW5zZmVyJz48L2Rpdj4iKS5hcHBlbmRUbygiYm9keSIpLmFkZENsYXNzKGUuY2xhc3NOYW1lKS5jc3Moe3RvcDp1LnRvcC1yLGxlZnQ6dS5sZWZ0LWgsaGVpZ2h0OnMuaW5uZXJIZWlnaHQoKSx3aWR0aDpzLmlubmVyV2lkdGgoKSxwb3NpdGlvbjpvPyJmaXhlZCI6ImFic29sdXRlIn0pLmFuaW1hdGUoYyxlLmR1cmF0aW9uLGUuZWFzaW5nLGZ1bmN0aW9uKCl7ZC5yZW1vdmUoKSx0LmlzRnVuY3Rpb24oaSkmJmkoKX0pfX0pLHQuZnguc3RlcC5jbGlwPWZ1bmN0aW9uKGUpe2UuY2xpcEluaXR8fChlLnN0YXJ0PXQoZS5lbGVtKS5jc3NDbGlwKCksInN0cmluZyI9PXR5cGVvZiBlLmVuZCYmKGUuZW5kPXMoZS5lbmQsZS5lbGVtKSksZS5jbGlwSW5pdD0hMCksdChlLmVsZW0pLmNzc0NsaXAoe3RvcDplLnBvcyooZS5lbmQudG9wLWUuc3RhcnQudG9wKStlLnN0YXJ0LnRvcCxyaWdodDplLnBvcyooZS5lbmQucmlnaHQtZS5zdGFydC5yaWdodCkrZS5zdGFydC5yaWdodCxib3R0b206ZS5wb3MqKGUuZW5kLmJvdHRvbS1lLnN0YXJ0LmJvdHRvbSkrZS5zdGFydC5ib3R0b20sbGVmdDplLnBvcyooZS5lbmQubGVmdC1lLnN0YXJ0LmxlZnQpK2Uuc3RhcnQubGVmdH0pfX0oKSxmdW5jdGlvbigpe3ZhciBlPXt9O3QuZWFjaChbIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJFeHBvIl0sZnVuY3Rpb24odCxpKXtlW2ldPWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLnBvdyhlLHQrMil9fSksdC5leHRlbmQoZSx7U2luZTpmdW5jdGlvbih0KXtyZXR1cm4gMS1NYXRoLmNvcyh0Kk1hdGguUEkvMil9LENpcmM6ZnVuY3Rpb24odCl7cmV0dXJuIDEtTWF0aC5zcXJ0KDEtdCp0KX0sRWxhc3RpYzpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXR8fDE9PT10P3Q6LU1hdGgucG93KDIsOCoodC0xKSkqTWF0aC5zaW4oKDgwKih0LTEpLTcuNSkqTWF0aC5QSS8xNSl9LEJhY2s6ZnVuY3Rpb24odCl7cmV0dXJuIHQqdCooMyp0LTIpfSxCb3VuY2U6ZnVuY3Rpb24odCl7Zm9yKHZhciBlLGk9NDsoKGU9TWF0aC5wb3coMiwtLWkpKS0xKS8xMT50Oyk7cmV0dXJuIDEvTWF0aC5wb3coNCwzLWkpLTcuNTYyNSpNYXRoLnBvdygoMyplLTIpLzIyLXQsMil9fSksdC5lYWNoKGUsZnVuY3Rpb24oZSxpKXt0LmVhc2luZ1siZWFzZUluIitlXT1pLHQuZWFzaW5nWyJlYXNlT3V0IitlXT1mdW5jdGlvbih0KXtyZXR1cm4gMS1pKDEtdCl9LHQuZWFzaW5nWyJlYXNlSW5PdXQiK2VdPWZ1bmN0aW9uKHQpe3JldHVybi41PnQ/aSgyKnQpLzI6MS1pKC0yKnQrMikvMn19KX0oKTt2YXIgZj10LmVmZmVjdHM7dC5lZmZlY3RzLmRlZmluZSgiYmxpbmQiLCJoaWRlIixmdW5jdGlvbihlLGkpe3ZhciBzPXt1cDpbImJvdHRvbSIsInRvcCJdLHZlcnRpY2FsOlsiYm90dG9tIiwidG9wIl0sZG93bjpbInRvcCIsImJvdHRvbSJdLGxlZnQ6WyJyaWdodCIsImxlZnQiXSxob3Jpem9udGFsOlsicmlnaHQiLCJsZWZ0Il0scmlnaHQ6WyJsZWZ0IiwicmlnaHQiXX0sbj10KHRoaXMpLG89ZS5kaXJlY3Rpb258fCJ1cCIsYT1uLmNzc0NsaXAoKSxyPXtjbGlwOnQuZXh0ZW5kKHt9LGEpfSxoPXQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlcihuKTtyLmNsaXBbc1tvXVswXV09ci5jbGlwW3Nbb11bMV1dLCJzaG93Ij09PWUubW9kZSYmKG4uY3NzQ2xpcChyLmNsaXApLGgmJmguY3NzKHQuZWZmZWN0cy5jbGlwVG9Cb3gocikpLHIuY2xpcD1hKSxoJiZoLmFuaW1hdGUodC5lZmZlY3RzLmNsaXBUb0JveChyKSxlLmR1cmF0aW9uLGUuZWFzaW5nKSxuLmFuaW1hdGUocix7cXVldWU6ITEsZHVyYXRpb246ZS5kdXJhdGlvbixlYXNpbmc6ZS5lYXNpbmcsY29tcGxldGU6aX0pfSksdC5lZmZlY3RzLmRlZmluZSgiYm91bmNlIixmdW5jdGlvbihlLGkpe3ZhciBzLG4sbyxhPXQodGhpcykscj1lLm1vZGUsaD0iaGlkZSI9PT1yLGw9InNob3ciPT09cixjPWUuZGlyZWN0aW9ufHwidXAiLHU9ZS5kaXN0YW5jZSxkPWUudGltZXN8fDUscD0yKmQrKGx8fGg/MTowKSxmPWUuZHVyYXRpb24vcCxnPWUuZWFzaW5nLG09InVwIj09PWN8fCJkb3duIj09PWM/InRvcCI6ImxlZnQiLF89InVwIj09PWN8fCJsZWZ0Ij09PWMsdj0wLGI9YS5xdWV1ZSgpLmxlbmd0aDtmb3IodC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKGEpLG89YS5jc3MobSksdXx8KHU9YVsidG9wIj09PW0/Im91dGVySGVpZ2h0Ijoib3V0ZXJXaWR0aCJdKCkvMyksbCYmKG49e29wYWNpdHk6MX0sblttXT1vLGEuY3NzKCJvcGFjaXR5IiwwKS5jc3MobSxfPzIqLXU6Mip1KS5hbmltYXRlKG4sZixnKSksaCYmKHUvPU1hdGgucG93KDIsZC0xKSksbj17fSxuW21dPW87ZD52O3YrKylzPXt9LHNbbV09KF8/Ii09IjoiKz0iKSt1LGEuYW5pbWF0ZShzLGYsZykuYW5pbWF0ZShuLGYsZyksdT1oPzIqdTp1LzI7aCYmKHM9e29wYWNpdHk6MH0sc1ttXT0oXz8iLT0iOiIrPSIpK3UsYS5hbmltYXRlKHMsZixnKSksYS5xdWV1ZShpKSx0LmVmZmVjdHMudW5zaGlmdChhLGIscCsxKX0pLHQuZWZmZWN0cy5kZWZpbmUoImNsaXAiLCJoaWRlIixmdW5jdGlvbihlLGkpe3ZhciBzLG49e30sbz10KHRoaXMpLGE9ZS5kaXJlY3Rpb258fCJ2ZXJ0aWNhbCIscj0iYm90aCI9PT1hLGg9cnx8Imhvcml6b250YWwiPT09YSxsPXJ8fCJ2ZXJ0aWNhbCI9PT1hO3M9by5jc3NDbGlwKCksbi5jbGlwPXt0b3A6bD8ocy5ib3R0b20tcy50b3ApLzI6cy50b3AscmlnaHQ6aD8ocy5yaWdodC1zLmxlZnQpLzI6cy5yaWdodCxib3R0b206bD8ocy5ib3R0b20tcy50b3ApLzI6cy5ib3R0b20sbGVmdDpoPyhzLnJpZ2h0LXMubGVmdCkvMjpzLmxlZnR9LHQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlcihvKSwic2hvdyI9PT1lLm1vZGUmJihvLmNzc0NsaXAobi5jbGlwKSxuLmNsaXA9cyksby5hbmltYXRlKG4se3F1ZXVlOiExLGR1cmF0aW9uOmUuZHVyYXRpb24sZWFzaW5nOmUuZWFzaW5nLGNvbXBsZXRlOml9KX0pLHQuZWZmZWN0cy5kZWZpbmUoImRyb3AiLCJoaWRlIixmdW5jdGlvbihlLGkpe3ZhciBzLG49dCh0aGlzKSxvPWUubW9kZSxhPSJzaG93Ij09PW8scj1lLmRpcmVjdGlvbnx8ImxlZnQiLGg9InVwIj09PXJ8fCJkb3duIj09PXI/InRvcCI6ImxlZnQiLGw9InVwIj09PXJ8fCJsZWZ0Ij09PXI/Ii09IjoiKz0iLGM9Iis9Ij09PWw/Ii09IjoiKz0iLHU9e29wYWNpdHk6MH07dC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKG4pLHM9ZS5kaXN0YW5jZXx8blsidG9wIj09PWg/Im91dGVySGVpZ2h0Ijoib3V0ZXJXaWR0aCJdKCEwKS8yLHVbaF09bCtzLGEmJihuLmNzcyh1KSx1W2hdPWMrcyx1Lm9wYWNpdHk9MSksbi5hbmltYXRlKHUse3F1ZXVlOiExLGR1cmF0aW9uOmUuZHVyYXRpb24sZWFzaW5nOmUuZWFzaW5nLGNvbXBsZXRlOml9KX0pLHQuZWZmZWN0cy5kZWZpbmUoImV4cGxvZGUiLCJoaWRlIixmdW5jdGlvbihlLGkpe2Z1bmN0aW9uIHMoKXtiLnB1c2godGhpcyksYi5sZW5ndGg9PT11KmQmJm4oKX1mdW5jdGlvbiBuKCl7cC5jc3Moe3Zpc2liaWxpdHk6InZpc2libGUifSksdChiKS5yZW1vdmUoKSxpKCl9dmFyIG8sYSxyLGgsbCxjLHU9ZS5waWVjZXM/TWF0aC5yb3VuZChNYXRoLnNxcnQoZS5waWVjZXMpKTozLGQ9dSxwPXQodGhpcyksZj1lLm1vZGUsZz0ic2hvdyI9PT1mLG09cC5zaG93KCkuY3NzKCJ2aXNpYmlsaXR5IiwiaGlkZGVuIikub2Zmc2V0KCksXz1NYXRoLmNlaWwocC5vdXRlcldpZHRoKCkvZCksdj1NYXRoLmNlaWwocC5vdXRlckhlaWdodCgpL3UpLGI9W107Zm9yKG89MDt1Pm87bysrKWZvcihoPW0udG9wK28qdixjPW8tKHUtMSkvMixhPTA7ZD5hO2ErKylyPW0ubGVmdCthKl8sbD1hLShkLTEpLzIscC5jbG9uZSgpLmFwcGVuZFRvKCJib2R5Iikud3JhcCgiPGRpdj48L2Rpdj4iKS5jc3Moe3Bvc2l0aW9uOiJhYnNvbHV0ZSIsdmlzaWJpbGl0eToidmlzaWJsZSIsbGVmdDotYSpfLHRvcDotbyp2fSkucGFyZW50KCkuYWRkQ2xhc3MoInVpLWVmZmVjdHMtZXhwbG9kZSIpLmNzcyh7cG9zaXRpb246ImFic29sdXRlIixvdmVyZmxvdzoiaGlkZGVuIix3aWR0aDpfLGhlaWdodDp2LGxlZnQ6cisoZz9sKl86MCksdG9wOmgrKGc/Yyp2OjApLG9wYWNpdHk6Zz8wOjF9KS5hbmltYXRlKHtsZWZ0OnIrKGc/MDpsKl8pLHRvcDpoKyhnPzA6Yyp2KSxvcGFjaXR5Omc/MTowfSxlLmR1cmF0aW9ufHw1MDAsZS5lYXNpbmcscyl9KSx0LmVmZmVjdHMuZGVmaW5lKCJmYWRlIiwidG9nZ2xlIixmdW5jdGlvbihlLGkpe3ZhciBzPSJzaG93Ij09PWUubW9kZTt0KHRoaXMpLmNzcygib3BhY2l0eSIscz8wOjEpLmFuaW1hdGUoe29wYWNpdHk6cz8xOjB9LHtxdWV1ZTohMSxkdXJhdGlvbjplLmR1cmF0aW9uLGVhc2luZzplLmVhc2luZyxjb21wbGV0ZTppfSl9KSx0LmVmZmVjdHMuZGVmaW5lKCJmb2xkIiwiaGlkZSIsZnVuY3Rpb24oZSxpKXt2YXIgcz10KHRoaXMpLG49ZS5tb2RlLG89InNob3ciPT09bixhPSJoaWRlIj09PW4scj1lLnNpemV8fDE1LGg9LyhbMC05XSspJS8uZXhlYyhyKSxsPSEhZS5ob3JpekZpcnN0LGM9bD9bInJpZ2h0IiwiYm90dG9tIl06WyJib3R0b20iLCJyaWdodCJdLHU9ZS5kdXJhdGlvbi8yLGQ9dC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKHMpLHA9cy5jc3NDbGlwKCksZj17Y2xpcDp0LmV4dGVuZCh7fSxwKX0sZz17Y2xpcDp0LmV4dGVuZCh7fSxwKX0sbT1bcFtjWzBdXSxwW2NbMV1dXSxfPXMucXVldWUoKS5sZW5ndGg7aCYmKHI9cGFyc2VJbnQoaFsxXSwxMCkvMTAwKm1bYT8wOjFdKSxmLmNsaXBbY1swXV09cixnLmNsaXBbY1swXV09cixnLmNsaXBbY1sxXV09MCxvJiYocy5jc3NDbGlwKGcuY2xpcCksZCYmZC5jc3ModC5lZmZlY3RzLmNsaXBUb0JveChnKSksZy5jbGlwPXApLHMucXVldWUoZnVuY3Rpb24oaSl7ZCYmZC5hbmltYXRlKHQuZWZmZWN0cy5jbGlwVG9Cb3goZiksdSxlLmVhc2luZykuYW5pbWF0ZSh0LmVmZmVjdHMuY2xpcFRvQm94KGcpLHUsZS5lYXNpbmcpLGkoKX0pLmFuaW1hdGUoZix1LGUuZWFzaW5nKS5hbmltYXRlKGcsdSxlLmVhc2luZykucXVldWUoaSksdC5lZmZlY3RzLnVuc2hpZnQocyxfLDQpfSksdC5lZmZlY3RzLmRlZmluZSgiaGlnaGxpZ2h0Iiwic2hvdyIsZnVuY3Rpb24oZSxpKXt2YXIgcz10KHRoaXMpLG49e2JhY2tncm91bmRDb2xvcjpzLmNzcygiYmFja2dyb3VuZENvbG9yIil9OyJoaWRlIj09PWUubW9kZSYmKG4ub3BhY2l0eT0wKSx0LmVmZmVjdHMuc2F2ZVN0eWxlKHMpLHMuY3NzKHtiYWNrZ3JvdW5kSW1hZ2U6Im5vbmUiLGJhY2tncm91bmRDb2xvcjplLmNvbG9yfHwiI2ZmZmY5OSJ9KS5hbmltYXRlKG4se3F1ZXVlOiExLGR1cmF0aW9uOmUuZHVyYXRpb24sZWFzaW5nOmUuZWFzaW5nLGNvbXBsZXRlOml9KX0pLHQuZWZmZWN0cy5kZWZpbmUoInNpemUiLGZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvLGE9dCh0aGlzKSxyPVsiZm9udFNpemUiXSxoPVsiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIl0sbD1bImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCJdLGM9ZS5tb2RlLHU9ImVmZmVjdCIhPT1jLGQ9ZS5zY2FsZXx8ImJvdGgiLHA9ZS5vcmlnaW58fFsibWlkZGxlIiwiY2VudGVyIl0sZj1hLmNzcygicG9zaXRpb24iKSxnPWEucG9zaXRpb24oKSxtPXQuZWZmZWN0cy5zY2FsZWREaW1lbnNpb25zKGEpLF89ZS5mcm9tfHxtLHY9ZS50b3x8dC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMoYSwwKTt0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIoYSksInNob3ciPT09YyYmKG89XyxfPXYsdj1vKSxuPXtmcm9tOnt5Ol8uaGVpZ2h0L20uaGVpZ2h0LHg6Xy53aWR0aC9tLndpZHRofSx0bzp7eTp2LmhlaWdodC9tLmhlaWdodCx4OnYud2lkdGgvbS53aWR0aH19LCgiYm94Ij09PWR8fCJib3RoIj09PWQpJiYobi5mcm9tLnkhPT1uLnRvLnkmJihfPXQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKGEsaCxuLmZyb20ueSxfKSx2PXQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKGEsaCxuLnRvLnksdikpLG4uZnJvbS54IT09bi50by54JiYoXz10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihhLGwsbi5mcm9tLngsXyksdj10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihhLGwsbi50by54LHYpKSksKCJjb250ZW50Ij09PWR8fCJib3RoIj09PWQpJiZuLmZyb20ueSE9PW4udG8ueSYmKF89dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oYSxyLG4uZnJvbS55LF8pLHY9dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oYSxyLG4udG8ueSx2KSkscCYmKHM9dC5lZmZlY3RzLmdldEJhc2VsaW5lKHAsbSksXy50b3A9KG0ub3V0ZXJIZWlnaHQtXy5vdXRlckhlaWdodCkqcy55K2cudG9wLF8ubGVmdD0obS5vdXRlcldpZHRoLV8ub3V0ZXJXaWR0aCkqcy54K2cubGVmdCx2LnRvcD0obS5vdXRlckhlaWdodC12Lm91dGVySGVpZ2h0KSpzLnkrZy50b3Asdi5sZWZ0PShtLm91dGVyV2lkdGgtdi5vdXRlcldpZHRoKSpzLngrZy5sZWZ0KSxhLmNzcyhfKSwoImNvbnRlbnQiPT09ZHx8ImJvdGgiPT09ZCkmJihoPWguY29uY2F0KFsibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIl0pLmNvbmNhdChyKSxsPWwuY29uY2F0KFsibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0Il0pLGEuZmluZCgiKlt3aWR0aF0iKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9dCh0aGlzKSxzPXQuZWZmZWN0cy5zY2FsZWREaW1lbnNpb25zKGkpLG89e2hlaWdodDpzLmhlaWdodCpuLmZyb20ueSx3aWR0aDpzLndpZHRoKm4uZnJvbS54LG91dGVySGVpZ2h0OnMub3V0ZXJIZWlnaHQqbi5mcm9tLnksb3V0ZXJXaWR0aDpzLm91dGVyV2lkdGgqbi5mcm9tLnh9LGE9e2hlaWdodDpzLmhlaWdodCpuLnRvLnksd2lkdGg6cy53aWR0aCpuLnRvLngsb3V0ZXJIZWlnaHQ6cy5oZWlnaHQqbi50by55LG91dGVyV2lkdGg6cy53aWR0aCpuLnRvLnh9O24uZnJvbS55IT09bi50by55JiYobz10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihpLGgsbi5mcm9tLnksbyksYT10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihpLGgsbi50by55LGEpKSxuLmZyb20ueCE9PW4udG8ueCYmKG89dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oaSxsLG4uZnJvbS54LG8pLGE9dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oaSxsLG4udG8ueCxhKSksdSYmdC5lZmZlY3RzLnNhdmVTdHlsZShpKSxpLmNzcyhvKSxpLmFuaW1hdGUoYSxlLmR1cmF0aW9uLGUuZWFzaW5nLGZ1bmN0aW9uKCl7dSYmdC5lZmZlY3RzLnJlc3RvcmVTdHlsZShpKX0pfSkpLGEuYW5pbWF0ZSh2LHtxdWV1ZTohMSxkdXJhdGlvbjplLmR1cmF0aW9uLGVhc2luZzplLmVhc2luZyxjb21wbGV0ZTpmdW5jdGlvbigpe3ZhciBlPWEub2Zmc2V0KCk7MD09PXYub3BhY2l0eSYmYS5jc3MoIm9wYWNpdHkiLF8ub3BhY2l0eSksdXx8KGEuY3NzKCJwb3NpdGlvbiIsInN0YXRpYyI9PT1mPyJyZWxhdGl2ZSI6Zikub2Zmc2V0KGUpLHQuZWZmZWN0cy5zYXZlU3R5bGUoYSkpLGkoKX19KX0pLHQuZWZmZWN0cy5kZWZpbmUoInNjYWxlIixmdW5jdGlvbihlLGkpe3ZhciBzPXQodGhpcyksbj1lLm1vZGUsbz1wYXJzZUludChlLnBlcmNlbnQsMTApfHwoMD09PXBhcnNlSW50KGUucGVyY2VudCwxMCk/MDoiZWZmZWN0IiE9PW4/MDoxMDApLGE9dC5leHRlbmQoITAse2Zyb206dC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMocyksdG86dC5lZmZlY3RzLnNjYWxlZERpbWVuc2lvbnMocyxvLGUuZGlyZWN0aW9ufHwiYm90aCIpLG9yaWdpbjplLm9yaWdpbnx8WyJtaWRkbGUiLCJjZW50ZXIiXX0sZSk7ZS5mYWRlJiYoYS5mcm9tLm9wYWNpdHk9MSxhLnRvLm9wYWNpdHk9MCksdC5lZmZlY3RzLmVmZmVjdC5zaXplLmNhbGwodGhpcyxhLGkpfSksdC5lZmZlY3RzLmRlZmluZSgicHVmZiIsImhpZGUiLGZ1bmN0aW9uKGUsaSl7dmFyIHM9dC5leHRlbmQoITAse30sZSx7ZmFkZTohMCxwZXJjZW50OnBhcnNlSW50KGUucGVyY2VudCwxMCl8fDE1MH0pO3QuZWZmZWN0cy5lZmZlY3Quc2NhbGUuY2FsbCh0aGlzLHMsaSl9KSx0LmVmZmVjdHMuZGVmaW5lKCJwdWxzYXRlIiwic2hvdyIsZnVuY3Rpb24oZSxpKXt2YXIgcz10KHRoaXMpLG49ZS5tb2RlLG89InNob3ciPT09bixhPSJoaWRlIj09PW4scj1vfHxhLGg9MiooZS50aW1lc3x8NSkrKHI/MTowKSxsPWUuZHVyYXRpb24vaCxjPTAsdT0xLGQ9cy5xdWV1ZSgpLmxlbmd0aDtmb3IoKG98fCFzLmlzKCI6dmlzaWJsZSIpKSYmKHMuY3NzKCJvcGFjaXR5IiwwKS5zaG93KCksYz0xKTtoPnU7dSsrKXMuYW5pbWF0ZSh7b3BhY2l0eTpjfSxsLGUuZWFzaW5nKSxjPTEtYztzLmFuaW1hdGUoe29wYWNpdHk6Y30sbCxlLmVhc2luZykscy5xdWV1ZShpKSx0LmVmZmVjdHMudW5zaGlmdChzLGQsaCsxKX0pLHQuZWZmZWN0cy5kZWZpbmUoInNoYWtlIixmdW5jdGlvbihlLGkpe3ZhciBzPTEsbj10KHRoaXMpLG89ZS5kaXJlY3Rpb258fCJsZWZ0IixhPWUuZGlzdGFuY2V8fDIwLHI9ZS50aW1lc3x8MyxoPTIqcisxLGw9TWF0aC5yb3VuZChlLmR1cmF0aW9uL2gpLGM9InVwIj09PW98fCJkb3duIj09PW8/InRvcCI6ImxlZnQiLHU9InVwIj09PW98fCJsZWZ0Ij09PW8sZD17fSxwPXt9LGY9e30sZz1uLnF1ZXVlKCkubGVuZ3RoO2Zvcih0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIobiksZFtjXT0odT8iLT0iOiIrPSIpK2EscFtjXT0odT8iKz0iOiItPSIpKzIqYSxmW2NdPSh1PyItPSI6Iis9IikrMiphLG4uYW5pbWF0ZShkLGwsZS5lYXNpbmcpO3I+cztzKyspbi5hbmltYXRlKHAsbCxlLmVhc2luZykuYW5pbWF0ZShmLGwsZS5lYXNpbmcpO24uYW5pbWF0ZShwLGwsZS5lYXNpbmcpLmFuaW1hdGUoZCxsLzIsZS5lYXNpbmcpLnF1ZXVlKGkpLHQuZWZmZWN0cy51bnNoaWZ0KG4sZyxoKzEpfSksdC5lZmZlY3RzLmRlZmluZSgic2xpZGUiLCJzaG93IixmdW5jdGlvbihlLGkpe3ZhciBzLG4sbz10KHRoaXMpLGE9e3VwOlsiYm90dG9tIiwidG9wIl0sZG93bjpbInRvcCIsImJvdHRvbSJdLGxlZnQ6WyJyaWdodCIsImxlZnQiXSxyaWdodDpbImxlZnQiLCJyaWdodCJdfSxyPWUubW9kZSxoPWUuZGlyZWN0aW9ufHwibGVmdCIsbD0idXAiPT09aHx8ImRvd24iPT09aD8idG9wIjoibGVmdCIsYz0idXAiPT09aHx8ImxlZnQiPT09aCx1PWUuZGlzdGFuY2V8fG9bInRvcCI9PT1sPyJvdXRlckhlaWdodCI6Im91dGVyV2lkdGgiXSghMCksZD17fTt0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIobykscz1vLmNzc0NsaXAoKSxuPW8ucG9zaXRpb24oKVtsXSxkW2xdPShjPy0xOjEpKnUrbixkLmNsaXA9by5jc3NDbGlwKCksZC5jbGlwW2FbaF1bMV1dPWQuY2xpcFthW2hdWzBdXSwic2hvdyI9PT1yJiYoby5jc3NDbGlwKGQuY2xpcCksby5jc3MobCxkW2xdKSxkLmNsaXA9cyxkW2xdPW4pLG8uYW5pbWF0ZShkLHtxdWV1ZTohMSxkdXJhdGlvbjplLmR1cmF0aW9uLGVhc2luZzplLmVhc2luZyxjb21wbGV0ZTppfSl9KTt2YXIgZjt0LnVpQmFja0NvbXBhdCE9PSExJiYoZj10LmVmZmVjdHMuZGVmaW5lKCJ0cmFuc2ZlciIsZnVuY3Rpb24oZSxpKXt0KHRoaXMpLnRyYW5zZmVyKGUsaSl9KSksdC51aS5mb2N1c2FibGU9ZnVuY3Rpb24oaSxzKXt2YXIgbixvLGEscixoLGw9aS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJhcmVhIj09PWw/KG49aS5wYXJlbnROb2RlLG89bi5uYW1lLGkuaHJlZiYmbyYmIm1hcCI9PT1uLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/KGE9dCgiaW1nW3VzZW1hcD0nIyIrbysiJ10iKSxhLmxlbmd0aD4wJiZhLmlzKCI6dmlzaWJsZSIpKTohMSk6KC9eKGlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvLnRlc3QobCk/KHI9IWkuZGlzYWJsZWQsciYmKGg9dChpKS5jbG9zZXN0KCJmaWVsZHNldCIpWzBdLGgmJihyPSFoLmRpc2FibGVkKSkpOnI9ImEiPT09bD9pLmhyZWZ8fHM6cyxyJiZ0KGkpLmlzKCI6dmlzaWJsZSIpJiZlKHQoaSkpKX0sdC5leHRlbmQodC5leHByWyI6Il0se2ZvY3VzYWJsZTpmdW5jdGlvbihlKXtyZXR1cm4gdC51aS5mb2N1c2FibGUoZSxudWxsIT10LmF0dHIoZSwidGFiaW5kZXgiKSl9fSksdC51aS5mb2N1c2FibGUsdC5mbi5mb3JtPWZ1bmN0aW9uKCl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiB0aGlzWzBdLmZvcm0/dGhpcy5jbG9zZXN0KCJmb3JtIik6dCh0aGlzWzBdLmZvcm0pfSx0LnVpLmZvcm1SZXNldE1peGluPXtfZm9ybVJlc2V0SGFuZGxlcjpmdW5jdGlvbigpe3ZhciBlPXQodGhpcyk7c2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBpPWUuZGF0YSgidWktZm9ybS1yZXNldC1pbnN0YW5jZXMiKTt0LmVhY2goaSxmdW5jdGlvbigpe3RoaXMucmVmcmVzaCgpfSl9KX0sX2JpbmRGb3JtUmVzZXRIYW5kbGVyOmZ1bmN0aW9uKCl7aWYodGhpcy5mb3JtPXRoaXMuZWxlbWVudC5mb3JtKCksdGhpcy5mb3JtLmxlbmd0aCl7dmFyIHQ9dGhpcy5mb3JtLmRhdGEoInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzIil8fFtdO3QubGVuZ3RofHx0aGlzLmZvcm0ub24oInJlc2V0LnVpLWZvcm0tcmVzZXQiLHRoaXMuX2Zvcm1SZXNldEhhbmRsZXIpLHQucHVzaCh0aGlzKSx0aGlzLmZvcm0uZGF0YSgidWktZm9ybS1yZXNldC1pbnN0YW5jZXMiLHQpfX0sX3VuYmluZEZvcm1SZXNldEhhbmRsZXI6ZnVuY3Rpb24oKXtpZih0aGlzLmZvcm0ubGVuZ3RoKXt2YXIgZT10aGlzLmZvcm0uZGF0YSgidWktZm9ybS1yZXNldC1pbnN0YW5jZXMiKTtlLnNwbGljZSh0LmluQXJyYXkodGhpcyxlKSwxKSxlLmxlbmd0aD90aGlzLmZvcm0uZGF0YSgidWktZm9ybS1yZXNldC1pbnN0YW5jZXMiLGUpOnRoaXMuZm9ybS5yZW1vdmVEYXRhKCJ1aS1mb3JtLXJlc2V0LWluc3RhbmNlcyIpLm9mZigicmVzZXQudWktZm9ybS1yZXNldCIpfX19LCIxLjciPT09dC5mbi5qcXVlcnkuc3Vic3RyaW5nKDAsMykmJih0LmVhY2goWyJXaWR0aCIsIkhlaWdodCJdLGZ1bmN0aW9uKGUsaSl7ZnVuY3Rpb24gcyhlLGkscyxvKXtyZXR1cm4gdC5lYWNoKG4sZnVuY3Rpb24oKXtpLT1wYXJzZUZsb2F0KHQuY3NzKGUsInBhZGRpbmciK3RoaXMpKXx8MCxzJiYoaS09cGFyc2VGbG9hdCh0LmNzcyhlLCJib3JkZXIiK3RoaXMrIldpZHRoIikpfHwwKSxvJiYoaS09cGFyc2VGbG9hdCh0LmNzcyhlLCJtYXJnaW4iK3RoaXMpKXx8MCl9KSxpfXZhciBuPSJXaWR0aCI9PT1pP1siTGVmdCIsIlJpZ2h0Il06WyJUb3AiLCJCb3R0b20iXSxvPWkudG9Mb3dlckNhc2UoKSxhPXtpbm5lcldpZHRoOnQuZm4uaW5uZXJXaWR0aCxpbm5lckhlaWdodDp0LmZuLmlubmVySGVpZ2h0LG91dGVyV2lkdGg6dC5mbi5vdXRlcldpZHRoLG91dGVySGVpZ2h0OnQuZm4ub3V0ZXJIZWlnaHR9O3QuZm5bImlubmVyIitpXT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT9hWyJpbm5lciIraV0uY2FsbCh0aGlzKTp0aGlzLmVhY2goZnVuY3Rpb24oKXt0KHRoaXMpLmNzcyhvLHModGhpcyxlKSsicHgiKX0pfSx0LmZuWyJvdXRlciIraV09ZnVuY3Rpb24oZSxuKXtyZXR1cm4ibnVtYmVyIiE9dHlwZW9mIGU/YVsib3V0ZXIiK2ldLmNhbGwodGhpcyxlKTp0aGlzLmVhY2goZnVuY3Rpb24oKXt0KHRoaXMpLmNzcyhvLHModGhpcyxlLCEwLG4pKyJweCIpfSl9fSksdC5mbi5hZGRCYWNrPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFkZChudWxsPT10P3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKHQpKX0pLHQudWkua2V5Q29kZT17QkFDS1NQQUNFOjgsQ09NTUE6MTg4LERFTEVURTo0NixET1dOOjQwLEVORDozNSxFTlRFUjoxMyxFU0NBUEU6MjcsSE9NRTozNixMRUZUOjM3LFBBR0VfRE9XTjozNCxQQUdFX1VQOjMzLFBFUklPRDoxOTAsUklHSFQ6MzksU1BBQ0U6MzIsVEFCOjksVVA6Mzh9LHQudWkuZXNjYXBlU2VsZWN0b3I9ZnVuY3Rpb24oKXt2YXIgdD0vKFshIiMkJSYnKCkqKywuXC86Ozw9Pj9AW1xdXmB7fH1+XSkvZztyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSh0LCJcXCQxIil9fSgpLHQuZm4ubGFiZWxzPWZ1bmN0aW9uKCl7dmFyIGUsaSxzLG4sbztyZXR1cm4gdGhpc1swXS5sYWJlbHMmJnRoaXNbMF0ubGFiZWxzLmxlbmd0aD90aGlzLnB1c2hTdGFjayh0aGlzWzBdLmxhYmVscyk6KG49dGhpcy5lcSgwKS5wYXJlbnRzKCJsYWJlbCIpLHM9dGhpcy5hdHRyKCJpZCIpLHMmJihlPXRoaXMuZXEoMCkucGFyZW50cygpLmxhc3QoKSxvPWUuYWRkKGUubGVuZ3RoP2Uuc2libGluZ3MoKTp0aGlzLnNpYmxpbmdzKCkpLGk9ImxhYmVsW2Zvcj0nIit0LnVpLmVzY2FwZVNlbGVjdG9yKHMpKyInXSIsbj1uLmFkZChvLmZpbmQoaSkuYWRkQmFjayhpKSkpLHRoaXMucHVzaFN0YWNrKG4pKX0sdC5mbi5zY3JvbGxQYXJlbnQ9ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5jc3MoInBvc2l0aW9uIikscz0iYWJzb2x1dGUiPT09aSxuPWU/LyhhdXRvfHNjcm9sbHxoaWRkZW4pLzovKGF1dG98c2Nyb2xsKS8sbz10aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO3JldHVybiBzJiYic3RhdGljIj09PWUuY3NzKCJwb3NpdGlvbiIpPyExOm4udGVzdChlLmNzcygib3ZlcmZsb3ciKStlLmNzcygib3ZlcmZsb3cteSIpK2UuY3NzKCJvdmVyZmxvdy14IikpfSkuZXEoMCk7cmV0dXJuImZpeGVkIiE9PWkmJm8ubGVuZ3RoP286dCh0aGlzWzBdLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KX0sdC5leHRlbmQodC5leHByWyI6Il0se3RhYmJhYmxlOmZ1bmN0aW9uKGUpe3ZhciBpPXQuYXR0cihlLCJ0YWJpbmRleCIpLHM9bnVsbCE9aTtyZXR1cm4oIXN8fGk+PTApJiZ0LnVpLmZvY3VzYWJsZShlLHMpfX0pLHQuZm4uZXh0ZW5kKHt1bmlxdWVJZDpmdW5jdGlvbigpe3ZhciB0PTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3RoaXMuaWR8fCh0aGlzLmlkPSJ1aS1pZC0iKyArK3QpfSl9fSgpLHJlbW92ZVVuaXF1ZUlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpey9edWktaWQtXGQrJC8udGVzdCh0aGlzLmlkKSYmdCh0aGlzKS5yZW1vdmVBdHRyKCJpZCIpfSl9fSksdC53aWRnZXQoInVpLmFjY29yZGlvbiIse3ZlcnNpb246IjEuMTIuMSIsb3B0aW9uczp7YWN0aXZlOjAsYW5pbWF0ZTp7fSxjbGFzc2VzOnsidWktYWNjb3JkaW9uLWhlYWRlciI6InVpLWNvcm5lci10b3AiLCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZCI6InVpLWNvcm5lci1hbGwiLCJ1aS1hY2NvcmRpb24tY29udGVudCI6InVpLWNvcm5lci1ib3R0b20ifSxjb2xsYXBzaWJsZTohMSxldmVudDoiY2xpY2siLGhlYWRlcjoiPiBsaSA+IDpmaXJzdC1jaGlsZCwgPiA6bm90KGxpKTpldmVuIixoZWlnaHRTdHlsZToiYXV0byIsaWNvbnM6e2FjdGl2ZUhlYWRlcjoidWktaWNvbi10cmlhbmdsZS0xLXMiLGhlYWRlcjoidWktaWNvbi10cmlhbmdsZS0xLWUifSxhY3RpdmF0ZTpudWxsLGJlZm9yZUFjdGl2YXRlOm51bGx9LGhpZGVQcm9wczp7Ym9yZGVyVG9wV2lkdGg6ImhpZGUiLGJvcmRlckJvdHRvbVdpZHRoOiJoaWRlIixwYWRkaW5nVG9wOiJoaWRlIixwYWRkaW5nQm90dG9tOiJoaWRlIixoZWlnaHQ6ImhpZGUifSxzaG93UHJvcHM6e2JvcmRlclRvcFdpZHRoOiJzaG93Iixib3JkZXJCb3R0b21XaWR0aDoic2hvdyIscGFkZGluZ1RvcDoic2hvdyIscGFkZGluZ0JvdHRvbToic2hvdyIsaGVpZ2h0OiJzaG93In0sX2NyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9uczt0aGlzLnByZXZTaG93PXRoaXMucHJldkhpZGU9dCgpLHRoaXMuX2FkZENsYXNzKCJ1aS1hY2NvcmRpb24iLCJ1aS13aWRnZXQgdWktaGVscGVyLXJlc2V0IiksdGhpcy5lbGVtZW50LmF0dHIoInJvbGUiLCJ0YWJsaXN0IiksZS5jb2xsYXBzaWJsZXx8ZS5hY3RpdmUhPT0hMSYmbnVsbCE9ZS5hY3RpdmV8fChlLmFjdGl2ZT0wKSx0aGlzLl9wcm9jZXNzUGFuZWxzKCksMD5lLmFjdGl2ZSYmKGUuYWN0aXZlKz10aGlzLmhlYWRlcnMubGVuZ3RoKSx0aGlzLl9yZWZyZXNoKCl9LF9nZXRDcmVhdGVFdmVudERhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aGVhZGVyOnRoaXMuYWN0aXZlLHBhbmVsOnRoaXMuYWN0aXZlLmxlbmd0aD90aGlzLmFjdGl2ZS5uZXh0KCk6dCgpfX0sX2NyZWF0ZUljb25zOmZ1bmN0aW9uKCl7dmFyIGUsaSxzPXRoaXMub3B0aW9ucy5pY29ucztzJiYoZT10KCI8c3Bhbj4iKSx0aGlzLl9hZGRDbGFzcyhlLCJ1aS1hY2NvcmRpb24taGVhZGVyLWljb24iLCJ1aS1pY29uICIrcy5oZWFkZXIpLGUucHJlcGVuZFRvKHRoaXMuaGVhZGVycyksaT10aGlzLmFjdGl2ZS5jaGlsZHJlbigiLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvbiIpLHRoaXMuX3JlbW92ZUNsYXNzKGkscy5oZWFkZXIpLl9hZGRDbGFzcyhpLG51bGwscy5hY3RpdmVIZWFkZXIpLl9hZGRDbGFzcyh0aGlzLmhlYWRlcnMsInVpLWFjY29yZGlvbi1pY29ucyIpKX0sX2Rlc3Ryb3lJY29uczpmdW5jdGlvbigpe3RoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaGVhZGVycywidWktYWNjb3JkaW9uLWljb25zIiksdGhpcy5oZWFkZXJzLmNoaWxkcmVuKCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uIikucmVtb3ZlKCl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dmFyIHQ7dGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoInJvbGUiKSx0aGlzLmhlYWRlcnMucmVtb3ZlQXR0cigicm9sZSBhcmlhLWV4cGFuZGVkIGFyaWEtc2VsZWN0ZWQgYXJpYS1jb250cm9scyB0YWJJbmRleCIpLnJlbW92ZVVuaXF1ZUlkKCksdGhpcy5fZGVzdHJveUljb25zKCksdD10aGlzLmhlYWRlcnMubmV4dCgpLmNzcygiZGlzcGxheSIsIiIpLnJlbW92ZUF0dHIoInJvbGUgYXJpYS1oaWRkZW4gYXJpYS1sYWJlbGxlZGJ5IikucmVtb3ZlVW5pcXVlSWQoKSwiY29udGVudCIhPT10aGlzLm9wdGlvbnMuaGVpZ2h0U3R5bGUmJnQuY3NzKCJoZWlnaHQiLCIiKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe3JldHVybiJhY3RpdmUiPT09dD8odGhpcy5fYWN0aXZhdGUoZSksdm9pZCAwKTooImV2ZW50Ij09PXQmJih0aGlzLm9wdGlvbnMuZXZlbnQmJnRoaXMuX29mZih0aGlzLmhlYWRlcnMsdGhpcy5vcHRpb25zLmV2ZW50KSx0aGlzLl9zZXR1cEV2ZW50cyhlKSksdGhpcy5fc3VwZXIodCxlKSwiY29sbGFwc2libGUiIT09dHx8ZXx8dGhpcy5vcHRpb25zLmFjdGl2ZSE9PSExfHx0aGlzLl9hY3RpdmF0ZSgwKSwiaWNvbnMiPT09dCYmKHRoaXMuX2Rlc3Ryb3lJY29ucygpLGUmJnRoaXMuX2NyZWF0ZUljb25zKCkpLHZvaWQgMCl9LF9zZXRPcHRpb25EaXNhYmxlZDpmdW5jdGlvbih0KXt0aGlzLl9zdXBlcih0KSx0aGlzLmVsZW1lbnQuYXR0cigiYXJpYS1kaXNhYmxlZCIsdCksdGhpcy5fdG9nZ2xlQ2xhc3MobnVsbCwidWktc3RhdGUtZGlzYWJsZWQiLCEhdCksdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy5oZWFkZXJzLmFkZCh0aGlzLmhlYWRlcnMubmV4dCgpKSxudWxsLCJ1aS1zdGF0ZS1kaXNhYmxlZCIsISF0KX0sX2tleWRvd246ZnVuY3Rpb24oZSl7aWYoIWUuYWx0S2V5JiYhZS5jdHJsS2V5KXt2YXIgaT10LnVpLmtleUNvZGUscz10aGlzLmhlYWRlcnMubGVuZ3RoLG49dGhpcy5oZWFkZXJzLmluZGV4KGUudGFyZ2V0KSxvPSExO3N3aXRjaChlLmtleUNvZGUpe2Nhc2UgaS5SSUdIVDpjYXNlIGkuRE9XTjpvPXRoaXMuaGVhZGVyc1sobisxKSVzXTticmVhaztjYXNlIGkuTEVGVDpjYXNlIGkuVVA6bz10aGlzLmhlYWRlcnNbKG4tMStzKSVzXTticmVhaztjYXNlIGkuU1BBQ0U6Y2FzZSBpLkVOVEVSOnRoaXMuX2V2ZW50SGFuZGxlcihlKTticmVhaztjYXNlIGkuSE9NRTpvPXRoaXMuaGVhZGVyc1swXTticmVhaztjYXNlIGkuRU5EOm89dGhpcy5oZWFkZXJzW3MtMV19byYmKHQoZS50YXJnZXQpLmF0dHIoInRhYkluZGV4IiwtMSksdChvKS5hdHRyKCJ0YWJJbmRleCIsMCksdChvKS50cmlnZ2VyKCJmb2N1cyIpLGUucHJldmVudERlZmF1bHQoKSl9fSxfcGFuZWxLZXlEb3duOmZ1bmN0aW9uKGUpe2Uua2V5Q29kZT09PXQudWkua2V5Q29kZS5VUCYmZS5jdHJsS2V5JiZ0KGUuY3VycmVudFRhcmdldCkucHJldigpLnRyaWdnZXIoImZvY3VzIil9LHJlZnJlc2g6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnM7dGhpcy5fcHJvY2Vzc1BhbmVscygpLGUuYWN0aXZlPT09ITEmJmUuY29sbGFwc2libGU9PT0hMHx8IXRoaXMuaGVhZGVycy5sZW5ndGg/KGUuYWN0aXZlPSExLHRoaXMuYWN0aXZlPXQoKSk6ZS5hY3RpdmU9PT0hMT90aGlzLl9hY3RpdmF0ZSgwKTp0aGlzLmFjdGl2ZS5sZW5ndGgmJiF0LmNvbnRhaW5zKHRoaXMuZWxlbWVudFswXSx0aGlzLmFjdGl2ZVswXSk/dGhpcy5oZWFkZXJzLmxlbmd0aD09PXRoaXMuaGVhZGVycy5maW5kKCIudWktc3RhdGUtZGlzYWJsZWQiKS5sZW5ndGg/KGUuYWN0aXZlPSExLHRoaXMuYWN0aXZlPXQoKSk6dGhpcy5fYWN0aXZhdGUoTWF0aC5tYXgoMCxlLmFjdGl2ZS0xKSk6ZS5hY3RpdmU9dGhpcy5oZWFkZXJzLmluZGV4KHRoaXMuYWN0aXZlKSx0aGlzLl9kZXN0cm95SWNvbnMoKSx0aGlzLl9yZWZyZXNoKCl9LF9wcm9jZXNzUGFuZWxzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5oZWFkZXJzLGU9dGhpcy5wYW5lbHM7dGhpcy5oZWFkZXJzPXRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5oZWFkZXIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaGVhZGVycywidWktYWNjb3JkaW9uLWhlYWRlciB1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZCIsInVpLXN0YXRlLWRlZmF1bHQiKSx0aGlzLnBhbmVscz10aGlzLmhlYWRlcnMubmV4dCgpLmZpbHRlcigiOm5vdCgudWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlKSIpLmhpZGUoKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnBhbmVscywidWktYWNjb3JkaW9uLWNvbnRlbnQiLCJ1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnQiKSxlJiYodGhpcy5fb2ZmKHQubm90KHRoaXMuaGVhZGVycykpLHRoaXMuX29mZihlLm5vdCh0aGlzLnBhbmVscykpKX0sX3JlZnJlc2g6ZnVuY3Rpb24oKXt2YXIgZSxpPXRoaXMub3B0aW9ucyxzPWkuaGVpZ2h0U3R5bGUsbj10aGlzLmVsZW1lbnQucGFyZW50KCk7dGhpcy5hY3RpdmU9dGhpcy5fZmluZEFjdGl2ZShpLmFjdGl2ZSksdGhpcy5fYWRkQ2xhc3ModGhpcy5hY3RpdmUsInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIiwidWktc3RhdGUtYWN0aXZlIikuX3JlbW92ZUNsYXNzKHRoaXMuYWN0aXZlLCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZCIpLHRoaXMuX2FkZENsYXNzKHRoaXMuYWN0aXZlLm5leHQoKSwidWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlIiksdGhpcy5hY3RpdmUubmV4dCgpLnNob3coKSx0aGlzLmhlYWRlcnMuYXR0cigicm9sZSIsInRhYiIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpLGk9ZS51bmlxdWVJZCgpLmF0dHIoImlkIikscz1lLm5leHQoKSxuPXMudW5pcXVlSWQoKS5hdHRyKCJpZCIpO2UuYXR0cigiYXJpYS1jb250cm9scyIsbikscy5hdHRyKCJhcmlhLWxhYmVsbGVkYnkiLGkpfSkubmV4dCgpLmF0dHIoInJvbGUiLCJ0YWJwYW5lbCIpLHRoaXMuaGVhZGVycy5ub3QodGhpcy5hY3RpdmUpLmF0dHIoeyJhcmlhLXNlbGVjdGVkIjoiZmFsc2UiLCJhcmlhLWV4cGFuZGVkIjoiZmFsc2UiLHRhYkluZGV4Oi0xfSkubmV4dCgpLmF0dHIoeyJhcmlhLWhpZGRlbiI6InRydWUifSkuaGlkZSgpLHRoaXMuYWN0aXZlLmxlbmd0aD90aGlzLmFjdGl2ZS5hdHRyKHsiYXJpYS1zZWxlY3RlZCI6InRydWUiLCJhcmlhLWV4cGFuZGVkIjoidHJ1ZSIsdGFiSW5kZXg6MH0pLm5leHQoKS5hdHRyKHsiYXJpYS1oaWRkZW4iOiJmYWxzZSJ9KTp0aGlzLmhlYWRlcnMuZXEoMCkuYXR0cigidGFiSW5kZXgiLDApLHRoaXMuX2NyZWF0ZUljb25zKCksdGhpcy5fc2V0dXBFdmVudHMoaS5ldmVudCksImZpbGwiPT09cz8oZT1uLmhlaWdodCgpLHRoaXMuZWxlbWVudC5zaWJsaW5ncygiOnZpc2libGUiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9dCh0aGlzKSxzPWkuY3NzKCJwb3NpdGlvbiIpOyJhYnNvbHV0ZSIhPT1zJiYiZml4ZWQiIT09cyYmKGUtPWkub3V0ZXJIZWlnaHQoITApKX0pLHRoaXMuaGVhZGVycy5lYWNoKGZ1bmN0aW9uKCl7ZS09dCh0aGlzKS5vdXRlckhlaWdodCghMCl9KSx0aGlzLmhlYWRlcnMubmV4dCgpLmVhY2goZnVuY3Rpb24oKXt0KHRoaXMpLmhlaWdodChNYXRoLm1heCgwLGUtdCh0aGlzKS5pbm5lckhlaWdodCgpK3QodGhpcykuaGVpZ2h0KCkpKX0pLmNzcygib3ZlcmZsb3ciLCJhdXRvIikpOiJhdXRvIj09PXMmJihlPTAsdGhpcy5oZWFkZXJzLm5leHQoKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9dCh0aGlzKS5pcygiOnZpc2libGUiKTtpfHx0KHRoaXMpLnNob3coKSxlPU1hdGgubWF4KGUsdCh0aGlzKS5jc3MoImhlaWdodCIsIiIpLmhlaWdodCgpKSxpfHx0KHRoaXMpLmhpZGUoKX0pLmhlaWdodChlKSl9LF9hY3RpdmF0ZTpmdW5jdGlvbihlKXt2YXIgaT10aGlzLl9maW5kQWN0aXZlKGUpWzBdO2khPT10aGlzLmFjdGl2ZVswXSYmKGk9aXx8dGhpcy5hY3RpdmVbMF0sdGhpcy5fZXZlbnRIYW5kbGVyKHt0YXJnZXQ6aSxjdXJyZW50VGFyZ2V0OmkscHJldmVudERlZmF1bHQ6dC5ub29wfSkpfSxfZmluZEFjdGl2ZTpmdW5jdGlvbihlKXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIGU/dGhpcy5oZWFkZXJzLmVxKGUpOnQoKX0sX3NldHVwRXZlbnRzOmZ1bmN0aW9uKGUpe3ZhciBpPXtrZXlkb3duOiJfa2V5ZG93biJ9O2UmJnQuZWFjaChlLnNwbGl0KCIgIiksZnVuY3Rpb24odCxlKXtpW2VdPSJfZXZlbnRIYW5kbGVyIn0pLHRoaXMuX29mZih0aGlzLmhlYWRlcnMuYWRkKHRoaXMuaGVhZGVycy5uZXh0KCkpKSx0aGlzLl9vbih0aGlzLmhlYWRlcnMsaSksdGhpcy5fb24odGhpcy5oZWFkZXJzLm5leHQoKSx7a2V5ZG93bjoiX3BhbmVsS2V5RG93biJ9KSx0aGlzLl9ob3ZlcmFibGUodGhpcy5oZWFkZXJzKSx0aGlzLl9mb2N1c2FibGUodGhpcy5oZWFkZXJzKX0sX2V2ZW50SGFuZGxlcjpmdW5jdGlvbihlKXt2YXIgaSxzLG49dGhpcy5vcHRpb25zLG89dGhpcy5hY3RpdmUsYT10KGUuY3VycmVudFRhcmdldCkscj1hWzBdPT09b1swXSxoPXImJm4uY29sbGFwc2libGUsbD1oP3QoKTphLm5leHQoKSxjPW8ubmV4dCgpLHU9e29sZEhlYWRlcjpvLG9sZFBhbmVsOmMsbmV3SGVhZGVyOmg/dCgpOmEsbmV3UGFuZWw6bH07ZS5wcmV2ZW50RGVmYXVsdCgpLHImJiFuLmNvbGxhcHNpYmxlfHx0aGlzLl90cmlnZ2VyKCJiZWZvcmVBY3RpdmF0ZSIsZSx1KT09PSExfHwobi5hY3RpdmU9aD8hMTp0aGlzLmhlYWRlcnMuaW5kZXgoYSksdGhpcy5hY3RpdmU9cj90KCk6YSx0aGlzLl90b2dnbGUodSksdGhpcy5fcmVtb3ZlQ2xhc3MobywidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmUiLCJ1aS1zdGF0ZS1hY3RpdmUiKSxuLmljb25zJiYoaT1vLmNoaWxkcmVuKCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uIiksdGhpcy5fcmVtb3ZlQ2xhc3MoaSxudWxsLG4uaWNvbnMuYWN0aXZlSGVhZGVyKS5fYWRkQ2xhc3MoaSxudWxsLG4uaWNvbnMuaGVhZGVyKSkscnx8KHRoaXMuX3JlbW92ZUNsYXNzKGEsInVpLWFjY29yZGlvbi1oZWFkZXItY29sbGFwc2VkIikuX2FkZENsYXNzKGEsInVpLWFjY29yZGlvbi1oZWFkZXItYWN0aXZlIiwidWktc3RhdGUtYWN0aXZlIiksbi5pY29ucyYmKHM9YS5jaGlsZHJlbigiLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvbiIpLHRoaXMuX3JlbW92ZUNsYXNzKHMsbnVsbCxuLmljb25zLmhlYWRlcikuX2FkZENsYXNzKHMsbnVsbCxuLmljb25zLmFjdGl2ZUhlYWRlcikpLHRoaXMuX2FkZENsYXNzKGEubmV4dCgpLCJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUiKSkpfSxfdG9nZ2xlOmZ1bmN0aW9uKGUpe3ZhciBpPWUubmV3UGFuZWwscz10aGlzLnByZXZTaG93Lmxlbmd0aD90aGlzLnByZXZTaG93OmUub2xkUGFuZWw7dGhpcy5wcmV2U2hvdy5hZGQodGhpcy5wcmV2SGlkZSkuc3RvcCghMCwhMCksdGhpcy5wcmV2U2hvdz1pLHRoaXMucHJldkhpZGU9cyx0aGlzLm9wdGlvbnMuYW5pbWF0ZT90aGlzLl9hbmltYXRlKGkscyxlKToocy5oaWRlKCksaS5zaG93KCksdGhpcy5fdG9nZ2xlQ29tcGxldGUoZSkpLHMuYXR0cih7ImFyaWEtaGlkZGVuIjoidHJ1ZSJ9KSxzLnByZXYoKS5hdHRyKHsiYXJpYS1zZWxlY3RlZCI6ImZhbHNlIiwiYXJpYS1leHBhbmRlZCI6ImZhbHNlIn0pLGkubGVuZ3RoJiZzLmxlbmd0aD9zLnByZXYoKS5hdHRyKHt0YWJJbmRleDotMSwiYXJpYS1leHBhbmRlZCI6ImZhbHNlIn0pOmkubGVuZ3RoJiZ0aGlzLmhlYWRlcnMuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1wYXJzZUludCh0KHRoaXMpLmF0dHIoInRhYkluZGV4IiksMTApfSkuYXR0cigidGFiSW5kZXgiLC0xKSxpLmF0dHIoImFyaWEtaGlkZGVuIiwiZmFsc2UiKS5wcmV2KCkuYXR0cih7ImFyaWEtc2VsZWN0ZWQiOiJ0cnVlIiwiYXJpYS1leHBhbmRlZCI6InRydWUiLHRhYkluZGV4OjB9KX0sX2FuaW1hdGU6ZnVuY3Rpb24odCxlLGkpe3ZhciBzLG4sbyxhPXRoaXMscj0wLGg9dC5jc3MoImJveC1zaXppbmciKSxsPXQubGVuZ3RoJiYoIWUubGVuZ3RofHx0LmluZGV4KCk8ZS5pbmRleCgpKSxjPXRoaXMub3B0aW9ucy5hbmltYXRlfHx7fSx1PWwmJmMuZG93bnx8YyxkPWZ1bmN0aW9uKCl7YS5fdG9nZ2xlQ29tcGxldGUoaSl9O3JldHVybiJudW1iZXIiPT10eXBlb2YgdSYmKG89dSksInN0cmluZyI9PXR5cGVvZiB1JiYobj11KSxuPW58fHUuZWFzaW5nfHxjLmVhc2luZyxvPW98fHUuZHVyYXRpb258fGMuZHVyYXRpb24sZS5sZW5ndGg/dC5sZW5ndGg/KHM9dC5zaG93KCkub3V0ZXJIZWlnaHQoKSxlLmFuaW1hdGUodGhpcy5oaWRlUHJvcHMse2R1cmF0aW9uOm8sZWFzaW5nOm4sc3RlcDpmdW5jdGlvbih0LGUpe2Uubm93PU1hdGgucm91bmQodCl9fSksdC5oaWRlKCkuYW5pbWF0ZSh0aGlzLnNob3dQcm9wcyx7ZHVyYXRpb246byxlYXNpbmc6bixjb21wbGV0ZTpkLHN0ZXA6ZnVuY3Rpb24odCxpKXtpLm5vdz1NYXRoLnJvdW5kKHQpLCJoZWlnaHQiIT09aS5wcm9wPyJjb250ZW50LWJveCI9PT1oJiYocis9aS5ub3cpOiJjb250ZW50IiE9PWEub3B0aW9ucy5oZWlnaHRTdHlsZSYmKGkubm93PU1hdGgucm91bmQocy1lLm91dGVySGVpZ2h0KCktcikscj0wKX19KSx2b2lkIDApOmUuYW5pbWF0ZSh0aGlzLmhpZGVQcm9wcyxvLG4sZCk6dC5hbmltYXRlKHRoaXMuc2hvd1Byb3BzLG8sbixkKX0sX3RvZ2dsZUNvbXBsZXRlOmZ1bmN0aW9uKHQpe3ZhciBlPXQub2xkUGFuZWwsaT1lLnByZXYoKTt0aGlzLl9yZW1vdmVDbGFzcyhlLCJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUiKSx0aGlzLl9yZW1vdmVDbGFzcyhpLCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZSIpLl9hZGRDbGFzcyhpLCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZCIpLGUubGVuZ3RoJiYoZS5wYXJlbnQoKVswXS5jbGFzc05hbWU9ZS5wYXJlbnQoKVswXS5jbGFzc05hbWUpLHRoaXMuX3RyaWdnZXIoImFjdGl2YXRlIixudWxsLHQpfX0pLHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGU7dHJ5e2U9dC5hY3RpdmVFbGVtZW50fWNhdGNoKGkpe2U9dC5ib2R5fXJldHVybiBlfHwoZT10LmJvZHkpLGUubm9kZU5hbWV8fChlPXQuYm9keSksZX0sdC53aWRnZXQoInVpLm1lbnUiLHt2ZXJzaW9uOiIxLjEyLjEiLGRlZmF1bHRFbGVtZW50OiI8dWw+IixkZWxheTozMDAsb3B0aW9uczp7aWNvbnM6e3N1Ym1lbnU6InVpLWljb24tY2FyZXQtMS1lIn0saXRlbXM6Ij4gKiIsbWVudXM6InVsIixwb3NpdGlvbjp7bXk6ImxlZnQgdG9wIixhdDoicmlnaHQgdG9wIn0scm9sZToibWVudSIsYmx1cjpudWxsLGZvY3VzOm51bGwsc2VsZWN0Om51bGx9LF9jcmVhdGU6ZnVuY3Rpb24oKXt0aGlzLmFjdGl2ZU1lbnU9dGhpcy5lbGVtZW50LHRoaXMubW91c2VIYW5kbGVkPSExLHRoaXMuZWxlbWVudC51bmlxdWVJZCgpLmF0dHIoe3JvbGU6dGhpcy5vcHRpb25zLnJvbGUsdGFiSW5kZXg6MH0pLHRoaXMuX2FkZENsYXNzKCJ1aS1tZW51IiwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IiksdGhpcy5fb24oeyJtb3VzZWRvd24gLnVpLW1lbnUtaXRlbSI6ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpfSwiY2xpY2sgLnVpLW1lbnUtaXRlbSI6ZnVuY3Rpb24oZSl7dmFyIGk9dChlLnRhcmdldCkscz10KHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSkpOyF0aGlzLm1vdXNlSGFuZGxlZCYmaS5ub3QoIi51aS1zdGF0ZS1kaXNhYmxlZCIpLmxlbmd0aCYmKHRoaXMuc2VsZWN0KGUpLGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKXx8KHRoaXMubW91c2VIYW5kbGVkPSEwKSxpLmhhcygiLnVpLW1lbnUiKS5sZW5ndGg/dGhpcy5leHBhbmQoZSk6IXRoaXMuZWxlbWVudC5pcygiOmZvY3VzIikmJnMuY2xvc2VzdCgiLnVpLW1lbnUiKS5sZW5ndGgmJih0aGlzLmVsZW1lbnQudHJpZ2dlcigiZm9jdXMiLFshMF0pLHRoaXMuYWN0aXZlJiYxPT09dGhpcy5hY3RpdmUucGFyZW50cygiLnVpLW1lbnUiKS5sZW5ndGgmJmNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSkpfSwibW91c2VlbnRlciAudWktbWVudS1pdGVtIjpmdW5jdGlvbihlKXtpZighdGhpcy5wcmV2aW91c0ZpbHRlcil7dmFyIGk9dChlLnRhcmdldCkuY2xvc2VzdCgiLnVpLW1lbnUtaXRlbSIpLHM9dChlLmN1cnJlbnRUYXJnZXQpO2lbMF09PT1zWzBdJiYodGhpcy5fcmVtb3ZlQ2xhc3Mocy5zaWJsaW5ncygpLmNoaWxkcmVuKCIudWktc3RhdGUtYWN0aXZlIiksbnVsbCwidWktc3RhdGUtYWN0aXZlIiksdGhpcy5mb2N1cyhlLHMpKX19LG1vdXNlbGVhdmU6ImNvbGxhcHNlQWxsIiwibW91c2VsZWF2ZSAudWktbWVudSI6ImNvbGxhcHNlQWxsIixmb2N1czpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuYWN0aXZlfHx0aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpLmVxKDApO2V8fHRoaXMuZm9jdXModCxpKX0sYmx1cjpmdW5jdGlvbihlKXt0aGlzLl9kZWxheShmdW5jdGlvbigpe3ZhciBpPSF0LmNvbnRhaW5zKHRoaXMuZWxlbWVudFswXSx0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pKTtpJiZ0aGlzLmNvbGxhcHNlQWxsKGUpfSl9LGtleWRvd246Il9rZXlkb3duIn0pLHRoaXMucmVmcmVzaCgpLHRoaXMuX29uKHRoaXMuZG9jdW1lbnQse2NsaWNrOmZ1bmN0aW9uKHQpe3RoaXMuX2Nsb3NlT25Eb2N1bWVudENsaWNrKHQpJiZ0aGlzLmNvbGxhcHNlQWxsKHQpLHRoaXMubW91c2VIYW5kbGVkPSExfX0pfSxfZGVzdHJveTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZWxlbWVudC5maW5kKCIudWktbWVudS1pdGVtIikucmVtb3ZlQXR0cigicm9sZSBhcmlhLWRpc2FibGVkIiksaT1lLmNoaWxkcmVuKCIudWktbWVudS1pdGVtLXdyYXBwZXIiKS5yZW1vdmVVbmlxdWVJZCgpLnJlbW92ZUF0dHIoInRhYkluZGV4IHJvbGUgYXJpYS1oYXNwb3B1cCIpO3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnQiKS5maW5kKCIudWktbWVudSIpLmFkZEJhY2soKS5yZW1vdmVBdHRyKCJyb2xlIGFyaWEtbGFiZWxsZWRieSBhcmlhLWV4cGFuZGVkIGFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiSW5kZXgiKS5yZW1vdmVVbmlxdWVJZCgpLnNob3coKSxpLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbigpe3ZhciBlPXQodGhpcyk7ZS5kYXRhKCJ1aS1tZW51LXN1Ym1lbnUtY2FyZXQiKSYmZS5yZW1vdmUoKX0pfSxfa2V5ZG93bjpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbyxhPSEwO3N3aXRjaChlLmtleUNvZGUpe2Nhc2UgdC51aS5rZXlDb2RlLlBBR0VfVVA6dGhpcy5wcmV2aW91c1BhZ2UoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuUEFHRV9ET1dOOnRoaXMubmV4dFBhZ2UoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuSE9NRTp0aGlzLl9tb3ZlKCJmaXJzdCIsImZpcnN0IixlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTkQ6dGhpcy5fbW92ZSgibGFzdCIsImxhc3QiLGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlVQOnRoaXMucHJldmlvdXMoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRE9XTjp0aGlzLm5leHQoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuTEVGVDp0aGlzLmNvbGxhcHNlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlJJR0hUOnRoaXMuYWN0aXZlJiYhdGhpcy5hY3RpdmUuaXMoIi51aS1zdGF0ZS1kaXNhYmxlZCIpJiZ0aGlzLmV4cGFuZChlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTlRFUjpjYXNlIHQudWkua2V5Q29kZS5TUEFDRTp0aGlzLl9hY3RpdmF0ZShlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FU0NBUEU6dGhpcy5jb2xsYXBzZShlKTticmVhaztkZWZhdWx0OmE9ITEscz10aGlzLnByZXZpb3VzRmlsdGVyfHwiIixvPSExLG49ZS5rZXlDb2RlPj05NiYmMTA1Pj1lLmtleUNvZGU/IiIrKGUua2V5Q29kZS05Nik6U3RyaW5nLmZyb21DaGFyQ29kZShlLmtleUNvZGUpLGNsZWFyVGltZW91dCh0aGlzLmZpbHRlclRpbWVyKSxuPT09cz9vPSEwOm49cytuLGk9dGhpcy5fZmlsdGVyTWVudUl0ZW1zKG4pLGk9byYmLTEhPT1pLmluZGV4KHRoaXMuYWN0aXZlLm5leHQoKSk/dGhpcy5hY3RpdmUubmV4dEFsbCgiLnVpLW1lbnUtaXRlbSIpOmksaS5sZW5ndGh8fChuPVN0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKSxpPXRoaXMuX2ZpbHRlck1lbnVJdGVtcyhuKSksaS5sZW5ndGg/KHRoaXMuZm9jdXMoZSxpKSx0aGlzLnByZXZpb3VzRmlsdGVyPW4sdGhpcy5maWx0ZXJUaW1lcj10aGlzLl9kZWxheShmdW5jdGlvbigpe2RlbGV0ZSB0aGlzLnByZXZpb3VzRmlsdGVyfSwxZTMpKTpkZWxldGUgdGhpcy5wcmV2aW91c0ZpbHRlcn1hJiZlLnByZXZlbnREZWZhdWx0KCl9LF9hY3RpdmF0ZTpmdW5jdGlvbih0KXt0aGlzLmFjdGl2ZSYmIXRoaXMuYWN0aXZlLmlzKCIudWktc3RhdGUtZGlzYWJsZWQiKSYmKHRoaXMuYWN0aXZlLmNoaWxkcmVuKCJbYXJpYS1oYXNwb3B1cD0ndHJ1ZSddIikubGVuZ3RoP3RoaXMuZXhwYW5kKHQpOnRoaXMuc2VsZWN0KHQpKX0scmVmcmVzaDpmdW5jdGlvbigpe3ZhciBlLGkscyxuLG8sYT10aGlzLHI9dGhpcy5vcHRpb25zLmljb25zLnN1Ym1lbnUsaD10aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMubWVudXMpO3RoaXMuX3RvZ2dsZUNsYXNzKCJ1aS1tZW51LWljb25zIixudWxsLCEhdGhpcy5lbGVtZW50LmZpbmQoIi51aS1pY29uIikubGVuZ3RoKSxzPWguZmlsdGVyKCI6bm90KC51aS1tZW51KSIpLmhpZGUoKS5hdHRyKHtyb2xlOnRoaXMub3B0aW9ucy5yb2xlLCJhcmlhLWhpZGRlbiI6InRydWUiLCJhcmlhLWV4cGFuZGVkIjoiZmFsc2UifSkuZWFjaChmdW5jdGlvbigpe3ZhciBlPXQodGhpcyksaT1lLnByZXYoKSxzPXQoIjxzcGFuPiIpLmRhdGEoInVpLW1lbnUtc3VibWVudS1jYXJldCIsITApO2EuX2FkZENsYXNzKHMsInVpLW1lbnUtaWNvbiIsInVpLWljb24gIityKSxpLmF0dHIoImFyaWEtaGFzcG9wdXAiLCJ0cnVlIikucHJlcGVuZChzKSxlLmF0dHIoImFyaWEtbGFiZWxsZWRieSIsaS5hdHRyKCJpZCIpKX0pLHRoaXMuX2FkZENsYXNzKHMsInVpLW1lbnUiLCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktZnJvbnQiKSxlPWguYWRkKHRoaXMuZWxlbWVudCksaT1lLmZpbmQodGhpcy5vcHRpb25zLml0ZW1zKSxpLm5vdCgiLnVpLW1lbnUtaXRlbSIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO2EuX2lzRGl2aWRlcihlKSYmYS5fYWRkQ2xhc3MoZSwidWktbWVudS1kaXZpZGVyIiwidWktd2lkZ2V0LWNvbnRlbnQiKX0pLG49aS5ub3QoIi51aS1tZW51LWl0ZW0sIC51aS1tZW51LWRpdmlkZXIiKSxvPW4uY2hpbGRyZW4oKS5ub3QoIi51aS1tZW51IikudW5pcXVlSWQoKS5hdHRyKHt0YWJJbmRleDotMSxyb2xlOnRoaXMuX2l0ZW1Sb2xlKCl9KSx0aGlzLl9hZGRDbGFzcyhuLCJ1aS1tZW51LWl0ZW0iKS5fYWRkQ2xhc3MobywidWktbWVudS1pdGVtLXdyYXBwZXIiKSxpLmZpbHRlcigiLnVpLXN0YXRlLWRpc2FibGVkIikuYXR0cigiYXJpYS1kaXNhYmxlZCIsInRydWUiKSx0aGlzLmFjdGl2ZSYmIXQuY29udGFpbnModGhpcy5lbGVtZW50WzBdLHRoaXMuYWN0aXZlWzBdKSYmdGhpcy5ibHVyKCl9LF9pdGVtUm9sZTpmdW5jdGlvbigpe3JldHVybnttZW51OiJtZW51aXRlbSIsbGlzdGJveDoib3B0aW9uIn1bdGhpcy5vcHRpb25zLnJvbGVdfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7aWYoImljb25zIj09PXQpe3ZhciBpPXRoaXMuZWxlbWVudC5maW5kKCIudWktbWVudS1pY29uIik7dGhpcy5fcmVtb3ZlQ2xhc3MoaSxudWxsLHRoaXMub3B0aW9ucy5pY29ucy5zdWJtZW51KS5fYWRkQ2xhc3MoaSxudWxsLGUuc3VibWVudSl9dGhpcy5fc3VwZXIodCxlKX0sX3NldE9wdGlvbkRpc2FibGVkOmZ1bmN0aW9uKHQpe3RoaXMuX3N1cGVyKHQpLHRoaXMuZWxlbWVudC5hdHRyKCJhcmlhLWRpc2FibGVkIix0KyIiKSx0aGlzLl90b2dnbGVDbGFzcyhudWxsLCJ1aS1zdGF0ZS1kaXNhYmxlZCIsISF0KX0sZm9jdXM6ZnVuY3Rpb24odCxlKXt2YXIgaSxzLG47dGhpcy5ibHVyKHQsdCYmImZvY3VzIj09PXQudHlwZSksdGhpcy5fc2Nyb2xsSW50b1ZpZXcoZSksdGhpcy5hY3RpdmU9ZS5maXJzdCgpLHM9dGhpcy5hY3RpdmUuY2hpbGRyZW4oIi51aS1tZW51LWl0ZW0td3JhcHBlciIpLHRoaXMuX2FkZENsYXNzKHMsbnVsbCwidWktc3RhdGUtYWN0aXZlIiksdGhpcy5vcHRpb25zLnJvbGUmJnRoaXMuZWxlbWVudC5hdHRyKCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnQiLHMuYXR0cigiaWQiKSksbj10aGlzLmFjdGl2ZS5wYXJlbnQoKS5jbG9zZXN0KCIudWktbWVudS1pdGVtIikuY2hpbGRyZW4oIi51aS1tZW51LWl0ZW0td3JhcHBlciIpLHRoaXMuX2FkZENsYXNzKG4sbnVsbCwidWktc3RhdGUtYWN0aXZlIiksdCYmImtleWRvd24iPT09dC50eXBlP3RoaXMuX2Nsb3NlKCk6dGhpcy50aW1lcj10aGlzLl9kZWxheShmdW5jdGlvbigpe3RoaXMuX2Nsb3NlKCl9LHRoaXMuZGVsYXkpLGk9ZS5jaGlsZHJlbigiLnVpLW1lbnUiKSxpLmxlbmd0aCYmdCYmL15tb3VzZS8udGVzdCh0LnR5cGUpJiZ0aGlzLl9zdGFydE9wZW5pbmcoaSksdGhpcy5hY3RpdmVNZW51PWUucGFyZW50KCksdGhpcy5fdHJpZ2dlcigiZm9jdXMiLHQse2l0ZW06ZX0pfSxfc2Nyb2xsSW50b1ZpZXc6ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG8sYSxyO3RoaXMuX2hhc1Njcm9sbCgpJiYoaT1wYXJzZUZsb2F0KHQuY3NzKHRoaXMuYWN0aXZlTWVudVswXSwiYm9yZGVyVG9wV2lkdGgiKSl8fDAscz1wYXJzZUZsb2F0KHQuY3NzKHRoaXMuYWN0aXZlTWVudVswXSwicGFkZGluZ1RvcCIpKXx8MCxuPWUub2Zmc2V0KCkudG9wLXRoaXMuYWN0aXZlTWVudS5vZmZzZXQoKS50b3AtaS1zLG89dGhpcy5hY3RpdmVNZW51LnNjcm9sbFRvcCgpLGE9dGhpcy5hY3RpdmVNZW51LmhlaWdodCgpLHI9ZS5vdXRlckhlaWdodCgpLDA+bj90aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKG8rbik6bityPmEmJnRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AobytuLWErcikpfSxibHVyOmZ1bmN0aW9uKHQsZSl7ZXx8Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLHRoaXMuYWN0aXZlJiYodGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5hY3RpdmUuY2hpbGRyZW4oIi51aS1tZW51LWl0ZW0td3JhcHBlciIpLG51bGwsInVpLXN0YXRlLWFjdGl2ZSIpLHRoaXMuX3RyaWdnZXIoImJsdXIiLHQse2l0ZW06dGhpcy5hY3RpdmV9KSx0aGlzLmFjdGl2ZT1udWxsKX0sX3N0YXJ0T3BlbmluZzpmdW5jdGlvbih0KXtjbGVhclRpbWVvdXQodGhpcy50aW1lciksInRydWUiPT09dC5hdHRyKCJhcmlhLWhpZGRlbiIpJiYodGhpcy50aW1lcj10aGlzLl9kZWxheShmdW5jdGlvbigpe3RoaXMuX2Nsb3NlKCksdGhpcy5fb3Blbih0KX0sdGhpcy5kZWxheSkpfSxfb3BlbjpmdW5jdGlvbihlKXt2YXIgaT10LmV4dGVuZCh7b2Y6dGhpcy5hY3RpdmV9LHRoaXMub3B0aW9ucy5wb3NpdGlvbik7Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLHRoaXMuZWxlbWVudC5maW5kKCIudWktbWVudSIpLm5vdChlLnBhcmVudHMoIi51aS1tZW51IikpLmhpZGUoKS5hdHRyKCJhcmlhLWhpZGRlbiIsInRydWUiKSxlLnNob3coKS5yZW1vdmVBdHRyKCJhcmlhLWhpZGRlbiIpLmF0dHIoImFyaWEtZXhwYW5kZWQiLCJ0cnVlIikucG9zaXRpb24oaSl9LGNvbGxhcHNlQWxsOmZ1bmN0aW9uKGUsaSl7Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLHRoaXMudGltZXI9dGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt2YXIgcz1pP3RoaXMuZWxlbWVudDp0KGUmJmUudGFyZ2V0KS5jbG9zZXN0KHRoaXMuZWxlbWVudC5maW5kKCIudWktbWVudSIpKTtzLmxlbmd0aHx8KHM9dGhpcy5lbGVtZW50KSx0aGlzLl9jbG9zZShzKSx0aGlzLmJsdXIoZSksdGhpcy5fcmVtb3ZlQ2xhc3Mocy5maW5kKCIudWktc3RhdGUtYWN0aXZlIiksbnVsbCwidWktc3RhdGUtYWN0aXZlIiksdGhpcy5hY3RpdmVNZW51PXN9LHRoaXMuZGVsYXkpfSxfY2xvc2U6ZnVuY3Rpb24odCl7dHx8KHQ9dGhpcy5hY3RpdmU/dGhpcy5hY3RpdmUucGFyZW50KCk6dGhpcy5lbGVtZW50KSx0LmZpbmQoIi51aS1tZW51IikuaGlkZSgpLmF0dHIoImFyaWEtaGlkZGVuIiwidHJ1ZSIpLmF0dHIoImFyaWEtZXhwYW5kZWQiLCJmYWxzZSIpfSxfY2xvc2VPbkRvY3VtZW50Q2xpY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIXQoZS50YXJnZXQpLmNsb3Nlc3QoIi51aS1tZW51IikubGVuZ3RofSxfaXNEaXZpZGVyOmZ1bmN0aW9uKHQpe3JldHVybiEvW15cLVx1MjAxNFx1MjAxM1xzXS8udGVzdCh0LnRleHQoKSl9LGNvbGxhcHNlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYWN0aXZlJiZ0aGlzLmFjdGl2ZS5wYXJlbnQoKS5jbG9zZXN0KCIudWktbWVudS1pdGVtIix0aGlzLmVsZW1lbnQpO2UmJmUubGVuZ3RoJiYodGhpcy5fY2xvc2UoKSx0aGlzLmZvY3VzKHQsZSkpfSxleHBhbmQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5hY3RpdmUmJnRoaXMuYWN0aXZlLmNoaWxkcmVuKCIudWktbWVudSAiKS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcykuZmlyc3QoKTtlJiZlLmxlbmd0aCYmKHRoaXMuX29wZW4oZS5wYXJlbnQoKSksdGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt0aGlzLmZvY3VzKHQsZSl9KSl9LG5leHQ6ZnVuY3Rpb24odCl7dGhpcy5fbW92ZSgibmV4dCIsImZpcnN0Iix0KX0scHJldmlvdXM6ZnVuY3Rpb24odCl7dGhpcy5fbW92ZSgicHJldiIsImxhc3QiLHQpfSxpc0ZpcnN0SXRlbTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmFjdGl2ZSYmIXRoaXMuYWN0aXZlLnByZXZBbGwoIi51aS1tZW51LWl0ZW0iKS5sZW5ndGh9LGlzTGFzdEl0ZW06ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hY3RpdmUmJiF0aGlzLmFjdGl2ZS5uZXh0QWxsKCIudWktbWVudS1pdGVtIikubGVuZ3RofSxfbW92ZTpmdW5jdGlvbih0LGUsaSl7dmFyIHM7dGhpcy5hY3RpdmUmJihzPSJmaXJzdCI9PT10fHwibGFzdCI9PT10P3RoaXMuYWN0aXZlWyJmaXJzdCI9PT10PyJwcmV2QWxsIjoibmV4dEFsbCJdKCIudWktbWVudS1pdGVtIikuZXEoLTEpOnRoaXMuYWN0aXZlW3QrIkFsbCJdKCIudWktbWVudS1pdGVtIikuZXEoMCkpLHMmJnMubGVuZ3RoJiZ0aGlzLmFjdGl2ZXx8KHM9dGhpcy5hY3RpdmVNZW51LmZpbmQodGhpcy5vcHRpb25zLml0ZW1zKVtlXSgpKSx0aGlzLmZvY3VzKGkscyl9LG5leHRQYWdlOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbjtyZXR1cm4gdGhpcy5hY3RpdmU/KHRoaXMuaXNMYXN0SXRlbSgpfHwodGhpcy5faGFzU2Nyb2xsKCk/KHM9dGhpcy5hY3RpdmUub2Zmc2V0KCkudG9wLG49dGhpcy5lbGVtZW50LmhlaWdodCgpLHRoaXMuYWN0aXZlLm5leHRBbGwoIi51aS1tZW51LWl0ZW0iKS5lYWNoKGZ1bmN0aW9uKCl7cmV0dXJuIGk9dCh0aGlzKSwwPmkub2Zmc2V0KCkudG9wLXMtbn0pLHRoaXMuZm9jdXMoZSxpKSk6dGhpcy5mb2N1cyhlLHRoaXMuYWN0aXZlTWVudS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcylbdGhpcy5hY3RpdmU/Imxhc3QiOiJmaXJzdCJdKCkpKSx2b2lkIDApOih0aGlzLm5leHQoZSksdm9pZCAwKX0scHJldmlvdXNQYWdlOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbjtyZXR1cm4gdGhpcy5hY3RpdmU/KHRoaXMuaXNGaXJzdEl0ZW0oKXx8KHRoaXMuX2hhc1Njcm9sbCgpPyhzPXRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcCxuPXRoaXMuZWxlbWVudC5oZWlnaHQoKSx0aGlzLmFjdGl2ZS5wcmV2QWxsKCIudWktbWVudS1pdGVtIikuZWFjaChmdW5jdGlvbigpe3JldHVybiBpPXQodGhpcyksaS5vZmZzZXQoKS50b3AtcytuPjB9KSx0aGlzLmZvY3VzKGUsaSkpOnRoaXMuZm9jdXMoZSx0aGlzLmFjdGl2ZU1lbnUuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpLmZpcnN0KCkpKSx2b2lkIDApOih0aGlzLm5leHQoZSksdm9pZCAwKX0sX2hhc1Njcm9sbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKTx0aGlzLmVsZW1lbnQucHJvcCgic2Nyb2xsSGVpZ2h0Iil9LHNlbGVjdDpmdW5jdGlvbihlKXt0aGlzLmFjdGl2ZT10aGlzLmFjdGl2ZXx8dChlLnRhcmdldCkuY2xvc2VzdCgiLnVpLW1lbnUtaXRlbSIpO3ZhciBpPXtpdGVtOnRoaXMuYWN0aXZlfTt0aGlzLmFjdGl2ZS5oYXMoIi51aS1tZW51IikubGVuZ3RofHx0aGlzLmNvbGxhcHNlQWxsKGUsITApLHRoaXMuX3RyaWdnZXIoInNlbGVjdCIsZSxpKX0sX2ZpbHRlck1lbnVJdGVtczpmdW5jdGlvbihlKXt2YXIgaT1lLnJlcGxhY2UoL1tcLVxbXF17fSgpKis/LixcXFxeJHwjXHNdL2csIlxcJCYiKSxzPVJlZ0V4cCgiXiIraSwiaSIpO3JldHVybiB0aGlzLmFjdGl2ZU1lbnUuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpLmZpbHRlcigiLnVpLW1lbnUtaXRlbSIpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiBzLnRlc3QodC50cmltKHQodGhpcykuY2hpbGRyZW4oIi51aS1tZW51LWl0ZW0td3JhcHBlciIpLnRleHQoKSkpfSl9fSksdC53aWRnZXQoInVpLmF1dG9jb21wbGV0ZSIse3ZlcnNpb246IjEuMTIuMSIsZGVmYXVsdEVsZW1lbnQ6IjxpbnB1dD4iLG9wdGlvbnM6e2FwcGVuZFRvOm51bGwsYXV0b0ZvY3VzOiExLGRlbGF5OjMwMCxtaW5MZW5ndGg6MSxwb3NpdGlvbjp7bXk6ImxlZnQgdG9wIixhdDoibGVmdCBib3R0b20iLGNvbGxpc2lvbjoibm9uZSJ9LHNvdXJjZTpudWxsLGNoYW5nZTpudWxsLGNsb3NlOm51bGwsZm9jdXM6bnVsbCxvcGVuOm51bGwscmVzcG9uc2U6bnVsbCxzZWFyY2g6bnVsbCxzZWxlY3Q6bnVsbH0scmVxdWVzdEluZGV4OjAscGVuZGluZzowLF9jcmVhdGU6ZnVuY3Rpb24oKXt2YXIgZSxpLHMsbj10aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxvPSJ0ZXh0YXJlYSI9PT1uLGE9ImlucHV0Ij09PW47CnRoaXMuaXNNdWx0aUxpbmU9b3x8IWEmJnRoaXMuX2lzQ29udGVudEVkaXRhYmxlKHRoaXMuZWxlbWVudCksdGhpcy52YWx1ZU1ldGhvZD10aGlzLmVsZW1lbnRbb3x8YT8idmFsIjoidGV4dCJdLHRoaXMuaXNOZXdNZW51PSEwLHRoaXMuX2FkZENsYXNzKCJ1aS1hdXRvY29tcGxldGUtaW5wdXQiKSx0aGlzLmVsZW1lbnQuYXR0cigiYXV0b2NvbXBsZXRlIiwib2ZmIiksdGhpcy5fb24odGhpcy5lbGVtZW50LHtrZXlkb3duOmZ1bmN0aW9uKG4pe2lmKHRoaXMuZWxlbWVudC5wcm9wKCJyZWFkT25seSIpKXJldHVybiBlPSEwLHM9ITAsaT0hMCx2b2lkIDA7ZT0hMSxzPSExLGk9ITE7dmFyIG89dC51aS5rZXlDb2RlO3N3aXRjaChuLmtleUNvZGUpe2Nhc2Ugby5QQUdFX1VQOmU9ITAsdGhpcy5fbW92ZSgicHJldmlvdXNQYWdlIixuKTticmVhaztjYXNlIG8uUEFHRV9ET1dOOmU9ITAsdGhpcy5fbW92ZSgibmV4dFBhZ2UiLG4pO2JyZWFrO2Nhc2Ugby5VUDplPSEwLHRoaXMuX2tleUV2ZW50KCJwcmV2aW91cyIsbik7YnJlYWs7Y2FzZSBvLkRPV046ZT0hMCx0aGlzLl9rZXlFdmVudCgibmV4dCIsbik7YnJlYWs7Y2FzZSBvLkVOVEVSOnRoaXMubWVudS5hY3RpdmUmJihlPSEwLG4ucHJldmVudERlZmF1bHQoKSx0aGlzLm1lbnUuc2VsZWN0KG4pKTticmVhaztjYXNlIG8uVEFCOnRoaXMubWVudS5hY3RpdmUmJnRoaXMubWVudS5zZWxlY3Qobik7YnJlYWs7Y2FzZSBvLkVTQ0FQRTp0aGlzLm1lbnUuZWxlbWVudC5pcygiOnZpc2libGUiKSYmKHRoaXMuaXNNdWx0aUxpbmV8fHRoaXMuX3ZhbHVlKHRoaXMudGVybSksdGhpcy5jbG9zZShuKSxuLnByZXZlbnREZWZhdWx0KCkpO2JyZWFrO2RlZmF1bHQ6aT0hMCx0aGlzLl9zZWFyY2hUaW1lb3V0KG4pfX0sa2V5cHJlc3M6ZnVuY3Rpb24ocyl7aWYoZSlyZXR1cm4gZT0hMSwoIXRoaXMuaXNNdWx0aUxpbmV8fHRoaXMubWVudS5lbGVtZW50LmlzKCI6dmlzaWJsZSIpKSYmcy5wcmV2ZW50RGVmYXVsdCgpLHZvaWQgMDtpZighaSl7dmFyIG49dC51aS5rZXlDb2RlO3N3aXRjaChzLmtleUNvZGUpe2Nhc2Ugbi5QQUdFX1VQOnRoaXMuX21vdmUoInByZXZpb3VzUGFnZSIscyk7YnJlYWs7Y2FzZSBuLlBBR0VfRE9XTjp0aGlzLl9tb3ZlKCJuZXh0UGFnZSIscyk7YnJlYWs7Y2FzZSBuLlVQOnRoaXMuX2tleUV2ZW50KCJwcmV2aW91cyIscyk7YnJlYWs7Y2FzZSBuLkRPV046dGhpcy5fa2V5RXZlbnQoIm5leHQiLHMpfX19LGlucHV0OmZ1bmN0aW9uKHQpe3JldHVybiBzPyhzPSExLHQucHJldmVudERlZmF1bHQoKSx2b2lkIDApOih0aGlzLl9zZWFyY2hUaW1lb3V0KHQpLHZvaWQgMCl9LGZvY3VzOmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3RlZEl0ZW09bnVsbCx0aGlzLnByZXZpb3VzPXRoaXMuX3ZhbHVlKCl9LGJsdXI6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY2FuY2VsQmx1cj8oZGVsZXRlIHRoaXMuY2FuY2VsQmx1cix2b2lkIDApOihjbGVhclRpbWVvdXQodGhpcy5zZWFyY2hpbmcpLHRoaXMuY2xvc2UodCksdGhpcy5fY2hhbmdlKHQpLHZvaWQgMCl9fSksdGhpcy5faW5pdFNvdXJjZSgpLHRoaXMubWVudT10KCI8dWw+IikuYXBwZW5kVG8odGhpcy5fYXBwZW5kVG8oKSkubWVudSh7cm9sZTpudWxsfSkuaGlkZSgpLm1lbnUoImluc3RhbmNlIiksdGhpcy5fYWRkQ2xhc3ModGhpcy5tZW51LmVsZW1lbnQsInVpLWF1dG9jb21wbGV0ZSIsInVpLWZyb250IiksdGhpcy5fb24odGhpcy5tZW51LmVsZW1lbnQse21vdXNlZG93bjpmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksdGhpcy5jYW5jZWxCbHVyPSEwLHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cix0aGlzLmVsZW1lbnRbMF0hPT10LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pJiZ0aGlzLmVsZW1lbnQudHJpZ2dlcigiZm9jdXMiKX0pfSxtZW51Zm9jdXM6ZnVuY3Rpb24oZSxpKXt2YXIgcyxuO3JldHVybiB0aGlzLmlzTmV3TWVudSYmKHRoaXMuaXNOZXdNZW51PSExLGUub3JpZ2luYWxFdmVudCYmL15tb3VzZS8udGVzdChlLm9yaWdpbmFsRXZlbnQudHlwZSkpPyh0aGlzLm1lbnUuYmx1cigpLHRoaXMuZG9jdW1lbnQub25lKCJtb3VzZW1vdmUiLGZ1bmN0aW9uKCl7dChlLnRhcmdldCkudHJpZ2dlcihlLm9yaWdpbmFsRXZlbnQpfSksdm9pZCAwKToobj1pLml0ZW0uZGF0YSgidWktYXV0b2NvbXBsZXRlLWl0ZW0iKSwhMSE9PXRoaXMuX3RyaWdnZXIoImZvY3VzIixlLHtpdGVtOm59KSYmZS5vcmlnaW5hbEV2ZW50JiYvXmtleS8udGVzdChlLm9yaWdpbmFsRXZlbnQudHlwZSkmJnRoaXMuX3ZhbHVlKG4udmFsdWUpLHM9aS5pdGVtLmF0dHIoImFyaWEtbGFiZWwiKXx8bi52YWx1ZSxzJiZ0LnRyaW0ocykubGVuZ3RoJiYodGhpcy5saXZlUmVnaW9uLmNoaWxkcmVuKCkuaGlkZSgpLHQoIjxkaXY+IikudGV4dChzKS5hcHBlbmRUbyh0aGlzLmxpdmVSZWdpb24pKSx2b2lkIDApfSxtZW51c2VsZWN0OmZ1bmN0aW9uKGUsaSl7dmFyIHM9aS5pdGVtLmRhdGEoInVpLWF1dG9jb21wbGV0ZS1pdGVtIiksbj10aGlzLnByZXZpb3VzO3RoaXMuZWxlbWVudFswXSE9PXQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSkmJih0aGlzLmVsZW1lbnQudHJpZ2dlcigiZm9jdXMiKSx0aGlzLnByZXZpb3VzPW4sdGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt0aGlzLnByZXZpb3VzPW4sdGhpcy5zZWxlY3RlZEl0ZW09c30pKSwhMSE9PXRoaXMuX3RyaWdnZXIoInNlbGVjdCIsZSx7aXRlbTpzfSkmJnRoaXMuX3ZhbHVlKHMudmFsdWUpLHRoaXMudGVybT10aGlzLl92YWx1ZSgpLHRoaXMuY2xvc2UoZSksdGhpcy5zZWxlY3RlZEl0ZW09c319KSx0aGlzLmxpdmVSZWdpb249dCgiPGRpdj4iLHtyb2xlOiJzdGF0dXMiLCJhcmlhLWxpdmUiOiJhc3NlcnRpdmUiLCJhcmlhLXJlbGV2YW50IjoiYWRkaXRpb25zIn0pLmFwcGVuZFRvKHRoaXMuZG9jdW1lbnRbMF0uYm9keSksdGhpcy5fYWRkQ2xhc3ModGhpcy5saXZlUmVnaW9uLG51bGwsInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZSIpLHRoaXMuX29uKHRoaXMud2luZG93LHtiZWZvcmV1bmxvYWQ6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cigiYXV0b2NvbXBsZXRlIil9fSl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuc2VhcmNoaW5nKSx0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cigiYXV0b2NvbXBsZXRlIiksdGhpcy5tZW51LmVsZW1lbnQucmVtb3ZlKCksdGhpcy5saXZlUmVnaW9uLnJlbW92ZSgpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7dGhpcy5fc3VwZXIodCxlKSwic291cmNlIj09PXQmJnRoaXMuX2luaXRTb3VyY2UoKSwiYXBwZW5kVG8iPT09dCYmdGhpcy5tZW51LmVsZW1lbnQuYXBwZW5kVG8odGhpcy5fYXBwZW5kVG8oKSksImRpc2FibGVkIj09PXQmJmUmJnRoaXMueGhyJiZ0aGlzLnhoci5hYm9ydCgpfSxfaXNFdmVudFRhcmdldEluV2lkZ2V0OmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMubWVudS5lbGVtZW50WzBdO3JldHVybiBlLnRhcmdldD09PXRoaXMuZWxlbWVudFswXXx8ZS50YXJnZXQ9PT1pfHx0LmNvbnRhaW5zKGksZS50YXJnZXQpfSxfY2xvc2VPbkNsaWNrT3V0c2lkZTpmdW5jdGlvbih0KXt0aGlzLl9pc0V2ZW50VGFyZ2V0SW5XaWRnZXQodCl8fHRoaXMuY2xvc2UoKX0sX2FwcGVuZFRvOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcHRpb25zLmFwcGVuZFRvO3JldHVybiBlJiYoZT1lLmpxdWVyeXx8ZS5ub2RlVHlwZT90KGUpOnRoaXMuZG9jdW1lbnQuZmluZChlKS5lcSgwKSksZSYmZVswXXx8KGU9dGhpcy5lbGVtZW50LmNsb3Nlc3QoIi51aS1mcm9udCwgZGlhbG9nIikpLGUubGVuZ3RofHwoZT10aGlzLmRvY3VtZW50WzBdLmJvZHkpLGV9LF9pbml0U291cmNlOmZ1bmN0aW9uKCl7dmFyIGUsaSxzPXRoaXM7dC5pc0FycmF5KHRoaXMub3B0aW9ucy5zb3VyY2UpPyhlPXRoaXMub3B0aW9ucy5zb3VyY2UsdGhpcy5zb3VyY2U9ZnVuY3Rpb24oaSxzKXtzKHQudWkuYXV0b2NvbXBsZXRlLmZpbHRlcihlLGkudGVybSkpfSk6InN0cmluZyI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuc291cmNlPyhpPXRoaXMub3B0aW9ucy5zb3VyY2UsdGhpcy5zb3VyY2U9ZnVuY3Rpb24oZSxuKXtzLnhociYmcy54aHIuYWJvcnQoKSxzLnhocj10LmFqYXgoe3VybDppLGRhdGE6ZSxkYXRhVHlwZToianNvbiIsc3VjY2VzczpmdW5jdGlvbih0KXtuKHQpfSxlcnJvcjpmdW5jdGlvbigpe24oW10pfX0pfSk6dGhpcy5zb3VyY2U9dGhpcy5vcHRpb25zLnNvdXJjZX0sX3NlYXJjaFRpbWVvdXQ6ZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KHRoaXMuc2VhcmNoaW5nKSx0aGlzLnNlYXJjaGluZz10aGlzLl9kZWxheShmdW5jdGlvbigpe3ZhciBlPXRoaXMudGVybT09PXRoaXMuX3ZhbHVlKCksaT10aGlzLm1lbnUuZWxlbWVudC5pcygiOnZpc2libGUiKSxzPXQuYWx0S2V5fHx0LmN0cmxLZXl8fHQubWV0YUtleXx8dC5zaGlmdEtleTsoIWV8fGUmJiFpJiYhcykmJih0aGlzLnNlbGVjdGVkSXRlbT1udWxsLHRoaXMuc2VhcmNoKG51bGwsdCkpfSx0aGlzLm9wdGlvbnMuZGVsYXkpfSxzZWFyY2g6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD1udWxsIT10P3Q6dGhpcy5fdmFsdWUoKSx0aGlzLnRlcm09dGhpcy5fdmFsdWUoKSx0Lmxlbmd0aDx0aGlzLm9wdGlvbnMubWluTGVuZ3RoP3RoaXMuY2xvc2UoZSk6dGhpcy5fdHJpZ2dlcigic2VhcmNoIixlKSE9PSExP3RoaXMuX3NlYXJjaCh0KTp2b2lkIDB9LF9zZWFyY2g6ZnVuY3Rpb24odCl7dGhpcy5wZW5kaW5nKyssdGhpcy5fYWRkQ2xhc3MoInVpLWF1dG9jb21wbGV0ZS1sb2FkaW5nIiksdGhpcy5jYW5jZWxTZWFyY2g9ITEsdGhpcy5zb3VyY2Uoe3Rlcm06dH0sdGhpcy5fcmVzcG9uc2UoKSl9LF9yZXNwb25zZTpmdW5jdGlvbigpe3ZhciBlPSsrdGhpcy5yZXF1ZXN0SW5kZXg7cmV0dXJuIHQucHJveHkoZnVuY3Rpb24odCl7ZT09PXRoaXMucmVxdWVzdEluZGV4JiZ0aGlzLl9fcmVzcG9uc2UodCksdGhpcy5wZW5kaW5nLS0sdGhpcy5wZW5kaW5nfHx0aGlzLl9yZW1vdmVDbGFzcygidWktYXV0b2NvbXBsZXRlLWxvYWRpbmciKX0sdGhpcyl9LF9fcmVzcG9uc2U6ZnVuY3Rpb24odCl7dCYmKHQ9dGhpcy5fbm9ybWFsaXplKHQpKSx0aGlzLl90cmlnZ2VyKCJyZXNwb25zZSIsbnVsbCx7Y29udGVudDp0fSksIXRoaXMub3B0aW9ucy5kaXNhYmxlZCYmdCYmdC5sZW5ndGgmJiF0aGlzLmNhbmNlbFNlYXJjaD8odGhpcy5fc3VnZ2VzdCh0KSx0aGlzLl90cmlnZ2VyKCJvcGVuIikpOnRoaXMuX2Nsb3NlKCl9LGNsb3NlOmZ1bmN0aW9uKHQpe3RoaXMuY2FuY2VsU2VhcmNoPSEwLHRoaXMuX2Nsb3NlKHQpfSxfY2xvc2U6ZnVuY3Rpb24odCl7dGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQsIm1vdXNlZG93biIpLHRoaXMubWVudS5lbGVtZW50LmlzKCI6dmlzaWJsZSIpJiYodGhpcy5tZW51LmVsZW1lbnQuaGlkZSgpLHRoaXMubWVudS5ibHVyKCksdGhpcy5pc05ld01lbnU9ITAsdGhpcy5fdHJpZ2dlcigiY2xvc2UiLHQpKX0sX2NoYW5nZTpmdW5jdGlvbih0KXt0aGlzLnByZXZpb3VzIT09dGhpcy5fdmFsdWUoKSYmdGhpcy5fdHJpZ2dlcigiY2hhbmdlIix0LHtpdGVtOnRoaXMuc2VsZWN0ZWRJdGVtfSl9LF9ub3JtYWxpemU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubGVuZ3RoJiZlWzBdLmxhYmVsJiZlWzBdLnZhbHVlP2U6dC5tYXAoZSxmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGU/e2xhYmVsOmUsdmFsdWU6ZX06dC5leHRlbmQoe30sZSx7bGFiZWw6ZS5sYWJlbHx8ZS52YWx1ZSx2YWx1ZTplLnZhbHVlfHxlLmxhYmVsfSl9KX0sX3N1Z2dlc3Q6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5tZW51LmVsZW1lbnQuZW1wdHkoKTt0aGlzLl9yZW5kZXJNZW51KGksZSksdGhpcy5pc05ld01lbnU9ITAsdGhpcy5tZW51LnJlZnJlc2goKSxpLnNob3coKSx0aGlzLl9yZXNpemVNZW51KCksaS5wb3NpdGlvbih0LmV4dGVuZCh7b2Y6dGhpcy5lbGVtZW50fSx0aGlzLm9wdGlvbnMucG9zaXRpb24pKSx0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzJiZ0aGlzLm1lbnUubmV4dCgpLHRoaXMuX29uKHRoaXMuZG9jdW1lbnQse21vdXNlZG93bjoiX2Nsb3NlT25DbGlja091dHNpZGUifSl9LF9yZXNpemVNZW51OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5tZW51LmVsZW1lbnQ7dC5vdXRlcldpZHRoKE1hdGgubWF4KHQud2lkdGgoIiIpLm91dGVyV2lkdGgoKSsxLHRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCkpKX0sX3JlbmRlck1lbnU6ZnVuY3Rpb24oZSxpKXt2YXIgcz10aGlzO3QuZWFjaChpLGZ1bmN0aW9uKHQsaSl7cy5fcmVuZGVySXRlbURhdGEoZSxpKX0pfSxfcmVuZGVySXRlbURhdGE6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fcmVuZGVySXRlbSh0LGUpLmRhdGEoInVpLWF1dG9jb21wbGV0ZS1pdGVtIixlKX0sX3JlbmRlckl0ZW06ZnVuY3Rpb24oZSxpKXtyZXR1cm4gdCgiPGxpPiIpLmFwcGVuZCh0KCI8ZGl2PiIpLnRleHQoaS5sYWJlbCkpLmFwcGVuZFRvKGUpfSxfbW92ZTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLm1lbnUuZWxlbWVudC5pcygiOnZpc2libGUiKT90aGlzLm1lbnUuaXNGaXJzdEl0ZW0oKSYmL15wcmV2aW91cy8udGVzdCh0KXx8dGhpcy5tZW51LmlzTGFzdEl0ZW0oKSYmL15uZXh0Ly50ZXN0KHQpPyh0aGlzLmlzTXVsdGlMaW5lfHx0aGlzLl92YWx1ZSh0aGlzLnRlcm0pLHRoaXMubWVudS5ibHVyKCksdm9pZCAwKToodGhpcy5tZW51W3RdKGUpLHZvaWQgMCk6KHRoaXMuc2VhcmNoKG51bGwsZSksdm9pZCAwKX0sd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVudS5lbGVtZW50fSxfdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZU1ldGhvZC5hcHBseSh0aGlzLmVsZW1lbnQsYXJndW1lbnRzKX0sX2tleUV2ZW50OmZ1bmN0aW9uKHQsZSl7KCF0aGlzLmlzTXVsdGlMaW5lfHx0aGlzLm1lbnUuZWxlbWVudC5pcygiOnZpc2libGUiKSkmJih0aGlzLl9tb3ZlKHQsZSksZS5wcmV2ZW50RGVmYXVsdCgpKX0sX2lzQ29udGVudEVkaXRhYmxlOmZ1bmN0aW9uKHQpe2lmKCF0Lmxlbmd0aClyZXR1cm4hMTt2YXIgZT10LnByb3AoImNvbnRlbnRFZGl0YWJsZSIpO3JldHVybiJpbmhlcml0Ij09PWU/dGhpcy5faXNDb250ZW50RWRpdGFibGUodC5wYXJlbnQoKSk6InRydWUiPT09ZX19KSx0LmV4dGVuZCh0LnVpLmF1dG9jb21wbGV0ZSx7ZXNjYXBlUmVnZXg6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvW1wtXFtcXXt9KCkqKz8uLFxcXF4kfCNcc10vZywiXFwkJiIpfSxmaWx0ZXI6ZnVuY3Rpb24oZSxpKXt2YXIgcz1SZWdFeHAodC51aS5hdXRvY29tcGxldGUuZXNjYXBlUmVnZXgoaSksImkiKTtyZXR1cm4gdC5ncmVwKGUsZnVuY3Rpb24odCl7cmV0dXJuIHMudGVzdCh0LmxhYmVsfHx0LnZhbHVlfHx0KX0pfX0pLHQud2lkZ2V0KCJ1aS5hdXRvY29tcGxldGUiLHQudWkuYXV0b2NvbXBsZXRlLHtvcHRpb25zOnttZXNzYWdlczp7bm9SZXN1bHRzOiJObyBzZWFyY2ggcmVzdWx0cy4iLHJlc3VsdHM6ZnVuY3Rpb24odCl7cmV0dXJuIHQrKHQ+MT8iIHJlc3VsdHMgYXJlIjoiIHJlc3VsdCBpcyIpKyIgYXZhaWxhYmxlLCB1c2UgdXAgYW5kIGRvd24gYXJyb3cga2V5cyB0byBuYXZpZ2F0ZS4ifX19LF9fcmVzcG9uc2U6ZnVuY3Rpb24oZSl7dmFyIGk7dGhpcy5fc3VwZXJBcHBseShhcmd1bWVudHMpLHRoaXMub3B0aW9ucy5kaXNhYmxlZHx8dGhpcy5jYW5jZWxTZWFyY2h8fChpPWUmJmUubGVuZ3RoP3RoaXMub3B0aW9ucy5tZXNzYWdlcy5yZXN1bHRzKGUubGVuZ3RoKTp0aGlzLm9wdGlvbnMubWVzc2FnZXMubm9SZXN1bHRzLHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKSx0KCI8ZGl2PiIpLnRleHQoaSkuYXBwZW5kVG8odGhpcy5saXZlUmVnaW9uKSl9fSksdC51aS5hdXRvY29tcGxldGU7dmFyIGc9L3VpLWNvcm5lci0oW2Etel0pezIsNn0vZzt0LndpZGdldCgidWkuY29udHJvbGdyb3VwIix7dmVyc2lvbjoiMS4xMi4xIixkZWZhdWx0RWxlbWVudDoiPGRpdj4iLG9wdGlvbnM6e2RpcmVjdGlvbjoiaG9yaXpvbnRhbCIsZGlzYWJsZWQ6bnVsbCxvbmx5VmlzaWJsZTohMCxpdGVtczp7YnV0dG9uOiJpbnB1dFt0eXBlPWJ1dHRvbl0sIGlucHV0W3R5cGU9c3VibWl0XSwgaW5wdXRbdHlwZT1yZXNldF0sIGJ1dHRvbiwgYSIsY29udHJvbGdyb3VwTGFiZWw6Ii51aS1jb250cm9sZ3JvdXAtbGFiZWwiLGNoZWNrYm94cmFkaW86ImlucHV0W3R5cGU9J2NoZWNrYm94J10sIGlucHV0W3R5cGU9J3JhZGlvJ10iLHNlbGVjdG1lbnU6InNlbGVjdCIsc3Bpbm5lcjoiLnVpLXNwaW5uZXItaW5wdXQifX0sX2NyZWF0ZTpmdW5jdGlvbigpe3RoaXMuX2VuaGFuY2UoKX0sX2VuaGFuY2U6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuYXR0cigicm9sZSIsInRvb2xiYXIiKSx0aGlzLnJlZnJlc2goKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLl9jYWxsQ2hpbGRNZXRob2QoImRlc3Ryb3kiKSx0aGlzLmNoaWxkV2lkZ2V0cy5yZW1vdmVEYXRhKCJ1aS1jb250cm9sZ3JvdXAtZGF0YSIpLHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCJyb2xlIiksdGhpcy5vcHRpb25zLml0ZW1zLmNvbnRyb2xncm91cExhYmVsJiZ0aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMuY29udHJvbGdyb3VwTGFiZWwpLmZpbmQoIi51aS1jb250cm9sZ3JvdXAtbGFiZWwtY29udGVudHMiKS5jb250ZW50cygpLnVud3JhcCgpfSxfaW5pdFdpZGdldHM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLGk9W107dC5lYWNoKHRoaXMub3B0aW9ucy5pdGVtcyxmdW5jdGlvbihzLG4pe3ZhciBvLGE9e307cmV0dXJuIG4/ImNvbnRyb2xncm91cExhYmVsIj09PXM/KG89ZS5lbGVtZW50LmZpbmQobiksby5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKTtlLmNoaWxkcmVuKCIudWktY29udHJvbGdyb3VwLWxhYmVsLWNvbnRlbnRzIikubGVuZ3RofHxlLmNvbnRlbnRzKCkud3JhcEFsbCgiPHNwYW4gY2xhc3M9J3VpLWNvbnRyb2xncm91cC1sYWJlbC1jb250ZW50cyc+PC9zcGFuPiIpfSksZS5fYWRkQ2xhc3MobyxudWxsLCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktc3RhdGUtZGVmYXVsdCIpLGk9aS5jb25jYXQoby5nZXQoKSksdm9pZCAwKToodC5mbltzXSYmKGE9ZVsiXyIrcysiT3B0aW9ucyJdP2VbIl8iK3MrIk9wdGlvbnMiXSgibWlkZGxlIik6e2NsYXNzZXM6e319LGUuZWxlbWVudC5maW5kKG4pLmVhY2goZnVuY3Rpb24oKXt2YXIgbj10KHRoaXMpLG89bltzXSgiaW5zdGFuY2UiKSxyPXQud2lkZ2V0LmV4dGVuZCh7fSxhKTtpZigiYnV0dG9uIiE9PXN8fCFuLnBhcmVudCgiLnVpLXNwaW5uZXIiKS5sZW5ndGgpe298fChvPW5bc10oKVtzXSgiaW5zdGFuY2UiKSksbyYmKHIuY2xhc3Nlcz1lLl9yZXNvbHZlQ2xhc3Nlc1ZhbHVlcyhyLmNsYXNzZXMsbykpLG5bc10ocik7dmFyIGg9bltzXSgid2lkZ2V0Iik7dC5kYXRhKGhbMF0sInVpLWNvbnRyb2xncm91cC1kYXRhIixvP286bltzXSgiaW5zdGFuY2UiKSksaS5wdXNoKGhbMF0pfX0pKSx2b2lkIDApOnZvaWQgMH0pLHRoaXMuY2hpbGRXaWRnZXRzPXQodC51bmlxdWUoaSkpLHRoaXMuX2FkZENsYXNzKHRoaXMuY2hpbGRXaWRnZXRzLCJ1aS1jb250cm9sZ3JvdXAtaXRlbSIpfSxfY2FsbENoaWxkTWV0aG9kOmZ1bmN0aW9uKGUpe3RoaXMuY2hpbGRXaWRnZXRzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT10KHRoaXMpLHM9aS5kYXRhKCJ1aS1jb250cm9sZ3JvdXAtZGF0YSIpO3MmJnNbZV0mJnNbZV0oKX0pfSxfdXBkYXRlQ29ybmVyQ2xhc3M6ZnVuY3Rpb24odCxlKXt2YXIgaT0idWktY29ybmVyLXRvcCB1aS1jb3JuZXItYm90dG9tIHVpLWNvcm5lci1sZWZ0IHVpLWNvcm5lci1yaWdodCB1aS1jb3JuZXItYWxsIixzPXRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyhlLCJsYWJlbCIpLmNsYXNzZXMubGFiZWw7dGhpcy5fcmVtb3ZlQ2xhc3ModCxudWxsLGkpLHRoaXMuX2FkZENsYXNzKHQsbnVsbCxzKX0sX2J1aWxkU2ltcGxlT3B0aW9uczpmdW5jdGlvbih0LGUpe3ZhciBpPSJ2ZXJ0aWNhbCI9PT10aGlzLm9wdGlvbnMuZGlyZWN0aW9uLHM9e2NsYXNzZXM6e319O3JldHVybiBzLmNsYXNzZXNbZV09e21pZGRsZToiIixmaXJzdDoidWktY29ybmVyLSIrKGk/InRvcCI6ImxlZnQiKSxsYXN0OiJ1aS1jb3JuZXItIisoaT8iYm90dG9tIjoicmlnaHQiKSxvbmx5OiJ1aS1jb3JuZXItYWxsIn1bdF0sc30sX3NwaW5uZXJPcHRpb25zOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyh0LCJ1aS1zcGlubmVyIik7cmV0dXJuIGUuY2xhc3Nlc1sidWktc3Bpbm5lci11cCJdPSIiLGUuY2xhc3Nlc1sidWktc3Bpbm5lci1kb3duIl09IiIsZX0sX2J1dHRvbk9wdGlvbnM6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyh0LCJ1aS1idXR0b24iKX0sX2NoZWNrYm94cmFkaW9PcHRpb25zOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9idWlsZFNpbXBsZU9wdGlvbnModCwidWktY2hlY2tib3hyYWRpby1sYWJlbCIpfSxfc2VsZWN0bWVudU9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU9InZlcnRpY2FsIj09PXRoaXMub3B0aW9ucy5kaXJlY3Rpb247cmV0dXJue3dpZHRoOmU/ImF1dG8iOiExLGNsYXNzZXM6e21pZGRsZTp7InVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW4iOiIiLCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWQiOiIifSxmaXJzdDp7InVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW4iOiJ1aS1jb3JuZXItIisoZT8idG9wIjoidGwiKSwidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkIjoidWktY29ybmVyLSIrKGU/InRvcCI6ImxlZnQiKX0sbGFzdDp7InVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW4iOmU/IiI6InVpLWNvcm5lci10ciIsInVpLXNlbGVjdG1lbnUtYnV0dG9uLWNsb3NlZCI6InVpLWNvcm5lci0iKyhlPyJib3R0b20iOiJyaWdodCIpfSxvbmx5OnsidWktc2VsZWN0bWVudS1idXR0b24tb3BlbiI6InVpLWNvcm5lci10b3AiLCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWQiOiJ1aS1jb3JuZXItYWxsIn19W3RdfX0sX3Jlc29sdmVDbGFzc2VzVmFsdWVzOmZ1bmN0aW9uKGUsaSl7dmFyIHM9e307cmV0dXJuIHQuZWFjaChlLGZ1bmN0aW9uKG4pe3ZhciBvPWkub3B0aW9ucy5jbGFzc2VzW25dfHwiIjtvPXQudHJpbShvLnJlcGxhY2UoZywiIikpLHNbbl09KG8rIiAiK2Vbbl0pLnJlcGxhY2UoL1xzKy9nLCIgIil9KSxzfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuImRpcmVjdGlvbiI9PT10JiZ0aGlzLl9yZW1vdmVDbGFzcygidWktY29udHJvbGdyb3VwLSIrdGhpcy5vcHRpb25zLmRpcmVjdGlvbiksdGhpcy5fc3VwZXIodCxlKSwiZGlzYWJsZWQiPT09dD8odGhpcy5fY2FsbENoaWxkTWV0aG9kKGU/ImRpc2FibGUiOiJlbmFibGUiKSx2b2lkIDApOih0aGlzLnJlZnJlc2goKSx2b2lkIDApfSxyZWZyZXNoOmZ1bmN0aW9uKCl7dmFyIGUsaT10aGlzO3RoaXMuX2FkZENsYXNzKCJ1aS1jb250cm9sZ3JvdXAgdWktY29udHJvbGdyb3VwLSIrdGhpcy5vcHRpb25zLmRpcmVjdGlvbiksImhvcml6b250YWwiPT09dGhpcy5vcHRpb25zLmRpcmVjdGlvbiYmdGhpcy5fYWRkQ2xhc3MobnVsbCwidWktaGVscGVyLWNsZWFyZml4IiksdGhpcy5faW5pdFdpZGdldHMoKSxlPXRoaXMuY2hpbGRXaWRnZXRzLHRoaXMub3B0aW9ucy5vbmx5VmlzaWJsZSYmKGU9ZS5maWx0ZXIoIjp2aXNpYmxlIikpLGUubGVuZ3RoJiYodC5lYWNoKFsiZmlyc3QiLCJsYXN0Il0sZnVuY3Rpb24odCxzKXt2YXIgbj1lW3NdKCkuZGF0YSgidWktY29udHJvbGdyb3VwLWRhdGEiKTtpZihuJiZpWyJfIituLndpZGdldE5hbWUrIk9wdGlvbnMiXSl7dmFyIG89aVsiXyIrbi53aWRnZXROYW1lKyJPcHRpb25zIl0oMT09PWUubGVuZ3RoPyJvbmx5IjpzKTtvLmNsYXNzZXM9aS5fcmVzb2x2ZUNsYXNzZXNWYWx1ZXMoby5jbGFzc2VzLG4pLG4uZWxlbWVudFtuLndpZGdldE5hbWVdKG8pfWVsc2UgaS5fdXBkYXRlQ29ybmVyQ2xhc3MoZVtzXSgpLHMpfSksdGhpcy5fY2FsbENoaWxkTWV0aG9kKCJyZWZyZXNoIikpfX0pLHQud2lkZ2V0KCJ1aS5jaGVja2JveHJhZGlvIixbdC51aS5mb3JtUmVzZXRNaXhpbix7dmVyc2lvbjoiMS4xMi4xIixvcHRpb25zOntkaXNhYmxlZDpudWxsLGxhYmVsOm51bGwsaWNvbjohMCxjbGFzc2VzOnsidWktY2hlY2tib3hyYWRpby1sYWJlbCI6InVpLWNvcm5lci1hbGwiLCJ1aS1jaGVja2JveHJhZGlvLWljb24iOiJ1aS1jb3JuZXItYWxsIn19LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7dmFyIGUsaSxzPXRoaXMsbj10aGlzLl9zdXBlcigpfHx7fTtyZXR1cm4gdGhpcy5fcmVhZFR5cGUoKSxpPXRoaXMuZWxlbWVudC5sYWJlbHMoKSx0aGlzLmxhYmVsPXQoaVtpLmxlbmd0aC0xXSksdGhpcy5sYWJlbC5sZW5ndGh8fHQuZXJyb3IoIk5vIGxhYmVsIGZvdW5kIGZvciBjaGVja2JveHJhZGlvIHdpZGdldCIpLHRoaXMub3JpZ2luYWxMYWJlbD0iIix0aGlzLmxhYmVsLmNvbnRlbnRzKCkubm90KHRoaXMuZWxlbWVudFswXSkuZWFjaChmdW5jdGlvbigpe3Mub3JpZ2luYWxMYWJlbCs9Mz09PXRoaXMubm9kZVR5cGU/dCh0aGlzKS50ZXh0KCk6dGhpcy5vdXRlckhUTUx9KSx0aGlzLm9yaWdpbmFsTGFiZWwmJihuLmxhYmVsPXRoaXMub3JpZ2luYWxMYWJlbCksZT10aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWQsbnVsbCE9ZSYmKG4uZGlzYWJsZWQ9ZSksbn0sX2NyZWF0ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudFswXS5jaGVja2VkO3RoaXMuX2JpbmRGb3JtUmVzZXRIYW5kbGVyKCksbnVsbD09dGhpcy5vcHRpb25zLmRpc2FibGVkJiYodGhpcy5vcHRpb25zLmRpc2FibGVkPXRoaXMuZWxlbWVudFswXS5kaXNhYmxlZCksdGhpcy5fc2V0T3B0aW9uKCJkaXNhYmxlZCIsdGhpcy5vcHRpb25zLmRpc2FibGVkKSx0aGlzLl9hZGRDbGFzcygidWktY2hlY2tib3hyYWRpbyIsInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZSIpLHRoaXMuX2FkZENsYXNzKHRoaXMubGFiZWwsInVpLWNoZWNrYm94cmFkaW8tbGFiZWwiLCJ1aS1idXR0b24gdWktd2lkZ2V0IiksInJhZGlvIj09PXRoaXMudHlwZSYmdGhpcy5fYWRkQ2xhc3ModGhpcy5sYWJlbCwidWktY2hlY2tib3hyYWRpby1yYWRpby1sYWJlbCIpLHRoaXMub3B0aW9ucy5sYWJlbCYmdGhpcy5vcHRpb25zLmxhYmVsIT09dGhpcy5vcmlnaW5hbExhYmVsP3RoaXMuX3VwZGF0ZUxhYmVsKCk6dGhpcy5vcmlnaW5hbExhYmVsJiYodGhpcy5vcHRpb25zLmxhYmVsPXRoaXMub3JpZ2luYWxMYWJlbCksdGhpcy5fZW5oYW5jZSgpLHQmJih0aGlzLl9hZGRDbGFzcyh0aGlzLmxhYmVsLCJ1aS1jaGVja2JveHJhZGlvLWNoZWNrZWQiLCJ1aS1zdGF0ZS1hY3RpdmUiKSx0aGlzLmljb24mJnRoaXMuX2FkZENsYXNzKHRoaXMuaWNvbixudWxsLCJ1aS1zdGF0ZS1ob3ZlciIpKSx0aGlzLl9vbih7Y2hhbmdlOiJfdG9nZ2xlQ2xhc3NlcyIsZm9jdXM6ZnVuY3Rpb24oKXt0aGlzLl9hZGRDbGFzcyh0aGlzLmxhYmVsLG51bGwsInVpLXN0YXRlLWZvY3VzIHVpLXZpc3VhbC1mb2N1cyIpfSxibHVyOmZ1bmN0aW9uKCl7dGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5sYWJlbCxudWxsLCJ1aS1zdGF0ZS1mb2N1cyB1aS12aXN1YWwtZm9jdXMiKX19KX0sX3JlYWRUeXBlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7dGhpcy50eXBlPXRoaXMuZWxlbWVudFswXS50eXBlLCJpbnB1dCI9PT1lJiYvcmFkaW98Y2hlY2tib3gvLnRlc3QodGhpcy50eXBlKXx8dC5lcnJvcigiQ2FuJ3QgY3JlYXRlIGNoZWNrYm94cmFkaW8gb24gZWxlbWVudC5ub2RlTmFtZT0iK2UrIiBhbmQgZWxlbWVudC50eXBlPSIrdGhpcy50eXBlKX0sX2VuaGFuY2U6ZnVuY3Rpb24oKXt0aGlzLl91cGRhdGVJY29uKHRoaXMuZWxlbWVudFswXS5jaGVja2VkKX0sd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGFiZWx9LF9nZXRSYWRpb0dyb3VwOmZ1bmN0aW9uKCl7dmFyIGUsaT10aGlzLmVsZW1lbnRbMF0ubmFtZSxzPSJpbnB1dFtuYW1lPSciK3QudWkuZXNjYXBlU2VsZWN0b3IoaSkrIiddIjtyZXR1cm4gaT8oZT10aGlzLmZvcm0ubGVuZ3RoP3QodGhpcy5mb3JtWzBdLmVsZW1lbnRzKS5maWx0ZXIocyk6dChzKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gMD09PXQodGhpcykuZm9ybSgpLmxlbmd0aH0pLGUubm90KHRoaXMuZWxlbWVudCkpOnQoW10pfSxfdG9nZ2xlQ2xhc3NlczpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZWxlbWVudFswXS5jaGVja2VkO3RoaXMuX3RvZ2dsZUNsYXNzKHRoaXMubGFiZWwsInVpLWNoZWNrYm94cmFkaW8tY2hlY2tlZCIsInVpLXN0YXRlLWFjdGl2ZSIsZSksdGhpcy5vcHRpb25zLmljb24mJiJjaGVja2JveCI9PT10aGlzLnR5cGUmJnRoaXMuX3RvZ2dsZUNsYXNzKHRoaXMuaWNvbixudWxsLCJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWQiLGUpLl90b2dnbGVDbGFzcyh0aGlzLmljb24sbnVsbCwidWktaWNvbi1ibGFuayIsIWUpLCJyYWRpbyI9PT10aGlzLnR5cGUmJnRoaXMuX2dldFJhZGlvR3JvdXAoKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKS5jaGVja2JveHJhZGlvKCJpbnN0YW5jZSIpO2UmJmUuX3JlbW92ZUNsYXNzKGUubGFiZWwsInVpLWNoZWNrYm94cmFkaW8tY2hlY2tlZCIsInVpLXN0YXRlLWFjdGl2ZSIpfSl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5fdW5iaW5kRm9ybVJlc2V0SGFuZGxlcigpLHRoaXMuaWNvbiYmKHRoaXMuaWNvbi5yZW1vdmUoKSx0aGlzLmljb25TcGFjZS5yZW1vdmUoKSl9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXtyZXR1cm4ibGFiZWwiIT09dHx8ZT8odGhpcy5fc3VwZXIodCxlKSwiZGlzYWJsZWQiPT09dD8odGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy5sYWJlbCxudWxsLCJ1aS1zdGF0ZS1kaXNhYmxlZCIsZSksdGhpcy5lbGVtZW50WzBdLmRpc2FibGVkPWUsdm9pZCAwKToodGhpcy5yZWZyZXNoKCksdm9pZCAwKSk6dm9pZCAwfSxfdXBkYXRlSWNvbjpmdW5jdGlvbihlKXt2YXIgaT0idWktaWNvbiB1aS1pY29uLWJhY2tncm91bmQgIjt0aGlzLm9wdGlvbnMuaWNvbj8odGhpcy5pY29ufHwodGhpcy5pY29uPXQoIjxzcGFuPiIpLHRoaXMuaWNvblNwYWNlPXQoIjxzcGFuPiA8L3NwYW4+IiksdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uU3BhY2UsInVpLWNoZWNrYm94cmFkaW8taWNvbi1zcGFjZSIpKSwiY2hlY2tib3giPT09dGhpcy50eXBlPyhpKz1lPyJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWQiOiJ1aS1pY29uLWJsYW5rIix0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmljb24sbnVsbCxlPyJ1aS1pY29uLWJsYW5rIjoidWktaWNvbi1jaGVjayIpKTppKz0idWktaWNvbi1ibGFuayIsdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uLCJ1aS1jaGVja2JveHJhZGlvLWljb24iLGkpLGV8fHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaWNvbixudWxsLCJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWQiKSx0aGlzLmljb24ucHJlcGVuZFRvKHRoaXMubGFiZWwpLmFmdGVyKHRoaXMuaWNvblNwYWNlKSk6dm9pZCAwIT09dGhpcy5pY29uJiYodGhpcy5pY29uLnJlbW92ZSgpLHRoaXMuaWNvblNwYWNlLnJlbW92ZSgpLGRlbGV0ZSB0aGlzLmljb24pfSxfdXBkYXRlTGFiZWw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxhYmVsLmNvbnRlbnRzKCkubm90KHRoaXMuZWxlbWVudFswXSk7dGhpcy5pY29uJiYodD10Lm5vdCh0aGlzLmljb25bMF0pKSx0aGlzLmljb25TcGFjZSYmKHQ9dC5ub3QodGhpcy5pY29uU3BhY2VbMF0pKSx0LnJlbW92ZSgpLHRoaXMubGFiZWwuYXBwZW5kKHRoaXMub3B0aW9ucy5sYWJlbCl9LHJlZnJlc2g6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVsZW1lbnRbMF0uY2hlY2tlZCxlPXRoaXMuZWxlbWVudFswXS5kaXNhYmxlZDt0aGlzLl91cGRhdGVJY29uKHQpLHRoaXMuX3RvZ2dsZUNsYXNzKHRoaXMubGFiZWwsInVpLWNoZWNrYm94cmFkaW8tY2hlY2tlZCIsInVpLXN0YXRlLWFjdGl2ZSIsdCksbnVsbCE9PXRoaXMub3B0aW9ucy5sYWJlbCYmdGhpcy5fdXBkYXRlTGFiZWwoKSxlIT09dGhpcy5vcHRpb25zLmRpc2FibGVkJiZ0aGlzLl9zZXRPcHRpb25zKHtkaXNhYmxlZDplfSl9fV0pLHQudWkuY2hlY2tib3hyYWRpbyx0LndpZGdldCgidWkuYnV0dG9uIix7dmVyc2lvbjoiMS4xMi4xIixkZWZhdWx0RWxlbWVudDoiPGJ1dHRvbj4iLG9wdGlvbnM6e2NsYXNzZXM6eyJ1aS1idXR0b24iOiJ1aS1jb3JuZXItYWxsIn0sZGlzYWJsZWQ6bnVsbCxpY29uOm51bGwsaWNvblBvc2l0aW9uOiJiZWdpbm5pbmciLGxhYmVsOm51bGwsc2hvd0xhYmVsOiEwfSxfZ2V0Q3JlYXRlT3B0aW9uczpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5fc3VwZXIoKXx8e307cmV0dXJuIHRoaXMuaXNJbnB1dD10aGlzLmVsZW1lbnQuaXMoImlucHV0IiksdD10aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWQsbnVsbCE9dCYmKGUuZGlzYWJsZWQ9dCksdGhpcy5vcmlnaW5hbExhYmVsPXRoaXMuaXNJbnB1dD90aGlzLmVsZW1lbnQudmFsKCk6dGhpcy5lbGVtZW50Lmh0bWwoKSx0aGlzLm9yaWdpbmFsTGFiZWwmJihlLmxhYmVsPXRoaXMub3JpZ2luYWxMYWJlbCksZX0sX2NyZWF0ZTpmdW5jdGlvbigpeyF0aGlzLm9wdGlvbi5zaG93TGFiZWwmIXRoaXMub3B0aW9ucy5pY29uJiYodGhpcy5vcHRpb25zLnNob3dMYWJlbD0hMCksbnVsbD09dGhpcy5vcHRpb25zLmRpc2FibGVkJiYodGhpcy5vcHRpb25zLmRpc2FibGVkPXRoaXMuZWxlbWVudFswXS5kaXNhYmxlZHx8ITEpLHRoaXMuaGFzVGl0bGU9ISF0aGlzLmVsZW1lbnQuYXR0cigidGl0bGUiKSx0aGlzLm9wdGlvbnMubGFiZWwmJnRoaXMub3B0aW9ucy5sYWJlbCE9PXRoaXMub3JpZ2luYWxMYWJlbCYmKHRoaXMuaXNJbnB1dD90aGlzLmVsZW1lbnQudmFsKHRoaXMub3B0aW9ucy5sYWJlbCk6dGhpcy5lbGVtZW50Lmh0bWwodGhpcy5vcHRpb25zLmxhYmVsKSksdGhpcy5fYWRkQ2xhc3MoInVpLWJ1dHRvbiIsInVpLXdpZGdldCIpLHRoaXMuX3NldE9wdGlvbigiZGlzYWJsZWQiLHRoaXMub3B0aW9ucy5kaXNhYmxlZCksdGhpcy5fZW5oYW5jZSgpLHRoaXMuZWxlbWVudC5pcygiYSIpJiZ0aGlzLl9vbih7a2V5dXA6ZnVuY3Rpb24oZSl7ZS5rZXlDb2RlPT09dC51aS5rZXlDb2RlLlNQQUNFJiYoZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuZWxlbWVudFswXS5jbGljaz90aGlzLmVsZW1lbnRbMF0uY2xpY2soKTp0aGlzLmVsZW1lbnQudHJpZ2dlcigiY2xpY2siKSl9fSl9LF9lbmhhbmNlOmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmlzKCJidXR0b24iKXx8dGhpcy5lbGVtZW50LmF0dHIoInJvbGUiLCJidXR0b24iKSx0aGlzLm9wdGlvbnMuaWNvbiYmKHRoaXMuX3VwZGF0ZUljb24oImljb24iLHRoaXMub3B0aW9ucy5pY29uKSx0aGlzLl91cGRhdGVUb29sdGlwKCkpfSxfdXBkYXRlVG9vbHRpcDpmdW5jdGlvbigpe3RoaXMudGl0bGU9dGhpcy5lbGVtZW50LmF0dHIoInRpdGxlIiksdGhpcy5vcHRpb25zLnNob3dMYWJlbHx8dGhpcy50aXRsZXx8dGhpcy5lbGVtZW50LmF0dHIoInRpdGxlIix0aGlzLm9wdGlvbnMubGFiZWwpfSxfdXBkYXRlSWNvbjpmdW5jdGlvbihlLGkpe3ZhciBzPSJpY29uUG9zaXRpb24iIT09ZSxuPXM/dGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbjppLG89InRvcCI9PT1ufHwiYm90dG9tIj09PW47dGhpcy5pY29uP3MmJnRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaWNvbixudWxsLHRoaXMub3B0aW9ucy5pY29uKToodGhpcy5pY29uPXQoIjxzcGFuPiIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaWNvbiwidWktYnV0dG9uLWljb24iLCJ1aS1pY29uIiksdGhpcy5vcHRpb25zLnNob3dMYWJlbHx8dGhpcy5fYWRkQ2xhc3MoInVpLWJ1dHRvbi1pY29uLW9ubHkiKSkscyYmdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uLG51bGwsaSksdGhpcy5fYXR0YWNoSWNvbihuKSxvPyh0aGlzLl9hZGRDbGFzcyh0aGlzLmljb24sbnVsbCwidWktd2lkZ2V0LWljb24tYmxvY2siKSx0aGlzLmljb25TcGFjZSYmdGhpcy5pY29uU3BhY2UucmVtb3ZlKCkpOih0aGlzLmljb25TcGFjZXx8KHRoaXMuaWNvblNwYWNlPXQoIjxzcGFuPiA8L3NwYW4+IiksdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uU3BhY2UsInVpLWJ1dHRvbi1pY29uLXNwYWNlIikpLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaWNvbixudWxsLCJ1aS13aWdldC1pY29uLWJsb2NrIiksdGhpcy5fYXR0YWNoSWNvblNwYWNlKG4pKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cigicm9sZSIpLHRoaXMuaWNvbiYmdGhpcy5pY29uLnJlbW92ZSgpLHRoaXMuaWNvblNwYWNlJiZ0aGlzLmljb25TcGFjZS5yZW1vdmUoKSx0aGlzLmhhc1RpdGxlfHx0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cigidGl0bGUiKX0sX2F0dGFjaEljb25TcGFjZTpmdW5jdGlvbih0KXt0aGlzLmljb25bL14oPzplbmR8Ym90dG9tKS8udGVzdCh0KT8iYmVmb3JlIjoiYWZ0ZXIiXSh0aGlzLmljb25TcGFjZSl9LF9hdHRhY2hJY29uOmZ1bmN0aW9uKHQpe3RoaXMuZWxlbWVudFsvXig/OmVuZHxib3R0b20pLy50ZXN0KHQpPyJhcHBlbmQiOiJwcmVwZW5kIl0odGhpcy5pY29uKX0sX3NldE9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU9dm9pZCAwPT09dC5zaG93TGFiZWw/dGhpcy5vcHRpb25zLnNob3dMYWJlbDp0LnNob3dMYWJlbCxpPXZvaWQgMD09PXQuaWNvbj90aGlzLm9wdGlvbnMuaWNvbjp0Lmljb247ZXx8aXx8KHQuc2hvd0xhYmVsPSEwKSx0aGlzLl9zdXBlcih0KX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpeyJpY29uIj09PXQmJihlP3RoaXMuX3VwZGF0ZUljb24odCxlKTp0aGlzLmljb24mJih0aGlzLmljb24ucmVtb3ZlKCksdGhpcy5pY29uU3BhY2UmJnRoaXMuaWNvblNwYWNlLnJlbW92ZSgpKSksImljb25Qb3NpdGlvbiI9PT10JiZ0aGlzLl91cGRhdGVJY29uKHQsZSksInNob3dMYWJlbCI9PT10JiYodGhpcy5fdG9nZ2xlQ2xhc3MoInVpLWJ1dHRvbi1pY29uLW9ubHkiLG51bGwsIWUpLHRoaXMuX3VwZGF0ZVRvb2x0aXAoKSksImxhYmVsIj09PXQmJih0aGlzLmlzSW5wdXQ/dGhpcy5lbGVtZW50LnZhbChlKToodGhpcy5lbGVtZW50Lmh0bWwoZSksdGhpcy5pY29uJiYodGhpcy5fYXR0YWNoSWNvbih0aGlzLm9wdGlvbnMuaWNvblBvc2l0aW9uKSx0aGlzLl9hdHRhY2hJY29uU3BhY2UodGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbikpKSksdGhpcy5fc3VwZXIodCxlKSwiZGlzYWJsZWQiPT09dCYmKHRoaXMuX3RvZ2dsZUNsYXNzKG51bGwsInVpLXN0YXRlLWRpc2FibGVkIixlKSx0aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWQ9ZSxlJiZ0aGlzLmVsZW1lbnQuYmx1cigpKX0scmVmcmVzaDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudC5pcygiaW5wdXQsIGJ1dHRvbiIpP3RoaXMuZWxlbWVudFswXS5kaXNhYmxlZDp0aGlzLmVsZW1lbnQuaGFzQ2xhc3MoInVpLWJ1dHRvbi1kaXNhYmxlZCIpO3QhPT10aGlzLm9wdGlvbnMuZGlzYWJsZWQmJnRoaXMuX3NldE9wdGlvbnMoe2Rpc2FibGVkOnR9KSx0aGlzLl91cGRhdGVUb29sdGlwKCl9fSksdC51aUJhY2tDb21wYXQhPT0hMSYmKHQud2lkZ2V0KCJ1aS5idXR0b24iLHQudWkuYnV0dG9uLHtvcHRpb25zOnt0ZXh0OiEwLGljb25zOntwcmltYXJ5Om51bGwsc2Vjb25kYXJ5Om51bGx9fSxfY3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLnNob3dMYWJlbCYmIXRoaXMub3B0aW9ucy50ZXh0JiYodGhpcy5vcHRpb25zLnNob3dMYWJlbD10aGlzLm9wdGlvbnMudGV4dCksIXRoaXMub3B0aW9ucy5zaG93TGFiZWwmJnRoaXMub3B0aW9ucy50ZXh0JiYodGhpcy5vcHRpb25zLnRleHQ9dGhpcy5vcHRpb25zLnNob3dMYWJlbCksdGhpcy5vcHRpb25zLmljb258fCF0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeSYmIXRoaXMub3B0aW9ucy5pY29ucy5zZWNvbmRhcnk/dGhpcy5vcHRpb25zLmljb24mJih0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeT10aGlzLm9wdGlvbnMuaWNvbik6dGhpcy5vcHRpb25zLmljb25zLnByaW1hcnk/dGhpcy5vcHRpb25zLmljb249dGhpcy5vcHRpb25zLmljb25zLnByaW1hcnk6KHRoaXMub3B0aW9ucy5pY29uPXRoaXMub3B0aW9ucy5pY29ucy5zZWNvbmRhcnksdGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbj0iZW5kIiksdGhpcy5fc3VwZXIoKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe3JldHVybiJ0ZXh0Ij09PXQ/KHRoaXMuX3N1cGVyKCJzaG93TGFiZWwiLGUpLHZvaWQgMCk6KCJzaG93TGFiZWwiPT09dCYmKHRoaXMub3B0aW9ucy50ZXh0PWUpLCJpY29uIj09PXQmJih0aGlzLm9wdGlvbnMuaWNvbnMucHJpbWFyeT1lKSwiaWNvbnMiPT09dCYmKGUucHJpbWFyeT8odGhpcy5fc3VwZXIoImljb24iLGUucHJpbWFyeSksdGhpcy5fc3VwZXIoImljb25Qb3NpdGlvbiIsImJlZ2lubmluZyIpKTplLnNlY29uZGFyeSYmKHRoaXMuX3N1cGVyKCJpY29uIixlLnNlY29uZGFyeSksdGhpcy5fc3VwZXIoImljb25Qb3NpdGlvbiIsImVuZCIpKSksdGhpcy5fc3VwZXJBcHBseShhcmd1bWVudHMpLHZvaWQgMCl9fSksdC5mbi5idXR0b249ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMubGVuZ3RofHx0aGlzLmxlbmd0aCYmIklOUFVUIiE9PXRoaXNbMF0udGFnTmFtZXx8dGhpcy5sZW5ndGgmJiJJTlBVVCI9PT10aGlzWzBdLnRhZ05hbWUmJiJjaGVja2JveCIhPT10aGlzLmF0dHIoInR5cGUiKSYmInJhZGlvIiE9PXRoaXMuYXR0cigidHlwZSIpP2UuYXBwbHkodGhpcyxhcmd1bWVudHMpOih0LnVpLmNoZWNrYm94cmFkaW98fHQuZXJyb3IoIkNoZWNrYm94cmFkaW8gd2lkZ2V0IG1pc3NpbmciKSwwPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLmNoZWNrYm94cmFkaW8oe2ljb246ITF9KTp0aGlzLmNoZWNrYm94cmFkaW8uYXBwbHkodGhpcyxhcmd1bWVudHMpKX19KHQuZm4uYnV0dG9uKSx0LmZuLmJ1dHRvbnNldD1mdW5jdGlvbigpe3JldHVybiB0LnVpLmNvbnRyb2xncm91cHx8dC5lcnJvcigiQ29udHJvbGdyb3VwIHdpZGdldCBtaXNzaW5nIiksIm9wdGlvbiI9PT1hcmd1bWVudHNbMF0mJiJpdGVtcyI9PT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1syXT90aGlzLmNvbnRyb2xncm91cC5hcHBseSh0aGlzLFthcmd1bWVudHNbMF0sIml0ZW1zLmJ1dHRvbiIsYXJndW1lbnRzWzJdXSk6Im9wdGlvbiI9PT1hcmd1bWVudHNbMF0mJiJpdGVtcyI9PT1hcmd1bWVudHNbMV0/dGhpcy5jb250cm9sZ3JvdXAuYXBwbHkodGhpcyxbYXJndW1lbnRzWzBdLCJpdGVtcy5idXR0b24iXSk6KCJvYmplY3QiPT10eXBlb2YgYXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF0uaXRlbXMmJihhcmd1bWVudHNbMF0uaXRlbXM9e2J1dHRvbjphcmd1bWVudHNbMF0uaXRlbXN9KSx0aGlzLmNvbnRyb2xncm91cC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSksdC51aS5idXR0b24sdC5leHRlbmQodC51aSx7ZGF0ZXBpY2tlcjp7dmVyc2lvbjoiMS4xMi4xIn19KTt2YXIgbTt0LmV4dGVuZChzLnByb3RvdHlwZSx7bWFya2VyQ2xhc3NOYW1lOiJoYXNEYXRlcGlja2VyIixtYXhSb3dzOjQsX3dpZGdldERhdGVwaWNrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kcERpdn0sc2V0RGVmYXVsdHM6ZnVuY3Rpb24odCl7cmV0dXJuIGEodGhpcy5fZGVmYXVsdHMsdHx8e30pLHRoaXN9LF9hdHRhY2hEYXRlcGlja2VyOmZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvO3M9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLG49ImRpdiI9PT1zfHwic3BhbiI9PT1zLGUuaWR8fCh0aGlzLnV1aWQrPTEsZS5pZD0iZHAiK3RoaXMudXVpZCksbz10aGlzLl9uZXdJbnN0KHQoZSksbiksby5zZXR0aW5ncz10LmV4dGVuZCh7fSxpfHx7fSksImlucHV0Ij09PXM/dGhpcy5fY29ubmVjdERhdGVwaWNrZXIoZSxvKTpuJiZ0aGlzLl9pbmxpbmVEYXRlcGlja2VyKGUsbyl9LF9uZXdJbnN0OmZ1bmN0aW9uKGUsaSl7dmFyIHM9ZVswXS5pZC5yZXBsYWNlKC8oW15BLVphLXowLTlfXC1dKS9nLCJcXFxcJDEiKTtyZXR1cm57aWQ6cyxpbnB1dDplLHNlbGVjdGVkRGF5OjAsc2VsZWN0ZWRNb250aDowLHNlbGVjdGVkWWVhcjowLGRyYXdNb250aDowLGRyYXdZZWFyOjAsaW5saW5lOmksZHBEaXY6aT9uKHQoIjxkaXYgY2xhc3M9JyIrdGhpcy5faW5saW5lQ2xhc3MrIiB1aS1kYXRlcGlja2VyIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXggdWktY29ybmVyLWFsbCc+PC9kaXY+IikpOnRoaXMuZHBEaXZ9fSxfY29ubmVjdERhdGVwaWNrZXI6ZnVuY3Rpb24oZSxpKXt2YXIgcz10KGUpO2kuYXBwZW5kPXQoW10pLGkudHJpZ2dlcj10KFtdKSxzLmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKXx8KHRoaXMuX2F0dGFjaG1lbnRzKHMsaSkscy5hZGRDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkub24oImtleWRvd24iLHRoaXMuX2RvS2V5RG93bikub24oImtleXByZXNzIix0aGlzLl9kb0tleVByZXNzKS5vbigia2V5dXAiLHRoaXMuX2RvS2V5VXApLHRoaXMuX2F1dG9TaXplKGkpLHQuZGF0YShlLCJkYXRlcGlja2VyIixpKSxpLnNldHRpbmdzLmRpc2FibGVkJiZ0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlcihlKSl9LF9hdHRhY2htZW50czpmdW5jdGlvbihlLGkpe3ZhciBzLG4sbyxhPXRoaXMuX2dldChpLCJhcHBlbmRUZXh0Iikscj10aGlzLl9nZXQoaSwiaXNSVEwiKTtpLmFwcGVuZCYmaS5hcHBlbmQucmVtb3ZlKCksYSYmKGkuYXBwZW5kPXQoIjxzcGFuIGNsYXNzPSciK3RoaXMuX2FwcGVuZENsYXNzKyInPiIrYSsiPC9zcGFuPiIpLGVbcj8iYmVmb3JlIjoiYWZ0ZXIiXShpLmFwcGVuZCkpLGUub2ZmKCJmb2N1cyIsdGhpcy5fc2hvd0RhdGVwaWNrZXIpLGkudHJpZ2dlciYmaS50cmlnZ2VyLnJlbW92ZSgpLHM9dGhpcy5fZ2V0KGksInNob3dPbiIpLCgiZm9jdXMiPT09c3x8ImJvdGgiPT09cykmJmUub24oImZvY3VzIix0aGlzLl9zaG93RGF0ZXBpY2tlciksKCJidXR0b24iPT09c3x8ImJvdGgiPT09cykmJihuPXRoaXMuX2dldChpLCJidXR0b25UZXh0Iiksbz10aGlzLl9nZXQoaSwiYnV0dG9uSW1hZ2UiKSxpLnRyaWdnZXI9dCh0aGlzLl9nZXQoaSwiYnV0dG9uSW1hZ2VPbmx5Iik/dCgiPGltZy8+IikuYWRkQ2xhc3ModGhpcy5fdHJpZ2dlckNsYXNzKS5hdHRyKHtzcmM6byxhbHQ6bix0aXRsZTpufSk6dCgiPGJ1dHRvbiB0eXBlPSdidXR0b24nPjwvYnV0dG9uPiIpLmFkZENsYXNzKHRoaXMuX3RyaWdnZXJDbGFzcykuaHRtbChvP3QoIjxpbWcvPiIpLmF0dHIoe3NyYzpvLGFsdDpuLHRpdGxlOm59KTpuKSksZVtyPyJiZWZvcmUiOiJhZnRlciJdKGkudHJpZ2dlciksaS50cmlnZ2VyLm9uKCJjbGljayIsZnVuY3Rpb24oKXtyZXR1cm4gdC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyYmdC5kYXRlcGlja2VyLl9sYXN0SW5wdXQ9PT1lWzBdP3QuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTp0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nJiZ0LmRhdGVwaWNrZXIuX2xhc3RJbnB1dCE9PWVbMF0/KHQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKSx0LmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKGVbMF0pKTp0LmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKGVbMF0pLCExfSkpfSxfYXV0b1NpemU6ZnVuY3Rpb24odCl7aWYodGhpcy5fZ2V0KHQsImF1dG9TaXplIikmJiF0LmlubGluZSl7dmFyIGUsaSxzLG4sbz1uZXcgRGF0ZSgyMDA5LDExLDIwKSxhPXRoaXMuX2dldCh0LCJkYXRlRm9ybWF0Iik7YS5tYXRjaCgvW0RNXS8pJiYoZT1mdW5jdGlvbih0KXtmb3IoaT0wLHM9MCxuPTA7dC5sZW5ndGg+bjtuKyspdFtuXS5sZW5ndGg+aSYmKGk9dFtuXS5sZW5ndGgscz1uKTtyZXR1cm4gc30sby5zZXRNb250aChlKHRoaXMuX2dldCh0LGEubWF0Y2goL01NLyk/Im1vbnRoTmFtZXMiOiJtb250aE5hbWVzU2hvcnQiKSkpLG8uc2V0RGF0ZShlKHRoaXMuX2dldCh0LGEubWF0Y2goL0RELyk/ImRheU5hbWVzIjoiZGF5TmFtZXNTaG9ydCIpKSsyMC1vLmdldERheSgpKSksdC5pbnB1dC5hdHRyKCJzaXplIix0aGlzLl9mb3JtYXREYXRlKHQsbykubGVuZ3RoKX19LF9pbmxpbmVEYXRlcGlja2VyOmZ1bmN0aW9uKGUsaSl7dmFyIHM9dChlKTtzLmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKXx8KHMuYWRkQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLmFwcGVuZChpLmRwRGl2KSx0LmRhdGEoZSwiZGF0ZXBpY2tlciIsaSksdGhpcy5fc2V0RGF0ZShpLHRoaXMuX2dldERlZmF1bHREYXRlKGkpLCEwKSx0aGlzLl91cGRhdGVEYXRlcGlja2VyKGkpLHRoaXMuX3VwZGF0ZUFsdGVybmF0ZShpKSxpLnNldHRpbmdzLmRpc2FibGVkJiZ0aGlzLl9kaXNhYmxlRGF0ZXBpY2tlcihlKSxpLmRwRGl2LmNzcygiZGlzcGxheSIsImJsb2NrIikpfSxfZGlhbG9nRGF0ZXBpY2tlcjpmdW5jdGlvbihlLGkscyxuLG8pe3ZhciByLGgsbCxjLHUsZD10aGlzLl9kaWFsb2dJbnN0O3JldHVybiBkfHwodGhpcy51dWlkKz0xLHI9ImRwIit0aGlzLnV1aWQsdGhpcy5fZGlhbG9nSW5wdXQ9dCgiPGlucHV0IHR5cGU9J3RleHQnIGlkPSciK3IrIicgc3R5bGU9J3Bvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtMTAwcHg7IHdpZHRoOiAwcHg7Jy8+IiksdGhpcy5fZGlhbG9nSW5wdXQub24oImtleWRvd24iLHRoaXMuX2RvS2V5RG93biksdCgiYm9keSIpLmFwcGVuZCh0aGlzLl9kaWFsb2dJbnB1dCksZD10aGlzLl9kaWFsb2dJbnN0PXRoaXMuX25ld0luc3QodGhpcy5fZGlhbG9nSW5wdXQsITEpLGQuc2V0dGluZ3M9e30sdC5kYXRhKHRoaXMuX2RpYWxvZ0lucHV0WzBdLCJkYXRlcGlja2VyIixkKSksYShkLnNldHRpbmdzLG58fHt9KSxpPWkmJmkuY29uc3RydWN0b3I9PT1EYXRlP3RoaXMuX2Zvcm1hdERhdGUoZCxpKTppLHRoaXMuX2RpYWxvZ0lucHV0LnZhbChpKSx0aGlzLl9wb3M9bz9vLmxlbmd0aD9vOltvLnBhZ2VYLG8ucGFnZVldOm51bGwsdGhpcy5fcG9zfHwoaD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsbD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LGM9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnR8fGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCx1PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3B8fGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLHRoaXMuX3Bvcz1baC8yLTEwMCtjLGwvMi0xNTArdV0pLHRoaXMuX2RpYWxvZ0lucHV0LmNzcygibGVmdCIsdGhpcy5fcG9zWzBdKzIwKyJweCIpLmNzcygidG9wIix0aGlzLl9wb3NbMV0rInB4IiksZC5zZXR0aW5ncy5vblNlbGVjdD1zLHRoaXMuX2luRGlhbG9nPSEwLHRoaXMuZHBEaXYuYWRkQ2xhc3ModGhpcy5fZGlhbG9nQ2xhc3MpLHRoaXMuX3Nob3dEYXRlcGlja2VyKHRoaXMuX2RpYWxvZ0lucHV0WzBdKSx0LmJsb2NrVUkmJnQuYmxvY2tVSSh0aGlzLmRwRGl2KSx0LmRhdGEodGhpcy5fZGlhbG9nSW5wdXRbMF0sImRhdGVwaWNrZXIiLGQpLHRoaXN9LF9kZXN0cm95RGF0ZXBpY2tlcjpmdW5jdGlvbihlKXt2YXIgaSxzPXQoZSksbj10LmRhdGEoZSwiZGF0ZXBpY2tlciIpO3MuaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpJiYoaT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksdC5yZW1vdmVEYXRhKGUsImRhdGVwaWNrZXIiKSwiaW5wdXQiPT09aT8obi5hcHBlbmQucmVtb3ZlKCksbi50cmlnZ2VyLnJlbW92ZSgpLHMucmVtb3ZlQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLm9mZigiZm9jdXMiLHRoaXMuX3Nob3dEYXRlcGlja2VyKS5vZmYoImtleWRvd24iLHRoaXMuX2RvS2V5RG93bikub2ZmKCJrZXlwcmVzcyIsdGhpcy5fZG9LZXlQcmVzcykub2ZmKCJrZXl1cCIsdGhpcy5fZG9LZXlVcCkpOigiZGl2Ij09PWl8fCJzcGFuIj09PWkpJiZzLnJlbW92ZUNsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS5lbXB0eSgpLG09PT1uJiYobT1udWxsKSl9LF9lbmFibGVEYXRlcGlja2VyOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbj10KGUpLG89dC5kYXRhKGUsImRhdGVwaWNrZXIiKTtuLmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKSYmKGk9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLCJpbnB1dCI9PT1pPyhlLmRpc2FibGVkPSExLG8udHJpZ2dlci5maWx0ZXIoImJ1dHRvbiIpLmVhY2goZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkPSExfSkuZW5kKCkuZmlsdGVyKCJpbWciKS5jc3Moe29wYWNpdHk6IjEuMCIsY3Vyc29yOiIifSkpOigiZGl2Ij09PWl8fCJzcGFuIj09PWkpJiYocz1uLmNoaWxkcmVuKCIuIit0aGlzLl9pbmxpbmVDbGFzcykscy5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKCJ1aS1zdGF0ZS1kaXNhYmxlZCIpLHMuZmluZCgic2VsZWN0LnVpLWRhdGVwaWNrZXItbW9udGgsIHNlbGVjdC51aS1kYXRlcGlja2VyLXllYXIiKS5wcm9wKCJkaXNhYmxlZCIsITEpKSx0aGlzLl9kaXNhYmxlZElucHV0cz10Lm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cyxmdW5jdGlvbih0KXtyZXR1cm4gdD09PWU/bnVsbDp0fSkpfSxfZGlzYWJsZURhdGVwaWNrZXI6ZnVuY3Rpb24oZSl7dmFyIGkscyxuPXQoZSksbz10LmRhdGEoZSwiZGF0ZXBpY2tlciIpO24uaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpJiYoaT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksImlucHV0Ij09PWk/KGUuZGlzYWJsZWQ9ITAsby50cmlnZ2VyLmZpbHRlcigiYnV0dG9uIikuZWFjaChmdW5jdGlvbigpe3RoaXMuZGlzYWJsZWQ9ITB9KS5lbmQoKS5maWx0ZXIoImltZyIpLmNzcyh7b3BhY2l0eToiMC41IixjdXJzb3I6ImRlZmF1bHQifSkpOigiZGl2Ij09PWl8fCJzcGFuIj09PWkpJiYocz1uLmNoaWxkcmVuKCIuIit0aGlzLl9pbmxpbmVDbGFzcykscy5jaGlsZHJlbigpLmFkZENsYXNzKCJ1aS1zdGF0ZS1kaXNhYmxlZCIpLHMuZmluZCgic2VsZWN0LnVpLWRhdGVwaWNrZXItbW9udGgsIHNlbGVjdC51aS1kYXRlcGlja2VyLXllYXIiKS5wcm9wKCJkaXNhYmxlZCIsITApKSx0aGlzLl9kaXNhYmxlZElucHV0cz10Lm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cyxmdW5jdGlvbih0KXtyZXR1cm4gdD09PWU/bnVsbDp0fSksdGhpcy5fZGlzYWJsZWRJbnB1dHNbdGhpcy5fZGlzYWJsZWRJbnB1dHMubGVuZ3RoXT1lKX0sX2lzRGlzYWJsZWREYXRlcGlja2VyOmZ1bmN0aW9uKHQpe2lmKCF0KXJldHVybiExO2Zvcih2YXIgZT0wO3RoaXMuX2Rpc2FibGVkSW5wdXRzLmxlbmd0aD5lO2UrKylpZih0aGlzLl9kaXNhYmxlZElucHV0c1tlXT09PXQpcmV0dXJuITA7cmV0dXJuITF9LF9nZXRJbnN0OmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gdC5kYXRhKGUsImRhdGVwaWNrZXIiKX1jYXRjaChpKXt0aHJvdyJNaXNzaW5nIGluc3RhbmNlIGRhdGEgZm9yIHRoaXMgZGF0ZXBpY2tlciJ9fSxfb3B0aW9uRGF0ZXBpY2tlcjpmdW5jdGlvbihlLGkscyl7dmFyIG4sbyxyLGgsbD10aGlzLl9nZXRJbnN0KGUpO3JldHVybiAyPT09YXJndW1lbnRzLmxlbmd0aCYmInN0cmluZyI9PXR5cGVvZiBpPyJkZWZhdWx0cyI9PT1pP3QuZXh0ZW5kKHt9LHQuZGF0ZXBpY2tlci5fZGVmYXVsdHMpOmw/ImFsbCI9PT1pP3QuZXh0ZW5kKHt9LGwuc2V0dGluZ3MpOnRoaXMuX2dldChsLGkpOm51bGw6KG49aXx8e30sInN0cmluZyI9PXR5cGVvZiBpJiYobj17fSxuW2ldPXMpLGwmJih0aGlzLl9jdXJJbnN0PT09bCYmdGhpcy5faGlkZURhdGVwaWNrZXIoKSxvPXRoaXMuX2dldERhdGVEYXRlcGlja2VyKGUsITApLHI9dGhpcy5fZ2V0TWluTWF4RGF0ZShsLCJtaW4iKSxoPXRoaXMuX2dldE1pbk1heERhdGUobCwibWF4IiksYShsLnNldHRpbmdzLG4pLG51bGwhPT1yJiZ2b2lkIDAhPT1uLmRhdGVGb3JtYXQmJnZvaWQgMD09PW4ubWluRGF0ZSYmKGwuc2V0dGluZ3MubWluRGF0ZT10aGlzLl9mb3JtYXREYXRlKGwscikpLG51bGwhPT1oJiZ2b2lkIDAhPT1uLmRhdGVGb3JtYXQmJnZvaWQgMD09PW4ubWF4RGF0ZSYmKGwuc2V0dGluZ3MubWF4RGF0ZT10aGlzLl9mb3JtYXREYXRlKGwsaCkpLCJkaXNhYmxlZCJpbiBuJiYobi5kaXNhYmxlZD90aGlzLl9kaXNhYmxlRGF0ZXBpY2tlcihlKTp0aGlzLl9lbmFibGVEYXRlcGlja2VyKGUpKSx0aGlzLl9hdHRhY2htZW50cyh0KGUpLGwpLHRoaXMuX2F1dG9TaXplKGwpLHRoaXMuX3NldERhdGUobCxvKSx0aGlzLl91cGRhdGVBbHRlcm5hdGUobCksdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihsKSksdm9pZCAwKX0sX2NoYW5nZURhdGVwaWNrZXI6ZnVuY3Rpb24odCxlLGkpe3RoaXMuX29wdGlvbkRhdGVwaWNrZXIodCxlLGkpfSxfcmVmcmVzaERhdGVwaWNrZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZ2V0SW5zdCh0KTtlJiZ0aGlzLl91cGRhdGVEYXRlcGlja2VyKGUpfSxfc2V0RGF0ZURhdGVwaWNrZXI6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9nZXRJbnN0KHQpO2kmJih0aGlzLl9zZXREYXRlKGksZSksdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpKSx0aGlzLl91cGRhdGVBbHRlcm5hdGUoaSkpfSxfZ2V0RGF0ZURhdGVwaWNrZXI6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9nZXRJbnN0KHQpO3JldHVybiBpJiYhaS5pbmxpbmUmJnRoaXMuX3NldERhdGVGcm9tRmllbGQoaSxlKSxpP3RoaXMuX2dldERhdGUoaSk6bnVsbH0sX2RvS2V5RG93bjpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbz10LmRhdGVwaWNrZXIuX2dldEluc3QoZS50YXJnZXQpLGE9ITAscj1vLmRwRGl2LmlzKCIudWktZGF0ZXBpY2tlci1ydGwiKTtpZihvLl9rZXlFdmVudD0hMCx0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nKXN3aXRjaChlLmtleUNvZGUpe2Nhc2UgOTp0LmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCksYT0hMTticmVhaztjYXNlIDEzOnJldHVybiBuPXQoInRkLiIrdC5kYXRlcGlja2VyLl9kYXlPdmVyQ2xhc3MrIjpub3QoLiIrdC5kYXRlcGlja2VyLl9jdXJyZW50Q2xhc3MrIikiLG8uZHBEaXYpLG5bMF0mJnQuZGF0ZXBpY2tlci5fc2VsZWN0RGF5KGUudGFyZ2V0LG8uc2VsZWN0ZWRNb250aCxvLnNlbGVjdGVkWWVhcixuWzBdKSxpPXQuZGF0ZXBpY2tlci5fZ2V0KG8sIm9uU2VsZWN0IiksaT8ocz10LmRhdGVwaWNrZXIuX2Zvcm1hdERhdGUobyksaS5hcHBseShvLmlucHV0P28uaW5wdXRbMF06bnVsbCxbcyxvXSkpOnQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKSwhMTtjYXNlIDI3OnQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTticmVhaztjYXNlIDMzOnQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCxlLmN0cmxLZXk/LXQuZGF0ZXBpY2tlci5fZ2V0KG8sInN0ZXBCaWdNb250aHMiKTotdC5kYXRlcGlja2VyLl9nZXQobywic3RlcE1vbnRocyIpLCJNIik7YnJlYWs7Y2FzZSAzNDp0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsZS5jdHJsS2V5Pyt0LmRhdGVwaWNrZXIuX2dldChvLCJzdGVwQmlnTW9udGhzIik6K3QuZGF0ZXBpY2tlci5fZ2V0KG8sInN0ZXBNb250aHMiKSwiTSIpO2JyZWFrO2Nhc2UgMzU6KGUuY3RybEtleXx8ZS5tZXRhS2V5KSYmdC5kYXRlcGlja2VyLl9jbGVhckRhdGUoZS50YXJnZXQpLGE9ZS5jdHJsS2V5fHxlLm1ldGFLZXk7YnJlYWs7Y2FzZSAzNjooZS5jdHJsS2V5fHxlLm1ldGFLZXkpJiZ0LmRhdGVwaWNrZXIuX2dvdG9Ub2RheShlLnRhcmdldCksYT1lLmN0cmxLZXl8fGUubWV0YUtleTticmVhaztjYXNlIDM3OihlLmN0cmxLZXl8fGUubWV0YUtleSkmJnQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCxyPzE6LTEsIkQiKSxhPWUuY3RybEtleXx8ZS5tZXRhS2V5LGUub3JpZ2luYWxFdmVudC5hbHRLZXkmJnQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCxlLmN0cmxLZXk/LXQuZGF0ZXBpY2tlci5fZ2V0KG8sInN0ZXBCaWdNb250aHMiKTotdC5kYXRlcGlja2VyLl9nZXQobywic3RlcE1vbnRocyIpLCJNIik7YnJlYWs7Y2FzZSAzODooZS5jdHJsS2V5fHxlLm1ldGFLZXkpJiZ0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsLTcsIkQiKSxhPWUuY3RybEtleXx8ZS5tZXRhS2V5O2JyZWFrO2Nhc2UgMzk6KGUuY3RybEtleXx8ZS5tZXRhS2V5KSYmdC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGUudGFyZ2V0LHI/LTE6MSwiRCIpLGE9ZS5jdHJsS2V5fHxlLm1ldGFLZXksZS5vcmlnaW5hbEV2ZW50LmFsdEtleSYmdC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGUudGFyZ2V0LGUuY3RybEtleT8rdC5kYXRlcGlja2VyLl9nZXQobywic3RlcEJpZ01vbnRocyIpOit0LmRhdGVwaWNrZXIuX2dldChvLCJzdGVwTW9udGhzIiksIk0iKTticmVhaztjYXNlIDQwOihlLmN0cmxLZXl8fGUubWV0YUtleSkmJnQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCw3LCJEIiksYT1lLmN0cmxLZXl8fGUubWV0YUtleTticmVhaztkZWZhdWx0OmE9ITF9ZWxzZSAzNj09PWUua2V5Q29kZSYmZS5jdHJsS2V5P3QuZGF0ZXBpY2tlci5fc2hvd0RhdGVwaWNrZXIodGhpcyk6YT0hMTthJiYoZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCkpfSxfZG9LZXlQcmVzczpmdW5jdGlvbihlKXt2YXIgaSxzLG49dC5kYXRlcGlja2VyLl9nZXRJbnN0KGUudGFyZ2V0KTtyZXR1cm4gdC5kYXRlcGlja2VyLl9nZXQobiwiY29uc3RyYWluSW5wdXQiKT8oaT10LmRhdGVwaWNrZXIuX3Bvc3NpYmxlQ2hhcnModC5kYXRlcGlja2VyLl9nZXQobiwiZGF0ZUZvcm1hdCIpKSxzPVN0cmluZy5mcm9tQ2hhckNvZGUobnVsbD09ZS5jaGFyQ29kZT9lLmtleUNvZGU6ZS5jaGFyQ29kZSksZS5jdHJsS2V5fHxlLm1ldGFLZXl8fCIgIj5zfHwhaXx8aS5pbmRleE9mKHMpPi0xKTp2b2lkIDB9LF9kb0tleVVwOmZ1bmN0aW9uKGUpe3ZhciBpLHM9dC5kYXRlcGlja2VyLl9nZXRJbnN0KGUudGFyZ2V0KTtpZihzLmlucHV0LnZhbCgpIT09cy5sYXN0VmFsKXRyeXtpPXQuZGF0ZXBpY2tlci5wYXJzZURhdGUodC5kYXRlcGlja2VyLl9nZXQocywiZGF0ZUZvcm1hdCIpLHMuaW5wdXQ/cy5pbnB1dC52YWwoKTpudWxsLHQuZGF0ZXBpY2tlci5fZ2V0Rm9ybWF0Q29uZmlnKHMpKSxpJiYodC5kYXRlcGlja2VyLl9zZXREYXRlRnJvbUZpZWxkKHMpLHQuZGF0ZXBpY2tlci5fdXBkYXRlQWx0ZXJuYXRlKHMpLHQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcihzKSl9Y2F0Y2gobil7fXJldHVybiEwfSxfc2hvd0RhdGVwaWNrZXI6ZnVuY3Rpb24oZSl7aWYoZT1lLnRhcmdldHx8ZSwiaW5wdXQiIT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiYoZT10KCJpbnB1dCIsZS5wYXJlbnROb2RlKVswXSksIXQuZGF0ZXBpY2tlci5faXNEaXNhYmxlZERhdGVwaWNrZXIoZSkmJnQuZGF0ZXBpY2tlci5fbGFzdElucHV0IT09ZSl7dmFyIHMsbixvLHIsaCxsLGM7cz10LmRhdGVwaWNrZXIuX2dldEluc3QoZSksdC5kYXRlcGlja2VyLl9jdXJJbnN0JiZ0LmRhdGVwaWNrZXIuX2N1ckluc3QhPT1zJiYodC5kYXRlcGlja2VyLl9jdXJJbnN0LmRwRGl2LnN0b3AoITAsITApLHMmJnQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcmJnQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIodC5kYXRlcGlja2VyLl9jdXJJbnN0LmlucHV0WzBdKSksbj10LmRhdGVwaWNrZXIuX2dldChzLCJiZWZvcmVTaG93Iiksbz1uP24uYXBwbHkoZSxbZSxzXSk6e30sbyE9PSExJiYoYShzLnNldHRpbmdzLG8pLHMubGFzdFZhbD1udWxsLHQuZGF0ZXBpY2tlci5fbGFzdElucHV0PWUsdC5kYXRlcGlja2VyLl9zZXREYXRlRnJvbUZpZWxkKHMpLHQuZGF0ZXBpY2tlci5faW5EaWFsb2cmJihlLnZhbHVlPSIiKSx0LmRhdGVwaWNrZXIuX3Bvc3x8KHQuZGF0ZXBpY2tlci5fcG9zPXQuZGF0ZXBpY2tlci5fZmluZFBvcyhlKSx0LmRhdGVwaWNrZXIuX3Bvc1sxXSs9ZS5vZmZzZXRIZWlnaHQpLHI9ITEsdChlKS5wYXJlbnRzKCkuZWFjaChmdW5jdGlvbigpe3JldHVybiByfD0iZml4ZWQiPT09dCh0aGlzKS5jc3MoInBvc2l0aW9uIiksIXJ9KSxoPXtsZWZ0OnQuZGF0ZXBpY2tlci5fcG9zWzBdLHRvcDp0LmRhdGVwaWNrZXIuX3Bvc1sxXX0sdC5kYXRlcGlja2VyLl9wb3M9bnVsbCxzLmRwRGl2LmVtcHR5KCkscy5kcERpdi5jc3Moe3Bvc2l0aW9uOiJhYnNvbHV0ZSIsZGlzcGxheToiYmxvY2siLHRvcDoiLTEwMDBweCJ9KSx0LmRhdGVwaWNrZXIuX3VwZGF0ZURhdGVwaWNrZXIocyksaD10LmRhdGVwaWNrZXIuX2NoZWNrT2Zmc2V0KHMsaCxyKSxzLmRwRGl2LmNzcyh7cG9zaXRpb246dC5kYXRlcGlja2VyLl9pbkRpYWxvZyYmdC5ibG9ja1VJPyJzdGF0aWMiOnI/ImZpeGVkIjoiYWJzb2x1dGUiLGRpc3BsYXk6Im5vbmUiLGxlZnQ6aC5sZWZ0KyJweCIsdG9wOmgudG9wKyJweCJ9KSxzLmlubGluZXx8KGw9dC5kYXRlcGlja2VyLl9nZXQocywic2hvd0FuaW0iKSxjPXQuZGF0ZXBpY2tlci5fZ2V0KHMsImR1cmF0aW9uIikscy5kcERpdi5jc3MoInotaW5kZXgiLGkodChlKSkrMSksdC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZz0hMCx0LmVmZmVjdHMmJnQuZWZmZWN0cy5lZmZlY3RbbF0/cy5kcERpdi5zaG93KGwsdC5kYXRlcGlja2VyLl9nZXQocywic2hvd09wdGlvbnMiKSxjKTpzLmRwRGl2W2x8fCJzaG93Il0obD9jOm51bGwpLHQuZGF0ZXBpY2tlci5fc2hvdWxkRm9jdXNJbnB1dChzKSYmcy5pbnB1dC50cmlnZ2VyKCJmb2N1cyIpLHQuZGF0ZXBpY2tlci5fY3VySW5zdD1zKSkKfX0sX3VwZGF0ZURhdGVwaWNrZXI6ZnVuY3Rpb24oZSl7dGhpcy5tYXhSb3dzPTQsbT1lLGUuZHBEaXYuZW1wdHkoKS5hcHBlbmQodGhpcy5fZ2VuZXJhdGVIVE1MKGUpKSx0aGlzLl9hdHRhY2hIYW5kbGVycyhlKTt2YXIgaSxzPXRoaXMuX2dldE51bWJlck9mTW9udGhzKGUpLG49c1sxXSxhPTE3LHI9ZS5kcERpdi5maW5kKCIuIit0aGlzLl9kYXlPdmVyQ2xhc3MrIiBhIik7ci5sZW5ndGg+MCYmby5hcHBseShyLmdldCgwKSksZS5kcERpdi5yZW1vdmVDbGFzcygidWktZGF0ZXBpY2tlci1tdWx0aS0yIHVpLWRhdGVwaWNrZXItbXVsdGktMyB1aS1kYXRlcGlja2VyLW11bHRpLTQiKS53aWR0aCgiIiksbj4xJiZlLmRwRGl2LmFkZENsYXNzKCJ1aS1kYXRlcGlja2VyLW11bHRpLSIrbikuY3NzKCJ3aWR0aCIsYSpuKyJlbSIpLGUuZHBEaXZbKDEhPT1zWzBdfHwxIT09c1sxXT8iYWRkIjoicmVtb3ZlIikrIkNsYXNzIl0oInVpLWRhdGVwaWNrZXItbXVsdGkiKSxlLmRwRGl2Wyh0aGlzLl9nZXQoZSwiaXNSVEwiKT8iYWRkIjoicmVtb3ZlIikrIkNsYXNzIl0oInVpLWRhdGVwaWNrZXItcnRsIiksZT09PXQuZGF0ZXBpY2tlci5fY3VySW5zdCYmdC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyYmdC5kYXRlcGlja2VyLl9zaG91bGRGb2N1c0lucHV0KGUpJiZlLmlucHV0LnRyaWdnZXIoImZvY3VzIiksZS55ZWFyc2h0bWwmJihpPWUueWVhcnNodG1sLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpPT09ZS55ZWFyc2h0bWwmJmUueWVhcnNodG1sJiZlLmRwRGl2LmZpbmQoInNlbGVjdC51aS1kYXRlcGlja2VyLXllYXI6Zmlyc3QiKS5yZXBsYWNlV2l0aChlLnllYXJzaHRtbCksaT1lLnllYXJzaHRtbD1udWxsfSwwKSl9LF9zaG91bGRGb2N1c0lucHV0OmZ1bmN0aW9uKHQpe3JldHVybiB0LmlucHV0JiZ0LmlucHV0LmlzKCI6dmlzaWJsZSIpJiYhdC5pbnB1dC5pcygiOmRpc2FibGVkIikmJiF0LmlucHV0LmlzKCI6Zm9jdXMiKX0sX2NoZWNrT2Zmc2V0OmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj1lLmRwRGl2Lm91dGVyV2lkdGgoKSxvPWUuZHBEaXYub3V0ZXJIZWlnaHQoKSxhPWUuaW5wdXQ/ZS5pbnB1dC5vdXRlcldpZHRoKCk6MCxyPWUuaW5wdXQ/ZS5pbnB1dC5vdXRlckhlaWdodCgpOjAsaD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgrKHM/MDp0KGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpLGw9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCsocz8wOnQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpKTtyZXR1cm4gaS5sZWZ0LT10aGlzLl9nZXQoZSwiaXNSVEwiKT9uLWE6MCxpLmxlZnQtPXMmJmkubGVmdD09PWUuaW5wdXQub2Zmc2V0KCkubGVmdD90KGRvY3VtZW50KS5zY3JvbGxMZWZ0KCk6MCxpLnRvcC09cyYmaS50b3A9PT1lLmlucHV0Lm9mZnNldCgpLnRvcCtyP3QoZG9jdW1lbnQpLnNjcm9sbFRvcCgpOjAsaS5sZWZ0LT1NYXRoLm1pbihpLmxlZnQsaS5sZWZ0K24+aCYmaD5uP01hdGguYWJzKGkubGVmdCtuLWgpOjApLGkudG9wLT1NYXRoLm1pbihpLnRvcCxpLnRvcCtvPmwmJmw+bz9NYXRoLmFicyhvK3IpOjApLGl9LF9maW5kUG9zOmZ1bmN0aW9uKGUpe2Zvcih2YXIgaSxzPXRoaXMuX2dldEluc3QoZSksbj10aGlzLl9nZXQocywiaXNSVEwiKTtlJiYoImhpZGRlbiI9PT1lLnR5cGV8fDEhPT1lLm5vZGVUeXBlfHx0LmV4cHIuZmlsdGVycy5oaWRkZW4oZSkpOyllPWVbbj8icHJldmlvdXNTaWJsaW5nIjoibmV4dFNpYmxpbmciXTtyZXR1cm4gaT10KGUpLm9mZnNldCgpLFtpLmxlZnQsaS50b3BdfSxfaGlkZURhdGVwaWNrZXI6ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG8sYT10aGlzLl9jdXJJbnN0OyFhfHxlJiZhIT09dC5kYXRhKGUsImRhdGVwaWNrZXIiKXx8dGhpcy5fZGF0ZXBpY2tlclNob3dpbmcmJihpPXRoaXMuX2dldChhLCJzaG93QW5pbSIpLHM9dGhpcy5fZ2V0KGEsImR1cmF0aW9uIiksbj1mdW5jdGlvbigpe3QuZGF0ZXBpY2tlci5fdGlkeURpYWxvZyhhKX0sdC5lZmZlY3RzJiYodC5lZmZlY3RzLmVmZmVjdFtpXXx8dC5lZmZlY3RzW2ldKT9hLmRwRGl2LmhpZGUoaSx0LmRhdGVwaWNrZXIuX2dldChhLCJzaG93T3B0aW9ucyIpLHMsbik6YS5kcERpdlsic2xpZGVEb3duIj09PWk/InNsaWRlVXAiOiJmYWRlSW4iPT09aT8iZmFkZU91dCI6ImhpZGUiXShpP3M6bnVsbCxuKSxpfHxuKCksdGhpcy5fZGF0ZXBpY2tlclNob3dpbmc9ITEsbz10aGlzLl9nZXQoYSwib25DbG9zZSIpLG8mJm8uYXBwbHkoYS5pbnB1dD9hLmlucHV0WzBdOm51bGwsW2EuaW5wdXQ/YS5pbnB1dC52YWwoKToiIixhXSksdGhpcy5fbGFzdElucHV0PW51bGwsdGhpcy5faW5EaWFsb2cmJih0aGlzLl9kaWFsb2dJbnB1dC5jc3Moe3Bvc2l0aW9uOiJhYnNvbHV0ZSIsbGVmdDoiMCIsdG9wOiItMTAwcHgifSksdC5ibG9ja1VJJiYodC51bmJsb2NrVUkoKSx0KCJib2R5IikuYXBwZW5kKHRoaXMuZHBEaXYpKSksdGhpcy5faW5EaWFsb2c9ITEpfSxfdGlkeURpYWxvZzpmdW5jdGlvbih0KXt0LmRwRGl2LnJlbW92ZUNsYXNzKHRoaXMuX2RpYWxvZ0NsYXNzKS5vZmYoIi51aS1kYXRlcGlja2VyLWNhbGVuZGFyIil9LF9jaGVja0V4dGVybmFsQ2xpY2s6ZnVuY3Rpb24oZSl7aWYodC5kYXRlcGlja2VyLl9jdXJJbnN0KXt2YXIgaT10KGUudGFyZ2V0KSxzPXQuZGF0ZXBpY2tlci5fZ2V0SW5zdChpWzBdKTsoaVswXS5pZCE9PXQuZGF0ZXBpY2tlci5fbWFpbkRpdklkJiYwPT09aS5wYXJlbnRzKCIjIit0LmRhdGVwaWNrZXIuX21haW5EaXZJZCkubGVuZ3RoJiYhaS5oYXNDbGFzcyh0LmRhdGVwaWNrZXIubWFya2VyQ2xhc3NOYW1lKSYmIWkuY2xvc2VzdCgiLiIrdC5kYXRlcGlja2VyLl90cmlnZ2VyQ2xhc3MpLmxlbmd0aCYmdC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyYmKCF0LmRhdGVwaWNrZXIuX2luRGlhbG9nfHwhdC5ibG9ja1VJKXx8aS5oYXNDbGFzcyh0LmRhdGVwaWNrZXIubWFya2VyQ2xhc3NOYW1lKSYmdC5kYXRlcGlja2VyLl9jdXJJbnN0IT09cykmJnQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKX19LF9hZGp1c3REYXRlOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj10KGUpLG89dGhpcy5fZ2V0SW5zdChuWzBdKTt0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcihuWzBdKXx8KHRoaXMuX2FkanVzdEluc3REYXRlKG8saSsoIk0iPT09cz90aGlzLl9nZXQobywic2hvd0N1cnJlbnRBdFBvcyIpOjApLHMpLHRoaXMuX3VwZGF0ZURhdGVwaWNrZXIobykpfSxfZ290b1RvZGF5OmZ1bmN0aW9uKGUpe3ZhciBpLHM9dChlKSxuPXRoaXMuX2dldEluc3Qoc1swXSk7dGhpcy5fZ2V0KG4sImdvdG9DdXJyZW50IikmJm4uY3VycmVudERheT8obi5zZWxlY3RlZERheT1uLmN1cnJlbnREYXksbi5kcmF3TW9udGg9bi5zZWxlY3RlZE1vbnRoPW4uY3VycmVudE1vbnRoLG4uZHJhd1llYXI9bi5zZWxlY3RlZFllYXI9bi5jdXJyZW50WWVhcik6KGk9bmV3IERhdGUsbi5zZWxlY3RlZERheT1pLmdldERhdGUoKSxuLmRyYXdNb250aD1uLnNlbGVjdGVkTW9udGg9aS5nZXRNb250aCgpLG4uZHJhd1llYXI9bi5zZWxlY3RlZFllYXI9aS5nZXRGdWxsWWVhcigpKSx0aGlzLl9ub3RpZnlDaGFuZ2UobiksdGhpcy5fYWRqdXN0RGF0ZShzKX0sX3NlbGVjdE1vbnRoWWVhcjpmdW5jdGlvbihlLGkscyl7dmFyIG49dChlKSxvPXRoaXMuX2dldEluc3QoblswXSk7b1sic2VsZWN0ZWQiKygiTSI9PT1zPyJNb250aCI6IlllYXIiKV09b1siZHJhdyIrKCJNIj09PXM/Ik1vbnRoIjoiWWVhciIpXT1wYXJzZUludChpLm9wdGlvbnNbaS5zZWxlY3RlZEluZGV4XS52YWx1ZSwxMCksdGhpcy5fbm90aWZ5Q2hhbmdlKG8pLHRoaXMuX2FkanVzdERhdGUobil9LF9zZWxlY3REYXk6ZnVuY3Rpb24oZSxpLHMsbil7dmFyIG8sYT10KGUpO3QobikuaGFzQ2xhc3ModGhpcy5fdW5zZWxlY3RhYmxlQ2xhc3MpfHx0aGlzLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcihhWzBdKXx8KG89dGhpcy5fZ2V0SW5zdChhWzBdKSxvLnNlbGVjdGVkRGF5PW8uY3VycmVudERheT10KCJhIixuKS5odG1sKCksby5zZWxlY3RlZE1vbnRoPW8uY3VycmVudE1vbnRoPWksby5zZWxlY3RlZFllYXI9by5jdXJyZW50WWVhcj1zLHRoaXMuX3NlbGVjdERhdGUoZSx0aGlzLl9mb3JtYXREYXRlKG8sby5jdXJyZW50RGF5LG8uY3VycmVudE1vbnRoLG8uY3VycmVudFllYXIpKSl9LF9jbGVhckRhdGU6ZnVuY3Rpb24oZSl7dmFyIGk9dChlKTt0aGlzLl9zZWxlY3REYXRlKGksIiIpfSxfc2VsZWN0RGF0ZTpmdW5jdGlvbihlLGkpe3ZhciBzLG49dChlKSxvPXRoaXMuX2dldEluc3QoblswXSk7aT1udWxsIT1pP2k6dGhpcy5fZm9ybWF0RGF0ZShvKSxvLmlucHV0JiZvLmlucHV0LnZhbChpKSx0aGlzLl91cGRhdGVBbHRlcm5hdGUobykscz10aGlzLl9nZXQobywib25TZWxlY3QiKSxzP3MuYXBwbHkoby5pbnB1dD9vLmlucHV0WzBdOm51bGwsW2ksb10pOm8uaW5wdXQmJm8uaW5wdXQudHJpZ2dlcigiY2hhbmdlIiksby5pbmxpbmU/dGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihvKToodGhpcy5faGlkZURhdGVwaWNrZXIoKSx0aGlzLl9sYXN0SW5wdXQ9by5pbnB1dFswXSwib2JqZWN0IiE9dHlwZW9mIG8uaW5wdXRbMF0mJm8uaW5wdXQudHJpZ2dlcigiZm9jdXMiKSx0aGlzLl9sYXN0SW5wdXQ9bnVsbCl9LF91cGRhdGVBbHRlcm5hdGU6ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG89dGhpcy5fZ2V0KGUsImFsdEZpZWxkIik7byYmKGk9dGhpcy5fZ2V0KGUsImFsdEZvcm1hdCIpfHx0aGlzLl9nZXQoZSwiZGF0ZUZvcm1hdCIpLHM9dGhpcy5fZ2V0RGF0ZShlKSxuPXRoaXMuZm9ybWF0RGF0ZShpLHMsdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKGUpKSx0KG8pLnZhbChuKSl9LG5vV2Vla2VuZHM6ZnVuY3Rpb24odCl7dmFyIGU9dC5nZXREYXkoKTtyZXR1cm5bZT4wJiY2PmUsIiJdfSxpc284NjAxV2VlazpmdW5jdGlvbih0KXt2YXIgZSxpPW5ldyBEYXRlKHQuZ2V0VGltZSgpKTtyZXR1cm4gaS5zZXREYXRlKGkuZ2V0RGF0ZSgpKzQtKGkuZ2V0RGF5KCl8fDcpKSxlPWkuZ2V0VGltZSgpLGkuc2V0TW9udGgoMCksaS5zZXREYXRlKDEpLE1hdGguZmxvb3IoTWF0aC5yb3VuZCgoZS1pKS84NjRlNSkvNykrMX0scGFyc2VEYXRlOmZ1bmN0aW9uKGUsaSxzKXtpZihudWxsPT1lfHxudWxsPT1pKXRocm93IkludmFsaWQgYXJndW1lbnRzIjtpZihpPSJvYmplY3QiPT10eXBlb2YgaT8iIitpOmkrIiIsIiI9PT1pKXJldHVybiBudWxsO3ZhciBuLG8sYSxyLGg9MCxsPShzP3Muc2hvcnRZZWFyQ3V0b2ZmOm51bGwpfHx0aGlzLl9kZWZhdWx0cy5zaG9ydFllYXJDdXRvZmYsYz0ic3RyaW5nIiE9dHlwZW9mIGw/bDoobmV3IERhdGUpLmdldEZ1bGxZZWFyKCklMTAwK3BhcnNlSW50KGwsMTApLHU9KHM/cy5kYXlOYW1lc1Nob3J0Om51bGwpfHx0aGlzLl9kZWZhdWx0cy5kYXlOYW1lc1Nob3J0LGQ9KHM/cy5kYXlOYW1lczpudWxsKXx8dGhpcy5fZGVmYXVsdHMuZGF5TmFtZXMscD0ocz9zLm1vbnRoTmFtZXNTaG9ydDpudWxsKXx8dGhpcy5fZGVmYXVsdHMubW9udGhOYW1lc1Nob3J0LGY9KHM/cy5tb250aE5hbWVzOm51bGwpfHx0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzLGc9LTEsbT0tMSxfPS0xLHY9LTEsYj0hMSx5PWZ1bmN0aW9uKHQpe3ZhciBpPWUubGVuZ3RoPm4rMSYmZS5jaGFyQXQobisxKT09PXQ7cmV0dXJuIGkmJm4rKyxpfSx3PWZ1bmN0aW9uKHQpe3ZhciBlPXkodCkscz0iQCI9PT10PzE0OiIhIj09PXQ/MjA6InkiPT09dCYmZT80OiJvIj09PXQ/MzoyLG49InkiPT09dD9zOjEsbz1SZWdFeHAoIl5cXGR7IituKyIsIitzKyJ9IiksYT1pLnN1YnN0cmluZyhoKS5tYXRjaChvKTtpZighYSl0aHJvdyJNaXNzaW5nIG51bWJlciBhdCBwb3NpdGlvbiAiK2g7cmV0dXJuIGgrPWFbMF0ubGVuZ3RoLHBhcnNlSW50KGFbMF0sMTApfSxrPWZ1bmN0aW9uKGUscyxuKXt2YXIgbz0tMSxhPXQubWFwKHkoZSk/bjpzLGZ1bmN0aW9uKHQsZSl7cmV0dXJuW1tlLHRdXX0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4tKHRbMV0ubGVuZ3RoLWVbMV0ubGVuZ3RoKX0pO2lmKHQuZWFjaChhLGZ1bmN0aW9uKHQsZSl7dmFyIHM9ZVsxXTtyZXR1cm4gaS5zdWJzdHIoaCxzLmxlbmd0aCkudG9Mb3dlckNhc2UoKT09PXMudG9Mb3dlckNhc2UoKT8obz1lWzBdLGgrPXMubGVuZ3RoLCExKTp2b2lkIDB9KSwtMSE9PW8pcmV0dXJuIG8rMTt0aHJvdyJVbmtub3duIG5hbWUgYXQgcG9zaXRpb24gIitofSx4PWZ1bmN0aW9uKCl7aWYoaS5jaGFyQXQoaCkhPT1lLmNoYXJBdChuKSl0aHJvdyJVbmV4cGVjdGVkIGxpdGVyYWwgYXQgcG9zaXRpb24gIitoO2grK307Zm9yKG49MDtlLmxlbmd0aD5uO24rKylpZihiKSInIiE9PWUuY2hhckF0KG4pfHx5KCInIik/eCgpOmI9ITE7ZWxzZSBzd2l0Y2goZS5jaGFyQXQobikpe2Nhc2UiZCI6Xz13KCJkIik7YnJlYWs7Y2FzZSJEIjprKCJEIix1LGQpO2JyZWFrO2Nhc2UibyI6dj13KCJvIik7YnJlYWs7Y2FzZSJtIjptPXcoIm0iKTticmVhaztjYXNlIk0iOm09aygiTSIscCxmKTticmVhaztjYXNlInkiOmc9dygieSIpO2JyZWFrO2Nhc2UiQCI6cj1uZXcgRGF0ZSh3KCJAIikpLGc9ci5nZXRGdWxsWWVhcigpLG09ci5nZXRNb250aCgpKzEsXz1yLmdldERhdGUoKTticmVhaztjYXNlIiEiOnI9bmV3IERhdGUoKHcoIiEiKS10aGlzLl90aWNrc1RvMTk3MCkvMWU0KSxnPXIuZ2V0RnVsbFllYXIoKSxtPXIuZ2V0TW9udGgoKSsxLF89ci5nZXREYXRlKCk7YnJlYWs7Y2FzZSInIjp5KCInIik/eCgpOmI9ITA7YnJlYWs7ZGVmYXVsdDp4KCl9aWYoaS5sZW5ndGg+aCYmKGE9aS5zdWJzdHIoaCksIS9eXHMrLy50ZXN0KGEpKSl0aHJvdyJFeHRyYS91bnBhcnNlZCBjaGFyYWN0ZXJzIGZvdW5kIGluIGRhdGU6ICIrYTtpZigtMT09PWc/Zz0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCk6MTAwPmcmJihnKz0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCktKG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpJTEwMCsoYz49Zz8wOi0xMDApKSx2Pi0xKWZvcihtPTEsXz12Ozspe2lmKG89dGhpcy5fZ2V0RGF5c0luTW9udGgoZyxtLTEpLG8+PV8pYnJlYWs7bSsrLF8tPW99aWYocj10aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShnLG0tMSxfKSksci5nZXRGdWxsWWVhcigpIT09Z3x8ci5nZXRNb250aCgpKzEhPT1tfHxyLmdldERhdGUoKSE9PV8pdGhyb3ciSW52YWxpZCBkYXRlIjtyZXR1cm4gcn0sQVRPTToieXktbW0tZGQiLENPT0tJRToiRCwgZGQgTSB5eSIsSVNPXzg2MDE6Inl5LW1tLWRkIixSRkNfODIyOiJELCBkIE0geSIsUkZDXzg1MDoiREQsIGRkLU0teSIsUkZDXzEwMzY6IkQsIGQgTSB5IixSRkNfMTEyMzoiRCwgZCBNIHl5IixSRkNfMjgyMjoiRCwgZCBNIHl5IixSU1M6IkQsIGQgTSB5IixUSUNLUzoiISIsVElNRVNUQU1QOiJAIixXM0M6Inl5LW1tLWRkIixfdGlja3NUbzE5NzA6MWU3KjYwKjYwKjI0Kig3MTg2ODUrTWF0aC5mbG9vcig0OTIuNSktTWF0aC5mbG9vcigxOS43KStNYXRoLmZsb29yKDQuOTI1KSksZm9ybWF0RGF0ZTpmdW5jdGlvbih0LGUsaSl7aWYoIWUpcmV0dXJuIiI7dmFyIHMsbj0oaT9pLmRheU5hbWVzU2hvcnQ6bnVsbCl8fHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsbz0oaT9pLmRheU5hbWVzOm51bGwpfHx0aGlzLl9kZWZhdWx0cy5kYXlOYW1lcyxhPShpP2kubW9udGhOYW1lc1Nob3J0Om51bGwpfHx0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzU2hvcnQscj0oaT9pLm1vbnRoTmFtZXM6bnVsbCl8fHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsaD1mdW5jdGlvbihlKXt2YXIgaT10Lmxlbmd0aD5zKzEmJnQuY2hhckF0KHMrMSk9PT1lO3JldHVybiBpJiZzKyssaX0sbD1mdW5jdGlvbih0LGUsaSl7dmFyIHM9IiIrZTtpZihoKHQpKWZvcig7aT5zLmxlbmd0aDspcz0iMCIrcztyZXR1cm4gc30sYz1mdW5jdGlvbih0LGUsaSxzKXtyZXR1cm4gaCh0KT9zW2VdOmlbZV19LHU9IiIsZD0hMTtpZihlKWZvcihzPTA7dC5sZW5ndGg+cztzKyspaWYoZCkiJyIhPT10LmNoYXJBdChzKXx8aCgiJyIpP3UrPXQuY2hhckF0KHMpOmQ9ITE7ZWxzZSBzd2l0Y2godC5jaGFyQXQocykpe2Nhc2UiZCI6dSs9bCgiZCIsZS5nZXREYXRlKCksMik7YnJlYWs7Y2FzZSJEIjp1Kz1jKCJEIixlLmdldERheSgpLG4sbyk7YnJlYWs7Y2FzZSJvIjp1Kz1sKCJvIixNYXRoLnJvdW5kKChuZXcgRGF0ZShlLmdldEZ1bGxZZWFyKCksZS5nZXRNb250aCgpLGUuZ2V0RGF0ZSgpKS5nZXRUaW1lKCktbmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLDAsMCkuZ2V0VGltZSgpKS84NjRlNSksMyk7YnJlYWs7Y2FzZSJtIjp1Kz1sKCJtIixlLmdldE1vbnRoKCkrMSwyKTticmVhaztjYXNlIk0iOnUrPWMoIk0iLGUuZ2V0TW9udGgoKSxhLHIpO2JyZWFrO2Nhc2UieSI6dSs9aCgieSIpP2UuZ2V0RnVsbFllYXIoKTooMTA+ZS5nZXRGdWxsWWVhcigpJTEwMD8iMCI6IiIpK2UuZ2V0RnVsbFllYXIoKSUxMDA7YnJlYWs7Y2FzZSJAIjp1Kz1lLmdldFRpbWUoKTticmVhaztjYXNlIiEiOnUrPTFlNCplLmdldFRpbWUoKSt0aGlzLl90aWNrc1RvMTk3MDticmVhaztjYXNlIiciOmgoIiciKT91Kz0iJyI6ZD0hMDticmVhaztkZWZhdWx0OnUrPXQuY2hhckF0KHMpfXJldHVybiB1fSxfcG9zc2libGVDaGFyczpmdW5jdGlvbih0KXt2YXIgZSxpPSIiLHM9ITEsbj1mdW5jdGlvbihpKXt2YXIgcz10Lmxlbmd0aD5lKzEmJnQuY2hhckF0KGUrMSk9PT1pO3JldHVybiBzJiZlKyssc307Zm9yKGU9MDt0Lmxlbmd0aD5lO2UrKylpZihzKSInIiE9PXQuY2hhckF0KGUpfHxuKCInIik/aSs9dC5jaGFyQXQoZSk6cz0hMTtlbHNlIHN3aXRjaCh0LmNoYXJBdChlKSl7Y2FzZSJkIjpjYXNlIm0iOmNhc2UieSI6Y2FzZSJAIjppKz0iMDEyMzQ1Njc4OSI7YnJlYWs7Y2FzZSJEIjpjYXNlIk0iOnJldHVybiBudWxsO2Nhc2UiJyI6bigiJyIpP2krPSInIjpzPSEwO2JyZWFrO2RlZmF1bHQ6aSs9dC5jaGFyQXQoZSl9cmV0dXJuIGl9LF9nZXQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwIT09dC5zZXR0aW5nc1tlXT90LnNldHRpbmdzW2VdOnRoaXMuX2RlZmF1bHRzW2VdfSxfc2V0RGF0ZUZyb21GaWVsZDpmdW5jdGlvbih0LGUpe2lmKHQuaW5wdXQudmFsKCkhPT10Lmxhc3RWYWwpe3ZhciBpPXRoaXMuX2dldCh0LCJkYXRlRm9ybWF0Iikscz10Lmxhc3RWYWw9dC5pbnB1dD90LmlucHV0LnZhbCgpOm51bGwsbj10aGlzLl9nZXREZWZhdWx0RGF0ZSh0KSxvPW4sYT10aGlzLl9nZXRGb3JtYXRDb25maWcodCk7dHJ5e289dGhpcy5wYXJzZURhdGUoaSxzLGEpfHxufWNhdGNoKHIpe3M9ZT8iIjpzfXQuc2VsZWN0ZWREYXk9by5nZXREYXRlKCksdC5kcmF3TW9udGg9dC5zZWxlY3RlZE1vbnRoPW8uZ2V0TW9udGgoKSx0LmRyYXdZZWFyPXQuc2VsZWN0ZWRZZWFyPW8uZ2V0RnVsbFllYXIoKSx0LmN1cnJlbnREYXk9cz9vLmdldERhdGUoKTowLHQuY3VycmVudE1vbnRoPXM/by5nZXRNb250aCgpOjAsdC5jdXJyZW50WWVhcj1zP28uZ2V0RnVsbFllYXIoKTowLHRoaXMuX2FkanVzdEluc3REYXRlKHQpfX0sX2dldERlZmF1bHREYXRlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9yZXN0cmljdE1pbk1heCh0LHRoaXMuX2RldGVybWluZURhdGUodCx0aGlzLl9nZXQodCwiZGVmYXVsdERhdGUiKSxuZXcgRGF0ZSkpfSxfZGV0ZXJtaW5lRGF0ZTpmdW5jdGlvbihlLGkscyl7dmFyIG49ZnVuY3Rpb24odCl7dmFyIGU9bmV3IERhdGU7cmV0dXJuIGUuc2V0RGF0ZShlLmdldERhdGUoKSt0KSxlfSxvPWZ1bmN0aW9uKGkpe3RyeXtyZXR1cm4gdC5kYXRlcGlja2VyLnBhcnNlRGF0ZSh0LmRhdGVwaWNrZXIuX2dldChlLCJkYXRlRm9ybWF0IiksaSx0LmRhdGVwaWNrZXIuX2dldEZvcm1hdENvbmZpZyhlKSl9Y2F0Y2gocyl7fWZvcih2YXIgbj0oaS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eYy8pP3QuZGF0ZXBpY2tlci5fZ2V0RGF0ZShlKTpudWxsKXx8bmV3IERhdGUsbz1uLmdldEZ1bGxZZWFyKCksYT1uLmdldE1vbnRoKCkscj1uLmdldERhdGUoKSxoPS8oWytcLV0/WzAtOV0rKVxzKihkfER8d3xXfG18TXx5fFkpPy9nLGw9aC5leGVjKGkpO2w7KXtzd2l0Y2gobFsyXXx8ImQiKXtjYXNlImQiOmNhc2UiRCI6cis9cGFyc2VJbnQobFsxXSwxMCk7YnJlYWs7Y2FzZSJ3IjpjYXNlIlciOnIrPTcqcGFyc2VJbnQobFsxXSwxMCk7YnJlYWs7Y2FzZSJtIjpjYXNlIk0iOmErPXBhcnNlSW50KGxbMV0sMTApLHI9TWF0aC5taW4ocix0LmRhdGVwaWNrZXIuX2dldERheXNJbk1vbnRoKG8sYSkpO2JyZWFrO2Nhc2UieSI6Y2FzZSJZIjpvKz1wYXJzZUludChsWzFdLDEwKSxyPU1hdGgubWluKHIsdC5kYXRlcGlja2VyLl9nZXREYXlzSW5Nb250aChvLGEpKX1sPWguZXhlYyhpKX1yZXR1cm4gbmV3IERhdGUobyxhLHIpfSxhPW51bGw9PWl8fCIiPT09aT9zOiJzdHJpbmciPT10eXBlb2YgaT9vKGkpOiJudW1iZXIiPT10eXBlb2YgaT9pc05hTihpKT9zOm4oaSk6bmV3IERhdGUoaS5nZXRUaW1lKCkpO3JldHVybiBhPWEmJiJJbnZhbGlkIERhdGUiPT0iIithP3M6YSxhJiYoYS5zZXRIb3VycygwKSxhLnNldE1pbnV0ZXMoMCksYS5zZXRTZWNvbmRzKDApLGEuc2V0TWlsbGlzZWNvbmRzKDApKSx0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChhKX0sX2RheWxpZ2h0U2F2aW5nQWRqdXN0OmZ1bmN0aW9uKHQpe3JldHVybiB0Pyh0LnNldEhvdXJzKHQuZ2V0SG91cnMoKT4xMj90LmdldEhvdXJzKCkrMjowKSx0KTpudWxsfSxfc2V0RGF0ZTpmdW5jdGlvbih0LGUsaSl7dmFyIHM9IWUsbj10LnNlbGVjdGVkTW9udGgsbz10LnNlbGVjdGVkWWVhcixhPXRoaXMuX3Jlc3RyaWN0TWluTWF4KHQsdGhpcy5fZGV0ZXJtaW5lRGF0ZSh0LGUsbmV3IERhdGUpKTt0LnNlbGVjdGVkRGF5PXQuY3VycmVudERheT1hLmdldERhdGUoKSx0LmRyYXdNb250aD10LnNlbGVjdGVkTW9udGg9dC5jdXJyZW50TW9udGg9YS5nZXRNb250aCgpLHQuZHJhd1llYXI9dC5zZWxlY3RlZFllYXI9dC5jdXJyZW50WWVhcj1hLmdldEZ1bGxZZWFyKCksbj09PXQuc2VsZWN0ZWRNb250aCYmbz09PXQuc2VsZWN0ZWRZZWFyfHxpfHx0aGlzLl9ub3RpZnlDaGFuZ2UodCksdGhpcy5fYWRqdXN0SW5zdERhdGUodCksdC5pbnB1dCYmdC5pbnB1dC52YWwocz8iIjp0aGlzLl9mb3JtYXREYXRlKHQpKX0sX2dldERhdGU6ZnVuY3Rpb24odCl7dmFyIGU9IXQuY3VycmVudFllYXJ8fHQuaW5wdXQmJiIiPT09dC5pbnB1dC52YWwoKT9udWxsOnRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHQuY3VycmVudFllYXIsdC5jdXJyZW50TW9udGgsdC5jdXJyZW50RGF5KSk7cmV0dXJuIGV9LF9hdHRhY2hIYW5kbGVyczpmdW5jdGlvbihlKXt2YXIgaT10aGlzLl9nZXQoZSwic3RlcE1vbnRocyIpLHM9IiMiK2UuaWQucmVwbGFjZSgvXFxcXC9nLCJcXCIpO2UuZHBEaXYuZmluZCgiW2RhdGEtaGFuZGxlcl0iKS5tYXAoZnVuY3Rpb24oKXt2YXIgZT17cHJldjpmdW5jdGlvbigpe3QuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShzLC1pLCJNIil9LG5leHQ6ZnVuY3Rpb24oKXt0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUocywraSwiTSIpfSxoaWRlOmZ1bmN0aW9uKCl7dC5kYXRlcGlja2VyLl9oaWRlRGF0ZXBpY2tlcigpfSx0b2RheTpmdW5jdGlvbigpe3QuZGF0ZXBpY2tlci5fZ290b1RvZGF5KHMpfSxzZWxlY3REYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kYXRlcGlja2VyLl9zZWxlY3REYXkocywrdGhpcy5nZXRBdHRyaWJ1dGUoImRhdGEtbW9udGgiKSwrdGhpcy5nZXRBdHRyaWJ1dGUoImRhdGEteWVhciIpLHRoaXMpLCExfSxzZWxlY3RNb250aDpmdW5jdGlvbigpe3JldHVybiB0LmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhcihzLHRoaXMsIk0iKSwhMX0sc2VsZWN0WWVhcjpmdW5jdGlvbigpe3JldHVybiB0LmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhcihzLHRoaXMsIlkiKSwhMX19O3QodGhpcykub24odGhpcy5nZXRBdHRyaWJ1dGUoImRhdGEtZXZlbnQiKSxlW3RoaXMuZ2V0QXR0cmlidXRlKCJkYXRhLWhhbmRsZXIiKV0pfSl9LF9nZW5lcmF0ZUhUTUw6ZnVuY3Rpb24odCl7dmFyIGUsaSxzLG4sbyxhLHIsaCxsLGMsdSxkLHAsZixnLG0sXyx2LGIseSx3LGsseCxDLEQsSSxULFAsTSxTLEgseixPLEEsTixXLEUsRixMLFI9bmV3IERhdGUsQj10aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShSLmdldEZ1bGxZZWFyKCksUi5nZXRNb250aCgpLFIuZ2V0RGF0ZSgpKSksWT10aGlzLl9nZXQodCwiaXNSVEwiKSxqPXRoaXMuX2dldCh0LCJzaG93QnV0dG9uUGFuZWwiKSxxPXRoaXMuX2dldCh0LCJoaWRlSWZOb1ByZXZOZXh0IiksSz10aGlzLl9nZXQodCwibmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCIpLFU9dGhpcy5fZ2V0TnVtYmVyT2ZNb250aHModCksVj10aGlzLl9nZXQodCwic2hvd0N1cnJlbnRBdFBvcyIpLCQ9dGhpcy5fZ2V0KHQsInN0ZXBNb250aHMiKSxYPTEhPT1VWzBdfHwxIT09VVsxXSxHPXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KHQuY3VycmVudERheT9uZXcgRGF0ZSh0LmN1cnJlbnRZZWFyLHQuY3VycmVudE1vbnRoLHQuY3VycmVudERheSk6bmV3IERhdGUoOTk5OSw5LDkpKSxRPXRoaXMuX2dldE1pbk1heERhdGUodCwibWluIiksSj10aGlzLl9nZXRNaW5NYXhEYXRlKHQsIm1heCIpLFo9dC5kcmF3TW9udGgtVix0ZT10LmRyYXdZZWFyO2lmKDA+WiYmKForPTEyLHRlLS0pLEopZm9yKGU9dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoSi5nZXRGdWxsWWVhcigpLEouZ2V0TW9udGgoKS1VWzBdKlVbMV0rMSxKLmdldERhdGUoKSkpLGU9USYmUT5lP1E6ZTt0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh0ZSxaLDEpKT5lOylaLS0sMD5aJiYoWj0xMSx0ZS0tKTtmb3IodC5kcmF3TW9udGg9Wix0LmRyYXdZZWFyPXRlLGk9dGhpcy5fZ2V0KHQsInByZXZUZXh0IiksaT1LP3RoaXMuZm9ybWF0RGF0ZShpLHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHRlLFotJCwxKSksdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKHQpKTppLHM9dGhpcy5fY2FuQWRqdXN0TW9udGgodCwtMSx0ZSxaKT8iPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J3ByZXYnIGRhdGEtZXZlbnQ9J2NsaWNrJyB0aXRsZT0nIitpKyInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLSIrKFk/ImUiOiJ3IikrIic+IitpKyI8L3NwYW4+PC9hPiI6cT8iIjoiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsIHVpLXN0YXRlLWRpc2FibGVkJyB0aXRsZT0nIitpKyInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLSIrKFk/ImUiOiJ3IikrIic+IitpKyI8L3NwYW4+PC9hPiIsbj10aGlzLl9nZXQodCwibmV4dFRleHQiKSxuPUs/dGhpcy5mb3JtYXREYXRlKG4sdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodGUsWiskLDEpKSx0aGlzLl9nZXRGb3JtYXRDb25maWcodCkpOm4sbz10aGlzLl9jYW5BZGp1c3RNb250aCh0LDEsdGUsWik/IjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCcgZGF0YS1oYW5kbGVyPSduZXh0JyBkYXRhLWV2ZW50PSdjbGljaycgdGl0bGU9JyIrbisiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0iKyhZPyJ3IjoiZSIpKyInPiIrbisiPC9zcGFuPjwvYT4iOnE/IiI6IjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCB1aS1zdGF0ZS1kaXNhYmxlZCcgdGl0bGU9JyIrbisiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS0iKyhZPyJ3IjoiZSIpKyInPiIrbisiPC9zcGFuPjwvYT4iLGE9dGhpcy5fZ2V0KHQsImN1cnJlbnRUZXh0Iikscj10aGlzLl9nZXQodCwiZ290b0N1cnJlbnQiKSYmdC5jdXJyZW50RGF5P0c6QixhPUs/dGhpcy5mb3JtYXREYXRlKGEscix0aGlzLl9nZXRGb3JtYXRDb25maWcodCkpOmEsaD10LmlubGluZT8iIjoiPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSd1aS1kYXRlcGlja2VyLWNsb3NlIHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktcHJpbWFyeSB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J2hpZGUnIGRhdGEtZXZlbnQ9J2NsaWNrJz4iK3RoaXMuX2dldCh0LCJjbG9zZVRleHQiKSsiPC9idXR0b24+IixsPWo/IjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItYnV0dG9ucGFuZSB1aS13aWRnZXQtY29udGVudCc+IisoWT9oOiIiKSsodGhpcy5faXNJblJhbmdlKHQscik/IjxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0ndWktZGF0ZXBpY2tlci1jdXJyZW50IHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktc2Vjb25kYXJ5IHVpLWNvcm5lci1hbGwnIGRhdGEtaGFuZGxlcj0ndG9kYXknIGRhdGEtZXZlbnQ9J2NsaWNrJz4iK2ErIjwvYnV0dG9uPiI6IiIpKyhZPyIiOmgpKyI8L2Rpdj4iOiIiLGM9cGFyc2VJbnQodGhpcy5fZ2V0KHQsImZpcnN0RGF5IiksMTApLGM9aXNOYU4oYyk/MDpjLHU9dGhpcy5fZ2V0KHQsInNob3dXZWVrIiksZD10aGlzLl9nZXQodCwiZGF5TmFtZXMiKSxwPXRoaXMuX2dldCh0LCJkYXlOYW1lc01pbiIpLGY9dGhpcy5fZ2V0KHQsIm1vbnRoTmFtZXMiKSxnPXRoaXMuX2dldCh0LCJtb250aE5hbWVzU2hvcnQiKSxtPXRoaXMuX2dldCh0LCJiZWZvcmVTaG93RGF5IiksXz10aGlzLl9nZXQodCwic2hvd090aGVyTW9udGhzIiksdj10aGlzLl9nZXQodCwic2VsZWN0T3RoZXJNb250aHMiKSxiPXRoaXMuX2dldERlZmF1bHREYXRlKHQpLHk9IiIsaz0wO1VbMF0+aztrKyspe2Zvcih4PSIiLHRoaXMubWF4Um93cz00LEM9MDtVWzFdPkM7QysrKXtpZihEPXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHRlLFosdC5zZWxlY3RlZERheSkpLEk9IiB1aS1jb3JuZXItYWxsIixUPSIiLFgpe2lmKFQrPSI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWdyb3VwIixVWzFdPjEpc3dpdGNoKEMpe2Nhc2UgMDpUKz0iIHVpLWRhdGVwaWNrZXItZ3JvdXAtZmlyc3QiLEk9IiB1aS1jb3JuZXItIisoWT8icmlnaHQiOiJsZWZ0Iik7YnJlYWs7Y2FzZSBVWzFdLTE6VCs9IiB1aS1kYXRlcGlja2VyLWdyb3VwLWxhc3QiLEk9IiB1aS1jb3JuZXItIisoWT8ibGVmdCI6InJpZ2h0Iik7YnJlYWs7ZGVmYXVsdDpUKz0iIHVpLWRhdGVwaWNrZXItZ3JvdXAtbWlkZGxlIixJPSIifVQrPSInPiJ9Zm9yKFQrPSI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWhlYWRlciB1aS13aWRnZXQtaGVhZGVyIHVpLWhlbHBlci1jbGVhcmZpeCIrSSsiJz4iKygvYWxsfGxlZnQvLnRlc3QoSSkmJjA9PT1rP1k/bzpzOiIiKSsoL2FsbHxyaWdodC8udGVzdChJKSYmMD09PWs/WT9zOm86IiIpK3RoaXMuX2dlbmVyYXRlTW9udGhZZWFySGVhZGVyKHQsWix0ZSxRLEosaz4wfHxDPjAsZixnKSsiPC9kaXY+PHRhYmxlIGNsYXNzPSd1aS1kYXRlcGlja2VyLWNhbGVuZGFyJz48dGhlYWQ+IisiPHRyPiIsUD11PyI8dGggY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPiIrdGhpcy5fZ2V0KHQsIndlZWtIZWFkZXIiKSsiPC90aD4iOiIiLHc9MDs3Pnc7dysrKU09KHcrYyklNyxQKz0iPHRoIHNjb3BlPSdjb2wnIisoKHcrYys2KSU3Pj01PyIgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1lbmQnIjoiIikrIj4iKyI8c3BhbiB0aXRsZT0nIitkW01dKyInPiIrcFtNXSsiPC9zcGFuPjwvdGg+Ijtmb3IoVCs9UCsiPC90cj48L3RoZWFkPjx0Ym9keT4iLFM9dGhpcy5fZ2V0RGF5c0luTW9udGgodGUsWiksdGU9PT10LnNlbGVjdGVkWWVhciYmWj09PXQuc2VsZWN0ZWRNb250aCYmKHQuc2VsZWN0ZWREYXk9TWF0aC5taW4odC5zZWxlY3RlZERheSxTKSksSD0odGhpcy5fZ2V0Rmlyc3REYXlPZk1vbnRoKHRlLFopLWMrNyklNyx6PU1hdGguY2VpbCgoSCtTKS83KSxPPVg/dGhpcy5tYXhSb3dzPno/dGhpcy5tYXhSb3dzOno6eix0aGlzLm1heFJvd3M9TyxBPXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHRlLFosMS1IKSksTj0wO08+TjtOKyspe2ZvcihUKz0iPHRyPiIsVz11PyI8dGQgY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPiIrdGhpcy5fZ2V0KHQsImNhbGN1bGF0ZVdlZWsiKShBKSsiPC90ZD4iOiIiLHc9MDs3Pnc7dysrKUU9bT9tLmFwcGx5KHQuaW5wdXQ/dC5pbnB1dFswXTpudWxsLFtBXSk6WyEwLCIiXSxGPUEuZ2V0TW9udGgoKSE9PVosTD1GJiYhdnx8IUVbMF18fFEmJlE+QXx8SiYmQT5KLFcrPSI8dGQgY2xhc3M9JyIrKCh3K2MrNiklNz49NT8iIHVpLWRhdGVwaWNrZXItd2Vlay1lbmQiOiIiKSsoRj8iIHVpLWRhdGVwaWNrZXItb3RoZXItbW9udGgiOiIiKSsoQS5nZXRUaW1lKCk9PT1ELmdldFRpbWUoKSYmWj09PXQuc2VsZWN0ZWRNb250aCYmdC5fa2V5RXZlbnR8fGIuZ2V0VGltZSgpPT09QS5nZXRUaW1lKCkmJmIuZ2V0VGltZSgpPT09RC5nZXRUaW1lKCk/IiAiK3RoaXMuX2RheU92ZXJDbGFzczoiIikrKEw/IiAiK3RoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzKyIgdWktc3RhdGUtZGlzYWJsZWQiOiIiKSsoRiYmIV8/IiI6IiAiK0VbMV0rKEEuZ2V0VGltZSgpPT09Ry5nZXRUaW1lKCk/IiAiK3RoaXMuX2N1cnJlbnRDbGFzczoiIikrKEEuZ2V0VGltZSgpPT09Qi5nZXRUaW1lKCk/IiB1aS1kYXRlcGlja2VyLXRvZGF5IjoiIikpKyInIisoRiYmIV98fCFFWzJdPyIiOiIgdGl0bGU9JyIrRVsyXS5yZXBsYWNlKC8nL2csIiYjMzk7IikrIiciKSsoTD8iIjoiIGRhdGEtaGFuZGxlcj0nc2VsZWN0RGF5JyBkYXRhLWV2ZW50PSdjbGljaycgZGF0YS1tb250aD0nIitBLmdldE1vbnRoKCkrIicgZGF0YS15ZWFyPSciK0EuZ2V0RnVsbFllYXIoKSsiJyIpKyI+IisoRiYmIV8/IiYjeGEwOyI6TD8iPHNwYW4gY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHQnPiIrQS5nZXREYXRlKCkrIjwvc3Bhbj4iOiI8YSBjbGFzcz0ndWktc3RhdGUtZGVmYXVsdCIrKEEuZ2V0VGltZSgpPT09Qi5nZXRUaW1lKCk/IiB1aS1zdGF0ZS1oaWdobGlnaHQiOiIiKSsoQS5nZXRUaW1lKCk9PT1HLmdldFRpbWUoKT8iIHVpLXN0YXRlLWFjdGl2ZSI6IiIpKyhGPyIgdWktcHJpb3JpdHktc2Vjb25kYXJ5IjoiIikrIicgaHJlZj0nIyc+IitBLmdldERhdGUoKSsiPC9hPiIpKyI8L3RkPiIsQS5zZXREYXRlKEEuZ2V0RGF0ZSgpKzEpLEE9dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoQSk7VCs9VysiPC90cj4ifVorKyxaPjExJiYoWj0wLHRlKyspLFQrPSI8L3Rib2R5PjwvdGFibGU+IisoWD8iPC9kaXY+IisoVVswXT4wJiZDPT09VVsxXS0xPyI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLXJvdy1icmVhayc+PC9kaXY+IjoiIik6IiIpLHgrPVR9eSs9eH1yZXR1cm4geSs9bCx0Ll9rZXlFdmVudD0hMSx5fSxfZ2VuZXJhdGVNb250aFllYXJIZWFkZXI6ZnVuY3Rpb24odCxlLGkscyxuLG8sYSxyKXt2YXIgaCxsLGMsdSxkLHAsZixnLG09dGhpcy5fZ2V0KHQsImNoYW5nZU1vbnRoIiksXz10aGlzLl9nZXQodCwiY2hhbmdlWWVhciIpLHY9dGhpcy5fZ2V0KHQsInNob3dNb250aEFmdGVyWWVhciIpLGI9IjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItdGl0bGUnPiIseT0iIjtpZihvfHwhbSl5Kz0iPHNwYW4gY2xhc3M9J3VpLWRhdGVwaWNrZXItbW9udGgnPiIrYVtlXSsiPC9zcGFuPiI7ZWxzZXtmb3IoaD1zJiZzLmdldEZ1bGxZZWFyKCk9PT1pLGw9biYmbi5nZXRGdWxsWWVhcigpPT09aSx5Kz0iPHNlbGVjdCBjbGFzcz0ndWktZGF0ZXBpY2tlci1tb250aCcgZGF0YS1oYW5kbGVyPSdzZWxlY3RNb250aCcgZGF0YS1ldmVudD0nY2hhbmdlJz4iLGM9MDsxMj5jO2MrKykoIWh8fGM+PXMuZ2V0TW9udGgoKSkmJighbHx8bi5nZXRNb250aCgpPj1jKSYmKHkrPSI8b3B0aW9uIHZhbHVlPSciK2MrIiciKyhjPT09ZT8iIHNlbGVjdGVkPSdzZWxlY3RlZCciOiIiKSsiPiIrcltjXSsiPC9vcHRpb24+Iik7eSs9Ijwvc2VsZWN0PiJ9aWYodnx8KGIrPXkrKCFvJiZtJiZfPyIiOiImI3hhMDsiKSksIXQueWVhcnNodG1sKWlmKHQueWVhcnNodG1sPSIiLG98fCFfKWIrPSI8c3BhbiBjbGFzcz0ndWktZGF0ZXBpY2tlci15ZWFyJz4iK2krIjwvc3Bhbj4iO2Vsc2V7Zm9yKHU9dGhpcy5fZ2V0KHQsInllYXJSYW5nZSIpLnNwbGl0KCI6IiksZD0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCkscD1mdW5jdGlvbih0KXt2YXIgZT10Lm1hdGNoKC9jWytcLV0uKi8pP2krcGFyc2VJbnQodC5zdWJzdHJpbmcoMSksMTApOnQubWF0Y2goL1srXC1dLiovKT9kK3BhcnNlSW50KHQsMTApOnBhcnNlSW50KHQsMTApO3JldHVybiBpc05hTihlKT9kOmV9LGY9cCh1WzBdKSxnPU1hdGgubWF4KGYscCh1WzFdfHwiIikpLGY9cz9NYXRoLm1heChmLHMuZ2V0RnVsbFllYXIoKSk6ZixnPW4/TWF0aC5taW4oZyxuLmdldEZ1bGxZZWFyKCkpOmcsdC55ZWFyc2h0bWwrPSI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLXllYXInIGRhdGEtaGFuZGxlcj0nc2VsZWN0WWVhcicgZGF0YS1ldmVudD0nY2hhbmdlJz4iO2c+PWY7ZisrKXQueWVhcnNodG1sKz0iPG9wdGlvbiB2YWx1ZT0nIitmKyInIisoZj09PWk/IiBzZWxlY3RlZD0nc2VsZWN0ZWQnIjoiIikrIj4iK2YrIjwvb3B0aW9uPiI7dC55ZWFyc2h0bWwrPSI8L3NlbGVjdD4iLGIrPXQueWVhcnNodG1sLHQueWVhcnNodG1sPW51bGx9cmV0dXJuIGIrPXRoaXMuX2dldCh0LCJ5ZWFyU3VmZml4IiksdiYmKGIrPSghbyYmbSYmXz8iIjoiJiN4YTA7IikreSksYis9IjwvZGl2PiJ9LF9hZGp1c3RJbnN0RGF0ZTpmdW5jdGlvbih0LGUsaSl7dmFyIHM9dC5zZWxlY3RlZFllYXIrKCJZIj09PWk/ZTowKSxuPXQuc2VsZWN0ZWRNb250aCsoIk0iPT09aT9lOjApLG89TWF0aC5taW4odC5zZWxlY3RlZERheSx0aGlzLl9nZXREYXlzSW5Nb250aChzLG4pKSsoIkQiPT09aT9lOjApLGE9dGhpcy5fcmVzdHJpY3RNaW5NYXgodCx0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShzLG4sbykpKTt0LnNlbGVjdGVkRGF5PWEuZ2V0RGF0ZSgpLHQuZHJhd01vbnRoPXQuc2VsZWN0ZWRNb250aD1hLmdldE1vbnRoKCksdC5kcmF3WWVhcj10LnNlbGVjdGVkWWVhcj1hLmdldEZ1bGxZZWFyKCksKCJNIj09PWl8fCJZIj09PWkpJiZ0aGlzLl9ub3RpZnlDaGFuZ2UodCl9LF9yZXN0cmljdE1pbk1heDpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuX2dldE1pbk1heERhdGUodCwibWluIikscz10aGlzLl9nZXRNaW5NYXhEYXRlKHQsIm1heCIpLG49aSYmaT5lP2k6ZTtyZXR1cm4gcyYmbj5zP3M6bn0sX25vdGlmeUNoYW5nZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9nZXQodCwib25DaGFuZ2VNb250aFllYXIiKTtlJiZlLmFwcGx5KHQuaW5wdXQ/dC5pbnB1dFswXTpudWxsLFt0LnNlbGVjdGVkWWVhcix0LnNlbGVjdGVkTW9udGgrMSx0XSl9LF9nZXROdW1iZXJPZk1vbnRoczpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9nZXQodCwibnVtYmVyT2ZNb250aHMiKTtyZXR1cm4gbnVsbD09ZT9bMSwxXToibnVtYmVyIj09dHlwZW9mIGU/WzEsZV06ZX0sX2dldE1pbk1heERhdGU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fZGV0ZXJtaW5lRGF0ZSh0LHRoaXMuX2dldCh0LGUrIkRhdGUiKSxudWxsKX0sX2dldERheXNJbk1vbnRoOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDMyLXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHQsZSwzMikpLmdldERhdGUoKX0sX2dldEZpcnN0RGF5T2ZNb250aDpmdW5jdGlvbih0LGUpe3JldHVybiBuZXcgRGF0ZSh0LGUsMSkuZ2V0RGF5KCl9LF9jYW5BZGp1c3RNb250aDpmdW5jdGlvbih0LGUsaSxzKXt2YXIgbj10aGlzLl9nZXROdW1iZXJPZk1vbnRocyh0KSxvPXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGkscysoMD5lP2U6blswXSpuWzFdKSwxKSk7cmV0dXJuIDA+ZSYmby5zZXREYXRlKHRoaXMuX2dldERheXNJbk1vbnRoKG8uZ2V0RnVsbFllYXIoKSxvLmdldE1vbnRoKCkpKSx0aGlzLl9pc0luUmFuZ2UodCxvKX0sX2lzSW5SYW5nZTpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbj10aGlzLl9nZXRNaW5NYXhEYXRlKHQsIm1pbiIpLG89dGhpcy5fZ2V0TWluTWF4RGF0ZSh0LCJtYXgiKSxhPW51bGwscj1udWxsLGg9dGhpcy5fZ2V0KHQsInllYXJSYW5nZSIpO3JldHVybiBoJiYoaT1oLnNwbGl0KCI6Iikscz0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCksYT1wYXJzZUludChpWzBdLDEwKSxyPXBhcnNlSW50KGlbMV0sMTApLGlbMF0ubWF0Y2goL1srXC1dLiovKSYmKGErPXMpLGlbMV0ubWF0Y2goL1srXC1dLiovKSYmKHIrPXMpKSwoIW58fGUuZ2V0VGltZSgpPj1uLmdldFRpbWUoKSkmJighb3x8ZS5nZXRUaW1lKCk8PW8uZ2V0VGltZSgpKSYmKCFhfHxlLmdldEZ1bGxZZWFyKCk+PWEpJiYoIXJ8fHI+PWUuZ2V0RnVsbFllYXIoKSl9LF9nZXRGb3JtYXRDb25maWc6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZ2V0KHQsInNob3J0WWVhckN1dG9mZiIpO3JldHVybiBlPSJzdHJpbmciIT10eXBlb2YgZT9lOihuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSUxMDArcGFyc2VJbnQoZSwxMCkse3Nob3J0WWVhckN1dG9mZjplLGRheU5hbWVzU2hvcnQ6dGhpcy5fZ2V0KHQsImRheU5hbWVzU2hvcnQiKSxkYXlOYW1lczp0aGlzLl9nZXQodCwiZGF5TmFtZXMiKSxtb250aE5hbWVzU2hvcnQ6dGhpcy5fZ2V0KHQsIm1vbnRoTmFtZXNTaG9ydCIpLG1vbnRoTmFtZXM6dGhpcy5fZ2V0KHQsIm1vbnRoTmFtZXMiKX19LF9mb3JtYXREYXRlOmZ1bmN0aW9uKHQsZSxpLHMpe2V8fCh0LmN1cnJlbnREYXk9dC5zZWxlY3RlZERheSx0LmN1cnJlbnRNb250aD10LnNlbGVjdGVkTW9udGgsdC5jdXJyZW50WWVhcj10LnNlbGVjdGVkWWVhcik7dmFyIG49ZT8ib2JqZWN0Ij09dHlwZW9mIGU/ZTp0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShzLGksZSkpOnRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHQuY3VycmVudFllYXIsdC5jdXJyZW50TW9udGgsdC5jdXJyZW50RGF5KSk7cmV0dXJuIHRoaXMuZm9ybWF0RGF0ZSh0aGlzLl9nZXQodCwiZGF0ZUZvcm1hdCIpLG4sdGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKHQpKX19KSx0LmZuLmRhdGVwaWNrZXI9ZnVuY3Rpb24oZSl7aWYoIXRoaXMubGVuZ3RoKXJldHVybiB0aGlzO3QuZGF0ZXBpY2tlci5pbml0aWFsaXplZHx8KHQoZG9jdW1lbnQpLm9uKCJtb3VzZWRvd24iLHQuZGF0ZXBpY2tlci5fY2hlY2tFeHRlcm5hbENsaWNrKSx0LmRhdGVwaWNrZXIuaW5pdGlhbGl6ZWQ9ITApLDA9PT10KCIjIit0LmRhdGVwaWNrZXIuX21haW5EaXZJZCkubGVuZ3RoJiZ0KCJib2R5IikuYXBwZW5kKHQuZGF0ZXBpY2tlci5kcERpdik7dmFyIGk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiJzdHJpbmciIT10eXBlb2YgZXx8ImlzRGlzYWJsZWQiIT09ZSYmImdldERhdGUiIT09ZSYmIndpZGdldCIhPT1lPyJvcHRpb24iPT09ZSYmMj09PWFyZ3VtZW50cy5sZW5ndGgmJiJzdHJpbmciPT10eXBlb2YgYXJndW1lbnRzWzFdP3QuZGF0ZXBpY2tlclsiXyIrZSsiRGF0ZXBpY2tlciJdLmFwcGx5KHQuZGF0ZXBpY2tlcixbdGhpc1swXV0uY29uY2F0KGkpKTp0aGlzLmVhY2goZnVuY3Rpb24oKXsic3RyaW5nIj09dHlwZW9mIGU/dC5kYXRlcGlja2VyWyJfIitlKyJEYXRlcGlja2VyIl0uYXBwbHkodC5kYXRlcGlja2VyLFt0aGlzXS5jb25jYXQoaSkpOnQuZGF0ZXBpY2tlci5fYXR0YWNoRGF0ZXBpY2tlcih0aGlzLGUpfSk6dC5kYXRlcGlja2VyWyJfIitlKyJEYXRlcGlja2VyIl0uYXBwbHkodC5kYXRlcGlja2VyLFt0aGlzWzBdXS5jb25jYXQoaSkpfSx0LmRhdGVwaWNrZXI9bmV3IHMsdC5kYXRlcGlja2VyLmluaXRpYWxpemVkPSExLHQuZGF0ZXBpY2tlci51dWlkPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHQuZGF0ZXBpY2tlci52ZXJzaW9uPSIxLjEyLjEiLHQuZGF0ZXBpY2tlcix0LnVpLmllPSEhL21zaWUgW1x3Ll0rLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7dmFyIF89ITE7dChkb2N1bWVudCkub24oIm1vdXNldXAiLGZ1bmN0aW9uKCl7Xz0hMX0pLHQud2lkZ2V0KCJ1aS5tb3VzZSIse3ZlcnNpb246IjEuMTIuMSIsb3B0aW9uczp7Y2FuY2VsOiJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0LCBvcHRpb24iLGRpc3RhbmNlOjEsZGVsYXk6MH0sX21vdXNlSW5pdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5lbGVtZW50Lm9uKCJtb3VzZWRvd24uIit0aGlzLndpZGdldE5hbWUsZnVuY3Rpb24odCl7cmV0dXJuIGUuX21vdXNlRG93bih0KX0pLm9uKCJjbGljay4iK3RoaXMud2lkZ2V0TmFtZSxmdW5jdGlvbihpKXtyZXR1cm4hMD09PXQuZGF0YShpLnRhcmdldCxlLndpZGdldE5hbWUrIi5wcmV2ZW50Q2xpY2tFdmVudCIpPyh0LnJlbW92ZURhdGEoaS50YXJnZXQsZS53aWRnZXROYW1lKyIucHJldmVudENsaWNrRXZlbnQiKSxpLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCExKTp2b2lkIDB9KSx0aGlzLnN0YXJ0ZWQ9ITF9LF9tb3VzZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQub2ZmKCIuIit0aGlzLndpZGdldE5hbWUpLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlJiZ0aGlzLmRvY3VtZW50Lm9mZigibW91c2Vtb3ZlLiIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKS5vZmYoIm1vdXNldXAuIit0aGlzLndpZGdldE5hbWUsdGhpcy5fbW91c2VVcERlbGVnYXRlKX0sX21vdXNlRG93bjpmdW5jdGlvbihlKXtpZighXyl7dGhpcy5fbW91c2VNb3ZlZD0hMSx0aGlzLl9tb3VzZVN0YXJ0ZWQmJnRoaXMuX21vdXNlVXAoZSksdGhpcy5fbW91c2VEb3duRXZlbnQ9ZTt2YXIgaT10aGlzLHM9MT09PWUud2hpY2gsbj0ic3RyaW5nIj09dHlwZW9mIHRoaXMub3B0aW9ucy5jYW5jZWwmJmUudGFyZ2V0Lm5vZGVOYW1lP3QoZS50YXJnZXQpLmNsb3Nlc3QodGhpcy5vcHRpb25zLmNhbmNlbCkubGVuZ3RoOiExO3JldHVybiBzJiYhbiYmdGhpcy5fbW91c2VDYXB0dXJlKGUpPyh0aGlzLm1vdXNlRGVsYXlNZXQ9IXRoaXMub3B0aW9ucy5kZWxheSx0aGlzLm1vdXNlRGVsYXlNZXR8fCh0aGlzLl9tb3VzZURlbGF5VGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2kubW91c2VEZWxheU1ldD0hMH0sdGhpcy5vcHRpb25zLmRlbGF5KSksdGhpcy5fbW91c2VEaXN0YW5jZU1ldChlKSYmdGhpcy5fbW91c2VEZWxheU1ldChlKSYmKHRoaXMuX21vdXNlU3RhcnRlZD10aGlzLl9tb3VzZVN0YXJ0KGUpIT09ITEsIXRoaXMuX21vdXNlU3RhcnRlZCk/KGUucHJldmVudERlZmF1bHQoKSwhMCk6KCEwPT09dC5kYXRhKGUudGFyZ2V0LHRoaXMud2lkZ2V0TmFtZSsiLnByZXZlbnRDbGlja0V2ZW50IikmJnQucmVtb3ZlRGF0YShlLnRhcmdldCx0aGlzLndpZGdldE5hbWUrIi5wcmV2ZW50Q2xpY2tFdmVudCIpLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlPWZ1bmN0aW9uKHQpe3JldHVybiBpLl9tb3VzZU1vdmUodCl9LHRoaXMuX21vdXNlVXBEZWxlZ2F0ZT1mdW5jdGlvbih0KXtyZXR1cm4gaS5fbW91c2VVcCh0KX0sdGhpcy5kb2N1bWVudC5vbigibW91c2Vtb3ZlLiIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKS5vbigibW91c2V1cC4iK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZVVwRGVsZWdhdGUpLGUucHJldmVudERlZmF1bHQoKSxfPSEwLCEwKSk6ITB9fSxfbW91c2VNb3ZlOmZ1bmN0aW9uKGUpe2lmKHRoaXMuX21vdXNlTW92ZWQpe2lmKHQudWkuaWUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PmRvY3VtZW50LmRvY3VtZW50TW9kZSkmJiFlLmJ1dHRvbilyZXR1cm4gdGhpcy5fbW91c2VVcChlKTtpZighZS53aGljaClpZihlLm9yaWdpbmFsRXZlbnQuYWx0S2V5fHxlLm9yaWdpbmFsRXZlbnQuY3RybEtleXx8ZS5vcmlnaW5hbEV2ZW50Lm1ldGFLZXl8fGUub3JpZ2luYWxFdmVudC5zaGlmdEtleSl0aGlzLmlnbm9yZU1pc3NpbmdXaGljaD0hMDtlbHNlIGlmKCF0aGlzLmlnbm9yZU1pc3NpbmdXaGljaClyZXR1cm4gdGhpcy5fbW91c2VVcChlKX1yZXR1cm4oZS53aGljaHx8ZS5idXR0b24pJiYodGhpcy5fbW91c2VNb3ZlZD0hMCksdGhpcy5fbW91c2VTdGFydGVkPyh0aGlzLl9tb3VzZURyYWcoZSksZS5wcmV2ZW50RGVmYXVsdCgpKToodGhpcy5fbW91c2VEaXN0YW5jZU1ldChlKSYmdGhpcy5fbW91c2VEZWxheU1ldChlKSYmKHRoaXMuX21vdXNlU3RhcnRlZD10aGlzLl9tb3VzZVN0YXJ0KHRoaXMuX21vdXNlRG93bkV2ZW50LGUpIT09ITEsdGhpcy5fbW91c2VTdGFydGVkP3RoaXMuX21vdXNlRHJhZyhlKTp0aGlzLl9tb3VzZVVwKGUpKSwhdGhpcy5fbW91c2VTdGFydGVkKX0sX21vdXNlVXA6ZnVuY3Rpb24oZSl7dGhpcy5kb2N1bWVudC5vZmYoIm1vdXNlbW92ZS4iK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkub2ZmKCJtb3VzZXVwLiIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlVXBEZWxlZ2F0ZSksdGhpcy5fbW91c2VTdGFydGVkJiYodGhpcy5fbW91c2VTdGFydGVkPSExLGUudGFyZ2V0PT09dGhpcy5fbW91c2VEb3duRXZlbnQudGFyZ2V0JiZ0LmRhdGEoZS50YXJnZXQsdGhpcy53aWRnZXROYW1lKyIucHJldmVudENsaWNrRXZlbnQiLCEwKSx0aGlzLl9tb3VzZVN0b3AoZSkpLHRoaXMuX21vdXNlRGVsYXlUaW1lciYmKGNsZWFyVGltZW91dCh0aGlzLl9tb3VzZURlbGF5VGltZXIpLGRlbGV0ZSB0aGlzLl9tb3VzZURlbGF5VGltZXIpLHRoaXMuaWdub3JlTWlzc2luZ1doaWNoPSExLF89ITEsZS5wcmV2ZW50RGVmYXVsdCgpfSxfbW91c2VEaXN0YW5jZU1ldDpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5tYXgoTWF0aC5hYnModGhpcy5fbW91c2VEb3duRXZlbnQucGFnZVgtdC5wYWdlWCksTWF0aC5hYnModGhpcy5fbW91c2VEb3duRXZlbnQucGFnZVktdC5wYWdlWSkpPj10aGlzLm9wdGlvbnMuZGlzdGFuY2V9LF9tb3VzZURlbGF5TWV0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW91c2VEZWxheU1ldH0sX21vdXNlU3RhcnQ6ZnVuY3Rpb24oKXt9LF9tb3VzZURyYWc6ZnVuY3Rpb24oKXt9LF9tb3VzZVN0b3A6ZnVuY3Rpb24oKXt9LF9tb3VzZUNhcHR1cmU6ZnVuY3Rpb24oKXtyZXR1cm4hMH19KSx0LnVpLnBsdWdpbj17YWRkOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvPXQudWlbZV0ucHJvdG90eXBlO2ZvcihuIGluIHMpby5wbHVnaW5zW25dPW8ucGx1Z2luc1tuXXx8W10sby5wbHVnaW5zW25dLnB1c2goW2ksc1tuXV0pfSxjYWxsOmZ1bmN0aW9uKHQsZSxpLHMpe3ZhciBuLG89dC5wbHVnaW5zW2VdO2lmKG8mJihzfHx0LmVsZW1lbnRbMF0ucGFyZW50Tm9kZSYmMTEhPT10LmVsZW1lbnRbMF0ucGFyZW50Tm9kZS5ub2RlVHlwZSkpZm9yKG49MDtvLmxlbmd0aD5uO24rKyl0Lm9wdGlvbnNbb1tuXVswXV0mJm9bbl1bMV0uYXBwbHkodC5lbGVtZW50LGkpfX0sdC51aS5zYWZlQmx1cj1mdW5jdGlvbihlKXtlJiYiYm9keSIhPT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJnQoZSkudHJpZ2dlcigiYmx1ciIpfSx0LndpZGdldCgidWkuZHJhZ2dhYmxlIix0LnVpLm1vdXNlLHt2ZXJzaW9uOiIxLjEyLjEiLHdpZGdldEV2ZW50UHJlZml4OiJkcmFnIixvcHRpb25zOnthZGRDbGFzc2VzOiEwLGFwcGVuZFRvOiJwYXJlbnQiLGF4aXM6ITEsY29ubmVjdFRvU29ydGFibGU6ITEsY29udGFpbm1lbnQ6ITEsY3Vyc29yOiJhdXRvIixjdXJzb3JBdDohMSxncmlkOiExLGhhbmRsZTohMSxoZWxwZXI6Im9yaWdpbmFsIixpZnJhbWVGaXg6ITEsb3BhY2l0eTohMSxyZWZyZXNoUG9zaXRpb25zOiExLHJldmVydDohMSxyZXZlcnREdXJhdGlvbjo1MDAsc2NvcGU6ImRlZmF1bHQiLHNjcm9sbDohMCxzY3JvbGxTZW5zaXRpdml0eToyMCxzY3JvbGxTcGVlZDoyMCxzbmFwOiExLHNuYXBNb2RlOiJib3RoIixzbmFwVG9sZXJhbmNlOjIwLHN0YWNrOiExLHpJbmRleDohMSxkcmFnOm51bGwsc3RhcnQ6bnVsbCxzdG9wOm51bGx9LF9jcmVhdGU6ZnVuY3Rpb24oKXsib3JpZ2luYWwiPT09dGhpcy5vcHRpb25zLmhlbHBlciYmdGhpcy5fc2V0UG9zaXRpb25SZWxhdGl2ZSgpLHRoaXMub3B0aW9ucy5hZGRDbGFzc2VzJiZ0aGlzLl9hZGRDbGFzcygidWktZHJhZ2dhYmxlIiksdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCksdGhpcy5fbW91c2VJbml0KCl9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXt0aGlzLl9zdXBlcih0LGUpLCJoYW5kbGUiPT09dCYmKHRoaXMuX3JlbW92ZUhhbmRsZUNsYXNzTmFtZSgpLHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5oZWxwZXJ8fHRoaXMuZWxlbWVudCkuaXMoIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmciKT8odGhpcy5kZXN0cm95T25DbGVhcj0hMCx2b2lkIDApOih0aGlzLl9yZW1vdmVIYW5kbGVDbGFzc05hbWUoKSx0aGlzLl9tb3VzZURlc3Ryb3koKSx2b2lkIDApfSxfbW91c2VDYXB0dXJlOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucztyZXR1cm4gdGhpcy5oZWxwZXJ8fGkuZGlzYWJsZWR8fHQoZS50YXJnZXQpLmNsb3Nlc3QoIi51aS1yZXNpemFibGUtaGFuZGxlIikubGVuZ3RoPjA/ITE6KHRoaXMuaGFuZGxlPXRoaXMuX2dldEhhbmRsZShlKSx0aGlzLmhhbmRsZT8odGhpcy5fYmx1ckFjdGl2ZUVsZW1lbnQoZSksdGhpcy5fYmxvY2tGcmFtZXMoaS5pZnJhbWVGaXg9PT0hMD8iaWZyYW1lIjppLmlmcmFtZUZpeCksITApOiExKX0sX2Jsb2NrRnJhbWVzOmZ1bmN0aW9uKGUpe3RoaXMuaWZyYW1lQmxvY2tzPXRoaXMuZG9jdW1lbnQuZmluZChlKS5tYXAoZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO3JldHVybiB0KCI8ZGl2PiIpLmNzcygicG9zaXRpb24iLCJhYnNvbHV0ZSIpLmFwcGVuZFRvKGUucGFyZW50KCkpLm91dGVyV2lkdGgoZS5vdXRlcldpZHRoKCkpLm91dGVySGVpZ2h0KGUub3V0ZXJIZWlnaHQoKSkub2Zmc2V0KGUub2Zmc2V0KCkpWzBdfSl9LF91bmJsb2NrRnJhbWVzOmZ1bmN0aW9uKCl7dGhpcy5pZnJhbWVCbG9ja3MmJih0aGlzLmlmcmFtZUJsb2Nrcy5yZW1vdmUoKSxkZWxldGUgdGhpcy5pZnJhbWVCbG9ja3MpfSxfYmx1ckFjdGl2ZUVsZW1lbnQ6ZnVuY3Rpb24oZSl7dmFyIGk9dC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKSxzPXQoZS50YXJnZXQpO3MuY2xvc2VzdChpKS5sZW5ndGh8fHQudWkuc2FmZUJsdXIoaSl9LF9tb3VzZVN0YXJ0OmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucztyZXR1cm4gdGhpcy5oZWxwZXI9dGhpcy5fY3JlYXRlSGVscGVyKGUpLHRoaXMuX2FkZENsYXNzKHRoaXMuaGVscGVyLCJ1aS1kcmFnZ2FibGUtZHJhZ2dpbmciKSx0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksdC51aS5kZG1hbmFnZXImJih0LnVpLmRkbWFuYWdlci5jdXJyZW50PXRoaXMpLHRoaXMuX2NhY2hlTWFyZ2lucygpLHRoaXMuY3NzUG9zaXRpb249dGhpcy5oZWxwZXIuY3NzKCJwb3NpdGlvbiIpLHRoaXMuc2Nyb2xsUGFyZW50PXRoaXMuaGVscGVyLnNjcm9sbFBhcmVudCghMCksdGhpcy5vZmZzZXRQYXJlbnQ9dGhpcy5oZWxwZXIub2Zmc2V0UGFyZW50KCksdGhpcy5oYXNGaXhlZEFuY2VzdG9yPXRoaXMuaGVscGVyLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4iZml4ZWQiPT09dCh0aGlzKS5jc3MoInBvc2l0aW9uIil9KS5sZW5ndGg+MCx0aGlzLnBvc2l0aW9uQWJzPXRoaXMuZWxlbWVudC5vZmZzZXQoKSx0aGlzLl9yZWZyZXNoT2Zmc2V0cyhlKSx0aGlzLm9yaWdpbmFsUG9zaXRpb249dGhpcy5wb3NpdGlvbj10aGlzLl9nZW5lcmF0ZVBvc2l0aW9uKGUsITEpLHRoaXMub3JpZ2luYWxQYWdlWD1lLnBhZ2VYLHRoaXMub3JpZ2luYWxQYWdlWT1lLnBhZ2VZLGkuY3Vyc29yQXQmJnRoaXMuX2FkanVzdE9mZnNldEZyb21IZWxwZXIoaS5jdXJzb3JBdCksdGhpcy5fc2V0Q29udGFpbm1lbnQoKSx0aGlzLl90cmlnZ2VyKCJzdGFydCIsZSk9PT0hMT8odGhpcy5fY2xlYXIoKSwhMSk6KHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKSx0LnVpLmRkbWFuYWdlciYmIWkuZHJvcEJlaGF2aW91ciYmdC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcyxlKSx0aGlzLl9tb3VzZURyYWcoZSwhMCksdC51aS5kZG1hbmFnZXImJnQudWkuZGRtYW5hZ2VyLmRyYWdTdGFydCh0aGlzLGUpLCEwKX0sX3JlZnJlc2hPZmZzZXRzOmZ1bmN0aW9uKHQpe3RoaXMub2Zmc2V0PXt0b3A6dGhpcy5wb3NpdGlvbkFicy50b3AtdGhpcy5tYXJnaW5zLnRvcCxsZWZ0OnRoaXMucG9zaXRpb25BYnMubGVmdC10aGlzLm1hcmdpbnMubGVmdCxzY3JvbGw6ITEscGFyZW50OnRoaXMuX2dldFBhcmVudE9mZnNldCgpLHJlbGF0aXZlOnRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCl9LHRoaXMub2Zmc2V0LmNsaWNrPXtsZWZ0OnQucGFnZVgtdGhpcy5vZmZzZXQubGVmdCx0b3A6dC5wYWdlWS10aGlzLm9mZnNldC50b3B9fSxfbW91c2VEcmFnOmZ1bmN0aW9uKGUsaSl7aWYodGhpcy5oYXNGaXhlZEFuY2VzdG9yJiYodGhpcy5vZmZzZXQucGFyZW50PXRoaXMuX2dldFBhcmVudE9mZnNldCgpKSx0aGlzLnBvc2l0aW9uPXRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZSwhMCksdGhpcy5wb3NpdGlvbkFicz10aGlzLl9jb252ZXJ0UG9zaXRpb25UbygiYWJzb2x1dGUiKSwhaSl7dmFyIHM9dGhpcy5fdWlIYXNoKCk7aWYodGhpcy5fdHJpZ2dlcigiZHJhZyIsZSxzKT09PSExKXJldHVybiB0aGlzLl9tb3VzZVVwKG5ldyB0LkV2ZW50KCJtb3VzZXVwIixlKSksITE7dGhpcy5wb3NpdGlvbj1zLnBvc2l0aW9ufXJldHVybiB0aGlzLmhlbHBlclswXS5zdHlsZS5sZWZ0PXRoaXMucG9zaXRpb24ubGVmdCsicHgiLHRoaXMuaGVscGVyWzBdLnN0eWxlLnRvcD10aGlzLnBvc2l0aW9uLnRvcCsicHgiLHQudWkuZGRtYW5hZ2VyJiZ0LnVpLmRkbWFuYWdlci5kcmFnKHRoaXMsZSksITF9LF9tb3VzZVN0b3A6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcyxzPSExO3JldHVybiB0LnVpLmRkbWFuYWdlciYmIXRoaXMub3B0aW9ucy5kcm9wQmVoYXZpb3VyJiYocz10LnVpLmRkbWFuYWdlci5kcm9wKHRoaXMsZSkpLHRoaXMuZHJvcHBlZCYmKHM9dGhpcy5kcm9wcGVkLHRoaXMuZHJvcHBlZD0hMSksImludmFsaWQiPT09dGhpcy5vcHRpb25zLnJldmVydCYmIXN8fCJ2YWxpZCI9PT10aGlzLm9wdGlvbnMucmV2ZXJ0JiZzfHx0aGlzLm9wdGlvbnMucmV2ZXJ0PT09ITB8fHQuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMucmV2ZXJ0KSYmdGhpcy5vcHRpb25zLnJldmVydC5jYWxsKHRoaXMuZWxlbWVudCxzKT90KHRoaXMuaGVscGVyKS5hbmltYXRlKHRoaXMub3JpZ2luYWxQb3NpdGlvbixwYXJzZUludCh0aGlzLm9wdGlvbnMucmV2ZXJ0RHVyYXRpb24sMTApLGZ1bmN0aW9uKCl7aS5fdHJpZ2dlcigic3RvcCIsZSkhPT0hMSYmaS5fY2xlYXIoKX0pOnRoaXMuX3RyaWdnZXIoInN0b3AiLGUpIT09ITEmJnRoaXMuX2NsZWFyKCksITF9LF9tb3VzZVVwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl91bmJsb2NrRnJhbWVzKCksdC51aS5kZG1hbmFnZXImJnQudWkuZGRtYW5hZ2VyLmRyYWdTdG9wKHRoaXMsZSksdGhpcy5oYW5kbGVFbGVtZW50LmlzKGUudGFyZ2V0KSYmdGhpcy5lbGVtZW50LnRyaWdnZXIoImZvY3VzIiksdC51aS5tb3VzZS5wcm90b3R5cGUuX21vdXNlVXAuY2FsbCh0aGlzLGUpfSxjYW5jZWw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZWxwZXIuaXMoIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmciKT90aGlzLl9tb3VzZVVwKG5ldyB0LkV2ZW50KCJtb3VzZXVwIix7dGFyZ2V0OnRoaXMuZWxlbWVudFswXX0pKTp0aGlzLl9jbGVhcigpLHRoaXN9LF9nZXRIYW5kbGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub3B0aW9ucy5oYW5kbGU/ISF0KGUudGFyZ2V0KS5jbG9zZXN0KHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5oYW5kbGUpKS5sZW5ndGg6ITB9LF9zZXRIYW5kbGVDbGFzc05hbWU6ZnVuY3Rpb24oKXt0aGlzLmhhbmRsZUVsZW1lbnQ9dGhpcy5vcHRpb25zLmhhbmRsZT90aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMuaGFuZGxlKTp0aGlzLmVsZW1lbnQsdGhpcy5fYWRkQ2xhc3ModGhpcy5oYW5kbGVFbGVtZW50LCJ1aS1kcmFnZ2FibGUtaGFuZGxlIil9LF9yZW1vdmVIYW5kbGVDbGFzc05hbWU6ZnVuY3Rpb24oKXt0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmhhbmRsZUVsZW1lbnQsInVpLWRyYWdnYWJsZS1oYW5kbGUiKX0sX2NyZWF0ZUhlbHBlcjpmdW5jdGlvbihlKXt2YXIgaT10aGlzLm9wdGlvbnMscz10LmlzRnVuY3Rpb24oaS5oZWxwZXIpLG49cz90KGkuaGVscGVyLmFwcGx5KHRoaXMuZWxlbWVudFswXSxbZV0pKToiY2xvbmUiPT09aS5oZWxwZXI/dGhpcy5lbGVtZW50LmNsb25lKCkucmVtb3ZlQXR0cigiaWQiKTp0aGlzLmVsZW1lbnQ7cmV0dXJuIG4ucGFyZW50cygiYm9keSIpLmxlbmd0aHx8bi5hcHBlbmRUbygicGFyZW50Ij09PWkuYXBwZW5kVG8/dGhpcy5lbGVtZW50WzBdLnBhcmVudE5vZGU6aS5hcHBlbmRUbykscyYmblswXT09PXRoaXMuZWxlbWVudFswXSYmdGhpcy5fc2V0UG9zaXRpb25SZWxhdGl2ZSgpLG5bMF09PT10aGlzLmVsZW1lbnRbMF18fC8oZml4ZWR8YWJzb2x1dGUpLy50ZXN0KG4uY3NzKCJwb3NpdGlvbiIpKXx8bi5jc3MoInBvc2l0aW9uIiwiYWJzb2x1dGUiKSxufSxfc2V0UG9zaXRpb25SZWxhdGl2ZTpmdW5jdGlvbigpey9eKD86cnxhfGYpLy50ZXN0KHRoaXMuZWxlbWVudC5jc3MoInBvc2l0aW9uIikpfHwodGhpcy5lbGVtZW50WzBdLnN0eWxlLnBvc2l0aW9uPSJyZWxhdGl2ZSIpfSxfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjpmdW5jdGlvbihlKXsic3RyaW5nIj09dHlwZW9mIGUmJihlPWUuc3BsaXQoIiAiKSksdC5pc0FycmF5KGUpJiYoZT17bGVmdDorZVswXSx0b3A6K2VbMV18fDB9KSwibGVmdCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2subGVmdD1lLmxlZnQrdGhpcy5tYXJnaW5zLmxlZnQpLCJyaWdodCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2subGVmdD10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLWUucmlnaHQrdGhpcy5tYXJnaW5zLmxlZnQpLCJ0b3AiaW4gZSYmKHRoaXMub2Zmc2V0LmNsaWNrLnRvcD1lLnRvcCt0aGlzLm1hcmdpbnMudG9wKSwiYm90dG9tImluIGUmJih0aGlzLm9mZnNldC5jbGljay50b3A9dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtZS5ib3R0b20rdGhpcy5tYXJnaW5zLnRvcCl9LF9pc1Jvb3ROb2RlOmZ1bmN0aW9uKHQpe3JldHVybi8oaHRtbHxib2R5KS9pLnRlc3QodC50YWdOYW1lKXx8dD09PXRoaXMuZG9jdW1lbnRbMF19LF9nZXRQYXJlbnRPZmZzZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKSxpPXRoaXMuZG9jdW1lbnRbMF07cmV0dXJuImFic29sdXRlIj09PXRoaXMuY3NzUG9zaXRpb24mJnRoaXMuc2Nyb2xsUGFyZW50WzBdIT09aSYmdC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSx0aGlzLm9mZnNldFBhcmVudFswXSkmJihlLmxlZnQrPXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSxlLnRvcCs9dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkpLHRoaXMuX2lzUm9vdE5vZGUodGhpcy5vZmZzZXRQYXJlbnRbMF0pJiYoZT17dG9wOjAsbGVmdDowfSkse3RvcDplLnRvcCsocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKXx8MCksbGVmdDplLmxlZnQrKHBhcnNlSW50KHRoaXMub2Zmc2V0UGFyZW50LmNzcygiYm9yZGVyTGVmdFdpZHRoIiksMTApfHwwKX19LF9nZXRSZWxhdGl2ZU9mZnNldDpmdW5jdGlvbigpe2lmKCJyZWxhdGl2ZSIhPT10aGlzLmNzc1Bvc2l0aW9uKXJldHVybnt0b3A6MCxsZWZ0OjB9O3ZhciB0PXRoaXMuZWxlbWVudC5wb3NpdGlvbigpLGU9dGhpcy5faXNSb290Tm9kZSh0aGlzLnNjcm9sbFBhcmVudFswXSk7cmV0dXJue3RvcDp0LnRvcC0ocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKCJ0b3AiKSwxMCl8fDApKyhlPzA6dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkpLGxlZnQ6dC5sZWZ0LShwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoImxlZnQiKSwxMCl8fDApKyhlPzA6dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpKX0KfSxfY2FjaGVNYXJnaW5zOmZ1bmN0aW9uKCl7dGhpcy5tYXJnaW5zPXtsZWZ0OnBhcnNlSW50KHRoaXMuZWxlbWVudC5jc3MoIm1hcmdpbkxlZnQiKSwxMCl8fDAsdG9wOnBhcnNlSW50KHRoaXMuZWxlbWVudC5jc3MoIm1hcmdpblRvcCIpLDEwKXx8MCxyaWdodDpwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKCJtYXJnaW5SaWdodCIpLDEwKXx8MCxib3R0b206cGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcygibWFyZ2luQm90dG9tIiksMTApfHwwfX0sX2NhY2hlSGVscGVyUHJvcG9ydGlvbnM6ZnVuY3Rpb24oKXt0aGlzLmhlbHBlclByb3BvcnRpb25zPXt3aWR0aDp0aGlzLmhlbHBlci5vdXRlcldpZHRoKCksaGVpZ2h0OnRoaXMuaGVscGVyLm91dGVySGVpZ2h0KCl9fSxfc2V0Q29udGFpbm1lbnQ6ZnVuY3Rpb24oKXt2YXIgZSxpLHMsbj10aGlzLm9wdGlvbnMsbz10aGlzLmRvY3VtZW50WzBdO3JldHVybiB0aGlzLnJlbGF0aXZlQ29udGFpbmVyPW51bGwsbi5jb250YWlubWVudD8id2luZG93Ij09PW4uY29udGFpbm1lbnQ/KHRoaXMuY29udGFpbm1lbnQ9W3Qod2luZG93KS5zY3JvbGxMZWZ0KCktdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdC10aGlzLm9mZnNldC5wYXJlbnQubGVmdCx0KHdpbmRvdykuc2Nyb2xsVG9wKCktdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3AsdCh3aW5kb3cpLnNjcm9sbExlZnQoKSt0KHdpbmRvdykud2lkdGgoKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LHQod2luZG93KS5zY3JvbGxUb3AoKSsodCh3aW5kb3cpLmhlaWdodCgpfHxvLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LXRoaXMubWFyZ2lucy50b3BdLHZvaWQgMCk6ImRvY3VtZW50Ij09PW4uY29udGFpbm1lbnQ/KHRoaXMuY29udGFpbm1lbnQ9WzAsMCx0KG8pLndpZHRoKCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aC10aGlzLm1hcmdpbnMubGVmdCwodChvKS5oZWlnaHQoKXx8by5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0KS10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC10aGlzLm1hcmdpbnMudG9wXSx2b2lkIDApOm4uY29udGFpbm1lbnQuY29uc3RydWN0b3I9PT1BcnJheT8odGhpcy5jb250YWlubWVudD1uLmNvbnRhaW5tZW50LHZvaWQgMCk6KCJwYXJlbnQiPT09bi5jb250YWlubWVudCYmKG4uY29udGFpbm1lbnQ9dGhpcy5oZWxwZXJbMF0ucGFyZW50Tm9kZSksaT10KG4uY29udGFpbm1lbnQpLHM9aVswXSxzJiYoZT0vKHNjcm9sbHxhdXRvKS8udGVzdChpLmNzcygib3ZlcmZsb3ciKSksdGhpcy5jb250YWlubWVudD1bKHBhcnNlSW50KGkuY3NzKCJib3JkZXJMZWZ0V2lkdGgiKSwxMCl8fDApKyhwYXJzZUludChpLmNzcygicGFkZGluZ0xlZnQiKSwxMCl8fDApLChwYXJzZUludChpLmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCl8fDApKyhwYXJzZUludChpLmNzcygicGFkZGluZ1RvcCIpLDEwKXx8MCksKGU/TWF0aC5tYXgocy5zY3JvbGxXaWR0aCxzLm9mZnNldFdpZHRoKTpzLm9mZnNldFdpZHRoKS0ocGFyc2VJbnQoaS5jc3MoImJvcmRlclJpZ2h0V2lkdGgiKSwxMCl8fDApLShwYXJzZUludChpLmNzcygicGFkZGluZ1JpZ2h0IiksMTApfHwwKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LXRoaXMubWFyZ2lucy5yaWdodCwoZT9NYXRoLm1heChzLnNjcm9sbEhlaWdodCxzLm9mZnNldEhlaWdodCk6cy5vZmZzZXRIZWlnaHQpLShwYXJzZUludChpLmNzcygiYm9yZGVyQm90dG9tV2lkdGgiKSwxMCl8fDApLShwYXJzZUludChpLmNzcygicGFkZGluZ0JvdHRvbSIpLDEwKXx8MCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtdGhpcy5tYXJnaW5zLnRvcC10aGlzLm1hcmdpbnMuYm90dG9tXSx0aGlzLnJlbGF0aXZlQ29udGFpbmVyPWkpLHZvaWQgMCk6KHRoaXMuY29udGFpbm1lbnQ9bnVsbCx2b2lkIDApfSxfY29udmVydFBvc2l0aW9uVG86ZnVuY3Rpb24odCxlKXtlfHwoZT10aGlzLnBvc2l0aW9uKTt2YXIgaT0iYWJzb2x1dGUiPT09dD8xOi0xLHM9dGhpcy5faXNSb290Tm9kZSh0aGlzLnNjcm9sbFBhcmVudFswXSk7cmV0dXJue3RvcDplLnRvcCt0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AqaSt0aGlzLm9mZnNldC5wYXJlbnQudG9wKmktKCJmaXhlZCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLm9mZnNldC5zY3JvbGwudG9wOnM/MDp0aGlzLm9mZnNldC5zY3JvbGwudG9wKSppLGxlZnQ6ZS5sZWZ0K3RoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQqaSt0aGlzLm9mZnNldC5wYXJlbnQubGVmdCppLSgiZml4ZWQiPT09dGhpcy5jc3NQb3NpdGlvbj8tdGhpcy5vZmZzZXQuc2Nyb2xsLmxlZnQ6cz8wOnRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0KSppfX0sX2dlbmVyYXRlUG9zaXRpb246ZnVuY3Rpb24odCxlKXt2YXIgaSxzLG4sbyxhPXRoaXMub3B0aW9ucyxyPXRoaXMuX2lzUm9vdE5vZGUodGhpcy5zY3JvbGxQYXJlbnRbMF0pLGg9dC5wYWdlWCxsPXQucGFnZVk7cmV0dXJuIHImJnRoaXMub2Zmc2V0LnNjcm9sbHx8KHRoaXMub2Zmc2V0LnNjcm9sbD17dG9wOnRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpLGxlZnQ6dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpfSksZSYmKHRoaXMuY29udGFpbm1lbnQmJih0aGlzLnJlbGF0aXZlQ29udGFpbmVyPyhzPXRoaXMucmVsYXRpdmVDb250YWluZXIub2Zmc2V0KCksaT1bdGhpcy5jb250YWlubWVudFswXStzLmxlZnQsdGhpcy5jb250YWlubWVudFsxXStzLnRvcCx0aGlzLmNvbnRhaW5tZW50WzJdK3MubGVmdCx0aGlzLmNvbnRhaW5tZW50WzNdK3MudG9wXSk6aT10aGlzLmNvbnRhaW5tZW50LHQucGFnZVgtdGhpcy5vZmZzZXQuY2xpY2subGVmdDxpWzBdJiYoaD1pWzBdK3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLHQucGFnZVktdGhpcy5vZmZzZXQuY2xpY2sudG9wPGlbMV0mJihsPWlbMV0rdGhpcy5vZmZzZXQuY2xpY2sudG9wKSx0LnBhZ2VYLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ+aVsyXSYmKGg9aVsyXSt0aGlzLm9mZnNldC5jbGljay5sZWZ0KSx0LnBhZ2VZLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD5pWzNdJiYobD1pWzNdK3RoaXMub2Zmc2V0LmNsaWNrLnRvcCkpLGEuZ3JpZCYmKG49YS5ncmlkWzFdP3RoaXMub3JpZ2luYWxQYWdlWStNYXRoLnJvdW5kKChsLXRoaXMub3JpZ2luYWxQYWdlWSkvYS5ncmlkWzFdKSphLmdyaWRbMV06dGhpcy5vcmlnaW5hbFBhZ2VZLGw9aT9uLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49aVsxXXx8bi10aGlzLm9mZnNldC5jbGljay50b3A+aVszXT9uOm4tdGhpcy5vZmZzZXQuY2xpY2sudG9wPj1pWzFdP24tYS5ncmlkWzFdOm4rYS5ncmlkWzFdOm4sbz1hLmdyaWRbMF0/dGhpcy5vcmlnaW5hbFBhZ2VYK01hdGgucm91bmQoKGgtdGhpcy5vcmlnaW5hbFBhZ2VYKS9hLmdyaWRbMF0pKmEuZ3JpZFswXTp0aGlzLm9yaWdpbmFsUGFnZVgsaD1pP28tdGhpcy5vZmZzZXQuY2xpY2subGVmdD49aVswXXx8by10aGlzLm9mZnNldC5jbGljay5sZWZ0PmlbMl0/bzpvLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ+PWlbMF0/by1hLmdyaWRbMF06bythLmdyaWRbMF06byksInkiPT09YS5heGlzJiYoaD10aGlzLm9yaWdpbmFsUGFnZVgpLCJ4Ij09PWEuYXhpcyYmKGw9dGhpcy5vcmlnaW5hbFBhZ2VZKSkse3RvcDpsLXRoaXMub2Zmc2V0LmNsaWNrLnRvcC10aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AtdGhpcy5vZmZzZXQucGFyZW50LnRvcCsoImZpeGVkIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMub2Zmc2V0LnNjcm9sbC50b3A6cj8wOnRoaXMub2Zmc2V0LnNjcm9sbC50b3ApLGxlZnQ6aC10aGlzLm9mZnNldC5jbGljay5sZWZ0LXRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQtdGhpcy5vZmZzZXQucGFyZW50LmxlZnQrKCJmaXhlZCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLm9mZnNldC5zY3JvbGwubGVmdDpyPzA6dGhpcy5vZmZzZXQuc2Nyb2xsLmxlZnQpfX0sX2NsZWFyOmZ1bmN0aW9uKCl7dGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5oZWxwZXIsInVpLWRyYWdnYWJsZS1kcmFnZ2luZyIpLHRoaXMuaGVscGVyWzBdPT09dGhpcy5lbGVtZW50WzBdfHx0aGlzLmNhbmNlbEhlbHBlclJlbW92YWx8fHRoaXMuaGVscGVyLnJlbW92ZSgpLHRoaXMuaGVscGVyPW51bGwsdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsPSExLHRoaXMuZGVzdHJveU9uQ2xlYXImJnRoaXMuZGVzdHJveSgpfSxfdHJpZ2dlcjpmdW5jdGlvbihlLGkscyl7cmV0dXJuIHM9c3x8dGhpcy5fdWlIYXNoKCksdC51aS5wbHVnaW4uY2FsbCh0aGlzLGUsW2kscyx0aGlzXSwhMCksL14oZHJhZ3xzdGFydHxzdG9wKS8udGVzdChlKSYmKHRoaXMucG9zaXRpb25BYnM9dGhpcy5fY29udmVydFBvc2l0aW9uVG8oImFic29sdXRlIikscy5vZmZzZXQ9dGhpcy5wb3NpdGlvbkFicyksdC5XaWRnZXQucHJvdG90eXBlLl90cmlnZ2VyLmNhbGwodGhpcyxlLGkscyl9LHBsdWdpbnM6e30sX3VpSGFzaDpmdW5jdGlvbigpe3JldHVybntoZWxwZXI6dGhpcy5oZWxwZXIscG9zaXRpb246dGhpcy5wb3NpdGlvbixvcmlnaW5hbFBvc2l0aW9uOnRoaXMub3JpZ2luYWxQb3NpdGlvbixvZmZzZXQ6dGhpcy5wb3NpdGlvbkFic319fSksdC51aS5wbHVnaW4uYWRkKCJkcmFnZ2FibGUiLCJjb25uZWN0VG9Tb3J0YWJsZSIse3N0YXJ0OmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj10LmV4dGVuZCh7fSxpLHtpdGVtOnMuZWxlbWVudH0pO3Muc29ydGFibGVzPVtdLHQocy5vcHRpb25zLmNvbm5lY3RUb1NvcnRhYmxlKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9dCh0aGlzKS5zb3J0YWJsZSgiaW5zdGFuY2UiKTtpJiYhaS5vcHRpb25zLmRpc2FibGVkJiYocy5zb3J0YWJsZXMucHVzaChpKSxpLnJlZnJlc2hQb3NpdGlvbnMoKSxpLl90cmlnZ2VyKCJhY3RpdmF0ZSIsZSxuKSl9KX0sc3RvcDpmdW5jdGlvbihlLGkscyl7dmFyIG49dC5leHRlbmQoe30saSx7aXRlbTpzLmVsZW1lbnR9KTtzLmNhbmNlbEhlbHBlclJlbW92YWw9ITEsdC5lYWNoKHMuc29ydGFibGVzLGZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0LmlzT3Zlcj8odC5pc092ZXI9MCxzLmNhbmNlbEhlbHBlclJlbW92YWw9ITAsdC5jYW5jZWxIZWxwZXJSZW1vdmFsPSExLHQuX3N0b3JlZENTUz17cG9zaXRpb246dC5wbGFjZWhvbGRlci5jc3MoInBvc2l0aW9uIiksdG9wOnQucGxhY2Vob2xkZXIuY3NzKCJ0b3AiKSxsZWZ0OnQucGxhY2Vob2xkZXIuY3NzKCJsZWZ0Iil9LHQuX21vdXNlU3RvcChlKSx0Lm9wdGlvbnMuaGVscGVyPXQub3B0aW9ucy5faGVscGVyKToodC5jYW5jZWxIZWxwZXJSZW1vdmFsPSEwLHQuX3RyaWdnZXIoImRlYWN0aXZhdGUiLGUsbikpfSl9LGRyYWc6ZnVuY3Rpb24oZSxpLHMpe3QuZWFjaChzLnNvcnRhYmxlcyxmdW5jdGlvbigpe3ZhciBuPSExLG89dGhpcztvLnBvc2l0aW9uQWJzPXMucG9zaXRpb25BYnMsby5oZWxwZXJQcm9wb3J0aW9ucz1zLmhlbHBlclByb3BvcnRpb25zLG8ub2Zmc2V0LmNsaWNrPXMub2Zmc2V0LmNsaWNrLG8uX2ludGVyc2VjdHNXaXRoKG8uY29udGFpbmVyQ2FjaGUpJiYobj0hMCx0LmVhY2gocy5zb3J0YWJsZXMsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wb3NpdGlvbkFicz1zLnBvc2l0aW9uQWJzLHRoaXMuaGVscGVyUHJvcG9ydGlvbnM9cy5oZWxwZXJQcm9wb3J0aW9ucyx0aGlzLm9mZnNldC5jbGljaz1zLm9mZnNldC5jbGljayx0aGlzIT09byYmdGhpcy5faW50ZXJzZWN0c1dpdGgodGhpcy5jb250YWluZXJDYWNoZSkmJnQuY29udGFpbnMoby5lbGVtZW50WzBdLHRoaXMuZWxlbWVudFswXSkmJihuPSExKSxufSkpLG4/KG8uaXNPdmVyfHwoby5pc092ZXI9MSxzLl9wYXJlbnQ9aS5oZWxwZXIucGFyZW50KCksby5jdXJyZW50SXRlbT1pLmhlbHBlci5hcHBlbmRUbyhvLmVsZW1lbnQpLmRhdGEoInVpLXNvcnRhYmxlLWl0ZW0iLCEwKSxvLm9wdGlvbnMuX2hlbHBlcj1vLm9wdGlvbnMuaGVscGVyLG8ub3B0aW9ucy5oZWxwZXI9ZnVuY3Rpb24oKXtyZXR1cm4gaS5oZWxwZXJbMF19LGUudGFyZ2V0PW8uY3VycmVudEl0ZW1bMF0sby5fbW91c2VDYXB0dXJlKGUsITApLG8uX21vdXNlU3RhcnQoZSwhMCwhMCksby5vZmZzZXQuY2xpY2sudG9wPXMub2Zmc2V0LmNsaWNrLnRvcCxvLm9mZnNldC5jbGljay5sZWZ0PXMub2Zmc2V0LmNsaWNrLmxlZnQsby5vZmZzZXQucGFyZW50LmxlZnQtPXMub2Zmc2V0LnBhcmVudC5sZWZ0LW8ub2Zmc2V0LnBhcmVudC5sZWZ0LG8ub2Zmc2V0LnBhcmVudC50b3AtPXMub2Zmc2V0LnBhcmVudC50b3Atby5vZmZzZXQucGFyZW50LnRvcCxzLl90cmlnZ2VyKCJ0b1NvcnRhYmxlIixlKSxzLmRyb3BwZWQ9by5lbGVtZW50LHQuZWFjaChzLnNvcnRhYmxlcyxmdW5jdGlvbigpe3RoaXMucmVmcmVzaFBvc2l0aW9ucygpfSkscy5jdXJyZW50SXRlbT1zLmVsZW1lbnQsby5mcm9tT3V0c2lkZT1zKSxvLmN1cnJlbnRJdGVtJiYoby5fbW91c2VEcmFnKGUpLGkucG9zaXRpb249by5wb3NpdGlvbikpOm8uaXNPdmVyJiYoby5pc092ZXI9MCxvLmNhbmNlbEhlbHBlclJlbW92YWw9ITAsby5vcHRpb25zLl9yZXZlcnQ9by5vcHRpb25zLnJldmVydCxvLm9wdGlvbnMucmV2ZXJ0PSExLG8uX3RyaWdnZXIoIm91dCIsZSxvLl91aUhhc2gobykpLG8uX21vdXNlU3RvcChlLCEwKSxvLm9wdGlvbnMucmV2ZXJ0PW8ub3B0aW9ucy5fcmV2ZXJ0LG8ub3B0aW9ucy5oZWxwZXI9by5vcHRpb25zLl9oZWxwZXIsby5wbGFjZWhvbGRlciYmby5wbGFjZWhvbGRlci5yZW1vdmUoKSxpLmhlbHBlci5hcHBlbmRUbyhzLl9wYXJlbnQpLHMuX3JlZnJlc2hPZmZzZXRzKGUpLGkucG9zaXRpb249cy5fZ2VuZXJhdGVQb3NpdGlvbihlLCEwKSxzLl90cmlnZ2VyKCJmcm9tU29ydGFibGUiLGUpLHMuZHJvcHBlZD0hMSx0LmVhY2gocy5zb3J0YWJsZXMsZnVuY3Rpb24oKXt0aGlzLnJlZnJlc2hQb3NpdGlvbnMoKX0pKX0pfX0pLHQudWkucGx1Z2luLmFkZCgiZHJhZ2dhYmxlIiwiY3Vyc29yIix7c3RhcnQ6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXQoImJvZHkiKSxvPXMub3B0aW9ucztuLmNzcygiY3Vyc29yIikmJihvLl9jdXJzb3I9bi5jc3MoImN1cnNvciIpKSxuLmNzcygiY3Vyc29yIixvLmN1cnNvcil9LHN0b3A6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXMub3B0aW9ucztuLl9jdXJzb3ImJnQoImJvZHkiKS5jc3MoImN1cnNvciIsbi5fY3Vyc29yKX19KSx0LnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsIm9wYWNpdHkiLHtzdGFydDpmdW5jdGlvbihlLGkscyl7dmFyIG49dChpLmhlbHBlciksbz1zLm9wdGlvbnM7bi5jc3MoIm9wYWNpdHkiKSYmKG8uX29wYWNpdHk9bi5jc3MoIm9wYWNpdHkiKSksbi5jc3MoIm9wYWNpdHkiLG8ub3BhY2l0eSl9LHN0b3A6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXMub3B0aW9ucztuLl9vcGFjaXR5JiZ0KGkuaGVscGVyKS5jc3MoIm9wYWNpdHkiLG4uX29wYWNpdHkpfX0pLHQudWkucGx1Z2luLmFkZCgiZHJhZ2dhYmxlIiwic2Nyb2xsIix7c3RhcnQ6ZnVuY3Rpb24odCxlLGkpe2kuc2Nyb2xsUGFyZW50Tm90SGlkZGVufHwoaS5zY3JvbGxQYXJlbnROb3RIaWRkZW49aS5oZWxwZXIuc2Nyb2xsUGFyZW50KCExKSksaS5zY3JvbGxQYXJlbnROb3RIaWRkZW5bMF0hPT1pLmRvY3VtZW50WzBdJiYiSFRNTCIhPT1pLnNjcm9sbFBhcmVudE5vdEhpZGRlblswXS50YWdOYW1lJiYoaS5vdmVyZmxvd09mZnNldD1pLnNjcm9sbFBhcmVudE5vdEhpZGRlbi5vZmZzZXQoKSl9LGRyYWc6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXMub3B0aW9ucyxvPSExLGE9cy5zY3JvbGxQYXJlbnROb3RIaWRkZW5bMF0scj1zLmRvY3VtZW50WzBdO2EhPT1yJiYiSFRNTCIhPT1hLnRhZ05hbWU/KG4uYXhpcyYmIngiPT09bi5heGlzfHwocy5vdmVyZmxvd09mZnNldC50b3ArYS5vZmZzZXRIZWlnaHQtZS5wYWdlWTxuLnNjcm9sbFNlbnNpdGl2aXR5P2Euc2Nyb2xsVG9wPW89YS5zY3JvbGxUb3Arbi5zY3JvbGxTcGVlZDplLnBhZ2VZLXMub3ZlcmZsb3dPZmZzZXQudG9wPG4uc2Nyb2xsU2Vuc2l0aXZpdHkmJihhLnNjcm9sbFRvcD1vPWEuc2Nyb2xsVG9wLW4uc2Nyb2xsU3BlZWQpKSxuLmF4aXMmJiJ5Ij09PW4uYXhpc3x8KHMub3ZlcmZsb3dPZmZzZXQubGVmdCthLm9mZnNldFdpZHRoLWUucGFnZVg8bi5zY3JvbGxTZW5zaXRpdml0eT9hLnNjcm9sbExlZnQ9bz1hLnNjcm9sbExlZnQrbi5zY3JvbGxTcGVlZDplLnBhZ2VYLXMub3ZlcmZsb3dPZmZzZXQubGVmdDxuLnNjcm9sbFNlbnNpdGl2aXR5JiYoYS5zY3JvbGxMZWZ0PW89YS5zY3JvbGxMZWZ0LW4uc2Nyb2xsU3BlZWQpKSk6KG4uYXhpcyYmIngiPT09bi5heGlzfHwoZS5wYWdlWS10KHIpLnNjcm9sbFRvcCgpPG4uc2Nyb2xsU2Vuc2l0aXZpdHk/bz10KHIpLnNjcm9sbFRvcCh0KHIpLnNjcm9sbFRvcCgpLW4uc2Nyb2xsU3BlZWQpOnQod2luZG93KS5oZWlnaHQoKS0oZS5wYWdlWS10KHIpLnNjcm9sbFRvcCgpKTxuLnNjcm9sbFNlbnNpdGl2aXR5JiYobz10KHIpLnNjcm9sbFRvcCh0KHIpLnNjcm9sbFRvcCgpK24uc2Nyb2xsU3BlZWQpKSksbi5heGlzJiYieSI9PT1uLmF4aXN8fChlLnBhZ2VYLXQocikuc2Nyb2xsTGVmdCgpPG4uc2Nyb2xsU2Vuc2l0aXZpdHk/bz10KHIpLnNjcm9sbExlZnQodChyKS5zY3JvbGxMZWZ0KCktbi5zY3JvbGxTcGVlZCk6dCh3aW5kb3cpLndpZHRoKCktKGUucGFnZVgtdChyKS5zY3JvbGxMZWZ0KCkpPG4uc2Nyb2xsU2Vuc2l0aXZpdHkmJihvPXQocikuc2Nyb2xsTGVmdCh0KHIpLnNjcm9sbExlZnQoKStuLnNjcm9sbFNwZWVkKSkpKSxvIT09ITEmJnQudWkuZGRtYW5hZ2VyJiYhbi5kcm9wQmVoYXZpb3VyJiZ0LnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyhzLGUpfX0pLHQudWkucGx1Z2luLmFkZCgiZHJhZ2dhYmxlIiwic25hcCIse3N0YXJ0OmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj1zLm9wdGlvbnM7cy5zbmFwRWxlbWVudHM9W10sdChuLnNuYXAuY29uc3RydWN0b3IhPT1TdHJpbmc/bi5zbmFwLml0ZW1zfHwiOmRhdGEodWktZHJhZ2dhYmxlKSI6bi5zbmFwKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxpPWUub2Zmc2V0KCk7dGhpcyE9PXMuZWxlbWVudFswXSYmcy5zbmFwRWxlbWVudHMucHVzaCh7aXRlbTp0aGlzLHdpZHRoOmUub3V0ZXJXaWR0aCgpLGhlaWdodDplLm91dGVySGVpZ2h0KCksdG9wOmkudG9wLGxlZnQ6aS5sZWZ0fSl9KX0sZHJhZzpmdW5jdGlvbihlLGkscyl7dmFyIG4sbyxhLHIsaCxsLGMsdSxkLHAsZj1zLm9wdGlvbnMsZz1mLnNuYXBUb2xlcmFuY2UsbT1pLm9mZnNldC5sZWZ0LF89bStzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLHY9aS5vZmZzZXQudG9wLGI9ditzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodDtmb3IoZD1zLnNuYXBFbGVtZW50cy5sZW5ndGgtMTtkPj0wO2QtLSloPXMuc25hcEVsZW1lbnRzW2RdLmxlZnQtcy5tYXJnaW5zLmxlZnQsbD1oK3Muc25hcEVsZW1lbnRzW2RdLndpZHRoLGM9cy5zbmFwRWxlbWVudHNbZF0udG9wLXMubWFyZ2lucy50b3AsdT1jK3Muc25hcEVsZW1lbnRzW2RdLmhlaWdodCxoLWc+X3x8bT5sK2d8fGMtZz5ifHx2PnUrZ3x8IXQuY29udGFpbnMocy5zbmFwRWxlbWVudHNbZF0uaXRlbS5vd25lckRvY3VtZW50LHMuc25hcEVsZW1lbnRzW2RdLml0ZW0pPyhzLnNuYXBFbGVtZW50c1tkXS5zbmFwcGluZyYmcy5vcHRpb25zLnNuYXAucmVsZWFzZSYmcy5vcHRpb25zLnNuYXAucmVsZWFzZS5jYWxsKHMuZWxlbWVudCxlLHQuZXh0ZW5kKHMuX3VpSGFzaCgpLHtzbmFwSXRlbTpzLnNuYXBFbGVtZW50c1tkXS5pdGVtfSkpLHMuc25hcEVsZW1lbnRzW2RdLnNuYXBwaW5nPSExKTooImlubmVyIiE9PWYuc25hcE1vZGUmJihuPWc+PU1hdGguYWJzKGMtYiksbz1nPj1NYXRoLmFicyh1LXYpLGE9Zz49TWF0aC5hYnMoaC1fKSxyPWc+PU1hdGguYWJzKGwtbSksbiYmKGkucG9zaXRpb24udG9wPXMuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIse3RvcDpjLXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LGxlZnQ6MH0pLnRvcCksbyYmKGkucG9zaXRpb24udG9wPXMuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIse3RvcDp1LGxlZnQ6MH0pLnRvcCksYSYmKGkucG9zaXRpb24ubGVmdD1zLl9jb252ZXJ0UG9zaXRpb25UbygicmVsYXRpdmUiLHt0b3A6MCxsZWZ0Omgtcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aH0pLmxlZnQpLHImJihpLnBvc2l0aW9uLmxlZnQ9cy5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIix7dG9wOjAsbGVmdDpsfSkubGVmdCkpLHA9bnx8b3x8YXx8ciwib3V0ZXIiIT09Zi5zbmFwTW9kZSYmKG49Zz49TWF0aC5hYnMoYy12KSxvPWc+PU1hdGguYWJzKHUtYiksYT1nPj1NYXRoLmFicyhoLW0pLHI9Zz49TWF0aC5hYnMobC1fKSxuJiYoaS5wb3NpdGlvbi50b3A9cy5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIix7dG9wOmMsbGVmdDowfSkudG9wKSxvJiYoaS5wb3NpdGlvbi50b3A9cy5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIix7dG9wOnUtcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsbGVmdDowfSkudG9wKSxhJiYoaS5wb3NpdGlvbi5sZWZ0PXMuX2NvbnZlcnRQb3NpdGlvblRvKCJyZWxhdGl2ZSIse3RvcDowLGxlZnQ6aH0pLmxlZnQpLHImJihpLnBvc2l0aW9uLmxlZnQ9cy5fY29udmVydFBvc2l0aW9uVG8oInJlbGF0aXZlIix7dG9wOjAsbGVmdDpsLXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGh9KS5sZWZ0KSksIXMuc25hcEVsZW1lbnRzW2RdLnNuYXBwaW5nJiYobnx8b3x8YXx8cnx8cCkmJnMub3B0aW9ucy5zbmFwLnNuYXAmJnMub3B0aW9ucy5zbmFwLnNuYXAuY2FsbChzLmVsZW1lbnQsZSx0LmV4dGVuZChzLl91aUhhc2goKSx7c25hcEl0ZW06cy5zbmFwRWxlbWVudHNbZF0uaXRlbX0pKSxzLnNuYXBFbGVtZW50c1tkXS5zbmFwcGluZz1ufHxvfHxhfHxyfHxwKX19KSx0LnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsInN0YWNrIix7c3RhcnQ6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuLG89cy5vcHRpb25zLGE9dC5tYWtlQXJyYXkodChvLnN0YWNrKSkuc29ydChmdW5jdGlvbihlLGkpe3JldHVybihwYXJzZUludCh0KGUpLmNzcygiekluZGV4IiksMTApfHwwKS0ocGFyc2VJbnQodChpKS5jc3MoInpJbmRleCIpLDEwKXx8MCl9KTthLmxlbmd0aCYmKG49cGFyc2VJbnQodChhWzBdKS5jc3MoInpJbmRleCIpLDEwKXx8MCx0KGEpLmVhY2goZnVuY3Rpb24oZSl7dCh0aGlzKS5jc3MoInpJbmRleCIsbitlKX0pLHRoaXMuY3NzKCJ6SW5kZXgiLG4rYS5sZW5ndGgpKX19KSx0LnVpLnBsdWdpbi5hZGQoImRyYWdnYWJsZSIsInpJbmRleCIse3N0YXJ0OmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj10KGkuaGVscGVyKSxvPXMub3B0aW9ucztuLmNzcygiekluZGV4IikmJihvLl96SW5kZXg9bi5jc3MoInpJbmRleCIpKSxuLmNzcygiekluZGV4IixvLnpJbmRleCl9LHN0b3A6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXMub3B0aW9ucztuLl96SW5kZXgmJnQoaS5oZWxwZXIpLmNzcygiekluZGV4IixuLl96SW5kZXgpfX0pLHQudWkuZHJhZ2dhYmxlLHQud2lkZ2V0KCJ1aS5yZXNpemFibGUiLHQudWkubW91c2Use3ZlcnNpb246IjEuMTIuMSIsd2lkZ2V0RXZlbnRQcmVmaXg6InJlc2l6ZSIsb3B0aW9uczp7YWxzb1Jlc2l6ZTohMSxhbmltYXRlOiExLGFuaW1hdGVEdXJhdGlvbjoic2xvdyIsYW5pbWF0ZUVhc2luZzoic3dpbmciLGFzcGVjdFJhdGlvOiExLGF1dG9IaWRlOiExLGNsYXNzZXM6eyJ1aS1yZXNpemFibGUtc2UiOiJ1aS1pY29uIHVpLWljb24tZ3JpcHNtYWxsLWRpYWdvbmFsLXNlIn0sY29udGFpbm1lbnQ6ITEsZ2hvc3Q6ITEsZ3JpZDohMSxoYW5kbGVzOiJlLHMsc2UiLGhlbHBlcjohMSxtYXhIZWlnaHQ6bnVsbCxtYXhXaWR0aDpudWxsLG1pbkhlaWdodDoxMCxtaW5XaWR0aDoxMCx6SW5kZXg6OTAscmVzaXplOm51bGwsc3RhcnQ6bnVsbCxzdG9wOm51bGx9LF9udW06ZnVuY3Rpb24odCl7cmV0dXJuIHBhcnNlRmxvYXQodCl8fDB9LF9pc051bWJlcjpmdW5jdGlvbih0KXtyZXR1cm4haXNOYU4ocGFyc2VGbG9hdCh0KSl9LF9oYXNTY3JvbGw6ZnVuY3Rpb24oZSxpKXtpZigiaGlkZGVuIj09PXQoZSkuY3NzKCJvdmVyZmxvdyIpKXJldHVybiExO3ZhciBzPWkmJiJsZWZ0Ij09PWk/InNjcm9sbExlZnQiOiJzY3JvbGxUb3AiLG49ITE7cmV0dXJuIGVbc10+MD8hMDooZVtzXT0xLG49ZVtzXT4wLGVbc109MCxuKX0sX2NyZWF0ZTpmdW5jdGlvbigpe3ZhciBlLGk9dGhpcy5vcHRpb25zLHM9dGhpczt0aGlzLl9hZGRDbGFzcygidWktcmVzaXphYmxlIiksdC5leHRlbmQodGhpcyx7X2FzcGVjdFJhdGlvOiEhaS5hc3BlY3RSYXRpbyxhc3BlY3RSYXRpbzppLmFzcGVjdFJhdGlvLG9yaWdpbmFsRWxlbWVudDp0aGlzLmVsZW1lbnQsX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHM6W10sX2hlbHBlcjppLmhlbHBlcnx8aS5naG9zdHx8aS5hbmltYXRlP2kuaGVscGVyfHwidWktcmVzaXphYmxlLWhlbHBlciI6bnVsbH0pLHRoaXMuZWxlbWVudFswXS5ub2RlTmFtZS5tYXRjaCgvXihjYW52YXN8dGV4dGFyZWF8aW5wdXR8c2VsZWN0fGJ1dHRvbnxpbWcpJC9pKSYmKHRoaXMuZWxlbWVudC53cmFwKHQoIjxkaXYgY2xhc3M9J3VpLXdyYXBwZXInIHN0eWxlPSdvdmVyZmxvdzogaGlkZGVuOyc+PC9kaXY+IikuY3NzKHtwb3NpdGlvbjp0aGlzLmVsZW1lbnQuY3NzKCJwb3NpdGlvbiIpLHdpZHRoOnRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCksaGVpZ2h0OnRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLHRvcDp0aGlzLmVsZW1lbnQuY3NzKCJ0b3AiKSxsZWZ0OnRoaXMuZWxlbWVudC5jc3MoImxlZnQiKX0pKSx0aGlzLmVsZW1lbnQ9dGhpcy5lbGVtZW50LnBhcmVudCgpLmRhdGEoInVpLXJlc2l6YWJsZSIsdGhpcy5lbGVtZW50LnJlc2l6YWJsZSgiaW5zdGFuY2UiKSksdGhpcy5lbGVtZW50SXNXcmFwcGVyPSEwLGU9e21hcmdpblRvcDp0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoIm1hcmdpblRvcCIpLG1hcmdpblJpZ2h0OnRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygibWFyZ2luUmlnaHQiKSxtYXJnaW5Cb3R0b206dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCJtYXJnaW5Cb3R0b20iKSxtYXJnaW5MZWZ0OnRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygibWFyZ2luTGVmdCIpfSx0aGlzLmVsZW1lbnQuY3NzKGUpLHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygibWFyZ2luIiwwKSx0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGU9dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKCJyZXNpemUiKSx0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoInJlc2l6ZSIsIm5vbmUiKSx0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLnB1c2godGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKHtwb3NpdGlvbjoic3RhdGljIix6b29tOjEsZGlzcGxheToiYmxvY2sifSkpLHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyhlKSx0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpKSx0aGlzLl9zZXR1cEhhbmRsZXMoKSxpLmF1dG9IaWRlJiZ0KHRoaXMuZWxlbWVudCkub24oIm1vdXNlZW50ZXIiLGZ1bmN0aW9uKCl7aS5kaXNhYmxlZHx8KHMuX3JlbW92ZUNsYXNzKCJ1aS1yZXNpemFibGUtYXV0b2hpZGUiKSxzLl9oYW5kbGVzLnNob3coKSl9KS5vbigibW91c2VsZWF2ZSIsZnVuY3Rpb24oKXtpLmRpc2FibGVkfHxzLnJlc2l6aW5nfHwocy5fYWRkQ2xhc3MoInVpLXJlc2l6YWJsZS1hdXRvaGlkZSIpLHMuX2hhbmRsZXMuaGlkZSgpKX0pLHRoaXMuX21vdXNlSW5pdCgpfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX21vdXNlRGVzdHJveSgpO3ZhciBlLGk9ZnVuY3Rpb24oZSl7dChlKS5yZW1vdmVEYXRhKCJyZXNpemFibGUiKS5yZW1vdmVEYXRhKCJ1aS1yZXNpemFibGUiKS5vZmYoIi5yZXNpemFibGUiKS5maW5kKCIudWktcmVzaXphYmxlLWhhbmRsZSIpLnJlbW92ZSgpfTtyZXR1cm4gdGhpcy5lbGVtZW50SXNXcmFwcGVyJiYoaSh0aGlzLmVsZW1lbnQpLGU9dGhpcy5lbGVtZW50LHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyh7cG9zaXRpb246ZS5jc3MoInBvc2l0aW9uIiksd2lkdGg6ZS5vdXRlcldpZHRoKCksaGVpZ2h0OmUub3V0ZXJIZWlnaHQoKSx0b3A6ZS5jc3MoInRvcCIpLGxlZnQ6ZS5jc3MoImxlZnQiKX0pLmluc2VydEFmdGVyKGUpLGUucmVtb3ZlKCkpLHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcygicmVzaXplIix0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGUpLGkodGhpcy5vcmlnaW5hbEVsZW1lbnQpLHRoaXN9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXtzd2l0Y2godGhpcy5fc3VwZXIodCxlKSx0KXtjYXNlImhhbmRsZXMiOnRoaXMuX3JlbW92ZUhhbmRsZXMoKSx0aGlzLl9zZXR1cEhhbmRsZXMoKTticmVhaztkZWZhdWx0On19LF9zZXR1cEhhbmRsZXM6ZnVuY3Rpb24oKXt2YXIgZSxpLHMsbixvLGE9dGhpcy5vcHRpb25zLHI9dGhpcztpZih0aGlzLmhhbmRsZXM9YS5oYW5kbGVzfHwodCgiLnVpLXJlc2l6YWJsZS1oYW5kbGUiLHRoaXMuZWxlbWVudCkubGVuZ3RoP3tuOiIudWktcmVzaXphYmxlLW4iLGU6Ii51aS1yZXNpemFibGUtZSIsczoiLnVpLXJlc2l6YWJsZS1zIix3OiIudWktcmVzaXphYmxlLXciLHNlOiIudWktcmVzaXphYmxlLXNlIixzdzoiLnVpLXJlc2l6YWJsZS1zdyIsbmU6Ii51aS1yZXNpemFibGUtbmUiLG53OiIudWktcmVzaXphYmxlLW53In06ImUscyxzZSIpLHRoaXMuX2hhbmRsZXM9dCgpLHRoaXMuaGFuZGxlcy5jb25zdHJ1Y3Rvcj09PVN0cmluZylmb3IoImFsbCI9PT10aGlzLmhhbmRsZXMmJih0aGlzLmhhbmRsZXM9Im4sZSxzLHcsc2Usc3csbmUsbnciKSxzPXRoaXMuaGFuZGxlcy5zcGxpdCgiLCIpLHRoaXMuaGFuZGxlcz17fSxpPTA7cy5sZW5ndGg+aTtpKyspZT10LnRyaW0oc1tpXSksbj0idWktcmVzaXphYmxlLSIrZSxvPXQoIjxkaXY+IiksdGhpcy5fYWRkQ2xhc3MobywidWktcmVzaXphYmxlLWhhbmRsZSAiK24pLG8uY3NzKHt6SW5kZXg6YS56SW5kZXh9KSx0aGlzLmhhbmRsZXNbZV09Ii51aS1yZXNpemFibGUtIitlLHRoaXMuZWxlbWVudC5hcHBlbmQobyk7dGhpcy5fcmVuZGVyQXhpcz1mdW5jdGlvbihlKXt2YXIgaSxzLG4sbztlPWV8fHRoaXMuZWxlbWVudDtmb3IoaSBpbiB0aGlzLmhhbmRsZXMpdGhpcy5oYW5kbGVzW2ldLmNvbnN0cnVjdG9yPT09U3RyaW5nP3RoaXMuaGFuZGxlc1tpXT10aGlzLmVsZW1lbnQuY2hpbGRyZW4odGhpcy5oYW5kbGVzW2ldKS5maXJzdCgpLnNob3coKToodGhpcy5oYW5kbGVzW2ldLmpxdWVyeXx8dGhpcy5oYW5kbGVzW2ldLm5vZGVUeXBlKSYmKHRoaXMuaGFuZGxlc1tpXT10KHRoaXMuaGFuZGxlc1tpXSksdGhpcy5fb24odGhpcy5oYW5kbGVzW2ldLHttb3VzZWRvd246ci5fbW91c2VEb3dufSkpLHRoaXMuZWxlbWVudElzV3JhcHBlciYmdGhpcy5vcmlnaW5hbEVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL14odGV4dGFyZWF8aW5wdXR8c2VsZWN0fGJ1dHRvbikkL2kpJiYocz10KHRoaXMuaGFuZGxlc1tpXSx0aGlzLmVsZW1lbnQpLG89L3N3fG5lfG53fHNlfG58cy8udGVzdChpKT9zLm91dGVySGVpZ2h0KCk6cy5vdXRlcldpZHRoKCksbj1bInBhZGRpbmciLC9uZXxud3xuLy50ZXN0KGkpPyJUb3AiOi9zZXxzd3xzLy50ZXN0KGkpPyJCb3R0b20iOi9eZSQvLnRlc3QoaSk/IlJpZ2h0IjoiTGVmdCJdLmpvaW4oIiIpLGUuY3NzKG4sbyksdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKSksdGhpcy5faGFuZGxlcz10aGlzLl9oYW5kbGVzLmFkZCh0aGlzLmhhbmRsZXNbaV0pfSx0aGlzLl9yZW5kZXJBeGlzKHRoaXMuZWxlbWVudCksdGhpcy5faGFuZGxlcz10aGlzLl9oYW5kbGVzLmFkZCh0aGlzLmVsZW1lbnQuZmluZCgiLnVpLXJlc2l6YWJsZS1oYW5kbGUiKSksdGhpcy5faGFuZGxlcy5kaXNhYmxlU2VsZWN0aW9uKCksdGhpcy5faGFuZGxlcy5vbigibW91c2VvdmVyIixmdW5jdGlvbigpe3IucmVzaXppbmd8fCh0aGlzLmNsYXNzTmFtZSYmKG89dGhpcy5jbGFzc05hbWUubWF0Y2goL3VpLXJlc2l6YWJsZS0oc2V8c3d8bmV8bnd8bnxlfHN8dykvaSkpLHIuYXhpcz1vJiZvWzFdP29bMV06InNlIil9KSxhLmF1dG9IaWRlJiYodGhpcy5faGFuZGxlcy5oaWRlKCksdGhpcy5fYWRkQ2xhc3MoInVpLXJlc2l6YWJsZS1hdXRvaGlkZSIpKX0sX3JlbW92ZUhhbmRsZXM6ZnVuY3Rpb24oKXt0aGlzLl9oYW5kbGVzLnJlbW92ZSgpfSxfbW91c2VDYXB0dXJlOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbj0hMTtmb3IoaSBpbiB0aGlzLmhhbmRsZXMpcz10KHRoaXMuaGFuZGxlc1tpXSlbMF0sKHM9PT1lLnRhcmdldHx8dC5jb250YWlucyhzLGUudGFyZ2V0KSkmJihuPSEwKTtyZXR1cm4hdGhpcy5vcHRpb25zLmRpc2FibGVkJiZufSxfbW91c2VTdGFydDpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbz10aGlzLm9wdGlvbnMsYT10aGlzLmVsZW1lbnQ7cmV0dXJuIHRoaXMucmVzaXppbmc9ITAsdGhpcy5fcmVuZGVyUHJveHkoKSxpPXRoaXMuX251bSh0aGlzLmhlbHBlci5jc3MoImxlZnQiKSkscz10aGlzLl9udW0odGhpcy5oZWxwZXIuY3NzKCJ0b3AiKSksby5jb250YWlubWVudCYmKGkrPXQoby5jb250YWlubWVudCkuc2Nyb2xsTGVmdCgpfHwwLHMrPXQoby5jb250YWlubWVudCkuc2Nyb2xsVG9wKCl8fDApLHRoaXMub2Zmc2V0PXRoaXMuaGVscGVyLm9mZnNldCgpLHRoaXMucG9zaXRpb249e2xlZnQ6aSx0b3A6c30sdGhpcy5zaXplPXRoaXMuX2hlbHBlcj97d2lkdGg6dGhpcy5oZWxwZXIud2lkdGgoKSxoZWlnaHQ6dGhpcy5oZWxwZXIuaGVpZ2h0KCl9Ont3aWR0aDphLndpZHRoKCksaGVpZ2h0OmEuaGVpZ2h0KCl9LHRoaXMub3JpZ2luYWxTaXplPXRoaXMuX2hlbHBlcj97d2lkdGg6YS5vdXRlcldpZHRoKCksaGVpZ2h0OmEub3V0ZXJIZWlnaHQoKX06e3dpZHRoOmEud2lkdGgoKSxoZWlnaHQ6YS5oZWlnaHQoKX0sdGhpcy5zaXplRGlmZj17d2lkdGg6YS5vdXRlcldpZHRoKCktYS53aWR0aCgpLGhlaWdodDphLm91dGVySGVpZ2h0KCktYS5oZWlnaHQoKX0sdGhpcy5vcmlnaW5hbFBvc2l0aW9uPXtsZWZ0OmksdG9wOnN9LHRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uPXtsZWZ0OmUucGFnZVgsdG9wOmUucGFnZVl9LHRoaXMuYXNwZWN0UmF0aW89Im51bWJlciI9PXR5cGVvZiBvLmFzcGVjdFJhdGlvP28uYXNwZWN0UmF0aW86dGhpcy5vcmlnaW5hbFNpemUud2lkdGgvdGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0fHwxLG49dCgiLnVpLXJlc2l6YWJsZS0iK3RoaXMuYXhpcykuY3NzKCJjdXJzb3IiKSx0KCJib2R5IikuY3NzKCJjdXJzb3IiLCJhdXRvIj09PW4/dGhpcy5heGlzKyItcmVzaXplIjpuKSx0aGlzLl9hZGRDbGFzcygidWktcmVzaXphYmxlLXJlc2l6aW5nIiksdGhpcy5fcHJvcGFnYXRlKCJzdGFydCIsZSksITB9LF9tb3VzZURyYWc6ZnVuY3Rpb24oZSl7dmFyIGkscyxuPXRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uLG89dGhpcy5heGlzLGE9ZS5wYWdlWC1uLmxlZnR8fDAscj1lLnBhZ2VZLW4udG9wfHwwLGg9dGhpcy5fY2hhbmdlW29dO3JldHVybiB0aGlzLl91cGRhdGVQcmV2UHJvcGVydGllcygpLGg/KGk9aC5hcHBseSh0aGlzLFtlLGEscl0pLHRoaXMuX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzKGUuc2hpZnRLZXkpLCh0aGlzLl9hc3BlY3RSYXRpb3x8ZS5zaGlmdEtleSkmJihpPXRoaXMuX3VwZGF0ZVJhdGlvKGksZSkpLGk9dGhpcy5fcmVzcGVjdFNpemUoaSxlKSx0aGlzLl91cGRhdGVDYWNoZShpKSx0aGlzLl9wcm9wYWdhdGUoInJlc2l6ZSIsZSkscz10aGlzLl9hcHBseUNoYW5nZXMoKSwhdGhpcy5faGVscGVyJiZ0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZUVsZW1lbnRzLmxlbmd0aCYmdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKSx0LmlzRW1wdHlPYmplY3Qocyl8fCh0aGlzLl91cGRhdGVQcmV2UHJvcGVydGllcygpLHRoaXMuX3RyaWdnZXIoInJlc2l6ZSIsZSx0aGlzLnVpKCkpLHRoaXMuX2FwcGx5Q2hhbmdlcygpKSwhMSk6ITF9LF9tb3VzZVN0b3A6ZnVuY3Rpb24oZSl7dGhpcy5yZXNpemluZz0hMTt2YXIgaSxzLG4sbyxhLHIsaCxsPXRoaXMub3B0aW9ucyxjPXRoaXM7cmV0dXJuIHRoaXMuX2hlbHBlciYmKGk9dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cyxzPWkubGVuZ3RoJiYvdGV4dGFyZWEvaS50ZXN0KGlbMF0ubm9kZU5hbWUpLG49cyYmdGhpcy5faGFzU2Nyb2xsKGlbMF0sImxlZnQiKT8wOmMuc2l6ZURpZmYuaGVpZ2h0LG89cz8wOmMuc2l6ZURpZmYud2lkdGgsYT17d2lkdGg6Yy5oZWxwZXIud2lkdGgoKS1vLGhlaWdodDpjLmhlbHBlci5oZWlnaHQoKS1ufSxyPXBhcnNlRmxvYXQoYy5lbGVtZW50LmNzcygibGVmdCIpKSsoYy5wb3NpdGlvbi5sZWZ0LWMub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KXx8bnVsbCxoPXBhcnNlRmxvYXQoYy5lbGVtZW50LmNzcygidG9wIikpKyhjLnBvc2l0aW9uLnRvcC1jLm9yaWdpbmFsUG9zaXRpb24udG9wKXx8bnVsbCxsLmFuaW1hdGV8fHRoaXMuZWxlbWVudC5jc3ModC5leHRlbmQoYSx7dG9wOmgsbGVmdDpyfSkpLGMuaGVscGVyLmhlaWdodChjLnNpemUuaGVpZ2h0KSxjLmhlbHBlci53aWR0aChjLnNpemUud2lkdGgpLHRoaXMuX2hlbHBlciYmIWwuYW5pbWF0ZSYmdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKSksdCgiYm9keSIpLmNzcygiY3Vyc29yIiwiYXV0byIpLHRoaXMuX3JlbW92ZUNsYXNzKCJ1aS1yZXNpemFibGUtcmVzaXppbmciKSx0aGlzLl9wcm9wYWdhdGUoInN0b3AiLGUpLHRoaXMuX2hlbHBlciYmdGhpcy5oZWxwZXIucmVtb3ZlKCksITF9LF91cGRhdGVQcmV2UHJvcGVydGllczpmdW5jdGlvbigpe3RoaXMucHJldlBvc2l0aW9uPXt0b3A6dGhpcy5wb3NpdGlvbi50b3AsbGVmdDp0aGlzLnBvc2l0aW9uLmxlZnR9LHRoaXMucHJldlNpemU9e3dpZHRoOnRoaXMuc2l6ZS53aWR0aCxoZWlnaHQ6dGhpcy5zaXplLmhlaWdodH19LF9hcHBseUNoYW5nZXM6ZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gdGhpcy5wb3NpdGlvbi50b3AhPT10aGlzLnByZXZQb3NpdGlvbi50b3AmJih0LnRvcD10aGlzLnBvc2l0aW9uLnRvcCsicHgiKSx0aGlzLnBvc2l0aW9uLmxlZnQhPT10aGlzLnByZXZQb3NpdGlvbi5sZWZ0JiYodC5sZWZ0PXRoaXMucG9zaXRpb24ubGVmdCsicHgiKSx0aGlzLnNpemUud2lkdGghPT10aGlzLnByZXZTaXplLndpZHRoJiYodC53aWR0aD10aGlzLnNpemUud2lkdGgrInB4IiksdGhpcy5zaXplLmhlaWdodCE9PXRoaXMucHJldlNpemUuaGVpZ2h0JiYodC5oZWlnaHQ9dGhpcy5zaXplLmhlaWdodCsicHgiKSx0aGlzLmhlbHBlci5jc3ModCksdH0sX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzOmZ1bmN0aW9uKHQpe3ZhciBlLGkscyxuLG8sYT10aGlzLm9wdGlvbnM7bz17bWluV2lkdGg6dGhpcy5faXNOdW1iZXIoYS5taW5XaWR0aCk/YS5taW5XaWR0aDowLG1heFdpZHRoOnRoaXMuX2lzTnVtYmVyKGEubWF4V2lkdGgpP2EubWF4V2lkdGg6MS8wLG1pbkhlaWdodDp0aGlzLl9pc051bWJlcihhLm1pbkhlaWdodCk/YS5taW5IZWlnaHQ6MCxtYXhIZWlnaHQ6dGhpcy5faXNOdW1iZXIoYS5tYXhIZWlnaHQpP2EubWF4SGVpZ2h0OjEvMH0sKHRoaXMuX2FzcGVjdFJhdGlvfHx0KSYmKGU9by5taW5IZWlnaHQqdGhpcy5hc3BlY3RSYXRpbyxzPW8ubWluV2lkdGgvdGhpcy5hc3BlY3RSYXRpbyxpPW8ubWF4SGVpZ2h0KnRoaXMuYXNwZWN0UmF0aW8sbj1vLm1heFdpZHRoL3RoaXMuYXNwZWN0UmF0aW8sZT5vLm1pbldpZHRoJiYoby5taW5XaWR0aD1lKSxzPm8ubWluSGVpZ2h0JiYoby5taW5IZWlnaHQ9cyksby5tYXhXaWR0aD5pJiYoby5tYXhXaWR0aD1pKSxvLm1heEhlaWdodD5uJiYoby5tYXhIZWlnaHQ9bikpLHRoaXMuX3ZCb3VuZGFyaWVzPW99LF91cGRhdGVDYWNoZTpmdW5jdGlvbih0KXt0aGlzLm9mZnNldD10aGlzLmhlbHBlci5vZmZzZXQoKSx0aGlzLl9pc051bWJlcih0LmxlZnQpJiYodGhpcy5wb3NpdGlvbi5sZWZ0PXQubGVmdCksdGhpcy5faXNOdW1iZXIodC50b3ApJiYodGhpcy5wb3NpdGlvbi50b3A9dC50b3ApLHRoaXMuX2lzTnVtYmVyKHQuaGVpZ2h0KSYmKHRoaXMuc2l6ZS5oZWlnaHQ9dC5oZWlnaHQpLHRoaXMuX2lzTnVtYmVyKHQud2lkdGgpJiYodGhpcy5zaXplLndpZHRoPXQud2lkdGgpfSxfdXBkYXRlUmF0aW86ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wb3NpdGlvbixpPXRoaXMuc2l6ZSxzPXRoaXMuYXhpcztyZXR1cm4gdGhpcy5faXNOdW1iZXIodC5oZWlnaHQpP3Qud2lkdGg9dC5oZWlnaHQqdGhpcy5hc3BlY3RSYXRpbzp0aGlzLl9pc051bWJlcih0LndpZHRoKSYmKHQuaGVpZ2h0PXQud2lkdGgvdGhpcy5hc3BlY3RSYXRpbyksInN3Ij09PXMmJih0LmxlZnQ9ZS5sZWZ0KyhpLndpZHRoLXQud2lkdGgpLHQudG9wPW51bGwpLCJudyI9PT1zJiYodC50b3A9ZS50b3ArKGkuaGVpZ2h0LXQuaGVpZ2h0KSx0LmxlZnQ9ZS5sZWZ0KyhpLndpZHRoLXQud2lkdGgpKSx0fSxfcmVzcGVjdFNpemU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fdkJvdW5kYXJpZXMsaT10aGlzLmF4aXMscz10aGlzLl9pc051bWJlcih0LndpZHRoKSYmZS5tYXhXaWR0aCYmZS5tYXhXaWR0aDx0LndpZHRoLG49dGhpcy5faXNOdW1iZXIodC5oZWlnaHQpJiZlLm1heEhlaWdodCYmZS5tYXhIZWlnaHQ8dC5oZWlnaHQsbz10aGlzLl9pc051bWJlcih0LndpZHRoKSYmZS5taW5XaWR0aCYmZS5taW5XaWR0aD50LndpZHRoLGE9dGhpcy5faXNOdW1iZXIodC5oZWlnaHQpJiZlLm1pbkhlaWdodCYmZS5taW5IZWlnaHQ+dC5oZWlnaHQscj10aGlzLm9yaWdpbmFsUG9zaXRpb24ubGVmdCt0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCxoPXRoaXMub3JpZ2luYWxQb3NpdGlvbi50b3ArdGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0LGw9L3N3fG53fHcvLnRlc3QoaSksYz0vbnd8bmV8bi8udGVzdChpKTtyZXR1cm4gbyYmKHQud2lkdGg9ZS5taW5XaWR0aCksYSYmKHQuaGVpZ2h0PWUubWluSGVpZ2h0KSxzJiYodC53aWR0aD1lLm1heFdpZHRoKSxuJiYodC5oZWlnaHQ9ZS5tYXhIZWlnaHQpLG8mJmwmJih0LmxlZnQ9ci1lLm1pbldpZHRoKSxzJiZsJiYodC5sZWZ0PXItZS5tYXhXaWR0aCksYSYmYyYmKHQudG9wPWgtZS5taW5IZWlnaHQpLG4mJmMmJih0LnRvcD1oLWUubWF4SGVpZ2h0KSx0LndpZHRofHx0LmhlaWdodHx8dC5sZWZ0fHwhdC50b3A/dC53aWR0aHx8dC5oZWlnaHR8fHQudG9wfHwhdC5sZWZ0fHwodC5sZWZ0PW51bGwpOnQudG9wPW51bGwsdH0sX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9uczpmdW5jdGlvbih0KXtmb3IodmFyIGU9MCxpPVtdLHM9W3QuY3NzKCJib3JkZXJUb3BXaWR0aCIpLHQuY3NzKCJib3JkZXJSaWdodFdpZHRoIiksdC5jc3MoImJvcmRlckJvdHRvbVdpZHRoIiksdC5jc3MoImJvcmRlckxlZnRXaWR0aCIpXSxuPVt0LmNzcygicGFkZGluZ1RvcCIpLHQuY3NzKCJwYWRkaW5nUmlnaHQiKSx0LmNzcygicGFkZGluZ0JvdHRvbSIpLHQuY3NzKCJwYWRkaW5nTGVmdCIpXTs0PmU7ZSsrKWlbZV09cGFyc2VGbG9hdChzW2VdKXx8MCxpW2VdKz1wYXJzZUZsb2F0KG5bZV0pfHwwO3JldHVybntoZWlnaHQ6aVswXStpWzJdLHdpZHRoOmlbMV0raVszXX19LF9wcm9wb3J0aW9uYWxseVJlc2l6ZTpmdW5jdGlvbigpe2lmKHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoKWZvcih2YXIgdCxlPTAsaT10aGlzLmhlbHBlcnx8dGhpcy5lbGVtZW50O3RoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoPmU7ZSsrKXQ9dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50c1tlXSx0aGlzLm91dGVyRGltZW5zaW9uc3x8KHRoaXMub3V0ZXJEaW1lbnNpb25zPXRoaXMuX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyh0KSksdC5jc3Moe2hlaWdodDppLmhlaWdodCgpLXRoaXMub3V0ZXJEaW1lbnNpb25zLmhlaWdodHx8MCx3aWR0aDppLndpZHRoKCktdGhpcy5vdXRlckRpbWVuc2lvbnMud2lkdGh8fDB9KX0sX3JlbmRlclByb3h5OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbGVtZW50LGk9dGhpcy5vcHRpb25zO3RoaXMuZWxlbWVudE9mZnNldD1lLm9mZnNldCgpLHRoaXMuX2hlbHBlcj8odGhpcy5oZWxwZXI9dGhpcy5oZWxwZXJ8fHQoIjxkaXYgc3R5bGU9J292ZXJmbG93OmhpZGRlbjsnPjwvZGl2PiIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaGVscGVyLHRoaXMuX2hlbHBlciksdGhpcy5oZWxwZXIuY3NzKHt3aWR0aDp0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpLGhlaWdodDp0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKSxwb3NpdGlvbjoiYWJzb2x1dGUiLGxlZnQ6dGhpcy5lbGVtZW50T2Zmc2V0LmxlZnQrInB4Iix0b3A6dGhpcy5lbGVtZW50T2Zmc2V0LnRvcCsicHgiLHpJbmRleDorK2kuekluZGV4fSksdGhpcy5oZWxwZXIuYXBwZW5kVG8oImJvZHkiKS5kaXNhYmxlU2VsZWN0aW9uKCkpOnRoaXMuaGVscGVyPXRoaXMuZWxlbWVudH0sX2NoYW5nZTp7ZTpmdW5jdGlvbih0LGUpe3JldHVybnt3aWR0aDp0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aCtlfX0sdzpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMub3JpZ2luYWxTaXplLHM9dGhpcy5vcmlnaW5hbFBvc2l0aW9uO3JldHVybntsZWZ0OnMubGVmdCtlLHdpZHRoOmkud2lkdGgtZX19LG46ZnVuY3Rpb24odCxlLGkpe3ZhciBzPXRoaXMub3JpZ2luYWxTaXplLG49dGhpcy5vcmlnaW5hbFBvc2l0aW9uO3JldHVybnt0b3A6bi50b3AraSxoZWlnaHQ6cy5oZWlnaHQtaX19LHM6ZnVuY3Rpb24odCxlLGkpe3JldHVybntoZWlnaHQ6dGhpcy5vcmlnaW5hbFNpemUuaGVpZ2h0K2l9fSxzZTpmdW5jdGlvbihlLGkscyl7cmV0dXJuIHQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5zLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9jaGFuZ2UuZS5hcHBseSh0aGlzLFtlLGksc10pKX0sc3c6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiB0LmV4dGVuZCh0aGlzLl9jaGFuZ2Uucy5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5fY2hhbmdlLncuYXBwbHkodGhpcyxbZSxpLHNdKSl9LG5lOmZ1bmN0aW9uKGUsaSxzKXtyZXR1cm4gdC5leHRlbmQodGhpcy5fY2hhbmdlLm4uYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2NoYW5nZS5lLmFwcGx5KHRoaXMsW2UsaSxzXSkpfSxudzpmdW5jdGlvbihlLGkscyl7cmV0dXJuIHQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9jaGFuZ2Uudy5hcHBseSh0aGlzLFtlLGksc10pKX19LF9wcm9wYWdhdGU6ZnVuY3Rpb24oZSxpKXt0LnVpLnBsdWdpbi5jYWxsKHRoaXMsZSxbaSx0aGlzLnVpKCldKSwicmVzaXplIiE9PWUmJnRoaXMuX3RyaWdnZXIoZSxpLHRoaXMudWkoKSl9LHBsdWdpbnM6e30sdWk6ZnVuY3Rpb24oKXtyZXR1cm57b3JpZ2luYWxFbGVtZW50OnRoaXMub3JpZ2luYWxFbGVtZW50LGVsZW1lbnQ6dGhpcy5lbGVtZW50LGhlbHBlcjp0aGlzLmhlbHBlcixwb3NpdGlvbjp0aGlzLnBvc2l0aW9uLHNpemU6dGhpcy5zaXplLG9yaWdpbmFsU2l6ZTp0aGlzLm9yaWdpbmFsU2l6ZSxvcmlnaW5hbFBvc2l0aW9uOnRoaXMub3JpZ2luYWxQb3NpdGlvbn19fSksdC51aS5wbHVnaW4uYWRkKCJyZXNpemFibGUiLCJhbmltYXRlIix7c3RvcDpmdW5jdGlvbihlKXt2YXIgaT10KHRoaXMpLnJlc2l6YWJsZSgiaW5zdGFuY2UiKSxzPWkub3B0aW9ucyxuPWkuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMsbz1uLmxlbmd0aCYmL3RleHRhcmVhL2kudGVzdChuWzBdLm5vZGVOYW1lKSxhPW8mJmkuX2hhc1Njcm9sbChuWzBdLCJsZWZ0Iik/MDppLnNpemVEaWZmLmhlaWdodCxyPW8/MDppLnNpemVEaWZmLndpZHRoLGg9e3dpZHRoOmkuc2l6ZS53aWR0aC1yLGhlaWdodDppLnNpemUuaGVpZ2h0LWF9LGw9cGFyc2VGbG9hdChpLmVsZW1lbnQuY3NzKCJsZWZ0IikpKyhpLnBvc2l0aW9uLmxlZnQtaS5vcmlnaW5hbFBvc2l0aW9uLmxlZnQpfHxudWxsLGM9cGFyc2VGbG9hdChpLmVsZW1lbnQuY3NzKCJ0b3AiKSkrKGkucG9zaXRpb24udG9wLWkub3JpZ2luYWxQb3NpdGlvbi50b3ApfHxudWxsO2kuZWxlbWVudC5hbmltYXRlKHQuZXh0ZW5kKGgsYyYmbD97dG9wOmMsbGVmdDpsfTp7fSkse2R1cmF0aW9uOnMuYW5pbWF0ZUR1cmF0aW9uLGVhc2luZzpzLmFuaW1hdGVFYXNpbmcsc3RlcDpmdW5jdGlvbigpe3ZhciBzPXt3aWR0aDpwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoIndpZHRoIikpLGhlaWdodDpwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoImhlaWdodCIpKSx0b3A6cGFyc2VGbG9hdChpLmVsZW1lbnQuY3NzKCJ0b3AiKSksbGVmdDpwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoImxlZnQiKSl9O24mJm4ubGVuZ3RoJiZ0KG5bMF0pLmNzcyh7d2lkdGg6cy53aWR0aCxoZWlnaHQ6cy5oZWlnaHR9KSxpLl91cGRhdGVDYWNoZShzKSxpLl9wcm9wYWdhdGUoInJlc2l6ZSIsZSl9fSl9fSksdC51aS5wbHVnaW4uYWRkKCJyZXNpemFibGUiLCJjb250YWlubWVudCIse3N0YXJ0OmZ1bmN0aW9uKCl7dmFyIGUsaSxzLG4sbyxhLHIsaD10KHRoaXMpLnJlc2l6YWJsZSgiaW5zdGFuY2UiKSxsPWgub3B0aW9ucyxjPWguZWxlbWVudCx1PWwuY29udGFpbm1lbnQsZD11IGluc3RhbmNlb2YgdD91LmdldCgwKTovcGFyZW50Ly50ZXN0KHUpP2MucGFyZW50KCkuZ2V0KDApOnU7ZCYmKGguY29udGFpbmVyRWxlbWVudD10KGQpLC9kb2N1bWVudC8udGVzdCh1KXx8dT09PWRvY3VtZW50PyhoLmNvbnRhaW5lck9mZnNldD17bGVmdDowLHRvcDowfSxoLmNvbnRhaW5lclBvc2l0aW9uPXtsZWZ0OjAsdG9wOjB9LGgucGFyZW50RGF0YT17ZWxlbWVudDp0KGRvY3VtZW50KSxsZWZ0OjAsdG9wOjAsd2lkdGg6dChkb2N1bWVudCkud2lkdGgoKSxoZWlnaHQ6dChkb2N1bWVudCkuaGVpZ2h0KCl8fGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHR9KTooZT10KGQpLGk9W10sdChbIlRvcCIsIlJpZ2h0IiwiTGVmdCIsIkJvdHRvbSJdKS5lYWNoKGZ1bmN0aW9uKHQscyl7aVt0XT1oLl9udW0oZS5jc3MoInBhZGRpbmciK3MpKX0pLGguY29udGFpbmVyT2Zmc2V0PWUub2Zmc2V0KCksaC5jb250YWluZXJQb3NpdGlvbj1lLnBvc2l0aW9uKCksaC5jb250YWluZXJTaXplPXtoZWlnaHQ6ZS5pbm5lckhlaWdodCgpLWlbM10sd2lkdGg6ZS5pbm5lcldpZHRoKCktaVsxXX0scz1oLmNvbnRhaW5lck9mZnNldCxuPWguY29udGFpbmVyU2l6ZS5oZWlnaHQsbz1oLmNvbnRhaW5lclNpemUud2lkdGgsYT1oLl9oYXNTY3JvbGwoZCwibGVmdCIpP2Quc2Nyb2xsV2lkdGg6byxyPWguX2hhc1Njcm9sbChkKT9kLnNjcm9sbEhlaWdodDpuLGgucGFyZW50RGF0YT17ZWxlbWVudDpkLGxlZnQ6cy5sZWZ0LHRvcDpzLnRvcCx3aWR0aDphLGhlaWdodDpyfSkpfSxyZXNpemU6ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG8sYT10KHRoaXMpLnJlc2l6YWJsZSgiaW5zdGFuY2UiKSxyPWEub3B0aW9ucyxoPWEuY29udGFpbmVyT2Zmc2V0LGw9YS5wb3NpdGlvbixjPWEuX2FzcGVjdFJhdGlvfHxlLnNoaWZ0S2V5LHU9e3RvcDowLGxlZnQ6MH0sZD1hLmNvbnRhaW5lckVsZW1lbnQscD0hMDtkWzBdIT09ZG9jdW1lbnQmJi9zdGF0aWMvLnRlc3QoZC5jc3MoInBvc2l0aW9uIikpJiYodT1oKSxsLmxlZnQ8KGEuX2hlbHBlcj9oLmxlZnQ6MCkmJihhLnNpemUud2lkdGg9YS5zaXplLndpZHRoKyhhLl9oZWxwZXI/YS5wb3NpdGlvbi5sZWZ0LWgubGVmdDphLnBvc2l0aW9uLmxlZnQtdS5sZWZ0KSxjJiYoYS5zaXplLmhlaWdodD1hLnNpemUud2lkdGgvYS5hc3BlY3RSYXRpbyxwPSExKSxhLnBvc2l0aW9uLmxlZnQ9ci5oZWxwZXI/aC5sZWZ0OjApLGwudG9wPChhLl9oZWxwZXI/aC50b3A6MCkmJihhLnNpemUuaGVpZ2h0PWEuc2l6ZS5oZWlnaHQrKGEuX2hlbHBlcj9hLnBvc2l0aW9uLnRvcC1oLnRvcDphLnBvc2l0aW9uLnRvcCksYyYmKGEuc2l6ZS53aWR0aD1hLnNpemUuaGVpZ2h0KmEuYXNwZWN0UmF0aW8scD0hMSksYS5wb3NpdGlvbi50b3A9YS5faGVscGVyP2gudG9wOjApLG49YS5jb250YWluZXJFbGVtZW50LmdldCgwKT09PWEuZWxlbWVudC5wYXJlbnQoKS5nZXQoMCksbz0vcmVsYXRpdmV8YWJzb2x1dGUvLnRlc3QoYS5jb250YWluZXJFbGVtZW50LmNzcygicG9zaXRpb24iKSksbiYmbz8oYS5vZmZzZXQubGVmdD1hLnBhcmVudERhdGEubGVmdCthLnBvc2l0aW9uLmxlZnQsYS5vZmZzZXQudG9wPWEucGFyZW50RGF0YS50b3ArYS5wb3NpdGlvbi50b3ApOihhLm9mZnNldC5sZWZ0PWEuZWxlbWVudC5vZmZzZXQoKS5sZWZ0LGEub2Zmc2V0LnRvcD1hLmVsZW1lbnQub2Zmc2V0KCkudG9wKSxpPU1hdGguYWJzKGEuc2l6ZURpZmYud2lkdGgrKGEuX2hlbHBlcj9hLm9mZnNldC5sZWZ0LXUubGVmdDphLm9mZnNldC5sZWZ0LWgubGVmdCkpLHM9TWF0aC5hYnMoYS5zaXplRGlmZi5oZWlnaHQrKGEuX2hlbHBlcj9hLm9mZnNldC50b3AtdS50b3A6YS5vZmZzZXQudG9wLWgudG9wKSksaSthLnNpemUud2lkdGg+PWEucGFyZW50RGF0YS53aWR0aCYmKGEuc2l6ZS53aWR0aD1hLnBhcmVudERhdGEud2lkdGgtaSxjJiYoYS5zaXplLmhlaWdodD1hLnNpemUud2lkdGgvYS5hc3BlY3RSYXRpbyxwPSExKSkscythLnNpemUuaGVpZ2h0Pj1hLnBhcmVudERhdGEuaGVpZ2h0JiYoYS5zaXplLmhlaWdodD1hLnBhcmVudERhdGEuaGVpZ2h0LXMsYyYmKGEuc2l6ZS53aWR0aD1hLnNpemUuaGVpZ2h0KmEuYXNwZWN0UmF0aW8scD0hMSkpLHB8fChhLnBvc2l0aW9uLmxlZnQ9YS5wcmV2UG9zaXRpb24ubGVmdCxhLnBvc2l0aW9uLnRvcD1hLnByZXZQb3NpdGlvbi50b3AsYS5zaXplLndpZHRoPWEucHJldlNpemUud2lkdGgsYS5zaXplLmhlaWdodD1hLnByZXZTaXplLmhlaWdodCl9LHN0b3A6ZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpLnJlc2l6YWJsZSgiaW5zdGFuY2UiKSxpPWUub3B0aW9ucyxzPWUuY29udGFpbmVyT2Zmc2V0LG49ZS5jb250YWluZXJQb3NpdGlvbixvPWUuY29udGFpbmVyRWxlbWVudCxhPXQoZS5oZWxwZXIpLHI9YS5vZmZzZXQoKSxoPWEub3V0ZXJXaWR0aCgpLWUuc2l6ZURpZmYud2lkdGgsbD1hLm91dGVySGVpZ2h0KCktZS5zaXplRGlmZi5oZWlnaHQ7ZS5faGVscGVyJiYhaS5hbmltYXRlJiYvcmVsYXRpdmUvLnRlc3Qoby5jc3MoInBvc2l0aW9uIikpJiZ0KHRoaXMpLmNzcyh7bGVmdDpyLmxlZnQtbi5sZWZ0LXMubGVmdCx3aWR0aDpoLGhlaWdodDpsfSksZS5faGVscGVyJiYhaS5hbmltYXRlJiYvc3RhdGljLy50ZXN0KG8uY3NzKCJwb3NpdGlvbiIpKSYmdCh0aGlzKS5jc3Moe2xlZnQ6ci5sZWZ0LW4ubGVmdC1zLmxlZnQsd2lkdGg6aCxoZWlnaHQ6bH0pfX0pLHQudWkucGx1Z2luLmFkZCgicmVzaXphYmxlIiwiYWxzb1Jlc2l6ZSIse3N0YXJ0OmZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKS5yZXNpemFibGUoImluc3RhbmNlIiksaT1lLm9wdGlvbnM7dChpLmFsc29SZXNpemUpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO2UuZGF0YSgidWktcmVzaXphYmxlLWFsc29yZXNpemUiLHt3aWR0aDpwYXJzZUZsb2F0KGUud2lkdGgoKSksaGVpZ2h0OnBhcnNlRmxvYXQoZS5oZWlnaHQoKSksbGVmdDpwYXJzZUZsb2F0KGUuY3NzKCJsZWZ0IikpLHRvcDpwYXJzZUZsb2F0KGUuY3NzKCJ0b3AiKSl9KX0pfSxyZXNpemU6ZnVuY3Rpb24oZSxpKXt2YXIgcz10KHRoaXMpLnJlc2l6YWJsZSgiaW5zdGFuY2UiKSxuPXMub3B0aW9ucyxvPXMub3JpZ2luYWxTaXplLGE9cy5vcmlnaW5hbFBvc2l0aW9uLHI9e2hlaWdodDpzLnNpemUuaGVpZ2h0LW8uaGVpZ2h0fHwwLHdpZHRoOnMuc2l6ZS53aWR0aC1vLndpZHRofHwwLHRvcDpzLnBvc2l0aW9uLnRvcC1hLnRvcHx8MCxsZWZ0OnMucG9zaXRpb24ubGVmdC1hLmxlZnR8fDB9O3Qobi5hbHNvUmVzaXplKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxzPXQodGhpcykuZGF0YSgidWktcmVzaXphYmxlLWFsc29yZXNpemUiKSxuPXt9LG89ZS5wYXJlbnRzKGkub3JpZ2luYWxFbGVtZW50WzBdKS5sZW5ndGg/WyJ3aWR0aCIsImhlaWdodCJdOlsid2lkdGgiLCJoZWlnaHQiLCJ0b3AiLCJsZWZ0Il07dC5lYWNoKG8sZnVuY3Rpb24odCxlKXt2YXIgaT0oc1tlXXx8MCkrKHJbZV18fDApO2kmJmk+PTAmJihuW2VdPWl8fG51bGwpfSksZS5jc3Mobil9KX0sc3RvcDpmdW5jdGlvbigpe3QodGhpcykucmVtb3ZlRGF0YSgidWktcmVzaXphYmxlLWFsc29yZXNpemUiKX19KSx0LnVpLnBsdWdpbi5hZGQoInJlc2l6YWJsZSIsImdob3N0Iix7c3RhcnQ6ZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpLnJlc2l6YWJsZSgiaW5zdGFuY2UiKSxpPWUuc2l6ZTtlLmdob3N0PWUub3JpZ2luYWxFbGVtZW50LmNsb25lKCksZS5naG9zdC5jc3Moe29wYWNpdHk6LjI1LGRpc3BsYXk6ImJsb2NrIixwb3NpdGlvbjoicmVsYXRpdmUiLGhlaWdodDppLmhlaWdodCx3aWR0aDppLndpZHRoLG1hcmdpbjowLGxlZnQ6MCx0b3A6MH0pLGUuX2FkZENsYXNzKGUuZ2hvc3QsInVpLXJlc2l6YWJsZS1naG9zdCIpLHQudWlCYWNrQ29tcGF0IT09ITEmJiJzdHJpbmciPT10eXBlb2YgZS5vcHRpb25zLmdob3N0JiZlLmdob3N0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5naG9zdCksZS5naG9zdC5hcHBlbmRUbyhlLmhlbHBlcil9LHJlc2l6ZTpmdW5jdGlvbigpe3ZhciBlPXQodGhpcykucmVzaXphYmxlKCJpbnN0YW5jZSIpO2UuZ2hvc3QmJmUuZ2hvc3QuY3NzKHtwb3NpdGlvbjoicmVsYXRpdmUiLGhlaWdodDplLnNpemUuaGVpZ2h0LHdpZHRoOmUuc2l6ZS53aWR0aH0pfSxzdG9wOmZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKS5yZXNpemFibGUoImluc3RhbmNlIik7ZS5naG9zdCYmZS5oZWxwZXImJmUuaGVscGVyLmdldCgwKS5yZW1vdmVDaGlsZChlLmdob3N0LmdldCgwKSl9fSksdC51aS5wbHVnaW4uYWRkKCJyZXNpemFibGUiLCJncmlkIix7cmVzaXplOmZ1bmN0aW9uKCl7dmFyIGUsaT10KHRoaXMpLnJlc2l6YWJsZSgiaW5zdGFuY2UiKSxzPWkub3B0aW9ucyxuPWkuc2l6ZSxvPWkub3JpZ2luYWxTaXplLGE9aS5vcmlnaW5hbFBvc2l0aW9uLHI9aS5heGlzLGg9Im51bWJlciI9PXR5cGVvZiBzLmdyaWQ/W3MuZ3JpZCxzLmdyaWRdOnMuZ3JpZCxsPWhbMF18fDEsYz1oWzFdfHwxLHU9TWF0aC5yb3VuZCgobi53aWR0aC1vLndpZHRoKS9sKSpsLGQ9TWF0aC5yb3VuZCgobi5oZWlnaHQtby5oZWlnaHQpL2MpKmMscD1vLndpZHRoK3UsZj1vLmhlaWdodCtkLGc9cy5tYXhXaWR0aCYmcD5zLm1heFdpZHRoLG09cy5tYXhIZWlnaHQmJmY+cy5tYXhIZWlnaHQsXz1zLm1pbldpZHRoJiZzLm1pbldpZHRoPnAsdj1zLm1pbkhlaWdodCYmcy5taW5IZWlnaHQ+ZjtzLmdyaWQ9aCxfJiYocCs9bCksdiYmKGYrPWMpLGcmJihwLT1sKSxtJiYoZi09YyksL14oc2V8c3xlKSQvLnRlc3Qocik/KGkuc2l6ZS53aWR0aD1wLGkuc2l6ZS5oZWlnaHQ9Zik6L14obmUpJC8udGVzdChyKT8oaS5zaXplLndpZHRoPXAsaS5zaXplLmhlaWdodD1mLGkucG9zaXRpb24udG9wPWEudG9wLWQpOi9eKHN3KSQvLnRlc3Qocik/KGkuc2l6ZS53aWR0aD1wLGkuc2l6ZS5oZWlnaHQ9ZixpLnBvc2l0aW9uLmxlZnQ9YS5sZWZ0LXUpOigoMD49Zi1jfHwwPj1wLWwpJiYoZT1pLl9nZXRQYWRkaW5nUGx1c0JvcmRlckRpbWVuc2lvbnModGhpcykpLGYtYz4wPyhpLnNpemUuaGVpZ2h0PWYsaS5wb3NpdGlvbi50b3A9YS50b3AtZCk6KGY9Yy1lLmhlaWdodCxpLnNpemUuaGVpZ2h0PWYsaS5wb3NpdGlvbi50b3A9YS50b3Arby5oZWlnaHQtZikscC1sPjA/KGkuc2l6ZS53aWR0aD1wLGkucG9zaXRpb24ubGVmdD1hLmxlZnQtdSk6KHA9bC1lLndpZHRoLGkuc2l6ZS53aWR0aD1wLGkucG9zaXRpb24ubGVmdD1hLmxlZnQrby53aWR0aC1wKSl9fSksdC51aS5yZXNpemFibGUsdC53aWRnZXQoInVpLmRpYWxvZyIse3ZlcnNpb246IjEuMTIuMSIsb3B0aW9uczp7YXBwZW5kVG86ImJvZHkiLGF1dG9PcGVuOiEwLGJ1dHRvbnM6W10sY2xhc3Nlczp7InVpLWRpYWxvZyI6InVpLWNvcm5lci1hbGwiLCJ1aS1kaWFsb2ctdGl0bGViYXIiOiJ1aS1jb3JuZXItYWxsIn0sY2xvc2VPbkVzY2FwZTohMCxjbG9zZVRleHQ6IkNsb3NlIixkcmFnZ2FibGU6ITAsaGlkZTpudWxsLGhlaWdodDoiYXV0byIsbWF4SGVpZ2h0Om51bGwsbWF4V2lkdGg6bnVsbCxtaW5IZWlnaHQ6MTUwLG1pbldpZHRoOjE1MCxtb2RhbDohMSxwb3NpdGlvbjp7bXk6ImNlbnRlciIsYXQ6ImNlbnRlciIsb2Y6d2luZG93LGNvbGxpc2lvbjoiZml0Iix1c2luZzpmdW5jdGlvbihlKXt2YXIgaT10KHRoaXMpLmNzcyhlKS5vZmZzZXQoKS50b3A7MD5pJiZ0KHRoaXMpLmNzcygidG9wIixlLnRvcC1pKX19LHJlc2l6YWJsZTohMCxzaG93Om51bGwsdGl0bGU6bnVsbCx3aWR0aDozMDAsYmVmb3JlQ2xvc2U6bnVsbCxjbG9zZTpudWxsLGRyYWc6bnVsbCxkcmFnU3RhcnQ6bnVsbCxkcmFnU3RvcDpudWxsLGZvY3VzOm51bGwsb3BlbjpudWxsLHJlc2l6ZTpudWxsLHJlc2l6ZVN0YXJ0Om51bGwscmVzaXplU3RvcDpudWxsfSxzaXplUmVsYXRlZE9wdGlvbnM6e2J1dHRvbnM6ITAsaGVpZ2h0OiEwLG1heEhlaWdodDohMCxtYXhXaWR0aDohMCxtaW5IZWlnaHQ6ITAsbWluV2lkdGg6ITAsd2lkdGg6ITB9LHJlc2l6YWJsZVJlbGF0ZWRPcHRpb25zOnttYXhIZWlnaHQ6ITAsbWF4V2lkdGg6ITAsbWluSGVpZ2h0OiEwLG1pbldpZHRoOiEwfSxfY3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5vcmlnaW5hbENzcz17ZGlzcGxheTp0aGlzLmVsZW1lbnRbMF0uc3R5bGUuZGlzcGxheSx3aWR0aDp0aGlzLmVsZW1lbnRbMF0uc3R5bGUud2lkdGgsbWluSGVpZ2h0OnRoaXMuZWxlbWVudFswXS5zdHlsZS5taW5IZWlnaHQsbWF4SGVpZ2h0OnRoaXMuZWxlbWVudFswXS5zdHlsZS5tYXhIZWlnaHQsaGVpZ2h0OnRoaXMuZWxlbWVudFswXS5zdHlsZS5oZWlnaHR9LHRoaXMub3JpZ2luYWxQb3NpdGlvbj17cGFyZW50OnRoaXMuZWxlbWVudC5wYXJlbnQoKSxpbmRleDp0aGlzLmVsZW1lbnQucGFyZW50KCkuY2hpbGRyZW4oKS5pbmRleCh0aGlzLmVsZW1lbnQpfSx0aGlzLm9yaWdpbmFsVGl0bGU9dGhpcy5lbGVtZW50LmF0dHIoInRpdGxlIiksbnVsbD09dGhpcy5vcHRpb25zLnRpdGxlJiZudWxsIT10aGlzLm9yaWdpbmFsVGl0bGUmJih0aGlzLm9wdGlvbnMudGl0bGU9dGhpcy5vcmlnaW5hbFRpdGxlKSx0aGlzLm9wdGlvbnMuZGlzYWJsZWQmJih0aGlzLm9wdGlvbnMuZGlzYWJsZWQ9ITEpLHRoaXMuX2NyZWF0ZVdyYXBwZXIoKSx0aGlzLmVsZW1lbnQuc2hvdygpLnJlbW92ZUF0dHIoInRpdGxlIikuYXBwZW5kVG8odGhpcy51aURpYWxvZyksdGhpcy5fYWRkQ2xhc3MoInVpLWRpYWxvZy1jb250ZW50IiwidWktd2lkZ2V0LWNvbnRlbnQiKSx0aGlzLl9jcmVhdGVUaXRsZWJhcigpLHRoaXMuX2NyZWF0ZUJ1dHRvblBhbmUoKSx0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlJiZ0LmZuLmRyYWdnYWJsZSYmdGhpcy5fbWFrZURyYWdnYWJsZSgpLHRoaXMub3B0aW9ucy5yZXNpemFibGUmJnQuZm4ucmVzaXphYmxlJiZ0aGlzLl9tYWtlUmVzaXphYmxlKCksdGhpcy5faXNPcGVuPSExLHRoaXMuX3RyYWNrRm9jdXMoKX0sX2luaXQ6ZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnMuYXV0b09wZW4mJnRoaXMub3BlbigpfSxfYXBwZW5kVG86ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnMuYXBwZW5kVG87cmV0dXJuIGUmJihlLmpxdWVyeXx8ZS5ub2RlVHlwZSk/dChlKTp0aGlzLmRvY3VtZW50LmZpbmQoZXx8ImJvZHkiKS5lcSgwKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMub3JpZ2luYWxQb3NpdGlvbjt0aGlzLl91bnRyYWNrSW5zdGFuY2UoKSx0aGlzLl9kZXN0cm95T3ZlcmxheSgpLHRoaXMuZWxlbWVudC5yZW1vdmVVbmlxdWVJZCgpLmNzcyh0aGlzLm9yaWdpbmFsQ3NzKS5kZXRhY2goKSx0aGlzLnVpRGlhbG9nLnJlbW92ZSgpLHRoaXMub3JpZ2luYWxUaXRsZSYmdGhpcy5lbGVtZW50LmF0dHIoInRpdGxlIix0aGlzLm9yaWdpbmFsVGl0bGUpLHQ9ZS5wYXJlbnQuY2hpbGRyZW4oKS5lcShlLmluZGV4KSx0Lmxlbmd0aCYmdFswXSE9PXRoaXMuZWxlbWVudFswXT90LmJlZm9yZSh0aGlzLmVsZW1lbnQpOmUucGFyZW50LmFwcGVuZCh0aGlzLmVsZW1lbnQpfSx3aWRnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51aURpYWxvZwp9LGRpc2FibGU6dC5ub29wLGVuYWJsZTp0Lm5vb3AsY2xvc2U6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpczt0aGlzLl9pc09wZW4mJnRoaXMuX3RyaWdnZXIoImJlZm9yZUNsb3NlIixlKSE9PSExJiYodGhpcy5faXNPcGVuPSExLHRoaXMuX2ZvY3VzZWRFbGVtZW50PW51bGwsdGhpcy5fZGVzdHJveU92ZXJsYXkoKSx0aGlzLl91bnRyYWNrSW5zdGFuY2UoKSx0aGlzLm9wZW5lci5maWx0ZXIoIjpmb2N1c2FibGUiKS50cmlnZ2VyKCJmb2N1cyIpLmxlbmd0aHx8dC51aS5zYWZlQmx1cih0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pKSx0aGlzLl9oaWRlKHRoaXMudWlEaWFsb2csdGhpcy5vcHRpb25zLmhpZGUsZnVuY3Rpb24oKXtpLl90cmlnZ2VyKCJjbG9zZSIsZSl9KSl9LGlzT3BlbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc09wZW59LG1vdmVUb1RvcDpmdW5jdGlvbigpe3RoaXMuX21vdmVUb1RvcCgpfSxfbW92ZVRvVG9wOmZ1bmN0aW9uKGUsaSl7dmFyIHM9ITEsbj10aGlzLnVpRGlhbG9nLnNpYmxpbmdzKCIudWktZnJvbnQ6dmlzaWJsZSIpLm1hcChmdW5jdGlvbigpe3JldHVybit0KHRoaXMpLmNzcygiei1pbmRleCIpfSkuZ2V0KCksbz1NYXRoLm1heC5hcHBseShudWxsLG4pO3JldHVybiBvPj0rdGhpcy51aURpYWxvZy5jc3MoInotaW5kZXgiKSYmKHRoaXMudWlEaWFsb2cuY3NzKCJ6LWluZGV4IixvKzEpLHM9ITApLHMmJiFpJiZ0aGlzLl90cmlnZ2VyKCJmb2N1cyIsZSksc30sb3BlbjpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX2lzT3Blbj8odGhpcy5fbW92ZVRvVG9wKCkmJnRoaXMuX2ZvY3VzVGFiYmFibGUoKSx2b2lkIDApOih0aGlzLl9pc09wZW49ITAsdGhpcy5vcGVuZXI9dCh0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pKSx0aGlzLl9zaXplKCksdGhpcy5fcG9zaXRpb24oKSx0aGlzLl9jcmVhdGVPdmVybGF5KCksdGhpcy5fbW92ZVRvVG9wKG51bGwsITApLHRoaXMub3ZlcmxheSYmdGhpcy5vdmVybGF5LmNzcygiei1pbmRleCIsdGhpcy51aURpYWxvZy5jc3MoInotaW5kZXgiKS0xKSx0aGlzLl9zaG93KHRoaXMudWlEaWFsb2csdGhpcy5vcHRpb25zLnNob3csZnVuY3Rpb24oKXtlLl9mb2N1c1RhYmJhYmxlKCksZS5fdHJpZ2dlcigiZm9jdXMiKX0pLHRoaXMuX21ha2VGb2N1c1RhcmdldCgpLHRoaXMuX3RyaWdnZXIoIm9wZW4iKSx2b2lkIDApfSxfZm9jdXNUYWJiYWJsZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2ZvY3VzZWRFbGVtZW50O3R8fCh0PXRoaXMuZWxlbWVudC5maW5kKCJbYXV0b2ZvY3VzXSIpKSx0Lmxlbmd0aHx8KHQ9dGhpcy5lbGVtZW50LmZpbmQoIjp0YWJiYWJsZSIpKSx0Lmxlbmd0aHx8KHQ9dGhpcy51aURpYWxvZ0J1dHRvblBhbmUuZmluZCgiOnRhYmJhYmxlIikpLHQubGVuZ3RofHwodD10aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZS5maWx0ZXIoIjp0YWJiYWJsZSIpKSx0Lmxlbmd0aHx8KHQ9dGhpcy51aURpYWxvZyksdC5lcSgwKS50cmlnZ2VyKCJmb2N1cyIpfSxfa2VlcEZvY3VzOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGkoKXt2YXIgZT10LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pLGk9dGhpcy51aURpYWxvZ1swXT09PWV8fHQuY29udGFpbnModGhpcy51aURpYWxvZ1swXSxlKTtpfHx0aGlzLl9mb2N1c1RhYmJhYmxlKCl9ZS5wcmV2ZW50RGVmYXVsdCgpLGkuY2FsbCh0aGlzKSx0aGlzLl9kZWxheShpKX0sX2NyZWF0ZVdyYXBwZXI6ZnVuY3Rpb24oKXt0aGlzLnVpRGlhbG9nPXQoIjxkaXY+IikuaGlkZSgpLmF0dHIoe3RhYkluZGV4Oi0xLHJvbGU6ImRpYWxvZyJ9KS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnVpRGlhbG9nLCJ1aS1kaWFsb2ciLCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktZnJvbnQiKSx0aGlzLl9vbih0aGlzLnVpRGlhbG9nLHtrZXlkb3duOmZ1bmN0aW9uKGUpe2lmKHRoaXMub3B0aW9ucy5jbG9zZU9uRXNjYXBlJiYhZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmZS5rZXlDb2RlJiZlLmtleUNvZGU9PT10LnVpLmtleUNvZGUuRVNDQVBFKXJldHVybiBlLnByZXZlbnREZWZhdWx0KCksdGhpcy5jbG9zZShlKSx2b2lkIDA7aWYoZS5rZXlDb2RlPT09dC51aS5rZXlDb2RlLlRBQiYmIWUuaXNEZWZhdWx0UHJldmVudGVkKCkpe3ZhciBpPXRoaXMudWlEaWFsb2cuZmluZCgiOnRhYmJhYmxlIikscz1pLmZpbHRlcigiOmZpcnN0Iiksbj1pLmZpbHRlcigiOmxhc3QiKTtlLnRhcmdldCE9PW5bMF0mJmUudGFyZ2V0IT09dGhpcy51aURpYWxvZ1swXXx8ZS5zaGlmdEtleT9lLnRhcmdldCE9PXNbMF0mJmUudGFyZ2V0IT09dGhpcy51aURpYWxvZ1swXXx8IWUuc2hpZnRLZXl8fCh0aGlzLl9kZWxheShmdW5jdGlvbigpe24udHJpZ2dlcigiZm9jdXMiKX0pLGUucHJldmVudERlZmF1bHQoKSk6KHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7cy50cmlnZ2VyKCJmb2N1cyIpfSksZS5wcmV2ZW50RGVmYXVsdCgpKX19LG1vdXNlZG93bjpmdW5jdGlvbih0KXt0aGlzLl9tb3ZlVG9Ub3AodCkmJnRoaXMuX2ZvY3VzVGFiYmFibGUoKX19KSx0aGlzLmVsZW1lbnQuZmluZCgiW2FyaWEtZGVzY3JpYmVkYnldIikubGVuZ3RofHx0aGlzLnVpRGlhbG9nLmF0dHIoeyJhcmlhLWRlc2NyaWJlZGJ5Ijp0aGlzLmVsZW1lbnQudW5pcXVlSWQoKS5hdHRyKCJpZCIpfSl9LF9jcmVhdGVUaXRsZWJhcjpmdW5jdGlvbigpe3ZhciBlO3RoaXMudWlEaWFsb2dUaXRsZWJhcj10KCI8ZGl2PiIpLHRoaXMuX2FkZENsYXNzKHRoaXMudWlEaWFsb2dUaXRsZWJhciwidWktZGlhbG9nLXRpdGxlYmFyIiwidWktd2lkZ2V0LWhlYWRlciB1aS1oZWxwZXItY2xlYXJmaXgiKSx0aGlzLl9vbih0aGlzLnVpRGlhbG9nVGl0bGViYXIse21vdXNlZG93bjpmdW5jdGlvbihlKXt0KGUudGFyZ2V0KS5jbG9zZXN0KCIudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIil8fHRoaXMudWlEaWFsb2cudHJpZ2dlcigiZm9jdXMiKX19KSx0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZT10KCI8YnV0dG9uIHR5cGU9J2J1dHRvbic+PC9idXR0b24+IikuYnV0dG9uKHtsYWJlbDp0KCI8YT4iKS50ZXh0KHRoaXMub3B0aW9ucy5jbG9zZVRleHQpLmh0bWwoKSxpY29uOiJ1aS1pY29uLWNsb3NldGhpY2siLHNob3dMYWJlbDohMX0pLmFwcGVuZFRvKHRoaXMudWlEaWFsb2dUaXRsZWJhciksdGhpcy5fYWRkQ2xhc3ModGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UsInVpLWRpYWxvZy10aXRsZWJhci1jbG9zZSIpLHRoaXMuX29uKHRoaXMudWlEaWFsb2dUaXRsZWJhckNsb3NlLHtjbGljazpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdGhpcy5jbG9zZSh0KX19KSxlPXQoIjxzcGFuPiIpLnVuaXF1ZUlkKCkucHJlcGVuZFRvKHRoaXMudWlEaWFsb2dUaXRsZWJhciksdGhpcy5fYWRkQ2xhc3MoZSwidWktZGlhbG9nLXRpdGxlIiksdGhpcy5fdGl0bGUoZSksdGhpcy51aURpYWxvZ1RpdGxlYmFyLnByZXBlbmRUbyh0aGlzLnVpRGlhbG9nKSx0aGlzLnVpRGlhbG9nLmF0dHIoeyJhcmlhLWxhYmVsbGVkYnkiOmUuYXR0cigiaWQiKX0pfSxfdGl0bGU6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zLnRpdGxlP3QudGV4dCh0aGlzLm9wdGlvbnMudGl0bGUpOnQuaHRtbCgiJiMxNjA7Iil9LF9jcmVhdGVCdXR0b25QYW5lOmZ1bmN0aW9uKCl7dGhpcy51aURpYWxvZ0J1dHRvblBhbmU9dCgiPGRpdj4iKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZSwidWktZGlhbG9nLWJ1dHRvbnBhbmUiLCJ1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXgiKSx0aGlzLnVpQnV0dG9uU2V0PXQoIjxkaXY+IikuYXBwZW5kVG8odGhpcy51aURpYWxvZ0J1dHRvblBhbmUpLHRoaXMuX2FkZENsYXNzKHRoaXMudWlCdXR0b25TZXQsInVpLWRpYWxvZy1idXR0b25zZXQiKSx0aGlzLl9jcmVhdGVCdXR0b25zKCl9LF9jcmVhdGVCdXR0b25zOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxpPXRoaXMub3B0aW9ucy5idXR0b25zO3JldHVybiB0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZS5yZW1vdmUoKSx0aGlzLnVpQnV0dG9uU2V0LmVtcHR5KCksdC5pc0VtcHR5T2JqZWN0KGkpfHx0LmlzQXJyYXkoaSkmJiFpLmxlbmd0aD8odGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy51aURpYWxvZywidWktZGlhbG9nLWJ1dHRvbnMiKSx2b2lkIDApOih0LmVhY2goaSxmdW5jdGlvbihpLHMpe3ZhciBuLG87cz10LmlzRnVuY3Rpb24ocyk/e2NsaWNrOnMsdGV4dDppfTpzLHM9dC5leHRlbmQoe3R5cGU6ImJ1dHRvbiJ9LHMpLG49cy5jbGljayxvPXtpY29uOnMuaWNvbixpY29uUG9zaXRpb246cy5pY29uUG9zaXRpb24sc2hvd0xhYmVsOnMuc2hvd0xhYmVsLGljb25zOnMuaWNvbnMsdGV4dDpzLnRleHR9LGRlbGV0ZSBzLmNsaWNrLGRlbGV0ZSBzLmljb24sZGVsZXRlIHMuaWNvblBvc2l0aW9uLGRlbGV0ZSBzLnNob3dMYWJlbCxkZWxldGUgcy5pY29ucywiYm9vbGVhbiI9PXR5cGVvZiBzLnRleHQmJmRlbGV0ZSBzLnRleHQsdCgiPGJ1dHRvbj48L2J1dHRvbj4iLHMpLmJ1dHRvbihvKS5hcHBlbmRUbyhlLnVpQnV0dG9uU2V0KS5vbigiY2xpY2siLGZ1bmN0aW9uKCl7bi5hcHBseShlLmVsZW1lbnRbMF0sYXJndW1lbnRzKX0pfSksdGhpcy5fYWRkQ2xhc3ModGhpcy51aURpYWxvZywidWktZGlhbG9nLWJ1dHRvbnMiKSx0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZS5hcHBlbmRUbyh0aGlzLnVpRGlhbG9nKSx2b2lkIDApfSxfbWFrZURyYWdnYWJsZTpmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7cmV0dXJue3Bvc2l0aW9uOnQucG9zaXRpb24sb2Zmc2V0OnQub2Zmc2V0fX12YXIgaT10aGlzLHM9dGhpcy5vcHRpb25zO3RoaXMudWlEaWFsb2cuZHJhZ2dhYmxlKHtjYW5jZWw6Ii51aS1kaWFsb2ctY29udGVudCwgLnVpLWRpYWxvZy10aXRsZWJhci1jbG9zZSIsaGFuZGxlOiIudWktZGlhbG9nLXRpdGxlYmFyIixjb250YWlubWVudDoiZG9jdW1lbnQiLHN0YXJ0OmZ1bmN0aW9uKHMsbil7aS5fYWRkQ2xhc3ModCh0aGlzKSwidWktZGlhbG9nLWRyYWdnaW5nIiksaS5fYmxvY2tGcmFtZXMoKSxpLl90cmlnZ2VyKCJkcmFnU3RhcnQiLHMsZShuKSl9LGRyYWc6ZnVuY3Rpb24odCxzKXtpLl90cmlnZ2VyKCJkcmFnIix0LGUocykpfSxzdG9wOmZ1bmN0aW9uKG4sbyl7dmFyIGE9by5vZmZzZXQubGVmdC1pLmRvY3VtZW50LnNjcm9sbExlZnQoKSxyPW8ub2Zmc2V0LnRvcC1pLmRvY3VtZW50LnNjcm9sbFRvcCgpO3MucG9zaXRpb249e215OiJsZWZ0IHRvcCIsYXQ6ImxlZnQiKyhhPj0wPyIrIjoiIikrYSsiICIrInRvcCIrKHI+PTA/IisiOiIiKStyLG9mOmkud2luZG93fSxpLl9yZW1vdmVDbGFzcyh0KHRoaXMpLCJ1aS1kaWFsb2ctZHJhZ2dpbmciKSxpLl91bmJsb2NrRnJhbWVzKCksaS5fdHJpZ2dlcigiZHJhZ1N0b3AiLG4sZShvKSl9fSl9LF9tYWtlUmVzaXphYmxlOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtyZXR1cm57b3JpZ2luYWxQb3NpdGlvbjp0Lm9yaWdpbmFsUG9zaXRpb24sb3JpZ2luYWxTaXplOnQub3JpZ2luYWxTaXplLHBvc2l0aW9uOnQucG9zaXRpb24sc2l6ZTp0LnNpemV9fXZhciBpPXRoaXMscz10aGlzLm9wdGlvbnMsbj1zLnJlc2l6YWJsZSxvPXRoaXMudWlEaWFsb2cuY3NzKCJwb3NpdGlvbiIpLGE9InN0cmluZyI9PXR5cGVvZiBuP246Im4sZSxzLHcsc2Usc3csbmUsbnciO3RoaXMudWlEaWFsb2cucmVzaXphYmxlKHtjYW5jZWw6Ii51aS1kaWFsb2ctY29udGVudCIsY29udGFpbm1lbnQ6ImRvY3VtZW50IixhbHNvUmVzaXplOnRoaXMuZWxlbWVudCxtYXhXaWR0aDpzLm1heFdpZHRoLG1heEhlaWdodDpzLm1heEhlaWdodCxtaW5XaWR0aDpzLm1pbldpZHRoLG1pbkhlaWdodDp0aGlzLl9taW5IZWlnaHQoKSxoYW5kbGVzOmEsc3RhcnQ6ZnVuY3Rpb24ocyxuKXtpLl9hZGRDbGFzcyh0KHRoaXMpLCJ1aS1kaWFsb2ctcmVzaXppbmciKSxpLl9ibG9ja0ZyYW1lcygpLGkuX3RyaWdnZXIoInJlc2l6ZVN0YXJ0IixzLGUobikpfSxyZXNpemU6ZnVuY3Rpb24odCxzKXtpLl90cmlnZ2VyKCJyZXNpemUiLHQsZShzKSl9LHN0b3A6ZnVuY3Rpb24obixvKXt2YXIgYT1pLnVpRGlhbG9nLm9mZnNldCgpLHI9YS5sZWZ0LWkuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpLGg9YS50b3AtaS5kb2N1bWVudC5zY3JvbGxUb3AoKTtzLmhlaWdodD1pLnVpRGlhbG9nLmhlaWdodCgpLHMud2lkdGg9aS51aURpYWxvZy53aWR0aCgpLHMucG9zaXRpb249e215OiJsZWZ0IHRvcCIsYXQ6ImxlZnQiKyhyPj0wPyIrIjoiIikrcisiICIrInRvcCIrKGg+PTA/IisiOiIiKStoLG9mOmkud2luZG93fSxpLl9yZW1vdmVDbGFzcyh0KHRoaXMpLCJ1aS1kaWFsb2ctcmVzaXppbmciKSxpLl91bmJsb2NrRnJhbWVzKCksaS5fdHJpZ2dlcigicmVzaXplU3RvcCIsbixlKG8pKX19KS5jc3MoInBvc2l0aW9uIixvKX0sX3RyYWNrRm9jdXM6ZnVuY3Rpb24oKXt0aGlzLl9vbih0aGlzLndpZGdldCgpLHtmb2N1c2luOmZ1bmN0aW9uKGUpe3RoaXMuX21ha2VGb2N1c1RhcmdldCgpLHRoaXMuX2ZvY3VzZWRFbGVtZW50PXQoZS50YXJnZXQpfX0pfSxfbWFrZUZvY3VzVGFyZ2V0OmZ1bmN0aW9uKCl7dGhpcy5fdW50cmFja0luc3RhbmNlKCksdGhpcy5fdHJhY2tpbmdJbnN0YW5jZXMoKS51bnNoaWZ0KHRoaXMpfSxfdW50cmFja0luc3RhbmNlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fdHJhY2tpbmdJbnN0YW5jZXMoKSxpPXQuaW5BcnJheSh0aGlzLGUpOy0xIT09aSYmZS5zcGxpY2UoaSwxKX0sX3RyYWNraW5nSW5zdGFuY2VzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5kb2N1bWVudC5kYXRhKCJ1aS1kaWFsb2ctaW5zdGFuY2VzIik7cmV0dXJuIHR8fCh0PVtdLHRoaXMuZG9jdW1lbnQuZGF0YSgidWktZGlhbG9nLWluc3RhbmNlcyIsdCkpLHR9LF9taW5IZWlnaHQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnM7cmV0dXJuImF1dG8iPT09dC5oZWlnaHQ/dC5taW5IZWlnaHQ6TWF0aC5taW4odC5taW5IZWlnaHQsdC5oZWlnaHQpfSxfcG9zaXRpb246ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnVpRGlhbG9nLmlzKCI6dmlzaWJsZSIpO3R8fHRoaXMudWlEaWFsb2cuc2hvdygpLHRoaXMudWlEaWFsb2cucG9zaXRpb24odGhpcy5vcHRpb25zLnBvc2l0aW9uKSx0fHx0aGlzLnVpRGlhbG9nLmhpZGUoKX0sX3NldE9wdGlvbnM6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcyxzPSExLG49e307dC5lYWNoKGUsZnVuY3Rpb24odCxlKXtpLl9zZXRPcHRpb24odCxlKSx0IGluIGkuc2l6ZVJlbGF0ZWRPcHRpb25zJiYocz0hMCksdCBpbiBpLnJlc2l6YWJsZVJlbGF0ZWRPcHRpb25zJiYoblt0XT1lKX0pLHMmJih0aGlzLl9zaXplKCksdGhpcy5fcG9zaXRpb24oKSksdGhpcy51aURpYWxvZy5pcygiOmRhdGEodWktcmVzaXphYmxlKSIpJiZ0aGlzLnVpRGlhbG9nLnJlc2l6YWJsZSgib3B0aW9uIixuKX0sX3NldE9wdGlvbjpmdW5jdGlvbihlLGkpe3ZhciBzLG4sbz10aGlzLnVpRGlhbG9nOyJkaXNhYmxlZCIhPT1lJiYodGhpcy5fc3VwZXIoZSxpKSwiYXBwZW5kVG8iPT09ZSYmdGhpcy51aURpYWxvZy5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSwiYnV0dG9ucyI9PT1lJiZ0aGlzLl9jcmVhdGVCdXR0b25zKCksImNsb3NlVGV4dCI9PT1lJiZ0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZS5idXR0b24oe2xhYmVsOnQoIjxhPiIpLnRleHQoIiIrdGhpcy5vcHRpb25zLmNsb3NlVGV4dCkuaHRtbCgpfSksImRyYWdnYWJsZSI9PT1lJiYocz1vLmlzKCI6ZGF0YSh1aS1kcmFnZ2FibGUpIikscyYmIWkmJm8uZHJhZ2dhYmxlKCJkZXN0cm95IiksIXMmJmkmJnRoaXMuX21ha2VEcmFnZ2FibGUoKSksInBvc2l0aW9uIj09PWUmJnRoaXMuX3Bvc2l0aW9uKCksInJlc2l6YWJsZSI9PT1lJiYobj1vLmlzKCI6ZGF0YSh1aS1yZXNpemFibGUpIiksbiYmIWkmJm8ucmVzaXphYmxlKCJkZXN0cm95IiksbiYmInN0cmluZyI9PXR5cGVvZiBpJiZvLnJlc2l6YWJsZSgib3B0aW9uIiwiaGFuZGxlcyIsaSksbnx8aT09PSExfHx0aGlzLl9tYWtlUmVzaXphYmxlKCkpLCJ0aXRsZSI9PT1lJiZ0aGlzLl90aXRsZSh0aGlzLnVpRGlhbG9nVGl0bGViYXIuZmluZCgiLnVpLWRpYWxvZy10aXRsZSIpKSl9LF9zaXplOmZ1bmN0aW9uKCl7dmFyIHQsZSxpLHM9dGhpcy5vcHRpb25zO3RoaXMuZWxlbWVudC5zaG93KCkuY3NzKHt3aWR0aDoiYXV0byIsbWluSGVpZ2h0OjAsbWF4SGVpZ2h0OiJub25lIixoZWlnaHQ6MH0pLHMubWluV2lkdGg+cy53aWR0aCYmKHMud2lkdGg9cy5taW5XaWR0aCksdD10aGlzLnVpRGlhbG9nLmNzcyh7aGVpZ2h0OiJhdXRvIix3aWR0aDpzLndpZHRofSkub3V0ZXJIZWlnaHQoKSxlPU1hdGgubWF4KDAscy5taW5IZWlnaHQtdCksaT0ibnVtYmVyIj09dHlwZW9mIHMubWF4SGVpZ2h0P01hdGgubWF4KDAscy5tYXhIZWlnaHQtdCk6Im5vbmUiLCJhdXRvIj09PXMuaGVpZ2h0P3RoaXMuZWxlbWVudC5jc3Moe21pbkhlaWdodDplLG1heEhlaWdodDppLGhlaWdodDoiYXV0byJ9KTp0aGlzLmVsZW1lbnQuaGVpZ2h0KE1hdGgubWF4KDAscy5oZWlnaHQtdCkpLHRoaXMudWlEaWFsb2cuaXMoIjpkYXRhKHVpLXJlc2l6YWJsZSkiKSYmdGhpcy51aURpYWxvZy5yZXNpemFibGUoIm9wdGlvbiIsIm1pbkhlaWdodCIsdGhpcy5fbWluSGVpZ2h0KCkpfSxfYmxvY2tGcmFtZXM6ZnVuY3Rpb24oKXt0aGlzLmlmcmFtZUJsb2Nrcz10aGlzLmRvY3VtZW50LmZpbmQoImlmcmFtZSIpLm1hcChmdW5jdGlvbigpe3ZhciBlPXQodGhpcyk7cmV0dXJuIHQoIjxkaXY+IikuY3NzKHtwb3NpdGlvbjoiYWJzb2x1dGUiLHdpZHRoOmUub3V0ZXJXaWR0aCgpLGhlaWdodDplLm91dGVySGVpZ2h0KCl9KS5hcHBlbmRUbyhlLnBhcmVudCgpKS5vZmZzZXQoZS5vZmZzZXQoKSlbMF19KX0sX3VuYmxvY2tGcmFtZXM6ZnVuY3Rpb24oKXt0aGlzLmlmcmFtZUJsb2NrcyYmKHRoaXMuaWZyYW1lQmxvY2tzLnJlbW92ZSgpLGRlbGV0ZSB0aGlzLmlmcmFtZUJsb2Nrcyl9LF9hbGxvd0ludGVyYWN0aW9uOmZ1bmN0aW9uKGUpe3JldHVybiB0KGUudGFyZ2V0KS5jbG9zZXN0KCIudWktZGlhbG9nIikubGVuZ3RoPyEwOiEhdChlLnRhcmdldCkuY2xvc2VzdCgiLnVpLWRhdGVwaWNrZXIiKS5sZW5ndGh9LF9jcmVhdGVPdmVybGF5OmZ1bmN0aW9uKCl7aWYodGhpcy5vcHRpb25zLm1vZGFsKXt2YXIgZT0hMDt0aGlzLl9kZWxheShmdW5jdGlvbigpe2U9ITF9KSx0aGlzLmRvY3VtZW50LmRhdGEoInVpLWRpYWxvZy1vdmVybGF5cyIpfHx0aGlzLl9vbih0aGlzLmRvY3VtZW50LHtmb2N1c2luOmZ1bmN0aW9uKHQpe2V8fHRoaXMuX2FsbG93SW50ZXJhY3Rpb24odCl8fCh0LnByZXZlbnREZWZhdWx0KCksdGhpcy5fdHJhY2tpbmdJbnN0YW5jZXMoKVswXS5fZm9jdXNUYWJiYWJsZSgpKX19KSx0aGlzLm92ZXJsYXk9dCgiPGRpdj4iKS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSx0aGlzLl9hZGRDbGFzcyh0aGlzLm92ZXJsYXksbnVsbCwidWktd2lkZ2V0LW92ZXJsYXkgdWktZnJvbnQiKSx0aGlzLl9vbih0aGlzLm92ZXJsYXkse21vdXNlZG93bjoiX2tlZXBGb2N1cyJ9KSx0aGlzLmRvY3VtZW50LmRhdGEoInVpLWRpYWxvZy1vdmVybGF5cyIsKHRoaXMuZG9jdW1lbnQuZGF0YSgidWktZGlhbG9nLW92ZXJsYXlzIil8fDApKzEpfX0sX2Rlc3Ryb3lPdmVybGF5OmZ1bmN0aW9uKCl7aWYodGhpcy5vcHRpb25zLm1vZGFsJiZ0aGlzLm92ZXJsYXkpe3ZhciB0PXRoaXMuZG9jdW1lbnQuZGF0YSgidWktZGlhbG9nLW92ZXJsYXlzIiktMTt0P3RoaXMuZG9jdW1lbnQuZGF0YSgidWktZGlhbG9nLW92ZXJsYXlzIix0KToodGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQsImZvY3VzaW4iKSx0aGlzLmRvY3VtZW50LnJlbW92ZURhdGEoInVpLWRpYWxvZy1vdmVybGF5cyIpKSx0aGlzLm92ZXJsYXkucmVtb3ZlKCksdGhpcy5vdmVybGF5PW51bGx9fX0pLHQudWlCYWNrQ29tcGF0IT09ITEmJnQud2lkZ2V0KCJ1aS5kaWFsb2ciLHQudWkuZGlhbG9nLHtvcHRpb25zOntkaWFsb2dDbGFzczoiIn0sX2NyZWF0ZVdyYXBwZXI6ZnVuY3Rpb24oKXt0aGlzLl9zdXBlcigpLHRoaXMudWlEaWFsb2cuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmRpYWxvZ0NsYXNzKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpeyJkaWFsb2dDbGFzcyI9PT10JiZ0aGlzLnVpRGlhbG9nLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5kaWFsb2dDbGFzcykuYWRkQ2xhc3MoZSksdGhpcy5fc3VwZXJBcHBseShhcmd1bWVudHMpfX0pLHQudWkuZGlhbG9nLHQud2lkZ2V0KCJ1aS5kcm9wcGFibGUiLHt2ZXJzaW9uOiIxLjEyLjEiLHdpZGdldEV2ZW50UHJlZml4OiJkcm9wIixvcHRpb25zOnthY2NlcHQ6IioiLGFkZENsYXNzZXM6ITAsZ3JlZWR5OiExLHNjb3BlOiJkZWZhdWx0Iix0b2xlcmFuY2U6ImludGVyc2VjdCIsYWN0aXZhdGU6bnVsbCxkZWFjdGl2YXRlOm51bGwsZHJvcDpudWxsLG91dDpudWxsLG92ZXI6bnVsbH0sX2NyZWF0ZTpmdW5jdGlvbigpe3ZhciBlLGk9dGhpcy5vcHRpb25zLHM9aS5hY2NlcHQ7dGhpcy5pc292ZXI9ITEsdGhpcy5pc291dD0hMCx0aGlzLmFjY2VwdD10LmlzRnVuY3Rpb24ocyk/czpmdW5jdGlvbih0KXtyZXR1cm4gdC5pcyhzKX0sdGhpcy5wcm9wb3J0aW9ucz1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhlPWFyZ3VtZW50c1swXSx2b2lkIDApOmU/ZTplPXt3aWR0aDp0aGlzLmVsZW1lbnRbMF0ub2Zmc2V0V2lkdGgsaGVpZ2h0OnRoaXMuZWxlbWVudFswXS5vZmZzZXRIZWlnaHR9fSx0aGlzLl9hZGRUb01hbmFnZXIoaS5zY29wZSksaS5hZGRDbGFzc2VzJiZ0aGlzLl9hZGRDbGFzcygidWktZHJvcHBhYmxlIil9LF9hZGRUb01hbmFnZXI6ZnVuY3Rpb24oZSl7dC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tlXT10LnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2VdfHxbXSx0LnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2VdLnB1c2godGhpcyl9LF9zcGxpY2U6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7dC5sZW5ndGg+ZTtlKyspdFtlXT09PXRoaXMmJnQuc3BsaWNlKGUsMSl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGU9dC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1t0aGlzLm9wdGlvbnMuc2NvcGVdO3RoaXMuX3NwbGljZShlKX0sX3NldE9wdGlvbjpmdW5jdGlvbihlLGkpe2lmKCJhY2NlcHQiPT09ZSl0aGlzLmFjY2VwdD10LmlzRnVuY3Rpb24oaSk/aTpmdW5jdGlvbih0KXtyZXR1cm4gdC5pcyhpKX07ZWxzZSBpZigic2NvcGUiPT09ZSl7dmFyIHM9dC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1t0aGlzLm9wdGlvbnMuc2NvcGVdO3RoaXMuX3NwbGljZShzKSx0aGlzLl9hZGRUb01hbmFnZXIoaSl9dGhpcy5fc3VwZXIoZSxpKX0sX2FjdGl2YXRlOmZ1bmN0aW9uKGUpe3ZhciBpPXQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7dGhpcy5fYWRkQWN0aXZlQ2xhc3MoKSxpJiZ0aGlzLl90cmlnZ2VyKCJhY3RpdmF0ZSIsZSx0aGlzLnVpKGkpKX0sX2RlYWN0aXZhdGU6ZnVuY3Rpb24oZSl7dmFyIGk9dC51aS5kZG1hbmFnZXIuY3VycmVudDt0aGlzLl9yZW1vdmVBY3RpdmVDbGFzcygpLGkmJnRoaXMuX3RyaWdnZXIoImRlYWN0aXZhdGUiLGUsdGhpcy51aShpKSl9LF9vdmVyOmZ1bmN0aW9uKGUpe3ZhciBpPXQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7aSYmKGkuY3VycmVudEl0ZW18fGkuZWxlbWVudClbMF0hPT10aGlzLmVsZW1lbnRbMF0mJnRoaXMuYWNjZXB0LmNhbGwodGhpcy5lbGVtZW50WzBdLGkuY3VycmVudEl0ZW18fGkuZWxlbWVudCkmJih0aGlzLl9hZGRIb3ZlckNsYXNzKCksdGhpcy5fdHJpZ2dlcigib3ZlciIsZSx0aGlzLnVpKGkpKSl9LF9vdXQ6ZnVuY3Rpb24oZSl7dmFyIGk9dC51aS5kZG1hbmFnZXIuY3VycmVudDtpJiYoaS5jdXJyZW50SXRlbXx8aS5lbGVtZW50KVswXSE9PXRoaXMuZWxlbWVudFswXSYmdGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0saS5jdXJyZW50SXRlbXx8aS5lbGVtZW50KSYmKHRoaXMuX3JlbW92ZUhvdmVyQ2xhc3MoKSx0aGlzLl90cmlnZ2VyKCJvdXQiLGUsdGhpcy51aShpKSkpfSxfZHJvcDpmdW5jdGlvbihlLGkpe3ZhciBzPWl8fHQudWkuZGRtYW5hZ2VyLmN1cnJlbnQsbj0hMTtyZXR1cm4gcyYmKHMuY3VycmVudEl0ZW18fHMuZWxlbWVudClbMF0hPT10aGlzLmVsZW1lbnRbMF0/KHRoaXMuZWxlbWVudC5maW5kKCI6ZGF0YSh1aS1kcm9wcGFibGUpIikubm90KCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nIikuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQodGhpcykuZHJvcHBhYmxlKCJpbnN0YW5jZSIpO3JldHVybiBpLm9wdGlvbnMuZ3JlZWR5JiYhaS5vcHRpb25zLmRpc2FibGVkJiZpLm9wdGlvbnMuc2NvcGU9PT1zLm9wdGlvbnMuc2NvcGUmJmkuYWNjZXB0LmNhbGwoaS5lbGVtZW50WzBdLHMuY3VycmVudEl0ZW18fHMuZWxlbWVudCkmJnYocyx0LmV4dGVuZChpLHtvZmZzZXQ6aS5lbGVtZW50Lm9mZnNldCgpfSksaS5vcHRpb25zLnRvbGVyYW5jZSxlKT8obj0hMCwhMSk6dm9pZCAwfSksbj8hMTp0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSxzLmN1cnJlbnRJdGVtfHxzLmVsZW1lbnQpPyh0aGlzLl9yZW1vdmVBY3RpdmVDbGFzcygpLHRoaXMuX3JlbW92ZUhvdmVyQ2xhc3MoKSx0aGlzLl90cmlnZ2VyKCJkcm9wIixlLHRoaXMudWkocykpLHRoaXMuZWxlbWVudCk6ITEpOiExfSx1aTpmdW5jdGlvbih0KXtyZXR1cm57ZHJhZ2dhYmxlOnQuY3VycmVudEl0ZW18fHQuZWxlbWVudCxoZWxwZXI6dC5oZWxwZXIscG9zaXRpb246dC5wb3NpdGlvbixvZmZzZXQ6dC5wb3NpdGlvbkFic319LF9hZGRIb3ZlckNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fYWRkQ2xhc3MoInVpLWRyb3BwYWJsZS1ob3ZlciIpfSxfcmVtb3ZlSG92ZXJDbGFzczpmdW5jdGlvbigpe3RoaXMuX3JlbW92ZUNsYXNzKCJ1aS1kcm9wcGFibGUtaG92ZXIiKX0sX2FkZEFjdGl2ZUNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fYWRkQ2xhc3MoInVpLWRyb3BwYWJsZS1hY3RpdmUiKX0sX3JlbW92ZUFjdGl2ZUNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fcmVtb3ZlQ2xhc3MoInVpLWRyb3BwYWJsZS1hY3RpdmUiKX19KTt2YXIgdj10LnVpLmludGVyc2VjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLGkpe3JldHVybiB0Pj1lJiZlK2k+dH1yZXR1cm4gZnVuY3Rpb24oZSxpLHMsbil7aWYoIWkub2Zmc2V0KXJldHVybiExO3ZhciBvPShlLnBvc2l0aW9uQWJzfHxlLnBvc2l0aW9uLmFic29sdXRlKS5sZWZ0K2UubWFyZ2lucy5sZWZ0LGE9KGUucG9zaXRpb25BYnN8fGUucG9zaXRpb24uYWJzb2x1dGUpLnRvcCtlLm1hcmdpbnMudG9wLHI9bytlLmhlbHBlclByb3BvcnRpb25zLndpZHRoLGg9YStlLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxsPWkub2Zmc2V0LmxlZnQsYz1pLm9mZnNldC50b3AsdT1sK2kucHJvcG9ydGlvbnMoKS53aWR0aCxkPWMraS5wcm9wb3J0aW9ucygpLmhlaWdodDtzd2l0Y2gocyl7Y2FzZSJmaXQiOnJldHVybiBvPj1sJiZ1Pj1yJiZhPj1jJiZkPj1oO2Nhc2UiaW50ZXJzZWN0IjpyZXR1cm4gbytlLmhlbHBlclByb3BvcnRpb25zLndpZHRoLzI+bCYmdT5yLWUuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgvMiYmYStlLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yPmMmJmQ+aC1lLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yO2Nhc2UicG9pbnRlciI6cmV0dXJuIHQobi5wYWdlWSxjLGkucHJvcG9ydGlvbnMoKS5oZWlnaHQpJiZ0KG4ucGFnZVgsbCxpLnByb3BvcnRpb25zKCkud2lkdGgpO2Nhc2UidG91Y2giOnJldHVybihhPj1jJiZkPj1hfHxoPj1jJiZkPj1ofHxjPmEmJmg+ZCkmJihvPj1sJiZ1Pj1vfHxyPj1sJiZ1Pj1yfHxsPm8mJnI+dSk7ZGVmYXVsdDpyZXR1cm4hMX19fSgpO3QudWkuZGRtYW5hZ2VyPXtjdXJyZW50Om51bGwsZHJvcHBhYmxlczp7ImRlZmF1bHQiOltdfSxwcmVwYXJlT2Zmc2V0czpmdW5jdGlvbihlLGkpe3ZhciBzLG4sbz10LnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2Uub3B0aW9ucy5zY29wZV18fFtdLGE9aT9pLnR5cGU6bnVsbCxyPShlLmN1cnJlbnRJdGVtfHxlLmVsZW1lbnQpLmZpbmQoIjpkYXRhKHVpLWRyb3BwYWJsZSkiKS5hZGRCYWNrKCk7dDpmb3Iocz0wO28ubGVuZ3RoPnM7cysrKWlmKCEob1tzXS5vcHRpb25zLmRpc2FibGVkfHxlJiYhb1tzXS5hY2NlcHQuY2FsbChvW3NdLmVsZW1lbnRbMF0sZS5jdXJyZW50SXRlbXx8ZS5lbGVtZW50KSkpe2ZvcihuPTA7ci5sZW5ndGg+bjtuKyspaWYocltuXT09PW9bc10uZWxlbWVudFswXSl7b1tzXS5wcm9wb3J0aW9ucygpLmhlaWdodD0wO2NvbnRpbnVlIHR9b1tzXS52aXNpYmxlPSJub25lIiE9PW9bc10uZWxlbWVudC5jc3MoImRpc3BsYXkiKSxvW3NdLnZpc2libGUmJigibW91c2Vkb3duIj09PWEmJm9bc10uX2FjdGl2YXRlLmNhbGwob1tzXSxpKSxvW3NdLm9mZnNldD1vW3NdLmVsZW1lbnQub2Zmc2V0KCksb1tzXS5wcm9wb3J0aW9ucyh7d2lkdGg6b1tzXS5lbGVtZW50WzBdLm9mZnNldFdpZHRoLGhlaWdodDpvW3NdLmVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0fSkpfX0sZHJvcDpmdW5jdGlvbihlLGkpe3ZhciBzPSExO3JldHVybiB0LmVhY2goKHQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbZS5vcHRpb25zLnNjb3BlXXx8W10pLnNsaWNlKCksZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnMmJighdGhpcy5vcHRpb25zLmRpc2FibGVkJiZ0aGlzLnZpc2libGUmJnYoZSx0aGlzLHRoaXMub3B0aW9ucy50b2xlcmFuY2UsaSkmJihzPXRoaXMuX2Ryb3AuY2FsbCh0aGlzLGkpfHxzKSwhdGhpcy5vcHRpb25zLmRpc2FibGVkJiZ0aGlzLnZpc2libGUmJnRoaXMuYWNjZXB0LmNhbGwodGhpcy5lbGVtZW50WzBdLGUuY3VycmVudEl0ZW18fGUuZWxlbWVudCkmJih0aGlzLmlzb3V0PSEwLHRoaXMuaXNvdmVyPSExLHRoaXMuX2RlYWN0aXZhdGUuY2FsbCh0aGlzLGkpKSl9KSxzfSxkcmFnU3RhcnQ6ZnVuY3Rpb24oZSxpKXtlLmVsZW1lbnQucGFyZW50c1VudGlsKCJib2R5Iikub24oInNjcm9sbC5kcm9wcGFibGUiLGZ1bmN0aW9uKCl7ZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnN8fHQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKGUsaSl9KX0sZHJhZzpmdW5jdGlvbihlLGkpe2Uub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zJiZ0LnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyhlLGkpLHQuZWFjaCh0LnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2Uub3B0aW9ucy5zY29wZV18fFtdLGZ1bmN0aW9uKCl7aWYoIXRoaXMub3B0aW9ucy5kaXNhYmxlZCYmIXRoaXMuZ3JlZWR5Q2hpbGQmJnRoaXMudmlzaWJsZSl7dmFyIHMsbixvLGE9dihlLHRoaXMsdGhpcy5vcHRpb25zLnRvbGVyYW5jZSxpKSxyPSFhJiZ0aGlzLmlzb3Zlcj8iaXNvdXQiOmEmJiF0aGlzLmlzb3Zlcj8iaXNvdmVyIjpudWxsO3ImJih0aGlzLm9wdGlvbnMuZ3JlZWR5JiYobj10aGlzLm9wdGlvbnMuc2NvcGUsbz10aGlzLmVsZW1lbnQucGFyZW50cygiOmRhdGEodWktZHJvcHBhYmxlKSIpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiB0KHRoaXMpLmRyb3BwYWJsZSgiaW5zdGFuY2UiKS5vcHRpb25zLnNjb3BlPT09bn0pLG8ubGVuZ3RoJiYocz10KG9bMF0pLmRyb3BwYWJsZSgiaW5zdGFuY2UiKSxzLmdyZWVkeUNoaWxkPSJpc292ZXIiPT09cikpLHMmJiJpc292ZXIiPT09ciYmKHMuaXNvdmVyPSExLHMuaXNvdXQ9ITAscy5fb3V0LmNhbGwocyxpKSksdGhpc1tyXT0hMCx0aGlzWyJpc291dCI9PT1yPyJpc292ZXIiOiJpc291dCJdPSExLHRoaXNbImlzb3ZlciI9PT1yPyJfb3ZlciI6Il9vdXQiXS5jYWxsKHRoaXMsaSkscyYmImlzb3V0Ij09PXImJihzLmlzb3V0PSExLHMuaXNvdmVyPSEwLHMuX292ZXIuY2FsbChzLGkpKSl9fSl9LGRyYWdTdG9wOmZ1bmN0aW9uKGUsaSl7ZS5lbGVtZW50LnBhcmVudHNVbnRpbCgiYm9keSIpLm9mZigic2Nyb2xsLmRyb3BwYWJsZSIpLGUub3B0aW9ucy5yZWZyZXNoUG9zaXRpb25zfHx0LnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyhlLGkpfX0sdC51aUJhY2tDb21wYXQhPT0hMSYmdC53aWRnZXQoInVpLmRyb3BwYWJsZSIsdC51aS5kcm9wcGFibGUse29wdGlvbnM6e2hvdmVyQ2xhc3M6ITEsYWN0aXZlQ2xhc3M6ITF9LF9hZGRBY3RpdmVDbGFzczpmdW5jdGlvbigpe3RoaXMuX3N1cGVyKCksdGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzJiZ0aGlzLmVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKX0sX3JlbW92ZUFjdGl2ZUNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fc3VwZXIoKSx0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MmJnRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpfSxfYWRkSG92ZXJDbGFzczpmdW5jdGlvbigpe3RoaXMuX3N1cGVyKCksdGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MmJnRoaXMuZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyl9LF9yZW1vdmVIb3ZlckNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fc3VwZXIoKSx0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyYmdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKX19KSx0LnVpLmRyb3BwYWJsZSx0LndpZGdldCgidWkucHJvZ3Jlc3NiYXIiLHt2ZXJzaW9uOiIxLjEyLjEiLG9wdGlvbnM6e2NsYXNzZXM6eyJ1aS1wcm9ncmVzc2JhciI6InVpLWNvcm5lci1hbGwiLCJ1aS1wcm9ncmVzc2Jhci12YWx1ZSI6InVpLWNvcm5lci1sZWZ0IiwidWktcHJvZ3Jlc3NiYXItY29tcGxldGUiOiJ1aS1jb3JuZXItcmlnaHQifSxtYXg6MTAwLHZhbHVlOjAsY2hhbmdlOm51bGwsY29tcGxldGU6bnVsbH0sbWluOjAsX2NyZWF0ZTpmdW5jdGlvbigpe3RoaXMub2xkVmFsdWU9dGhpcy5vcHRpb25zLnZhbHVlPXRoaXMuX2NvbnN0cmFpbmVkVmFsdWUoKSx0aGlzLmVsZW1lbnQuYXR0cih7cm9sZToicHJvZ3Jlc3NiYXIiLCJhcmlhLXZhbHVlbWluIjp0aGlzLm1pbn0pLHRoaXMuX2FkZENsYXNzKCJ1aS1wcm9ncmVzc2JhciIsInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCIpLHRoaXMudmFsdWVEaXY9dCgiPGRpdj4iKS5hcHBlbmRUbyh0aGlzLmVsZW1lbnQpLHRoaXMuX2FkZENsYXNzKHRoaXMudmFsdWVEaXYsInVpLXByb2dyZXNzYmFyLXZhbHVlIiwidWktd2lkZ2V0LWhlYWRlciIpLHRoaXMuX3JlZnJlc2hWYWx1ZSgpfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyKCJyb2xlIGFyaWEtdmFsdWVtaW4gYXJpYS12YWx1ZW1heCBhcmlhLXZhbHVlbm93IiksdGhpcy52YWx1ZURpdi5yZW1vdmUoKX0sdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQ/dGhpcy5vcHRpb25zLnZhbHVlOih0aGlzLm9wdGlvbnMudmFsdWU9dGhpcy5fY29uc3RyYWluZWRWYWx1ZSh0KSx0aGlzLl9yZWZyZXNoVmFsdWUoKSx2b2lkIDApfSxfY29uc3RyYWluZWRWYWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9dGhpcy5vcHRpb25zLnZhbHVlKSx0aGlzLmluZGV0ZXJtaW5hdGU9dD09PSExLCJudW1iZXIiIT10eXBlb2YgdCYmKHQ9MCksdGhpcy5pbmRldGVybWluYXRlPyExOk1hdGgubWluKHRoaXMub3B0aW9ucy5tYXgsTWF0aC5tYXgodGhpcy5taW4sdCkpfSxfc2V0T3B0aW9uczpmdW5jdGlvbih0KXt2YXIgZT10LnZhbHVlO2RlbGV0ZSB0LnZhbHVlLHRoaXMuX3N1cGVyKHQpLHRoaXMub3B0aW9ucy52YWx1ZT10aGlzLl9jb25zdHJhaW5lZFZhbHVlKGUpLHRoaXMuX3JlZnJlc2hWYWx1ZSgpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7Im1heCI9PT10JiYoZT1NYXRoLm1heCh0aGlzLm1pbixlKSksdGhpcy5fc3VwZXIodCxlKX0sX3NldE9wdGlvbkRpc2FibGVkOmZ1bmN0aW9uKHQpe3RoaXMuX3N1cGVyKHQpLHRoaXMuZWxlbWVudC5hdHRyKCJhcmlhLWRpc2FibGVkIix0KSx0aGlzLl90b2dnbGVDbGFzcyhudWxsLCJ1aS1zdGF0ZS1kaXNhYmxlZCIsISF0KX0sX3BlcmNlbnRhZ2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmRldGVybWluYXRlPzEwMDoxMDAqKHRoaXMub3B0aW9ucy52YWx1ZS10aGlzLm1pbikvKHRoaXMub3B0aW9ucy5tYXgtdGhpcy5taW4pfSxfcmVmcmVzaFZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcHRpb25zLnZhbHVlLGk9dGhpcy5fcGVyY2VudGFnZSgpO3RoaXMudmFsdWVEaXYudG9nZ2xlKHRoaXMuaW5kZXRlcm1pbmF0ZXx8ZT50aGlzLm1pbikud2lkdGgoaS50b0ZpeGVkKDApKyIlIiksdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy52YWx1ZURpdiwidWktcHJvZ3Jlc3NiYXItY29tcGxldGUiLG51bGwsZT09PXRoaXMub3B0aW9ucy5tYXgpLl90b2dnbGVDbGFzcygidWktcHJvZ3Jlc3NiYXItaW5kZXRlcm1pbmF0ZSIsbnVsbCx0aGlzLmluZGV0ZXJtaW5hdGUpLHRoaXMuaW5kZXRlcm1pbmF0ZT8odGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoImFyaWEtdmFsdWVub3ciKSx0aGlzLm92ZXJsYXlEaXZ8fCh0aGlzLm92ZXJsYXlEaXY9dCgiPGRpdj4iKS5hcHBlbmRUbyh0aGlzLnZhbHVlRGl2KSx0aGlzLl9hZGRDbGFzcyh0aGlzLm92ZXJsYXlEaXYsInVpLXByb2dyZXNzYmFyLW92ZXJsYXkiKSkpOih0aGlzLmVsZW1lbnQuYXR0cih7ImFyaWEtdmFsdWVtYXgiOnRoaXMub3B0aW9ucy5tYXgsImFyaWEtdmFsdWVub3ciOmV9KSx0aGlzLm92ZXJsYXlEaXYmJih0aGlzLm92ZXJsYXlEaXYucmVtb3ZlKCksdGhpcy5vdmVybGF5RGl2PW51bGwpKSx0aGlzLm9sZFZhbHVlIT09ZSYmKHRoaXMub2xkVmFsdWU9ZSx0aGlzLl90cmlnZ2VyKCJjaGFuZ2UiKSksZT09PXRoaXMub3B0aW9ucy5tYXgmJnRoaXMuX3RyaWdnZXIoImNvbXBsZXRlIil9fSksdC53aWRnZXQoInVpLnNlbGVjdGFibGUiLHQudWkubW91c2Use3ZlcnNpb246IjEuMTIuMSIsb3B0aW9uczp7YXBwZW5kVG86ImJvZHkiLGF1dG9SZWZyZXNoOiEwLGRpc3RhbmNlOjAsZmlsdGVyOiIqIix0b2xlcmFuY2U6InRvdWNoIixzZWxlY3RlZDpudWxsLHNlbGVjdGluZzpudWxsLHN0YXJ0Om51bGwsc3RvcDpudWxsLHVuc2VsZWN0ZWQ6bnVsbCx1bnNlbGVjdGluZzpudWxsfSxfY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9hZGRDbGFzcygidWktc2VsZWN0YWJsZSIpLHRoaXMuZHJhZ2dlZD0hMSx0aGlzLnJlZnJlc2g9ZnVuY3Rpb24oKXtlLmVsZW1lbnRQb3M9dChlLmVsZW1lbnRbMF0pLm9mZnNldCgpLGUuc2VsZWN0ZWVzPXQoZS5vcHRpb25zLmZpbHRlcixlLmVsZW1lbnRbMF0pLGUuX2FkZENsYXNzKGUuc2VsZWN0ZWVzLCJ1aS1zZWxlY3RlZSIpLGUuc2VsZWN0ZWVzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT10KHRoaXMpLHM9aS5vZmZzZXQoKSxuPXtsZWZ0OnMubGVmdC1lLmVsZW1lbnRQb3MubGVmdCx0b3A6cy50b3AtZS5lbGVtZW50UG9zLnRvcH07dC5kYXRhKHRoaXMsInNlbGVjdGFibGUtaXRlbSIse2VsZW1lbnQ6dGhpcywkZWxlbWVudDppLGxlZnQ6bi5sZWZ0LHRvcDpuLnRvcCxyaWdodDpuLmxlZnQraS5vdXRlcldpZHRoKCksYm90dG9tOm4udG9wK2kub3V0ZXJIZWlnaHQoKSxzdGFydHNlbGVjdGVkOiExLHNlbGVjdGVkOmkuaGFzQ2xhc3MoInVpLXNlbGVjdGVkIiksc2VsZWN0aW5nOmkuaGFzQ2xhc3MoInVpLXNlbGVjdGluZyIpLHVuc2VsZWN0aW5nOmkuaGFzQ2xhc3MoInVpLXVuc2VsZWN0aW5nIil9KX0pfSx0aGlzLnJlZnJlc2goKSx0aGlzLl9tb3VzZUluaXQoKSx0aGlzLmhlbHBlcj10KCI8ZGl2PiIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaGVscGVyLCJ1aS1zZWxlY3RhYmxlLWhlbHBlciIpfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuc2VsZWN0ZWVzLnJlbW92ZURhdGEoInNlbGVjdGFibGUtaXRlbSIpLHRoaXMuX21vdXNlRGVzdHJveSgpfSxfbW91c2VTdGFydDpmdW5jdGlvbihlKXt2YXIgaT10aGlzLHM9dGhpcy5vcHRpb25zO3RoaXMub3Bvcz1bZS5wYWdlWCxlLnBhZ2VZXSx0aGlzLmVsZW1lbnRQb3M9dCh0aGlzLmVsZW1lbnRbMF0pLm9mZnNldCgpLHRoaXMub3B0aW9ucy5kaXNhYmxlZHx8KHRoaXMuc2VsZWN0ZWVzPXQocy5maWx0ZXIsdGhpcy5lbGVtZW50WzBdKSx0aGlzLl90cmlnZ2VyKCJzdGFydCIsZSksdChzLmFwcGVuZFRvKS5hcHBlbmQodGhpcy5oZWxwZXIpLHRoaXMuaGVscGVyLmNzcyh7bGVmdDplLnBhZ2VYLHRvcDplLnBhZ2VZLHdpZHRoOjAsaGVpZ2h0OjB9KSxzLmF1dG9SZWZyZXNoJiZ0aGlzLnJlZnJlc2goKSx0aGlzLnNlbGVjdGVlcy5maWx0ZXIoIi51aS1zZWxlY3RlZCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgcz10LmRhdGEodGhpcywic2VsZWN0YWJsZS1pdGVtIik7cy5zdGFydHNlbGVjdGVkPSEwLGUubWV0YUtleXx8ZS5jdHJsS2V5fHwoaS5fcmVtb3ZlQ2xhc3Mocy4kZWxlbWVudCwidWktc2VsZWN0ZWQiKSxzLnNlbGVjdGVkPSExLGkuX2FkZENsYXNzKHMuJGVsZW1lbnQsInVpLXVuc2VsZWN0aW5nIikscy51bnNlbGVjdGluZz0hMCxpLl90cmlnZ2VyKCJ1bnNlbGVjdGluZyIsZSx7dW5zZWxlY3Rpbmc6cy5lbGVtZW50fSkpfSksdChlLnRhcmdldCkucGFyZW50cygpLmFkZEJhY2soKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHMsbj10LmRhdGEodGhpcywic2VsZWN0YWJsZS1pdGVtIik7cmV0dXJuIG4/KHM9IWUubWV0YUtleSYmIWUuY3RybEtleXx8IW4uJGVsZW1lbnQuaGFzQ2xhc3MoInVpLXNlbGVjdGVkIiksaS5fcmVtb3ZlQ2xhc3Mobi4kZWxlbWVudCxzPyJ1aS11bnNlbGVjdGluZyI6InVpLXNlbGVjdGVkIikuX2FkZENsYXNzKG4uJGVsZW1lbnQscz8idWktc2VsZWN0aW5nIjoidWktdW5zZWxlY3RpbmciKSxuLnVuc2VsZWN0aW5nPSFzLG4uc2VsZWN0aW5nPXMsbi5zZWxlY3RlZD1zLHM/aS5fdHJpZ2dlcigic2VsZWN0aW5nIixlLHtzZWxlY3Rpbmc6bi5lbGVtZW50fSk6aS5fdHJpZ2dlcigidW5zZWxlY3RpbmciLGUse3Vuc2VsZWN0aW5nOm4uZWxlbWVudH0pLCExKTp2b2lkIDB9KSl9LF9tb3VzZURyYWc6ZnVuY3Rpb24oZSl7aWYodGhpcy5kcmFnZ2VkPSEwLCF0aGlzLm9wdGlvbnMuZGlzYWJsZWQpe3ZhciBpLHM9dGhpcyxuPXRoaXMub3B0aW9ucyxvPXRoaXMub3Bvc1swXSxhPXRoaXMub3Bvc1sxXSxyPWUucGFnZVgsaD1lLnBhZ2VZO3JldHVybiBvPnImJihpPXIscj1vLG89aSksYT5oJiYoaT1oLGg9YSxhPWkpLHRoaXMuaGVscGVyLmNzcyh7bGVmdDpvLHRvcDphLHdpZHRoOnItbyxoZWlnaHQ6aC1hfSksdGhpcy5zZWxlY3RlZXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQuZGF0YSh0aGlzLCJzZWxlY3RhYmxlLWl0ZW0iKSxsPSExLGM9e307aSYmaS5lbGVtZW50IT09cy5lbGVtZW50WzBdJiYoYy5sZWZ0PWkubGVmdCtzLmVsZW1lbnRQb3MubGVmdCxjLnJpZ2h0PWkucmlnaHQrcy5lbGVtZW50UG9zLmxlZnQsYy50b3A9aS50b3Arcy5lbGVtZW50UG9zLnRvcCxjLmJvdHRvbT1pLmJvdHRvbStzLmVsZW1lbnRQb3MudG9wLCJ0b3VjaCI9PT1uLnRvbGVyYW5jZT9sPSEoYy5sZWZ0PnJ8fG8+Yy5yaWdodHx8Yy50b3A+aHx8YT5jLmJvdHRvbSk6ImZpdCI9PT1uLnRvbGVyYW5jZSYmKGw9Yy5sZWZ0Pm8mJnI+Yy5yaWdodCYmYy50b3A+YSYmaD5jLmJvdHRvbSksbD8oaS5zZWxlY3RlZCYmKHMuX3JlbW92ZUNsYXNzKGkuJGVsZW1lbnQsInVpLXNlbGVjdGVkIiksaS5zZWxlY3RlZD0hMSksaS51bnNlbGVjdGluZyYmKHMuX3JlbW92ZUNsYXNzKGkuJGVsZW1lbnQsInVpLXVuc2VsZWN0aW5nIiksaS51bnNlbGVjdGluZz0hMSksaS5zZWxlY3Rpbmd8fChzLl9hZGRDbGFzcyhpLiRlbGVtZW50LCJ1aS1zZWxlY3RpbmciKSxpLnNlbGVjdGluZz0hMCxzLl90cmlnZ2VyKCJzZWxlY3RpbmciLGUse3NlbGVjdGluZzppLmVsZW1lbnR9KSkpOihpLnNlbGVjdGluZyYmKChlLm1ldGFLZXl8fGUuY3RybEtleSkmJmkuc3RhcnRzZWxlY3RlZD8ocy5fcmVtb3ZlQ2xhc3MoaS4kZWxlbWVudCwidWktc2VsZWN0aW5nIiksaS5zZWxlY3Rpbmc9ITEscy5fYWRkQ2xhc3MoaS4kZWxlbWVudCwidWktc2VsZWN0ZWQiKSxpLnNlbGVjdGVkPSEwKToocy5fcmVtb3ZlQ2xhc3MoaS4kZWxlbWVudCwidWktc2VsZWN0aW5nIiksaS5zZWxlY3Rpbmc9ITEsaS5zdGFydHNlbGVjdGVkJiYocy5fYWRkQ2xhc3MoaS4kZWxlbWVudCwidWktdW5zZWxlY3RpbmciKSxpLnVuc2VsZWN0aW5nPSEwKSxzLl90cmlnZ2VyKCJ1bnNlbGVjdGluZyIsZSx7dW5zZWxlY3Rpbmc6aS5lbGVtZW50fSkpKSxpLnNlbGVjdGVkJiYoZS5tZXRhS2V5fHxlLmN0cmxLZXl8fGkuc3RhcnRzZWxlY3RlZHx8KHMuX3JlbW92ZUNsYXNzKGkuJGVsZW1lbnQsInVpLXNlbGVjdGVkIiksaS5zZWxlY3RlZD0hMSxzLl9hZGRDbGFzcyhpLiRlbGVtZW50LCJ1aS11bnNlbGVjdGluZyIpLGkudW5zZWxlY3Rpbmc9ITAscy5fdHJpZ2dlcigidW5zZWxlY3RpbmciLGUse3Vuc2VsZWN0aW5nOmkuZWxlbWVudH0pKSkpKX0pLCExfX0sX21vdXNlU3RvcDpmdW5jdGlvbihlKXt2YXIgaT10aGlzO3JldHVybiB0aGlzLmRyYWdnZWQ9ITEsdCgiLnVpLXVuc2VsZWN0aW5nIix0aGlzLmVsZW1lbnRbMF0pLmVhY2goZnVuY3Rpb24oKXt2YXIgcz10LmRhdGEodGhpcywic2VsZWN0YWJsZS1pdGVtIik7aS5fcmVtb3ZlQ2xhc3Mocy4kZWxlbWVudCwidWktdW5zZWxlY3RpbmciKSxzLnVuc2VsZWN0aW5nPSExLHMuc3RhcnRzZWxlY3RlZD0hMSxpLl90cmlnZ2VyKCJ1bnNlbGVjdGVkIixlLHt1bnNlbGVjdGVkOnMuZWxlbWVudH0pfSksdCgiLnVpLXNlbGVjdGluZyIsdGhpcy5lbGVtZW50WzBdKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHM9dC5kYXRhKHRoaXMsInNlbGVjdGFibGUtaXRlbSIpO2kuX3JlbW92ZUNsYXNzKHMuJGVsZW1lbnQsInVpLXNlbGVjdGluZyIpLl9hZGRDbGFzcyhzLiRlbGVtZW50LCJ1aS1zZWxlY3RlZCIpLHMuc2VsZWN0aW5nPSExLHMuc2VsZWN0ZWQ9ITAscy5zdGFydHNlbGVjdGVkPSEwLGkuX3RyaWdnZXIoInNlbGVjdGVkIixlLHtzZWxlY3RlZDpzLmVsZW1lbnR9KX0pLHRoaXMuX3RyaWdnZXIoInN0b3AiLGUpLHRoaXMuaGVscGVyLnJlbW92ZSgpLCExfX0pLHQud2lkZ2V0KCJ1aS5zZWxlY3RtZW51IixbdC51aS5mb3JtUmVzZXRNaXhpbix7dmVyc2lvbjoiMS4xMi4xIixkZWZhdWx0RWxlbWVudDoiPHNlbGVjdD4iLG9wdGlvbnM6e2FwcGVuZFRvOm51bGwsY2xhc3Nlczp7InVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW4iOiJ1aS1jb3JuZXItdG9wIiwidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkIjoidWktY29ybmVyLWFsbCJ9LGRpc2FibGVkOm51bGwsaWNvbnM6e2J1dHRvbjoidWktaWNvbi10cmlhbmdsZS0xLXMifSxwb3NpdGlvbjp7bXk6ImxlZnQgdG9wIixhdDoibGVmdCBib3R0b20iLGNvbGxpc2lvbjoibm9uZSJ9LHdpZHRoOiExLGNoYW5nZTpudWxsLGNsb3NlOm51bGwsZm9jdXM6bnVsbCxvcGVuOm51bGwsc2VsZWN0Om51bGx9LF9jcmVhdGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmVsZW1lbnQudW5pcXVlSWQoKS5hdHRyKCJpZCIpO3RoaXMuaWRzPXtlbGVtZW50OmUsYnV0dG9uOmUrIi1idXR0b24iLG1lbnU6ZSsiLW1lbnUifSx0aGlzLl9kcmF3QnV0dG9uKCksdGhpcy5fZHJhd01lbnUoKSx0aGlzLl9iaW5kRm9ybVJlc2V0SGFuZGxlcigpLHRoaXMuX3JlbmRlcmVkPSExLHRoaXMubWVudUl0ZW1zPXQoKX0sX2RyYXdCdXR0b246ZnVuY3Rpb24oKXt2YXIgZSxpPXRoaXMscz10aGlzLl9wYXJzZU9wdGlvbih0aGlzLmVsZW1lbnQuZmluZCgib3B0aW9uOnNlbGVjdGVkIiksdGhpcy5lbGVtZW50WzBdLnNlbGVjdGVkSW5kZXgpO3RoaXMubGFiZWxzPXRoaXMuZWxlbWVudC5sYWJlbHMoKS5hdHRyKCJmb3IiLHRoaXMuaWRzLmJ1dHRvbiksdGhpcy5fb24odGhpcy5sYWJlbHMse2NsaWNrOmZ1bmN0aW9uKHQpe3RoaXMuYnV0dG9uLmZvY3VzKCksdC5wcmV2ZW50RGVmYXVsdCgpfX0pLHRoaXMuZWxlbWVudC5oaWRlKCksdGhpcy5idXR0b249dCgiPHNwYW4+Iix7dGFiaW5kZXg6dGhpcy5vcHRpb25zLmRpc2FibGVkPy0xOjAsaWQ6dGhpcy5pZHMuYnV0dG9uLHJvbGU6ImNvbWJvYm94IiwiYXJpYS1leHBhbmRlZCI6ImZhbHNlIiwiYXJpYS1hdXRvY29tcGxldGUiOiJsaXN0IiwiYXJpYS1vd25zIjp0aGlzLmlkcy5tZW51LCJhcmlhLWhhc3BvcHVwIjoidHJ1ZSIsdGl0bGU6dGhpcy5lbGVtZW50LmF0dHIoInRpdGxlIil9KS5pbnNlcnRBZnRlcih0aGlzLmVsZW1lbnQpLHRoaXMuX2FkZENsYXNzKHRoaXMuYnV0dG9uLCJ1aS1zZWxlY3RtZW51LWJ1dHRvbiB1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWQiLCJ1aS1idXR0b24gdWktd2lkZ2V0IiksZT10KCI8c3Bhbj4iKS5hcHBlbmRUbyh0aGlzLmJ1dHRvbiksdGhpcy5fYWRkQ2xhc3MoZSwidWktc2VsZWN0bWVudS1pY29uIiwidWktaWNvbiAiK3RoaXMub3B0aW9ucy5pY29ucy5idXR0b24pLHRoaXMuYnV0dG9uSXRlbT10aGlzLl9yZW5kZXJCdXR0b25JdGVtKHMpLmFwcGVuZFRvKHRoaXMuYnV0dG9uKSx0aGlzLm9wdGlvbnMud2lkdGghPT0hMSYmdGhpcy5fcmVzaXplQnV0dG9uKCksdGhpcy5fb24odGhpcy5idXR0b24sdGhpcy5fYnV0dG9uRXZlbnRzKSx0aGlzLmJ1dHRvbi5vbmUoImZvY3VzaW4iLGZ1bmN0aW9uKCl7aS5fcmVuZGVyZWR8fGkuX3JlZnJlc2hNZW51KCl9KX0sX2RyYXdNZW51OmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLm1lbnU9dCgiPHVsPiIseyJhcmlhLWhpZGRlbiI6InRydWUiLCJhcmlhLWxhYmVsbGVkYnkiOnRoaXMuaWRzLmJ1dHRvbixpZDp0aGlzLmlkcy5tZW51fSksdGhpcy5tZW51V3JhcD10KCI8ZGl2PiIpLmFwcGVuZCh0aGlzLm1lbnUpLHRoaXMuX2FkZENsYXNzKHRoaXMubWVudVdyYXAsInVpLXNlbGVjdG1lbnUtbWVudSIsInVpLWZyb250IiksdGhpcy5tZW51V3JhcC5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSx0aGlzLm1lbnVJbnN0YW5jZT10aGlzLm1lbnUubWVudSh7Y2xhc3Nlczp7InVpLW1lbnUiOiJ1aS1jb3JuZXItYm90dG9tIn0scm9sZToibGlzdGJveCIsc2VsZWN0OmZ1bmN0aW9uKHQsaSl7dC5wcmV2ZW50RGVmYXVsdCgpLGUuX3NldFNlbGVjdGlvbigpLGUuX3NlbGVjdChpLml0ZW0uZGF0YSgidWktc2VsZWN0bWVudS1pdGVtIiksdCl9LGZvY3VzOmZ1bmN0aW9uKHQsaSl7dmFyIHM9aS5pdGVtLmRhdGEoInVpLXNlbGVjdG1lbnUtaXRlbSIpO251bGwhPWUuZm9jdXNJbmRleCYmcy5pbmRleCE9PWUuZm9jdXNJbmRleCYmKGUuX3RyaWdnZXIoImZvY3VzIix0LHtpdGVtOnN9KSxlLmlzT3Blbnx8ZS5fc2VsZWN0KHMsdCkpLGUuZm9jdXNJbmRleD1zLmluZGV4LGUuYnV0dG9uLmF0dHIoImFyaWEtYWN0aXZlZGVzY2VuZGFudCIsZS5tZW51SXRlbXMuZXEocy5pbmRleCkuYXR0cigiaWQiKSl9fSkubWVudSgiaW5zdGFuY2UiKSx0aGlzLm1lbnVJbnN0YW5jZS5fb2ZmKHRoaXMubWVudSwibW91c2VsZWF2ZSIpLHRoaXMubWVudUluc3RhbmNlLl9jbG9zZU9uRG9jdW1lbnRDbGljaz1mdW5jdGlvbigpe3JldHVybiExfSx0aGlzLm1lbnVJbnN0YW5jZS5faXNEaXZpZGVyPWZ1bmN0aW9uKCl7cmV0dXJuITF9fSxyZWZyZXNoOmZ1bmN0aW9uKCl7dGhpcy5fcmVmcmVzaE1lbnUoKSx0aGlzLmJ1dHRvbkl0ZW0ucmVwbGFjZVdpdGgodGhpcy5idXR0b25JdGVtPXRoaXMuX3JlbmRlckJ1dHRvbkl0ZW0odGhpcy5fZ2V0U2VsZWN0ZWRJdGVtKCkuZGF0YSgidWktc2VsZWN0bWVudS1pdGVtIil8fHt9KSksbnVsbD09PXRoaXMub3B0aW9ucy53aWR0aCYmdGhpcy5fcmVzaXplQnV0dG9uKCl9LF9yZWZyZXNoTWVudTpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5lbGVtZW50LmZpbmQoIm9wdGlvbiIpO3RoaXMubWVudS5lbXB0eSgpLHRoaXMuX3BhcnNlT3B0aW9ucyhlKSx0aGlzLl9yZW5kZXJNZW51KHRoaXMubWVudSx0aGlzLml0ZW1zKSx0aGlzLm1lbnVJbnN0YW5jZS5yZWZyZXNoKCksdGhpcy5tZW51SXRlbXM9dGhpcy5tZW51LmZpbmQoImxpIikubm90KCIudWktc2VsZWN0bWVudS1vcHRncm91cCIpLmZpbmQoIi51aS1tZW51LWl0ZW0td3JhcHBlciIpLHRoaXMuX3JlbmRlcmVkPSEwLGUubGVuZ3RoJiYodD10aGlzLl9nZXRTZWxlY3RlZEl0ZW0oKSx0aGlzLm1lbnVJbnN0YW5jZS5mb2N1cyhudWxsLHQpLHRoaXMuX3NldEFyaWEodC5kYXRhKCJ1aS1zZWxlY3RtZW51LWl0ZW0iKSksdGhpcy5fc2V0T3B0aW9uKCJkaXNhYmxlZCIsdGhpcy5lbGVtZW50LnByb3AoImRpc2FibGVkIikpKX0sb3BlbjpmdW5jdGlvbih0KXt0aGlzLm9wdGlvbnMuZGlzYWJsZWR8fCh0aGlzLl9yZW5kZXJlZD8odGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5tZW51LmZpbmQoIi51aS1zdGF0ZS1hY3RpdmUiKSxudWxsLCJ1aS1zdGF0ZS1hY3RpdmUiKSx0aGlzLm1lbnVJbnN0YW5jZS5mb2N1cyhudWxsLHRoaXMuX2dldFNlbGVjdGVkSXRlbSgpKSk6dGhpcy5fcmVmcmVzaE1lbnUoKSx0aGlzLm1lbnVJdGVtcy5sZW5ndGgmJih0aGlzLmlzT3Blbj0hMCx0aGlzLl90b2dnbGVBdHRyKCksdGhpcy5fcmVzaXplTWVudSgpLHRoaXMuX3Bvc2l0aW9uKCksdGhpcy5fb24odGhpcy5kb2N1bWVudCx0aGlzLl9kb2N1bWVudENsaWNrKSx0aGlzLl90cmlnZ2VyKCJvcGVuIix0KSkpfSxfcG9zaXRpb246ZnVuY3Rpb24oKXt0aGlzLm1lbnVXcmFwLnBvc2l0aW9uKHQuZXh0ZW5kKHtvZjp0aGlzLmJ1dHRvbn0sdGhpcy5vcHRpb25zLnBvc2l0aW9uKSl9LGNsb3NlOmZ1bmN0aW9uKHQpe3RoaXMuaXNPcGVuJiYodGhpcy5pc09wZW49ITEsdGhpcy5fdG9nZ2xlQXR0cigpLHRoaXMucmFuZ2U9bnVsbCx0aGlzLl9vZmYodGhpcy5kb2N1bWVudCksdGhpcy5fdHJpZ2dlcigiY2xvc2UiLHQpKX0sd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnV0dG9ufSxtZW51V2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVudX0sX3JlbmRlckJ1dHRvbkl0ZW06ZnVuY3Rpb24oZSl7dmFyIGk9dCgiPHNwYW4+Iik7cmV0dXJuIHRoaXMuX3NldFRleHQoaSxlLmxhYmVsKSx0aGlzLl9hZGRDbGFzcyhpLCJ1aS1zZWxlY3RtZW51LXRleHQiKSxpfSxfcmVuZGVyTWVudTpmdW5jdGlvbihlLGkpe3ZhciBzPXRoaXMsbj0iIjt0LmVhY2goaSxmdW5jdGlvbihpLG8pe3ZhciBhO28ub3B0Z3JvdXAhPT1uJiYoYT10KCI8bGk+Iix7dGV4dDpvLm9wdGdyb3VwfSkscy5fYWRkQ2xhc3MoYSwidWktc2VsZWN0bWVudS1vcHRncm91cCIsInVpLW1lbnUtZGl2aWRlciIrKG8uZWxlbWVudC5wYXJlbnQoIm9wdGdyb3VwIikucHJvcCgiZGlzYWJsZWQiKT8iIHVpLXN0YXRlLWRpc2FibGVkIjoiIikpLGEuYXBwZW5kVG8oZSksbj1vLm9wdGdyb3VwKSxzLl9yZW5kZXJJdGVtRGF0YShlLG8pfSl9LF9yZW5kZXJJdGVtRGF0YTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9yZW5kZXJJdGVtKHQsZSkuZGF0YSgidWktc2VsZWN0bWVudS1pdGVtIixlKX0sX3JlbmRlckl0ZW06ZnVuY3Rpb24oZSxpKXt2YXIgcz10KCI8bGk+Iiksbj10KCI8ZGl2PiIse3RpdGxlOmkuZWxlbWVudC5hdHRyKCJ0aXRsZSIpfSk7cmV0dXJuIGkuZGlzYWJsZWQmJnRoaXMuX2FkZENsYXNzKHMsbnVsbCwidWktc3RhdGUtZGlzYWJsZWQiKSx0aGlzLl9zZXRUZXh0KG4saS5sYWJlbCkscy5hcHBlbmQobikuYXBwZW5kVG8oZSl9LF9zZXRUZXh0OmZ1bmN0aW9uKHQsZSl7ZT90LnRleHQoZSk6dC5odG1sKCImIzE2MDsiKX0sX21vdmU6ZnVuY3Rpb24odCxlKXt2YXIgaSxzLG49Ii51aS1tZW51LWl0ZW0iO3RoaXMuaXNPcGVuP2k9dGhpcy5tZW51SXRlbXMuZXEodGhpcy5mb2N1c0luZGV4KS5wYXJlbnQoImxpIik6KGk9dGhpcy5tZW51SXRlbXMuZXEodGhpcy5lbGVtZW50WzBdLnNlbGVjdGVkSW5kZXgpLnBhcmVudCgibGkiKSxuKz0iOm5vdCgudWktc3RhdGUtZGlzYWJsZWQpIikscz0iZmlyc3QiPT09dHx8Imxhc3QiPT09dD9pWyJmaXJzdCI9PT10PyJwcmV2QWxsIjoibmV4dEFsbCJdKG4pLmVxKC0xKTppW3QrIkFsbCJdKG4pLmVxKDApLHMubGVuZ3RoJiZ0aGlzLm1lbnVJbnN0YW5jZS5mb2N1cyhlLHMpfSxfZ2V0U2VsZWN0ZWRJdGVtOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVudUl0ZW1zLmVxKHRoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4KS5wYXJlbnQoImxpIil9LF90b2dnbGU6ZnVuY3Rpb24odCl7dGhpc1t0aGlzLmlzT3Blbj8iY2xvc2UiOiJvcGVuIl0odCl9LF9zZXRTZWxlY3Rpb246ZnVuY3Rpb24oKXt2YXIgdDt0aGlzLnJhbmdlJiYod2luZG93LmdldFNlbGVjdGlvbj8odD13aW5kb3cuZ2V0U2VsZWN0aW9uKCksdC5yZW1vdmVBbGxSYW5nZXMoKSx0LmFkZFJhbmdlKHRoaXMucmFuZ2UpKTp0aGlzLnJhbmdlLnNlbGVjdCgpLHRoaXMuYnV0dG9uLmZvY3VzKCkpfSxfZG9jdW1lbnRDbGljazp7bW91c2Vkb3duOmZ1bmN0aW9uKGUpe3RoaXMuaXNPcGVuJiYodChlLnRhcmdldCkuY2xvc2VzdCgiLnVpLXNlbGVjdG1lbnUtbWVudSwgIyIrdC51aS5lc2NhcGVTZWxlY3Rvcih0aGlzLmlkcy5idXR0b24pKS5sZW5ndGh8fHRoaXMuY2xvc2UoZSkpfX0sX2J1dHRvbkV2ZW50czp7bW91c2Vkb3duOmZ1bmN0aW9uKCl7dmFyIHQ7d2luZG93LmdldFNlbGVjdGlvbj8odD13aW5kb3cuZ2V0U2VsZWN0aW9uKCksdC5yYW5nZUNvdW50JiYodGhpcy5yYW5nZT10LmdldFJhbmdlQXQoMCkpKTp0aGlzLnJhbmdlPWRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpfSxjbGljazpmdW5jdGlvbih0KXt0aGlzLl9zZXRTZWxlY3Rpb24oKSx0aGlzLl90b2dnbGUodCl9LGtleWRvd246ZnVuY3Rpb24oZSl7dmFyIGk9ITA7c3dpdGNoKGUua2V5Q29kZSl7Y2FzZSB0LnVpLmtleUNvZGUuVEFCOmNhc2UgdC51aS5rZXlDb2RlLkVTQ0FQRTp0aGlzLmNsb3NlKGUpLGk9ITE7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRU5URVI6dGhpcy5pc09wZW4mJnRoaXMuX3NlbGVjdEZvY3VzZWRJdGVtKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlVQOmUuYWx0S2V5P3RoaXMuX3RvZ2dsZShlKTp0aGlzLl9tb3ZlKCJwcmV2IixlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5ET1dOOmUuYWx0S2V5P3RoaXMuX3RvZ2dsZShlKTp0aGlzLl9tb3ZlKCJuZXh0IixlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5TUEFDRTp0aGlzLmlzT3Blbj90aGlzLl9zZWxlY3RGb2N1c2VkSXRlbShlKTp0aGlzLl90b2dnbGUoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuTEVGVDp0aGlzLl9tb3ZlKCJwcmV2IixlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5SSUdIVDp0aGlzLl9tb3ZlKCJuZXh0IixlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5IT01FOmNhc2UgdC51aS5rZXlDb2RlLlBBR0VfVVA6dGhpcy5fbW92ZSgiZmlyc3QiLGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkVORDpjYXNlIHQudWkua2V5Q29kZS5QQUdFX0RPV046dGhpcy5fbW92ZSgibGFzdCIsZSk7YnJlYWs7ZGVmYXVsdDp0aGlzLm1lbnUudHJpZ2dlcihlKSxpPSExfWkmJmUucHJldmVudERlZmF1bHQoKX19LF9zZWxlY3RGb2N1c2VkSXRlbTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm1lbnVJdGVtcy5lcSh0aGlzLmZvY3VzSW5kZXgpLnBhcmVudCgibGkiKTtlLmhhc0NsYXNzKCJ1aS1zdGF0ZS1kaXNhYmxlZCIpfHx0aGlzLl9zZWxlY3QoZS5kYXRhKCJ1aS1zZWxlY3RtZW51LWl0ZW0iKSx0KX0sX3NlbGVjdDpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4O3RoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4PXQuaW5kZXgsdGhpcy5idXR0b25JdGVtLnJlcGxhY2VXaXRoKHRoaXMuYnV0dG9uSXRlbT10aGlzLl9yZW5kZXJCdXR0b25JdGVtKHQpKSx0aGlzLl9zZXRBcmlhKHQpLHRoaXMuX3RyaWdnZXIoInNlbGVjdCIsZSx7aXRlbTp0fSksdC5pbmRleCE9PWkmJnRoaXMuX3RyaWdnZXIoImNoYW5nZSIsZSx7aXRlbTp0fSksdGhpcy5jbG9zZShlKX0sX3NldEFyaWE6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5tZW51SXRlbXMuZXEodC5pbmRleCkuYXR0cigiaWQiKTt0aGlzLmJ1dHRvbi5hdHRyKHsiYXJpYS1sYWJlbGxlZGJ5IjplLCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnQiOmV9KSx0aGlzLm1lbnUuYXR0cigiYXJpYS1hY3RpdmVkZXNjZW5kYW50IixlKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe2lmKCJpY29ucyI9PT10KXt2YXIgaT10aGlzLmJ1dHRvbi5maW5kKCJzcGFuLnVpLWljb24iKTt0aGlzLl9yZW1vdmVDbGFzcyhpLG51bGwsdGhpcy5vcHRpb25zLmljb25zLmJ1dHRvbikuX2FkZENsYXNzKGksbnVsbCxlLmJ1dHRvbil9dGhpcy5fc3VwZXIodCxlKSwiYXBwZW5kVG8iPT09dCYmdGhpcy5tZW51V3JhcC5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSwid2lkdGgiPT09dCYmdGhpcy5fcmVzaXplQnV0dG9uKCl9LF9zZXRPcHRpb25EaXNhYmxlZDpmdW5jdGlvbih0KXt0aGlzLl9zdXBlcih0KSx0aGlzLm1lbnVJbnN0YW5jZS5vcHRpb24oImRpc2FibGVkIix0KSx0aGlzLmJ1dHRvbi5hdHRyKCJhcmlhLWRpc2FibGVkIix0KSx0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmJ1dHRvbixudWxsLCJ1aS1zdGF0ZS1kaXNhYmxlZCIsdCksdGhpcy5lbGVtZW50LnByb3AoImRpc2FibGVkIix0KSx0Pyh0aGlzLmJ1dHRvbi5hdHRyKCJ0YWJpbmRleCIsLTEpLHRoaXMuY2xvc2UoKSk6dGhpcy5idXR0b24uYXR0cigidGFiaW5kZXgiLDApfSxfYXBwZW5kVG86ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnMuYXBwZW5kVG87cmV0dXJuIGUmJihlPWUuanF1ZXJ5fHxlLm5vZGVUeXBlP3QoZSk6dGhpcy5kb2N1bWVudC5maW5kKGUpLmVxKDApKSxlJiZlWzBdfHwoZT10aGlzLmVsZW1lbnQuY2xvc2VzdCgiLnVpLWZyb250LCBkaWFsb2ciKSksZS5sZW5ndGh8fChlPXRoaXMuZG9jdW1lbnRbMF0uYm9keSksZX0sX3RvZ2dsZUF0dHI6ZnVuY3Rpb24oKXt0aGlzLmJ1dHRvbi5hdHRyKCJhcmlhLWV4cGFuZGVkIix0aGlzLmlzT3BlbiksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5idXR0b24sInVpLXNlbGVjdG1lbnUtYnV0dG9uLSIrKHRoaXMuaXNPcGVuPyJjbG9zZWQiOiJvcGVuIikpLl9hZGRDbGFzcyh0aGlzLmJ1dHRvbiwidWktc2VsZWN0bWVudS1idXR0b24tIisodGhpcy5pc09wZW4/Im9wZW4iOiJjbG9zZWQiKSkuX3RvZ2dsZUNsYXNzKHRoaXMubWVudVdyYXAsInVpLXNlbGVjdG1lbnUtb3BlbiIsbnVsbCx0aGlzLmlzT3BlbiksdGhpcy5tZW51LmF0dHIoImFyaWEtaGlkZGVuIiwhdGhpcy5pc09wZW4pfSxfcmVzaXplQnV0dG9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLndpZHRoO3JldHVybiB0PT09ITE/KHRoaXMuYnV0dG9uLmNzcygid2lkdGgiLCIiKSx2b2lkIDApOihudWxsPT09dCYmKHQ9dGhpcy5lbGVtZW50LnNob3coKS5vdXRlcldpZHRoKCksdGhpcy5lbGVtZW50LmhpZGUoKSksdGhpcy5idXR0b24ub3V0ZXJXaWR0aCh0KSx2b2lkIDApfSxfcmVzaXplTWVudTpmdW5jdGlvbigpe3RoaXMubWVudS5vdXRlcldpZHRoKE1hdGgubWF4KHRoaXMuYnV0dG9uLm91dGVyV2lkdGgoKSx0aGlzLm1lbnUud2lkdGgoIiIpLm91dGVyV2lkdGgoKSsxKSl9LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fc3VwZXIoKTtyZXR1cm4gdC5kaXNhYmxlZD10aGlzLmVsZW1lbnQucHJvcCgiZGlzYWJsZWQiKSx0fSxfcGFyc2VPcHRpb25zOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMscz1bXTtlLmVhY2goZnVuY3Rpb24oZSxuKXtzLnB1c2goaS5fcGFyc2VPcHRpb24odChuKSxlKSl9KSx0aGlzLml0ZW1zPXN9LF9wYXJzZU9wdGlvbjpmdW5jdGlvbih0LGUpe3ZhciBpPXQucGFyZW50KCJvcHRncm91cCIpO3JldHVybntlbGVtZW50OnQsaW5kZXg6ZSx2YWx1ZTp0LnZhbCgpLGxhYmVsOnQudGV4dCgpLG9wdGdyb3VwOmkuYXR0cigibGFiZWwiKXx8IiIsZGlzYWJsZWQ6aS5wcm9wKCJkaXNhYmxlZCIpfHx0LnByb3AoImRpc2FibGVkIil9fSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX3VuYmluZEZvcm1SZXNldEhhbmRsZXIoKSx0aGlzLm1lbnVXcmFwLnJlbW92ZSgpLHRoaXMuYnV0dG9uLnJlbW92ZSgpLHRoaXMuZWxlbWVudC5zaG93KCksdGhpcy5lbGVtZW50LnJlbW92ZVVuaXF1ZUlkKCksdGhpcy5sYWJlbHMuYXR0cigiZm9yIix0aGlzLmlkcy5lbGVtZW50KX19XSksdC53aWRnZXQoInVpLnNsaWRlciIsdC51aS5tb3VzZSx7dmVyc2lvbjoiMS4xMi4xIix3aWRnZXRFdmVudFByZWZpeDoic2xpZGUiLG9wdGlvbnM6e2FuaW1hdGU6ITEsY2xhc3Nlczp7InVpLXNsaWRlciI6InVpLWNvcm5lci1hbGwiLCJ1aS1zbGlkZXItaGFuZGxlIjoidWktY29ybmVyLWFsbCIsInVpLXNsaWRlci1yYW5nZSI6InVpLWNvcm5lci1hbGwgdWktd2lkZ2V0LWhlYWRlciJ9LGRpc3RhbmNlOjAsbWF4OjEwMCxtaW46MCxvcmllbnRhdGlvbjoiaG9yaXpvbnRhbCIscmFuZ2U6ITEsc3RlcDoxLHZhbHVlOjAsdmFsdWVzOm51bGwsY2hhbmdlOm51bGwsc2xpZGU6bnVsbCxzdGFydDpudWxsLHN0b3A6bnVsbH0sbnVtUGFnZXM6NSxfY3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5fa2V5U2xpZGluZz0hMSx0aGlzLl9tb3VzZVNsaWRpbmc9ITEsdGhpcy5fYW5pbWF0ZU9mZj0hMCx0aGlzLl9oYW5kbGVJbmRleD1udWxsLHRoaXMuX2RldGVjdE9yaWVudGF0aW9uKCksdGhpcy5fbW91c2VJbml0KCksdGhpcy5fY2FsY3VsYXRlTmV3TWF4KCksdGhpcy5fYWRkQ2xhc3MoInVpLXNsaWRlciB1aS1zbGlkZXItIit0aGlzLm9yaWVudGF0aW9uLCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQiKSx0aGlzLl9yZWZyZXNoKCksdGhpcy5fYW5pbWF0ZU9mZj0hMQp9LF9yZWZyZXNoOmZ1bmN0aW9uKCl7dGhpcy5fY3JlYXRlUmFuZ2UoKSx0aGlzLl9jcmVhdGVIYW5kbGVzKCksdGhpcy5fc2V0dXBFdmVudHMoKSx0aGlzLl9yZWZyZXNoVmFsdWUoKX0sX2NyZWF0ZUhhbmRsZXM6ZnVuY3Rpb24oKXt2YXIgZSxpLHM9dGhpcy5vcHRpb25zLG49dGhpcy5lbGVtZW50LmZpbmQoIi51aS1zbGlkZXItaGFuZGxlIiksbz0iPHNwYW4gdGFiaW5kZXg9JzAnPjwvc3Bhbj4iLGE9W107Zm9yKGk9cy52YWx1ZXMmJnMudmFsdWVzLmxlbmd0aHx8MSxuLmxlbmd0aD5pJiYobi5zbGljZShpKS5yZW1vdmUoKSxuPW4uc2xpY2UoMCxpKSksZT1uLmxlbmd0aDtpPmU7ZSsrKWEucHVzaChvKTt0aGlzLmhhbmRsZXM9bi5hZGQodChhLmpvaW4oIiIpKS5hcHBlbmRUbyh0aGlzLmVsZW1lbnQpKSx0aGlzLl9hZGRDbGFzcyh0aGlzLmhhbmRsZXMsInVpLXNsaWRlci1oYW5kbGUiLCJ1aS1zdGF0ZS1kZWZhdWx0IiksdGhpcy5oYW5kbGU9dGhpcy5oYW5kbGVzLmVxKDApLHRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uKGUpe3QodGhpcykuZGF0YSgidWktc2xpZGVyLWhhbmRsZS1pbmRleCIsZSkuYXR0cigidGFiSW5kZXgiLDApfSl9LF9jcmVhdGVSYW5nZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9ucztlLnJhbmdlPyhlLnJhbmdlPT09ITAmJihlLnZhbHVlcz9lLnZhbHVlcy5sZW5ndGgmJjIhPT1lLnZhbHVlcy5sZW5ndGg/ZS52YWx1ZXM9W2UudmFsdWVzWzBdLGUudmFsdWVzWzBdXTp0LmlzQXJyYXkoZS52YWx1ZXMpJiYoZS52YWx1ZXM9ZS52YWx1ZXMuc2xpY2UoMCkpOmUudmFsdWVzPVt0aGlzLl92YWx1ZU1pbigpLHRoaXMuX3ZhbHVlTWluKCldKSx0aGlzLnJhbmdlJiZ0aGlzLnJhbmdlLmxlbmd0aD8odGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5yYW5nZSwidWktc2xpZGVyLXJhbmdlLW1pbiB1aS1zbGlkZXItcmFuZ2UtbWF4IiksdGhpcy5yYW5nZS5jc3Moe2xlZnQ6IiIsYm90dG9tOiIifSkpOih0aGlzLnJhbmdlPXQoIjxkaXY+IikuYXBwZW5kVG8odGhpcy5lbGVtZW50KSx0aGlzLl9hZGRDbGFzcyh0aGlzLnJhbmdlLCJ1aS1zbGlkZXItcmFuZ2UiKSksKCJtaW4iPT09ZS5yYW5nZXx8Im1heCI9PT1lLnJhbmdlKSYmdGhpcy5fYWRkQ2xhc3ModGhpcy5yYW5nZSwidWktc2xpZGVyLXJhbmdlLSIrZS5yYW5nZSkpOih0aGlzLnJhbmdlJiZ0aGlzLnJhbmdlLnJlbW92ZSgpLHRoaXMucmFuZ2U9bnVsbCl9LF9zZXR1cEV2ZW50czpmdW5jdGlvbigpe3RoaXMuX29mZih0aGlzLmhhbmRsZXMpLHRoaXMuX29uKHRoaXMuaGFuZGxlcyx0aGlzLl9oYW5kbGVFdmVudHMpLHRoaXMuX2hvdmVyYWJsZSh0aGlzLmhhbmRsZXMpLHRoaXMuX2ZvY3VzYWJsZSh0aGlzLmhhbmRsZXMpfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuaGFuZGxlcy5yZW1vdmUoKSx0aGlzLnJhbmdlJiZ0aGlzLnJhbmdlLnJlbW92ZSgpLHRoaXMuX21vdXNlRGVzdHJveSgpfSxfbW91c2VDYXB0dXJlOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbixvLGEscixoLGwsYz10aGlzLHU9dGhpcy5vcHRpb25zO3JldHVybiB1LmRpc2FibGVkPyExOih0aGlzLmVsZW1lbnRTaXplPXt3aWR0aDp0aGlzLmVsZW1lbnQub3V0ZXJXaWR0aCgpLGhlaWdodDp0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKX0sdGhpcy5lbGVtZW50T2Zmc2V0PXRoaXMuZWxlbWVudC5vZmZzZXQoKSxpPXt4OmUucGFnZVgseTplLnBhZ2VZfSxzPXRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZShpKSxuPXRoaXMuX3ZhbHVlTWF4KCktdGhpcy5fdmFsdWVNaW4oKSsxLHRoaXMuaGFuZGxlcy5lYWNoKGZ1bmN0aW9uKGUpe3ZhciBpPU1hdGguYWJzKHMtYy52YWx1ZXMoZSkpOyhuPml8fG49PT1pJiYoZT09PWMuX2xhc3RDaGFuZ2VkVmFsdWV8fGMudmFsdWVzKGUpPT09dS5taW4pKSYmKG49aSxvPXQodGhpcyksYT1lKX0pLHI9dGhpcy5fc3RhcnQoZSxhKSxyPT09ITE/ITE6KHRoaXMuX21vdXNlU2xpZGluZz0hMCx0aGlzLl9oYW5kbGVJbmRleD1hLHRoaXMuX2FkZENsYXNzKG8sbnVsbCwidWktc3RhdGUtYWN0aXZlIiksby50cmlnZ2VyKCJmb2N1cyIpLGg9by5vZmZzZXQoKSxsPSF0KGUudGFyZ2V0KS5wYXJlbnRzKCkuYWRkQmFjaygpLmlzKCIudWktc2xpZGVyLWhhbmRsZSIpLHRoaXMuX2NsaWNrT2Zmc2V0PWw/e2xlZnQ6MCx0b3A6MH06e2xlZnQ6ZS5wYWdlWC1oLmxlZnQtby53aWR0aCgpLzIsdG9wOmUucGFnZVktaC50b3Atby5oZWlnaHQoKS8yLShwYXJzZUludChvLmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCl8fDApLShwYXJzZUludChvLmNzcygiYm9yZGVyQm90dG9tV2lkdGgiKSwxMCl8fDApKyhwYXJzZUludChvLmNzcygibWFyZ2luVG9wIiksMTApfHwwKX0sdGhpcy5oYW5kbGVzLmhhc0NsYXNzKCJ1aS1zdGF0ZS1ob3ZlciIpfHx0aGlzLl9zbGlkZShlLGEscyksdGhpcy5fYW5pbWF0ZU9mZj0hMCwhMCkpfSxfbW91c2VTdGFydDpmdW5jdGlvbigpe3JldHVybiEwfSxfbW91c2VEcmFnOmZ1bmN0aW9uKHQpe3ZhciBlPXt4OnQucGFnZVgseTp0LnBhZ2VZfSxpPXRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZShlKTtyZXR1cm4gdGhpcy5fc2xpZGUodCx0aGlzLl9oYW5kbGVJbmRleCxpKSwhMX0sX21vdXNlU3RvcDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5oYW5kbGVzLG51bGwsInVpLXN0YXRlLWFjdGl2ZSIpLHRoaXMuX21vdXNlU2xpZGluZz0hMSx0aGlzLl9zdG9wKHQsdGhpcy5faGFuZGxlSW5kZXgpLHRoaXMuX2NoYW5nZSh0LHRoaXMuX2hhbmRsZUluZGV4KSx0aGlzLl9oYW5kbGVJbmRleD1udWxsLHRoaXMuX2NsaWNrT2Zmc2V0PW51bGwsdGhpcy5fYW5pbWF0ZU9mZj0hMSwhMX0sX2RldGVjdE9yaWVudGF0aW9uOmZ1bmN0aW9uKCl7dGhpcy5vcmllbnRhdGlvbj0idmVydGljYWwiPT09dGhpcy5vcHRpb25zLm9yaWVudGF0aW9uPyJ2ZXJ0aWNhbCI6Imhvcml6b250YWwifSxfbm9ybVZhbHVlRnJvbU1vdXNlOmZ1bmN0aW9uKHQpe3ZhciBlLGkscyxuLG87cmV0dXJuImhvcml6b250YWwiPT09dGhpcy5vcmllbnRhdGlvbj8oZT10aGlzLmVsZW1lbnRTaXplLndpZHRoLGk9dC54LXRoaXMuZWxlbWVudE9mZnNldC5sZWZ0LSh0aGlzLl9jbGlja09mZnNldD90aGlzLl9jbGlja09mZnNldC5sZWZ0OjApKTooZT10aGlzLmVsZW1lbnRTaXplLmhlaWdodCxpPXQueS10aGlzLmVsZW1lbnRPZmZzZXQudG9wLSh0aGlzLl9jbGlja09mZnNldD90aGlzLl9jbGlja09mZnNldC50b3A6MCkpLHM9aS9lLHM+MSYmKHM9MSksMD5zJiYocz0wKSwidmVydGljYWwiPT09dGhpcy5vcmllbnRhdGlvbiYmKHM9MS1zKSxuPXRoaXMuX3ZhbHVlTWF4KCktdGhpcy5fdmFsdWVNaW4oKSxvPXRoaXMuX3ZhbHVlTWluKCkrcypuLHRoaXMuX3RyaW1BbGlnblZhbHVlKG8pfSxfdWlIYXNoOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcz17aGFuZGxlOnRoaXMuaGFuZGxlc1t0XSxoYW5kbGVJbmRleDp0LHZhbHVlOnZvaWQgMCE9PWU/ZTp0aGlzLnZhbHVlKCl9O3JldHVybiB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpJiYocy52YWx1ZT12b2lkIDAhPT1lP2U6dGhpcy52YWx1ZXModCkscy52YWx1ZXM9aXx8dGhpcy52YWx1ZXMoKSksc30sX2hhc011bHRpcGxlVmFsdWVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZXMmJnRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RofSxfc3RhcnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fdHJpZ2dlcigic3RhcnQiLHQsdGhpcy5fdWlIYXNoKGUpKX0sX3NsaWRlOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcyxuLG89dGhpcy52YWx1ZSgpLGE9dGhpcy52YWx1ZXMoKTt0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpJiYobj10aGlzLnZhbHVlcyhlPzA6MSksbz10aGlzLnZhbHVlcyhlKSwyPT09dGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGgmJnRoaXMub3B0aW9ucy5yYW5nZT09PSEwJiYoaT0wPT09ZT9NYXRoLm1pbihuLGkpOk1hdGgubWF4KG4saSkpLGFbZV09aSksaSE9PW8mJihzPXRoaXMuX3RyaWdnZXIoInNsaWRlIix0LHRoaXMuX3VpSGFzaChlLGksYSkpLHMhPT0hMSYmKHRoaXMuX2hhc011bHRpcGxlVmFsdWVzKCk/dGhpcy52YWx1ZXMoZSxpKTp0aGlzLnZhbHVlKGkpKSl9LF9zdG9wOmZ1bmN0aW9uKHQsZSl7dGhpcy5fdHJpZ2dlcigic3RvcCIsdCx0aGlzLl91aUhhc2goZSkpfSxfY2hhbmdlOmZ1bmN0aW9uKHQsZSl7dGhpcy5fa2V5U2xpZGluZ3x8dGhpcy5fbW91c2VTbGlkaW5nfHwodGhpcy5fbGFzdENoYW5nZWRWYWx1ZT1lLHRoaXMuX3RyaWdnZXIoImNoYW5nZSIsdCx0aGlzLl91aUhhc2goZSkpKX0sdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHRoaXMub3B0aW9ucy52YWx1ZT10aGlzLl90cmltQWxpZ25WYWx1ZSh0KSx0aGlzLl9yZWZyZXNoVmFsdWUoKSx0aGlzLl9jaGFuZ2UobnVsbCwwKSx2b2lkIDApOnRoaXMuX3ZhbHVlKCl9LHZhbHVlczpmdW5jdGlvbihlLGkpe3ZhciBzLG4sbztpZihhcmd1bWVudHMubGVuZ3RoPjEpcmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZXNbZV09dGhpcy5fdHJpbUFsaWduVmFsdWUoaSksdGhpcy5fcmVmcmVzaFZhbHVlKCksdGhpcy5fY2hhbmdlKG51bGwsZSksdm9pZCAwO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLl92YWx1ZXMoKTtpZighdC5pc0FycmF5KGFyZ3VtZW50c1swXSkpcmV0dXJuIHRoaXMuX2hhc011bHRpcGxlVmFsdWVzKCk/dGhpcy5fdmFsdWVzKGUpOnRoaXMudmFsdWUoKTtmb3Iocz10aGlzLm9wdGlvbnMudmFsdWVzLG49YXJndW1lbnRzWzBdLG89MDtzLmxlbmd0aD5vO28rPTEpc1tvXT10aGlzLl90cmltQWxpZ25WYWx1ZShuW29dKSx0aGlzLl9jaGFuZ2UobnVsbCxvKTt0aGlzLl9yZWZyZXNoVmFsdWUoKX0sX3NldE9wdGlvbjpmdW5jdGlvbihlLGkpe3ZhciBzLG49MDtzd2l0Y2goInJhbmdlIj09PWUmJnRoaXMub3B0aW9ucy5yYW5nZT09PSEwJiYoIm1pbiI9PT1pPyh0aGlzLm9wdGlvbnMudmFsdWU9dGhpcy5fdmFsdWVzKDApLHRoaXMub3B0aW9ucy52YWx1ZXM9bnVsbCk6Im1heCI9PT1pJiYodGhpcy5vcHRpb25zLnZhbHVlPXRoaXMuX3ZhbHVlcyh0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aC0xKSx0aGlzLm9wdGlvbnMudmFsdWVzPW51bGwpKSx0LmlzQXJyYXkodGhpcy5vcHRpb25zLnZhbHVlcykmJihuPXRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoKSx0aGlzLl9zdXBlcihlLGkpLGUpe2Nhc2Uib3JpZW50YXRpb24iOnRoaXMuX2RldGVjdE9yaWVudGF0aW9uKCksdGhpcy5fcmVtb3ZlQ2xhc3MoInVpLXNsaWRlci1ob3Jpem9udGFsIHVpLXNsaWRlci12ZXJ0aWNhbCIpLl9hZGRDbGFzcygidWktc2xpZGVyLSIrdGhpcy5vcmllbnRhdGlvbiksdGhpcy5fcmVmcmVzaFZhbHVlKCksdGhpcy5vcHRpb25zLnJhbmdlJiZ0aGlzLl9yZWZyZXNoUmFuZ2UoaSksdGhpcy5oYW5kbGVzLmNzcygiaG9yaXpvbnRhbCI9PT1pPyJib3R0b20iOiJsZWZ0IiwiIik7YnJlYWs7Y2FzZSJ2YWx1ZSI6dGhpcy5fYW5pbWF0ZU9mZj0hMCx0aGlzLl9yZWZyZXNoVmFsdWUoKSx0aGlzLl9jaGFuZ2UobnVsbCwwKSx0aGlzLl9hbmltYXRlT2ZmPSExO2JyZWFrO2Nhc2UidmFsdWVzIjpmb3IodGhpcy5fYW5pbWF0ZU9mZj0hMCx0aGlzLl9yZWZyZXNoVmFsdWUoKSxzPW4tMTtzPj0wO3MtLSl0aGlzLl9jaGFuZ2UobnVsbCxzKTt0aGlzLl9hbmltYXRlT2ZmPSExO2JyZWFrO2Nhc2Uic3RlcCI6Y2FzZSJtaW4iOmNhc2UibWF4Ijp0aGlzLl9hbmltYXRlT2ZmPSEwLHRoaXMuX2NhbGN1bGF0ZU5ld01heCgpLHRoaXMuX3JlZnJlc2hWYWx1ZSgpLHRoaXMuX2FuaW1hdGVPZmY9ITE7YnJlYWs7Y2FzZSJyYW5nZSI6dGhpcy5fYW5pbWF0ZU9mZj0hMCx0aGlzLl9yZWZyZXNoKCksdGhpcy5fYW5pbWF0ZU9mZj0hMX19LF9zZXRPcHRpb25EaXNhYmxlZDpmdW5jdGlvbih0KXt0aGlzLl9zdXBlcih0KSx0aGlzLl90b2dnbGVDbGFzcyhudWxsLCJ1aS1zdGF0ZS1kaXNhYmxlZCIsISF0KX0sX3ZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLnZhbHVlO3JldHVybiB0PXRoaXMuX3RyaW1BbGlnblZhbHVlKHQpfSxfdmFsdWVzOmZ1bmN0aW9uKHQpe3ZhciBlLGkscztpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiBlPXRoaXMub3B0aW9ucy52YWx1ZXNbdF0sZT10aGlzLl90cmltQWxpZ25WYWx1ZShlKTtpZih0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpKXtmb3IoaT10aGlzLm9wdGlvbnMudmFsdWVzLnNsaWNlKCkscz0wO2kubGVuZ3RoPnM7cys9MSlpW3NdPXRoaXMuX3RyaW1BbGlnblZhbHVlKGlbc10pO3JldHVybiBpfXJldHVybltdfSxfdHJpbUFsaWduVmFsdWU6ZnVuY3Rpb24odCl7aWYodGhpcy5fdmFsdWVNaW4oKT49dClyZXR1cm4gdGhpcy5fdmFsdWVNaW4oKTtpZih0Pj10aGlzLl92YWx1ZU1heCgpKXJldHVybiB0aGlzLl92YWx1ZU1heCgpO3ZhciBlPXRoaXMub3B0aW9ucy5zdGVwPjA/dGhpcy5vcHRpb25zLnN0ZXA6MSxpPSh0LXRoaXMuX3ZhbHVlTWluKCkpJWUscz10LWk7cmV0dXJuIDIqTWF0aC5hYnMoaSk+PWUmJihzKz1pPjA/ZTotZSkscGFyc2VGbG9hdChzLnRvRml4ZWQoNSkpfSxfY2FsY3VsYXRlTmV3TWF4OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLm1heCxlPXRoaXMuX3ZhbHVlTWluKCksaT10aGlzLm9wdGlvbnMuc3RlcCxzPU1hdGgucm91bmQoKHQtZSkvaSkqaTt0PXMrZSx0PnRoaXMub3B0aW9ucy5tYXgmJih0LT1pKSx0aGlzLm1heD1wYXJzZUZsb2F0KHQudG9GaXhlZCh0aGlzLl9wcmVjaXNpb24oKSkpfSxfcHJlY2lzaW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fcHJlY2lzaW9uT2YodGhpcy5vcHRpb25zLnN0ZXApO3JldHVybiBudWxsIT09dGhpcy5vcHRpb25zLm1pbiYmKHQ9TWF0aC5tYXgodCx0aGlzLl9wcmVjaXNpb25PZih0aGlzLm9wdGlvbnMubWluKSkpLHR9LF9wcmVjaXNpb25PZjpmdW5jdGlvbih0KXt2YXIgZT0iIit0LGk9ZS5pbmRleE9mKCIuIik7cmV0dXJuLTE9PT1pPzA6ZS5sZW5ndGgtaS0xfSxfdmFsdWVNaW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zLm1pbn0sX3ZhbHVlTWF4OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4fSxfcmVmcmVzaFJhbmdlOmZ1bmN0aW9uKHQpeyJ2ZXJ0aWNhbCI9PT10JiZ0aGlzLnJhbmdlLmNzcyh7d2lkdGg6IiIsbGVmdDoiIn0pLCJob3Jpem9udGFsIj09PXQmJnRoaXMucmFuZ2UuY3NzKHtoZWlnaHQ6IiIsYm90dG9tOiIifSl9LF9yZWZyZXNoVmFsdWU6ZnVuY3Rpb24oKXt2YXIgZSxpLHMsbixvLGE9dGhpcy5vcHRpb25zLnJhbmdlLHI9dGhpcy5vcHRpb25zLGg9dGhpcyxsPXRoaXMuX2FuaW1hdGVPZmY/ITE6ci5hbmltYXRlLGM9e307dGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKT90aGlzLmhhbmRsZXMuZWFjaChmdW5jdGlvbihzKXtpPTEwMCooKGgudmFsdWVzKHMpLWguX3ZhbHVlTWluKCkpLyhoLl92YWx1ZU1heCgpLWguX3ZhbHVlTWluKCkpKSxjWyJob3Jpem9udGFsIj09PWgub3JpZW50YXRpb24/ImxlZnQiOiJib3R0b20iXT1pKyIlIix0KHRoaXMpLnN0b3AoMSwxKVtsPyJhbmltYXRlIjoiY3NzIl0oYyxyLmFuaW1hdGUpLGgub3B0aW9ucy5yYW5nZT09PSEwJiYoImhvcml6b250YWwiPT09aC5vcmllbnRhdGlvbj8oMD09PXMmJmgucmFuZ2Uuc3RvcCgxLDEpW2w/ImFuaW1hdGUiOiJjc3MiXSh7bGVmdDppKyIlIn0sci5hbmltYXRlKSwxPT09cyYmaC5yYW5nZVtsPyJhbmltYXRlIjoiY3NzIl0oe3dpZHRoOmktZSsiJSJ9LHtxdWV1ZTohMSxkdXJhdGlvbjpyLmFuaW1hdGV9KSk6KDA9PT1zJiZoLnJhbmdlLnN0b3AoMSwxKVtsPyJhbmltYXRlIjoiY3NzIl0oe2JvdHRvbTppKyIlIn0sci5hbmltYXRlKSwxPT09cyYmaC5yYW5nZVtsPyJhbmltYXRlIjoiY3NzIl0oe2hlaWdodDppLWUrIiUifSx7cXVldWU6ITEsZHVyYXRpb246ci5hbmltYXRlfSkpKSxlPWl9KToocz10aGlzLnZhbHVlKCksbj10aGlzLl92YWx1ZU1pbigpLG89dGhpcy5fdmFsdWVNYXgoKSxpPW8hPT1uPzEwMCooKHMtbikvKG8tbikpOjAsY1siaG9yaXpvbnRhbCI9PT10aGlzLm9yaWVudGF0aW9uPyJsZWZ0IjoiYm90dG9tIl09aSsiJSIsdGhpcy5oYW5kbGUuc3RvcCgxLDEpW2w/ImFuaW1hdGUiOiJjc3MiXShjLHIuYW5pbWF0ZSksIm1pbiI9PT1hJiYiaG9yaXpvbnRhbCI9PT10aGlzLm9yaWVudGF0aW9uJiZ0aGlzLnJhbmdlLnN0b3AoMSwxKVtsPyJhbmltYXRlIjoiY3NzIl0oe3dpZHRoOmkrIiUifSxyLmFuaW1hdGUpLCJtYXgiPT09YSYmImhvcml6b250YWwiPT09dGhpcy5vcmllbnRhdGlvbiYmdGhpcy5yYW5nZS5zdG9wKDEsMSlbbD8iYW5pbWF0ZSI6ImNzcyJdKHt3aWR0aDoxMDAtaSsiJSJ9LHIuYW5pbWF0ZSksIm1pbiI9PT1hJiYidmVydGljYWwiPT09dGhpcy5vcmllbnRhdGlvbiYmdGhpcy5yYW5nZS5zdG9wKDEsMSlbbD8iYW5pbWF0ZSI6ImNzcyJdKHtoZWlnaHQ6aSsiJSJ9LHIuYW5pbWF0ZSksIm1heCI9PT1hJiYidmVydGljYWwiPT09dGhpcy5vcmllbnRhdGlvbiYmdGhpcy5yYW5nZS5zdG9wKDEsMSlbbD8iYW5pbWF0ZSI6ImNzcyJdKHtoZWlnaHQ6MTAwLWkrIiUifSxyLmFuaW1hdGUpKX0sX2hhbmRsZUV2ZW50czp7a2V5ZG93bjpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbyxhPXQoZS50YXJnZXQpLmRhdGEoInVpLXNsaWRlci1oYW5kbGUtaW5kZXgiKTtzd2l0Y2goZS5rZXlDb2RlKXtjYXNlIHQudWkua2V5Q29kZS5IT01FOmNhc2UgdC51aS5rZXlDb2RlLkVORDpjYXNlIHQudWkua2V5Q29kZS5QQUdFX1VQOmNhc2UgdC51aS5rZXlDb2RlLlBBR0VfRE9XTjpjYXNlIHQudWkua2V5Q29kZS5VUDpjYXNlIHQudWkua2V5Q29kZS5SSUdIVDpjYXNlIHQudWkua2V5Q29kZS5ET1dOOmNhc2UgdC51aS5rZXlDb2RlLkxFRlQ6aWYoZS5wcmV2ZW50RGVmYXVsdCgpLCF0aGlzLl9rZXlTbGlkaW5nJiYodGhpcy5fa2V5U2xpZGluZz0hMCx0aGlzLl9hZGRDbGFzcyh0KGUudGFyZ2V0KSxudWxsLCJ1aS1zdGF0ZS1hY3RpdmUiKSxpPXRoaXMuX3N0YXJ0KGUsYSksaT09PSExKSlyZXR1cm59c3dpdGNoKG89dGhpcy5vcHRpb25zLnN0ZXAscz1uPXRoaXMuX2hhc011bHRpcGxlVmFsdWVzKCk/dGhpcy52YWx1ZXMoYSk6dGhpcy52YWx1ZSgpLGUua2V5Q29kZSl7Y2FzZSB0LnVpLmtleUNvZGUuSE9NRTpuPXRoaXMuX3ZhbHVlTWluKCk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRU5EOm49dGhpcy5fdmFsdWVNYXgoKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5QQUdFX1VQOm49dGhpcy5fdHJpbUFsaWduVmFsdWUocysodGhpcy5fdmFsdWVNYXgoKS10aGlzLl92YWx1ZU1pbigpKS90aGlzLm51bVBhZ2VzKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5QQUdFX0RPV046bj10aGlzLl90cmltQWxpZ25WYWx1ZShzLSh0aGlzLl92YWx1ZU1heCgpLXRoaXMuX3ZhbHVlTWluKCkpL3RoaXMubnVtUGFnZXMpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlVQOmNhc2UgdC51aS5rZXlDb2RlLlJJR0hUOmlmKHM9PT10aGlzLl92YWx1ZU1heCgpKXJldHVybjtuPXRoaXMuX3RyaW1BbGlnblZhbHVlKHMrbyk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRE9XTjpjYXNlIHQudWkua2V5Q29kZS5MRUZUOmlmKHM9PT10aGlzLl92YWx1ZU1pbigpKXJldHVybjtuPXRoaXMuX3RyaW1BbGlnblZhbHVlKHMtbyl9dGhpcy5fc2xpZGUoZSxhLG4pfSxrZXl1cDpmdW5jdGlvbihlKXt2YXIgaT10KGUudGFyZ2V0KS5kYXRhKCJ1aS1zbGlkZXItaGFuZGxlLWluZGV4Iik7dGhpcy5fa2V5U2xpZGluZyYmKHRoaXMuX2tleVNsaWRpbmc9ITEsdGhpcy5fc3RvcChlLGkpLHRoaXMuX2NoYW5nZShlLGkpLHRoaXMuX3JlbW92ZUNsYXNzKHQoZS50YXJnZXQpLG51bGwsInVpLXN0YXRlLWFjdGl2ZSIpKX19fSksdC53aWRnZXQoInVpLnNvcnRhYmxlIix0LnVpLm1vdXNlLHt2ZXJzaW9uOiIxLjEyLjEiLHdpZGdldEV2ZW50UHJlZml4OiJzb3J0IixyZWFkeTohMSxvcHRpb25zOnthcHBlbmRUbzoicGFyZW50IixheGlzOiExLGNvbm5lY3RXaXRoOiExLGNvbnRhaW5tZW50OiExLGN1cnNvcjoiYXV0byIsY3Vyc29yQXQ6ITEsZHJvcE9uRW1wdHk6ITAsZm9yY2VQbGFjZWhvbGRlclNpemU6ITEsZm9yY2VIZWxwZXJTaXplOiExLGdyaWQ6ITEsaGFuZGxlOiExLGhlbHBlcjoib3JpZ2luYWwiLGl0ZW1zOiI+ICoiLG9wYWNpdHk6ITEscGxhY2Vob2xkZXI6ITEscmV2ZXJ0OiExLHNjcm9sbDohMCxzY3JvbGxTZW5zaXRpdml0eToyMCxzY3JvbGxTcGVlZDoyMCxzY29wZToiZGVmYXVsdCIsdG9sZXJhbmNlOiJpbnRlcnNlY3QiLHpJbmRleDoxZTMsYWN0aXZhdGU6bnVsbCxiZWZvcmVTdG9wOm51bGwsY2hhbmdlOm51bGwsZGVhY3RpdmF0ZTpudWxsLG91dDpudWxsLG92ZXI6bnVsbCxyZWNlaXZlOm51bGwscmVtb3ZlOm51bGwsc29ydDpudWxsLHN0YXJ0Om51bGwsc3RvcDpudWxsLHVwZGF0ZTpudWxsfSxfaXNPdmVyQXhpczpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQ+PWUmJmUraT50fSxfaXNGbG9hdGluZzpmdW5jdGlvbih0KXtyZXR1cm4vbGVmdHxyaWdodC8udGVzdCh0LmNzcygiZmxvYXQiKSl8fC9pbmxpbmV8dGFibGUtY2VsbC8udGVzdCh0LmNzcygiZGlzcGxheSIpKX0sX2NyZWF0ZTpmdW5jdGlvbigpe3RoaXMuY29udGFpbmVyQ2FjaGU9e30sdGhpcy5fYWRkQ2xhc3MoInVpLXNvcnRhYmxlIiksdGhpcy5yZWZyZXNoKCksdGhpcy5vZmZzZXQ9dGhpcy5lbGVtZW50Lm9mZnNldCgpLHRoaXMuX21vdXNlSW5pdCgpLHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpLHRoaXMucmVhZHk9ITB9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXt0aGlzLl9zdXBlcih0LGUpLCJoYW5kbGUiPT09dCYmdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCl9LF9zZXRIYW5kbGVDbGFzc05hbWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX3JlbW92ZUNsYXNzKHRoaXMuZWxlbWVudC5maW5kKCIudWktc29ydGFibGUtaGFuZGxlIiksInVpLXNvcnRhYmxlLWhhbmRsZSIpLHQuZWFjaCh0aGlzLml0ZW1zLGZ1bmN0aW9uKCl7ZS5fYWRkQ2xhc3ModGhpcy5pbnN0YW5jZS5vcHRpb25zLmhhbmRsZT90aGlzLml0ZW0uZmluZCh0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGFuZGxlKTp0aGlzLml0ZW0sInVpLXNvcnRhYmxlLWhhbmRsZSIpfSl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5fbW91c2VEZXN0cm95KCk7Zm9yKHZhciB0PXRoaXMuaXRlbXMubGVuZ3RoLTE7dD49MDt0LS0pdGhpcy5pdGVtc1t0XS5pdGVtLnJlbW92ZURhdGEodGhpcy53aWRnZXROYW1lKyItaXRlbSIpO3JldHVybiB0aGlzfSxfbW91c2VDYXB0dXJlOmZ1bmN0aW9uKGUsaSl7dmFyIHM9bnVsbCxuPSExLG89dGhpcztyZXR1cm4gdGhpcy5yZXZlcnRpbmc/ITE6dGhpcy5vcHRpb25zLmRpc2FibGVkfHwic3RhdGljIj09PXRoaXMub3B0aW9ucy50eXBlPyExOih0aGlzLl9yZWZyZXNoSXRlbXMoZSksdChlLnRhcmdldCkucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKXtyZXR1cm4gdC5kYXRhKHRoaXMsby53aWRnZXROYW1lKyItaXRlbSIpPT09bz8ocz10KHRoaXMpLCExKTp2b2lkIDB9KSx0LmRhdGEoZS50YXJnZXQsby53aWRnZXROYW1lKyItaXRlbSIpPT09byYmKHM9dChlLnRhcmdldCkpLHM/IXRoaXMub3B0aW9ucy5oYW5kbGV8fGl8fCh0KHRoaXMub3B0aW9ucy5oYW5kbGUscykuZmluZCgiKiIpLmFkZEJhY2soKS5lYWNoKGZ1bmN0aW9uKCl7dGhpcz09PWUudGFyZ2V0JiYobj0hMCl9KSxuKT8odGhpcy5jdXJyZW50SXRlbT1zLHRoaXMuX3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zKCksITApOiExOiExKX0sX21vdXNlU3RhcnQ6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuLG8sYT10aGlzLm9wdGlvbnM7aWYodGhpcy5jdXJyZW50Q29udGFpbmVyPXRoaXMsdGhpcy5yZWZyZXNoUG9zaXRpb25zKCksdGhpcy5oZWxwZXI9dGhpcy5fY3JlYXRlSGVscGVyKGUpLHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKSx0aGlzLl9jYWNoZU1hcmdpbnMoKSx0aGlzLnNjcm9sbFBhcmVudD10aGlzLmhlbHBlci5zY3JvbGxQYXJlbnQoKSx0aGlzLm9mZnNldD10aGlzLmN1cnJlbnRJdGVtLm9mZnNldCgpLHRoaXMub2Zmc2V0PXt0b3A6dGhpcy5vZmZzZXQudG9wLXRoaXMubWFyZ2lucy50b3AsbGVmdDp0aGlzLm9mZnNldC5sZWZ0LXRoaXMubWFyZ2lucy5sZWZ0fSx0LmV4dGVuZCh0aGlzLm9mZnNldCx7Y2xpY2s6e2xlZnQ6ZS5wYWdlWC10aGlzLm9mZnNldC5sZWZ0LHRvcDplLnBhZ2VZLXRoaXMub2Zmc2V0LnRvcH0scGFyZW50OnRoaXMuX2dldFBhcmVudE9mZnNldCgpLHJlbGF0aXZlOnRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCl9KSx0aGlzLmhlbHBlci5jc3MoInBvc2l0aW9uIiwiYWJzb2x1dGUiKSx0aGlzLmNzc1Bvc2l0aW9uPXRoaXMuaGVscGVyLmNzcygicG9zaXRpb24iKSx0aGlzLm9yaWdpbmFsUG9zaXRpb249dGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihlKSx0aGlzLm9yaWdpbmFsUGFnZVg9ZS5wYWdlWCx0aGlzLm9yaWdpbmFsUGFnZVk9ZS5wYWdlWSxhLmN1cnNvckF0JiZ0aGlzLl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyKGEuY3Vyc29yQXQpLHRoaXMuZG9tUG9zaXRpb249e3ByZXY6dGhpcy5jdXJyZW50SXRlbS5wcmV2KClbMF0scGFyZW50OnRoaXMuY3VycmVudEl0ZW0ucGFyZW50KClbMF19LHRoaXMuaGVscGVyWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXSYmdGhpcy5jdXJyZW50SXRlbS5oaWRlKCksdGhpcy5fY3JlYXRlUGxhY2Vob2xkZXIoKSxhLmNvbnRhaW5tZW50JiZ0aGlzLl9zZXRDb250YWlubWVudCgpLGEuY3Vyc29yJiYiYXV0byIhPT1hLmN1cnNvciYmKG89dGhpcy5kb2N1bWVudC5maW5kKCJib2R5IiksdGhpcy5zdG9yZWRDdXJzb3I9by5jc3MoImN1cnNvciIpLG8uY3NzKCJjdXJzb3IiLGEuY3Vyc29yKSx0aGlzLnN0b3JlZFN0eWxlc2hlZXQ9dCgiPHN0eWxlPip7IGN1cnNvcjogIithLmN1cnNvcisiICFpbXBvcnRhbnQ7IH08L3N0eWxlPiIpLmFwcGVuZFRvKG8pKSxhLm9wYWNpdHkmJih0aGlzLmhlbHBlci5jc3MoIm9wYWNpdHkiKSYmKHRoaXMuX3N0b3JlZE9wYWNpdHk9dGhpcy5oZWxwZXIuY3NzKCJvcGFjaXR5IikpLHRoaXMuaGVscGVyLmNzcygib3BhY2l0eSIsYS5vcGFjaXR5KSksYS56SW5kZXgmJih0aGlzLmhlbHBlci5jc3MoInpJbmRleCIpJiYodGhpcy5fc3RvcmVkWkluZGV4PXRoaXMuaGVscGVyLmNzcygiekluZGV4IikpLHRoaXMuaGVscGVyLmNzcygiekluZGV4IixhLnpJbmRleCkpLHRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5kb2N1bWVudFswXSYmIkhUTUwiIT09dGhpcy5zY3JvbGxQYXJlbnRbMF0udGFnTmFtZSYmKHRoaXMub3ZlcmZsb3dPZmZzZXQ9dGhpcy5zY3JvbGxQYXJlbnQub2Zmc2V0KCkpLHRoaXMuX3RyaWdnZXIoInN0YXJ0IixlLHRoaXMuX3VpSGFzaCgpKSx0aGlzLl9wcmVzZXJ2ZUhlbHBlclByb3BvcnRpb25zfHx0aGlzLl9jYWNoZUhlbHBlclByb3BvcnRpb25zKCksIXMpZm9yKG49dGhpcy5jb250YWluZXJzLmxlbmd0aC0xO24+PTA7bi0tKXRoaXMuY29udGFpbmVyc1tuXS5fdHJpZ2dlcigiYWN0aXZhdGUiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKTtyZXR1cm4gdC51aS5kZG1hbmFnZXImJih0LnVpLmRkbWFuYWdlci5jdXJyZW50PXRoaXMpLHQudWkuZGRtYW5hZ2VyJiYhYS5kcm9wQmVoYXZpb3VyJiZ0LnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyh0aGlzLGUpLHRoaXMuZHJhZ2dpbmc9ITAsdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWxwZXIsInVpLXNvcnRhYmxlLWhlbHBlciIpLHRoaXMuX21vdXNlRHJhZyhlKSwhMH0sX21vdXNlRHJhZzpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbyxhPXRoaXMub3B0aW9ucyxyPSExO2Zvcih0aGlzLnBvc2l0aW9uPXRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZSksdGhpcy5wb3NpdGlvbkFicz10aGlzLl9jb252ZXJ0UG9zaXRpb25UbygiYWJzb2x1dGUiKSx0aGlzLmxhc3RQb3NpdGlvbkFic3x8KHRoaXMubGFzdFBvc2l0aW9uQWJzPXRoaXMucG9zaXRpb25BYnMpLHRoaXMub3B0aW9ucy5zY3JvbGwmJih0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJiJIVE1MIiE9PXRoaXMuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWU/KHRoaXMub3ZlcmZsb3dPZmZzZXQudG9wK3RoaXMuc2Nyb2xsUGFyZW50WzBdLm9mZnNldEhlaWdodC1lLnBhZ2VZPGEuc2Nyb2xsU2Vuc2l0aXZpdHk/dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wPXI9dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wK2Euc2Nyb2xsU3BlZWQ6ZS5wYWdlWS10aGlzLm92ZXJmbG93T2Zmc2V0LnRvcDxhLnNjcm9sbFNlbnNpdGl2aXR5JiYodGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wPXI9dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wLWEuc2Nyb2xsU3BlZWQpLHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCt0aGlzLnNjcm9sbFBhcmVudFswXS5vZmZzZXRXaWR0aC1lLnBhZ2VYPGEuc2Nyb2xsU2Vuc2l0aXZpdHk/dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdD1yPXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQrYS5zY3JvbGxTcGVlZDplLnBhZ2VYLXRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdDxhLnNjcm9sbFNlbnNpdGl2aXR5JiYodGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdD1yPXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQtYS5zY3JvbGxTcGVlZCkpOihlLnBhZ2VZLXRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCk8YS5zY3JvbGxTZW5zaXRpdml0eT9yPXRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKHRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCktYS5zY3JvbGxTcGVlZCk6dGhpcy53aW5kb3cuaGVpZ2h0KCktKGUucGFnZVktdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSk8YS5zY3JvbGxTZW5zaXRpdml0eSYmKHI9dGhpcy5kb2N1bWVudC5zY3JvbGxUb3AodGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSthLnNjcm9sbFNwZWVkKSksZS5wYWdlWC10aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKTxhLnNjcm9sbFNlbnNpdGl2aXR5P3I9dGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpLWEuc2Nyb2xsU3BlZWQpOnRoaXMud2luZG93LndpZHRoKCktKGUucGFnZVgtdGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkpPGEuc2Nyb2xsU2Vuc2l0aXZpdHkmJihyPXRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCh0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKSthLnNjcm9sbFNwZWVkKSkpLHIhPT0hMSYmdC51aS5kZG1hbmFnZXImJiFhLmRyb3BCZWhhdmlvdXImJnQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKHRoaXMsZSkpLHRoaXMucG9zaXRpb25BYnM9dGhpcy5fY29udmVydFBvc2l0aW9uVG8oImFic29sdXRlIiksdGhpcy5vcHRpb25zLmF4aXMmJiJ5Ij09PXRoaXMub3B0aW9ucy5heGlzfHwodGhpcy5oZWxwZXJbMF0uc3R5bGUubGVmdD10aGlzLnBvc2l0aW9uLmxlZnQrInB4IiksdGhpcy5vcHRpb25zLmF4aXMmJiJ4Ij09PXRoaXMub3B0aW9ucy5heGlzfHwodGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wPXRoaXMucG9zaXRpb24udG9wKyJweCIpLGk9dGhpcy5pdGVtcy5sZW5ndGgtMTtpPj0wO2ktLSlpZihzPXRoaXMuaXRlbXNbaV0sbj1zLml0ZW1bMF0sbz10aGlzLl9pbnRlcnNlY3RzV2l0aFBvaW50ZXIocyksbyYmcy5pbnN0YW5jZT09PXRoaXMuY3VycmVudENvbnRhaW5lciYmbiE9PXRoaXMuY3VycmVudEl0ZW1bMF0mJnRoaXMucGxhY2Vob2xkZXJbMT09PW8/Im5leHQiOiJwcmV2Il0oKVswXSE9PW4mJiF0LmNvbnRhaW5zKHRoaXMucGxhY2Vob2xkZXJbMF0sbikmJigic2VtaS1keW5hbWljIj09PXRoaXMub3B0aW9ucy50eXBlPyF0LmNvbnRhaW5zKHRoaXMuZWxlbWVudFswXSxuKTohMCkpe2lmKHRoaXMuZGlyZWN0aW9uPTE9PT1vPyJkb3duIjoidXAiLCJwb2ludGVyIiE9PXRoaXMub3B0aW9ucy50b2xlcmFuY2UmJiF0aGlzLl9pbnRlcnNlY3RzV2l0aFNpZGVzKHMpKWJyZWFrO3RoaXMuX3JlYXJyYW5nZShlLHMpLHRoaXMuX3RyaWdnZXIoImNoYW5nZSIsZSx0aGlzLl91aUhhc2goKSk7YnJlYWt9cmV0dXJuIHRoaXMuX2NvbnRhY3RDb250YWluZXJzKGUpLHQudWkuZGRtYW5hZ2VyJiZ0LnVpLmRkbWFuYWdlci5kcmFnKHRoaXMsZSksdGhpcy5fdHJpZ2dlcigic29ydCIsZSx0aGlzLl91aUhhc2goKSksdGhpcy5sYXN0UG9zaXRpb25BYnM9dGhpcy5wb3NpdGlvbkFicywhMX0sX21vdXNlU3RvcDpmdW5jdGlvbihlLGkpe2lmKGUpe2lmKHQudWkuZGRtYW5hZ2VyJiYhdGhpcy5vcHRpb25zLmRyb3BCZWhhdmlvdXImJnQudWkuZGRtYW5hZ2VyLmRyb3AodGhpcyxlKSx0aGlzLm9wdGlvbnMucmV2ZXJ0KXt2YXIgcz10aGlzLG49dGhpcy5wbGFjZWhvbGRlci5vZmZzZXQoKSxvPXRoaXMub3B0aW9ucy5heGlzLGE9e307byYmIngiIT09b3x8KGEubGVmdD1uLmxlZnQtdGhpcy5vZmZzZXQucGFyZW50LmxlZnQtdGhpcy5tYXJnaW5zLmxlZnQrKHRoaXMub2Zmc2V0UGFyZW50WzBdPT09dGhpcy5kb2N1bWVudFswXS5ib2R5PzA6dGhpcy5vZmZzZXRQYXJlbnRbMF0uc2Nyb2xsTGVmdCkpLG8mJiJ5IiE9PW98fChhLnRvcD1uLnRvcC10aGlzLm9mZnNldC5wYXJlbnQudG9wLXRoaXMubWFyZ2lucy50b3ArKHRoaXMub2Zmc2V0UGFyZW50WzBdPT09dGhpcy5kb2N1bWVudFswXS5ib2R5PzA6dGhpcy5vZmZzZXRQYXJlbnRbMF0uc2Nyb2xsVG9wKSksdGhpcy5yZXZlcnRpbmc9ITAsdCh0aGlzLmhlbHBlcikuYW5pbWF0ZShhLHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnQsMTApfHw1MDAsZnVuY3Rpb24oKXtzLl9jbGVhcihlKX0pfWVsc2UgdGhpcy5fY2xlYXIoZSxpKTtyZXR1cm4hMX19LGNhbmNlbDpmdW5jdGlvbigpe2lmKHRoaXMuZHJhZ2dpbmcpe3RoaXMuX21vdXNlVXAobmV3IHQuRXZlbnQoIm1vdXNldXAiLHt0YXJnZXQ6bnVsbH0pKSwib3JpZ2luYWwiPT09dGhpcy5vcHRpb25zLmhlbHBlcj8odGhpcy5jdXJyZW50SXRlbS5jc3ModGhpcy5fc3RvcmVkQ1NTKSx0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRJdGVtLCJ1aS1zb3J0YWJsZS1oZWxwZXIiKSk6dGhpcy5jdXJyZW50SXRlbS5zaG93KCk7Zm9yKHZhciBlPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtlPj0wO2UtLSl0aGlzLmNvbnRhaW5lcnNbZV0uX3RyaWdnZXIoImRlYWN0aXZhdGUiLG51bGwsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmNvbnRhaW5lcnNbZV0uY29udGFpbmVyQ2FjaGUub3ZlciYmKHRoaXMuY29udGFpbmVyc1tlXS5fdHJpZ2dlcigib3V0IixudWxsLHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jb250YWluZXJzW2VdLmNvbnRhaW5lckNhY2hlLm92ZXI9MCl9cmV0dXJuIHRoaXMucGxhY2Vob2xkZXImJih0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUmJnRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyWzBdKSwib3JpZ2luYWwiIT09dGhpcy5vcHRpb25zLmhlbHBlciYmdGhpcy5oZWxwZXImJnRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUmJnRoaXMuaGVscGVyLnJlbW92ZSgpLHQuZXh0ZW5kKHRoaXMse2hlbHBlcjpudWxsLGRyYWdnaW5nOiExLHJldmVydGluZzohMSxfbm9GaW5hbFNvcnQ6bnVsbH0pLHRoaXMuZG9tUG9zaXRpb24ucHJldj90KHRoaXMuZG9tUG9zaXRpb24ucHJldikuYWZ0ZXIodGhpcy5jdXJyZW50SXRlbSk6dCh0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCkucHJlcGVuZCh0aGlzLmN1cnJlbnRJdGVtKSksdGhpc30sc2VyaWFsaXplOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX2dldEl0ZW1zQXNqUXVlcnkoZSYmZS5jb25uZWN0ZWQpLHM9W107cmV0dXJuIGU9ZXx8e30sdChpKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9KHQoZS5pdGVtfHx0aGlzKS5hdHRyKGUuYXR0cmlidXRlfHwiaWQiKXx8IiIpLm1hdGNoKGUuZXhwcmVzc2lvbnx8LyguKylbXC09X10oLispLyk7aSYmcy5wdXNoKChlLmtleXx8aVsxXSsiW10iKSsiPSIrKGUua2V5JiZlLmV4cHJlc3Npb24/aVsxXTppWzJdKSl9KSwhcy5sZW5ndGgmJmUua2V5JiZzLnB1c2goZS5rZXkrIj0iKSxzLmpvaW4oIiYiKX0sdG9BcnJheTpmdW5jdGlvbihlKXt2YXIgaT10aGlzLl9nZXRJdGVtc0FzalF1ZXJ5KGUmJmUuY29ubmVjdGVkKSxzPVtdO3JldHVybiBlPWV8fHt9LGkuZWFjaChmdW5jdGlvbigpe3MucHVzaCh0KGUuaXRlbXx8dGhpcykuYXR0cihlLmF0dHJpYnV0ZXx8ImlkIil8fCIiKX0pLHN9LF9pbnRlcnNlY3RzV2l0aDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnBvc2l0aW9uQWJzLmxlZnQsaT1lK3RoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgscz10aGlzLnBvc2l0aW9uQWJzLnRvcCxuPXMrdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsbz10LmxlZnQsYT1vK3Qud2lkdGgscj10LnRvcCxoPXIrdC5oZWlnaHQsbD10aGlzLm9mZnNldC5jbGljay50b3AsYz10aGlzLm9mZnNldC5jbGljay5sZWZ0LHU9IngiPT09dGhpcy5vcHRpb25zLmF4aXN8fHMrbD5yJiZoPnMrbCxkPSJ5Ij09PXRoaXMub3B0aW9ucy5heGlzfHxlK2M+byYmYT5lK2MscD11JiZkO3JldHVybiJwb2ludGVyIj09PXRoaXMub3B0aW9ucy50b2xlcmFuY2V8fHRoaXMub3B0aW9ucy5mb3JjZVBvaW50ZXJGb3JDb250YWluZXJzfHwicG9pbnRlciIhPT10aGlzLm9wdGlvbnMudG9sZXJhbmNlJiZ0aGlzLmhlbHBlclByb3BvcnRpb25zW3RoaXMuZmxvYXRpbmc/IndpZHRoIjoiaGVpZ2h0Il0+dFt0aGlzLmZsb2F0aW5nPyJ3aWR0aCI6ImhlaWdodCJdP3A6ZSt0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLzI+byYmYT5pLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgvMiYmcyt0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yPnImJmg+bi10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yfSxfaW50ZXJzZWN0c1dpdGhQb2ludGVyOmZ1bmN0aW9uKHQpe3ZhciBlLGkscz0ieCI9PT10aGlzLm9wdGlvbnMuYXhpc3x8dGhpcy5faXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLnRvcCt0aGlzLm9mZnNldC5jbGljay50b3AsdC50b3AsdC5oZWlnaHQpLG49InkiPT09dGhpcy5vcHRpb25zLmF4aXN8fHRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0K3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQsdC5sZWZ0LHQud2lkdGgpLG89cyYmbjtyZXR1cm4gbz8oZT10aGlzLl9nZXREcmFnVmVydGljYWxEaXJlY3Rpb24oKSxpPXRoaXMuX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uKCksdGhpcy5mbG9hdGluZz8icmlnaHQiPT09aXx8ImRvd24iPT09ZT8yOjE6ZSYmKCJkb3duIj09PWU/MjoxKSk6ITF9LF9pbnRlcnNlY3RzV2l0aFNpZGVzOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy50b3ArdGhpcy5vZmZzZXQuY2xpY2sudG9wLHQudG9wK3QuaGVpZ2h0LzIsdC5oZWlnaHQpLGk9dGhpcy5faXNPdmVyQXhpcyh0aGlzLnBvc2l0aW9uQWJzLmxlZnQrdGhpcy5vZmZzZXQuY2xpY2subGVmdCx0LmxlZnQrdC53aWR0aC8yLHQud2lkdGgpLHM9dGhpcy5fZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uKCksbj10aGlzLl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbigpO3JldHVybiB0aGlzLmZsb2F0aW5nJiZuPyJyaWdodCI9PT1uJiZpfHwibGVmdCI9PT1uJiYhaTpzJiYoImRvd24iPT09cyYmZXx8InVwIj09PXMmJiFlKX0sX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMucG9zaXRpb25BYnMudG9wLXRoaXMubGFzdFBvc2l0aW9uQWJzLnRvcDtyZXR1cm4gMCE9PXQmJih0PjA/ImRvd24iOiJ1cCIpfSxfZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb246ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBvc2l0aW9uQWJzLmxlZnQtdGhpcy5sYXN0UG9zaXRpb25BYnMubGVmdDtyZXR1cm4gMCE9PXQmJih0PjA/InJpZ2h0IjoibGVmdCIpfSxyZWZyZXNoOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9yZWZyZXNoSXRlbXModCksdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCksdGhpcy5yZWZyZXNoUG9zaXRpb25zKCksdGhpc30sX2Nvbm5lY3RXaXRoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zO3JldHVybiB0LmNvbm5lY3RXaXRoLmNvbnN0cnVjdG9yPT09U3RyaW5nP1t0LmNvbm5lY3RXaXRoXTp0LmNvbm5lY3RXaXRofSxfZ2V0SXRlbXNBc2pRdWVyeTpmdW5jdGlvbihlKXtmdW5jdGlvbiBpKCl7ci5wdXNoKHRoaXMpfXZhciBzLG4sbyxhLHI9W10saD1bXSxsPXRoaXMuX2Nvbm5lY3RXaXRoKCk7aWYobCYmZSlmb3Iocz1sLmxlbmd0aC0xO3M+PTA7cy0tKWZvcihvPXQobFtzXSx0aGlzLmRvY3VtZW50WzBdKSxuPW8ubGVuZ3RoLTE7bj49MDtuLS0pYT10LmRhdGEob1tuXSx0aGlzLndpZGdldEZ1bGxOYW1lKSxhJiZhIT09dGhpcyYmIWEub3B0aW9ucy5kaXNhYmxlZCYmaC5wdXNoKFt0LmlzRnVuY3Rpb24oYS5vcHRpb25zLml0ZW1zKT9hLm9wdGlvbnMuaXRlbXMuY2FsbChhLmVsZW1lbnQpOnQoYS5vcHRpb25zLml0ZW1zLGEuZWxlbWVudCkubm90KCIudWktc29ydGFibGUtaGVscGVyIikubm90KCIudWktc29ydGFibGUtcGxhY2Vob2xkZXIiKSxhXSk7Zm9yKGgucHVzaChbdC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5pdGVtcyk/dGhpcy5vcHRpb25zLml0ZW1zLmNhbGwodGhpcy5lbGVtZW50LG51bGwse29wdGlvbnM6dGhpcy5vcHRpb25zLGl0ZW06dGhpcy5jdXJyZW50SXRlbX0pOnQodGhpcy5vcHRpb25zLml0ZW1zLHRoaXMuZWxlbWVudCkubm90KCIudWktc29ydGFibGUtaGVscGVyIikubm90KCIudWktc29ydGFibGUtcGxhY2Vob2xkZXIiKSx0aGlzXSkscz1oLmxlbmd0aC0xO3M+PTA7cy0tKWhbc11bMF0uZWFjaChpKTtyZXR1cm4gdChyKX0sX3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5jdXJyZW50SXRlbS5maW5kKCI6ZGF0YSgiK3RoaXMud2lkZ2V0TmFtZSsiLWl0ZW0pIik7dGhpcy5pdGVtcz10LmdyZXAodGhpcy5pdGVtcyxmdW5jdGlvbih0KXtmb3IodmFyIGk9MDtlLmxlbmd0aD5pO2krKylpZihlW2ldPT09dC5pdGVtWzBdKXJldHVybiExO3JldHVybiEwfSl9LF9yZWZyZXNoSXRlbXM6ZnVuY3Rpb24oZSl7dGhpcy5pdGVtcz1bXSx0aGlzLmNvbnRhaW5lcnM9W3RoaXNdO3ZhciBpLHMsbixvLGEscixoLGwsYz10aGlzLml0ZW1zLHU9W1t0LmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLml0ZW1zKT90aGlzLm9wdGlvbnMuaXRlbXMuY2FsbCh0aGlzLmVsZW1lbnRbMF0sZSx7aXRlbTp0aGlzLmN1cnJlbnRJdGVtfSk6dCh0aGlzLm9wdGlvbnMuaXRlbXMsdGhpcy5lbGVtZW50KSx0aGlzXV0sZD10aGlzLl9jb25uZWN0V2l0aCgpO2lmKGQmJnRoaXMucmVhZHkpZm9yKGk9ZC5sZW5ndGgtMTtpPj0wO2ktLSlmb3Iobj10KGRbaV0sdGhpcy5kb2N1bWVudFswXSkscz1uLmxlbmd0aC0xO3M+PTA7cy0tKW89dC5kYXRhKG5bc10sdGhpcy53aWRnZXRGdWxsTmFtZSksbyYmbyE9PXRoaXMmJiFvLm9wdGlvbnMuZGlzYWJsZWQmJih1LnB1c2goW3QuaXNGdW5jdGlvbihvLm9wdGlvbnMuaXRlbXMpP28ub3B0aW9ucy5pdGVtcy5jYWxsKG8uZWxlbWVudFswXSxlLHtpdGVtOnRoaXMuY3VycmVudEl0ZW19KTp0KG8ub3B0aW9ucy5pdGVtcyxvLmVsZW1lbnQpLG9dKSx0aGlzLmNvbnRhaW5lcnMucHVzaChvKSk7Zm9yKGk9dS5sZW5ndGgtMTtpPj0wO2ktLSlmb3IoYT11W2ldWzFdLHI9dVtpXVswXSxzPTAsbD1yLmxlbmd0aDtsPnM7cysrKWg9dChyW3NdKSxoLmRhdGEodGhpcy53aWRnZXROYW1lKyItaXRlbSIsYSksYy5wdXNoKHtpdGVtOmgsaW5zdGFuY2U6YSx3aWR0aDowLGhlaWdodDowLGxlZnQ6MCx0b3A6MH0pfSxyZWZyZXNoUG9zaXRpb25zOmZ1bmN0aW9uKGUpe3RoaXMuZmxvYXRpbmc9dGhpcy5pdGVtcy5sZW5ndGg/IngiPT09dGhpcy5vcHRpb25zLmF4aXN8fHRoaXMuX2lzRmxvYXRpbmcodGhpcy5pdGVtc1swXS5pdGVtKTohMSx0aGlzLm9mZnNldFBhcmVudCYmdGhpcy5oZWxwZXImJih0aGlzLm9mZnNldC5wYXJlbnQ9dGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCkpO3ZhciBpLHMsbixvO2ZvcihpPXRoaXMuaXRlbXMubGVuZ3RoLTE7aT49MDtpLS0pcz10aGlzLml0ZW1zW2ldLHMuaW5zdGFuY2UhPT10aGlzLmN1cnJlbnRDb250YWluZXImJnRoaXMuY3VycmVudENvbnRhaW5lciYmcy5pdGVtWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXXx8KG49dGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQ/dCh0aGlzLm9wdGlvbnMudG9sZXJhbmNlRWxlbWVudCxzLml0ZW0pOnMuaXRlbSxlfHwocy53aWR0aD1uLm91dGVyV2lkdGgoKSxzLmhlaWdodD1uLm91dGVySGVpZ2h0KCkpLG89bi5vZmZzZXQoKSxzLmxlZnQ9by5sZWZ0LHMudG9wPW8udG9wKTtpZih0aGlzLm9wdGlvbnMuY3VzdG9tJiZ0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzKXRoaXMub3B0aW9ucy5jdXN0b20ucmVmcmVzaENvbnRhaW5lcnMuY2FsbCh0aGlzKTtlbHNlIGZvcihpPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtpPj0wO2ktLSlvPXRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50Lm9mZnNldCgpLHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5sZWZ0PW8ubGVmdCx0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUudG9wPW8udG9wLHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS53aWR0aD10aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlcldpZHRoKCksdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLmhlaWdodD10aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlckhlaWdodCgpO3JldHVybiB0aGlzfSxfY3JlYXRlUGxhY2Vob2xkZXI6ZnVuY3Rpb24oZSl7ZT1lfHx0aGlzO3ZhciBpLHM9ZS5vcHRpb25zO3MucGxhY2Vob2xkZXImJnMucGxhY2Vob2xkZXIuY29uc3RydWN0b3IhPT1TdHJpbmd8fChpPXMucGxhY2Vob2xkZXIscy5wbGFjZWhvbGRlcj17ZWxlbWVudDpmdW5jdGlvbigpe3ZhciBzPWUuY3VycmVudEl0ZW1bMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxuPXQoIjwiK3MrIj4iLGUuZG9jdW1lbnRbMF0pO3JldHVybiBlLl9hZGRDbGFzcyhuLCJ1aS1zb3J0YWJsZS1wbGFjZWhvbGRlciIsaXx8ZS5jdXJyZW50SXRlbVswXS5jbGFzc05hbWUpLl9yZW1vdmVDbGFzcyhuLCJ1aS1zb3J0YWJsZS1oZWxwZXIiKSwidGJvZHkiPT09cz9lLl9jcmVhdGVUclBsYWNlaG9sZGVyKGUuY3VycmVudEl0ZW0uZmluZCgidHIiKS5lcSgwKSx0KCI8dHI+IixlLmRvY3VtZW50WzBdKS5hcHBlbmRUbyhuKSk6InRyIj09PXM/ZS5fY3JlYXRlVHJQbGFjZWhvbGRlcihlLmN1cnJlbnRJdGVtLG4pOiJpbWciPT09cyYmbi5hdHRyKCJzcmMiLGUuY3VycmVudEl0ZW0uYXR0cigic3JjIikpLGl8fG4uY3NzKCJ2aXNpYmlsaXR5IiwiaGlkZGVuIiksbn0sdXBkYXRlOmZ1bmN0aW9uKHQsbil7KCFpfHxzLmZvcmNlUGxhY2Vob2xkZXJTaXplKSYmKG4uaGVpZ2h0KCl8fG4uaGVpZ2h0KGUuY3VycmVudEl0ZW0uaW5uZXJIZWlnaHQoKS1wYXJzZUludChlLmN1cnJlbnRJdGVtLmNzcygicGFkZGluZ1RvcCIpfHwwLDEwKS1wYXJzZUludChlLmN1cnJlbnRJdGVtLmNzcygicGFkZGluZ0JvdHRvbSIpfHwwLDEwKSksbi53aWR0aCgpfHxuLndpZHRoKGUuY3VycmVudEl0ZW0uaW5uZXJXaWR0aCgpLXBhcnNlSW50KGUuY3VycmVudEl0ZW0uY3NzKCJwYWRkaW5nTGVmdCIpfHwwLDEwKS1wYXJzZUludChlLmN1cnJlbnRJdGVtLmNzcygicGFkZGluZ1JpZ2h0Iil8fDAsMTApKSl9fSksZS5wbGFjZWhvbGRlcj10KHMucGxhY2Vob2xkZXIuZWxlbWVudC5jYWxsKGUuZWxlbWVudCxlLmN1cnJlbnRJdGVtKSksZS5jdXJyZW50SXRlbS5hZnRlcihlLnBsYWNlaG9sZGVyKSxzLnBsYWNlaG9sZGVyLnVwZGF0ZShlLGUucGxhY2Vob2xkZXIpfSxfY3JlYXRlVHJQbGFjZWhvbGRlcjpmdW5jdGlvbihlLGkpe3ZhciBzPXRoaXM7ZS5jaGlsZHJlbigpLmVhY2goZnVuY3Rpb24oKXt0KCI8dGQ+JiMxNjA7PC90ZD4iLHMuZG9jdW1lbnRbMF0pLmF0dHIoImNvbHNwYW4iLHQodGhpcykuYXR0cigiY29sc3BhbiIpfHwxKS5hcHBlbmRUbyhpKX0pfSxfY29udGFjdENvbnRhaW5lcnM6ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG8sYSxyLGgsbCxjLHUsZD1udWxsLHA9bnVsbDtmb3IoaT10aGlzLmNvbnRhaW5lcnMubGVuZ3RoLTE7aT49MDtpLS0paWYoIXQuY29udGFpbnModGhpcy5jdXJyZW50SXRlbVswXSx0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudFswXSkpaWYodGhpcy5faW50ZXJzZWN0c1dpdGgodGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlKSl7aWYoZCYmdC5jb250YWlucyh0aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudFswXSxkLmVsZW1lbnRbMF0pKWNvbnRpbnVlO2Q9dGhpcy5jb250YWluZXJzW2ldLHA9aX1lbHNlIHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5vdmVyJiYodGhpcy5jb250YWluZXJzW2ldLl90cmlnZ2VyKCJvdXQiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3Zlcj0wKTtpZihkKWlmKDE9PT10aGlzLmNvbnRhaW5lcnMubGVuZ3RoKXRoaXMuY29udGFpbmVyc1twXS5jb250YWluZXJDYWNoZS5vdmVyfHwodGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKCJvdmVyIixlLHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jb250YWluZXJzW3BdLmNvbnRhaW5lckNhY2hlLm92ZXI9MSk7ZWxzZXtmb3Iobj0xZTQsbz1udWxsLGM9ZC5mbG9hdGluZ3x8dGhpcy5faXNGbG9hdGluZyh0aGlzLmN1cnJlbnRJdGVtKSxhPWM/ImxlZnQiOiJ0b3AiLHI9Yz8id2lkdGgiOiJoZWlnaHQiLHU9Yz8icGFnZVgiOiJwYWdlWSIscz10aGlzLml0ZW1zLmxlbmd0aC0xO3M+PTA7cy0tKXQuY29udGFpbnModGhpcy5jb250YWluZXJzW3BdLmVsZW1lbnRbMF0sdGhpcy5pdGVtc1tzXS5pdGVtWzBdKSYmdGhpcy5pdGVtc1tzXS5pdGVtWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXSYmKGg9dGhpcy5pdGVtc1tzXS5pdGVtLm9mZnNldCgpW2FdLGw9ITEsZVt1XS1oPnRoaXMuaXRlbXNbc11bcl0vMiYmKGw9ITApLG4+TWF0aC5hYnMoZVt1XS1oKSYmKG49TWF0aC5hYnMoZVt1XS1oKSxvPXRoaXMuaXRlbXNbc10sdGhpcy5kaXJlY3Rpb249bD8idXAiOiJkb3duIikpO2lmKCFvJiYhdGhpcy5vcHRpb25zLmRyb3BPbkVtcHR5KXJldHVybjtpZih0aGlzLmN1cnJlbnRDb250YWluZXI9PT10aGlzLmNvbnRhaW5lcnNbcF0pcmV0dXJuIHRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyfHwodGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKCJvdmVyIixlLHRoaXMuX3VpSGFzaCgpKSx0aGlzLmN1cnJlbnRDb250YWluZXIuY29udGFpbmVyQ2FjaGUub3Zlcj0xKSx2b2lkIDA7bz90aGlzLl9yZWFycmFuZ2UoZSxvLG51bGwsITApOnRoaXMuX3JlYXJyYW5nZShlLG51bGwsdGhpcy5jb250YWluZXJzW3BdLmVsZW1lbnQsITApLHRoaXMuX3RyaWdnZXIoImNoYW5nZSIsZSx0aGlzLl91aUhhc2goKSksdGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKCJjaGFuZ2UiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmN1cnJlbnRDb250YWluZXI9dGhpcy5jb250YWluZXJzW3BdLHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlci51cGRhdGUodGhpcy5jdXJyZW50Q29udGFpbmVyLHRoaXMucGxhY2Vob2xkZXIpLHRoaXMuY29udGFpbmVyc1twXS5fdHJpZ2dlcigib3ZlciIsZSx0aGlzLl91aUhhc2godGhpcykpLHRoaXMuY29udGFpbmVyc1twXS5jb250YWluZXJDYWNoZS5vdmVyPTF9fSxfY3JlYXRlSGVscGVyOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucyxzPXQuaXNGdW5jdGlvbihpLmhlbHBlcik/dChpLmhlbHBlci5hcHBseSh0aGlzLmVsZW1lbnRbMF0sW2UsdGhpcy5jdXJyZW50SXRlbV0pKToiY2xvbmUiPT09aS5oZWxwZXI/dGhpcy5jdXJyZW50SXRlbS5jbG9uZSgpOnRoaXMuY3VycmVudEl0ZW07cmV0dXJuIHMucGFyZW50cygiYm9keSIpLmxlbmd0aHx8dCgicGFyZW50IiE9PWkuYXBwZW5kVG8/aS5hcHBlbmRUbzp0aGlzLmN1cnJlbnRJdGVtWzBdLnBhcmVudE5vZGUpWzBdLmFwcGVuZENoaWxkKHNbMF0pLHNbMF09PT10aGlzLmN1cnJlbnRJdGVtWzBdJiYodGhpcy5fc3RvcmVkQ1NTPXt3aWR0aDp0aGlzLmN1cnJlbnRJdGVtWzBdLnN0eWxlLndpZHRoLGhlaWdodDp0aGlzLmN1cnJlbnRJdGVtWzBdLnN0eWxlLmhlaWdodCxwb3NpdGlvbjp0aGlzLmN1cnJlbnRJdGVtLmNzcygicG9zaXRpb24iKSx0b3A6dGhpcy5jdXJyZW50SXRlbS5jc3MoInRvcCIpLGxlZnQ6dGhpcy5jdXJyZW50SXRlbS5jc3MoImxlZnQiKX0pLCghc1swXS5zdHlsZS53aWR0aHx8aS5mb3JjZUhlbHBlclNpemUpJiZzLndpZHRoKHRoaXMuY3VycmVudEl0ZW0ud2lkdGgoKSksKCFzWzBdLnN0eWxlLmhlaWdodHx8aS5mb3JjZUhlbHBlclNpemUpJiZzLmhlaWdodCh0aGlzLmN1cnJlbnRJdGVtLmhlaWdodCgpKSxzfSxfYWRqdXN0T2Zmc2V0RnJvbUhlbHBlcjpmdW5jdGlvbihlKXsic3RyaW5nIj09dHlwZW9mIGUmJihlPWUuc3BsaXQoIiAiKSksdC5pc0FycmF5KGUpJiYoZT17bGVmdDorZVswXSx0b3A6K2VbMV18fDB9KSwibGVmdCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2subGVmdD1lLmxlZnQrdGhpcy5tYXJnaW5zLmxlZnQpLCJyaWdodCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2subGVmdD10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLWUucmlnaHQrdGhpcy5tYXJnaW5zLmxlZnQpLCJ0b3AiaW4gZSYmKHRoaXMub2Zmc2V0LmNsaWNrLnRvcD1lLnRvcCt0aGlzLm1hcmdpbnMudG9wKSwiYm90dG9tImluIGUmJih0aGlzLm9mZnNldC5jbGljay50b3A9dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtZS5ib3R0b20rdGhpcy5tYXJnaW5zLnRvcCl9LF9nZXRQYXJlbnRPZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLm9mZnNldFBhcmVudD10aGlzLmhlbHBlci5vZmZzZXRQYXJlbnQoKTt2YXIgZT10aGlzLm9mZnNldFBhcmVudC5vZmZzZXQoKTtyZXR1cm4iYWJzb2x1dGUiPT09dGhpcy5jc3NQb3NpdGlvbiYmdGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZ0LmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLHRoaXMub2Zmc2V0UGFyZW50WzBdKSYmKGUubGVmdCs9dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsTGVmdCgpLGUudG9wKz10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSksKHRoaXMub2Zmc2V0UGFyZW50WzBdPT09dGhpcy5kb2N1bWVudFswXS5ib2R5fHx0aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lJiYiaHRtbCI9PT10aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJnQudWkuaWUpJiYoZT17dG9wOjAsbGVmdDowfSkse3RvcDplLnRvcCsocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKXx8MCksbGVmdDplLmxlZnQrKHBhcnNlSW50KHRoaXMub2Zmc2V0UGFyZW50LmNzcygiYm9yZGVyTGVmdFdpZHRoIiksMTApfHwwKX19LF9nZXRSZWxhdGl2ZU9mZnNldDpmdW5jdGlvbigpe2lmKCJyZWxhdGl2ZSI9PT10aGlzLmNzc1Bvc2l0aW9uKXt2YXIgdD10aGlzLmN1cnJlbnRJdGVtLnBvc2l0aW9uKCk7cmV0dXJue3RvcDp0LnRvcC0ocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKCJ0b3AiKSwxMCl8fDApK3RoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpLGxlZnQ6dC5sZWZ0LShwYXJzZUludCh0aGlzLmhlbHBlci5jc3MoImxlZnQiKSwxMCl8fDApK3RoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKX19cmV0dXJue3RvcDowLGxlZnQ6MH19LF9jYWNoZU1hcmdpbnM6ZnVuY3Rpb24oKXt0aGlzLm1hcmdpbnM9e2xlZnQ6cGFyc2VJbnQodGhpcy5jdXJyZW50SXRlbS5jc3MoIm1hcmdpbkxlZnQiKSwxMCl8fDAsdG9wOnBhcnNlSW50KHRoaXMuY3VycmVudEl0ZW0uY3NzKCJtYXJnaW5Ub3AiKSwxMCl8fDB9fSxfY2FjaGVIZWxwZXJQcm9wb3J0aW9uczpmdW5jdGlvbigpe3RoaXMuaGVscGVyUHJvcG9ydGlvbnM9e3dpZHRoOnRoaXMuaGVscGVyLm91dGVyV2lkdGgoKSxoZWlnaHQ6dGhpcy5oZWxwZXIub3V0ZXJIZWlnaHQoKX19LF9zZXRDb250YWlubWVudDpmdW5jdGlvbigpe3ZhciBlLGkscyxuPXRoaXMub3B0aW9uczsicGFyZW50Ij09PW4uY29udGFpbm1lbnQmJihuLmNvbnRhaW5tZW50PXRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUpLCgiZG9jdW1lbnQiPT09bi5jb250YWlubWVudHx8IndpbmRvdyI9PT1uLmNvbnRhaW5tZW50KSYmKHRoaXMuY29udGFpbm1lbnQ9WzAtdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdC10aGlzLm9mZnNldC5wYXJlbnQubGVmdCwwLXRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcC10aGlzLm9mZnNldC5wYXJlbnQudG9wLCJkb2N1bWVudCI9PT1uLmNvbnRhaW5tZW50P3RoaXMuZG9jdW1lbnQud2lkdGgoKTp0aGlzLndpbmRvdy53aWR0aCgpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgtdGhpcy5tYXJnaW5zLmxlZnQsKCJkb2N1bWVudCI9PT1uLmNvbnRhaW5tZW50P3RoaXMuZG9jdW1lbnQuaGVpZ2h0KCl8fGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQ6dGhpcy53aW5kb3cuaGVpZ2h0KCl8fHRoaXMuZG9jdW1lbnRbMF0uYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtdGhpcy5tYXJnaW5zLnRvcF0pLC9eKGRvY3VtZW50fHdpbmRvd3xwYXJlbnQpJC8udGVzdChuLmNvbnRhaW5tZW50KXx8KGU9dChuLmNvbnRhaW5tZW50KVswXSxpPXQobi5jb250YWlubWVudCkub2Zmc2V0KCkscz0iaGlkZGVuIiE9PXQoZSkuY3NzKCJvdmVyZmxvdyIpLHRoaXMuY29udGFpbm1lbnQ9W2kubGVmdCsocGFyc2VJbnQodChlKS5jc3MoImJvcmRlckxlZnRXaWR0aCIpLDEwKXx8MCkrKHBhcnNlSW50KHQoZSkuY3NzKCJwYWRkaW5nTGVmdCIpLDEwKXx8MCktdGhpcy5tYXJnaW5zLmxlZnQsaS50b3ArKHBhcnNlSW50KHQoZSkuY3NzKCJib3JkZXJUb3BXaWR0aCIpLDEwKXx8MCkrKHBhcnNlSW50KHQoZSkuY3NzKCJwYWRkaW5nVG9wIiksMTApfHwwKS10aGlzLm1hcmdpbnMudG9wLGkubGVmdCsocz9NYXRoLm1heChlLnNjcm9sbFdpZHRoLGUub2Zmc2V0V2lkdGgpOmUub2Zmc2V0V2lkdGgpLShwYXJzZUludCh0KGUpLmNzcygiYm9yZGVyTGVmdFdpZHRoIiksMTApfHwwKS0ocGFyc2VJbnQodChlKS5jc3MoInBhZGRpbmdSaWdodCIpLDEwKXx8MCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aC10aGlzLm1hcmdpbnMubGVmdCxpLnRvcCsocz9NYXRoLm1heChlLnNjcm9sbEhlaWdodCxlLm9mZnNldEhlaWdodCk6ZS5vZmZzZXRIZWlnaHQpLShwYXJzZUludCh0KGUpLmNzcygiYm9yZGVyVG9wV2lkdGgiKSwxMCl8fDApLShwYXJzZUludCh0KGUpLmNzcygicGFkZGluZ0JvdHRvbSIpLDEwKXx8MCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtdGhpcy5tYXJnaW5zLnRvcF0pfSxfY29udmVydFBvc2l0aW9uVG86ZnVuY3Rpb24oZSxpKXtpfHwoaT10aGlzLnBvc2l0aW9uKTt2YXIgcz0iYWJzb2x1dGUiPT09ZT8xOi0xLG49ImFic29sdXRlIiE9PXRoaXMuY3NzUG9zaXRpb258fHRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5kb2N1bWVudFswXSYmdC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSx0aGlzLm9mZnNldFBhcmVudFswXSk/dGhpcy5zY3JvbGxQYXJlbnQ6dGhpcy5vZmZzZXRQYXJlbnQsbz0vKGh0bWx8Ym9keSkvaS50ZXN0KG5bMF0udGFnTmFtZSk7cmV0dXJue3RvcDppLnRvcCt0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3Aqcyt0aGlzLm9mZnNldC5wYXJlbnQudG9wKnMtKCJmaXhlZCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKTpvPzA6bi5zY3JvbGxUb3AoKSkqcyxsZWZ0OmkubGVmdCt0aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0KnMrdGhpcy5vZmZzZXQucGFyZW50LmxlZnQqcy0oImZpeGVkIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKTpvPzA6bi5zY3JvbGxMZWZ0KCkpKnN9fSxfZ2VuZXJhdGVQb3NpdGlvbjpmdW5jdGlvbihlKXt2YXIgaSxzLG49dGhpcy5vcHRpb25zLG89ZS5wYWdlWCxhPWUucGFnZVkscj0iYWJzb2x1dGUiIT09dGhpcy5jc3NQb3NpdGlvbnx8dGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZ0LmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLHRoaXMub2Zmc2V0UGFyZW50WzBdKT90aGlzLnNjcm9sbFBhcmVudDp0aGlzLm9mZnNldFBhcmVudCxoPS8oaHRtbHxib2R5KS9pLnRlc3QoclswXS50YWdOYW1lKTtyZXR1cm4icmVsYXRpdmUiIT09dGhpcy5jc3NQb3NpdGlvbnx8dGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZ0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMub2Zmc2V0UGFyZW50WzBdfHwodGhpcy5vZmZzZXQucmVsYXRpdmU9dGhpcy5fZ2V0UmVsYXRpdmVPZmZzZXQoKSksdGhpcy5vcmlnaW5hbFBvc2l0aW9uJiYodGhpcy5jb250YWlubWVudCYmKGUucGFnZVgtdGhpcy5vZmZzZXQuY2xpY2subGVmdDx0aGlzLmNvbnRhaW5tZW50WzBdJiYobz10aGlzLmNvbnRhaW5tZW50WzBdK3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLGUucGFnZVktdGhpcy5vZmZzZXQuY2xpY2sudG9wPHRoaXMuY29udGFpbm1lbnRbMV0mJihhPXRoaXMuY29udGFpbm1lbnRbMV0rdGhpcy5vZmZzZXQuY2xpY2sudG9wKSxlLnBhZ2VYLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ+dGhpcy5jb250YWlubWVudFsyXSYmKG89dGhpcy5jb250YWlubWVudFsyXSt0aGlzLm9mZnNldC5jbGljay5sZWZ0KSxlLnBhZ2VZLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD50aGlzLmNvbnRhaW5tZW50WzNdJiYoYT10aGlzLmNvbnRhaW5tZW50WzNdK3RoaXMub2Zmc2V0LmNsaWNrLnRvcCkpLG4uZ3JpZCYmKGk9dGhpcy5vcmlnaW5hbFBhZ2VZK01hdGgucm91bmQoKGEtdGhpcy5vcmlnaW5hbFBhZ2VZKS9uLmdyaWRbMV0pKm4uZ3JpZFsxXSxhPXRoaXMuY29udGFpbm1lbnQ/aS10aGlzLm9mZnNldC5jbGljay50b3A+PXRoaXMuY29udGFpbm1lbnRbMV0mJmktdGhpcy5vZmZzZXQuY2xpY2sudG9wPD10aGlzLmNvbnRhaW5tZW50WzNdP2k6aS10aGlzLm9mZnNldC5jbGljay50b3A+PXRoaXMuY29udGFpbm1lbnRbMV0/aS1uLmdyaWRbMV06aStuLmdyaWRbMV06aSxzPXRoaXMub3JpZ2luYWxQYWdlWCtNYXRoLnJvdW5kKChvLXRoaXMub3JpZ2luYWxQYWdlWCkvbi5ncmlkWzBdKSpuLmdyaWRbMF0sbz10aGlzLmNvbnRhaW5tZW50P3MtdGhpcy5vZmZzZXQuY2xpY2subGVmdD49dGhpcy5jb250YWlubWVudFswXSYmcy10aGlzLm9mZnNldC5jbGljay5sZWZ0PD10aGlzLmNvbnRhaW5tZW50WzJdP3M6cy10aGlzLm9mZnNldC5jbGljay5sZWZ0Pj10aGlzLmNvbnRhaW5tZW50WzBdP3Mtbi5ncmlkWzBdOnMrbi5ncmlkWzBdOnMpKSx7dG9wOmEtdGhpcy5vZmZzZXQuY2xpY2sudG9wLXRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcC10aGlzLm9mZnNldC5wYXJlbnQudG9wKygiZml4ZWQiPT09dGhpcy5jc3NQb3NpdGlvbj8tdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCk6aD8wOnIuc2Nyb2xsVG9wKCkpLGxlZnQ6by10aGlzLm9mZnNldC5jbGljay5sZWZ0LXRoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQtdGhpcy5vZmZzZXQucGFyZW50LmxlZnQrKCJmaXhlZCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk6aD8wOnIuc2Nyb2xsTGVmdCgpKX19LF9yZWFycmFuZ2U6ZnVuY3Rpb24odCxlLGkscyl7aT9pWzBdLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pOmUuaXRlbVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyWzBdLCJkb3duIj09PXRoaXMuZGlyZWN0aW9uP2UuaXRlbVswXTplLml0ZW1bMF0ubmV4dFNpYmxpbmcpLHRoaXMuY291bnRlcj10aGlzLmNvdW50ZXI/Kyt0aGlzLmNvdW50ZXI6MTt2YXIgbj10aGlzLmNvdW50ZXI7CnRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7bj09PXRoaXMuY291bnRlciYmdGhpcy5yZWZyZXNoUG9zaXRpb25zKCFzKX0pfSxfY2xlYXI6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBpKHQsZSxpKXtyZXR1cm4gZnVuY3Rpb24ocyl7aS5fdHJpZ2dlcih0LHMsZS5fdWlIYXNoKGUpKX19dGhpcy5yZXZlcnRpbmc9ITE7dmFyIHMsbj1bXTtpZighdGhpcy5fbm9GaW5hbFNvcnQmJnRoaXMuY3VycmVudEl0ZW0ucGFyZW50KCkubGVuZ3RoJiZ0aGlzLnBsYWNlaG9sZGVyLmJlZm9yZSh0aGlzLmN1cnJlbnRJdGVtKSx0aGlzLl9ub0ZpbmFsU29ydD1udWxsLHRoaXMuaGVscGVyWzBdPT09dGhpcy5jdXJyZW50SXRlbVswXSl7Zm9yKHMgaW4gdGhpcy5fc3RvcmVkQ1NTKSgiYXV0byI9PT10aGlzLl9zdG9yZWRDU1Nbc118fCJzdGF0aWMiPT09dGhpcy5fc3RvcmVkQ1NTW3NdKSYmKHRoaXMuX3N0b3JlZENTU1tzXT0iIik7dGhpcy5jdXJyZW50SXRlbS5jc3ModGhpcy5fc3RvcmVkQ1NTKSx0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRJdGVtLCJ1aS1zb3J0YWJsZS1oZWxwZXIiKX1lbHNlIHRoaXMuY3VycmVudEl0ZW0uc2hvdygpO2Zvcih0aGlzLmZyb21PdXRzaWRlJiYhZSYmbi5wdXNoKGZ1bmN0aW9uKHQpe3RoaXMuX3RyaWdnZXIoInJlY2VpdmUiLHQsdGhpcy5fdWlIYXNoKHRoaXMuZnJvbU91dHNpZGUpKX0pLCF0aGlzLmZyb21PdXRzaWRlJiZ0aGlzLmRvbVBvc2l0aW9uLnByZXY9PT10aGlzLmN1cnJlbnRJdGVtLnByZXYoKS5ub3QoIi51aS1zb3J0YWJsZS1oZWxwZXIiKVswXSYmdGhpcy5kb21Qb3NpdGlvbi5wYXJlbnQ9PT10aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpWzBdfHxlfHxuLnB1c2goZnVuY3Rpb24odCl7dGhpcy5fdHJpZ2dlcigidXBkYXRlIix0LHRoaXMuX3VpSGFzaCgpKX0pLHRoaXMhPT10aGlzLmN1cnJlbnRDb250YWluZXImJihlfHwobi5wdXNoKGZ1bmN0aW9uKHQpe3RoaXMuX3RyaWdnZXIoInJlbW92ZSIsdCx0aGlzLl91aUhhc2goKSl9KSxuLnB1c2goZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3QuX3RyaWdnZXIoInJlY2VpdmUiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKX19LmNhbGwodGhpcyx0aGlzLmN1cnJlbnRDb250YWluZXIpKSxuLnB1c2goZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3QuX3RyaWdnZXIoInVwZGF0ZSIsZSx0aGlzLl91aUhhc2godGhpcykpfX0uY2FsbCh0aGlzLHRoaXMuY3VycmVudENvbnRhaW5lcikpKSkscz10aGlzLmNvbnRhaW5lcnMubGVuZ3RoLTE7cz49MDtzLS0pZXx8bi5wdXNoKGkoImRlYWN0aXZhdGUiLHRoaXMsdGhpcy5jb250YWluZXJzW3NdKSksdGhpcy5jb250YWluZXJzW3NdLmNvbnRhaW5lckNhY2hlLm92ZXImJihuLnB1c2goaSgib3V0Iix0aGlzLHRoaXMuY29udGFpbmVyc1tzXSkpLHRoaXMuY29udGFpbmVyc1tzXS5jb250YWluZXJDYWNoZS5vdmVyPTApO2lmKHRoaXMuc3RvcmVkQ3Vyc29yJiYodGhpcy5kb2N1bWVudC5maW5kKCJib2R5IikuY3NzKCJjdXJzb3IiLHRoaXMuc3RvcmVkQ3Vyc29yKSx0aGlzLnN0b3JlZFN0eWxlc2hlZXQucmVtb3ZlKCkpLHRoaXMuX3N0b3JlZE9wYWNpdHkmJnRoaXMuaGVscGVyLmNzcygib3BhY2l0eSIsdGhpcy5fc3RvcmVkT3BhY2l0eSksdGhpcy5fc3RvcmVkWkluZGV4JiZ0aGlzLmhlbHBlci5jc3MoInpJbmRleCIsImF1dG8iPT09dGhpcy5fc3RvcmVkWkluZGV4PyIiOnRoaXMuX3N0b3JlZFpJbmRleCksdGhpcy5kcmFnZ2luZz0hMSxlfHx0aGlzLl90cmlnZ2VyKCJiZWZvcmVTdG9wIix0LHRoaXMuX3VpSGFzaCgpKSx0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wbGFjZWhvbGRlclswXSksdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsfHwodGhpcy5oZWxwZXJbMF0hPT10aGlzLmN1cnJlbnRJdGVtWzBdJiZ0aGlzLmhlbHBlci5yZW1vdmUoKSx0aGlzLmhlbHBlcj1udWxsKSwhZSl7Zm9yKHM9MDtuLmxlbmd0aD5zO3MrKyluW3NdLmNhbGwodGhpcyx0KTt0aGlzLl90cmlnZ2VyKCJzdG9wIix0LHRoaXMuX3VpSGFzaCgpKX1yZXR1cm4gdGhpcy5mcm9tT3V0c2lkZT0hMSwhdGhpcy5jYW5jZWxIZWxwZXJSZW1vdmFsfSxfdHJpZ2dlcjpmdW5jdGlvbigpe3QuV2lkZ2V0LnByb3RvdHlwZS5fdHJpZ2dlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk9PT0hMSYmdGhpcy5jYW5jZWwoKX0sX3VpSGFzaDpmdW5jdGlvbihlKXt2YXIgaT1lfHx0aGlzO3JldHVybntoZWxwZXI6aS5oZWxwZXIscGxhY2Vob2xkZXI6aS5wbGFjZWhvbGRlcnx8dChbXSkscG9zaXRpb246aS5wb3NpdGlvbixvcmlnaW5hbFBvc2l0aW9uOmkub3JpZ2luYWxQb3NpdGlvbixvZmZzZXQ6aS5wb3NpdGlvbkFicyxpdGVtOmkuY3VycmVudEl0ZW0sc2VuZGVyOmU/ZS5lbGVtZW50Om51bGx9fX0pLHQud2lkZ2V0KCJ1aS5zcGlubmVyIix7dmVyc2lvbjoiMS4xMi4xIixkZWZhdWx0RWxlbWVudDoiPGlucHV0PiIsd2lkZ2V0RXZlbnRQcmVmaXg6InNwaW4iLG9wdGlvbnM6e2NsYXNzZXM6eyJ1aS1zcGlubmVyIjoidWktY29ybmVyLWFsbCIsInVpLXNwaW5uZXItZG93biI6InVpLWNvcm5lci1iciIsInVpLXNwaW5uZXItdXAiOiJ1aS1jb3JuZXItdHIifSxjdWx0dXJlOm51bGwsaWNvbnM6e2Rvd246InVpLWljb24tdHJpYW5nbGUtMS1zIix1cDoidWktaWNvbi10cmlhbmdsZS0xLW4ifSxpbmNyZW1lbnRhbDohMCxtYXg6bnVsbCxtaW46bnVsbCxudW1iZXJGb3JtYXQ6bnVsbCxwYWdlOjEwLHN0ZXA6MSxjaGFuZ2U6bnVsbCxzcGluOm51bGwsc3RhcnQ6bnVsbCxzdG9wOm51bGx9LF9jcmVhdGU6ZnVuY3Rpb24oKXt0aGlzLl9zZXRPcHRpb24oIm1heCIsdGhpcy5vcHRpb25zLm1heCksdGhpcy5fc2V0T3B0aW9uKCJtaW4iLHRoaXMub3B0aW9ucy5taW4pLHRoaXMuX3NldE9wdGlvbigic3RlcCIsdGhpcy5vcHRpb25zLnN0ZXApLCIiIT09dGhpcy52YWx1ZSgpJiZ0aGlzLl92YWx1ZSh0aGlzLmVsZW1lbnQudmFsKCksITApLHRoaXMuX2RyYXcoKSx0aGlzLl9vbih0aGlzLl9ldmVudHMpLHRoaXMuX3JlZnJlc2goKSx0aGlzLl9vbih0aGlzLndpbmRvdyx7YmVmb3JldW5sb2FkOmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoImF1dG9jb21wbGV0ZSIpfX0pfSxfZ2V0Q3JlYXRlT3B0aW9uczpmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3N1cGVyKCksaT10aGlzLmVsZW1lbnQ7cmV0dXJuIHQuZWFjaChbIm1pbiIsIm1heCIsInN0ZXAiXSxmdW5jdGlvbih0LHMpe3ZhciBuPWkuYXR0cihzKTtudWxsIT1uJiZuLmxlbmd0aCYmKGVbc109bil9KSxlfSxfZXZlbnRzOntrZXlkb3duOmZ1bmN0aW9uKHQpe3RoaXMuX3N0YXJ0KHQpJiZ0aGlzLl9rZXlkb3duKHQpJiZ0LnByZXZlbnREZWZhdWx0KCl9LGtleXVwOiJfc3RvcCIsZm9jdXM6ZnVuY3Rpb24oKXt0aGlzLnByZXZpb3VzPXRoaXMuZWxlbWVudC52YWwoKX0sYmx1cjpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jYW5jZWxCbHVyPyhkZWxldGUgdGhpcy5jYW5jZWxCbHVyLHZvaWQgMCk6KHRoaXMuX3N0b3AoKSx0aGlzLl9yZWZyZXNoKCksdGhpcy5wcmV2aW91cyE9PXRoaXMuZWxlbWVudC52YWwoKSYmdGhpcy5fdHJpZ2dlcigiY2hhbmdlIix0KSx2b2lkIDApfSxtb3VzZXdoZWVsOmZ1bmN0aW9uKHQsZSl7aWYoZSl7aWYoIXRoaXMuc3Bpbm5pbmcmJiF0aGlzLl9zdGFydCh0KSlyZXR1cm4hMTt0aGlzLl9zcGluKChlPjA/MTotMSkqdGhpcy5vcHRpb25zLnN0ZXAsdCksY2xlYXJUaW1lb3V0KHRoaXMubW91c2V3aGVlbFRpbWVyKSx0aGlzLm1vdXNld2hlZWxUaW1lcj10aGlzLl9kZWxheShmdW5jdGlvbigpe3RoaXMuc3Bpbm5pbmcmJnRoaXMuX3N0b3AodCl9LDEwMCksdC5wcmV2ZW50RGVmYXVsdCgpfX0sIm1vdXNlZG93biAudWktc3Bpbm5lci1idXR0b24iOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGkoKXt2YXIgZT10aGlzLmVsZW1lbnRbMF09PT10LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pO2V8fCh0aGlzLmVsZW1lbnQudHJpZ2dlcigiZm9jdXMiKSx0aGlzLnByZXZpb3VzPXMsdGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt0aGlzLnByZXZpb3VzPXN9KSl9dmFyIHM7cz10aGlzLmVsZW1lbnRbMF09PT10LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pP3RoaXMucHJldmlvdXM6dGhpcy5lbGVtZW50LnZhbCgpLGUucHJldmVudERlZmF1bHQoKSxpLmNhbGwodGhpcyksdGhpcy5jYW5jZWxCbHVyPSEwLHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cixpLmNhbGwodGhpcyl9KSx0aGlzLl9zdGFydChlKSE9PSExJiZ0aGlzLl9yZXBlYXQobnVsbCx0KGUuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoInVpLXNwaW5uZXItdXAiKT8xOi0xLGUpfSwibW91c2V1cCAudWktc3Bpbm5lci1idXR0b24iOiJfc3RvcCIsIm1vdXNlZW50ZXIgLnVpLXNwaW5uZXItYnV0dG9uIjpmdW5jdGlvbihlKXtyZXR1cm4gdChlLmN1cnJlbnRUYXJnZXQpLmhhc0NsYXNzKCJ1aS1zdGF0ZS1hY3RpdmUiKT90aGlzLl9zdGFydChlKT09PSExPyExOih0aGlzLl9yZXBlYXQobnVsbCx0KGUuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoInVpLXNwaW5uZXItdXAiKT8xOi0xLGUpLHZvaWQgMCk6dm9pZCAwfSwibW91c2VsZWF2ZSAudWktc3Bpbm5lci1idXR0b24iOiJfc3RvcCJ9LF9lbmhhbmNlOmZ1bmN0aW9uKCl7dGhpcy51aVNwaW5uZXI9dGhpcy5lbGVtZW50LmF0dHIoImF1dG9jb21wbGV0ZSIsIm9mZiIpLndyYXAoIjxzcGFuPiIpLnBhcmVudCgpLmFwcGVuZCgiPGE+PC9hPjxhPjwvYT4iKX0sX2RyYXc6ZnVuY3Rpb24oKXt0aGlzLl9lbmhhbmNlKCksdGhpcy5fYWRkQ2xhc3ModGhpcy51aVNwaW5uZXIsInVpLXNwaW5uZXIiLCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQiKSx0aGlzLl9hZGRDbGFzcygidWktc3Bpbm5lci1pbnB1dCIpLHRoaXMuZWxlbWVudC5hdHRyKCJyb2xlIiwic3BpbmJ1dHRvbiIpLHRoaXMuYnV0dG9ucz10aGlzLnVpU3Bpbm5lci5jaGlsZHJlbigiYSIpLmF0dHIoInRhYkluZGV4IiwtMSkuYXR0cigiYXJpYS1oaWRkZW4iLCEwKS5idXR0b24oe2NsYXNzZXM6eyJ1aS1idXR0b24iOiIifX0pLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuYnV0dG9ucywidWktY29ybmVyLWFsbCIpLHRoaXMuX2FkZENsYXNzKHRoaXMuYnV0dG9ucy5maXJzdCgpLCJ1aS1zcGlubmVyLWJ1dHRvbiB1aS1zcGlubmVyLXVwIiksdGhpcy5fYWRkQ2xhc3ModGhpcy5idXR0b25zLmxhc3QoKSwidWktc3Bpbm5lci1idXR0b24gdWktc3Bpbm5lci1kb3duIiksdGhpcy5idXR0b25zLmZpcnN0KCkuYnV0dG9uKHtpY29uOnRoaXMub3B0aW9ucy5pY29ucy51cCxzaG93TGFiZWw6ITF9KSx0aGlzLmJ1dHRvbnMubGFzdCgpLmJ1dHRvbih7aWNvbjp0aGlzLm9wdGlvbnMuaWNvbnMuZG93bixzaG93TGFiZWw6ITF9KSx0aGlzLmJ1dHRvbnMuaGVpZ2h0KCk+TWF0aC5jZWlsKC41KnRoaXMudWlTcGlubmVyLmhlaWdodCgpKSYmdGhpcy51aVNwaW5uZXIuaGVpZ2h0KCk+MCYmdGhpcy51aVNwaW5uZXIuaGVpZ2h0KHRoaXMudWlTcGlubmVyLmhlaWdodCgpKX0sX2tleWRvd246ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLHM9dC51aS5rZXlDb2RlO3N3aXRjaChlLmtleUNvZGUpe2Nhc2Ugcy5VUDpyZXR1cm4gdGhpcy5fcmVwZWF0KG51bGwsMSxlKSwhMDtjYXNlIHMuRE9XTjpyZXR1cm4gdGhpcy5fcmVwZWF0KG51bGwsLTEsZSksITA7Y2FzZSBzLlBBR0VfVVA6cmV0dXJuIHRoaXMuX3JlcGVhdChudWxsLGkucGFnZSxlKSwhMDtjYXNlIHMuUEFHRV9ET1dOOnJldHVybiB0aGlzLl9yZXBlYXQobnVsbCwtaS5wYWdlLGUpLCEwfXJldHVybiExfSxfc3RhcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3Bpbm5pbmd8fHRoaXMuX3RyaWdnZXIoInN0YXJ0Iix0KSE9PSExPyh0aGlzLmNvdW50ZXJ8fCh0aGlzLmNvdW50ZXI9MSksdGhpcy5zcGlubmluZz0hMCwhMCk6ITF9LF9yZXBlYXQ6ZnVuY3Rpb24odCxlLGkpe3Q9dHx8NTAwLGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSx0aGlzLnRpbWVyPXRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7dGhpcy5fcmVwZWF0KDQwLGUsaSl9LHQpLHRoaXMuX3NwaW4oZSp0aGlzLm9wdGlvbnMuc3RlcCxpKX0sX3NwaW46ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLnZhbHVlKCl8fDA7dGhpcy5jb3VudGVyfHwodGhpcy5jb3VudGVyPTEpLGk9dGhpcy5fYWRqdXN0VmFsdWUoaSt0KnRoaXMuX2luY3JlbWVudCh0aGlzLmNvdW50ZXIpKSx0aGlzLnNwaW5uaW5nJiZ0aGlzLl90cmlnZ2VyKCJzcGluIixlLHt2YWx1ZTppfSk9PT0hMXx8KHRoaXMuX3ZhbHVlKGkpLHRoaXMuY291bnRlcisrKX0sX2luY3JlbWVudDpmdW5jdGlvbihlKXt2YXIgaT10aGlzLm9wdGlvbnMuaW5jcmVtZW50YWw7cmV0dXJuIGk/dC5pc0Z1bmN0aW9uKGkpP2koZSk6TWF0aC5mbG9vcihlKmUqZS81ZTQtZSplLzUwMCsxNyplLzIwMCsxKToxfSxfcHJlY2lzaW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fcHJlY2lzaW9uT2YodGhpcy5vcHRpb25zLnN0ZXApO3JldHVybiBudWxsIT09dGhpcy5vcHRpb25zLm1pbiYmKHQ9TWF0aC5tYXgodCx0aGlzLl9wcmVjaXNpb25PZih0aGlzLm9wdGlvbnMubWluKSkpLHR9LF9wcmVjaXNpb25PZjpmdW5jdGlvbih0KXt2YXIgZT0iIit0LGk9ZS5pbmRleE9mKCIuIik7cmV0dXJuLTE9PT1pPzA6ZS5sZW5ndGgtaS0xfSxfYWRqdXN0VmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsaSxzPXRoaXMub3B0aW9ucztyZXR1cm4gZT1udWxsIT09cy5taW4/cy5taW46MCxpPXQtZSxpPU1hdGgucm91bmQoaS9zLnN0ZXApKnMuc3RlcCx0PWUraSx0PXBhcnNlRmxvYXQodC50b0ZpeGVkKHRoaXMuX3ByZWNpc2lvbigpKSksbnVsbCE9PXMubWF4JiZ0PnMubWF4P3MubWF4Om51bGwhPT1zLm1pbiYmcy5taW4+dD9zLm1pbjp0fSxfc3RvcDpmdW5jdGlvbih0KXt0aGlzLnNwaW5uaW5nJiYoY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLGNsZWFyVGltZW91dCh0aGlzLm1vdXNld2hlZWxUaW1lciksdGhpcy5jb3VudGVyPTAsdGhpcy5zcGlubmluZz0hMSx0aGlzLl90cmlnZ2VyKCJzdG9wIix0KSl9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXt2YXIgaSxzLG47cmV0dXJuImN1bHR1cmUiPT09dHx8Im51bWJlckZvcm1hdCI9PT10PyhpPXRoaXMuX3BhcnNlKHRoaXMuZWxlbWVudC52YWwoKSksdGhpcy5vcHRpb25zW3RdPWUsdGhpcy5lbGVtZW50LnZhbCh0aGlzLl9mb3JtYXQoaSkpLHZvaWQgMCk6KCgibWF4Ij09PXR8fCJtaW4iPT09dHx8InN0ZXAiPT09dCkmJiJzdHJpbmciPT10eXBlb2YgZSYmKGU9dGhpcy5fcGFyc2UoZSkpLCJpY29ucyI9PT10JiYocz10aGlzLmJ1dHRvbnMuZmlyc3QoKS5maW5kKCIudWktaWNvbiIpLHRoaXMuX3JlbW92ZUNsYXNzKHMsbnVsbCx0aGlzLm9wdGlvbnMuaWNvbnMudXApLHRoaXMuX2FkZENsYXNzKHMsbnVsbCxlLnVwKSxuPXRoaXMuYnV0dG9ucy5sYXN0KCkuZmluZCgiLnVpLWljb24iKSx0aGlzLl9yZW1vdmVDbGFzcyhuLG51bGwsdGhpcy5vcHRpb25zLmljb25zLmRvd24pLHRoaXMuX2FkZENsYXNzKG4sbnVsbCxlLmRvd24pKSx0aGlzLl9zdXBlcih0LGUpLHZvaWQgMCl9LF9zZXRPcHRpb25EaXNhYmxlZDpmdW5jdGlvbih0KXt0aGlzLl9zdXBlcih0KSx0aGlzLl90b2dnbGVDbGFzcyh0aGlzLnVpU3Bpbm5lcixudWxsLCJ1aS1zdGF0ZS1kaXNhYmxlZCIsISF0KSx0aGlzLmVsZW1lbnQucHJvcCgiZGlzYWJsZWQiLCEhdCksdGhpcy5idXR0b25zLmJ1dHRvbih0PyJkaXNhYmxlIjoiZW5hYmxlIil9LF9zZXRPcHRpb25zOnIoZnVuY3Rpb24odCl7dGhpcy5fc3VwZXIodCl9KSxfcGFyc2U6ZnVuY3Rpb24odCl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiB0JiYiIiE9PXQmJih0PXdpbmRvdy5HbG9iYWxpemUmJnRoaXMub3B0aW9ucy5udW1iZXJGb3JtYXQ/R2xvYmFsaXplLnBhcnNlRmxvYXQodCwxMCx0aGlzLm9wdGlvbnMuY3VsdHVyZSk6K3QpLCIiPT09dHx8aXNOYU4odCk/bnVsbDp0fSxfZm9ybWF0OmZ1bmN0aW9uKHQpe3JldHVybiIiPT09dD8iIjp3aW5kb3cuR2xvYmFsaXplJiZ0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0P0dsb2JhbGl6ZS5mb3JtYXQodCx0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0LHRoaXMub3B0aW9ucy5jdWx0dXJlKTp0fSxfcmVmcmVzaDpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5hdHRyKHsiYXJpYS12YWx1ZW1pbiI6dGhpcy5vcHRpb25zLm1pbiwiYXJpYS12YWx1ZW1heCI6dGhpcy5vcHRpb25zLm1heCwiYXJpYS12YWx1ZW5vdyI6dGhpcy5fcGFyc2UodGhpcy5lbGVtZW50LnZhbCgpKX0pfSxpc1ZhbGlkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy52YWx1ZSgpO3JldHVybiBudWxsPT09dD8hMTp0PT09dGhpcy5fYWRqdXN0VmFsdWUodCl9LF92YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBpOyIiIT09dCYmKGk9dGhpcy5fcGFyc2UodCksbnVsbCE9PWkmJihlfHwoaT10aGlzLl9hZGp1c3RWYWx1ZShpKSksdD10aGlzLl9mb3JtYXQoaSkpKSx0aGlzLmVsZW1lbnQudmFsKHQpLHRoaXMuX3JlZnJlc2goKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucHJvcCgiZGlzYWJsZWQiLCExKS5yZW1vdmVBdHRyKCJhdXRvY29tcGxldGUgcm9sZSBhcmlhLXZhbHVlbWluIGFyaWEtdmFsdWVtYXggYXJpYS12YWx1ZW5vdyIpLHRoaXMudWlTcGlubmVyLnJlcGxhY2VXaXRoKHRoaXMuZWxlbWVudCl9LHN0ZXBVcDpyKGZ1bmN0aW9uKHQpe3RoaXMuX3N0ZXBVcCh0KX0pLF9zdGVwVXA6ZnVuY3Rpb24odCl7dGhpcy5fc3RhcnQoKSYmKHRoaXMuX3NwaW4oKHR8fDEpKnRoaXMub3B0aW9ucy5zdGVwKSx0aGlzLl9zdG9wKCkpfSxzdGVwRG93bjpyKGZ1bmN0aW9uKHQpe3RoaXMuX3N0ZXBEb3duKHQpfSksX3N0ZXBEb3duOmZ1bmN0aW9uKHQpe3RoaXMuX3N0YXJ0KCkmJih0aGlzLl9zcGluKCh0fHwxKSotdGhpcy5vcHRpb25zLnN0ZXApLHRoaXMuX3N0b3AoKSl9LHBhZ2VVcDpyKGZ1bmN0aW9uKHQpe3RoaXMuX3N0ZXBVcCgodHx8MSkqdGhpcy5vcHRpb25zLnBhZ2UpfSkscGFnZURvd246cihmdW5jdGlvbih0KXt0aGlzLl9zdGVwRG93bigodHx8MSkqdGhpcy5vcHRpb25zLnBhZ2UpfSksdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHIodGhpcy5fdmFsdWUpLmNhbGwodGhpcyx0KSx2b2lkIDApOnRoaXMuX3BhcnNlKHRoaXMuZWxlbWVudC52YWwoKSl9LHdpZGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnVpU3Bpbm5lcn19KSx0LnVpQmFja0NvbXBhdCE9PSExJiZ0LndpZGdldCgidWkuc3Bpbm5lciIsdC51aS5zcGlubmVyLHtfZW5oYW5jZTpmdW5jdGlvbigpe3RoaXMudWlTcGlubmVyPXRoaXMuZWxlbWVudC5hdHRyKCJhdXRvY29tcGxldGUiLCJvZmYiKS53cmFwKHRoaXMuX3VpU3Bpbm5lckh0bWwoKSkucGFyZW50KCkuYXBwZW5kKHRoaXMuX2J1dHRvbkh0bWwoKSl9LF91aVNwaW5uZXJIdG1sOmZ1bmN0aW9uKCl7cmV0dXJuIjxzcGFuPiJ9LF9idXR0b25IdG1sOmZ1bmN0aW9uKCl7cmV0dXJuIjxhPjwvYT48YT48L2E+In19KSx0LnVpLnNwaW5uZXIsdC53aWRnZXQoInVpLnRhYnMiLHt2ZXJzaW9uOiIxLjEyLjEiLGRlbGF5OjMwMCxvcHRpb25zOnthY3RpdmU6bnVsbCxjbGFzc2VzOnsidWktdGFicyI6InVpLWNvcm5lci1hbGwiLCJ1aS10YWJzLW5hdiI6InVpLWNvcm5lci1hbGwiLCJ1aS10YWJzLXBhbmVsIjoidWktY29ybmVyLWJvdHRvbSIsInVpLXRhYnMtdGFiIjoidWktY29ybmVyLXRvcCJ9LGNvbGxhcHNpYmxlOiExLGV2ZW50OiJjbGljayIsaGVpZ2h0U3R5bGU6ImNvbnRlbnQiLGhpZGU6bnVsbCxzaG93Om51bGwsYWN0aXZhdGU6bnVsbCxiZWZvcmVBY3RpdmF0ZTpudWxsLGJlZm9yZUxvYWQ6bnVsbCxsb2FkOm51bGx9LF9pc0xvY2FsOmZ1bmN0aW9uKCl7dmFyIHQ9LyMuKiQvO3JldHVybiBmdW5jdGlvbihlKXt2YXIgaSxzO2k9ZS5ocmVmLnJlcGxhY2UodCwiIikscz1sb2NhdGlvbi5ocmVmLnJlcGxhY2UodCwiIik7dHJ5e2k9ZGVjb2RlVVJJQ29tcG9uZW50KGkpfWNhdGNoKG4pe310cnl7cz1kZWNvZGVVUklDb21wb25lbnQocyl9Y2F0Y2gobil7fXJldHVybiBlLmhhc2gubGVuZ3RoPjEmJmk9PT1zfX0oKSxfY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxpPXRoaXMub3B0aW9uczt0aGlzLnJ1bm5pbmc9ITEsdGhpcy5fYWRkQ2xhc3MoInVpLXRhYnMiLCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQiKSx0aGlzLl90b2dnbGVDbGFzcygidWktdGFicy1jb2xsYXBzaWJsZSIsbnVsbCxpLmNvbGxhcHNpYmxlKSx0aGlzLl9wcm9jZXNzVGFicygpLGkuYWN0aXZlPXRoaXMuX2luaXRpYWxBY3RpdmUoKSx0LmlzQXJyYXkoaS5kaXNhYmxlZCkmJihpLmRpc2FibGVkPXQudW5pcXVlKGkuZGlzYWJsZWQuY29uY2F0KHQubWFwKHRoaXMudGFicy5maWx0ZXIoIi51aS1zdGF0ZS1kaXNhYmxlZCIpLGZ1bmN0aW9uKHQpe3JldHVybiBlLnRhYnMuaW5kZXgodCl9KSkpLnNvcnQoKSksdGhpcy5hY3RpdmU9dGhpcy5vcHRpb25zLmFjdGl2ZSE9PSExJiZ0aGlzLmFuY2hvcnMubGVuZ3RoP3RoaXMuX2ZpbmRBY3RpdmUoaS5hY3RpdmUpOnQoKSx0aGlzLl9yZWZyZXNoKCksdGhpcy5hY3RpdmUubGVuZ3RoJiZ0aGlzLmxvYWQoaS5hY3RpdmUpfSxfaW5pdGlhbEFjdGl2ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9ucy5hY3RpdmUsaT10aGlzLm9wdGlvbnMuY29sbGFwc2libGUscz1sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKTtyZXR1cm4gbnVsbD09PWUmJihzJiZ0aGlzLnRhYnMuZWFjaChmdW5jdGlvbihpLG4pe3JldHVybiB0KG4pLmF0dHIoImFyaWEtY29udHJvbHMiKT09PXM/KGU9aSwhMSk6dm9pZCAwfSksbnVsbD09PWUmJihlPXRoaXMudGFicy5pbmRleCh0aGlzLnRhYnMuZmlsdGVyKCIudWktdGFicy1hY3RpdmUiKSkpLChudWxsPT09ZXx8LTE9PT1lKSYmKGU9dGhpcy50YWJzLmxlbmd0aD8wOiExKSksZSE9PSExJiYoZT10aGlzLnRhYnMuaW5kZXgodGhpcy50YWJzLmVxKGUpKSwtMT09PWUmJihlPWk/ITE6MCkpLCFpJiZlPT09ITEmJnRoaXMuYW5jaG9ycy5sZW5ndGgmJihlPTApLGV9LF9nZXRDcmVhdGVFdmVudERhdGE6ZnVuY3Rpb24oKXtyZXR1cm57dGFiOnRoaXMuYWN0aXZlLHBhbmVsOnRoaXMuYWN0aXZlLmxlbmd0aD90aGlzLl9nZXRQYW5lbEZvclRhYih0aGlzLmFjdGl2ZSk6dCgpfX0sX3RhYktleWRvd246ZnVuY3Rpb24oZSl7dmFyIGk9dCh0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pKS5jbG9zZXN0KCJsaSIpLHM9dGhpcy50YWJzLmluZGV4KGkpLG49ITA7aWYoIXRoaXMuX2hhbmRsZVBhZ2VOYXYoZSkpe3N3aXRjaChlLmtleUNvZGUpe2Nhc2UgdC51aS5rZXlDb2RlLlJJR0hUOmNhc2UgdC51aS5rZXlDb2RlLkRPV046cysrO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlVQOmNhc2UgdC51aS5rZXlDb2RlLkxFRlQ6bj0hMSxzLS07YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRU5EOnM9dGhpcy5hbmNob3JzLmxlbmd0aC0xO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkhPTUU6cz0wO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlNQQUNFOnJldHVybiBlLnByZXZlbnREZWZhdWx0KCksY2xlYXJUaW1lb3V0KHRoaXMuYWN0aXZhdGluZyksdGhpcy5fYWN0aXZhdGUocyksdm9pZCAwO2Nhc2UgdC51aS5rZXlDb2RlLkVOVEVSOnJldHVybiBlLnByZXZlbnREZWZhdWx0KCksY2xlYXJUaW1lb3V0KHRoaXMuYWN0aXZhdGluZyksdGhpcy5fYWN0aXZhdGUocz09PXRoaXMub3B0aW9ucy5hY3RpdmU/ITE6cyksdm9pZCAwO2RlZmF1bHQ6cmV0dXJufWUucHJldmVudERlZmF1bHQoKSxjbGVhclRpbWVvdXQodGhpcy5hY3RpdmF0aW5nKSxzPXRoaXMuX2ZvY3VzTmV4dFRhYihzLG4pLGUuY3RybEtleXx8ZS5tZXRhS2V5fHwoaS5hdHRyKCJhcmlhLXNlbGVjdGVkIiwiZmFsc2UiKSx0aGlzLnRhYnMuZXEocykuYXR0cigiYXJpYS1zZWxlY3RlZCIsInRydWUiKSx0aGlzLmFjdGl2YXRpbmc9dGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt0aGlzLm9wdGlvbigiYWN0aXZlIixzKX0sdGhpcy5kZWxheSkpfX0sX3BhbmVsS2V5ZG93bjpmdW5jdGlvbihlKXt0aGlzLl9oYW5kbGVQYWdlTmF2KGUpfHxlLmN0cmxLZXkmJmUua2V5Q29kZT09PXQudWkua2V5Q29kZS5VUCYmKGUucHJldmVudERlZmF1bHQoKSx0aGlzLmFjdGl2ZS50cmlnZ2VyKCJmb2N1cyIpKX0sX2hhbmRsZVBhZ2VOYXY6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuYWx0S2V5JiZlLmtleUNvZGU9PT10LnVpLmtleUNvZGUuUEFHRV9VUD8odGhpcy5fYWN0aXZhdGUodGhpcy5fZm9jdXNOZXh0VGFiKHRoaXMub3B0aW9ucy5hY3RpdmUtMSwhMSkpLCEwKTplLmFsdEtleSYmZS5rZXlDb2RlPT09dC51aS5rZXlDb2RlLlBBR0VfRE9XTj8odGhpcy5fYWN0aXZhdGUodGhpcy5fZm9jdXNOZXh0VGFiKHRoaXMub3B0aW9ucy5hY3RpdmUrMSwhMCkpLCEwKTp2b2lkIDB9LF9maW5kTmV4dFRhYjpmdW5jdGlvbihlLGkpe2Z1bmN0aW9uIHMoKXtyZXR1cm4gZT5uJiYoZT0wKSwwPmUmJihlPW4pLGV9Zm9yKHZhciBuPXRoaXMudGFicy5sZW5ndGgtMTstMSE9PXQuaW5BcnJheShzKCksdGhpcy5vcHRpb25zLmRpc2FibGVkKTspZT1pP2UrMTplLTE7cmV0dXJuIGV9LF9mb2N1c05leHRUYWI6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD10aGlzLl9maW5kTmV4dFRhYih0LGUpLHRoaXMudGFicy5lcSh0KS50cmlnZ2VyKCJmb2N1cyIpLHR9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXtyZXR1cm4iYWN0aXZlIj09PXQ/KHRoaXMuX2FjdGl2YXRlKGUpLHZvaWQgMCk6KHRoaXMuX3N1cGVyKHQsZSksImNvbGxhcHNpYmxlIj09PXQmJih0aGlzLl90b2dnbGVDbGFzcygidWktdGFicy1jb2xsYXBzaWJsZSIsbnVsbCxlKSxlfHx0aGlzLm9wdGlvbnMuYWN0aXZlIT09ITF8fHRoaXMuX2FjdGl2YXRlKDApKSwiZXZlbnQiPT09dCYmdGhpcy5fc2V0dXBFdmVudHMoZSksImhlaWdodFN0eWxlIj09PXQmJnRoaXMuX3NldHVwSGVpZ2h0U3R5bGUoZSksdm9pZCAwKX0sX3Nhbml0aXplU2VsZWN0b3I6ZnVuY3Rpb24odCl7cmV0dXJuIHQ/dC5yZXBsYWNlKC9bISIkJSYnKCkqKywuXC86Ozw9Pj9AXFtcXVxeYHt8fX5dL2csIlxcJCYiKToiIn0scmVmcmVzaDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9ucyxpPXRoaXMudGFibGlzdC5jaGlsZHJlbigiOmhhcyhhW2hyZWZdKSIpO2UuZGlzYWJsZWQ9dC5tYXAoaS5maWx0ZXIoIi51aS1zdGF0ZS1kaXNhYmxlZCIpLGZ1bmN0aW9uKHQpe3JldHVybiBpLmluZGV4KHQpfSksdGhpcy5fcHJvY2Vzc1RhYnMoKSxlLmFjdGl2ZSE9PSExJiZ0aGlzLmFuY2hvcnMubGVuZ3RoP3RoaXMuYWN0aXZlLmxlbmd0aCYmIXQuY29udGFpbnModGhpcy50YWJsaXN0WzBdLHRoaXMuYWN0aXZlWzBdKT90aGlzLnRhYnMubGVuZ3RoPT09ZS5kaXNhYmxlZC5sZW5ndGg/KGUuYWN0aXZlPSExLHRoaXMuYWN0aXZlPXQoKSk6dGhpcy5fYWN0aXZhdGUodGhpcy5fZmluZE5leHRUYWIoTWF0aC5tYXgoMCxlLmFjdGl2ZS0xKSwhMSkpOmUuYWN0aXZlPXRoaXMudGFicy5pbmRleCh0aGlzLmFjdGl2ZSk6KGUuYWN0aXZlPSExLHRoaXMuYWN0aXZlPXQoKSksdGhpcy5fcmVmcmVzaCgpfSxfcmVmcmVzaDpmdW5jdGlvbigpe3RoaXMuX3NldE9wdGlvbkRpc2FibGVkKHRoaXMub3B0aW9ucy5kaXNhYmxlZCksdGhpcy5fc2V0dXBFdmVudHModGhpcy5vcHRpb25zLmV2ZW50KSx0aGlzLl9zZXR1cEhlaWdodFN0eWxlKHRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSksdGhpcy50YWJzLm5vdCh0aGlzLmFjdGl2ZSkuYXR0cih7ImFyaWEtc2VsZWN0ZWQiOiJmYWxzZSIsImFyaWEtZXhwYW5kZWQiOiJmYWxzZSIsdGFiSW5kZXg6LTF9KSx0aGlzLnBhbmVscy5ub3QodGhpcy5fZ2V0UGFuZWxGb3JUYWIodGhpcy5hY3RpdmUpKS5oaWRlKCkuYXR0cih7ImFyaWEtaGlkZGVuIjoidHJ1ZSJ9KSx0aGlzLmFjdGl2ZS5sZW5ndGg/KHRoaXMuYWN0aXZlLmF0dHIoeyJhcmlhLXNlbGVjdGVkIjoidHJ1ZSIsImFyaWEtZXhwYW5kZWQiOiJ0cnVlIix0YWJJbmRleDowfSksdGhpcy5fYWRkQ2xhc3ModGhpcy5hY3RpdmUsInVpLXRhYnMtYWN0aXZlIiwidWktc3RhdGUtYWN0aXZlIiksdGhpcy5fZ2V0UGFuZWxGb3JUYWIodGhpcy5hY3RpdmUpLnNob3coKS5hdHRyKHsiYXJpYS1oaWRkZW4iOiJmYWxzZSJ9KSk6dGhpcy50YWJzLmVxKDApLmF0dHIoInRhYkluZGV4IiwwKX0sX3Byb2Nlc3NUYWJzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxpPXRoaXMudGFicyxzPXRoaXMuYW5jaG9ycyxuPXRoaXMucGFuZWxzO3RoaXMudGFibGlzdD10aGlzLl9nZXRMaXN0KCkuYXR0cigicm9sZSIsInRhYmxpc3QiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnRhYmxpc3QsInVpLXRhYnMtbmF2IiwidWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyIiksdGhpcy50YWJsaXN0Lm9uKCJtb3VzZWRvd24iK3RoaXMuZXZlbnROYW1lc3BhY2UsIj4gbGkiLGZ1bmN0aW9uKGUpe3QodGhpcykuaXMoIi51aS1zdGF0ZS1kaXNhYmxlZCIpJiZlLnByZXZlbnREZWZhdWx0KCl9KS5vbigiZm9jdXMiK3RoaXMuZXZlbnROYW1lc3BhY2UsIi51aS10YWJzLWFuY2hvciIsZnVuY3Rpb24oKXt0KHRoaXMpLmNsb3Nlc3QoImxpIikuaXMoIi51aS1zdGF0ZS1kaXNhYmxlZCIpJiZ0aGlzLmJsdXIoKX0pLHRoaXMudGFicz10aGlzLnRhYmxpc3QuZmluZCgiPiBsaTpoYXMoYVtocmVmXSkiKS5hdHRyKHtyb2xlOiJ0YWIiLHRhYkluZGV4Oi0xfSksdGhpcy5fYWRkQ2xhc3ModGhpcy50YWJzLCJ1aS10YWJzLXRhYiIsInVpLXN0YXRlLWRlZmF1bHQiKSx0aGlzLmFuY2hvcnM9dGhpcy50YWJzLm1hcChmdW5jdGlvbigpe3JldHVybiB0KCJhIix0aGlzKVswXX0pLmF0dHIoe3JvbGU6InByZXNlbnRhdGlvbiIsdGFiSW5kZXg6LTF9KSx0aGlzLl9hZGRDbGFzcyh0aGlzLmFuY2hvcnMsInVpLXRhYnMtYW5jaG9yIiksdGhpcy5wYW5lbHM9dCgpLHRoaXMuYW5jaG9ycy5lYWNoKGZ1bmN0aW9uKGkscyl7dmFyIG4sbyxhLHI9dChzKS51bmlxdWVJZCgpLmF0dHIoImlkIiksaD10KHMpLmNsb3Nlc3QoImxpIiksbD1oLmF0dHIoImFyaWEtY29udHJvbHMiKTtlLl9pc0xvY2FsKHMpPyhuPXMuaGFzaCxhPW4uc3Vic3RyaW5nKDEpLG89ZS5lbGVtZW50LmZpbmQoZS5fc2FuaXRpemVTZWxlY3RvcihuKSkpOihhPWguYXR0cigiYXJpYS1jb250cm9scyIpfHx0KHt9KS51bmlxdWVJZCgpWzBdLmlkLG49IiMiK2Esbz1lLmVsZW1lbnQuZmluZChuKSxvLmxlbmd0aHx8KG89ZS5fY3JlYXRlUGFuZWwoYSksby5pbnNlcnRBZnRlcihlLnBhbmVsc1tpLTFdfHxlLnRhYmxpc3QpKSxvLmF0dHIoImFyaWEtbGl2ZSIsInBvbGl0ZSIpKSxvLmxlbmd0aCYmKGUucGFuZWxzPWUucGFuZWxzLmFkZChvKSksbCYmaC5kYXRhKCJ1aS10YWJzLWFyaWEtY29udHJvbHMiLGwpLGguYXR0cih7ImFyaWEtY29udHJvbHMiOmEsImFyaWEtbGFiZWxsZWRieSI6cn0pLG8uYXR0cigiYXJpYS1sYWJlbGxlZGJ5IixyKX0pLHRoaXMucGFuZWxzLmF0dHIoInJvbGUiLCJ0YWJwYW5lbCIpLHRoaXMuX2FkZENsYXNzKHRoaXMucGFuZWxzLCJ1aS10YWJzLXBhbmVsIiwidWktd2lkZ2V0LWNvbnRlbnQiKSxpJiYodGhpcy5fb2ZmKGkubm90KHRoaXMudGFicykpLHRoaXMuX29mZihzLm5vdCh0aGlzLmFuY2hvcnMpKSx0aGlzLl9vZmYobi5ub3QodGhpcy5wYW5lbHMpKSl9LF9nZXRMaXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGFibGlzdHx8dGhpcy5lbGVtZW50LmZpbmQoIm9sLCB1bCIpLmVxKDApfSxfY3JlYXRlUGFuZWw6ZnVuY3Rpb24oZSl7cmV0dXJuIHQoIjxkaXY+IikuYXR0cigiaWQiLGUpLmRhdGEoInVpLXRhYnMtZGVzdHJveSIsITApfSxfc2V0T3B0aW9uRGlzYWJsZWQ6ZnVuY3Rpb24oZSl7dmFyIGkscyxuO2Zvcih0LmlzQXJyYXkoZSkmJihlLmxlbmd0aD9lLmxlbmd0aD09PXRoaXMuYW5jaG9ycy5sZW5ndGgmJihlPSEwKTplPSExKSxuPTA7cz10aGlzLnRhYnNbbl07bisrKWk9dChzKSxlPT09ITB8fC0xIT09dC5pbkFycmF5KG4sZSk/KGkuYXR0cigiYXJpYS1kaXNhYmxlZCIsInRydWUiKSx0aGlzLl9hZGRDbGFzcyhpLG51bGwsInVpLXN0YXRlLWRpc2FibGVkIikpOihpLnJlbW92ZUF0dHIoImFyaWEtZGlzYWJsZWQiKSx0aGlzLl9yZW1vdmVDbGFzcyhpLG51bGwsInVpLXN0YXRlLWRpc2FibGVkIikpO3RoaXMub3B0aW9ucy5kaXNhYmxlZD1lLHRoaXMuX3RvZ2dsZUNsYXNzKHRoaXMud2lkZ2V0KCksdGhpcy53aWRnZXRGdWxsTmFtZSsiLWRpc2FibGVkIixudWxsLGU9PT0hMCl9LF9zZXR1cEV2ZW50czpmdW5jdGlvbihlKXt2YXIgaT17fTtlJiZ0LmVhY2goZS5zcGxpdCgiICIpLGZ1bmN0aW9uKHQsZSl7aVtlXT0iX2V2ZW50SGFuZGxlciJ9KSx0aGlzLl9vZmYodGhpcy5hbmNob3JzLmFkZCh0aGlzLnRhYnMpLmFkZCh0aGlzLnBhbmVscykpLHRoaXMuX29uKCEwLHRoaXMuYW5jaG9ycyx7Y2xpY2s6ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpfX0pLHRoaXMuX29uKHRoaXMuYW5jaG9ycyxpKSx0aGlzLl9vbih0aGlzLnRhYnMse2tleWRvd246Il90YWJLZXlkb3duIn0pLHRoaXMuX29uKHRoaXMucGFuZWxzLHtrZXlkb3duOiJfcGFuZWxLZXlkb3duIn0pLHRoaXMuX2ZvY3VzYWJsZSh0aGlzLnRhYnMpLHRoaXMuX2hvdmVyYWJsZSh0aGlzLnRhYnMpfSxfc2V0dXBIZWlnaHRTdHlsZTpmdW5jdGlvbihlKXt2YXIgaSxzPXRoaXMuZWxlbWVudC5wYXJlbnQoKTsiZmlsbCI9PT1lPyhpPXMuaGVpZ2h0KCksaS09dGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCktdGhpcy5lbGVtZW50LmhlaWdodCgpLHRoaXMuZWxlbWVudC5zaWJsaW5ncygiOnZpc2libGUiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxzPWUuY3NzKCJwb3NpdGlvbiIpOyJhYnNvbHV0ZSIhPT1zJiYiZml4ZWQiIT09cyYmKGktPWUub3V0ZXJIZWlnaHQoITApKX0pLHRoaXMuZWxlbWVudC5jaGlsZHJlbigpLm5vdCh0aGlzLnBhbmVscykuZWFjaChmdW5jdGlvbigpe2ktPXQodGhpcykub3V0ZXJIZWlnaHQoITApfSksdGhpcy5wYW5lbHMuZWFjaChmdW5jdGlvbigpe3QodGhpcykuaGVpZ2h0KE1hdGgubWF4KDAsaS10KHRoaXMpLmlubmVySGVpZ2h0KCkrdCh0aGlzKS5oZWlnaHQoKSkpfSkuY3NzKCJvdmVyZmxvdyIsImF1dG8iKSk6ImF1dG8iPT09ZSYmKGk9MCx0aGlzLnBhbmVscy5lYWNoKGZ1bmN0aW9uKCl7aT1NYXRoLm1heChpLHQodGhpcykuaGVpZ2h0KCIiKS5oZWlnaHQoKSl9KS5oZWlnaHQoaSkpfSxfZXZlbnRIYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucyxzPXRoaXMuYWN0aXZlLG49dChlLmN1cnJlbnRUYXJnZXQpLG89bi5jbG9zZXN0KCJsaSIpLGE9b1swXT09PXNbMF0scj1hJiZpLmNvbGxhcHNpYmxlLGg9cj90KCk6dGhpcy5fZ2V0UGFuZWxGb3JUYWIobyksbD1zLmxlbmd0aD90aGlzLl9nZXRQYW5lbEZvclRhYihzKTp0KCksYz17b2xkVGFiOnMsb2xkUGFuZWw6bCxuZXdUYWI6cj90KCk6byxuZXdQYW5lbDpofTtlLnByZXZlbnREZWZhdWx0KCksby5oYXNDbGFzcygidWktc3RhdGUtZGlzYWJsZWQiKXx8by5oYXNDbGFzcygidWktdGFicy1sb2FkaW5nIil8fHRoaXMucnVubmluZ3x8YSYmIWkuY29sbGFwc2libGV8fHRoaXMuX3RyaWdnZXIoImJlZm9yZUFjdGl2YXRlIixlLGMpPT09ITF8fChpLmFjdGl2ZT1yPyExOnRoaXMudGFicy5pbmRleChvKSx0aGlzLmFjdGl2ZT1hP3QoKTpvLHRoaXMueGhyJiZ0aGlzLnhoci5hYm9ydCgpLGwubGVuZ3RofHxoLmxlbmd0aHx8dC5lcnJvcigialF1ZXJ5IFVJIFRhYnM6IE1pc21hdGNoaW5nIGZyYWdtZW50IGlkZW50aWZpZXIuIiksaC5sZW5ndGgmJnRoaXMubG9hZCh0aGlzLnRhYnMuaW5kZXgobyksZSksdGhpcy5fdG9nZ2xlKGUsYykpfSxfdG9nZ2xlOmZ1bmN0aW9uKGUsaSl7ZnVuY3Rpb24gcygpe28ucnVubmluZz0hMSxvLl90cmlnZ2VyKCJhY3RpdmF0ZSIsZSxpKX1mdW5jdGlvbiBuKCl7by5fYWRkQ2xhc3MoaS5uZXdUYWIuY2xvc2VzdCgibGkiKSwidWktdGFicy1hY3RpdmUiLCJ1aS1zdGF0ZS1hY3RpdmUiKSxhLmxlbmd0aCYmby5vcHRpb25zLnNob3c/by5fc2hvdyhhLG8ub3B0aW9ucy5zaG93LHMpOihhLnNob3coKSxzKCkpfXZhciBvPXRoaXMsYT1pLm5ld1BhbmVsLHI9aS5vbGRQYW5lbDt0aGlzLnJ1bm5pbmc9ITAsci5sZW5ndGgmJnRoaXMub3B0aW9ucy5oaWRlP3RoaXMuX2hpZGUocix0aGlzLm9wdGlvbnMuaGlkZSxmdW5jdGlvbigpe28uX3JlbW92ZUNsYXNzKGkub2xkVGFiLmNsb3Nlc3QoImxpIiksInVpLXRhYnMtYWN0aXZlIiwidWktc3RhdGUtYWN0aXZlIiksbigpfSk6KHRoaXMuX3JlbW92ZUNsYXNzKGkub2xkVGFiLmNsb3Nlc3QoImxpIiksInVpLXRhYnMtYWN0aXZlIiwidWktc3RhdGUtYWN0aXZlIiksci5oaWRlKCksbigpKSxyLmF0dHIoImFyaWEtaGlkZGVuIiwidHJ1ZSIpLGkub2xkVGFiLmF0dHIoeyJhcmlhLXNlbGVjdGVkIjoiZmFsc2UiLCJhcmlhLWV4cGFuZGVkIjoiZmFsc2UifSksYS5sZW5ndGgmJnIubGVuZ3RoP2kub2xkVGFiLmF0dHIoInRhYkluZGV4IiwtMSk6YS5sZW5ndGgmJnRoaXMudGFicy5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gMD09PXQodGhpcykuYXR0cigidGFiSW5kZXgiKX0pLmF0dHIoInRhYkluZGV4IiwtMSksYS5hdHRyKCJhcmlhLWhpZGRlbiIsImZhbHNlIiksaS5uZXdUYWIuYXR0cih7ImFyaWEtc2VsZWN0ZWQiOiJ0cnVlIiwiYXJpYS1leHBhbmRlZCI6InRydWUiLHRhYkluZGV4OjB9KX0sX2FjdGl2YXRlOmZ1bmN0aW9uKGUpe3ZhciBpLHM9dGhpcy5fZmluZEFjdGl2ZShlKTtzWzBdIT09dGhpcy5hY3RpdmVbMF0mJihzLmxlbmd0aHx8KHM9dGhpcy5hY3RpdmUpLGk9cy5maW5kKCIudWktdGFicy1hbmNob3IiKVswXSx0aGlzLl9ldmVudEhhbmRsZXIoe3RhcmdldDppLGN1cnJlbnRUYXJnZXQ6aSxwcmV2ZW50RGVmYXVsdDp0Lm5vb3B9KSl9LF9maW5kQWN0aXZlOmZ1bmN0aW9uKGUpe3JldHVybiBlPT09ITE/dCgpOnRoaXMudGFicy5lcShlKX0sX2dldEluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZSYmKGU9dGhpcy5hbmNob3JzLmluZGV4KHRoaXMuYW5jaG9ycy5maWx0ZXIoIltocmVmJD0nIit0LnVpLmVzY2FwZVNlbGVjdG9yKGUpKyInXSIpKSksZX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnhociYmdGhpcy54aHIuYWJvcnQoKSx0aGlzLnRhYmxpc3QucmVtb3ZlQXR0cigicm9sZSIpLm9mZih0aGlzLmV2ZW50TmFtZXNwYWNlKSx0aGlzLmFuY2hvcnMucmVtb3ZlQXR0cigicm9sZSB0YWJJbmRleCIpLnJlbW92ZVVuaXF1ZUlkKCksdGhpcy50YWJzLmFkZCh0aGlzLnBhbmVscykuZWFjaChmdW5jdGlvbigpe3QuZGF0YSh0aGlzLCJ1aS10YWJzLWRlc3Ryb3kiKT90KHRoaXMpLnJlbW92ZSgpOnQodGhpcykucmVtb3ZlQXR0cigicm9sZSB0YWJJbmRleCBhcmlhLWxpdmUgYXJpYS1idXN5IGFyaWEtc2VsZWN0ZWQgYXJpYS1sYWJlbGxlZGJ5IGFyaWEtaGlkZGVuIGFyaWEtZXhwYW5kZWQiKX0pLHRoaXMudGFicy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxpPWUuZGF0YSgidWktdGFicy1hcmlhLWNvbnRyb2xzIik7aT9lLmF0dHIoImFyaWEtY29udHJvbHMiLGkpLnJlbW92ZURhdGEoInVpLXRhYnMtYXJpYS1jb250cm9scyIpOmUucmVtb3ZlQXR0cigiYXJpYS1jb250cm9scyIpfSksdGhpcy5wYW5lbHMuc2hvdygpLCJjb250ZW50IiE9PXRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSYmdGhpcy5wYW5lbHMuY3NzKCJoZWlnaHQiLCIiKX0sZW5hYmxlOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucy5kaXNhYmxlZDtpIT09ITEmJih2b2lkIDA9PT1lP2k9ITE6KGU9dGhpcy5fZ2V0SW5kZXgoZSksaT10LmlzQXJyYXkoaSk/dC5tYXAoaSxmdW5jdGlvbih0KXtyZXR1cm4gdCE9PWU/dDpudWxsfSk6dC5tYXAodGhpcy50YWJzLGZ1bmN0aW9uKHQsaSl7cmV0dXJuIGkhPT1lP2k6bnVsbH0pKSx0aGlzLl9zZXRPcHRpb25EaXNhYmxlZChpKSl9LGRpc2FibGU6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLmRpc2FibGVkO2lmKGkhPT0hMCl7aWYodm9pZCAwPT09ZSlpPSEwO2Vsc2V7aWYoZT10aGlzLl9nZXRJbmRleChlKSwtMSE9PXQuaW5BcnJheShlLGkpKXJldHVybjtpPXQuaXNBcnJheShpKT90Lm1lcmdlKFtlXSxpKS5zb3J0KCk6W2VdfXRoaXMuX3NldE9wdGlvbkRpc2FibGVkKGkpfX0sbG9hZDpmdW5jdGlvbihlLGkpe2U9dGhpcy5fZ2V0SW5kZXgoZSk7dmFyIHM9dGhpcyxuPXRoaXMudGFicy5lcShlKSxvPW4uZmluZCgiLnVpLXRhYnMtYW5jaG9yIiksYT10aGlzLl9nZXRQYW5lbEZvclRhYihuKSxyPXt0YWI6bixwYW5lbDphfSxoPWZ1bmN0aW9uKHQsZSl7ImFib3J0Ij09PWUmJnMucGFuZWxzLnN0b3AoITEsITApLHMuX3JlbW92ZUNsYXNzKG4sInVpLXRhYnMtbG9hZGluZyIpLGEucmVtb3ZlQXR0cigiYXJpYS1idXN5IiksdD09PXMueGhyJiZkZWxldGUgcy54aHJ9O3RoaXMuX2lzTG9jYWwob1swXSl8fCh0aGlzLnhocj10LmFqYXgodGhpcy5fYWpheFNldHRpbmdzKG8saSxyKSksdGhpcy54aHImJiJjYW5jZWxlZCIhPT10aGlzLnhoci5zdGF0dXNUZXh0JiYodGhpcy5fYWRkQ2xhc3MobiwidWktdGFicy1sb2FkaW5nIiksYS5hdHRyKCJhcmlhLWJ1c3kiLCJ0cnVlIiksdGhpcy54aHIuZG9uZShmdW5jdGlvbih0LGUsbil7c2V0VGltZW91dChmdW5jdGlvbigpe2EuaHRtbCh0KSxzLl90cmlnZ2VyKCJsb2FkIixpLHIpLGgobixlKX0sMSl9KS5mYWlsKGZ1bmN0aW9uKHQsZSl7c2V0VGltZW91dChmdW5jdGlvbigpe2godCxlKX0sMSl9KSkpfSxfYWpheFNldHRpbmdzOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj10aGlzO3JldHVybnt1cmw6ZS5hdHRyKCJocmVmIikucmVwbGFjZSgvIy4qJC8sIiIpLGJlZm9yZVNlbmQ6ZnVuY3Rpb24oZSxvKXtyZXR1cm4gbi5fdHJpZ2dlcigiYmVmb3JlTG9hZCIsaSx0LmV4dGVuZCh7anFYSFI6ZSxhamF4U2V0dGluZ3M6b30scykpfX19LF9nZXRQYW5lbEZvclRhYjpmdW5jdGlvbihlKXt2YXIgaT10KGUpLmF0dHIoImFyaWEtY29udHJvbHMiKTtyZXR1cm4gdGhpcy5lbGVtZW50LmZpbmQodGhpcy5fc2FuaXRpemVTZWxlY3RvcigiIyIraSkpfX0pLHQudWlCYWNrQ29tcGF0IT09ITEmJnQud2lkZ2V0KCJ1aS50YWJzIix0LnVpLnRhYnMse19wcm9jZXNzVGFiczpmdW5jdGlvbigpe3RoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnRhYnMsInVpLXRhYiIpfX0pLHQudWkudGFicyx0LndpZGdldCgidWkudG9vbHRpcCIse3ZlcnNpb246IjEuMTIuMSIsb3B0aW9uczp7Y2xhc3Nlczp7InVpLXRvb2x0aXAiOiJ1aS1jb3JuZXItYWxsIHVpLXdpZGdldC1zaGFkb3cifSxjb250ZW50OmZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKS5hdHRyKCJ0aXRsZSIpfHwiIjtyZXR1cm4gdCgiPGE+IikudGV4dChlKS5odG1sKCl9LGhpZGU6ITAsaXRlbXM6Ilt0aXRsZV06bm90KFtkaXNhYmxlZF0pIixwb3NpdGlvbjp7bXk6ImxlZnQgdG9wKzE1IixhdDoibGVmdCBib3R0b20iLGNvbGxpc2lvbjoiZmxpcGZpdCBmbGlwIn0sc2hvdzohMCx0cmFjazohMSxjbG9zZTpudWxsLG9wZW46bnVsbH0sX2FkZERlc2NyaWJlZEJ5OmZ1bmN0aW9uKGUsaSl7dmFyIHM9KGUuYXR0cigiYXJpYS1kZXNjcmliZWRieSIpfHwiIikuc3BsaXQoL1xzKy8pO3MucHVzaChpKSxlLmRhdGEoInVpLXRvb2x0aXAtaWQiLGkpLmF0dHIoImFyaWEtZGVzY3JpYmVkYnkiLHQudHJpbShzLmpvaW4oIiAiKSkpfSxfcmVtb3ZlRGVzY3JpYmVkQnk6ZnVuY3Rpb24oZSl7dmFyIGk9ZS5kYXRhKCJ1aS10b29sdGlwLWlkIikscz0oZS5hdHRyKCJhcmlhLWRlc2NyaWJlZGJ5Iil8fCIiKS5zcGxpdCgvXHMrLyksbj10LmluQXJyYXkoaSxzKTstMSE9PW4mJnMuc3BsaWNlKG4sMSksZS5yZW1vdmVEYXRhKCJ1aS10b29sdGlwLWlkIikscz10LnRyaW0ocy5qb2luKCIgIikpLHM/ZS5hdHRyKCJhcmlhLWRlc2NyaWJlZGJ5IixzKTplLnJlbW92ZUF0dHIoImFyaWEtZGVzY3JpYmVkYnkiKX0sX2NyZWF0ZTpmdW5jdGlvbigpe3RoaXMuX29uKHttb3VzZW92ZXI6Im9wZW4iLGZvY3VzaW46Im9wZW4ifSksdGhpcy50b29sdGlwcz17fSx0aGlzLnBhcmVudHM9e30sdGhpcy5saXZlUmVnaW9uPXQoIjxkaXY+IikuYXR0cih7cm9sZToibG9nIiwiYXJpYS1saXZlIjoiYXNzZXJ0aXZlIiwiYXJpYS1yZWxldmFudCI6ImFkZGl0aW9ucyJ9KS5hcHBlbmRUbyh0aGlzLmRvY3VtZW50WzBdLmJvZHkpLHRoaXMuX2FkZENsYXNzKHRoaXMubGl2ZVJlZ2lvbixudWxsLCJ1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGUiKSx0aGlzLmRpc2FibGVkVGl0bGVzPXQoW10pfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKGUsaSl7dmFyIHM9dGhpczt0aGlzLl9zdXBlcihlLGkpLCJjb250ZW50Ij09PWUmJnQuZWFjaCh0aGlzLnRvb2x0aXBzLGZ1bmN0aW9uKHQsZSl7cy5fdXBkYXRlQ29udGVudChlLmVsZW1lbnQpfSl9LF9zZXRPcHRpb25EaXNhYmxlZDpmdW5jdGlvbih0KXt0aGlzW3Q/Il9kaXNhYmxlIjoiX2VuYWJsZSJdKCl9LF9kaXNhYmxlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0LmVhY2godGhpcy50b29sdGlwcyxmdW5jdGlvbihpLHMpe3ZhciBuPXQuRXZlbnQoImJsdXIiKTtuLnRhcmdldD1uLmN1cnJlbnRUYXJnZXQ9cy5lbGVtZW50WzBdLGUuY2xvc2UobiwhMCl9KSx0aGlzLmRpc2FibGVkVGl0bGVzPXRoaXMuZGlzYWJsZWRUaXRsZXMuYWRkKHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5pdGVtcykuYWRkQmFjaygpLmZpbHRlcihmdW5jdGlvbigpe3ZhciBlPXQodGhpcyk7cmV0dXJuIGUuaXMoIlt0aXRsZV0iKT9lLmRhdGEoInVpLXRvb2x0aXAtdGl0bGUiLGUuYXR0cigidGl0bGUiKSkucmVtb3ZlQXR0cigidGl0bGUiKTp2b2lkIDB9KSl9LF9lbmFibGU6ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkVGl0bGVzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO2UuZGF0YSgidWktdG9vbHRpcC10aXRsZSIpJiZlLmF0dHIoInRpdGxlIixlLmRhdGEoInVpLXRvb2x0aXAtdGl0bGUiKSl9KSx0aGlzLmRpc2FibGVkVGl0bGVzPXQoW10pfSxvcGVuOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMscz10KGU/ZS50YXJnZXQ6dGhpcy5lbGVtZW50KS5jbG9zZXN0KHRoaXMub3B0aW9ucy5pdGVtcyk7cy5sZW5ndGgmJiFzLmRhdGEoInVpLXRvb2x0aXAtaWQiKSYmKHMuYXR0cigidGl0bGUiKSYmcy5kYXRhKCJ1aS10b29sdGlwLXRpdGxlIixzLmF0dHIoInRpdGxlIikpLHMuZGF0YSgidWktdG9vbHRpcC1vcGVuIiwhMCksZSYmIm1vdXNlb3ZlciI9PT1lLnR5cGUmJnMucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKXt2YXIgZSxzPXQodGhpcyk7cy5kYXRhKCJ1aS10b29sdGlwLW9wZW4iKSYmKGU9dC5FdmVudCgiYmx1ciIpLGUudGFyZ2V0PWUuY3VycmVudFRhcmdldD10aGlzLGkuY2xvc2UoZSwhMCkpLHMuYXR0cigidGl0bGUiKSYmKHMudW5pcXVlSWQoKSxpLnBhcmVudHNbdGhpcy5pZF09e2VsZW1lbnQ6dGhpcyx0aXRsZTpzLmF0dHIoInRpdGxlIil9LHMuYXR0cigidGl0bGUiLCIiKSl9KSx0aGlzLl9yZWdpc3RlckNsb3NlSGFuZGxlcnMoZSxzKSx0aGlzLl91cGRhdGVDb250ZW50KHMsZSkpfSxfdXBkYXRlQ29udGVudDpmdW5jdGlvbih0LGUpe3ZhciBpLHM9dGhpcy5vcHRpb25zLmNvbnRlbnQsbj10aGlzLG89ZT9lLnR5cGU6bnVsbDtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHN8fHMubm9kZVR5cGV8fHMuanF1ZXJ5P3RoaXMuX29wZW4oZSx0LHMpOihpPXMuY2FsbCh0WzBdLGZ1bmN0aW9uKGkpe24uX2RlbGF5KGZ1bmN0aW9uKCl7dC5kYXRhKCJ1aS10b29sdGlwLW9wZW4iKSYmKGUmJihlLnR5cGU9byksdGhpcy5fb3BlbihlLHQsaSkpfSl9KSxpJiZ0aGlzLl9vcGVuKGUsdCxpKSx2b2lkIDApfSxfb3BlbjpmdW5jdGlvbihlLGkscyl7ZnVuY3Rpb24gbih0KXtsLm9mPXQsYS5pcygiOmhpZGRlbiIpfHxhLnBvc2l0aW9uKGwpfXZhciBvLGEscixoLGw9dC5leHRlbmQoe30sdGhpcy5vcHRpb25zLnBvc2l0aW9uKTtpZihzKXtpZihvPXRoaXMuX2ZpbmQoaSkpcmV0dXJuIG8udG9vbHRpcC5maW5kKCIudWktdG9vbHRpcC1jb250ZW50IikuaHRtbChzKSx2b2lkIDA7aS5pcygiW3RpdGxlXSIpJiYoZSYmIm1vdXNlb3ZlciI9PT1lLnR5cGU/aS5hdHRyKCJ0aXRsZSIsIiIpOmkucmVtb3ZlQXR0cigidGl0bGUiKSksbz10aGlzLl90b29sdGlwKGkpLGE9by50b29sdGlwLHRoaXMuX2FkZERlc2NyaWJlZEJ5KGksYS5hdHRyKCJpZCIpKSxhLmZpbmQoIi51aS10b29sdGlwLWNvbnRlbnQiKS5odG1sKHMpLHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKSxoPXQoIjxkaXY+IikuaHRtbChhLmZpbmQoIi51aS10b29sdGlwLWNvbnRlbnQiKS5odG1sKCkpLGgucmVtb3ZlQXR0cigibmFtZSIpLmZpbmQoIltuYW1lXSIpLnJlbW92ZUF0dHIoIm5hbWUiKSxoLnJlbW92ZUF0dHIoImlkIikuZmluZCgiW2lkXSIpLnJlbW92ZUF0dHIoImlkIiksaC5hcHBlbmRUbyh0aGlzLmxpdmVSZWdpb24pLHRoaXMub3B0aW9ucy50cmFjayYmZSYmL15tb3VzZS8udGVzdChlLnR5cGUpPyh0aGlzLl9vbih0aGlzLmRvY3VtZW50LHttb3VzZW1vdmU6bn0pLG4oZSkpOmEucG9zaXRpb24odC5leHRlbmQoe29mOml9LHRoaXMub3B0aW9ucy5wb3NpdGlvbikpLGEuaGlkZSgpLHRoaXMuX3Nob3coYSx0aGlzLm9wdGlvbnMuc2hvdyksdGhpcy5vcHRpb25zLnRyYWNrJiZ0aGlzLm9wdGlvbnMuc2hvdyYmdGhpcy5vcHRpb25zLnNob3cuZGVsYXkmJihyPXRoaXMuZGVsYXllZFNob3c9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXthLmlzKCI6dmlzaWJsZSIpJiYobihsLm9mKSxjbGVhckludGVydmFsKHIpKX0sdC5meC5pbnRlcnZhbCkpLHRoaXMuX3RyaWdnZXIoIm9wZW4iLGUse3Rvb2x0aXA6YX0pfX0sX3JlZ2lzdGVyQ2xvc2VIYW5kbGVyczpmdW5jdGlvbihlLGkpe3ZhciBzPXtrZXl1cDpmdW5jdGlvbihlKXtpZihlLmtleUNvZGU9PT10LnVpLmtleUNvZGUuRVNDQVBFKXt2YXIgcz10LkV2ZW50KGUpO3MuY3VycmVudFRhcmdldD1pWzBdLHRoaXMuY2xvc2UocywhMCl9fX07aVswXSE9PXRoaXMuZWxlbWVudFswXSYmKHMucmVtb3ZlPWZ1bmN0aW9uKCl7dGhpcy5fcmVtb3ZlVG9vbHRpcCh0aGlzLl9maW5kKGkpLnRvb2x0aXApfSksZSYmIm1vdXNlb3ZlciIhPT1lLnR5cGV8fChzLm1vdXNlbGVhdmU9ImNsb3NlIiksZSYmImZvY3VzaW4iIT09ZS50eXBlfHwocy5mb2N1c291dD0iY2xvc2UiKSx0aGlzLl9vbighMCxpLHMpfSxjbG9zZTpmdW5jdGlvbihlKXt2YXIgaSxzPXRoaXMsbj10KGU/ZS5jdXJyZW50VGFyZ2V0OnRoaXMuZWxlbWVudCksbz10aGlzLl9maW5kKG4pO3JldHVybiBvPyhpPW8udG9vbHRpcCxvLmNsb3Npbmd8fChjbGVhckludGVydmFsKHRoaXMuZGVsYXllZFNob3cpLG4uZGF0YSgidWktdG9vbHRpcC10aXRsZSIpJiYhbi5hdHRyKCJ0aXRsZSIpJiZuLmF0dHIoInRpdGxlIixuLmRhdGEoInVpLXRvb2x0aXAtdGl0bGUiKSksdGhpcy5fcmVtb3ZlRGVzY3JpYmVkQnkobiksby5oaWRpbmc9ITAsaS5zdG9wKCEwKSx0aGlzLl9oaWRlKGksdGhpcy5vcHRpb25zLmhpZGUsZnVuY3Rpb24oKXtzLl9yZW1vdmVUb29sdGlwKHQodGhpcykpfSksbi5yZW1vdmVEYXRhKCJ1aS10b29sdGlwLW9wZW4iKSx0aGlzLl9vZmYobiwibW91c2VsZWF2ZSBmb2N1c291dCBrZXl1cCIpLG5bMF0hPT10aGlzLmVsZW1lbnRbMF0mJnRoaXMuX29mZihuLCJyZW1vdmUiKSx0aGlzLl9vZmYodGhpcy5kb2N1bWVudCwibW91c2Vtb3ZlIiksZSYmIm1vdXNlbGVhdmUiPT09ZS50eXBlJiZ0LmVhY2godGhpcy5wYXJlbnRzLGZ1bmN0aW9uKGUsaSl7dChpLmVsZW1lbnQpLmF0dHIoInRpdGxlIixpLnRpdGxlKSxkZWxldGUgcy5wYXJlbnRzW2VdfSksby5jbG9zaW5nPSEwLHRoaXMuX3RyaWdnZXIoImNsb3NlIixlLHt0b29sdGlwOml9KSxvLmhpZGluZ3x8KG8uY2xvc2luZz0hMSkpLHZvaWQgMCk6KG4ucmVtb3ZlRGF0YSgidWktdG9vbHRpcC1vcGVuIiksdm9pZCAwKX0sX3Rvb2x0aXA6ZnVuY3Rpb24oZSl7dmFyIGk9dCgiPGRpdj4iKS5hdHRyKCJyb2xlIiwidG9vbHRpcCIpLHM9dCgiPGRpdj4iKS5hcHBlbmRUbyhpKSxuPWkudW5pcXVlSWQoKS5hdHRyKCJpZCIpO3JldHVybiB0aGlzLl9hZGRDbGFzcyhzLCJ1aS10b29sdGlwLWNvbnRlbnQiKSx0aGlzLl9hZGRDbGFzcyhpLCJ1aS10b29sdGlwIiwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IiksaS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbyhlKSksdGhpcy50b29sdGlwc1tuXT17ZWxlbWVudDplLHRvb2x0aXA6aX19LF9maW5kOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0YSgidWktdG9vbHRpcC1pZCIpO3JldHVybiBlP3RoaXMudG9vbHRpcHNbZV06bnVsbH0sX3JlbW92ZVRvb2x0aXA6ZnVuY3Rpb24odCl7dC5yZW1vdmUoKSxkZWxldGUgdGhpcy50b29sdGlwc1t0LmF0dHIoImlkIildfSxfYXBwZW5kVG86ZnVuY3Rpb24odCl7dmFyIGU9dC5jbG9zZXN0KCIudWktZnJvbnQsIGRpYWxvZyIpO3JldHVybiBlLmxlbmd0aHx8KGU9dGhpcy5kb2N1bWVudFswXS5ib2R5KSxlfSxfZGVzdHJveTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dC5lYWNoKHRoaXMudG9vbHRpcHMsZnVuY3Rpb24oaSxzKXt2YXIgbj10LkV2ZW50KCJibHVyIiksbz1zLmVsZW1lbnQ7bi50YXJnZXQ9bi5jdXJyZW50VGFyZ2V0PW9bMF0sZS5jbG9zZShuLCEwKSx0KCIjIitpKS5yZW1vdmUoKSxvLmRhdGEoInVpLXRvb2x0aXAtdGl0bGUiKSYmKG8uYXR0cigidGl0bGUiKXx8by5hdHRyKCJ0aXRsZSIsby5kYXRhKCJ1aS10b29sdGlwLXRpdGxlIikpLG8ucmVtb3ZlRGF0YSgidWktdG9vbHRpcC10aXRsZSIpKX0pLHRoaXMubGl2ZVJlZ2lvbi5yZW1vdmUoKX19KSx0LnVpQmFja0NvbXBhdCE9PSExJiZ0LndpZGdldCgidWkudG9vbHRpcCIsdC51aS50b29sdGlwLHtvcHRpb25zOnt0b29sdGlwQ2xhc3M6bnVsbH0sX3Rvb2x0aXA6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9zdXBlckFwcGx5KGFyZ3VtZW50cyk7cmV0dXJuIHRoaXMub3B0aW9ucy50b29sdGlwQ2xhc3MmJnQudG9vbHRpcC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzKSx0fX0pLHQudWkudG9vbHRpcH0pOwoKOwogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogIC8vICoqKiBpbmNsdWRlZDogZXh0ZXJuYWwvdGFwaG9sZC5qcyAqKioKKGZ1bmN0aW9uICgkKSB7CiAgZnVuY3Rpb24gbmFtZXNwYWNlZCAobmFtZSwgbnMpIHsKICAgIHJldHVybiBuYW1lLnJlcGxhY2UoL1x3Ky9nLCAnJCYnK25zKTsKICB9CgogIHZhciBzdGFydGV2ZW50ID0gbmFtZXNwYWNlZCh3aW5kb3cuUG9pbnRlckV2ZW50ID8gJ3BvaW50ZXJkb3duJyA6ICd0b3VjaHN0YXJ0IG1vdXNlZG93bicsICcudGFwaG9sZCcpOwoKICB2YXIgcHJldmVudENsaWNrID0gewogICAgaXNBY3RpdmU6IGZhbHNlLAoKICAgIGhhbmRsZXI6IGZ1bmN0aW9uIChldmVudCkgewogICAgICBwcmV2ZW50Q2xpY2sub2ZmKCk7CiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgfSwKCiAgICBvZmY6IGZ1bmN0aW9uICgpIHsKICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcmV2ZW50Q2xpY2suaGFuZGxlciwge2NhcHR1cmU6IHRydWV9KTsKICAgICAgJChkb2N1bWVudCkub2ZmKCcuZW5hYmxlY2xpY2snKTsKICAgICAgcHJldmVudENsaWNrLmlzQWN0aXZlID0gZmFsc2U7CiAgICB9LAoKICAgIG9uOiBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghcHJldmVudENsaWNrLmlzQWN0aXZlKSB7CiAgICAgICAgcHJldmVudENsaWNrLmlzQWN0aXZlID0gdHJ1ZTsKICAgICAgICAkKGRvY3VtZW50KS5vbihuYW1lc3BhY2VkKHN0YXJ0ZXZlbnQsJy5lbmFibGVjbGljaycpLCBwcmV2ZW50Q2xpY2sub2ZmKTsKICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjAyOTAzMTIvMjUyMDI0NwogICAgICAgIC8vIE5vdGU6IGxpc3RlbmVycyBkaXJlY3RseSBhdHRhY2hlZCB0byBlbGVtZW50IG1heSBza2lwIGNhcHR1cmUgcGhhc2UKICAgICAgICAvLyAgICAgICB0aGF0J3Mgd2h5IHdlIGFkZCBhZGQgb3VyIGNsaWNrLXByZXZlbnRpbmcgaGFuZGxlciB0byBgZG9jdW1lbnRgCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcmV2ZW50Q2xpY2suaGFuZGxlciwge2NhcHR1cmU6IHRydWV9KTsKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9pc3N1ZXMvMTczNQogICAgICB9CiAgICB9CiAgfTsKCiAgdmFyIF9jYW5jZWwgPSAnLnRhcGhvbGQuY2FuY2VsJzsKICB2YXIgY2FuY2VsZXZlbnQgPSB7CiAgICBwb2ludGVyZG93bjogbmFtZXNwYWNlZCgncG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwgcG9pbnRlcm91dCcsIF9jYW5jZWwpLAogICAgdG91Y2hzdGFydDogbmFtZXNwYWNlZCgndG91Y2hlbmQgdG91Y2htb3ZlIHRvdWNoY2FuY2VsJywgX2NhbmNlbCksCiAgICBtb3VzZWRvd246IG5hbWVzcGFjZWQoJ21vdXNldXAgbW91c2VvdXQgZHJhZ3N0YXJ0JywgX2NhbmNlbCkKICB9OwoKICBmdW5jdGlvbiBzdGFydEhhbmRsZXIgKGV2ZW50KSB7CiAgICB2YXIgZGF0YSA9IGV2ZW50LmRhdGE7CiAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudC5pc1ByaW1hcnkgPT09IGZhbHNlKSB7IHJldHVybjsgfQogICAgaWYgKHR5cGVvZiBldmVudC5idXR0b24gPT09ICdudW1iZXInKSB7CiAgICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHsgcmV0dXJuOyB9CiAgICB9IGVsc2UgaWYgKGV2ZW50LnRvdWNoZXMpIHsKICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoICE9PSAxKSB7IHJldHVybjsgfQogICAgfQogICAgdmFyICRlbGVtID0gJCh0aGlzKTsKICAgIHZhciBfdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgJGVsZW0ub2ZmKF9jYW5jZWwpOwogICAgICAkZWxlbS50cmlnZ2VySGFuZGxlcigkLkV2ZW50KCd0YXBob2xkJywge3RhcmdldDogZXZlbnQudGFyZ2V0fSksIGRhdGEpOwogICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSAndG91Y2gnKSB7CiAgICAgICAgLy8gcHJldmVudCBzaW11bGF0ZWQgbW91c2UgZXZlbnRzIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby90b3VjaC1ldmVudHMvI21vdXNlLWV2ZW50cwogICAgICAgICRlbGVtLm9uZSgndG91Y2hlbmQnLCBkYXRhLCBmdW5jdGlvbiAoZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHByZXZlbnRDbGljay5vbigpOwogICAgICB9CiAgICB9LCBkYXRhLmRlbGF5KTsKICAgICRlbGVtLm9uKGNhbmNlbGV2ZW50W2V2ZW50LnR5cGVdLCBkYXRhLCBmdW5jdGlvbiAoKSB7CiAgICAgICRlbGVtLm9mZihfY2FuY2VsKTsKICAgICAgY2xlYXJUaW1lb3V0KF90aW1lcik7IC8vIGNhbmNlbCB0YXBob2xkCiAgICB9KTsKICB9CgogICQuZXZlbnQuc3BlY2lhbC50YXBob2xkID0gewogICAgZGVmYXVsdHM6IHsKICAgICAgZGVsYXk6IDUwMAogICAgfSwKCiAgICBzZXR1cDogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgZGF0YSA9ICQuZXh0ZW5kKHt9LCAkLmV2ZW50LnNwZWNpYWwudGFwaG9sZC5kZWZhdWx0cywgZGF0YSk7CiAgICAgICQodGhpcykub24oc3RhcnRldmVudCwgZGF0YSwgc3RhcnRIYW5kbGVyKTsKICAgIH0sCgogICAgdGVhcmRvd246IGZ1bmN0aW9uICgpIHsKICAgICAgJCh0aGlzKS5vZmYoJy50YXBob2xkJyk7CiAgICB9CiAgfTsKfSkoalF1ZXJ5KTsKCgo7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgLy8gKioqIGluY2x1ZGVkOiBleHRlcm5hbC9qcXVlcnkucXJjb2RlLm1pbi5qcyAqKioKKGZ1bmN0aW9uKHIpe3IuZm4ucXJjb2RlPWZ1bmN0aW9uKGgpe3ZhciBzO2Z1bmN0aW9uIHUoYSl7dGhpcy5tb2RlPXM7dGhpcy5kYXRhPWF9ZnVuY3Rpb24gbyhhLGMpe3RoaXMudHlwZU51bWJlcj1hO3RoaXMuZXJyb3JDb3JyZWN0TGV2ZWw9Yzt0aGlzLm1vZHVsZXM9bnVsbDt0aGlzLm1vZHVsZUNvdW50PTA7dGhpcy5kYXRhQ2FjaGU9bnVsbDt0aGlzLmRhdGFMaXN0PVtdfWZ1bmN0aW9uIHEoYSxjKXtpZih2b2lkIDA9PWEubGVuZ3RoKXRocm93IEVycm9yKGEubGVuZ3RoKyIvIitjKTtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoJiYwPT1hW2RdOylkKys7dGhpcy5udW09QXJyYXkoYS5sZW5ndGgtZCtjKTtmb3IodmFyIGI9MDtiPGEubGVuZ3RoLWQ7YisrKXRoaXMubnVtW2JdPWFbYitkXX1mdW5jdGlvbiBwKGEsYyl7dGhpcy50b3RhbENvdW50PWE7dGhpcy5kYXRhQ291bnQ9Y31mdW5jdGlvbiB0KCl7dGhpcy5idWZmZXI9W107dGhpcy5sZW5ndGg9MH11LnByb3RvdHlwZT17Z2V0TGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YS5sZW5ndGh9LAp3cml0ZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9MDtjPHRoaXMuZGF0YS5sZW5ndGg7YysrKWEucHV0KHRoaXMuZGF0YS5jaGFyQ29kZUF0KGMpLDgpfX07by5wcm90b3R5cGU9e2FkZERhdGE6ZnVuY3Rpb24oYSl7dGhpcy5kYXRhTGlzdC5wdXNoKG5ldyB1KGEpKTt0aGlzLmRhdGFDYWNoZT1udWxsfSxpc0Rhcms6ZnVuY3Rpb24oYSxjKXtpZigwPmF8fHRoaXMubW9kdWxlQ291bnQ8PWF8fDA+Y3x8dGhpcy5tb2R1bGVDb3VudDw9Yyl0aHJvdyBFcnJvcihhKyIsIitjKTtyZXR1cm4gdGhpcy5tb2R1bGVzW2FdW2NdfSxnZXRNb2R1bGVDb3VudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1vZHVsZUNvdW50fSxtYWtlOmZ1bmN0aW9uKCl7aWYoMT50aGlzLnR5cGVOdW1iZXIpe2Zvcih2YXIgYT0xLGE9MTs0MD5hO2ErKyl7Zm9yKHZhciBjPXAuZ2V0UlNCbG9ja3MoYSx0aGlzLmVycm9yQ29ycmVjdExldmVsKSxkPW5ldyB0LGI9MCxlPTA7ZTxjLmxlbmd0aDtlKyspYis9Y1tlXS5kYXRhQ291bnQ7CmZvcihlPTA7ZTx0aGlzLmRhdGFMaXN0Lmxlbmd0aDtlKyspYz10aGlzLmRhdGFMaXN0W2VdLGQucHV0KGMubW9kZSw0KSxkLnB1dChjLmdldExlbmd0aCgpLGouZ2V0TGVuZ3RoSW5CaXRzKGMubW9kZSxhKSksYy53cml0ZShkKTtpZihkLmdldExlbmd0aEluQml0cygpPD04KmIpYnJlYWt9dGhpcy50eXBlTnVtYmVyPWF9dGhpcy5tYWtlSW1wbCghMSx0aGlzLmdldEJlc3RNYXNrUGF0dGVybigpKX0sbWFrZUltcGw6ZnVuY3Rpb24oYSxjKXt0aGlzLm1vZHVsZUNvdW50PTQqdGhpcy50eXBlTnVtYmVyKzE3O3RoaXMubW9kdWxlcz1BcnJheSh0aGlzLm1vZHVsZUNvdW50KTtmb3IodmFyIGQ9MDtkPHRoaXMubW9kdWxlQ291bnQ7ZCsrKXt0aGlzLm1vZHVsZXNbZF09QXJyYXkodGhpcy5tb2R1bGVDb3VudCk7Zm9yKHZhciBiPTA7Yjx0aGlzLm1vZHVsZUNvdW50O2IrKyl0aGlzLm1vZHVsZXNbZF1bYl09bnVsbH10aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4oMCwwKTt0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4odGhpcy5tb2R1bGVDb3VudC0KNywwKTt0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4oMCx0aGlzLm1vZHVsZUNvdW50LTcpO3RoaXMuc2V0dXBQb3NpdGlvbkFkanVzdFBhdHRlcm4oKTt0aGlzLnNldHVwVGltaW5nUGF0dGVybigpO3RoaXMuc2V0dXBUeXBlSW5mbyhhLGMpOzc8PXRoaXMudHlwZU51bWJlciYmdGhpcy5zZXR1cFR5cGVOdW1iZXIoYSk7bnVsbD09dGhpcy5kYXRhQ2FjaGUmJih0aGlzLmRhdGFDYWNoZT1vLmNyZWF0ZURhdGEodGhpcy50eXBlTnVtYmVyLHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwsdGhpcy5kYXRhTGlzdCkpO3RoaXMubWFwRGF0YSh0aGlzLmRhdGFDYWNoZSxjKX0sc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybjpmdW5jdGlvbihhLGMpe2Zvcih2YXIgZD0tMTs3Pj1kO2QrKylpZighKC0xPj1hK2R8fHRoaXMubW9kdWxlQ291bnQ8PWErZCkpZm9yKHZhciBiPS0xOzc+PWI7YisrKS0xPj1jK2J8fHRoaXMubW9kdWxlQ291bnQ8PWMrYnx8KHRoaXMubW9kdWxlc1thK2RdW2MrYl09CjA8PWQmJjY+PWQmJigwPT1ifHw2PT1iKXx8MDw9YiYmNj49YiYmKDA9PWR8fDY9PWQpfHwyPD1kJiY0Pj1kJiYyPD1iJiY0Pj1iPyEwOiExKX0sZ2V0QmVzdE1hc2tQYXR0ZXJuOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYz0wLGQ9MDs4PmQ7ZCsrKXt0aGlzLm1ha2VJbXBsKCEwLGQpO3ZhciBiPWouZ2V0TG9zdFBvaW50KHRoaXMpO2lmKDA9PWR8fGE+YilhPWIsYz1kfXJldHVybiBjfSxjcmVhdGVNb3ZpZUNsaXA6ZnVuY3Rpb24oYSxjLGQpe2E9YS5jcmVhdGVFbXB0eU1vdmllQ2xpcChjLGQpO3RoaXMubWFrZSgpO2ZvcihjPTA7Yzx0aGlzLm1vZHVsZXMubGVuZ3RoO2MrKylmb3IodmFyIGQ9MSpjLGI9MDtiPHRoaXMubW9kdWxlc1tjXS5sZW5ndGg7YisrKXt2YXIgZT0xKmI7dGhpcy5tb2R1bGVzW2NdW2JdJiYoYS5iZWdpbkZpbGwoMCwxMDApLGEubW92ZVRvKGUsZCksYS5saW5lVG8oZSsxLGQpLGEubGluZVRvKGUrMSxkKzEpLGEubGluZVRvKGUsZCsxKSxhLmVuZEZpbGwoKSl9cmV0dXJuIGF9LApzZXR1cFRpbWluZ1BhdHRlcm46ZnVuY3Rpb24oKXtmb3IodmFyIGE9ODthPHRoaXMubW9kdWxlQ291bnQtODthKyspbnVsbD09dGhpcy5tb2R1bGVzW2FdWzZdJiYodGhpcy5tb2R1bGVzW2FdWzZdPTA9PWElMik7Zm9yKGE9ODthPHRoaXMubW9kdWxlQ291bnQtODthKyspbnVsbD09dGhpcy5tb2R1bGVzWzZdW2FdJiYodGhpcy5tb2R1bGVzWzZdW2FdPTA9PWElMil9LHNldHVwUG9zaXRpb25BZGp1c3RQYXR0ZXJuOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPWouZ2V0UGF0dGVyblBvc2l0aW9uKHRoaXMudHlwZU51bWJlciksYz0wO2M8YS5sZW5ndGg7YysrKWZvcih2YXIgZD0wO2Q8YS5sZW5ndGg7ZCsrKXt2YXIgYj1hW2NdLGU9YVtkXTtpZihudWxsPT10aGlzLm1vZHVsZXNbYl1bZV0pZm9yKHZhciBmPS0yOzI+PWY7ZisrKWZvcih2YXIgaT0tMjsyPj1pO2krKyl0aGlzLm1vZHVsZXNbYitmXVtlK2ldPS0yPT1mfHwyPT1mfHwtMj09aXx8Mj09aXx8MD09ZiYmMD09aT8hMDohMX19LHNldHVwVHlwZU51bWJlcjpmdW5jdGlvbihhKXtmb3IodmFyIGM9CmouZ2V0QkNIVHlwZU51bWJlcih0aGlzLnR5cGVOdW1iZXIpLGQ9MDsxOD5kO2QrKyl7dmFyIGI9IWEmJjE9PShjPj5kJjEpO3RoaXMubW9kdWxlc1tNYXRoLmZsb29yKGQvMyldW2QlMyt0aGlzLm1vZHVsZUNvdW50LTgtM109Yn1mb3IoZD0wOzE4PmQ7ZCsrKWI9IWEmJjE9PShjPj5kJjEpLHRoaXMubW9kdWxlc1tkJTMrdGhpcy5tb2R1bGVDb3VudC04LTNdW01hdGguZmxvb3IoZC8zKV09Yn0sc2V0dXBUeXBlSW5mbzpmdW5jdGlvbihhLGMpe2Zvcih2YXIgZD1qLmdldEJDSFR5cGVJbmZvKHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWw8PDN8YyksYj0wOzE1PmI7YisrKXt2YXIgZT0hYSYmMT09KGQ+PmImMSk7Nj5iP3RoaXMubW9kdWxlc1tiXVs4XT1lOjg+Yj90aGlzLm1vZHVsZXNbYisxXVs4XT1lOnRoaXMubW9kdWxlc1t0aGlzLm1vZHVsZUNvdW50LTE1K2JdWzhdPWV9Zm9yKGI9MDsxNT5iO2IrKyllPSFhJiYxPT0oZD4+YiYxKSw4PmI/dGhpcy5tb2R1bGVzWzhdW3RoaXMubW9kdWxlQ291bnQtCmItMV09ZTo5PmI/dGhpcy5tb2R1bGVzWzhdWzE1LWItMSsxXT1lOnRoaXMubW9kdWxlc1s4XVsxNS1iLTFdPWU7dGhpcy5tb2R1bGVzW3RoaXMubW9kdWxlQ291bnQtOF1bOF09IWF9LG1hcERhdGE6ZnVuY3Rpb24oYSxjKXtmb3IodmFyIGQ9LTEsYj10aGlzLm1vZHVsZUNvdW50LTEsZT03LGY9MCxpPXRoaXMubW9kdWxlQ291bnQtMTswPGk7aS09Milmb3IoNj09aSYmaS0tOzspe2Zvcih2YXIgZz0wOzI+ZztnKyspaWYobnVsbD09dGhpcy5tb2R1bGVzW2JdW2ktZ10pe3ZhciBuPSExO2Y8YS5sZW5ndGgmJihuPTE9PShhW2ZdPj4+ZSYxKSk7ai5nZXRNYXNrKGMsYixpLWcpJiYobj0hbik7dGhpcy5tb2R1bGVzW2JdW2ktZ109bjtlLS07IC0xPT1lJiYoZisrLGU9Nyl9Yis9ZDtpZigwPmJ8fHRoaXMubW9kdWxlQ291bnQ8PWIpe2ItPWQ7ZD0tZDticmVha319fX07by5QQUQwPTIzNjtvLlBBRDE9MTc7by5jcmVhdGVEYXRhPWZ1bmN0aW9uKGEsYyxkKXtmb3IodmFyIGM9cC5nZXRSU0Jsb2NrcyhhLApjKSxiPW5ldyB0LGU9MDtlPGQubGVuZ3RoO2UrKyl7dmFyIGY9ZFtlXTtiLnB1dChmLm1vZGUsNCk7Yi5wdXQoZi5nZXRMZW5ndGgoKSxqLmdldExlbmd0aEluQml0cyhmLm1vZGUsYSkpO2Yud3JpdGUoYil9Zm9yKGU9YT0wO2U8Yy5sZW5ndGg7ZSsrKWErPWNbZV0uZGF0YUNvdW50O2lmKGIuZ2V0TGVuZ3RoSW5CaXRzKCk+OCphKXRocm93IEVycm9yKCJjb2RlIGxlbmd0aCBvdmVyZmxvdy4gKCIrYi5nZXRMZW5ndGhJbkJpdHMoKSsiPiIrOCphKyIpIik7Zm9yKGIuZ2V0TGVuZ3RoSW5CaXRzKCkrNDw9OCphJiZiLnB1dCgwLDQpOzAhPWIuZ2V0TGVuZ3RoSW5CaXRzKCklODspYi5wdXRCaXQoITEpO2Zvcig7IShiLmdldExlbmd0aEluQml0cygpPj04KmEpOyl7Yi5wdXQoby5QQUQwLDgpO2lmKGIuZ2V0TGVuZ3RoSW5CaXRzKCk+PTgqYSlicmVhaztiLnB1dChvLlBBRDEsOCl9cmV0dXJuIG8uY3JlYXRlQnl0ZXMoYixjKX07by5jcmVhdGVCeXRlcz1mdW5jdGlvbihhLGMpe2Zvcih2YXIgZD0KMCxiPTAsZT0wLGY9QXJyYXkoYy5sZW5ndGgpLGk9QXJyYXkoYy5sZW5ndGgpLGc9MDtnPGMubGVuZ3RoO2crKyl7dmFyIG49Y1tnXS5kYXRhQ291bnQsaD1jW2ddLnRvdGFsQ291bnQtbixiPU1hdGgubWF4KGIsbiksZT1NYXRoLm1heChlLGgpO2ZbZ109QXJyYXkobik7Zm9yKHZhciBrPTA7azxmW2ddLmxlbmd0aDtrKyspZltnXVtrXT0yNTUmYS5idWZmZXJbaytkXTtkKz1uO2s9ai5nZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsKGgpO249KG5ldyBxKGZbZ10say5nZXRMZW5ndGgoKS0xKSkubW9kKGspO2lbZ109QXJyYXkoay5nZXRMZW5ndGgoKS0xKTtmb3Ioaz0wO2s8aVtnXS5sZW5ndGg7aysrKWg9aytuLmdldExlbmd0aCgpLWlbZ10ubGVuZ3RoLGlbZ11ba109MDw9aD9uLmdldChoKTowfWZvcihrPWc9MDtrPGMubGVuZ3RoO2srKylnKz1jW2tdLnRvdGFsQ291bnQ7ZD1BcnJheShnKTtmb3Ioaz1uPTA7azxiO2srKylmb3IoZz0wO2c8Yy5sZW5ndGg7ZysrKWs8ZltnXS5sZW5ndGgmJgooZFtuKytdPWZbZ11ba10pO2ZvcihrPTA7azxlO2srKylmb3IoZz0wO2c8Yy5sZW5ndGg7ZysrKWs8aVtnXS5sZW5ndGgmJihkW24rK109aVtnXVtrXSk7cmV0dXJuIGR9O3M9NDtmb3IodmFyIGo9e1BBVFRFUk5fUE9TSVRJT05fVEFCTEU6W1tdLFs2LDE4XSxbNiwyMl0sWzYsMjZdLFs2LDMwXSxbNiwzNF0sWzYsMjIsMzhdLFs2LDI0LDQyXSxbNiwyNiw0Nl0sWzYsMjgsNTBdLFs2LDMwLDU0XSxbNiwzMiw1OF0sWzYsMzQsNjJdLFs2LDI2LDQ2LDY2XSxbNiwyNiw0OCw3MF0sWzYsMjYsNTAsNzRdLFs2LDMwLDU0LDc4XSxbNiwzMCw1Niw4Ml0sWzYsMzAsNTgsODZdLFs2LDM0LDYyLDkwXSxbNiwyOCw1MCw3Miw5NF0sWzYsMjYsNTAsNzQsOThdLFs2LDMwLDU0LDc4LDEwMl0sWzYsMjgsNTQsODAsMTA2XSxbNiwzMiw1OCw4NCwxMTBdLFs2LDMwLDU4LDg2LDExNF0sWzYsMzQsNjIsOTAsMTE4XSxbNiwyNiw1MCw3NCw5OCwxMjJdLFs2LDMwLDU0LDc4LDEwMiwxMjZdLFs2LDI2LDUyLAo3OCwxMDQsMTMwXSxbNiwzMCw1Niw4MiwxMDgsMTM0XSxbNiwzNCw2MCw4NiwxMTIsMTM4XSxbNiwzMCw1OCw4NiwxMTQsMTQyXSxbNiwzNCw2Miw5MCwxMTgsMTQ2XSxbNiwzMCw1NCw3OCwxMDIsMTI2LDE1MF0sWzYsMjQsNTAsNzYsMTAyLDEyOCwxNTRdLFs2LDI4LDU0LDgwLDEwNiwxMzIsMTU4XSxbNiwzMiw1OCw4NCwxMTAsMTM2LDE2Ml0sWzYsMjYsNTQsODIsMTEwLDEzOCwxNjZdLFs2LDMwLDU4LDg2LDExNCwxNDIsMTcwXV0sRzE1OjEzMzUsRzE4Ojc5NzMsRzE1X01BU0s6MjE1MjIsZ2V0QkNIVHlwZUluZm86ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWE8PDEwOzA8PWouZ2V0QkNIRGlnaXQoYyktai5nZXRCQ0hEaWdpdChqLkcxNSk7KWNePWouRzE1PDxqLmdldEJDSERpZ2l0KGMpLWouZ2V0QkNIRGlnaXQoai5HMTUpO3JldHVybihhPDwxMHxjKV5qLkcxNV9NQVNLfSxnZXRCQ0hUeXBlTnVtYmVyOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hPDwxMjswPD1qLmdldEJDSERpZ2l0KGMpLQpqLmdldEJDSERpZ2l0KGouRzE4KTspY149ai5HMTg8PGouZ2V0QkNIRGlnaXQoYyktai5nZXRCQ0hEaWdpdChqLkcxOCk7cmV0dXJuIGE8PDEyfGN9LGdldEJDSERpZ2l0OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz0wOzAhPWE7KWMrKyxhPj4+PTE7cmV0dXJuIGN9LGdldFBhdHRlcm5Qb3NpdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4gai5QQVRURVJOX1BPU0lUSU9OX1RBQkxFW2EtMV19LGdldE1hc2s6ZnVuY3Rpb24oYSxjLGQpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIDA9PShjK2QpJTI7Y2FzZSAxOnJldHVybiAwPT1jJTI7Y2FzZSAyOnJldHVybiAwPT1kJTM7Y2FzZSAzOnJldHVybiAwPT0oYytkKSUzO2Nhc2UgNDpyZXR1cm4gMD09KE1hdGguZmxvb3IoYy8yKStNYXRoLmZsb29yKGQvMykpJTI7Y2FzZSA1OnJldHVybiAwPT1jKmQlMitjKmQlMztjYXNlIDY6cmV0dXJuIDA9PShjKmQlMitjKmQlMyklMjtjYXNlIDc6cmV0dXJuIDA9PShjKmQlMysoYytkKSUyKSUyO2RlZmF1bHQ6dGhyb3cgRXJyb3IoImJhZCBtYXNrUGF0dGVybjoiKwphKTt9fSxnZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1uZXcgcShbMV0sMCksZD0wO2Q8YTtkKyspYz1jLm11bHRpcGx5KG5ldyBxKFsxLGwuZ2V4cChkKV0sMCkpO3JldHVybiBjfSxnZXRMZW5ndGhJbkJpdHM6ZnVuY3Rpb24oYSxjKXtpZigxPD1jJiYxMD5jKXN3aXRjaChhKXtjYXNlIDE6cmV0dXJuIDEwO2Nhc2UgMjpyZXR1cm4gOTtjYXNlIHM6cmV0dXJuIDg7Y2FzZSA4OnJldHVybiA4O2RlZmF1bHQ6dGhyb3cgRXJyb3IoIm1vZGU6IithKTt9ZWxzZSBpZigyNz5jKXN3aXRjaChhKXtjYXNlIDE6cmV0dXJuIDEyO2Nhc2UgMjpyZXR1cm4gMTE7Y2FzZSBzOnJldHVybiAxNjtjYXNlIDg6cmV0dXJuIDEwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoIm1vZGU6IithKTt9ZWxzZSBpZig0MT5jKXN3aXRjaChhKXtjYXNlIDE6cmV0dXJuIDE0O2Nhc2UgMjpyZXR1cm4gMTM7Y2FzZSBzOnJldHVybiAxNjtjYXNlIDg6cmV0dXJuIDEyO2RlZmF1bHQ6dGhyb3cgRXJyb3IoIm1vZGU6IisKYSk7fWVsc2UgdGhyb3cgRXJyb3IoInR5cGU6IitjKTt9LGdldExvc3RQb2ludDpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5nZXRNb2R1bGVDb3VudCgpLGQ9MCxiPTA7YjxjO2IrKylmb3IodmFyIGU9MDtlPGM7ZSsrKXtmb3IodmFyIGY9MCxpPWEuaXNEYXJrKGIsZSksZz0tMTsxPj1nO2crKylpZighKDA+YitnfHxjPD1iK2cpKWZvcih2YXIgaD0tMTsxPj1oO2grKykwPmUraHx8Yzw9ZStofHwwPT1nJiYwPT1ofHxpPT1hLmlzRGFyayhiK2csZStoKSYmZisrOzU8ZiYmKGQrPTMrZi01KX1mb3IoYj0wO2I8Yy0xO2IrKylmb3IoZT0wO2U8Yy0xO2UrKylpZihmPTAsYS5pc0RhcmsoYixlKSYmZisrLGEuaXNEYXJrKGIrMSxlKSYmZisrLGEuaXNEYXJrKGIsZSsxKSYmZisrLGEuaXNEYXJrKGIrMSxlKzEpJiZmKyssMD09Znx8ND09ZilkKz0zO2ZvcihiPTA7YjxjO2IrKylmb3IoZT0wO2U8Yy02O2UrKylhLmlzRGFyayhiLGUpJiYhYS5pc0RhcmsoYixlKzEpJiZhLmlzRGFyayhiLGUrCjIpJiZhLmlzRGFyayhiLGUrMykmJmEuaXNEYXJrKGIsZSs0KSYmIWEuaXNEYXJrKGIsZSs1KSYmYS5pc0RhcmsoYixlKzYpJiYoZCs9NDApO2ZvcihlPTA7ZTxjO2UrKylmb3IoYj0wO2I8Yy02O2IrKylhLmlzRGFyayhiLGUpJiYhYS5pc0RhcmsoYisxLGUpJiZhLmlzRGFyayhiKzIsZSkmJmEuaXNEYXJrKGIrMyxlKSYmYS5pc0RhcmsoYis0LGUpJiYhYS5pc0RhcmsoYis1LGUpJiZhLmlzRGFyayhiKzYsZSkmJihkKz00MCk7Zm9yKGU9Zj0wO2U8YztlKyspZm9yKGI9MDtiPGM7YisrKWEuaXNEYXJrKGIsZSkmJmYrKzthPU1hdGguYWJzKDEwMCpmL2MvYy01MCkvNTtyZXR1cm4gZCsxMCphfX0sbD17Z2xvZzpmdW5jdGlvbihhKXtpZigxPmEpdGhyb3cgRXJyb3IoImdsb2coIithKyIpIik7cmV0dXJuIGwuTE9HX1RBQkxFW2FdfSxnZXhwOmZ1bmN0aW9uKGEpe2Zvcig7MD5hOylhKz0yNTU7Zm9yKDsyNTY8PWE7KWEtPTI1NTtyZXR1cm4gbC5FWFBfVEFCTEVbYV19LEVYUF9UQUJMRTpBcnJheSgyNTYpLApMT0dfVEFCTEU6QXJyYXkoMjU2KX0sbT0wOzg+bTttKyspbC5FWFBfVEFCTEVbbV09MTw8bTtmb3IobT04OzI1Nj5tO20rKylsLkVYUF9UQUJMRVttXT1sLkVYUF9UQUJMRVttLTRdXmwuRVhQX1RBQkxFW20tNV1ebC5FWFBfVEFCTEVbbS02XV5sLkVYUF9UQUJMRVttLThdO2ZvcihtPTA7MjU1Pm07bSsrKWwuTE9HX1RBQkxFW2wuRVhQX1RBQkxFW21dXT1tO3EucHJvdG90eXBlPXtnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubnVtW2FdfSxnZXRMZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5udW0ubGVuZ3RofSxtdWx0aXBseTpmdW5jdGlvbihhKXtmb3IodmFyIGM9QXJyYXkodGhpcy5nZXRMZW5ndGgoKSthLmdldExlbmd0aCgpLTEpLGQ9MDtkPHRoaXMuZ2V0TGVuZ3RoKCk7ZCsrKWZvcih2YXIgYj0wO2I8YS5nZXRMZW5ndGgoKTtiKyspY1tkK2JdXj1sLmdleHAobC5nbG9nKHRoaXMuZ2V0KGQpKStsLmdsb2coYS5nZXQoYikpKTtyZXR1cm4gbmV3IHEoYywwKX0sbW9kOmZ1bmN0aW9uKGEpe2lmKDA+CnRoaXMuZ2V0TGVuZ3RoKCktYS5nZXRMZW5ndGgoKSlyZXR1cm4gdGhpcztmb3IodmFyIGM9bC5nbG9nKHRoaXMuZ2V0KDApKS1sLmdsb2coYS5nZXQoMCkpLGQ9QXJyYXkodGhpcy5nZXRMZW5ndGgoKSksYj0wO2I8dGhpcy5nZXRMZW5ndGgoKTtiKyspZFtiXT10aGlzLmdldChiKTtmb3IoYj0wO2I8YS5nZXRMZW5ndGgoKTtiKyspZFtiXV49bC5nZXhwKGwuZ2xvZyhhLmdldChiKSkrYyk7cmV0dXJuKG5ldyBxKGQsMCkpLm1vZChhKX19O3AuUlNfQkxPQ0tfVEFCTEU9W1sxLDI2LDE5XSxbMSwyNiwxNl0sWzEsMjYsMTNdLFsxLDI2LDldLFsxLDQ0LDM0XSxbMSw0NCwyOF0sWzEsNDQsMjJdLFsxLDQ0LDE2XSxbMSw3MCw1NV0sWzEsNzAsNDRdLFsyLDM1LDE3XSxbMiwzNSwxM10sWzEsMTAwLDgwXSxbMiw1MCwzMl0sWzIsNTAsMjRdLFs0LDI1LDldLFsxLDEzNCwxMDhdLFsyLDY3LDQzXSxbMiwzMywxNSwyLDM0LDE2XSxbMiwzMywxMSwyLDM0LDEyXSxbMiw4Niw2OF0sWzQsNDMsMjddLApbNCw0MywxOV0sWzQsNDMsMTVdLFsyLDk4LDc4XSxbNCw0OSwzMV0sWzIsMzIsMTQsNCwzMywxNV0sWzQsMzksMTMsMSw0MCwxNF0sWzIsMTIxLDk3XSxbMiw2MCwzOCwyLDYxLDM5XSxbNCw0MCwxOCwyLDQxLDE5XSxbNCw0MCwxNCwyLDQxLDE1XSxbMiwxNDYsMTE2XSxbMyw1OCwzNiwyLDU5LDM3XSxbNCwzNiwxNiw0LDM3LDE3XSxbNCwzNiwxMiw0LDM3LDEzXSxbMiw4Niw2OCwyLDg3LDY5XSxbNCw2OSw0MywxLDcwLDQ0XSxbNiw0MywxOSwyLDQ0LDIwXSxbNiw0MywxNSwyLDQ0LDE2XSxbNCwxMDEsODFdLFsxLDgwLDUwLDQsODEsNTFdLFs0LDUwLDIyLDQsNTEsMjNdLFszLDM2LDEyLDgsMzcsMTNdLFsyLDExNiw5MiwyLDExNyw5M10sWzYsNTgsMzYsMiw1OSwzN10sWzQsNDYsMjAsNiw0NywyMV0sWzcsNDIsMTQsNCw0MywxNV0sWzQsMTMzLDEwN10sWzgsNTksMzcsMSw2MCwzOF0sWzgsNDQsMjAsNCw0NSwyMV0sWzEyLDMzLDExLDQsMzQsMTJdLFszLDE0NSwxMTUsMSwxNDYsCjExNl0sWzQsNjQsNDAsNSw2NSw0MV0sWzExLDM2LDE2LDUsMzcsMTddLFsxMSwzNiwxMiw1LDM3LDEzXSxbNSwxMDksODcsMSwxMTAsODhdLFs1LDY1LDQxLDUsNjYsNDJdLFs1LDU0LDI0LDcsNTUsMjVdLFsxMSwzNiwxMl0sWzUsMTIyLDk4LDEsMTIzLDk5XSxbNyw3Myw0NSwzLDc0LDQ2XSxbMTUsNDMsMTksMiw0NCwyMF0sWzMsNDUsMTUsMTMsNDYsMTZdLFsxLDEzNSwxMDcsNSwxMzYsMTA4XSxbMTAsNzQsNDYsMSw3NSw0N10sWzEsNTAsMjIsMTUsNTEsMjNdLFsyLDQyLDE0LDE3LDQzLDE1XSxbNSwxNTAsMTIwLDEsMTUxLDEyMV0sWzksNjksNDMsNCw3MCw0NF0sWzE3LDUwLDIyLDEsNTEsMjNdLFsyLDQyLDE0LDE5LDQzLDE1XSxbMywxNDEsMTEzLDQsMTQyLDExNF0sWzMsNzAsNDQsMTEsNzEsNDVdLFsxNyw0NywyMSw0LDQ4LDIyXSxbOSwzOSwxMywxNiw0MCwxNF0sWzMsMTM1LDEwNyw1LDEzNiwxMDhdLFszLDY3LDQxLDEzLDY4LDQyXSxbMTUsNTQsMjQsNSw1NSwyNV0sWzE1LAo0MywxNSwxMCw0NCwxNl0sWzQsMTQ0LDExNiw0LDE0NSwxMTddLFsxNyw2OCw0Ml0sWzE3LDUwLDIyLDYsNTEsMjNdLFsxOSw0NiwxNiw2LDQ3LDE3XSxbMiwxMzksMTExLDcsMTQwLDExMl0sWzE3LDc0LDQ2XSxbNyw1NCwyNCwxNiw1NSwyNV0sWzM0LDM3LDEzXSxbNCwxNTEsMTIxLDUsMTUyLDEyMl0sWzQsNzUsNDcsMTQsNzYsNDhdLFsxMSw1NCwyNCwxNCw1NSwyNV0sWzE2LDQ1LDE1LDE0LDQ2LDE2XSxbNiwxNDcsMTE3LDQsMTQ4LDExOF0sWzYsNzMsNDUsMTQsNzQsNDZdLFsxMSw1NCwyNCwxNiw1NSwyNV0sWzMwLDQ2LDE2LDIsNDcsMTddLFs4LDEzMiwxMDYsNCwxMzMsMTA3XSxbOCw3NSw0NywxMyw3Niw0OF0sWzcsNTQsMjQsMjIsNTUsMjVdLFsyMiw0NSwxNSwxMyw0NiwxNl0sWzEwLDE0MiwxMTQsMiwxNDMsMTE1XSxbMTksNzQsNDYsNCw3NSw0N10sWzI4LDUwLDIyLDYsNTEsMjNdLFszMyw0NiwxNiw0LDQ3LDE3XSxbOCwxNTIsMTIyLDQsMTUzLDEyM10sWzIyLDczLDQ1LAozLDc0LDQ2XSxbOCw1MywyMywyNiw1NCwyNF0sWzEyLDQ1LDE1LDI4LDQ2LDE2XSxbMywxNDcsMTE3LDEwLDE0OCwxMThdLFszLDczLDQ1LDIzLDc0LDQ2XSxbNCw1NCwyNCwzMSw1NSwyNV0sWzExLDQ1LDE1LDMxLDQ2LDE2XSxbNywxNDYsMTE2LDcsMTQ3LDExN10sWzIxLDczLDQ1LDcsNzQsNDZdLFsxLDUzLDIzLDM3LDU0LDI0XSxbMTksNDUsMTUsMjYsNDYsMTZdLFs1LDE0NSwxMTUsMTAsMTQ2LDExNl0sWzE5LDc1LDQ3LDEwLDc2LDQ4XSxbMTUsNTQsMjQsMjUsNTUsMjVdLFsyMyw0NSwxNSwyNSw0NiwxNl0sWzEzLDE0NSwxMTUsMywxNDYsMTE2XSxbMiw3NCw0NiwyOSw3NSw0N10sWzQyLDU0LDI0LDEsNTUsMjVdLFsyMyw0NSwxNSwyOCw0NiwxNl0sWzE3LDE0NSwxMTVdLFsxMCw3NCw0NiwyMyw3NSw0N10sWzEwLDU0LDI0LDM1LDU1LDI1XSxbMTksNDUsMTUsMzUsNDYsMTZdLFsxNywxNDUsMTE1LDEsMTQ2LDExNl0sWzE0LDc0LDQ2LDIxLDc1LDQ3XSxbMjksNTQsMjQsMTksCjU1LDI1XSxbMTEsNDUsMTUsNDYsNDYsMTZdLFsxMywxNDUsMTE1LDYsMTQ2LDExNl0sWzE0LDc0LDQ2LDIzLDc1LDQ3XSxbNDQsNTQsMjQsNyw1NSwyNV0sWzU5LDQ2LDE2LDEsNDcsMTddLFsxMiwxNTEsMTIxLDcsMTUyLDEyMl0sWzEyLDc1LDQ3LDI2LDc2LDQ4XSxbMzksNTQsMjQsMTQsNTUsMjVdLFsyMiw0NSwxNSw0MSw0NiwxNl0sWzYsMTUxLDEyMSwxNCwxNTIsMTIyXSxbNiw3NSw0NywzNCw3Niw0OF0sWzQ2LDU0LDI0LDEwLDU1LDI1XSxbMiw0NSwxNSw2NCw0NiwxNl0sWzE3LDE1MiwxMjIsNCwxNTMsMTIzXSxbMjksNzQsNDYsMTQsNzUsNDddLFs0OSw1NCwyNCwxMCw1NSwyNV0sWzI0LDQ1LDE1LDQ2LDQ2LDE2XSxbNCwxNTIsMTIyLDE4LDE1MywxMjNdLFsxMyw3NCw0NiwzMiw3NSw0N10sWzQ4LDU0LDI0LDE0LDU1LDI1XSxbNDIsNDUsMTUsMzIsNDYsMTZdLFsyMCwxNDcsMTE3LDQsMTQ4LDExOF0sWzQwLDc1LDQ3LDcsNzYsNDhdLFs0Myw1NCwyNCwyMiw1NSwyNV0sWzEwLAo0NSwxNSw2Nyw0NiwxNl0sWzE5LDE0OCwxMTgsNiwxNDksMTE5XSxbMTgsNzUsNDcsMzEsNzYsNDhdLFszNCw1NCwyNCwzNCw1NSwyNV0sWzIwLDQ1LDE1LDYxLDQ2LDE2XV07cC5nZXRSU0Jsb2Nrcz1mdW5jdGlvbihhLGMpe3ZhciBkPXAuZ2V0UnNCbG9ja1RhYmxlKGEsYyk7aWYodm9pZCAwPT1kKXRocm93IEVycm9yKCJiYWQgcnMgYmxvY2sgQCB0eXBlTnVtYmVyOiIrYSsiL2Vycm9yQ29ycmVjdExldmVsOiIrYyk7Zm9yKHZhciBiPWQubGVuZ3RoLzMsZT1bXSxmPTA7ZjxiO2YrKylmb3IodmFyIGg9ZFszKmYrMF0sZz1kWzMqZisxXSxqPWRbMypmKzJdLGw9MDtsPGg7bCsrKWUucHVzaChuZXcgcChnLGopKTtyZXR1cm4gZX07cC5nZXRSc0Jsb2NrVGFibGU9ZnVuY3Rpb24oYSxjKXtzd2l0Y2goYyl7Y2FzZSAxOnJldHVybiBwLlJTX0JMT0NLX1RBQkxFWzQqKGEtMSkrMF07Y2FzZSAwOnJldHVybiBwLlJTX0JMT0NLX1RBQkxFWzQqKGEtMSkrMV07Y2FzZSAzOnJldHVybiBwLlJTX0JMT0NLX1RBQkxFWzQqCihhLTEpKzJdO2Nhc2UgMjpyZXR1cm4gcC5SU19CTE9DS19UQUJMRVs0KihhLTEpKzNdfX07dC5wcm90b3R5cGU9e2dldDpmdW5jdGlvbihhKXtyZXR1cm4gMT09KHRoaXMuYnVmZmVyW01hdGguZmxvb3IoYS84KV0+Pj43LWElOCYxKX0scHV0OmZ1bmN0aW9uKGEsYyl7Zm9yKHZhciBkPTA7ZDxjO2QrKyl0aGlzLnB1dEJpdCgxPT0oYT4+PmMtZC0xJjEpKX0sZ2V0TGVuZ3RoSW5CaXRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGVuZ3RofSxwdXRCaXQ6ZnVuY3Rpb24oYSl7dmFyIGM9TWF0aC5mbG9vcih0aGlzLmxlbmd0aC84KTt0aGlzLmJ1ZmZlci5sZW5ndGg8PWMmJnRoaXMuYnVmZmVyLnB1c2goMCk7YSYmKHRoaXMuYnVmZmVyW2NdfD0xMjg+Pj50aGlzLmxlbmd0aCU4KTt0aGlzLmxlbmd0aCsrfX07InN0cmluZyI9PT10eXBlb2YgaCYmKGg9e3RleHQ6aH0pO2g9ci5leHRlbmQoe30se3JlbmRlcjoiY2FudmFzIix3aWR0aDoyNTYsaGVpZ2h0OjI1Nix0eXBlTnVtYmVyOi0xLApjb3JyZWN0TGV2ZWw6MixiYWNrZ3JvdW5kOiIjZmZmZmZmIixmb3JlZ3JvdW5kOiIjMDAwMDAwIn0saCk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBhO2lmKCJjYW52YXMiPT1oLnJlbmRlcil7YT1uZXcgbyhoLnR5cGVOdW1iZXIsaC5jb3JyZWN0TGV2ZWwpO2EuYWRkRGF0YShoLnRleHQpO2EubWFrZSgpO3ZhciBjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpO2Mud2lkdGg9aC53aWR0aDtjLmhlaWdodD1oLmhlaWdodDtmb3IodmFyIGQ9Yy5nZXRDb250ZXh0KCIyZCIpLGI9aC53aWR0aC9hLmdldE1vZHVsZUNvdW50KCksZT1oLmhlaWdodC9hLmdldE1vZHVsZUNvdW50KCksZj0wO2Y8YS5nZXRNb2R1bGVDb3VudCgpO2YrKylmb3IodmFyIGk9MDtpPGEuZ2V0TW9kdWxlQ291bnQoKTtpKyspe2QuZmlsbFN0eWxlPWEuaXNEYXJrKGYsaSk/aC5mb3JlZ3JvdW5kOmguYmFja2dyb3VuZDt2YXIgZz1NYXRoLmNlaWwoKGkrMSkqYiktTWF0aC5mbG9vcihpKmIpLApqPU1hdGguY2VpbCgoZisxKSpiKS1NYXRoLmZsb29yKGYqYik7ZC5maWxsUmVjdChNYXRoLnJvdW5kKGkqYiksTWF0aC5yb3VuZChmKmUpLGcsail9fWVsc2V7YT1uZXcgbyhoLnR5cGVOdW1iZXIsaC5jb3JyZWN0TGV2ZWwpO2EuYWRkRGF0YShoLnRleHQpO2EubWFrZSgpO2M9cigiPHRhYmxlPjwvdGFibGU+IikuY3NzKCJ3aWR0aCIsaC53aWR0aCsicHgiKS5jc3MoImhlaWdodCIsaC5oZWlnaHQrInB4IikuY3NzKCJib3JkZXIiLCIwcHgiKS5jc3MoImJvcmRlci1jb2xsYXBzZSIsImNvbGxhcHNlIikuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIixoLmJhY2tncm91bmQpO2Q9aC53aWR0aC9hLmdldE1vZHVsZUNvdW50KCk7Yj1oLmhlaWdodC9hLmdldE1vZHVsZUNvdW50KCk7Zm9yKGU9MDtlPGEuZ2V0TW9kdWxlQ291bnQoKTtlKyspe2Y9cigiPHRyPjwvdHI+IikuY3NzKCJoZWlnaHQiLGIrInB4IikuYXBwZW5kVG8oYyk7Zm9yKGk9MDtpPGEuZ2V0TW9kdWxlQ291bnQoKTtpKyspcigiPHRkPjwvdGQ+IikuY3NzKCJ3aWR0aCIsCmQrInB4IikuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIixhLmlzRGFyayhlLGkpP2guZm9yZWdyb3VuZDpoLmJhY2tncm91bmQpLmFwcGVuZFRvKGYpfX1hPWM7alF1ZXJ5KGEpLmFwcGVuZFRvKHRoaXMpfSl9fSkoalF1ZXJ5KTsKCgo7Cn0gY2F0Y2ggKGUpIHsKICBsb2cuZXJyb3IoIkV4dGVybmFsJ3MganMgbG9hZGluZyBmYWlsZWQiKTsKICB0aHJvdyBlOwp9CgppZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykgewogIC8vIElJVENtCiAgc2V0VGltZW91dChib290KTsKfSBlbHNlIHsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHsKICAgIHNldFRpbWVvdXQoYm9vdCk7CiAgfSk7Cn0KCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGNoYXQuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdjaGF0Jyk7Ci8qKgogKiBAZmlsZSBOYW1lc3BhY2UgZm9yIGNoYXQtcmVsYXRlZCBmdW5jdGlvbmFsaXRpZXMuCiAqCiAqIEBtb2R1bGUgY2hhdAogKi8KdmFyIGNoYXQgPSBmdW5jdGlvbiAoKSB7fTsKd2luZG93LmNoYXQgPSBjaGF0OwoKLy8gTGlzdCBvZiBmdW5jdGlvbnMgdG8gdHJhY2sgZm9yIHN5bmNocm9uaXphdGlvbiBiZXR3ZWVuIGNoYXQgYW5kIGNvbW0KY29uc3QgbGVnYWN5RnVuY3Rpb25zID0gWwogICdnZW5Qb3N0RGF0YScsCiAgJ3VwZGF0ZU9sZE5ld0hhc2gnLAogICdwYXJzZU1zZ0RhdGEnLAogICd3cml0ZURhdGFUb0hhc2gnLAogICdyZW5kZXJUZXh0JywKICAnZ2V0Q2hhdFBvcnRhbE5hbWUnLAogICdyZW5kZXJQb3J0YWwnLAogICdyZW5kZXJGYWN0aW9uRW50JywKICAncmVuZGVyUGxheWVyJywKICAncmVuZGVyTWFya3VwRW50aXR5JywKICAncmVuZGVyTWFya3VwJywKICAncmVuZGVyVGltZUNlbGwnLAogICdyZW5kZXJOaWNrQ2VsbCcsCiAgJ3JlbmRlck1zZ0NlbGwnLAogICdyZW5kZXJNc2dSb3cnLAogICdyZW5kZXJEaXZpZGVyJywKICAncmVuZGVyRGF0YScsCl07CmNvbnN0IG5ld0NvbW1BcGkgPSBbCiAgJ19nZW5Qb3N0RGF0YScsCiAgJ191cGRhdGVPbGROZXdIYXNoJywKICAncGFyc2VNc2dEYXRhJywKICAnX3dyaXRlRGF0YVRvSGFzaCcsCiAgJ3JlbmRlclRleHQnLAogICdnZXRDaGF0UG9ydGFsTmFtZScsCiAgJ3JlbmRlclBvcnRhbCcsCiAgJ3JlbmRlckZhY3Rpb25FbnQnLAogICdyZW5kZXJQbGF5ZXInLAogICdyZW5kZXJNYXJrdXBFbnRpdHknLAogICdyZW5kZXJNYXJrdXAnLAogICdyZW5kZXJUaW1lQ2VsbCcsCiAgJ3JlbmRlck5pY2tDZWxsJywKICAncmVuZGVyTXNnQ2VsbCcsCiAgJ3JlbmRlck1zZ1JvdycsCiAgJ3JlbmRlckRpdmlkZXInLAogICdyZW5kZXJEYXRhJywKXTsKCi8vIEZ1bmN0aW9uIHRvIG1hcCBsZWdhY3kgZnVuY3Rpb24gbmFtZXMgdG8gdGhlaXIgbmV3IG5hbWVzIGluIGNvbW0KZnVuY3Rpb24gbWFwTGVnYWN5RnVuY3Rpb25OYW1lVG9Db21tQXBpKGZ1bmN0aW9uTmFtZSkgewogIGNvbnN0IGluZGV4ID0gbGVnYWN5RnVuY3Rpb25zLmluZGV4T2YoZnVuY3Rpb25OYW1lKTsKICByZXR1cm4gaW5kZXggIT09IC0xID8gbmV3Q29tbUFwaVtpbmRleF0gOiBmdW5jdGlvbk5hbWU7Cn0KCi8vIENyZWF0ZSBhIHByb3h5IGZvciBjaGF0IHRvIGVuc3VyZSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IG9mIG1pZ3JhdGVkIGZ1bmN0aW9ucyBmcm9tIGNoYXQgdG8gY29tbQp3aW5kb3cuY2hhdCA9IG5ldyBQcm94eSh3aW5kb3cuY2hhdCwgewogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7CiAgICBpZiAocHJvcCBpbiB0YXJnZXQpIHsKICAgICAgLy8gUmV0dXJuIHRoZSBwcm9wZXJ0eSBmcm9tIGNoYXQgaWYgaXQncyBkZWZpbmVkCiAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07CiAgICB9IGVsc2UgaWYgKGxlZ2FjeUZ1bmN0aW9ucy5pbmNsdWRlcyhwcm9wKSkgewogICAgICAvLyBNYXAgdGhlIGxlZ2FjeSBmdW5jdGlvbiBuYW1lIHRvIGl0cyBuZXcgbmFtZSBpbiBjb21tIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgZnVuY3Rpb24KICAgICAgY29uc3QgY29tbVByb3AgPSBtYXBMZWdhY3lGdW5jdGlvbk5hbWVUb0NvbW1BcGkocHJvcCk7CiAgICAgIHJldHVybiB3aW5kb3cuSUlUQy5jb21tW2NvbW1Qcm9wXTsKICAgIH0KICAgIC8vIFJldHVybiBkZWZhdWx0IHZhbHVlIGlmIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQKICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTsKICB9LAogIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7CiAgICBpZiAobGVnYWN5RnVuY3Rpb25zLmluY2x1ZGVzKHByb3ApKSB7CiAgICAgIC8vIE1hcCB0aGUgbGVnYWN5IGZ1bmN0aW9uIG5hbWUgdG8gaXRzIG5ldyBuYW1lIGluIGNvbW0gYW5kIHN5bmNocm9uaXplIHRoZSBmdW5jdGlvbiBiZXR3ZWVuIGNoYXQgYW5kIGNvbW0KICAgICAgY29uc3QgY29tbVByb3AgPSBtYXBMZWdhY3lGdW5jdGlvbk5hbWVUb0NvbW1BcGkocHJvcCk7CiAgICAgIHdpbmRvdy5JSVRDLmNvbW1bY29tbVByb3BdID0gdmFsdWU7CiAgICB9CiAgICAvLyBVcGRhdGUgb3IgYWRkIHRoZSBwcm9wZXJ0eSBpbiBjaGF0CiAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTsKICAgIHJldHVybiB0cnVlOyAvLyBJbmRpY2F0ZXMgdGhhdCB0aGUgYXNzaWdubWVudCB3YXMgc3VjY2Vzc2Z1bAogIH0sCn0pOwoKLy8KLy8gY29tbW9uCi8vCgovKioKICogQWRkcyBhIG5pY2tuYW1lIHRvIHRoZSBjaGF0IGlucHV0LgogKgogKiBAZnVuY3Rpb24gYWRkTmlja25hbWUKICogQHBhcmFtIHtzdHJpbmd9IG5pY2sgLSBUaGUgbmlja25hbWUgdG8gYWRkLgogKi8KY2hhdC5hZGROaWNrbmFtZSA9IGZ1bmN0aW9uIChuaWNrKSB7CiAgdmFyIGMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhdHRleHQnKTsKICBjLnZhbHVlID0gW2MudmFsdWUudHJpbSgpLCBuaWNrXS5qb2luKCcgJykudHJpbSgpICsgJyAnOwogIGMuZm9jdXMoKTsKfTsKCi8qKgogKiBIYW5kbGVzIGNsaWNrIGV2ZW50cyBvbiBuaWNrbmFtZXMgaW4gdGhlIGNoYXQuCiAqCiAqIEBmdW5jdGlvbiBuaWNrbmFtZUNsaWNrZWQKICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgY2xpY2sgZXZlbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBuaWNrbmFtZSAtIFRoZSBjbGlja2VkIG5pY2tuYW1lLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gQWx3YXlzIHJldHVybnMgZmFsc2UuCiAqLwpjaGF0Lm5pY2tuYW1lQ2xpY2tlZCA9IGZ1bmN0aW9uIChldmVudCwgbmlja25hbWUpIHsKICAvLyBzdXBwcmVzcyBAIGlmIGNvbWluZyBmcm9tIGNoYXQKICBpZiAobmlja25hbWUuc3RhcnRzV2l0aCgnQCcpKSB7CiAgICBuaWNrbmFtZSA9IG5pY2tuYW1lLnNsaWNlKDEpOwogIH0KICB2YXIgaG9va0RhdGEgPSB7IGV2ZW50OiBldmVudCwgbmlja25hbWU6IG5pY2tuYW1lIH07CgogIGlmICh3aW5kb3cucnVuSG9va3MoJ25pY2tuYW1lQ2xpY2tlZCcsIGhvb2tEYXRhKSkgewogICAgY2hhdC5hZGROaWNrbmFtZSgnQCcgKyBuaWNrbmFtZSk7CiAgfQoKICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogIHJldHVybiBmYWxzZTsKfTsKCi8vCi8vIENoYW5uZWxzCi8vCgovLyBXT1JLIElOIFBST0dSRVNTCi8vICdhbGwnICdmYWN0aW9uJyBhbmQgJ2FsZXJ0cycgY2hhbm5lbHMgYXJlIGhhcmQgY29kZWQgaW4gc2V2ZXJhbCBwbGFjZXMgKGluY2x1ZGluZyBtb2JpbGUgYXBwKQovLyBkb250IGNoYW5nZSB0aG9zZSBjaGFubmVscyBzaW5jZSB0aGV5IHJlZmVyIHRvIHN0b2NrIGNoYW5uZWxzCi8vIHlvdSBjYW4gYWRkIGNoYW5uZWxzIGZyb20gYW5vdGhlciBzb3VyY2UgcHJvdmlkZXIgKG1lc3NhZ2UgcmVsYXksIGxvZ2dpbmcgZnJvbSBwbHVnaW5zLi4uKQoKLyoqCiAqIEhvbGQgY2hhbm5lbCBkZXNjcmlwdGlvbgogKgogKiBTZWUgY29tbS5qcyBmb3IgZXhhbXBsZXMKICogQHR5cGVkZWYge09iamVjdH0gQ2hhbm5lbERlc2NyaXB0aW9uCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCAtIHVuaXEgaWQsIG1hdGNoZXMgJ3RhYicgcGFyYW1ldGVyIGZvciBzZXJ2ZXIgcmVxdWVzdHMKICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgLSB2aXNpYmxlIG5hbWUKICogQHByb3BlcnR5IHtzdHJpbmd9IFtpbnB1dFByb21wdF0gLSAob3B0aW9uYWwpIHN0cmluZyBmb3IgdGhlIGlucHV0IHByb21wdAogKiBAcHJvcGVydHkge3N0cmluZ30gW2lucHV0Q2xhc3NdIC0gKG9wdGlvbmFsKSBjbGFzcyB0byBhcHBseSB0byAjY2hhdGlucHV0CiAqIEBwcm9wZXJ0eSB7Q2hhbm5lbFNlbmRNZXNzYWdlRm59IFtzZW5kTWVzc2FnZV0gLSAob3B0aW9uYWwpIGZ1bmN0aW9uIHRvIHNlbmQgdGhlIG1lc3NhZ2UKICogQHByb3BlcnR5IHtDaGFubmVsUmVxdWVzdEZufSBbcmVxdWVzdF0gLSAob3B0aW9uYWwpIGZ1bmN0aW9uIHRvIGNhbGwgdG8gcmVxdWVzdCBuZXcgbWVzc2FnZQogKiBAcHJvcGVydHkge0NoYW5uZWxSZW5kZXJGbn0gW3JlbmRlcl0gLSAob3B0aW9uYWwpIGZ1bmN0aW9uIHRvIHJlbmRlciBjaGFubmVsIGNvbnRlbnQsLCBjYWxsZWQgb24gdGFiIGNoYW5nZQogKiBAcHJvcGVydHkge2Jvb2xlYW59IFtsb2NhbEJvdW5kc10gLSAob3B0aW9uYWwpIGlmIHRydWUsIHJlc2V0IG9uIHZpZXcgY2hhbmdlCiAqLwovKioKICogQGNhbGxiYWNrIENoYW5uZWxTZW5kTWVzc2FnZUZuCiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGNoYW5uZWwgaWQKICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBpbnB1dCBtZXNzYWdlCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KLyoqCiAqIEBjYWxsYmFjayBDaGFubmVsUmVxdWVzdEZuCiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGNoYW5uZWwgaWQKICogQHBhcmFtIHtib29sZWFufSBnZXRPbGRlck1zZ3MgLSB0cnVlIGlmIHJlcXVlc3QgZGF0YSBmcm9tIGEgc2Nyb2xsIHRvIHRvcAogKiBAcGFyYW0ge2Jvb2xlYW59IGlzUmV0cnkKICogQHJldHVybnMge3ZvaWR9CiAqLwovKioKICogQGNhbGxiYWNrIENoYW5uZWxSZW5kZXJGbgogKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBjaGFubmVsIGlkCiAqIEBwYXJhbSB7Ym9vbGVhbn0gb2xkTXNnc1dlcmVBZGRlZCAtIHRydWUgaWYgZGF0YSBoYXMgYmVlbiBhZGRlZCBhdCB0aGUgdG9wICh0byBwcmVzZXJ2ZSBzY3JvbGwgcG9zaXRpb24pCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KCi8qKgogKiBIb2xkcyBjaGFubmVscyBpbmZvcy4KICoKICogQHR5cGUge0NoYW5uZWxEZXNjcmlwdGlvbltdfQogKiBAbWVtYmVyb2YgbW9kdWxlOmNoYXQKICovCmNoYXQuY2hhbm5lbHMgPSBbXTsKCi8qKgogKiBHZXRzIHRoZSBuYW1lIG9mIHRoZSBhY3RpdmUgY2hhdCB0YWIuCiAqCiAqIEBmdW5jdGlvbiBnZXRBY3RpdmUKICogQHJldHVybnMge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIGFjdGl2ZSBjaGF0IHRhYi4KICovCmNoYXQuZ2V0QWN0aXZlID0gZnVuY3Rpb24gKCkgewogIHJldHVybiAkKCcjY2hhdGNvbnRyb2xzIC5hY3RpdmUnKS5kYXRhKCdjaGFubmVsJyk7Cn07CgovKioKICogQ29udmVydHMgYSBjaGF0IHRhYiBuYW1lIHRvIGl0cyBjb3JyZXNwb25kaW5nIGNoYW5uZWwgb2JqZWN0LgogKgogKiBAZnVuY3Rpb24gZ2V0Q2hhbm5lbERlc2MKICogQHBhcmFtIHtzdHJpbmd9IHRhYiAtIFRoZSBuYW1lIG9mIHRoZSBjaGF0IHRhYi4KICogQHJldHVybnMge0NoYW5uZWxEZXNjcmlwdGlvbn0gVGhlIGNvcnJlc3BvbmRpbmcgY2hhbm5lbCBuYW1lICgnZmFjdGlvbicsICdhbGVydHMnLCBvciAnYWxsJykuCiAqLwpjaGF0LmdldENoYW5uZWxEZXNjID0gZnVuY3Rpb24gKHRhYikgewogIHZhciBjaGFubmVsT2JqZWN0ID0gbnVsbDsKICBjaGF0LmNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7CiAgICBpZiAoZW50cnkuaWQgPT09IHRhYikgY2hhbm5lbE9iamVjdCA9IGVudHJ5OwogIH0pOwogIHJldHVybiBjaGFubmVsT2JqZWN0Owp9OwoKLyoqCiAqIEFsbG93cyBwbHVnaW5zIHRvIHJlcXVlc3QgYW5kIG1vbml0b3IgQ09NTSBkYXRhIHN0cmVhbXMgaW4gdGhlIGJhY2tncm91bmQuIFRoaXMgaXMgdXNlZnVsIGZvciBwbHVnaW5zCiAqIHRoYXQgbmVlZCB0byBwcm9jZXNzIENPTU0gZGF0YSBldmVuIHdoZW4gdGhlIHVzZXIgaXMgbm90IGFjdGl2ZWx5IHZpZXdpbmcgdGhlIENPTU0gY2hhbm5lbHMuCiAqIEl0IHRyYWNrcyB0aGUgcmVxdWVzdGVkIGNoYW5uZWxzIGZvciBlYWNoIHBsdWdpbiBpbnN0YW5jZSBhbmQgdXBkYXRlcyB0aGUgZ2xvYmFsIHN0YXRlIGFjY29yZGluZ2x5LgogKgogKiBAZnVuY3Rpb24gYmFja2dyb3VuZENoYW5uZWxEYXRhCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnN0YW5jZSAtIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBwbHVnaW4gb3IgaW5zdGFuY2UgcmVxdWVzdGluZyBiYWNrZ3JvdW5kIENPTU0gZGF0YS4KICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWwgLSBUaGUgbmFtZSBvZiB0aGUgQ09NTSBjaGFubmVsICgnYWxsJywgJ2ZhY3Rpb24nLCBvciAnYWxlcnRzJykuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gZmxhZyAtIFNldCB0byB0cnVlIHRvIHJlcXVlc3QgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCBjaGFubmVsLCBmYWxzZSB0byBzdG9wIHJlcXVlc3RpbmcuCiAqLwpjaGF0LmJhY2tncm91bmRDaGFubmVsRGF0YSA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgY2hhbm5lbCwgZmxhZykgewogIC8vIGZpcnN0LCBzdG9yZSB0aGUgc3RhdGUgZm9yIHRoaXMgaW5zdGFuY2UKICBpZiAoIWNoYXQuYmFja2dyb3VuZEluc3RhbmNlQ2hhbm5lbCkgY2hhdC5iYWNrZ3JvdW5kSW5zdGFuY2VDaGFubmVsID0ge307CiAgaWYgKCFjaGF0LmJhY2tncm91bmRJbnN0YW5jZUNoYW5uZWxbaW5zdGFuY2VdKSBjaGF0LmJhY2tncm91bmRJbnN0YW5jZUNoYW5uZWxbaW5zdGFuY2VdID0ge307CiAgY2hhdC5iYWNrZ3JvdW5kSW5zdGFuY2VDaGFubmVsW2luc3RhbmNlXVtjaGFubmVsXSA9IGZsYWc7CgogIC8vIG5vdywgdG8gc2ltcGxpZnkgdGhlIHJlcXVlc3QgY29kZSwgbWVyZ2UgdGhlIGZsYWdzIGZvciBhbGwgaW5zdGFuY2VzIGludG8gb25lCiAgLy8gMS4gY2xlYXIgZXhpc3Rpbmcgb3ZlcmFsbCBmbGFncwogIGNoYXQuYmFja2dyb3VuZENoYW5uZWxzID0ge307CiAgLy8gMi4gZm9yIGVhY2ggaW5zdGFuY2UgbW9uaXRvcmluZyBDT01NLi4uCiAgJC5lYWNoKGNoYXQuYmFja2dyb3VuZEluc3RhbmNlQ2hhbm5lbCwgZnVuY3Rpb24gKGluc3RhbmNlKSB7CiAgICAvLyAzLiBhbmQgZm9yIGVhY2ggY2hhbm5lbCBtb25pdG9yZWQgYnkgdGhpcyBpbnN0YW5jZS4uLgogICAgJC5lYWNoKGNoYXQuYmFja2dyb3VuZEluc3RhbmNlQ2hhbm5lbFtpbnN0YW5jZV0sIGZ1bmN0aW9uIChjaGFubmVsLCBmbGFnKSB7CiAgICAgIC8vIDQuIGlmIGl0J3MgbW9uaXRvcmVkLCBzZXQgdGhlIGNoYW5uZWwgZmxhZwogICAgICBpZiAoZmxhZykgY2hhdC5iYWNrZ3JvdW5kQ2hhbm5lbHNbY2hhbm5lbF0gPSB0cnVlOwogICAgfSk7CiAgfSk7Cn07CgovKioKICogUmVxdWVzdHMgY2hhdCBtZXNzYWdlcyBmb3IgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2hhdCB0YWIgYW5kIGJhY2tncm91bmQgY2hhbm5lbHMuCiAqIEl0IGNhbGxzIHRoZSBhcHByb3ByaWF0ZSByZXF1ZXN0IGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBhY3RpdmUgdGFiIG9yIGJhY2tncm91bmQgY2hhbm5lbHMuCiAqCiAqIEBmdW5jdGlvbiByZXF1ZXN0CiAqLwpjaGF0LnJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGNoYW5uZWwgPSBjaGF0LmdldEFjdGl2ZSgpOwogIGNoYXQuY2hhbm5lbHMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHsKICAgIGlmIChjaGFubmVsID09PSBlbnRyeS5pZCB8fCAoY2hhdC5iYWNrZ3JvdW5kQ2hhbm5lbHMgJiYgY2hhdC5iYWNrZ3JvdW5kQ2hhbm5lbHNbZW50cnkuaWRdKSkgewogICAgICBpZiAoZW50cnkucmVxdWVzdCkgZW50cnkucmVxdWVzdChlbnRyeS5pZCwgZmFsc2UpOwogICAgfQogIH0pOwp9OwoKLyoqCiAqIENoZWNrcyBpZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGNoYXQgdGFiIG5lZWRzIG1vcmUgbWVzc2FnZXMuCiAqIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIGJ5IHNjcm9sbCBldmVudHMgYW5kIGxvYWRzIG9sZGVyIG1lc3NhZ2VzIHdoZW4gdGhlIHVzZXIgc2Nyb2xscyB0byB0aGUgdG9wLgogKgogKiBAZnVuY3Rpb24gbmVlZE1vcmVNZXNzYWdlcwogKi8KY2hhdC5uZWVkTW9yZU1lc3NhZ2VzID0gZnVuY3Rpb24gKCkgewogIHZhciBhY3RpdmVUYWIgPSBjaGF0LmdldEFjdGl2ZSgpOwogIHZhciBjaGFubmVsID0gY2hhdC5nZXRDaGFubmVsRGVzYyhhY3RpdmVUYWIpOwogIGlmICghY2hhbm5lbCB8fCAhY2hhbm5lbC5yZXF1ZXN0KSByZXR1cm47CgogIHZhciBhY3RpdmVDaGF0ID0gJCgnI2NoYXQgPiA6dmlzaWJsZScpOwogIGlmIChhY3RpdmVDaGF0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuOwoKICB2YXIgaGFzU2Nyb2xsYmFyID0gd2luZG93LnNjcm9sbEJvdHRvbShhY3RpdmVDaGF0KSAhPT0gMCB8fCBhY3RpdmVDaGF0LnNjcm9sbFRvcCgpICE9PSAwOwogIHZhciBuZWFyVG9wID0gYWN0aXZlQ2hhdC5zY3JvbGxUb3AoKSA8PSB3aW5kb3cuQ0hBVF9SRVFVRVNUX1NDUk9MTF9UT1A7CiAgaWYgKGhhc1Njcm9sbGJhciAmJiAhbmVhclRvcCkgcmV0dXJuOwoKICBjaGFubmVsLnJlcXVlc3QoY2hhbm5lbC5pZCwgZmFsc2UpOwp9OwoKLyoqCiAqIENob29zZXMgYW5kIGFjdGl2YXRlcyBhIHNwZWNpZmllZCBjaGF0IHRhYi4KICogQWxzbyB0cmlnZ2VycyBhbiBlYXJseSByZWZyZXNoIG9mIHRoZSBjaGF0IGRhdGEgd2hlbiBzd2l0Y2hpbmcgdGFicy4KICoKICogQGZ1bmN0aW9uIGNob29zZVRhYgogKiBAcGFyYW0ge3N0cmluZ30gdGFiIC0gVGhlIG5hbWUgb2YgdGhlIGNoYXQgdGFiIHRvIGFjdGl2YXRlICgnYWxsJywgJ2ZhY3Rpb24nLCBvciAnYWxlcnRzJykuCiAqLwpjaGF0LmNob29zZVRhYiA9IGZ1bmN0aW9uICh0YWIpIHsKICBpZiAoCiAgICBjaGF0LmNoYW5uZWxzLmV2ZXJ5KGZ1bmN0aW9uIChlbnRyeSkgewogICAgICByZXR1cm4gZW50cnkuaWQgIT09IHRhYjsKICAgIH0pCiAgKSB7CiAgICB2YXIgdGFic0F2YWxhaWJsZSA9IGNoYXQuY2hhbm5lbHMKICAgICAgLm1hcChmdW5jdGlvbiAoZW50cnkpIHsKICAgICAgICByZXR1cm4gJyInICsgZW50cnkuaWQgKyAnIic7CiAgICAgIH0pCiAgICAgIC5qb2luKCcsICcpOwogICAgbG9nLndhcm4oJ2NoYXQgdGFiICInICsgdGFiICsgJyIgcmVxdWVzdGVkIC0gYnV0IG9ubHkgJyArIHRhYnNBdmFsYWlibGUgKyAnIGFyZSB2YWxpZCAtIGFzc3VtaW5nICJhbGwiIHdhbnRlZCcpOwogICAgdGFiID0gJ2FsbCc7CiAgfQoKICB2YXIgb2xkVGFiID0gY2hhdC5nZXRBY3RpdmUoKTsKCiAgbG9jYWxTdG9yYWdlWydpaXRjLWNoYXQtdGFiJ10gPSB0YWI7CgogIHZhciBvbGRDaGFubmVsID0gY2hhdC5nZXRDaGFubmVsRGVzYyhvbGRUYWIpOwogIHZhciBjaGFubmVsID0gY2hhdC5nZXRDaGFubmVsRGVzYyh0YWIpOwoKICB2YXIgY2hhdElucHV0ID0gJCgnI2NoYXRpbnB1dCcpOwogIGlmIChvbGRDaGFubmVsICYmIG9sZENoYW5uZWwuaW5wdXRDbGFzcykgY2hhdElucHV0LnJlbW92ZUNsYXNzKG9sZENoYW5uZWwuaW5wdXRDbGFzcyk7CiAgaWYgKGNoYW5uZWwuaW5wdXRDbGFzcykgY2hhdElucHV0LmFkZENsYXNzKGNoYW5uZWwuaW5wdXRDbGFzcyk7CgogIHZhciBtYXJrID0gJCgnI2NoYXRpbnB1dCBtYXJrJyk7CiAgbWFyay50ZXh0KGNoYW5uZWwuaW5wdXRQcm9tcHQgfHwgJycpOwoKICAkKCcjY2hhdGNvbnRyb2xzIC5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7CiAgJCgiI2NoYXRjb250cm9scyBhW2RhdGEtY2hhbm5lbD0nIiArIHRhYiArICInXSIpLmFkZENsYXNzKCdhY3RpdmUnKTsKCiAgaWYgKHRhYiAhPT0gb2xkVGFiKSB3aW5kb3cuc3RhcnRSZWZyZXNoVGltZW91dCgwLjEgKiAxMDAwKTsgLy8gb25seSBjaGF0IHVzZXMgdGhlIHJlZnJlc2ggdGltZXIgc3R1ZmYsIHNvIGEgcGVyZmVjdCB3YXkgb2YgZm9yY2luZyBhbiBlYXJseSByZWZyZXNoIGFmdGVyIGEgdGFiIGNoYW5nZQoKICAkKCcjY2hhdCA+IGRpdicpLmhpZGUoKTsKCiAgdmFyIGVsbSA9ICQoJyNjaGF0JyArIHRhYik7CiAgZWxtLnNob3coKTsKCiAgaWYgKGNoYW5uZWwucmVuZGVyKSBjaGFubmVsLnJlbmRlcih0YWIpOwoKICBpZiAoZWxtLmRhdGEoJ25lZWRzU2Nyb2xsVG9wJykpIHsKICAgIGVsbS5kYXRhKCdpZ25vcmVOZXh0U2Nyb2xsJywgdHJ1ZSk7CiAgICBlbG0uc2Nyb2xsVG9wKGVsbS5kYXRhKCduZWVkc1Njcm9sbFRvcCcpKTsKICAgIGVsbS5kYXRhKCduZWVkc1Njcm9sbFRvcCcsIG51bGwpOwogIH0KfTsKCi8qKgogKiBUb2dnbGVzIHRoZSBjaGF0IHdpbmRvdyBiZXR3ZWVuIGV4cGFuZGVkIGFuZCBjb2xsYXBzZWQgc3RhdGVzLgogKiBXaGVuIGV4cGFuZGVkLCB0aGUgY2hhdCB3aW5kb3cgY292ZXJzIGEgbGFyZ2VyIGFyZWEgb2YgdGhlIHNjcmVlbi4KICogVGhpcyBmdW5jdGlvbiBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgY2hhdCBpcyBzY3JvbGxlZCB0byB0aGUgYm90dG9tIHdoZW4gY29sbGFwc2VkLgogKgogKiBAZnVuY3Rpb24gdG9nZ2xlCiAqLwpjaGF0LnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgYyA9ICQoJyNjaGF0LCAjY2hhdGNvbnRyb2xzJyk7CiAgaWYgKGMuaGFzQ2xhc3MoJ2V4cGFuZCcpKSB7CiAgICBjLnJlbW92ZUNsYXNzKCdleHBhbmQnKTsKICAgIHZhciBkaXYgPSAkKCcjY2hhdCA+IGRpdjp2aXNpYmxlJyk7CiAgICBkaXYuZGF0YSgnaWdub3JlTmV4dFNjcm9sbCcsIHRydWUpOwogICAgZGl2LnNjcm9sbFRvcCg5OTk5OTk5OSk7IC8vIHNjcm9sbCB0byBib3R0b20KICAgICQoJy5sZWFmbGV0LWNvbnRyb2wnKS5yZW1vdmVDbGFzcygnY2hhdC1leHBhbmQnKTsKICB9IGVsc2UgewogICAgYy5hZGRDbGFzcygnZXhwYW5kJyk7CiAgICAkKCcubGVhZmxldC1jb250cm9sJykuYWRkQ2xhc3MoJ2NoYXQtZXhwYW5kJyk7CiAgICBjaGF0Lm5lZWRNb3JlTWVzc2FnZXMoKTsKICB9Cn07CgovKioKICogRGlzcGxheXMgdGhlIGNoYXQgaW50ZXJmYWNlIGFuZCBhY3RpdmF0ZXMgYSBzcGVjaWZpZWQgY2hhdCB0YWIuCiAqCiAqIEBmdW5jdGlvbiBzaG93CiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNoYXQgdGFiIHRvIHNob3cgYW5kIGFjdGl2YXRlLgogKi8KY2hhdC5zaG93ID0gZnVuY3Rpb24gKG5hbWUpIHsKICBpZiAod2luZG93LmlzU21hcnRwaG9uZSgpKSB7CiAgICAkKCcjdXBkYXRlc3RhdHVzJykuaGlkZSgpOwogIH0gZWxzZSB7CiAgICAkKCcjdXBkYXRlc3RhdHVzJykuc2hvdygpOwogIH0KICAkKCcjY2hhdCwgI2NoYXRpbnB1dCcpLnNob3coKTsKCiAgY2hhdC5jaG9vc2VUYWIobmFtZSk7Cn07CgovKioKICogQ2hhdCB0YWIgY2hvb3NlciBoYW5kbGVyLgogKiBUaGlzIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZCBieSBhIGNsaWNrIGV2ZW50IG9uIHRoZSBjaGF0IHRhYi4gSXQgcmVhZHMgdGhlIHRhYiBuYW1lIGZyb20gdGhlIGV2ZW50IHRhcmdldAogKiBhbmQgYWN0aXZhdGVzIHRoZSBjb3JyZXNwb25kaW5nIGNoYXQgdGFiLgogKgogKiBAZnVuY3Rpb24gY2hvb3NlcgogKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCB0cmlnZ2VyZWQgYnkgY2xpY2tpbmcgYSBjaGF0IHRhYi4KICovCmNoYXQuY2hvb3NlciA9IGZ1bmN0aW9uIChldmVudCkgewogIHZhciB0ID0gJChldmVudC50YXJnZXQpOwogIHZhciB0YWIgPSB0LmRhdGEoJ2NoYW5uZWwnKTsKCiAgaWYgKHdpbmRvdy5pc1NtYXJ0cGhvbmUoKSAmJiAhd2luZG93LnVzZUFwcFBhbmVzKCkpIHsKICAgIHdpbmRvdy5zaG93KHRhYik7CiAgfSBlbHNlIHsKICAgIGNoYXQuY2hvb3NlVGFiKHRhYik7CiAgfQp9OwoKLyoqCiAqIE1haW50YWlucyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIGEgY2hhdCBib3ggd2hlbiBuZXcgbWVzc2FnZXMgYXJlIGFkZGVkLgogKiBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGtlZXAgdGhlIHNjcm9sbCBwb3NpdGlvbiBmaXhlZCB3aGVuIG9sZCBtZXNzYWdlcyBhcmUgbG9hZGVkLCBhbmQgdG8gYXV0b21hdGljYWxseSBzY3JvbGwKICogdG8gdGhlIGJvdHRvbSB3aGVuIG5ldyBtZXNzYWdlcyBhcmUgYWRkZWQgaWYgdGhlIHVzZXIgaXMgYWxyZWFkeSBhdCB0aGUgYm90dG9tIG9mIHRoZSBjaGF0LgogKgogKiBAZnVuY3Rpb24ga2VlcFNjcm9sbFBvc2l0aW9uCiAqIEBwYXJhbSB7alF1ZXJ5fSBib3ggLSBUaGUgalF1ZXJ5IG9iamVjdCBvZiB0aGUgY2hhdCBib3guCiAqIEBwYXJhbSB7bnVtYmVyfSBzY3JvbGxCZWZvcmUgLSBUaGUgc2Nyb2xsIHBvc2l0aW9uIGJlZm9yZSBuZXcgbWVzc2FnZXMgd2VyZSBhZGRlZC4KICogQHBhcmFtIHtib29sZWFufSBpc09sZE1zZ3MgLSBJbmRpY2F0ZXMgaWYgdGhlIGFkZGVkIG1lc3NhZ2VzIGFyZSBvbGRlciBtZXNzYWdlcy4KICovCmNoYXQua2VlcFNjcm9sbFBvc2l0aW9uID0gZnVuY3Rpb24gKGJveCwgc2Nyb2xsQmVmb3JlLCBpc09sZE1zZ3MpIHsKICAvLyBJZiBzY3JvbGxlZCBkb3duIGNvbXBsZXRlbHksIGtlZXAgaXQgdGhhdCB3YXkgc28gbmV3IG1lc3NhZ2VzIGNhbgogIC8vIGJlIHNlZW4gZWFzaWx5LiBJZiBzY3JvbGxlZCB1cCwgb25seSBuZWVkIHRvIGZpeCBzY3JvbGwgcG9zaXRpb24KICAvLyB3aGVuIG9sZCBtZXNzYWdlcyBhcmUgYWRkZWQuIE5ldyBtZXNzYWdlcyBhZGRlZCBhdCB0aGUgYm90dG9tIGRvbuKAmXQKICAvLyBjaGFuZ2UgdGhlIHZpZXcgYW5kIGVuYWJsaW5nIHRoaXMgd291bGQgbWFrZSB0aGUgY2hhdCBzY3JvbGwgZG93bgogIC8vIGZvciBldmVyeSBhZGRlZCBtZXNzYWdlLCBldmVuIGlmIHRoZSB1c2VyIHdhbnRzIHRvIHJlYWQgb2xkIHN0dWZmLgoKICBpZiAoYm94LmlzKCc6aGlkZGVuJykgJiYgIWlzT2xkTXNncykgewogICAgYm94LmRhdGEoJ25lZWRzU2Nyb2xsVG9wJywgOTk5OTk5OTkpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKHNjcm9sbEJlZm9yZSA9PT0gMCB8fCBpc09sZE1zZ3MpIHsKICAgIGJveC5kYXRhKCdpZ25vcmVOZXh0U2Nyb2xsJywgdHJ1ZSk7CiAgICBib3guc2Nyb2xsVG9wKGJveC5zY3JvbGxUb3AoKSArICh3aW5kb3cuc2Nyb2xsQm90dG9tKGJveCkgLSBzY3JvbGxCZWZvcmUpKTsKICB9Cn07CgovKioKICogQ3JlYXRlIGFuZCBpbnNlcnQgaW50byB0aGUgRE9NL01vYmlsZSBhcHAgdGhlIGNoYW5uZWwgdGFiCiAqCiAqIEBmdW5jdGlvbiBjcmVhdGVDaGFubmVsVGFiCiAqIEBtZW1iZXJvZiBjaGF0CiAqIEBwYXJhbSB7Q2hhbm5lbERlc2NyaXB0aW9ufSBjaGFubmVsRGVzYyAtIGNoYW5uZWwgZGVzY3JpcHRpb24KICogQHN0YXRpYwogKi8KZnVuY3Rpb24gY3JlYXRlQ2hhbm5lbFRhYihjaGFubmVsRGVzYykgewogIHZhciBjaGF0Q29udHJvbHMgPSAkKCcjY2hhdGNvbnRyb2xzJyk7CiAgdmFyIGNoYXREaXYgPSAkKCcjY2hhdCcpOwogIHZhciBhY2Nlc3NMaW5rID0gTC5VdGlsLnRlbXBsYXRlKCc8YSBkYXRhLWNoYW5uZWw9IntpZH0iIGFjY2Vzc2tleT0ie2luZGV4fSIgdGl0bGU9Ilt7aW5kZXh9XSI+e25hbWV9PC9hPicsIGNoYW5uZWxEZXNjKTsKICAkKGFjY2Vzc0xpbmspLmFwcGVuZFRvKGNoYXRDb250cm9scykuY2xpY2soY2hhdC5jaG9vc2VyKTsKCiAgdmFyIGNoYW5uZWxEaXYgPSBMLlV0aWwudGVtcGxhdGUoJzxkaXYgaWQ9ImNoYXR7aWR9Ij48dGFibGU+PC90YWJsZT48L2Rpdj4nLCBjaGFubmVsRGVzYyk7CiAgdmFyIGVsbSA9ICQoY2hhbm5lbERpdikuYXBwZW5kVG8oY2hhdERpdik7CiAgaWYgKGNoYW5uZWxEZXNjLnJlcXVlc3QpIHsKICAgIGVsbS5zY3JvbGwoZnVuY3Rpb24gKCkgewogICAgICB2YXIgdCA9ICQodGhpcyk7CiAgICAgIGlmICh0LmRhdGEoJ2lnbm9yZU5leHRTY3JvbGwnKSkgcmV0dXJuIHQuZGF0YSgnaWdub3JlTmV4dFNjcm9sbCcsIGZhbHNlKTsKICAgICAgaWYgKHQuc2Nyb2xsVG9wKCkgPCB3aW5kb3cuQ0hBVF9SRVFVRVNUX1NDUk9MTF9UT1ApIGNoYW5uZWxEZXNjLnJlcXVlc3QoY2hhbm5lbERlc2MuaWQsIHRydWUpOwogICAgICBpZiAod2luZG93LnNjcm9sbEJvdHRvbSh0KSA9PT0gMCkgY2hhbm5lbERlc2MucmVxdWVzdChjaGFubmVsRGVzYy5pZCwgZmFsc2UpOwogICAgfSk7CiAgfQoKICAvLyBwYW5lCiAgaWYgKHdpbmRvdy51c2VBbmRyb2lkUGFuZXMoKSkgewogICAgLy8gZXhsdWRlIGhhcmQgY29kZWQgcGFuZXMKICAgIGlmIChjaGFubmVsRGVzYy5pZCAhPT0gJ2FsbCcgJiYgY2hhbm5lbERlc2MuaWQgIT09ICdmYWN0aW9uJyAmJiBjaGFubmVsRGVzYy5pZCAhPT0gJ2FsZXJ0cycpIHsKICAgICAgYXBwLmFkZFBhbmUoY2hhbm5lbERlc2MuaWQsIGNoYW5uZWxEZXNjLm5hbWUsICdpY19hY3Rpb25fdmlld19hc19saXN0Jyk7CiAgICB9CiAgfQp9Cgp2YXIgaXNUYWJzU2V0dXAgPSBmYWxzZTsKLyoqCiAqIEFkZCB0byB0aGUgY2hhbm5lbCBsaXN0IGEgbmV3IGNoYW5uZWwgZGVzY3JpcHRpb24KICoKICogSWYgdGFicyBhcmUgYWxyZWFkeSBjcmVhdGVkLCBhIHRhYiBpcyBjcmVhdGVkIGZvciB0aGlzIGNoYW5uZWwgYXMgd2VsbAogKgogKiBAZnVuY3Rpb24gYWRkQ2hhbm5lbAogKiBAcGFyYW0ge0NoYW5uZWxEZXNjcmlwdGlvbn0gY2hhbm5lbERlc2MgLSBjaGFubmVsIGRlc2NyaXB0aW9uCiAqLwpjaGF0LmFkZENoYW5uZWwgPSBmdW5jdGlvbiAoY2hhbm5lbERlc2MpIHsKICAvLyBkZW55IHJlc2VydmVkIG5hbWUKICBpZiAoY2hhbm5lbERlc2MuaWQgPT09ICdpbmZvJyB8fCBjaGFubmVsRGVzYy5pZCA9PT0gJ21hcCcpIHsKICAgIGxvZy53YXJuKCdjb3VsZCBub3QgYWRkIGNoYW5uZWwgIicgKyBjaGFubmVsRGVzYy5pZCArICciOiByZXNlcnZlZCcpOwogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoY2hhdC5nZXRDaGFubmVsRGVzYyhjaGFubmVsRGVzYy5pZCkpIHsKICAgIGxvZy53YXJuKCdjb3VsZCBub3QgYWRkIGNoYW5uZWwgIicgKyBjaGFubmVsRGVzYy5pZCArICciOiBhbHJlYWR5IGV4aXN0Jyk7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBjaGF0LmNoYW5uZWxzLnB1c2goY2hhbm5lbERlc2MpOwogIGNoYW5uZWxEZXNjLmluZGV4ID0gY2hhdC5jaGFubmVscy5sZW5ndGg7CgogIGlmIChpc1RhYnNTZXR1cCkgY3JlYXRlQ2hhbm5lbFRhYihjaGFubmVsRGVzYyk7CgogIHJldHVybiB0cnVlOwp9OwoKLy8KLy8gc2V0dXAKLy8KCi8qKgogKiBTZXRzIHVwIGFsbCBjaGFubmVscyBzdGFydGluZyBmcm9tIGludGVsIENPTU0KICoKICogQGZ1bmN0aW9uIHNldHVwVGFicwogKi8KY2hhdC5zZXR1cFRhYnMgPSBmdW5jdGlvbiAoKSB7CiAgaXNUYWJzU2V0dXAgPSB0cnVlOwoKICAvLyBpbnNlcnQgYXQgdGhlIGJlZ2luaW5nIHRoZSBjb21tIGNoYW5uZWxzCiAgY2hhdC5jaGFubmVscy5zcGxpY2UoMCwgMCwgLi4uSUlUQy5jb21tLmNoYW5uZWxzKTsKCiAgY2hhdC5jaGFubmVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSwgaSkgewogICAgZW50cnkuaW5kZXggPSBpICsgMTsKICAgIGNyZWF0ZUNoYW5uZWxUYWIoZW50cnkpOwogIH0pOwoKICAvLyBsZWdhY3kgY29tcGF0aWJpbGl0eQogIGNoYXQuX3B1YmxpYyA9IElJVEMuY29tbS5fY2hhbm5lbHNEYXRhLmFsbDsKICBjaGF0Ll9mYWN0aW9uID0gSUlUQy5jb21tLl9jaGFubmVsc0RhdGEuZmFjdGlvbjsKICBjaGF0Ll9hbGVydHMgPSBJSVRDLmNvbW0uX2NoYW5uZWxzRGF0YS5hbGVydHM7CgogIC8qKgogICAqIEluaXRpYXRlcyBhIHJlcXVlc3QgZm9yIHB1YmxpYyBjaGF0IGRhdGEuCiAgICoKICAgKiBAZnVuY3Rpb24gcmVxdWVzdFB1YmxpYwogICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0T2xkZXJNc2dzIC0gV2hldGhlciB0byByZXRyaWV2ZSBvbGRlciBtZXNzYWdlcy4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1JldHJ5PWZhbHNlXSAtIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgYSByZXRyeS4KICAgKi8KICBjaGF0LnJlcXVlc3RQdWJsaWMgPSBmdW5jdGlvbiAoZ2V0T2xkZXJNc2dzLCBpc1JldHJ5KSB7CiAgICByZXR1cm4gSUlUQy5jb21tLnJlcXVlc3RDaGFubmVsKCdhbGwnLCBnZXRPbGRlck1zZ3MsIGlzUmV0cnkpOwogIH07CgogIC8qKgogICAqIFJlcXVlc3RzIGZhY3Rpb24gY2hhdCBtZXNzYWdlcy4KICAgKgogICAqIEBmdW5jdGlvbiByZXF1ZXN0RmFjdGlvbgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0T2xkZXJNc2dzIC0gRmxhZyB0byBkZXRlcm1pbmUgaWYgb2xkZXIgbWVzc2FnZXMgYXJlIGJlaW5nIHJlcXVlc3RlZC4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1JldHJ5PWZhbHNlXSAtIEZsYWcgdG8gaW5kaWNhdGUgaWYgdGhpcyBpcyBhIHJldHJ5IGF0dGVtcHQuCiAgICovCiAgY2hhdC5yZXF1ZXN0RmFjdGlvbiA9IGZ1bmN0aW9uIChnZXRPbGRlck1zZ3MsIGlzUmV0cnkpIHsKICAgIHJldHVybiBJSVRDLmNvbW0ucmVxdWVzdENoYW5uZWwoJ2ZhY3Rpb24nLCBnZXRPbGRlck1zZ3MsIGlzUmV0cnkpOwogIH07CgogIC8qKgogICAqIEluaXRpYXRlcyBhIHJlcXVlc3QgZm9yIGFsZXJ0cyBjaGF0IGRhdGEuCiAgICoKICAgKiBAZnVuY3Rpb24gcmVxdWVzdEFsZXJ0cwogICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0T2xkZXJNc2dzIC0gV2hldGhlciB0byByZXRyaWV2ZSBvbGRlciBtZXNzYWdlcy4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1JldHJ5PWZhbHNlXSAtIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgYSByZXRyeS4KICAgKi8KICBjaGF0LnJlcXVlc3RBbGVydHMgPSBmdW5jdGlvbiAoZ2V0T2xkZXJNc2dzLCBpc1JldHJ5KSB7CiAgICByZXR1cm4gSUlUQy5jb21tLnJlcXVlc3RDaGFubmVsKCdhbGVydHMnLCBnZXRPbGRlck1zZ3MsIGlzUmV0cnkpOwogIH07CgogIC8qKgogICAqIFJlbmRlcnMgcHVibGljIGNoYXQgaW4gdGhlIFVJLgogICAqCiAgICogQGZ1bmN0aW9uIHJlbmRlclB1YmxpYwogICAqIEBwYXJhbSB7Ym9vbGVhbn0gb2xkTXNnc1dlcmVBZGRlZCAtIEluZGljYXRlcyBpZiBvbGRlciBtZXNzYWdlcyB3ZXJlIGFkZGVkIHRvIHRoZSBjaGF0LgogICAqLwogIGNoYXQucmVuZGVyUHVibGljID0gZnVuY3Rpb24gKG9sZE1zZ3NXZXJlQWRkZWQpIHsKICAgIHJldHVybiBJSVRDLmNvbW0ucmVuZGVyQ2hhbm5lbCgnYWxsJywgb2xkTXNnc1dlcmVBZGRlZCk7CiAgfTsKCiAgLyoqCiAgICogUmVuZGVycyBmYWN0aW9uIGNoYXQuCiAgICoKICAgKiBAZnVuY3Rpb24gcmVuZGVyRmFjdGlvbgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gb2xkTXNnc1dlcmVBZGRlZCAtIEluZGljYXRlcyBpZiBvbGQgbWVzc2FnZXMgd2VyZSBhZGRlZCBpbiB0aGUgY3VycmVudCByZW5kZXJpbmcuCiAgICovCiAgY2hhdC5yZW5kZXJGYWN0aW9uID0gZnVuY3Rpb24gKG9sZE1zZ3NXZXJlQWRkZWQpIHsKICAgIHJldHVybiBJSVRDLmNvbW0ucmVuZGVyQ2hhbm5lbCgnZmFjdGlvbicsIG9sZE1zZ3NXZXJlQWRkZWQpOwogIH07CgogIC8qKgogICAqIFJlbmRlcnMgYWxlcnRzIGNoYXQgaW4gdGhlIFVJLgogICAqCiAgICogQGZ1bmN0aW9uIHJlbmRlckFsZXJ0cwogICAqIEBwYXJhbSB7Ym9vbGVhbn0gb2xkTXNnc1dlcmVBZGRlZCAtIEluZGljYXRlcyBpZiBvbGRlciBtZXNzYWdlcyB3ZXJlIGFkZGVkIHRvIHRoZSBjaGF0LgogICAqLwogIGNoYXQucmVuZGVyQWxlcnRzID0gZnVuY3Rpb24gKG9sZE1zZ3NXZXJlQWRkZWQpIHsKICAgIHJldHVybiBJSVRDLmNvbW0ucmVuZGVyQ2hhbm5lbCgnYWxsZXJ0cycsIG9sZE1zZ3NXZXJlQWRkZWQpOwogIH07Cn07CgovKioKICogU2V0cyB1cCB0aGUgY2hhdCBpbnRlcmZhY2UuCiAqCiAqIEBmdW5jdGlvbiBzZXR1cAogKi8KY2hhdC5zZXR1cCA9IGZ1bmN0aW9uICgpIHsKICBjaGF0LnNldHVwVGFicygpOwoKICBpZiAobG9jYWxTdG9yYWdlWydpaXRjLWNoYXQtdGFiJ10pIHsKICAgIGNoYXQuY2hvb3NlVGFiKGxvY2FsU3RvcmFnZVsnaWl0Yy1jaGF0LXRhYiddKTsKICB9CgogICQoJyNjaGF0Y29udHJvbHMsICNjaGF0LCAjY2hhdGlucHV0Jykuc2hvdygpOwoKICAkKCcjY2hhdGNvbnRyb2xzIGE6Zmlyc3QnKS5jbGljayhjaGF0LnRvZ2dsZSk7CgogICQoJyNjaGF0aW5wdXQnKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAkKCcjY2hhdGlucHV0IGlucHV0JykuZm9jdXMoKTsKICB9KTsKCiAgY2hhdC5zZXR1cFRpbWUoKTsKICBjaGF0LnNldHVwUG9zdGluZygpOwoKICB3aW5kb3cucmVxdWVzdHMuYWRkUmVmcmVzaEZ1bmN0aW9uKGNoYXQucmVxdWVzdCk7CgogIHZhciBjbHMgPSBQTEFZRVIudGVhbSA9PT0gJ1JFU0lTVEFOQ0UnID8gJ3JlcycgOiAnZW5sJzsKICAkKCcjY2hhdGlucHV0IG1hcmsnKS5hZGRDbGFzcyhjbHMpOwoKICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLm5pY2tuYW1lJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICByZXR1cm4gY2hhdC5uaWNrbmFtZUNsaWNrZWQoZXZlbnQsICQodGhpcykudGV4dCgpKTsKICB9KTsKfTsKCi8qKgogKiBTZXRzIHVwIHRoZSB0aW1lIGRpc3BsYXkgaW4gdGhlIGNoYXQgaW5wdXQgYm94LgogKiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIHRpbWUgZGlzcGxheWVkIG5leHQgdG8gdGhlIGNoYXQgaW5wdXQgZmllbGQgZXZlcnkgbWludXRlIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnQgdGltZS4KICoKICogQGZ1bmN0aW9uIHNldHVwVGltZQogKi8KY2hhdC5zZXR1cFRpbWUgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGlucHV0VGltZSA9ICQoJyNjaGF0aW5wdXQgdGltZScpOwogIHZhciB1cGRhdGVUaW1lID0gZnVuY3Rpb24gKCkgewogICAgaWYgKHdpbmRvdy5pc0lkbGUoKSkgcmV0dXJuOwogICAgdmFyIGQgPSBuZXcgRGF0ZSgpOwogICAgdmFyIGggPSBkLmdldEhvdXJzKCkgKyAnJzsKICAgIGlmIChoLmxlbmd0aCA9PT0gMSkgaCA9ICcwJyArIGg7CiAgICB2YXIgbSA9IGQuZ2V0TWludXRlcygpICsgJyc7CiAgICBpZiAobS5sZW5ndGggPT09IDEpIG0gPSAnMCcgKyBtOwogICAgaW5wdXRUaW1lLnRleHQoaCArICc6JyArIG0pOwogICAgLy8gdXBkYXRlIE9OIHRoZSBtaW51dGUgKDFtcyBhZnRlcikKICAgIHNldFRpbWVvdXQodXBkYXRlVGltZSwgKDYwIC0gZC5nZXRTZWNvbmRzKCkpICogMTAwMCArIDEpOwogIH07CiAgdXBkYXRlVGltZSgpOwogIHdpbmRvdy5hZGRSZXN1bWVGdW5jdGlvbih1cGRhdGVUaW1lKTsKfTsKCi8vCi8vIHBvc3RpbmcKLy8KCi8qKgogKiBIYW5kbGVzIHRhYiBjb21wbGV0aW9uIGluIGNoYXQgaW5wdXQuCiAqCiAqIEBmdW5jdGlvbiBoYW5kbGVUYWJDb21wbGV0aW9uCiAqLwpjaGF0LmhhbmRsZVRhYkNvbXBsZXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGVsID0gJCgnI2NoYXRpbnB1dCBpbnB1dCcpOwogIHZhciBjdXJQb3MgPSBlbC5nZXQoMCkuc2VsZWN0aW9uU3RhcnQ7CiAgdmFyIHRleHQgPSBlbC52YWwoKTsKICB2YXIgd29yZCA9IHRleHQKICAgIC5zbGljZSgwLCBjdXJQb3MpCiAgICAucmVwbGFjZSgvLipcYihbYS16MC05LV9dKS8sICckMScpCiAgICAudG9Mb3dlckNhc2UoKTsKCiAgdmFyIGxpc3QgPSAkKCcjY2hhdCA+IGRpdjp2aXNpYmxlIG1hcmsnKTsKICBsaXN0ID0gbGlzdC5tYXAoZnVuY3Rpb24gKGluZCwgbWFyaykgewogICAgcmV0dXJuICQobWFyaykudGV4dCgpOwogIH0pOwogIGxpc3QgPSB3aW5kb3cudW5pcXVlQXJyYXkobGlzdCk7CgogIHZhciBuaWNrID0gbnVsbDsKICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKICAgIGlmICghbGlzdFtpXS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgod29yZCkpIGNvbnRpbnVlOwogICAgaWYgKG5pY2sgJiYgbmljayAhPT0gbGlzdFtpXSkgewogICAgICBsb2cud2FybignTW9yZSB0aGFuIG9uZSBuaWNrIG1hdGNoZXMsIGFib3J0aW5nLiAoJyArIGxpc3RbaV0gKyAnIHZzICcgKyBuaWNrICsgJyknKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgbmljayA9IGxpc3RbaV07CiAgfQogIGlmICghbmljaykgewogICAgcmV0dXJuOwogIH0KCiAgdmFyIHBvc1N0YXJ0ID0gY3VyUG9zIC0gd29yZC5sZW5ndGg7CiAgdmFyIG5ld1RleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBwb3NTdGFydCk7CiAgdmFyIGF0UHJlc2VudCA9IHRleHQuc3Vic3RyaW5nKHBvc1N0YXJ0IC0gMSwgcG9zU3RhcnQpID09PSAnQCc7CiAgbmV3VGV4dCArPSAoYXRQcmVzZW50ID8gJycgOiAnQCcpICsgbmljayArICcgJzsKICBuZXdUZXh0ICs9IHRleHQuc3Vic3RyaW5nKGN1clBvcyk7CiAgZWwudmFsKG5ld1RleHQpOwp9OwoKLyoqCiAqIFBvc3RzIGEgY2hhdCBtZXNzYWdlIHRvIHRoZSBjdXJyZW50bHkgYWN0aXZlIGNoYXQgdGFiLgogKgogKiBAZnVuY3Rpb24gcG9zdE1zZwogKi8KY2hhdC5wb3N0TXNnID0gZnVuY3Rpb24gKCkgewogIHZhciBjID0gY2hhdC5nZXRBY3RpdmUoKTsKICB2YXIgY2hhbm5lbCA9IGNoYXQuZ2V0Q2hhbm5lbERlc2MoYyk7CgogIHZhciBtc2cgPSAkLnRyaW0oJCgnI2NoYXRpbnB1dCBpbnB1dCcpLnZhbCgpKTsKICBpZiAoIW1zZyB8fCBtc2cgPT09ICcnKSByZXR1cm47CgogIGlmIChjaGFubmVsLnNlbmRNZXNzYWdlKSB7CiAgICAkKCcjY2hhdGlucHV0IGlucHV0JykudmFsKCcnKTsKICAgIHJldHVybiBjaGFubmVsLnNlbmRNZXNzYWdlKGMsIG1zZyk7CiAgfQp9OwoKLyoqCiAqIFNldHMgdXAgdGhlIGNoYXQgbWVzc2FnZSBwb3N0aW5nIGZ1bmN0aW9uYWxpdHkuCiAqCiAqIEBmdW5jdGlvbiBzZXR1cFBvc3RpbmcKICovCmNoYXQuc2V0dXBQb3N0aW5nID0gZnVuY3Rpb24gKCkgewogIGlmICghd2luZG93LmlzU21hcnRwaG9uZSgpKSB7CiAgICAkKCcjY2hhdGlucHV0IGlucHV0Jykua2V5ZG93bihmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgdHJ5IHsKICAgICAgICB2YXIga2MgPSBldmVudC5rZXlDb2RlID8gZXZlbnQua2V5Q29kZSA6IGV2ZW50LndoaWNoOwogICAgICAgIGlmIChrYyA9PT0gMTMpIHsKICAgICAgICAgIC8vIGVudGVyCiAgICAgICAgICBjaGF0LnBvc3RNc2coKTsKICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSBlbHNlIGlmIChrYyA9PT0gOSkgewogICAgICAgICAgLy8gdGFiCiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgY2hhdC5oYW5kbGVUYWJDb21wbGV0aW9uKCk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgbG9nLmVycm9yKGUpOwogICAgICAgIC8vIGlmIChlLnN0YWNrKSB7IGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7IH0KICAgICAgfQogICAgfSk7CiAgfQoKICAkKCcjY2hhdGlucHV0Jykuc3VibWl0KGZ1bmN0aW9uIChldmVudCkgewogICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgIGNoYXQucG9zdE1zZygpOwogIH0pOwp9OwoKLyoqCiAqIExlZ2FjeSBmdW5jdGlvbiBmb3IgcmVuZGVyaW5nIGNoYXQgbWVzc2FnZXMuIFVzZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBwbHVnaW5zLgogKgogKiBAZGVwcmVjYXRlZAogKiBAZnVuY3Rpb24gcmVuZGVyTXNnCiAqIEBwYXJhbSB7c3RyaW5nfSBtc2cgLSBUaGUgY2hhdCBtZXNzYWdlLgogKiBAcGFyYW0ge3N0cmluZ30gbmljayAtIFRoZSBuaWNrbmFtZSBvZiB0aGUgcGxheWVyIHdobyBzZW50IHRoZSBtZXNzYWdlLgogKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIFRoZSB0aW1lc3RhbXAgb2YgdGhlIG1lc3NhZ2UuCiAqIEBwYXJhbSB7c3RyaW5nfSB0ZWFtIC0gVGhlIHRlYW0gb2YgdGhlIHBsYXllciB3aG8gc2VudCB0aGUgbWVzc2FnZS4KICogQHBhcmFtIHtib29sZWFufSBtc2dUb1BsYXllciAtIEZsYWcgaW5kaWNhdGluZyBpZiB0aGUgbWVzc2FnZSBpcyBkaXJlY3RlZCB0byB0aGUgcGxheWVyLgogKiBAcGFyYW0ge2Jvb2xlYW59IHN5c3RlbU5hcnJvd2Nhc3QgLSBGbGFnIGluZGljYXRpbmcgaWYgdGhlIG1lc3NhZ2UgaXMgYSBzeXN0ZW0gbmFycm93Y2FzdC4KICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyBhIGNoYXQgbWVzc2FnZSByb3cuCiAqLwpjaGF0LnJlbmRlck1zZyA9IGZ1bmN0aW9uIChtc2csIG5pY2ssIHRpbWUsIHRlYW0sIG1zZ1RvUGxheWVyLCBzeXN0ZW1OYXJyb3djYXN0KSB7CiAgLy8gSW1pdGF0aW5nIGRhdGEgdXN1YWxseSBkZXJpdmVkIGZyb20gcHJvY2Vzc2luZyByYXcgY2hhdCBkYXRhCiAgdmFyIGZha2VEYXRhID0gewogICAgZ3VpZDogJ2xlZ2FjeWd1aWQtJyArIE1hdGgucmFuZG9tKCksCiAgICB0aW1lOiB0aW1lLAogICAgcHVibGljOiAhc3lzdGVtTmFycm93Y2FzdCwKICAgIHNlY3VyZTogc3lzdGVtTmFycm93Y2FzdCwKICAgIGFsZXJ0OiBtc2dUb1BsYXllciwKICAgIG1zZ1RvUGxheWVyOiBtc2dUb1BsYXllciwKICAgIHR5cGU6IHN5c3RlbU5hcnJvd2Nhc3QgPyAnU1lTVEVNX05BUlJPV0NBU1QnIDogJ1BMQVlFUl9HRU5FUkFURUQnLAogICAgbmFycm93Y2FzdDogc3lzdGVtTmFycm93Y2FzdCwKICAgIGF1dG86IGZhbHNlLCAvLyBBc3N1bWluZyB0aGUgbWVzc2FnZSBpcyBwbGF5ZXItZ2VuZXJhdGVkIGlmIGl0J3Mgbm90IGEgc3lzdGVtIGJyb2FkY2FzdAogICAgdGVhbTogdGVhbSwKICAgIHBsYXllcjogewogICAgICBuYW1lOiBuaWNrLAogICAgICB0ZWFtOiB0ZWFtLAogICAgfSwKICAgIG1hcmt1cDogWwogICAgICBbJ1RFWFQnLCB7IHBsYWluOiBtc2cgfV0sIC8vIEEgc2ltcGxlIG1lc3NhZ2Ugd2l0aCBubyBzcGVjaWFsIG1hcmt1cAogICAgXSwKICB9OwoKICAvLyBVc2UgZXhpc3RpbmcgSUlUQyBmdW5jdGlvbnMgdG8gcmVuZGVyIGEgY2hhdCBtZXNzYWdlIHJvdwogIHJldHVybiBJSVRDLmNvbW0ucmVuZGVyTXNnUm93KGZha2VEYXRhKTsKfTsKCi8qKgogKiBMZWdhY3kgZnVuY3Rpb24gZm9yIGNvbnZlcnRzIGEgY2hhdCB0YWIgbmFtZSB0byBpdHMgY29ycmVzcG9uZGluZyBDT01NIGNoYW5uZWwgbmFtZS4KICogVXNlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIHBsdWdpbnMuCiAqCiAqIEBkZXByZWNhdGVkCiAqIEBmdW5jdGlvbiB0YWJUb0NoYW5uZWwKICogQHBhcmFtIHtzdHJpbmd9IHRhYiAtIFRoZSBuYW1lIG9mIHRoZSBjaGF0IHRhYi4KICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvcnJlc3BvbmRpbmcgY2hhbm5lbCBuYW1lICgnZmFjdGlvbicsICdhbGVydHMnLCBvciAnYWxsJykuCiAqLwpjaGF0LnRhYlRvQ2hhbm5lbCA9IGZ1bmN0aW9uICh0YWIpIHsKICBpZiAodGFiID09PSAnZmFjdGlvbicpIHJldHVybiAnZmFjdGlvbic7CiAgaWYgKHRhYiA9PT0gJ2FsZXJ0cycpIHJldHVybiAnYWxlcnRzJzsKICByZXR1cm4gJ2FsbCc7Cn07CgovKiBnbG9iYWwgbG9nLCBQTEFZRVIsIEwsIElJVEMsIGFwcCAqLwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogY29tbS5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ2NvbW0nKTsKLyoqCiAqIE5hbWVzcGFjZSBmb3IgY29tbS1yZWxhdGVkIGZ1bmN0aW9uYWxpdGllcy4KICoKICogQG1lbWJlcm9mIElJVEMKICogQG5hbWVzcGFjZSBjb21tCiAqLwoKLyoqCiAqIEB0eXBlIHtjaGF0LkNoYW5uZWxEZXNjcmlwdGlvbltdfQogKiBAbWVtYmVyb2YgSUlUQy5jb21tCiAqLwp2YXIgX2NoYW5uZWxzID0gWwogIHsKICAgIGlkOiAnYWxsJywKICAgIG5hbWU6ICdBbGwnLAogICAgbG9jYWxCb3VuZHM6IHRydWUsCiAgICBpbnB1dFByb21wdDogJ2Jyb2FkY2FzdDonLAogICAgaW5wdXRDbGFzczogJ3B1YmxpYycsCiAgICByZXF1ZXN0OiByZXF1ZXN0Q2hhbm5lbCwKICAgIHJlbmRlcjogcmVuZGVyQ2hhbm5lbCwKICAgIHNlbmRNZXNzYWdlOiBzZW5kQ2hhdE1lc3NhZ2UsCiAgfSwKICB7CiAgICBpZDogJ2ZhY3Rpb24nLAogICAgbmFtZTogJ0ZhY3Rpb24nLAogICAgbG9jYWxCb3VuZHM6IHRydWUsCiAgICBpbnB1dFByb21wdDogJ3RlbGwgZmFjdGlvbjonLAogICAgaW5wdXRDbGFzczogJ2ZhY3Rpb24nLAogICAgcmVxdWVzdDogcmVxdWVzdENoYW5uZWwsCiAgICByZW5kZXI6IHJlbmRlckNoYW5uZWwsCiAgICBzZW5kTWVzc2FnZTogc2VuZENoYXRNZXNzYWdlLAogIH0sCiAgewogICAgaWQ6ICdhbGVydHMnLAogICAgbmFtZTogJ0FsZXJ0cycsCiAgICBpbnB1dFByb21wdDogJ3RlbGwgSmFydmlzOicsCiAgICBpbnB1dENsYXNzOiAnYWxlcnRzJywKICAgIHJlcXVlc3Q6IHJlcXVlc3RDaGFubmVsLAogICAgcmVuZGVyOiByZW5kZXJDaGFubmVsLAogICAgc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uICgpIHsKICAgICAgYWxlcnQoIkphcnZpczogQSBzdHJhbmdlIGdhbWUuIFRoZSBvbmx5IHdpbm5pbmcgbW92ZSBpcyBub3QgdG8gcGxheS4gSG93IGFib3V0IGEgbmljZSBnYW1lIG9mIGNoZXNzP1xuKFlvdSBjYW4ndCBjb21tIHRvIHRoZSAnYWxlcnRzJyBjaGFubmVsISkiKTsKICAgIH0sCiAgfSwKXTsKCi8qKgogKiBIb2xkcyBkYXRhIHJlbGF0ZWQgdG8gZWFjaCBpbnRlbCBjaGFubmVsLgogKgogKiBAdHlwZSB7T2JqZWN0fQogKiBAbWVtYmVyb2YgSUlUQy5jb21tCiAqLwp2YXIgX2NoYW5uZWxzRGF0YSA9IHt9OwoKLyoqCiAqIEluaXRpYWxpemUgdGhlIGNoYW5uZWwgZGF0YS4KICoKICogQGZ1bmN0aW9uIElJVEMuY29tbS5faW5pdENoYW5uZWxEYXRhCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7Y2hhdC5DaGFubmVsRGVzY3JpcHRpb259IGlkIC0gVGhlIGNoYW5uZWwgaWQuCiAqLwpmdW5jdGlvbiBfaW5pdENoYW5uZWxEYXRhKGlkKSB7CiAgLy8gcHJlc2VydmUgY2hhbm5lbCBvYmplY3QKICBpZiAoIV9jaGFubmVsc0RhdGFbaWRdKSBfY2hhbm5lbHNEYXRhW2lkXSA9IHt9OwogIF9jaGFubmVsc0RhdGFbaWRdLmRhdGEgPSB7fTsKICBfY2hhbm5lbHNEYXRhW2lkXS5ndWlkcyA9IFtdOwogIF9jaGFubmVsc0RhdGFbaWRdLm9sZGVzdFRpbWVzdGFtcCA9IC0xOwogIGRlbGV0ZSBfY2hhbm5lbHNEYXRhW2lkXS5vbGRlc3RHVUlEOwogIF9jaGFubmVsc0RhdGFbaWRdLm5ld2VzdFRpbWVzdGFtcCA9IC0xOwogIGRlbGV0ZSBfY2hhbm5lbHNEYXRhW2lkXS5uZXdlc3RHVUlEOwp9CgovKioKICogVGVtcGxhdGUgb2YgcG9ydGFsIGxpbmsgaW4gY29tbS4KICogQHR5cGUge1N0cmluZ30KICogQG1lbWJlcm9mIElJVEMuY29tbQogKi8KbGV0IHBvcnRhbFRlbXBsYXRlID0KICAnPGEgb25jbGljaz0id2luZG93LnNlbGVjdFBvcnRhbEJ5TGF0TG5nKHt7IGxhdCB9fSwge3sgbG5nIH19KTtyZXR1cm4gZmFsc2UiIHRpdGxlPSJ7eyB0aXRsZSB9fSIgaHJlZj0ie3sgdXJsIH19IiBjbGFzcz0iYmlkaS1pc29sYXRlIGhlbHAiPnt7IHBvcnRhbF9uYW1lIH19PC9hPic7Ci8qKgogKiBUZW1wbGF0ZSBmb3IgdGltZSBjZWxsLgogKiBAdHlwZSB7U3RyaW5nfQogKiBAbWVtYmVyb2YgSUlUQy5jb21tCiAqLwpsZXQgdGltZUNlbGxUZW1wbGF0ZSA9ICc8dGQ+PHRpbWUgY2xhc3M9Int7IGNsYXNzX25hbWVzIH19IiB0aXRsZT0ie3sgdGltZV90aXRsZSB9fSIgZGF0YS10aW1lc3RhbXA9Int7IHVuaXh0aW1lIH19Ij57eyB0aW1lIH19PC90aW1lPjwvdGQ+JzsKLyoqCiAqIFRlbXBsYXRlIGZvciBwbGF5ZXIncyBuaWNrbmFtZSBjZWxsLgogKiBAdHlwZSB7U3RyaW5nfQogKiBAbWVtYmVyb2YgSUlUQy5jb21tCiAqLwpsZXQgbmlja0NlbGxUZW1wbGF0ZSA9ICc8dGQ+PHNwYW4gY2xhc3M9ImludmlzZXAiPiZsdDs8L3NwYW4+PG1hcmsgY2xhc3M9Int7IGNsYXNzX25hbWVzIH19Ij57eyBuaWNrIH19PC9tYXJrPjxzcGFuIGNsYXNzPSJpbnZpc2VwIj4mZ3Q7PC9zcGFuPjwvdGQ+JzsKLyoqCiAqIFRlbXBsYXRlIGZvciBjaGF0IG1lc3NhZ2UgdGV4dCBjZWxsLgogKiBAdHlwZSB7U3RyaW5nfQogKiBAbWVtYmVyb2YgSUlUQy5jb21tCiAqLwpsZXQgbXNnQ2VsbFRlbXBsYXRlID0gJzx0ZCBjbGFzcz0ie3sgY2xhc3NfbmFtZXMgfX0iPnt7IG1zZyB9fTwvdGQ+JzsKLyoqCiAqIFRlbXBsYXRlIGZvciBtZXNzYWdlIHJvdywgaW5jbHVkZXMgY2VsbHMgZm9yIHRpbWUsIHBsYXllciBuaWNrbmFtZSBhbmQgbWVzc2FnZSB0ZXh0LgogKiBAdHlwZSB7U3RyaW5nfQogKiBAbWVtYmVyb2YgSUlUQy5jb21tCiAqLwpsZXQgbXNnUm93VGVtcGxhdGUgPSAnPHRyIGRhdGEtZ3VpZD0ie3sgZ3VpZCB9fSIgY2xhc3M9Int7IGNsYXNzX25hbWVzIH19Ij57eyB0aW1lX2NlbGwgfX17eyBuaWNrX2NlbGwgfX17eyBtc2dfY2VsbCB9fTwvdHI+JzsKLyoqCiAqIFRlbXBsYXRlIGZvciBtZXNzYWdlIGRpdmlkZXIuCiAqIEB0eXBlIHtTdHJpbmd9CiAqIEBtZW1iZXJvZiBJSVRDLmNvbW0KICovCmxldCBkaXZpZGVyVGVtcGxhdGUgPSAnPHRyIGNsYXNzPSJkaXZpZGVyIj48dGQ+PGhyPjwvdGQ+PHRkPnt7IHRleHQgfX08L3RkPjx0ZD48aHI+PC90ZD48L3RyPic7CgovKioKICogUmV0dXJucyB0aGUgY29vcmRpbmF0ZXMgZm9yIHRoZSBtZXNzYWdlIHRvIGJlIHNlbnQsIGRlZmF1bHQgaXMgdGhlIGNlbnRlciBvZiB0aGUgbWFwLgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLmdldExhdExuZ0ZvclNlbmRpbmdNZXNzYWdlCiAqIEByZXR1cm5zIHtMLkxhdExuZ30KICovCmZ1bmN0aW9uIGdldExhdExuZ0ZvclNlbmRpbmdNZXNzYWdlKCkgewogIHJldHVybiBtYXAuZ2V0Q2VudGVyKCk7Cn0KCi8qKgogKiBVcGRhdGVzIHRoZSBvbGRlc3QgYW5kIG5ld2VzdCBtZXNzYWdlIHRpbWVzdGFtcHMgYW5kIEdVSURzIGluIHRoZSBjaGF0IHN0b3JhZ2UuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0uX3VwZGF0ZU9sZE5ld0hhc2gKICogQHByaXZhdGUKICogQHBhcmFtIHtPYmplY3R9IG5ld0RhdGEgLSBUaGUgbmV3IGNoYXQgZGF0YSByZWNlaXZlZC4KICogQHBhcmFtIHtPYmplY3R9IHN0b3JhZ2VIYXNoIC0gVGhlIGNoYXQgc3RvcmFnZSBvYmplY3QuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNPbGRlck1zZ3MgLSBXaGV0aGVyIHRoZSBuZXcgZGF0YSBjb250YWlucyBvbGRlciBtZXNzYWdlcy4KICogQHBhcmFtIHtib29sZWFufSBpc0FzY2VuZGluZ09yZGVyIC0gV2hldGhlciB0aGUgbmV3IGRhdGEgaXMgaW4gYXNjZW5kaW5nIG9yZGVyLgogKi8KZnVuY3Rpb24gX3VwZGF0ZU9sZE5ld0hhc2gobmV3RGF0YSwgc3RvcmFnZUhhc2gsIGlzT2xkZXJNc2dzLCBpc0FzY2VuZGluZ09yZGVyKSB7CiAgLy8gdHJhY2sgb2xkZXN0ICsgbmV3ZXN0IHRpbWVzdGFtcHMvR1VJRAogIGlmIChuZXdEYXRhLnJlc3VsdC5sZW5ndGggPiAwKSB7CiAgICB2YXIgZmlyc3QgPSB7CiAgICAgIGd1aWQ6IG5ld0RhdGEucmVzdWx0WzBdWzBdLAogICAgICB0aW1lOiBuZXdEYXRhLnJlc3VsdFswXVsxXSwKICAgIH07CiAgICB2YXIgbGFzdCA9IHsKICAgICAgZ3VpZDogbmV3RGF0YS5yZXN1bHRbbmV3RGF0YS5yZXN1bHQubGVuZ3RoIC0gMV1bMF0sCiAgICAgIHRpbWU6IG5ld0RhdGEucmVzdWx0W25ld0RhdGEucmVzdWx0Lmxlbmd0aCAtIDFdWzFdLAogICAgfTsKICAgIGlmIChpc0FzY2VuZGluZ09yZGVyKSB7CiAgICAgIHZhciB0ZW1wID0gZmlyc3Q7CiAgICAgIGZpcnN0ID0gbGFzdDsKICAgICAgbGFzdCA9IHRlbXA7CiAgICB9CiAgICBpZiAoc3RvcmFnZUhhc2gub2xkZXN0VGltZXN0YW1wID09PSAtMSB8fCBzdG9yYWdlSGFzaC5vbGRlc3RUaW1lc3RhbXAgPj0gbGFzdC50aW1lKSB7CiAgICAgIGlmIChpc09sZGVyTXNncyB8fCBzdG9yYWdlSGFzaC5vbGRlc3RUaW1lc3RhbXAgIT09IGxhc3QudGltZSkgewogICAgICAgIHN0b3JhZ2VIYXNoLm9sZGVzdFRpbWVzdGFtcCA9IGxhc3QudGltZTsKICAgICAgICBzdG9yYWdlSGFzaC5vbGRlc3RHVUlEID0gbGFzdC5ndWlkOwogICAgICB9CiAgICB9CiAgICBpZiAoc3RvcmFnZUhhc2gubmV3ZXN0VGltZXN0YW1wID09PSAtMSB8fCBzdG9yYWdlSGFzaC5uZXdlc3RUaW1lc3RhbXAgPD0gZmlyc3QudGltZSkgewogICAgICBpZiAoIWlzT2xkZXJNc2dzIHx8IHN0b3JhZ2VIYXNoLm5ld2VzdFRpbWVzdGFtcCAhPT0gZmlyc3QudGltZSkgewogICAgICAgIHN0b3JhZ2VIYXNoLm5ld2VzdFRpbWVzdGFtcCA9IGZpcnN0LnRpbWU7CiAgICAgICAgc3RvcmFnZUhhc2gubmV3ZXN0R1VJRCA9IGZpcnN0Lmd1aWQ7CiAgICAgIH0KICAgIH0KICB9Cn0KCi8qKgogKiBQYXJzZXMgY29tbSBtZXNzYWdlIGRhdGEgaW50byBhIG1vcmUgY29udmVuaWVudCBmb3JtYXQuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0ucGFyc2VNc2dEYXRhCiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIHJhdyBjb21tIG1lc3NhZ2UgZGF0YS4KICogQHJldHVybnMge09iamVjdH0gVGhlIHBhcnNlZCBjb21tIG1lc3NhZ2UgZGF0YS4KICovCmZ1bmN0aW9uIHBhcnNlTXNnRGF0YShkYXRhKSB7CiAgdmFyIGNhdGVnb3JpZXMgPSBkYXRhWzJdLnBsZXh0LmNhdGVnb3JpZXM7CiAgdmFyIGlzUHVibGljID0gKGNhdGVnb3JpZXMgJiAxKSA9PT0gMTsKICB2YXIgaXNTZWN1cmUgPSAoY2F0ZWdvcmllcyAmIDIpID09PSAyOwogIHZhciBtc2dBbGVydCA9IChjYXRlZ29yaWVzICYgNCkgPT09IDQ7CgogIHZhciBtc2dUb1BsYXllciA9IG1zZ0FsZXJ0ICYmIChpc1B1YmxpYyB8fCBpc1NlY3VyZSk7CgogIHZhciB0aW1lID0gZGF0YVsxXTsKICB2YXIgdGVhbSA9IHdpbmRvdy50ZWFtU3RyaW5nVG9JZChkYXRhWzJdLnBsZXh0LnRlYW0pOwogIHZhciBhdXRvID0gZGF0YVsyXS5wbGV4dC5wbGV4dFR5cGUgIT09ICdQTEFZRVJfR0VORVJBVEVEJzsKICB2YXIgc3lzdGVtTmFycm93Y2FzdCA9IGRhdGFbMl0ucGxleHQucGxleHRUeXBlID09PSAnU1lTVEVNX05BUlJPV0NBU1QnOwoKICB2YXIgbWFya3VwID0gZGF0YVsyXS5wbGV4dC5tYXJrdXA7CgogIHZhciBwbGF5ZXIgPSB7CiAgICBuYW1lOiAnJywKICAgIHRlYW06IHRlYW0sCiAgfTsKICBtYXJrdXAuZm9yRWFjaChmdW5jdGlvbiAoZW50KSB7CiAgICBzd2l0Y2ggKGVudFswXSkgewogICAgICBjYXNlICdTRU5ERVInOiAvLyB1c2VyIGdlbmVyYXRlZCBtZXNzYWdlcwogICAgICAgIHBsYXllci5uYW1lID0gZW50WzFdLnBsYWluLnJlcGxhY2UoLzogJC8sICcnKTsgLy8gY3V0IOKAnDog4oCdIGF0IGVuZAogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAnUExBWUVSJzogLy8gYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgbWVzc2FnZXMKICAgICAgICBwbGF5ZXIubmFtZSA9IGVudFsxXS5wbGFpbjsKICAgICAgICBwbGF5ZXIudGVhbSA9IHdpbmRvdy50ZWFtU3RyaW5nVG9JZChlbnRbMV0udGVhbSk7CiAgICAgICAgYnJlYWs7CgogICAgICBkZWZhdWx0OgogICAgICAgIGJyZWFrOwogICAgfQogIH0pOwoKICByZXR1cm4gewogICAgZ3VpZDogZGF0YVswXSwKICAgIHRpbWU6IHRpbWUsCiAgICBwdWJsaWM6IGlzUHVibGljLAogICAgc2VjdXJlOiBpc1NlY3VyZSwKICAgIGFsZXJ0OiBtc2dBbGVydCwKICAgIG1zZ1RvUGxheWVyOiBtc2dUb1BsYXllciwKICAgIHR5cGU6IGRhdGFbMl0ucGxleHQucGxleHRUeXBlLAogICAgbmFycm93Y2FzdDogc3lzdGVtTmFycm93Y2FzdCwKICAgIGF1dG86IGF1dG8sCiAgICB0ZWFtOiB0ZWFtLAogICAgcGxheWVyOiBwbGF5ZXIsCiAgICBtYXJrdXA6IG1hcmt1cCwKICB9Owp9CgovKioKICogV3JpdGVzIG5ldyBjaGF0IGRhdGEgdG8gdGhlIGNoYXQgc3RvcmFnZSBhbmQgbWFuYWdlcyB0aGUgb3JkZXIgb2YgbWVzc2FnZXMuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0uX3dyaXRlRGF0YVRvSGFzaAogKiBAcHJpdmF0ZQogKiBAcGFyYW0ge09iamVjdH0gbmV3RGF0YSAtIFRoZSBuZXcgY2hhdCBkYXRhIHJlY2VpdmVkLgogKiBAcGFyYW0ge09iamVjdH0gc3RvcmFnZUhhc2ggLSBUaGUgY2hhdCBzdG9yYWdlIG9iamVjdC4KICogQHBhcmFtIHtib29sZWFufSBpc09sZGVyTXNncyAtIFdoZXRoZXIgdGhlIG5ldyBkYXRhIGNvbnRhaW5zIG9sZGVyIG1lc3NhZ2VzLgogKiBAcGFyYW0ge2Jvb2xlYW59IGlzQXNjZW5kaW5nT3JkZXIgLSBXaGV0aGVyIHRoZSBuZXcgZGF0YSBpcyBpbiBhc2NlbmRpbmcgb3JkZXIuCiAqLwpmdW5jdGlvbiBfd3JpdGVEYXRhVG9IYXNoKG5ld0RhdGEsIHN0b3JhZ2VIYXNoLCBpc09sZGVyTXNncywgaXNBc2NlbmRpbmdPcmRlcikgewogIF91cGRhdGVPbGROZXdIYXNoKG5ld0RhdGEsIHN0b3JhZ2VIYXNoLCBpc09sZGVyTXNncywgaXNBc2NlbmRpbmdPcmRlcik7CgogIG5ld0RhdGEucmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGpzb24pIHsKICAgIC8vIGF2b2lkIGR1cGxpY2F0ZXMKICAgIGlmIChqc29uWzBdIGluIHN0b3JhZ2VIYXNoLmRhdGEpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgdmFyIHBhcnNlZERhdGEgPSBJSVRDLmNvbW0ucGFyc2VNc2dEYXRhKGpzb24pOwoKICAgIC8vIGZvcm1hdDogdGltZXN0YW1wLCBhdXRvZ2VuZXJhdGVkLCBIVE1MIG1lc3NhZ2UsIG5pY2ssIGFkZGl0aW9uYWwgZGF0YSAocGFyc2VkLCBwbHVnaW4gc3BlY2lmaWMgZGF0YS4uLikKICAgIHN0b3JhZ2VIYXNoLmRhdGFbcGFyc2VkRGF0YS5ndWlkXSA9IFtwYXJzZWREYXRhLnRpbWUsIHBhcnNlZERhdGEuYXV0bywgSUlUQy5jb21tLnJlbmRlck1zZ1JvdyhwYXJzZWREYXRhKSwgcGFyc2VkRGF0YS5wbGF5ZXIubmFtZSwgcGFyc2VkRGF0YV07CiAgICBpZiAoaXNBc2NlbmRpbmdPcmRlcikgewogICAgICBzdG9yYWdlSGFzaC5ndWlkcy5wdXNoKHBhcnNlZERhdGEuZ3VpZCk7CiAgICB9IGVsc2UgewogICAgICBzdG9yYWdlSGFzaC5ndWlkcy51bnNoaWZ0KHBhcnNlZERhdGEuZ3VpZCk7CiAgICB9CiAgfSk7Cn0KCi8qKgogKiBQb3N0cyBhIGNoYXQgbWVzc2FnZSB0byBpbnRlbCBjb21tIGNvbnRleHQuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0uc2VuZENoYXRNZXNzYWdlCiAqIEBwYXJhbSB7c3RyaW5nfSB0YWIgaW50ZWwgdGFiIG5hbWUgKGVpdGhlciBhbGwgb3IgZmFjdGlvbikKICogQHBhcmFtIHtzdHJpbmd9IG1zZyBtZXNzYWdlIHRvIGJlIHNlbnQKICovCmZ1bmN0aW9uIHNlbmRDaGF0TWVzc2FnZSh0YWIsIG1zZykgewogIGlmICh0YWIgIT09ICdhbGwnICYmIHRhYiAhPT0gJ2ZhY3Rpb24nKSByZXR1cm47CgogIGNvbnN0IGxhdGxuZyA9IElJVEMuY29tbS5nZXRMYXRMbmdGb3JTZW5kaW5nTWVzc2FnZSgpOwoKICB2YXIgZGF0YSA9IHsKICAgIG1lc3NhZ2U6IG1zZywKICAgIGxhdEU2OiBNYXRoLnJvdW5kKGxhdGxuZy5sYXQgKiAxZTYpLAogICAgbG5nRTY6IE1hdGgucm91bmQobGF0bG5nLmxuZyAqIDFlNiksCiAgICB0YWI6IHRhYiwKICB9OwoKICB2YXIgZXJyTXNnID0gJ1lvdXIgbWVzc2FnZSBjb3VsZCBub3QgYmUgZGVsaXZlcmVkLiBZb3UgY2FuIGNvcHkmJyArICdwYXN0ZSBpdCBoZXJlIGFuZCB0cnkgYWdhaW4gaWYgeW91IHdhbnQ6XG5cbicgKyBtc2c7CgogIHdpbmRvdy5wb3N0QWpheCgKICAgICdzZW5kUGxleHQnLAogICAgZGF0YSwKICAgIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIGFsZXJ0KGVyck1zZyk7CiAgICAgIHdpbmRvdy5zdGFydFJlZnJlc2hUaW1lb3V0KDAuMSAqIDEwMDApOyAvLyBvbmx5IGNvbW0gdXNlcyB0aGUgcmVmcmVzaCB0aW1lciBzdHVmZiwgc28gYSBwZXJmZWN0IHdheSBvZiBmb3JjaW5nIGFuIGVhcmx5IHJlZnJlc2ggYWZ0ZXIgYSBzZW5kIG1lc3NhZ2UKICAgIH0sCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgIGFsZXJ0KGVyck1zZyk7CiAgICB9CiAgKTsKfQoKdmFyIF9vbGRCQm94ID0gbnVsbDsKLyoqCiAqIEdlbmVyYXRlcyBwb3N0IGRhdGEgZm9yIGNoYXQgcmVxdWVzdHMuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0uX2dlblBvc3REYXRhCiAqIEBwcml2YXRlCiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFubmVsIC0gVGhlIGNoYXQgY2hhbm5lbC4KICogQHBhcmFtIHtib29sZWFufSBnZXRPbGRlck1zZ3MgLSBGbGFnIHRvIGRldGVybWluZSBpZiBvbGRlciBtZXNzYWdlcyBhcmUgYmVpbmcgcmVxdWVzdGVkLgogKiBAcGFyYW0gYXJncz11bmRlZmluZWQgLSBVc2VkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdoZW4gY2FsbGluZyBhIGZ1bmN0aW9uIHdpdGggdGhyZWUgYXJndW1lbnRzLgogKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZ2VuZXJhdGVkIHBvc3QgZGF0YS4KICovCmZ1bmN0aW9uIF9nZW5Qb3N0RGF0YShjaGFubmVsLCBnZXRPbGRlck1zZ3MsIC4uLmFyZ3MpIHsKICBpZiAodHlwZW9mIGNoYW5uZWwgIT09ICdzdHJpbmcnKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FQSSBjaGFuZ2VkOiBpc0ZhY3Rpb24gZmxhZyBub3cgYSBjaGFubmVsIHN0cmluZyAtIGFsbCwgZmFjdGlvbiwgYWxlcnRzJyk7CiAgfQogIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkgewogICAgZ2V0T2xkZXJNc2dzID0gYXJnc1swXTsKICB9CgogIHZhciBiID0gd2luZG93LmNsYW1wTGF0TG5nQm91bmRzKG1hcC5nZXRCb3VuZHMoKSk7CgogIC8vIHNldCBhIGN1cnJlbnQgYm91bmRpbmcgYm94IGlmIG5vbmUgc2V0IHNvIGZhcgogIGlmICghX29sZEJCb3gpIF9vbGRCQm94ID0gYjsKCiAgLy8gdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29tbSByZWZyZXNoZXMsIGEgc21hbGwgZGlmZmVyZW5jZSBjb21wYXJlZCB0byB0aGUgcHJldmlvdXMgYm91bmRpbmcgYm94CiAgLy8gaXMgbm90IGNvbnNpZGVyZWQgZGlmZmVyZW50CiAgdmFyIENIQVRfQk9VTkRJTkdCT1hfU0FNRV9GQUNUT1IgPSAwLjE7CiAgLy8gaWYgdGhlIG9sZCBhbmQgbmV3IGJveCBjb250YWluIGVhY2ggb3RoZXIsIGFmdGVyIGV4cGFuZGluZyBieSB0aGUgZmFjdG9yLCBkb24ndCByZXNldCBjb21tCiAgaWYgKCEoYi5wYWQoQ0hBVF9CT1VORElOR0JPWF9TQU1FX0ZBQ1RPUikuY29udGFpbnMoX29sZEJCb3gpICYmIF9vbGRCQm94LnBhZChDSEFUX0JPVU5ESU5HQk9YX1NBTUVfRkFDVE9SKS5jb250YWlucyhiKSkpIHsKICAgIGxvZy5sb2coJ0JvdW5kaW5nIEJveCBjaGFuZ2VkLCBjb21tIHdpbGwgYmUgY2xlYXJlZCAob2xkOiAnICsgX29sZEJCb3gudG9CQm94U3RyaW5nKCkgKyAnOyBuZXc6ICcgKyBiLnRvQkJveFN0cmluZygpICsgJyknKTsKCiAgICAvLyBuZWVkIHRvIHJlc2V0IHRoZXNlIGZsYWdzIG5vdyBiZWNhdXNlIGNsZWFyaW5nIHdpbGwgb25seSBvY2N1cgogICAgLy8gYWZ0ZXIgdGhlIHJlcXVlc3QgaXMgZmluaXNoZWQg4oCTIGkuZS4gdGhlcmUgd291bGQgYmUgb25lIGFsbW9zdAogICAgLy8gdXNlbGVzcyByZXF1ZXN0LgogICAgX2NoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7CiAgICAgIGlmIChlbnRyeS5sb2NhbEJvdW5kcykgewogICAgICAgIF9pbml0Q2hhbm5lbERhdGEoZW50cnkuaWQpOwogICAgICAgICQoJyNjaGF0JyArIGVudHJ5LmlkKS5kYXRhKCduZWVkc0NsZWFyaW5nJywgdHJ1ZSk7CiAgICAgIH0KICAgIH0pOwogICAgX29sZEJCb3ggPSBiOwogIH0KCiAgaWYgKCFfY2hhbm5lbHNEYXRhW2NoYW5uZWxdKSBfaW5pdENoYW5uZWxEYXRhKGNoYW5uZWwpOwogIHZhciBzdG9yYWdlSGFzaCA9IF9jaGFubmVsc0RhdGFbY2hhbm5lbF07CgogIHZhciBuZSA9IGIuZ2V0Tm9ydGhFYXN0KCk7CiAgdmFyIHN3ID0gYi5nZXRTb3V0aFdlc3QoKTsKICB2YXIgZGF0YSA9IHsKICAgIG1pbkxhdEU2OiBNYXRoLnJvdW5kKHN3LmxhdCAqIDFlNiksCiAgICBtaW5MbmdFNjogTWF0aC5yb3VuZChzdy5sbmcgKiAxZTYpLAogICAgbWF4TGF0RTY6IE1hdGgucm91bmQobmUubGF0ICogMWU2KSwKICAgIG1heExuZ0U2OiBNYXRoLnJvdW5kKG5lLmxuZyAqIDFlNiksCiAgICBtaW5UaW1lc3RhbXBNczogLTEsCiAgICBtYXhUaW1lc3RhbXBNczogLTEsCiAgICB0YWI6IGNoYW5uZWwsCiAgfTsKCiAgaWYgKGdldE9sZGVyTXNncykgewogICAgLy8gYXNrIGZvciBvbGRlciBjb21tIHdoZW4gc2Nyb2xsaW5nIHVwCiAgICBkYXRhID0gJC5leHRlbmQoZGF0YSwgewogICAgICBtYXhUaW1lc3RhbXBNczogc3RvcmFnZUhhc2gub2xkZXN0VGltZXN0YW1wLAogICAgICBwbGV4dENvbnRpbnVhdGlvbkd1aWQ6IHN0b3JhZ2VIYXNoLm9sZGVzdEdVSUQsCiAgICB9KTsKICB9IGVsc2UgewogICAgLy8gYXNrIGZvciBuZXdlciBjb21tCiAgICB2YXIgbWluID0gc3RvcmFnZUhhc2gubmV3ZXN0VGltZXN0YW1wOwogICAgLy8gdGhlIGluaXRpYWwgcmVxdWVzdCB3aWxsIGhhdmUgYm90aCB0aW1lc3RhbXAgdmFsdWVzIHNldCB0byAtMSwKICAgIC8vIHRodXMgd2UgcmVjZWl2ZSB0aGUgbmV3ZXN0IDUwLiBBZnRlciB0aGF0LCB3ZSB3aWxsIG9ubHkgcmVjZWl2ZQogICAgLy8gbWVzc2FnZXMgd2l0aCBhIHRpbWVzdGFtcCBncmVhdGVyIG9yIGVxdWFsIHRvIG1pbiBhYm92ZS4KICAgIC8vIEFmdGVyIHJlc3VtaW5nIGZyb20gaWRsZSwgdGhlcmUgbWlnaHQgYmUgbW9yZSBuZXcgbWVzc2FnZXMgdGhhbgogICAgLy8gZGVzaXJlZE51bUl0ZW1zLiBTbyBvbiB0aGUgZmlyc3QgcmVxdWVzdCwgd2UgYXJlIG5vdCByZWFsbHkgdXAgdG8KICAgIC8vIGRhdGUuIFdlIHdpbGwgZXZlbnR1YWxseSBjYXRjaCB1cCwgYXMgbG9uZyBhcyB0aGVyZSBhcmUgbGVzcyBuZXcKICAgIC8vIG1lc3NhZ2VzIHRoYW4gNTAgcGVyIGVhY2ggcmVmcmVzaCBjeWNsZS4KICAgIC8vIEEgcHJvcGVyIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHF1ZXJ5IHVudGlsIG5vIG1vcmUgbmV3IHJlc3VsdHMgYXJlCiAgICAvLyByZXR1cm5lZC4KICAgIC8vIEN1cnJlbnRseSB0aGlzIGVkZ2UgY2FzZSBpcyBub3QgaGFuZGxlZC4gTGV04oCZcyBzZWUgaWYgdGhpcyBpcyBhCiAgICAvLyBwcm9ibGVtIGluIGNyb3dkZWQgYXJlYXMuCiAgICAkLmV4dGVuZChkYXRhLCB7CiAgICAgIG1pblRpbWVzdGFtcE1zOiBtaW4sCiAgICAgIHBsZXh0Q29udGludWF0aW9uR3VpZDogc3RvcmFnZUhhc2gubmV3ZXN0R1VJRCwKICAgIH0pOwogICAgLy8gd2hlbiByZXF1ZXN0aW5nIHdpdGggYW4gYWN0dWFsIG1pbmltdW0gdGltZXN0YW1wLCByZXF1ZXN0IG9sZGVzdCByYXRoZXIgdGhhbiBuZXdlc3QgZmlyc3QuCiAgICAvLyB0aGlzIG1hdGNoZXMgdGhlIHN0b2NrIGludGVsIHNpdGUsIGFuZCBlbnN1cmVzIG5vIGdhcHMgd2hlbiBjb250aW51aW5nIGFmdGVyIGFuIGV4dGVuZGVkIGlkbGUgcGVyaW9kCiAgICBpZiAobWluID4gLTEpICQuZXh0ZW5kKGRhdGEsIHsgYXNjZW5kaW5nVGltZXN0YW1wT3JkZXI6IHRydWUgfSk7CiAgfQogIHJldHVybiBkYXRhOwp9Cgp2YXIgX3JlcXVlc3RSdW5uaW5nID0ge307CgovKioKICogUmVxdWVzdHMgY2hhdCBtZXNzYWdlcy4KICoKICogQGZ1bmN0aW9uIElJVEMuY29tbS5yZXF1ZXN0Q2hhbm5lbAogKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbCAtIENvbW0gSW50ZWwgY2hhbm5lbCAoYWxsL2ZhY3Rpb24vYWxlcnRzKQogKiBAcGFyYW0ge2Jvb2xlYW59IGdldE9sZGVyTXNncyAtIEZsYWcgdG8gZGV0ZXJtaW5lIGlmIG9sZGVyIG1lc3NhZ2VzIGFyZSBiZWluZyByZXF1ZXN0ZWQuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzUmV0cnk9ZmFsc2VdIC0gRmxhZyB0byBpbmRpY2F0ZSBpZiB0aGlzIGlzIGEgcmV0cnkgYXR0ZW1wdC4KICovCmZ1bmN0aW9uIHJlcXVlc3RDaGFubmVsKGNoYW5uZWwsIGdldE9sZGVyTXNncywgaXNSZXRyeSkgewogIGlmIChfcmVxdWVzdFJ1bm5pbmdbY2hhbm5lbF0gJiYgIWlzUmV0cnkpIHJldHVybjsKICBpZiAod2luZG93LmlzSWRsZSgpKSByZXR1cm4gd2luZG93LnJlbmRlclVwZGF0ZVN0YXR1cygpOwogIF9yZXF1ZXN0UnVubmluZ1tjaGFubmVsXSA9IHRydWU7CiAgJCgiI2NoYXRjb250cm9scyBhW2RhdGEtY2hhbm5lbD0nIiArIGNoYW5uZWwgKyAiJ10iKS5hZGRDbGFzcygnbG9hZGluZycpOwoKICB2YXIgZCA9IF9nZW5Qb3N0RGF0YShjaGFubmVsLCBnZXRPbGRlck1zZ3MpOwogIHdpbmRvdy5wb3N0QWpheCgKICAgICdnZXRQbGV4dHMnLAogICAgZCwKICAgIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIF9oYW5kbGVDaGFubmVsKGNoYW5uZWwsIGRhdGEsIGdldE9sZGVyTXNncywgZC5hc2NlbmRpbmdUaW1lc3RhbXBPcmRlcik7CiAgICB9LAogICAgaXNSZXRyeQogICAgICA/IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF9yZXF1ZXN0UnVubmluZ1tjaGFubmVsXSA9IGZhbHNlOwogICAgICAgIH0KICAgICAgOiBmdW5jdGlvbiAoXywgdGV4dFN0YXR1cykgewogICAgICAgICAgaWYgKHRleHRTdGF0dXMgPT09ICdhYm9ydCcpIF9yZXF1ZXN0UnVubmluZ1tjaGFubmVsXSA9IGZhbHNlOwogICAgICAgICAgZWxzZSByZXF1ZXN0Q2hhbm5lbChjaGFubmVsLCBnZXRPbGRlck1zZ3MsIHRydWUpOwogICAgICAgIH0KICApOwp9CgovKioKICogSGFuZGxlcyBmYWN0aW9uIGNoYXQgcmVzcG9uc2UuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0uX2hhbmRsZUNoYW5uZWwKICogQHByaXZhdGUKICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWwgLSBDb21tIEludGVsIGNoYW5uZWwgKGFsbC9mYWN0aW9uL2FsZXJ0cykKICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSZXNwb25zZSBkYXRhIGZyb20gc2VydmVyLgogKiBAcGFyYW0ge2Jvb2xlYW59IG9sZGVyTXNncyAtIEluZGljYXRlcyBpZiBvbGRlciBtZXNzYWdlcyB3ZXJlIHJlcXVlc3RlZC4KICogQHBhcmFtIHtib29sZWFufSBhc2NlbmRpbmdUaW1lc3RhbXBPcmRlciAtIEluZGljYXRlcyBpZiBtZXNzYWdlcyBhcmUgaW4gYXNjZW5kaW5nIHRpbWVzdGFtcCBvcmRlci4KICovCmZ1bmN0aW9uIF9oYW5kbGVDaGFubmVsKGNoYW5uZWwsIGRhdGEsIG9sZGVyTXNncywgYXNjZW5kaW5nVGltZXN0YW1wT3JkZXIpIHsKICBfcmVxdWVzdFJ1bm5pbmdbY2hhbm5lbF0gPSBmYWxzZTsKICAkKCIjY2hhdGNvbnRyb2xzIGFbZGF0YS1jaGFubmVsPSciICsgY2hhbm5lbCArICInXSIpLnJlbW92ZUNsYXNzKCdsb2FkaW5nJyk7CgogIGlmICghZGF0YSB8fCAhZGF0YS5yZXN1bHQpIHsKICAgIHdpbmRvdy5mYWlsZWRSZXF1ZXN0Q291bnQrKzsKICAgIHJldHVybiBsb2cud2FybihjaGFubmVsICsgJyBjb21tIGVycm9yLiBXYWl0aW5nIGZvciBuZXh0IGF1dG8tcmVmcmVzaC4nKTsKICB9CgogIGlmICghZGF0YS5yZXN1bHQubGVuZ3RoICYmICEkKCcjY2hhdCcgKyBjaGFubmVsKS5kYXRhKCduZWVkc0NsZWFyaW5nJykpIHsKICAgIC8vIG5vIG5ldyBkYXRhIGFuZCBjdXJyZW50IGRhdGEgaW4gY29tbS5fZmFjdGlvbi5kYXRhIGlzIGFscmVhZHkgcmVuZGVyZWQKICAgIHJldHVybjsKICB9CgogICQoJyNjaGF0JyArIGNoYW5uZWwpLmRhdGEoJ25lZWRzQ2xlYXJpbmcnLCBudWxsKTsKCiAgaWYgKCFfY2hhbm5lbHNEYXRhW2NoYW5uZWxdKSBfaW5pdENoYW5uZWxEYXRhKGNoYW5uZWwpOwogIHZhciBvbGQgPSBfY2hhbm5lbHNEYXRhW2NoYW5uZWxdLm9sZGVzdEdVSUQ7CiAgX3dyaXRlRGF0YVRvSGFzaChkYXRhLCBfY2hhbm5lbHNEYXRhW2NoYW5uZWxdLCBvbGRlck1zZ3MsIGFzY2VuZGluZ1RpbWVzdGFtcE9yZGVyKTsKICB2YXIgb2xkTXNnc1dlcmVBZGRlZCA9IG9sZCAhPT0gX2NoYW5uZWxzRGF0YVtjaGFubmVsXS5vbGRlc3RHVUlEOwoKICB2YXIgaG9vayA9IGNoYW5uZWwgKyAnQ2hhdERhdGFBdmFpbGFibGUnOwogIC8vIGJhY2t3YXJkIGNvbXBhYmlsaXR5CiAgaWYgKGNoYW5uZWwgPT09ICdhbGwnKSBob29rID0gJ3B1YmxpY0NoYXREYXRhQXZhaWxhYmxlJzsKICB3aW5kb3cucnVuSG9va3MoaG9vaywgeyByYXc6IGRhdGEsIHJlc3VsdDogZGF0YS5yZXN1bHQsIHByb2Nlc3NlZDogX2NoYW5uZWxzRGF0YVtjaGFubmVsXS5kYXRhIH0pOwoKICAvLyBnZW5lcmljIGhvb2sKICB3aW5kb3cucnVuSG9va3MoJ2NvbW1EYXRhQXZhaWxhYmxlJywgeyBjaGFubmVsOiBjaGFubmVsLCByYXc6IGRhdGEsIHJlc3VsdDogZGF0YS5yZXN1bHQsIHByb2Nlc3NlZDogX2NoYW5uZWxzRGF0YVtjaGFubmVsXS5kYXRhIH0pOwoKICByZW5kZXJDaGFubmVsKGNoYW5uZWwsIG9sZE1zZ3NXZXJlQWRkZWQpOwp9CgovKioKICogUmVuZGVycyBpbnRlbCBjaGF0LgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLnJlbmRlckNoYW5uZWwKICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWwgLSBDb21tIEludGVsIGNoYW5uZWwgKGFsbC9mYWN0aW9uL2FsZXJ0cykKICogQHBhcmFtIHtib29sZWFufSBvbGRNc2dzV2VyZUFkZGVkIC0gSW5kaWNhdGVzIGlmIG9sZCBtZXNzYWdlcyB3ZXJlIGFkZGVkIGluIHRoZSBjdXJyZW50IHJlbmRlcmluZy4KICovCmZ1bmN0aW9uIHJlbmRlckNoYW5uZWwoY2hhbm5lbCwgb2xkTXNnc1dlcmVBZGRlZCkgewogIGlmICghX2NoYW5uZWxzRGF0YVtjaGFubmVsXSkgX2luaXRDaGFubmVsRGF0YShjaGFubmVsKTsKICBJSVRDLmNvbW0ucmVuZGVyRGF0YShfY2hhbm5lbHNEYXRhW2NoYW5uZWxdLmRhdGEsICdjaGF0JyArIGNoYW5uZWwsIG9sZE1zZ3NXZXJlQWRkZWQsIF9jaGFubmVsc0RhdGFbY2hhbm5lbF0uZ3VpZHMpOwp9CgovLwovLyBSZW5kZXJpbmcgcHJpbWl0aXZlIGZvciBtYXJrdXAsIGNoYXQgY2VsbHMgKHRkKSBhbmQgY2hhdCByb3cgKHRyKQovLwoKLyoqCiAqIFJlbmRlcnMgdGV4dCBmb3IgdGhlIGNoYXQsIGNvbnZlcnRpbmcgcGxhaW4gdGV4dCB0byBIVE1MIGFuZCBhZGRpbmcgbGlua3MuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0ucmVuZGVyVGV4dAogKiBAcGFyYW0ge09iamVjdH0gdGV4dCAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBwbGFpbiB0ZXh0IHRvIHJlbmRlci4KICogQHJldHVybnMge3N0cmluZ30gVGhlIHJlbmRlcmVkIEhUTUwgc3RyaW5nLgogKi8KZnVuY3Rpb24gcmVuZGVyVGV4dCh0ZXh0KSB7CiAgbGV0IGNvbnRlbnQ7CgogIGlmICh0ZXh0LnRlYW0pIHsKICAgIGxldCB0ZWFtSWQgPSB3aW5kb3cudGVhbVN0cmluZ1RvSWQodGV4dC50ZWFtKTsKICAgIGlmICh0ZWFtSWQgPT09IHdpbmRvdy5URUFNX05PTkUpIHRlYW1JZCA9IHdpbmRvdy5URUFNX01BQzsKICAgIGNvbnN0IHNwYW5DbGFzcyA9IHdpbmRvdy5URUFNX1RPX0NTU1t0ZWFtSWRdOwogICAgY29udGVudCA9ICQoJzxkaXY+JykuYXBwZW5kKCQoJzxzcGFuPicsIHsgY2xhc3M6IHNwYW5DbGFzcywgdGV4dDogdGV4dC5wbGFpbiB9KSk7CiAgfSBlbHNlIHsKICAgIGNvbnRlbnQgPSAkKCc8ZGl2PicpLnRleHQodGV4dC5wbGFpbik7CiAgfQoKICByZXR1cm4gY29udGVudC5odG1sKCkuYXV0b0xpbmsoKTsKfQoKLyoqCiAqIExpc3Qgb2YgdHJhbnNmb3JtYXRpb25zIGZvciBwb3J0YWwgbmFtZXMgdXNlZCBpbiBjaGF0LgogKiBFYWNoIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRha2VzIHRoZSBwb3J0YWwgbWFya3VwIG9iamVjdCBhbmQgcmV0dXJucyBhIHRyYW5zZm9ybWVkIG5hbWUuCiAqIElmIGEgdHJhbnNmb3JtYXRpb24gZG9lcyBub3QgYXBwbHksIHRoZSBvcmlnaW5hbCBuYW1lIGlzIHJldHVybmVkLgogKgogKiBAY29uc3QgSUlUQy5jb21tLnBvcnRhbE5hbWVUcmFuc2Zvcm1hdGlvbnMKICogQGV4YW1wbGUKICogLy8gQWRkaW5nIGEgdHJhbnNmb3JtYXRpb24gdGhhdCBhcHBlbmRzIHRoZSBwb3J0YWwgbG9jYXRpb24gdG8gaXRzIG5hbWUKICogcG9ydGFsTmFtZVRyYW5zZm9ybWF0aW9ucy5wdXNoKChtYXJrdXApID0+IHsKICogICBjb25zdCBsYXRsbmcgPSBgJHttYXJrdXAubGF0RTYgLyAxRTZ9LCR7bWFya3VwLmxuZ0U2IC8gMUU2fWA7IC8vIENvbnZlcnQgRTYgZm9ybWF0IHRvIGRlY2ltYWwKICogICByZXR1cm4gYFske2xhdGxuZ31dICR7bWFya3VwLm5hbWV9YDsKICogfSk7CiAqLwpjb25zdCBwb3J0YWxOYW1lVHJhbnNmb3JtYXRpb25zID0gWwogIC8vIFRyYW5zZm9ybWF0aW9uIGZvciAnVVMgUG9zdCBPZmZpY2UnCiAgKG1hcmt1cCkgPT4gewogICAgaWYgKG1hcmt1cC5uYW1lID09PSAnVVMgUG9zdCBPZmZpY2UnKSB7CiAgICAgIGNvbnN0IGFkZHJlc3MgPSBtYXJrdXAuYWRkcmVzcy5zcGxpdCgnLCcpOwogICAgICByZXR1cm4gJ1VTUFM6ICcgKyBhZGRyZXNzWzBdOwogICAgfQogICAgcmV0dXJuIG1hcmt1cC5uYW1lOwogIH0sCl07CgovKioKICogT3ZlcnJpZGVzIHBvcnRhbCBuYW1lcyB1c2VkIHJlcGVhdGVkbHkgaW4gY2hhdCwgc3VjaCBhcyAnVVMgUG9zdCBPZmZpY2UnLCB3aXRoIG1vcmUgc3BlY2lmaWMgbmFtZXMuCiAqIEFwcGxpZXMgYSBzZXJpZXMgb2YgdHJhbnNmb3JtYXRpb25zIHRvIHRoZSBwb3J0YWwgbmFtZSBiYXNlZCBvbiB0aGUgcG9ydGFsIG1hcmt1cC4KICoKICogQGZ1bmN0aW9uIElJVEMuY29tbS5nZXRDaGF0UG9ydGFsTmFtZQogKiBAcGFyYW0ge09iamVjdH0gbWFya3VwIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgcG9ydGFsIG1hcmt1cCwgaW5jbHVkaW5nIHRoZSBuYW1lIGFuZCBhZGRyZXNzLgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcHJvY2Vzc2VkIHBvcnRhbCBuYW1lLgogKi8KZnVuY3Rpb24gZ2V0Q2hhdFBvcnRhbE5hbWUobWFya3VwKSB7CiAgLy8gVXNlIHJlZHVjZSB0byBhcHBseSBlYWNoIHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBkYXRhCiAgY29uc3QgdHJhbnNmb3JtZWREYXRhID0gcG9ydGFsTmFtZVRyYW5zZm9ybWF0aW9ucy5yZWR1Y2UoKGluaXRpYWxNYXJrdXAsIHRyYW5zZm9ybSkgPT4gewogICAgY29uc3QgdXBkYXRlZE5hbWUgPSB0cmFuc2Zvcm0oaW5pdGlhbE1hcmt1cCk7CiAgICByZXR1cm4geyAuLi5pbml0aWFsTWFya3VwLCBuYW1lOiB1cGRhdGVkTmFtZSB9OwogIH0sIG1hcmt1cCk7CgogIHJldHVybiB0cmFuc2Zvcm1lZERhdGEubmFtZTsKfQoKLyoqCiAqIFJlbmRlcnMgYSBwb3J0YWwgbGluayBmb3IgdXNlIGluIHRoZSBjaGF0LgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLnJlbmRlclBvcnRhbAogKiBAcGFyYW0ge09iamVjdH0gcG9ydGFsIC0gVGhlIHBvcnRhbCBkYXRhLgogKiBAcmV0dXJucyB7c3RyaW5nfSBIVE1MIHN0cmluZyBvZiB0aGUgcG9ydGFsIGxpbmsuCiAqLwpmdW5jdGlvbiByZW5kZXJQb3J0YWwocG9ydGFsKSB7CiAgY29uc3QgbGF0ID0gcG9ydGFsLmxhdEU2IC8gMWU2OwogIGNvbnN0IGxuZyA9IHBvcnRhbC5sbmdFNiAvIDFlNjsKICBjb25zdCBwZXJtYWxpbmsgPSB3aW5kb3cubWFrZVBlcm1hbGluayhbbGF0LCBsbmddKTsKICBjb25zdCBwb3J0YWxOYW1lID0gSUlUQy5jb21tLmdldENoYXRQb3J0YWxOYW1lKHBvcnRhbCk7CgogIHJldHVybiBJSVRDLmNvbW0ucG9ydGFsVGVtcGxhdGUKICAgIC5yZXBsYWNlKCd7eyBsYXQgfX0nLCBsYXQudG9TdHJpbmcoKSkKICAgIC5yZXBsYWNlKCd7eyBsbmcgfX0nLCBsbmcudG9TdHJpbmcoKSkKICAgIC5yZXBsYWNlKCd7eyB0aXRsZSB9fScsIHBvcnRhbC5hZGRyZXNzKQogICAgLnJlcGxhY2UoJ3t7IHVybCB9fScsIHBlcm1hbGluaykKICAgIC5yZXBsYWNlKCd7eyBwb3J0YWxfbmFtZSB9fScsIHBvcnRhbE5hbWUpOwp9CgovKioKICogUmVuZGVycyBhIGZhY3Rpb24gZW50aXR5IGZvciB1c2UgaW4gdGhlIGNoYXQuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0ucmVuZGVyRmFjdGlvbkVudAogKiBAcGFyYW0ge09iamVjdH0gZmFjdGlvbiAtIFRoZSBmYWN0aW9uIGRhdGEuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZmFjdGlvbi4KICovCmZ1bmN0aW9uIHJlbmRlckZhY3Rpb25FbnQoZmFjdGlvbikgewogIHZhciB0ZWFtSWQgPSB3aW5kb3cudGVhbVN0cmluZ1RvSWQoZmFjdGlvbi50ZWFtKTsKICB2YXIgbmFtZSA9IHdpbmRvdy5URUFNX05BTUVTW3RlYW1JZF07CiAgdmFyIHNwYW5DbGFzcyA9IHdpbmRvdy5URUFNX1RPX0NTU1t0ZWFtSWRdOwogIHJldHVybiAkKCc8ZGl2PicpLmh0bWwoJCgnPHNwYW4+JykuYXR0cignY2xhc3MnLCBzcGFuQ2xhc3MpLnRleHQobmFtZSkpLmh0bWwoKTsKfQoKLyoqCiAqIFJlbmRlcnMgYSBwbGF5ZXIncyBuaWNrbmFtZSBpbiBjaGF0LgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLnJlbmRlclBsYXllcgogKiBAcGFyYW0ge09iamVjdH0gcGxheWVyIC0gVGhlIHBsYXllciBvYmplY3QgY29udGFpbmluZyBuaWNrbmFtZSBhbmQgdGVhbS4KICogQHBhcmFtIHtib29sZWFufSBhdCAtIFdoZXRoZXIgdG8gcHJlcGVuZCAnQCcgdG8gdGhlIG5pY2tuYW1lLgogKiBAcGFyYW0ge2Jvb2xlYW59IHNlbmRlciAtIFdoZXRoZXIgdGhlIHBsYXllciBpcyB0aGUgc2VuZGVyIG9mIGEgbWVzc2FnZS4KICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcGxheWVyJ3Mgbmlja25hbWUgaW4gY2hhdC4KICovCmZ1bmN0aW9uIHJlbmRlclBsYXllcihwbGF5ZXIsIGF0LCBzZW5kZXIpIHsKICB2YXIgbmFtZSA9IHBsYXllci5wbGFpbjsKICBpZiAoc2VuZGVyKSB7CiAgICBuYW1lID0gcGxheWVyLnBsYWluLnJlcGxhY2UoLzogJC8sICcnKTsKICB9IGVsc2UgaWYgKGF0KSB7CiAgICBuYW1lID0gcGxheWVyLnBsYWluLnJlcGxhY2UoL15ALywgJycpOwogIH0KICB2YXIgdGhpc1RvUGxheWVyID0gbmFtZSA9PT0gd2luZG93LlBMQVlFUi5uaWNrbmFtZTsKICB2YXIgc3BhbkNsYXNzID0gJ25pY2tuYW1lICcgKyAodGhpc1RvUGxheWVyID8gJ3BsX251ZGdlX21lJyA6IHBsYXllci50ZWFtICsgJyBwbF9udWRnZV9wbGF5ZXInKTsKICByZXR1cm4gJCgnPGRpdj4nKQogICAgLmh0bWwoCiAgICAgICQoJzxzcGFuPicpCiAgICAgICAgLmF0dHIoJ2NsYXNzJywgc3BhbkNsYXNzKQogICAgICAgIC50ZXh0KChhdCA/ICdAJyA6ICcnKSArIG5hbWUpCiAgICApCiAgICAuaHRtbCgpOwp9CgovKioKICogUmVuZGVycyBhIGNoYXQgbWVzc2FnZSBlbnRpdHkgYmFzZWQgb24gaXRzIHR5cGUuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0ucmVuZGVyTWFya3VwRW50aXR5CiAqIEBwYXJhbSB7QXJyYXl9IGVudCAtIFRoZSBlbnRpdHkgYXJyYXksIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGlzIHRoZSB0eXBlIGFuZCB0aGUgc2Vjb25kIGVsZW1lbnQgaXMgdGhlIGRhdGEuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBIVE1MIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNoYXQgbWVzc2FnZSBlbnRpdHkuCiAqLwpmdW5jdGlvbiByZW5kZXJNYXJrdXBFbnRpdHkoZW50KSB7CiAgc3dpdGNoIChlbnRbMF0pIHsKICAgIGNhc2UgJ1RFWFQnOgogICAgICByZXR1cm4gSUlUQy5jb21tLnJlbmRlclRleHQoZW50WzFdKTsKICAgIGNhc2UgJ1BPUlRBTCc6CiAgICAgIHJldHVybiBJSVRDLmNvbW0ucmVuZGVyUG9ydGFsKGVudFsxXSk7CiAgICBjYXNlICdGQUNUSU9OJzoKICAgICAgcmV0dXJuIElJVEMuY29tbS5yZW5kZXJGYWN0aW9uRW50KGVudFsxXSk7CiAgICBjYXNlICdTRU5ERVInOgogICAgICByZXR1cm4gSUlUQy5jb21tLnJlbmRlclBsYXllcihlbnRbMV0sIGZhbHNlLCB0cnVlKTsKICAgIGNhc2UgJ1BMQVlFUic6CiAgICAgIHJldHVybiBJSVRDLmNvbW0ucmVuZGVyUGxheWVyKGVudFsxXSk7CiAgICBjYXNlICdBVF9QTEFZRVInOgogICAgICByZXR1cm4gSUlUQy5jb21tLnJlbmRlclBsYXllcihlbnRbMV0sIHRydWUpOwogICAgZGVmYXVsdDoKICB9CiAgcmV0dXJuICQoJzxkaXY+JykKICAgIC50ZXh0KGVudFswXSArICc6PCcgKyBlbnRbMV0ucGxhaW4gKyAnPicpCiAgICAuaHRtbCgpOwp9CgovKioKICogUmVuZGVycyB0aGUgbWFya3VwIG9mIGEgY2hhdCBtZXNzYWdlLCBjb252ZXJ0aW5nIHNwZWNpYWwgZW50aXRpZXMgbGlrZSBwbGF5ZXIgbmFtZXMsIHBvcnRhbHMsIGV0Yy4sIGludG8gSFRNTC4KICoKICogQGZ1bmN0aW9uIElJVEMuY29tbS5yZW5kZXJNYXJrdXAKICogQHBhcmFtIHtBcnJheX0gbWFya3VwIC0gVGhlIG1hcmt1cCBhcnJheSBvZiBhIGNoYXQgbWVzc2FnZS4KICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29tcGxldGUgcmVuZGVyZWQgY2hhdCBtZXNzYWdlLgogKi8KZnVuY3Rpb24gcmVuZGVyTWFya3VwKG1hcmt1cCkgewogIHZhciBtc2cgPSAnJzsKCiAgbWFya3VwLmZvckVhY2goZnVuY3Rpb24gKGVudCwgaW5kKSB7CiAgICBzd2l0Y2ggKGVudFswXSkgewogICAgICBjYXNlICdTRU5ERVInOgogICAgICBjYXNlICdTRUNVUkUnOgogICAgICAgIC8vIHNraXAgYXMgYWxyZWFkeSBoYW5kbGVkCiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlICdQTEFZRVInOiAvLyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBtZXNzYWdlcwogICAgICAgIGlmIChpbmQgPiAwKSBtc2cgKz0gSUlUQy5jb21tLnJlbmRlck1hcmt1cEVudGl0eShlbnQpOyAvLyBkb27igJl0IHJlcGVhdCBuaWNrIGRpcmVjdGx5CiAgICAgICAgYnJlYWs7CgogICAgICBkZWZhdWx0OgogICAgICAgIC8vIGFkZCBvdGhlciBlbml0aXRpZXMgd2hhdGV2ZXIgdGhlIHR5cGUKICAgICAgICBtc2cgKz0gSUlUQy5jb21tLnJlbmRlck1hcmt1cEVudGl0eShlbnQpOwogICAgICAgIGJyZWFrOwogICAgfQogIH0pOwogIHJldHVybiBtc2c7Cn0KCi8qKgogKiBMaXN0IG9mIHRyYW5zZm9ybWF0aW9ucyB0byBiZSBhcHBsaWVkIHRvIHRoZSBtZXNzYWdlIGRhdGEuCiAqIEVhY2ggdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gdGFrZXMgdGhlIGZ1bGwgbWVzc2FnZSBkYXRhIG9iamVjdCBhbmQgcmV0dXJucyB0aGUgdHJhbnNmb3JtZWQgbWFya3VwLgogKiBUaGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgYWltIHRvIGNvbnZlcnQgdGhlIG1lc3NhZ2UgbWFya3VwIGludG8gYW4gb2xkZXIsIG1vcmUgc3RyYWlnaHRmb3J3YXJkIGZvcm1hdCwKICogZmFjaWxpdGF0aW5nIGVhc2llciB1bmRlcnN0YW5kaW5nIGFuZCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggcGx1Z2lucyBleHBlY3RpbmcgdGhlIG9sZGVyIG1lc3NhZ2UgZm9ybWF0LgogKgogKiBAY29uc3QgSUlUQy5jb21tLm1lc3NhZ2VUcmFuc2Zvcm1GdW5jdGlvbnMKICogQGV4YW1wbGUKICogLy8gQWRkaW5nIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRvIHRoZSBhcnJheQogKiAvLyBUaGlzIG5ldyBmdW5jdGlvbiBhZGRzIGEgIm5ldyIgcHJlZml4IHRvIHRoZSBwbGF5ZXIncyBwbGFpbiB0ZXh0IGlmIHRoZSBwbGF5ZXIgaXMgZnJvbSB0aGUgUkVTSVNUQU5DRSB0ZWFtCiAqIG1lc3NhZ2VUcmFuc2Zvcm1GdW5jdGlvbnMucHVzaCgoZGF0YSkgPT4gewogKiAgIGNvbnN0IG1hcmt1cCA9IGRhdGEubWFya3VwOwogKiAgIGlmIChtYXJrdXAubGVuZ3RoID4gMiAmJiBtYXJrdXBbMF1bMF0gPT09ICdQTEFZRVInICYmIG1hcmt1cFswXVsxXS50ZWFtID09PSAnUkVTSVNUQU5DRScpIHsKICogICAgIG1hcmt1cFsxXVsxXS5wbGFpbiA9ICduZXcgJyArIG1hcmt1cFsxXVsxXS5wbGFpbjsKICogICB9CiAqICAgcmV0dXJuIG1hcmt1cDsKICogfSk7CiAqLwpjb25zdCBtZXNzYWdlVHJhbnNmb3JtRnVuY3Rpb25zID0gWwogIC8vIENvbGxhcHNlIDxmYWN0aW9uPiArICJMaW5rIi8iRmllbGQiLgogIChkYXRhKSA9PiB7CiAgICBjb25zdCBtYXJrdXAgPSBkYXRhLm1hcmt1cDsKICAgIGlmICgKICAgICAgbWFya3VwLmxlbmd0aCA+IDQgJiYKICAgICAgbWFya3VwWzNdWzBdID09PSAnRkFDVElPTicgJiYKICAgICAgbWFya3VwWzRdWzBdID09PSAnVEVYVCcgJiYKICAgICAgKG1hcmt1cFs0XVsxXS5wbGFpbiA9PT0gJyBMaW5rICcgfHwgbWFya3VwWzRdWzFdLnBsYWluID09PSAnIENvbnRyb2wgRmllbGQgQCcpCiAgICApIHsKICAgICAgbWFya3VwWzRdWzFdLnRlYW0gPSBtYXJrdXBbM11bMV0udGVhbTsKICAgICAgbWFya3VwLnNwbGljZSgzLCAxKTsKICAgIH0KICAgIHJldHVybiBtYXJrdXA7CiAgfSwKICAvLyBTa2lwICJBZ2VudCA8cGxheWVyPiIgYXQgdGhlIGJlZ2lubmluZwogIChkYXRhKSA9PiB7CiAgICBjb25zdCBtYXJrdXAgPSBkYXRhLm1hcmt1cDsKICAgIGlmIChtYXJrdXAubGVuZ3RoID4gMSAmJiBtYXJrdXBbMF1bMF0gPT09ICdURVhUJyAmJiBtYXJrdXBbMF1bMV0ucGxhaW4gPT09ICdBZ2VudCAnICYmIG1hcmt1cFsxXVswXSA9PT0gJ1BMQVlFUicpIHsKICAgICAgbWFya3VwLnNwbGljZSgwLCAyKTsKICAgIH0KICAgIHJldHVybiBtYXJrdXA7CiAgfSwKICAvLyBTa2lwICI8ZmFjdGlvbj4gYWdlbnQgPHBsYXllcj4iIGF0IHRoZSBiZWdpbm5pbmcKICAoZGF0YSkgPT4gewogICAgY29uc3QgbWFya3VwID0gZGF0YS5tYXJrdXA7CiAgICBpZiAobWFya3VwLmxlbmd0aCA+IDIgJiYgbWFya3VwWzBdWzBdID09PSAnRkFDVElPTicgJiYgbWFya3VwWzFdWzBdID09PSAnVEVYVCcgJiYgbWFya3VwWzFdWzFdLnBsYWluID09PSAnIGFnZW50ICcgJiYgbWFya3VwWzJdWzBdID09PSAnUExBWUVSJykgewogICAgICBtYXJrdXAuc3BsaWNlKDAsIDMpOwogICAgfQogICAgcmV0dXJuIG1hcmt1cDsKICB9LApdOwoKLyoqCiAqIEFwcGxpZXMgdHJhbnNmb3JtYXRpb25zIHRvIHRoZSBtYXJrdXAgYXJyYXkgYmFzZWQgb24gdGhlIHRyYW5zZm9ybWF0aW9ucyBkZWZpbmVkIGluCiAqIHRoZSB7QGxpbmsgSUlUQy5jb21tLm1lc3NhZ2VUcmFuc2Zvcm1GdW5jdGlvbnN9IGFycmF5LgogKiBBc3N1bWVzIGFsbCB0cmFuc2Zvcm1hdGlvbnMgcmV0dXJuIGEgbmV3IG1hcmt1cCBhcnJheS4KICogTWF5IGJlIHVzZWQgdG8gYnVpbGQgYW4gZW50aXJlbHkgbmV3IG1hcmt1cCB0byBiZSByZW5kZXJlZCB3aXRob3V0IGFsdGVyaW5nIHRoZSBvcmlnaW5hbCBvbmUuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0udHJhbnNmb3JtTWVzc2FnZQogKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIGZvciB0aGUgbWVzc2FnZSwgaW5jbHVkaW5nIHRpbWUsIHBsYXllciwgYW5kIG1lc3NhZ2UgY29udGVudC4KICogQHJldHVybnMge09iamVjdH0gVGhlIHRyYW5zZm9ybWVkIG1hcmt1cCBhcnJheS4KICovCmNvbnN0IHRyYW5zZm9ybU1lc3NhZ2UgPSAoZGF0YSkgPT4gewogIGNvbnN0IGluaXRpYWxEYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7CgogIC8vIFVzZSByZWR1Y2UgdG8gYXBwbHkgZWFjaCB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgZGF0YQogIGNvbnN0IHRyYW5zZm9ybWVkRGF0YSA9IG1lc3NhZ2VUcmFuc2Zvcm1GdW5jdGlvbnMucmVkdWNlKChkYXRhLCB0cmFuc2Zvcm0pID0+IHsKICAgIGNvbnN0IHVwZGF0ZWRNYXJrdXAgPSB0cmFuc2Zvcm0oZGF0YSk7CiAgICByZXR1cm4geyAuLi5kYXRhLCBtYXJrdXA6IHVwZGF0ZWRNYXJrdXAgfTsKICB9LCBpbml0aWFsRGF0YSk7CgogIHJldHVybiB0cmFuc2Zvcm1lZERhdGEubWFya3VwOwp9OwoKLyoqCiAqIFJlbmRlcnMgYSBjZWxsIGluIHRoZSBjaGF0IHRhYmxlIHRvIGRpc3BsYXkgdGhlIHRpbWUgYSBtZXNzYWdlIHdhcyBzZW50LgogKiBGb3JtYXRzIHRoZSB0aW1lIGFuZCBhZGRzIGl0IHRvIGEgPHRpbWU+IEhUTUwgZWxlbWVudCB3aXRoIGEgdG9vbHRpcCBzaG93aW5nIHRoZSBmdWxsIGRhdGUgYW5kIHRpbWUuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0ucmVuZGVyVGltZUNlbGwKICogQHBhcmFtIHtudW1iZXJ9IHVuaXh0aW1lIC0gVGhlIHRpbWVzdGFtcCBvZiB0aGUgbWVzc2FnZS4KICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZXMgLSBBZGRpdGlvbmFsIGNsYXNzIG5hbWVzIHRvIGJlIGFkZGVkIHRvIHRoZSB0aW1lIGNlbGwuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBIVE1MIHN0cmluZyByZXByZXNlbnRpbmcgYSB0YWJsZSBjZWxsIHdpdGggdGhlIGZvcm1hdHRlZCB0aW1lLgogKi8KZnVuY3Rpb24gcmVuZGVyVGltZUNlbGwodW5peHRpbWUsIGNsYXNzTmFtZXMpIHsKICBjb25zdCB0aW1lID0gd2luZG93LnVuaXhUaW1lVG9ISG1tKHVuaXh0aW1lKTsKICBjb25zdCBkYXRldGltZSA9IHdpbmRvdy51bml4VGltZVRvRGF0ZVRpbWVTdHJpbmcodW5peHRpbWUsIHRydWUpOwogIC8vIGFkZCA8c21hbGw+IHRhZ3MgYXJvdW5kIHRoZSBtaWxsaXNlY29uZHMKICBjb25zdCBkYXRldGltZV90aXRsZSA9IChkYXRldGltZS5zbGljZSgwLCAxOSkgKyAnPHNtYWxsIGNsYXNzPSJtaWxsaXNlY29uZHMiPicgKyBkYXRldGltZS5zbGljZSgxOSkgKyAnPC9zbWFsbD4nKQogICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKQogICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKQogICAgLnJlcGxhY2UoLyIvZywgJyZxdW90OycpOwoKICByZXR1cm4gSUlUQy5jb21tLnRpbWVDZWxsVGVtcGxhdGUKICAgIC5yZXBsYWNlKCd7eyBjbGFzc19uYW1lcyB9fScsIGNsYXNzTmFtZXMpCiAgICAucmVwbGFjZSgne3sgZGF0ZXRpbWUgfX0nLCBkYXRldGltZSkKICAgIC5yZXBsYWNlKCd7eyB0aW1lX3RpdGxlIH19JywgZGF0ZXRpbWVfdGl0bGUpCiAgICAucmVwbGFjZSgne3sgdW5peHRpbWUgfX0nLCB1bml4dGltZS50b1N0cmluZygpKQogICAgLnJlcGxhY2UoJ3t7IHRpbWUgfX0nLCB0aW1lKTsKfQoKLyoqCiAqIFJlbmRlcnMgYSBjZWxsIGluIHRoZSBjaGF0IHRhYmxlIGZvciBhIHBsYXllcidzIG5pY2tuYW1lLgogKiBXcmFwcyB0aGUgbmlja25hbWUgaW4gPG1hcms+IEhUTUwgZWxlbWVudCBmb3IgaGlnaGxpZ2h0aW5nLgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLnJlbmRlck5pY2tDZWxsCiAqIEBwYXJhbSB7c3RyaW5nfSBuaWNrIC0gVGhlIG5pY2tuYW1lIG9mIHRoZSBwbGF5ZXIuCiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWVzIC0gQWRkaXRpb25hbCBjbGFzcyBuYW1lcyB0byBiZSBhZGRlZCB0byB0aGUgbmlja25hbWUgY2VsbC4KICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyBhIHRhYmxlIGNlbGwgd2l0aCB0aGUgcGxheWVyJ3Mgbmlja25hbWUuCiAqLwpmdW5jdGlvbiByZW5kZXJOaWNrQ2VsbChuaWNrLCBjbGFzc05hbWVzKSB7CiAgcmV0dXJuIElJVEMuY29tbS5uaWNrQ2VsbFRlbXBsYXRlLnJlcGxhY2UoJ3t7IGNsYXNzX25hbWVzIH19JywgY2xhc3NOYW1lcykucmVwbGFjZSgne3sgbmljayB9fScsIG5pY2spOwp9CgovKioKICogUmVuZGVycyBhIGNlbGwgaW4gdGhlIGNoYXQgdGFibGUgZm9yIGEgY2hhdCBtZXNzYWdlLgogKiBUaGUgbWVzc2FnZSBpcyBpbnNlcnRlZCBhcyBpbm5lciBIVE1MIG9mIHRoZSB0YWJsZSBjZWxsLgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLnJlbmRlck1zZ0NlbGwKICogQHBhcmFtIHtzdHJpbmd9IG1zZyAtIFRoZSBjaGF0IG1lc3NhZ2UgdG8gYmUgZGlzcGxheWVkLgogKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lcyAtIEFkZGl0aW9uYWwgY2xhc3MgbmFtZXMgdG8gYmUgYWRkZWQgdG8gdGhlIG1lc3NhZ2UgY2VsbC4KICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyBhIHRhYmxlIGNlbGwgd2l0aCB0aGUgY2hhdCBtZXNzYWdlLgogKi8KZnVuY3Rpb24gcmVuZGVyTXNnQ2VsbChtc2csIGNsYXNzTmFtZXMpIHsKICByZXR1cm4gSUlUQy5jb21tLm1zZ0NlbGxUZW1wbGF0ZS5yZXBsYWNlKCd7eyBjbGFzc19uYW1lcyB9fScsIGNsYXNzTmFtZXMpLnJlcGxhY2UoJ3t7IG1zZyB9fScsIG1zZyk7Cn0KCi8qKgogKiBSZW5kZXJzIGEgcm93IGZvciBhIGNoYXQgbWVzc2FnZSBpbmNsdWRpbmcgdGltZSwgbmlja25hbWUsIGFuZCBtZXNzYWdlIGNlbGxzLgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLnJlbmRlck1zZ1JvdwogKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIGZvciB0aGUgbWVzc2FnZSwgaW5jbHVkaW5nIHRpbWUsIHBsYXllciwgYW5kIG1lc3NhZ2UgY29udGVudC4KICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyBhIHJvdyBpbiB0aGUgY2hhdCB0YWJsZS4KICovCmZ1bmN0aW9uIHJlbmRlck1zZ1JvdyhkYXRhKSB7CiAgdmFyIHRpbWVDbGFzcyA9IGRhdGEubXNnVG9QbGF5ZXIgPyAncGxfbnVkZ2VfZGF0ZScgOiAnJzsKICB2YXIgdGltZUNlbGwgPSBJSVRDLmNvbW0ucmVuZGVyVGltZUNlbGwoZGF0YS50aW1lLCB0aW1lQ2xhc3MpOwoKICB2YXIgbmlja0NsYXNzZXMgPSBbJ25pY2tuYW1lJ107CiAgaWYgKHdpbmRvdy5URUFNX1RPX0NTU1tkYXRhLnBsYXllci50ZWFtXSkgewogICAgbmlja0NsYXNzZXMucHVzaCh3aW5kb3cuVEVBTV9UT19DU1NbZGF0YS5wbGF5ZXIudGVhbV0pOwogIH0KCiAgLy8gaGlnaGxpZ2h0IHRoaW5ncyBzYWlkL2RvbmUgYnkgdGhlIHBsYXllciBpbiBhIHVuaXF1ZSBjb2xvdXIKICAvLyAoc2ltaWxhciB0byBAcGxheWVyIG1lbnRpb25zIGZyb20gb3RoZXJzIGluIHRoZSBjaGF0IHRleHQgaXRzZWxmKQogIGlmIChkYXRhLnBsYXllci5uYW1lID09PSB3aW5kb3cuUExBWUVSLm5pY2tuYW1lKSB7CiAgICBuaWNrQ2xhc3Nlcy5wdXNoKCdwbF9udWRnZV9tZScpOwogIH0KICB2YXIgbmlja0NlbGwgPSBJSVRDLmNvbW0ucmVuZGVyTmlja0NlbGwoZGF0YS5wbGF5ZXIubmFtZSwgbmlja0NsYXNzZXMuam9pbignICcpKTsKCiAgY29uc3QgbWFya3VwID0gSUlUQy5jb21tLnRyYW5zZm9ybU1lc3NhZ2UoZGF0YSk7CiAgdmFyIG1zZyA9IElJVEMuY29tbS5yZW5kZXJNYXJrdXAobWFya3VwKTsKICB2YXIgbXNnQ2xhc3MgPSBkYXRhLm5hcnJvd2Nhc3QgPyAnc3lzdGVtX25hcnJvd2Nhc3QnIDogJyc7CiAgdmFyIG1zZ0NlbGwgPSBJSVRDLmNvbW0ucmVuZGVyTXNnQ2VsbChtc2csIG1zZ0NsYXNzKTsKCiAgdmFyIGNsYXNzTmFtZSA9ICcnOwogIGlmICghZGF0YS5hdXRvICYmIGRhdGEucHVibGljKSB7CiAgICBjbGFzc05hbWUgPSAncHVibGljJzsKICB9IGVsc2UgaWYgKCFkYXRhLmF1dG8gJiYgZGF0YS5zZWN1cmUpIHsKICAgIGNsYXNzTmFtZSA9ICdmYWN0aW9uJzsKICB9CgogIHJldHVybiBJSVRDLmNvbW0ubXNnUm93VGVtcGxhdGUKICAgIC5yZXBsYWNlKCd7eyBjbGFzc19uYW1lcyB9fScsIGNsYXNzTmFtZSkKICAgIC5yZXBsYWNlKCd7eyBndWlkIH19JywgZGF0YS5ndWlkKQogICAgLnJlcGxhY2UoJ3t7IHRpbWVfY2VsbCB9fScsIHRpbWVDZWxsKQogICAgLnJlcGxhY2UoJ3t7IG5pY2tfY2VsbCB9fScsIG5pY2tDZWxsKQogICAgLnJlcGxhY2UoJ3t7IG1zZ19jZWxsIH19JywgbXNnQ2VsbCk7Cn0KCi8qKgogKiBSZW5kZXJzIGEgZGl2aWRlciByb3cgaW4gdGhlIGNoYXQgdGFibGUuCiAqCiAqIEBmdW5jdGlvbiBJSVRDLmNvbW0ucmVuZGVyRGl2aWRlcgogKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRleHQgdG8gZGlzcGxheSB3aXRoaW4gdGhlIGRpdmlkZXIgcm93LgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgSFRNTCBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZGl2aWRlciByb3cgaW4gdGhlIGNoYXQgdGFibGUuCiAqLwpmdW5jdGlvbiByZW5kZXJEaXZpZGVyKHRleHQpIHsKICByZXR1cm4gSUlUQy5jb21tLmRpdmlkZXJUZW1wbGF0ZS5yZXBsYWNlKCd7eyB0ZXh0IH19JywgdGV4dCk7Cn0KCi8qKgogKiBSZW5kZXJzIGRhdGEgZnJvbSB0aGUgZGF0YS1oYXNoIHRvIHRoZSBlbGVtZW50IGRlZmluZWQgYnkgdGhlIGdpdmVuIElELgogKgogKiBAZnVuY3Rpb24gSUlUQy5jb21tLnJlbmRlckRhdGEKICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBDaGF0IGRhdGEgdG8gYmUgcmVuZGVyZWQuCiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50IC0gSUQgb2YgdGhlIERPTSBlbGVtZW50IHRvIHJlbmRlciB0aGUgY2hhdCBpbnRvLgogKiBAcGFyYW0ge2Jvb2xlYW59IGxpa2VseVdlcmVPbGRNc2dzIC0gRmxhZyBpbmRpY2F0aW5nIGlmIG9sZGVyIG1lc3NhZ2VzIGFyZSBsaWtlbHkgdG8gaGF2ZSBiZWVuIGFkZGVkLgogKiBAcGFyYW0ge0FycmF5fSBzb3J0ZWRHdWlkcyAtIFNvcnRlZCBhcnJheSBvZiBHVUlEcyByZXByZXNlbnRpbmcgdGhlIG9yZGVyIG9mIG1lc3NhZ2VzLgogKi8KZnVuY3Rpb24gcmVuZGVyRGF0YShkYXRhLCBlbGVtZW50LCBsaWtlbHlXZXJlT2xkTXNncywgc29ydGVkR3VpZHMpIHsKICB2YXIgZWxtID0gJCgnIycgKyBlbGVtZW50KTsKICBpZiAoZWxtLmlzKCc6aGlkZGVuJykpIHsKICAgIHJldHVybjsKICB9CgogIC8vIGlmIHNvcnRlZEd1aWRzIGlzIG5vdCBzcGVjaWZpZWQgKGxlZ2FjeSksIHNvcnQgb2xkIHRvIG5ldwogIC8vIChkaXNyZWdhcmRpbmcgc2VydmVyIG9yZGVyKQogIHZhciB2YWxzID0gc29ydGVkR3VpZHM7CiAgaWYgKHZhbHMgPT09IHVuZGVmaW5lZCkgewogICAgdmFscyA9ICQubWFwKGRhdGEsIGZ1bmN0aW9uICh2LCBrKSB7CiAgICAgIHJldHVybiBbW3ZbMF0sIGtdXTsKICAgIH0pOwogICAgdmFscyA9IHZhbHMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYVswXSAtIGJbMF07CiAgICB9KTsKICAgIHZhbHMgPSB2YWxzLm1hcChmdW5jdGlvbiAodikgewogICAgICByZXR1cm4gdlsxXTsKICAgIH0pOwogIH0KCiAgLy8gcmVuZGVyIHRvIHN0cmluZyB3aXRoIGRhdGUgc2VwYXJhdG9ycyBpbnNlcnRlZAogIHZhciBtc2dzID0gJyc7CiAgdmFyIHByZXZUaW1lID0gbnVsbDsKICB2YWxzLmZvckVhY2goZnVuY3Rpb24gKGd1aWQpIHsKICAgIHZhciBtc2cgPSBkYXRhW2d1aWRdOwogICAgaWYgKElJVEMuY29tbS5kZWNsYXJhdGl2ZU1lc3NhZ2VGaWx0ZXIuZmlsdGVyTWVzc2FnZShtc2dbNF0pKSByZXR1cm47CiAgICB2YXIgbmV4dFRpbWUgPSBuZXcgRGF0ZShtc2dbMF0pLnRvTG9jYWxlRGF0ZVN0cmluZygpOwogICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSBuZXh0VGltZSkgewogICAgICBtc2dzICs9IElJVEMuY29tbS5yZW5kZXJEaXZpZGVyKG5leHRUaW1lKTsKICAgIH0KICAgIG1zZ3MgKz0gbXNnWzJdOwogICAgcHJldlRpbWUgPSBuZXh0VGltZTsKICB9KTsKCiAgdmFyIGZpcnN0UmVuZGVyID0gZWxtLmlzKCc6ZW1wdHknKTsKICB2YXIgc2Nyb2xsQmVmb3JlID0gd2luZG93LnNjcm9sbEJvdHRvbShlbG0pOwogIGVsbS5odG1sKCc8dGFibGU+JyArIG1zZ3MgKyAnPC90YWJsZT4nKTsKCiAgaWYgKGZpcnN0UmVuZGVyKSB7CiAgICBlbG0uZGF0YSgnbmVlZHNTY3JvbGxUb3AnLCA5OTk5OTk5OSk7CiAgfSBlbHNlIHsKICAgIGNoYXQua2VlcFNjcm9sbFBvc2l0aW9uKGVsbSwgc2Nyb2xsQmVmb3JlLCBsaWtlbHlXZXJlT2xkTXNncyk7CiAgfQoKICBpZiAoZWxtLmRhdGEoJ25lZWRzU2Nyb2xsVG9wJykpIHsKICAgIGVsbS5kYXRhKCdpZ25vcmVOZXh0U2Nyb2xsJywgdHJ1ZSk7CiAgICBlbG0uc2Nyb2xsVG9wKGVsbS5kYXRhKCduZWVkc1Njcm9sbFRvcCcpKTsKICAgIGVsbS5kYXRhKCduZWVkc1Njcm9sbFRvcCcsIG51bGwpOwogIH0KfQoKZm9yIChjb25zdCBjaGFubmVsIG9mIF9jaGFubmVscykgewogIF9pbml0Q2hhbm5lbERhdGEoY2hhbm5lbC5pZCk7Cn0KCklJVEMuY29tbSA9IHsKICBjaGFubmVsczogX2NoYW5uZWxzLAogIHNlbmRDaGF0TWVzc2FnZSwKICBwYXJzZU1zZ0RhdGEsCiAgZ2V0TGF0TG5nRm9yU2VuZGluZ01lc3NhZ2UsCiAgLy8gTGlzdCBvZiB0cmFuc2Zvcm1hdGlvbnMKICBwb3J0YWxOYW1lVHJhbnNmb3JtYXRpb25zLAogIG1lc3NhZ2VUcmFuc2Zvcm1GdW5jdGlvbnMsCiAgLy8gUmVuZGVyIHByaW1pdGl2ZSwgbWF5IGJlIG92ZXJyaWRlCiAgcmVuZGVyTXNnUm93LAogIHJlbmRlckRpdmlkZXIsCiAgcmVuZGVyVGltZUNlbGwsCiAgcmVuZGVyTmlja0NlbGwsCiAgcmVuZGVyTXNnQ2VsbCwKICByZW5kZXJNYXJrdXAsCiAgdHJhbnNmb3JtTWVzc2FnZSwKICByZW5kZXJNYXJrdXBFbnRpdHksCiAgcmVuZGVyUGxheWVyLAogIHJlbmRlckZhY3Rpb25FbnQsCiAgcmVuZGVyUG9ydGFsLAogIHJlbmRlclRleHQsCiAgZ2V0Q2hhdFBvcnRhbE5hbWUsCiAgLy8gdGVtcGxhdGVzCiAgcG9ydGFsVGVtcGxhdGUsCiAgdGltZUNlbGxUZW1wbGF0ZSwKICBuaWNrQ2VsbFRlbXBsYXRlLAogIG1zZ0NlbGxUZW1wbGF0ZSwKICBtc2dSb3dUZW1wbGF0ZSwKICBkaXZpZGVyVGVtcGxhdGUsCiAgLy8gZXhwb3NlZCBBUEkgZm9yIGxlZ2FjeQogIHJlcXVlc3RDaGFubmVsLAogIHJlbmRlckNoYW5uZWwsCiAgcmVuZGVyRGF0YSwKICBfY2hhbm5lbHNEYXRhLAogIF9nZW5Qb3N0RGF0YSwKICBfdXBkYXRlT2xkTmV3SGFzaCwKICBfd3JpdGVEYXRhVG9IYXNoLAp9OwoKLyogZ2xvYmFsIGxvZywgbWFwLCBjaGF0LCBJSVRDICovCgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBjb21tX2RlY2xhcmF0aXZlX21lc3NhZ2VfZmlsdGVyLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygnY29tbV9kZWNsYXJhdGl2ZV9tZXNzYWdlX2ZpbHRlcicpOwovKiBnbG9iYWwgSUlUQyAqLwoKLyoqCiAqIERlY2xhcmF0aXZlIG1lc3NhZ2UgZmlsdGVyIGZvciBDT01NIEFQSQogKgogKiBAbWVtYmVyb2YgSUlUQy5jb21tCiAqIEBuYW1lc3BhY2UgZGVjbGFyYXRpdmVNZXNzYWdlRmlsdGVyCiAqLwoKSUlUQy5jb21tLmRlY2xhcmF0aXZlTWVzc2FnZUZpbHRlciA9IHsKICBfcnVsZXM6IHt9LAoKICAvKioKICAgKiBBZGRzIGEgbmV3IGZpbHRlcmluZyBydWxlIHdpdGggYSBnaXZlbiBJRC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgb2YgdGhlIHJ1bGUgdG8gYWRkLgogICAqIEBwYXJhbSB7T2JqZWN0fSBydWxlIFRoZSBydWxlIHRvIGFkZC4KICAgKgogICAqIEBleGFtcGxlCiAgICogLy8gSGlkZSBhbGwgbWVzc2FnZXMgZnJvbSBSZXNpc3RhbmNlIHRlYW0KICAgKiBJSVRDLmNvbW0uZGVjbGFyYXRpdmVNZXNzYWdlRmlsdGVyLmFkZFJ1bGUoewogICAqICAgaWQ6ICJoaWRlUmVzaXN0YW5jZVRlYW0xIiwKICAgKiAgIGNvbmRpdGlvbnM6IFsKICAgKiAgICAgeyBmaWVsZDogInBsYXllci50ZWFtIiwgdmFsdWU6ICJSZXNpc3RhbmNlIiB9LAogICAqICAgXQogICAqIH0pOwogICAqCiAgICogQGV4YW1wbGUKICAgKiAvLyBIaWRlIGFsbCBtZXNzYWdlcyBleGNlcHQgdGhvc2UgZnJvbSB0aGUgUmVzaXN0YW5jZSB0ZWFtIHVzaW5nIHRoZSBpbnZlcnRlZCBydWxlCiAgICogSUlUQy5jb21tLmRlY2xhcmF0aXZlTWVzc2FnZUZpbHRlci5hZGRSdWxlKHsKICAgKiAgIGlkOiAiaGlkZUV4Y2VwdFJlc2lzdGFuY2VUZWFtIiwKICAgKiAgIGNvbmRpdGlvbnM6IFsKICAgKiAgICAgeyBmaWVsZDogInBsYXllci50ZWFtIiwgdmFsdWU6ICJSZXNpc3RhbmNlIiwgaW52ZXJ0OiB0cnVlIH0sCiAgICogICBdCiAgICogfSk7CiAgICoKICAgKiBAZXhhbXBsZQogICAqIC8vIEhpZGUgbWVzc2FnZXMgdGhhdCBsb29rIGxpa2Ugc3BhbQogICAqIElJVEMuY29tbS5kZWNsYXJhdGl2ZU1lc3NhZ2VGaWx0ZXIuYWRkUnVsZSh7CiAgICogICBpZDogImhpZGVTcGFtIiwKICAgKiAgIGNvbmRpdGlvbnM6IFsKICAgKiAgICAgeyBmaWVsZDogIm1hcmt1cFs0XVsxXS5wbGFpbiIsIGNvbmRpdGlvbjogL2luZ3Jlc3MtKHNob3B8c3RvcmUpfChzdG9yZXxzaG9wKS1pbmdyZXNzL2kgfSwKICAgKiAgIF0KICAgKiB9KTsKICAgKi8KICBhZGRSdWxlOiAoaWQsIHJ1bGUpID0+IHsKICAgIGlmIChJSVRDLmNvbW0uZGVjbGFyYXRpdmVNZXNzYWdlRmlsdGVyLl9ydWxlc1tpZF0pIHsKICAgICAgY29uc29sZS53YXJuKGBSdWxlIHdpdGggSUQgJyR7aWR9JyBhbHJlYWR5IGV4aXN0cy4gT3ZlcndyaXRpbmcuYCk7CiAgICB9CiAgICBJSVRDLmNvbW0uZGVjbGFyYXRpdmVNZXNzYWdlRmlsdGVyLl9ydWxlc1tpZF0gPSBydWxlOwogIH0sCgogIC8qKgogICAqIFJlbW92ZXMgYSBmaWx0ZXJpbmcgcnVsZSBieSBpdHMgSUQuCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBydWxlIHRvIHJlbW92ZS4KICAgKi8KICByZW1vdmVSdWxlOiAoaWQpID0+IHsKICAgIGlmIChJSVRDLmNvbW0uZGVjbGFyYXRpdmVNZXNzYWdlRmlsdGVyLl9ydWxlc1tpZF0pIHsKICAgICAgZGVsZXRlIElJVEMuY29tbS5kZWNsYXJhdGl2ZU1lc3NhZ2VGaWx0ZXIuX3J1bGVzW2lkXTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoYE5vIHJ1bGUgZm91bmQgd2l0aCBJRCAnJHtpZH0nLmApOwogICAgfQogIH0sCgogIC8qKgogICAqIEdldHMgYSBydWxlIGJ5IGl0cyBJRC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgb2YgdGhlIHJ1bGUgdG8gZ2V0LgogICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gVGhlIHJ1bGUgb2JqZWN0LCBvciBudWxsIGlmIG5vdCBmb3VuZC4KICAgKi8KICBnZXRSdWxlQnlJZDogKGlkKSA9PiB7CiAgICByZXR1cm4gSUlUQy5jb21tLmRlY2xhcmF0aXZlTWVzc2FnZUZpbHRlci5fcnVsZXNbaWRdIHx8IG51bGw7CiAgfSwKCiAgLyoqCiAgICogR2V0cyBhbGwgY3VycmVudCBmaWx0ZXJpbmcgcnVsZXMuCiAgICoKICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY3VycmVudCBzZXQgb2YgZmlsdGVyaW5nIHJ1bGVzLgogICAqLwogIGdldEFsbFJ1bGVzOiAoKSA9PiB7CiAgICByZXR1cm4gSUlUQy5jb21tLmRlY2xhcmF0aXZlTWVzc2FnZUZpbHRlci5fcnVsZXM7CiAgfSwKCiAgLyoqCiAgICogRXh0cmFjdHMgdGhlIHZhbHVlIGZyb20gdGhlIG1lc3NhZ2Ugb2JqZWN0IGJ5IGEgZ2l2ZW4gcGF0aC4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG1lc3NhZ2Ugb2JqZWN0LgogICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIFBhdGggdG8gdGhlIHByb3BlcnR5IGluIGRvdCBub3RhdGlvbi4KICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBhdCB0aGUgc3BlY2lmaWVkIHBhdGggb3IgdW5kZWZpbmVkIGlmIHRoZSBwYXRoIGlzIG5vdCB2YWxpZC4KICAgKi8KICBnZXRNZXNzYWdlVmFsdWVCeVBhdGg6IChvYmplY3QsIHBhdGgpID0+IHsKICAgIGNvbnN0IHBhcnRzID0gcGF0aC5yZXBsYWNlKC9cWyhcdyspXS9nLCAnLiQxJykuc3BsaXQoJy4nKTsKICAgIGxldCBjdXJyZW50ID0gb2JqZWN0OwoKICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykgewogICAgICBpZiAocGFydCBpbiBjdXJyZW50KSB7CiAgICAgICAgY3VycmVudCA9IGN1cnJlbnRbcGFydF07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gUGF0aCBpcyBub3QgdmFsaWQKICAgICAgfQogICAgfQogICAgcmV0dXJuIGN1cnJlbnQ7CiAgfSwKCiAgLyoqCiAgICogQ2hlY2tzIGlmIHRoZSBtZXNzYWdlIG1hdGNoZXMgYSBzaW5nbGUgcnVsZS4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGNoZWNrLgogICAqIEBwYXJhbSB7T2JqZWN0fSBydWxlIFRoZSBydWxlIHRvIG1hdGNoIGFnYWluc3QuCiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIG1lc3NhZ2UgbWF0Y2hlcyB0aGUgcnVsZSwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqLwogIG1hdGNoZXNSdWxlOiAobWVzc2FnZSwgcnVsZSkgPT4gewogICAgcmV0dXJuIHJ1bGUuY29uZGl0aW9ucy5ldmVyeSgoY29uZGl0aW9uKSA9PiB7CiAgICAgIGNvbnN0IG1lc3NhZ2VWYWx1ZSA9IElJVEMuY29tbS5kZWNsYXJhdGl2ZU1lc3NhZ2VGaWx0ZXIuZ2V0TWVzc2FnZVZhbHVlQnlQYXRoKG1lc3NhZ2UsIGNvbmRpdGlvbi5maWVsZCk7CiAgICAgIGxldCByZXN1bHQ7CgogICAgICBpZiAoJ3ZhbHVlJyBpbiBjb25kaXRpb24pIHsKICAgICAgICByZXN1bHQgPSBtZXNzYWdlVmFsdWUgPT09IGNvbmRpdGlvbi52YWx1ZTsKICAgICAgfSBlbHNlIGlmICgncGF0dGVybicgaW4gY29uZGl0aW9uKSB7CiAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGNvbmRpdGlvbi5wYXR0ZXJuKTsKICAgICAgICByZXN1bHQgPSByZWdleC50ZXN0KG1lc3NhZ2VWYWx1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBJZiB0aGUgY29uZGl0aW9uIGRvZXMgbm90IGNvbnRhaW4gJ3ZhbHVlJyBvciAncGF0dGVybicsIHdlIGNvbnNpZGVyIHRoYXQgdGhlIG1lc3NhZ2UgZG9lcyBub3QgbWF0Y2ggdGhlIHJ1bGUKICAgICAgfQoKICAgICAgLy8gSW52ZXJ0IHRoZSByZXN1bHQgaWYgdGhlIGNvbmRpdGlvbiBpcyBpbnZlcnRlZAogICAgICBpZiAoY29uZGl0aW9uLmludmVydCkgewogICAgICAgIHJldHVybiAhcmVzdWx0OwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9KTsKICB9LAoKICAvKioKICAgKiBDaGVja3MgaWYgYSBtZXNzYWdlIG1hdGNoZXMgYW55IG9mIHRoZSBjdXJyZW50IGZpbHRlcmluZyBydWxlcy4KICAgKgogICAqIEBwYXJhbSB7T2JqZWN0fSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGNoZWNrLgogICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBtZXNzYWdlIG1hdGNoZXMgYW55IHJ1bGUsIGZhbHNlIG90aGVyd2lzZS4KICAgKi8KICBmaWx0ZXJNZXNzYWdlOiAobWVzc2FnZSkgPT4gewogICAgY29uc3QgcnVsZXMgPSBJSVRDLmNvbW0uZGVjbGFyYXRpdmVNZXNzYWdlRmlsdGVyLmdldEFsbFJ1bGVzKCk7CiAgICBmb3IgKGNvbnN0IHJ1bGVJZCBpbiBydWxlcykgewogICAgICBpZiAoSUlUQy5jb21tLmRlY2xhcmF0aXZlTWVzc2FnZUZpbHRlci5tYXRjaGVzUnVsZShtZXNzYWdlLCBydWxlc1tydWxlSWRdKSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfSwKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGRhdGFfY2FjaGUuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdkYXRhX2NhY2hlJyk7Ci8qIGdsb2JhbCBMIC0tIGVzbGludCAqLwoKLyoqCiAqIERhdGFDYWNoZSBjb25zdHJ1Y3Rvci4KICogTWFuYWdlcyBhIGNhY2hlIGZvciBtYXAgZGF0YSB0aWxlcy4gVGhlIGNhY2hlIGhhcyBhIG1heGltdW0gYWdlIGFuZCBzaXplIGxpbWl0LAogKiBhbmQgdGhlc2UgbGltaXRzIGNhbiB2YXJ5IGZvciBtb2JpbGUgYW5kIGRlc2t0b3AgZW52aXJvbm1lbnRzLgogKiBAY2xhc3MgRGF0YUNhY2hlCiAqLwp3aW5kb3cuRGF0YUNhY2hlID0gZnVuY3Rpb24gKCkgewogIHRoaXMuUkVRVUVTVF9DQUNIRV9GUkVTSF9BR0UgPSAzICogNjA7IC8vIGlmIHlvdW5nZXIgdGhhbiB0aGlzLCB1c2UgZGF0YSBpbiB0aGUgY2FjaGUgcmF0aGVyIHRoYW4gZmV0Y2hpbmcgZnJvbSB0aGUgc2VydmVyCgogIHRoaXMuUkVRVUVTVF9DQUNIRV9NQVhfQUdFID0gNSAqIDYwOyAvLyBtYXhpbXVtIGNhY2hlIGFnZS4gZW50cmllcyBhcmUgZGVsZXRlZCBmcm9tIHRoZSBjYWNoZSBhZnRlciB0aGlzIHRpbWUKCiAgLy8gTk9URTogY2hhcmFjdGVycyBhcmUgMTYgYml0cyAoRUNNQVNjcmlwdCBzdGFuZGFyZCksIHNvIGRpdmlkZSBieXRlIHNpemUgYnkgdHdvIGZvciBjb3JyZWN0IGxpbWl0CiAgaWYgKEwuQnJvd3Nlci5tb2JpbGUpIHsKICAgIC8vIG9uIG1vYmlsZSBkZXZpY2VzLCBzbWFsbGVyIGNhY2hlIHNpemUKICAgIHRoaXMuUkVRVUVTVF9DQUNIRV9NQVhfSVRFTVMgPSAzMDA7IC8vIGlmIG1vcmUgdGhhbiB0aGlzIG1hbnkgZW50cmllcywgZXhwaXJlIGVhcmx5CiAgICB0aGlzLlJFUVVFU1RfQ0FDSEVfTUFYX0NIQVJTID0gNTAwMDAwMCAvIDI7IC8vIG9yIG1vcmUgdGhhbiB0aGlzIHRvdGFsIHNpemUKICB9IGVsc2UgewogICAgLy8gYnV0IG9uIGRlc2t0b3AsIGFsbG93IG1vcmUKICAgIHRoaXMuUkVRVUVTVF9DQUNIRV9NQVhfSVRFTVMgPSAxMDAwOyAvLyBpZiBtb3JlIHRoYW4gdGhpcyBtYW55IGVudHJpZXMsIGV4cGlyZSBlYXJseQogICAgdGhpcy5SRVFVRVNUX0NBQ0hFX01BWF9DSEFSUyA9IDIwMDAwMDAwIC8gMjsgLy8gb3IgbW9yZSB0aGFuIHRoaXMgdG90YWwgc2l6ZQogIH0KCiAgdGhpcy5fY2FjaGUgPSB7fTsKICB0aGlzLl9jYWNoZUNoYXJTaXplID0gMDsKCiAgdGhpcy5faW50ZXJ2YWwgPSB1bmRlZmluZWQ7Cn07CgovKioKICogU3RvcmVzIGRhdGEgaW4gdGhlIGNhY2hlLgogKiBJZiBhbiBlbnRyeSBmb3IgdGhlIGdpdmVuIGtleSBhbHJlYWR5IGV4aXN0cywgaXQncyByZW1vdmVkIGJlZm9yZSB0aGUgbmV3IGRhdGEgaXMgc3RvcmVkLgogKiBUaGUgZGF0YSBpcyBzdG9yZWQgYWxvbmcgd2l0aCBpdHMgdGltZXN0YW1wIGFuZCBleHBpcmF0aW9uIHRpbWUuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgRGF0YUNhY2hlCiAqIEBwYXJhbSB7c3RyaW5nfSBxayAtIFRoZSBrZXkgdW5kZXIgd2hpY2ggdG8gc3RvcmUgdGhlIGRhdGEuCiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgdG8gYmUgc3RvcmVkIGluIHRoZSBjYWNoZS4KICovCndpbmRvdy5EYXRhQ2FjaGUucHJvdG90eXBlLnN0b3JlID0gZnVuY3Rpb24gKHFrLCBkYXRhKSB7CiAgdGhpcy5yZW1vdmUocWspOwoKICB2YXIgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogIHZhciBleHBpcmUgPSB0aW1lICsgdGhpcy5SRVFVRVNUX0NBQ0hFX0ZSRVNIX0FHRSAqIDEwMDA7CgogIHZhciBkYXRhU3RyID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CgogIHRoaXMuX2NhY2hlQ2hhclNpemUgKz0gZGF0YVN0ci5sZW5ndGg7CiAgdGhpcy5fY2FjaGVbcWtdID0geyB0aW1lOiB0aW1lLCBleHBpcmU6IGV4cGlyZSwgZGF0YVN0cjogZGF0YVN0ciB9Owp9OwoKLyoqCiAqIFJlbW92ZXMgYSBzcGVjaWZpYyBlbnRyeSBmcm9tIHRoZSBjYWNoZSBiYXNlZCBvbiBpdHMga2V5LgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIERhdGFDYWNoZQogKiBAcGFyYW0ge3N0cmluZ30gcWsgLSBUaGUga2V5IG9mIHRoZSBkYXRhIHRvIHJlbW92ZSBmcm9tIHRoZSBjYWNoZS4KICovCndpbmRvdy5EYXRhQ2FjaGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChxaykgewogIGlmIChxayBpbiB0aGlzLl9jYWNoZSkgewogICAgdGhpcy5fY2FjaGVDaGFyU2l6ZSAtPSB0aGlzLl9jYWNoZVtxa10uZGF0YVN0ci5sZW5ndGg7CiAgICBkZWxldGUgdGhpcy5fY2FjaGVbcWtdOwogIH0KfTsKCi8qKgogKiBSZXRyaWV2ZXMgdGhlIGRhdGEgZm9yIGEgZ2l2ZW4ga2V5IGZyb20gdGhlIGNhY2hlLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIERhdGFDYWNoZQogKiBAcGFyYW0ge3N0cmluZ30gcWsgLSBUaGUga2V5IG9mIHRoZSBkYXRhIHRvIHJldHJpZXZlLgogKiBAcmV0dXJucyB7b2JqZWN0fHVuZGVmaW5lZH0gVGhlIGNhY2hlZCBkYXRhIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHVuZGVmaW5lZC4KICovCndpbmRvdy5EYXRhQ2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChxaykgewogIGlmIChxayBpbiB0aGlzLl9jYWNoZSkgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5fY2FjaGVbcWtdLmRhdGFTdHIpOwogIGVsc2UgcmV0dXJuIHVuZGVmaW5lZDsKfTsKCi8qKgogKiBSZXRyaWV2ZXMgdGhlIHRpbWVzdGFtcCBmb3IgdGhlIGdpdmVuIGtleSBmcm9tIHRoZSBjYWNoZS4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBEYXRhQ2FjaGUKICogQHBhcmFtIHtzdHJpbmd9IHFrIC0gVGhlIGtleSBvZiB0aGUgZGF0YSB0byBjaGVjay4KICogQHJldHVybnMge251bWJlcn0gVGhlIHRpbWVzdGFtcCBvZiB0aGUgZGF0YSBpZiBpdCBleGlzdHMsIG90aGVyd2lzZSAwLgogKi8Kd2luZG93LkRhdGFDYWNoZS5wcm90b3R5cGUuZ2V0VGltZSA9IGZ1bmN0aW9uIChxaykgewogIGlmIChxayBpbiB0aGlzLl9jYWNoZSkgcmV0dXJuIHRoaXMuX2NhY2hlW3FrXS50aW1lOwogIGVsc2UgcmV0dXJuIDA7Cn07CgovKioKICogQ2hlY2tzIGlmIHRoZSBkYXRhIGZvciB0aGUgZ2l2ZW4ga2V5IGlzIGZyZXNoLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIERhdGFDYWNoZQogKiBAcGFyYW0ge3N0cmluZ30gcWsgLSBUaGUga2V5IG9mIHRoZSBkYXRhIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9IFRydWUgaWYgdGhlIGRhdGEgaXMgZnJlc2gsIGZhbHNlIGlmIGl0J3Mgc3RhbGUsIHVuZGVmaW5lZCBpZiBkYXRhIGRvZXNuJ3QgZXhpc3QuCiAqLwp3aW5kb3cuRGF0YUNhY2hlLnByb3RvdHlwZS5pc0ZyZXNoID0gZnVuY3Rpb24gKHFrKSB7CiAgaWYgKHFrIGluIHRoaXMuX2NhY2hlKSB7CiAgICB2YXIgZCA9IG5ldyBEYXRlKCk7CiAgICB2YXIgdCA9IGQuZ2V0VGltZSgpOwogICAgaWYgKHRoaXMuX2NhY2hlW3FrXS5leHBpcmUgPj0gdCkgcmV0dXJuIHRydWU7CiAgICBlbHNlIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB1bmRlZmluZWQ7Cn07CgovKioKICogU3RhcnRzIHRoZSBpbnRlcnZhbCB0byBwZXJpb2RpY2FsbHkgcnVuIHRoZSBjYWNoZSBleHBpcmF0aW9uLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIERhdGFDYWNoZQogKiBAcGFyYW0ge251bWJlcn0gcGVyaW9kIC0gVGhlIHBlcmlvZCBpbiBzZWNvbmRzIGJldHdlZW4gZWFjaCBleHBpcmF0aW9uIHJ1bi4KICovCndpbmRvdy5EYXRhQ2FjaGUucHJvdG90eXBlLnN0YXJ0RXhwaXJlSW50ZXJ2YWwgPSBmdW5jdGlvbiAocGVyaW9kKSB7CiAgaWYgKHRoaXMuX2ludGVydmFsID09PSB1bmRlZmluZWQpIHsKICAgIHZhciBzYXZlZENvbnRleHQgPSB0aGlzOwogICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgIHNhdmVkQ29udGV4dC5ydW5FeHBpcmUoKTsKICAgIH0sIHBlcmlvZCAqIDEwMDApOwogIH0KfTsKCi8qKgogKiBTdG9wcyB0aGUgaW50ZXJ2YWwgdGhhdCBjaGVja3MgZm9yIGNhY2hlIGV4cGlyYXRpb24uCiAqIFRoaXMgZnVuY3Rpb24gY2xlYXJzIHRoZSBpbnRlcnZhbCBzZXQgZm9yIHJ1bm5pbmcgdGhlIGNhY2hlIGV4cGlyYXRpb24gY2hlY2ssCiAqIGVmZmVjdGl2ZWx5IHN0b3BwaW5nIGF1dG9tYXRpYyBjYWNoZSBjbGVhbnVwLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIERhdGFDYWNoZS5wcm90b3R5cGUKICovCndpbmRvdy5EYXRhQ2FjaGUucHJvdG90eXBlLnN0b3BFeHBpcmVJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHsKICBpZiAodGhpcy5faW50ZXJ2YWwgIT09IHVuZGVmaW5lZCkgewogICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7CiAgICB0aGlzLl9pbnRlcnZhbCA9IHVuZGVmaW5lZDsKICB9Cn07CgovKioKICogUnVucyB0aGUgY2FjaGUgZXhwaXJhdGlvbiBwcm9jZXNzLgogKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBhbmQgcmVtb3ZlcyBleHBpcmVkIGNhY2hlIGVudHJpZXMgYmFzZWQgb24gdGhlIG1heGltdW0gYWdlLCBpdGVtIGNvdW50LAogKiBhbmQgY2hhcmFjdGVyIHNpemUgbGltaXRzLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIERhdGFDYWNoZS5wcm90b3R5cGUKICovCndpbmRvdy5EYXRhQ2FjaGUucHJvdG90eXBlLnJ1bkV4cGlyZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZCA9IG5ldyBEYXRlKCk7CiAgdmFyIHQgPSBkLmdldFRpbWUoKSAtIHRoaXMuUkVRVUVTVF9DQUNIRV9NQVhfQUdFICogMTAwMDsKCiAgdmFyIGNhY2hlU2l6ZSA9IE9iamVjdC5rZXlzKHRoaXMuX2NhY2hlKS5sZW5ndGg7CgogIGZvciAodmFyIHFrIGluIHRoaXMuX2NhY2hlKSB7CiAgICBpZiAoY2FjaGVTaXplID4gdGhpcy5SRVFVRVNUX0NBQ0hFX01BWF9JVEVNUyB8fCB0aGlzLl9jYWNoZUNoYXJTaXplID4gdGhpcy5SRVFVRVNUX0NBQ0hFX01BWF9DSEFSUyB8fCB0aGlzLl9jYWNoZVtxa10udGltZSA8IHQpIHsKICAgICAgdGhpcy5fY2FjaGVDaGFyU2l6ZSAtPSB0aGlzLl9jYWNoZVtxa10uZGF0YVN0ci5sZW5ndGg7CiAgICAgIGRlbGV0ZSB0aGlzLl9jYWNoZVtxa107CiAgICAgIGNhY2hlU2l6ZS0tOwogICAgfQogIH0KfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGRpYWxvZy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ2RpYWxvZycpOwovKiBnbG9iYWwgbG9nIC0tIGVzbGludCAqLwoKLyoqCiAqIEBmaWxlIERpYWxvZ3MgaW5zcGlyZWQgYnkgVEVTIElJSTogTW9ycm93aW5kLiBMb25nIGxpdmUgSG91c2UgVGVsdmFubmkuCiAqIEBtb2R1bGUgZGlhbG9nCiAqLwoKLyoqCiAqIFRoZSBnbG9iYWwgSUQgb2Ygb25zY3JlZW4gZGlhbG9ncy4gU3RhcnRzIGF0IDAuCiAqIEB0eXBlIHtudW1iZXJ9CiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGlhbG9nCiAqLwp3aW5kb3cuRElBTE9HX0lEID0gMDsKCi8qKgogKiBDcmVhdGVzIGEgZGlhbG9nIGFuZCBwdXRzIGl0IG9uc2NyZWVuIHdpdGggdmFyaW91cyBvcHRpb25zIGFuZCBjYWxsYmFja3MuCiAqCiAqIEBmdW5jdGlvbiBkaWFsb2cKICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBkaWFsb2cuCiAqIEBwYXJhbSB7KHN0cmluZ3xIVE1MRWxlbWVudCl9IFtvcHRpb25zLnRleHRdIC0gVGhlIHRleHQgb3IgSFRNTCB0byBkaXNwbGF5IGluIHRoZSBkaWFsb2cuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dCBpcyBhdXRvLWNvbnZlcnRlZCB0byBIVE1MLgogKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudGl0bGVdIC0gVGhlIGRpYWxvZydzIHRpdGxlLgogKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm1vZGFsPWZhbHNlXSAtIFdoZXRoZXIgdG8gb3BlbiBhIG1vZGFsIGRpYWxvZy4gSW1wbGllcyBkcmFnZ2FibGU9ZmFsc2U7CiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nQ2xhc3M9J3VpLWRpYWxvZy1tb2RhbCcuIE5vdGUgdGhhdCBtb2RhbCBkaWFsb2dzIGhpamFjawogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBlbnRpcmUgc2NyZWVuIGFuZCBzaG91bGQgb25seSBiZSB1c2VkIGluIHNwZWNpZmljIGNhc2VzLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIElJVEMgaXMgcnVubmluZyBvbiBtb2JpbGUsIG1vZGFsIHdpbGwgYWx3YXlzIGJlIHRydWUuCiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZF0gLSBBIHVuaXF1ZSBJRCBmb3IgdGhpcyBkaWFsb2cuIElmIGEgZGlhbG9nIHdpdGggdGhpcyBJRCBpcyBhbHJlYWR5IG9wZW4sCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2xvc2VkLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5jbG9zZUNhbGxiYWNrXSAtIEEgY2FsbGJhY2sgdG8gcnVuIG9uIGNsb3NlLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5jb2xsYXBzZUNhbGxiYWNrXSAtIEEgY2FsbGJhY2sgdG8gcnVuIG9uIGRpYWxvZyBjb2xsYXBzZS4KICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZXhwYW5kQ2FsbGJhY2tdIC0gQSBjYWxsYmFjayB0byBydW4gb24gZGlhbG9nIGV4cGFuc2lvbi4KICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuY29sbGFwc2VFeHBhbmRDYWxsYmFja10gLSBBIGNhbGxiYWNrIHRvIHJ1biBvbiBib3RoIGNvbGxhcHNlIGFuZCBleHBhbmQuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3ZlcnJpZGVzIGNvbGxhcHNlQ2FsbGJhY2sgYW5kIGV4cGFuZENhbGxiYWNrLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlY2VpdmVzIGEgYm9vbGVhbiBhcmd1bWVudCBgY29sbGFwc2luZ2AuCiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmZvY3VzQ2FsbGJhY2tdIC0gQSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgZGlhbG9nIGdhaW5zIGZvY3VzLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5ibHVyQ2FsbGJhY2tdIC0gQSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUgZGlhbG9nIGxvc2VzIGZvY3VzLgogKiBAcmV0dXJucyB7alF1ZXJ5fSBUaGUgalF1ZXJ5IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGNyZWF0ZWQgZGlhbG9nLgogKgogKiBAc2VlIHtAbGluayBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1VJL0FQSS8xLjgvRGlhbG9nfSBmb3IgYSBsaXN0IG9mIGFsbCBqUXVlcnkgVUkgRGlhbG9nIG9wdGlvbnMuCiAqIElmIHlvdSBwcmV2aW91c2x5IGFwcGxpZWQgYSBjbGFzcyB0byB5b3VyIGRpYWxvZyBhZnRlciBjcmVhdGluZyBpdCB3aXRoIGFsZXJ0KCksCiAqIGRpYWxvZ0NsYXNzIG1heSBiZSBwYXJ0aWN1bGFybHkgdXNlZnVsLgogKi8Kd2luZG93LmRpYWxvZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgLy8gT3ZlcnJpZGUgZm9yIHNtYXJ0cGhvbmVzLiBQcmVzZXJ2ZSBkZWZhdWx0IGJlaGF2aW9yIGFuZCBjcmVhdGUgYSBtb2RhbCBkaWFsb2cuCiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogIC8vIEJ1aWxkIGFuIGlkZW50aWZpZXIgZm9yIHRoaXMgZGlhbG9nCiAgdmFyIGlkID0gJ2RpYWxvZy0nICsgKG9wdGlvbnMubW9kYWwgPyAnbW9kYWwnIDogb3B0aW9ucy5pZCA/IG9wdGlvbnMuaWQgOiAnYW5vbi0nICsgd2luZG93LkRJQUxPR19JRCsrKTsKICB2YXIganFJRCA9ICcjJyArIGlkOwogIHZhciBodG1sID0gJyc7CgogIC8vIENvbnZlcnQgdGV4dCB0byBIVE1MIGlmIG5lY2Vzc2FyeQogIGlmIChvcHRpb25zLnRleHQpIHsKICAgIGh0bWwgPSB3aW5kb3cuY29udmVydFRleHRUb1RhYmxlTWFnaWMob3B0aW9ucy50ZXh0KTsKICB9IGVsc2UgaWYgKG9wdGlvbnMuaHRtbCkgewogICAgaHRtbCA9IG9wdGlvbnMuaHRtbDsKICB9IGVsc2UgewogICAgbG9nLmVycm9yKCd3aW5kb3cuZGlhbG9nOiB3YXJuaW5nOiBubyB0ZXh0IGluIGRpYWxvZycpOwogICAgaHRtbCA9IHdpbmRvdy5jb252ZXJ0VGV4dFRvVGFibGVNYWdpYygnJyk7CiAgfQoKICAvLyBNb2RhbCBkaWFsb2dzIHNob3VsZCBub3QgYmUgZHJhZ2dhYmxlCiAgaWYgKG9wdGlvbnMubW9kYWwpIHsKICAgIG9wdGlvbnMuZGlhbG9nQ2xhc3MgPSAob3B0aW9ucy5kaWFsb2dDbGFzcyA/IG9wdGlvbnMuZGlhbG9nQ2xhc3MgKyAnICcgOiAnJykgKyAndWktZGlhbG9nLW1vZGFsJzsKICAgIG9wdGlvbnMuZHJhZ2dhYmxlID0gZmFsc2U7CiAgfQoKICAvLyBDbG9zZSBvdXQgZXhpc3RpbmcgZGlhbG9ncy4KICBpZiAod2luZG93LkRJQUxPR1NbaWRdKSB7CiAgICB0cnkgewogICAgICB2YXIgc2VsZWN0b3IgPSAkKHdpbmRvdy5ESUFMT0dTW2lkXSk7CiAgICAgIHNlbGVjdG9yLmRpYWxvZygnY2xvc2UnKTsKICAgICAgc2VsZWN0b3IucmVtb3ZlKCk7CiAgICB9IGNhdGNoIHsKICAgICAgbG9nLmVycm9yKCd3aW5kb3cuZGlhbG9nOiBUcmllZCB0byBjbG9zZSBub25leGlzdGVudCBkaWFsb2cgJyArIGlkKTsKICAgIH0KICB9CgogIC8vIHRoZXJlIHNlZW1zIHRvIGJlIGEgYnVnIHdoZXJlIHdpZHRoL2hlaWdodCBhcmUgc2V0IHRvIGEgZml4ZWQgdmFsdWUgYWZ0ZXIgbW92aW5nIGEgZGlhbG9nCiAgZnVuY3Rpb24gc2l6ZUZpeCgpIHsKICAgIGlmIChkaWFsb2cuZGF0YSgnY29sbGFwc2VkJykpIHJldHVybjsKCiAgICB2YXIgb3B0aW9ucyA9IGRpYWxvZy5kaWFsb2coJ29wdGlvbicpOwogICAgZGlhbG9nLmRpYWxvZygnb3B0aW9uJywgJ2hlaWdodCcsIG9wdGlvbnMuaGVpZ2h0KTsKICAgIGRpYWxvZy5kaWFsb2coJ29wdGlvbicsICd3aWR0aCcsIG9wdGlvbnMud2lkdGgpOwogIH0KCiAgLy8gQ3JlYXRlIHRoZSB3aW5kb3csIGFwcGVuZGluZyBhIGRpdiB0byB0aGUgYm9keQogICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgaWQ9IicgKyBpZCArICciPjwvZGl2PicpOwogIHZhciBkaWFsb2cgPSAkKGpxSUQpLmRpYWxvZygKICAgICQuZXh0ZW5kKAogICAgICB0cnVlLAogICAgICB7CiAgICAgICAgYXV0b09wZW46IGZhbHNlLAogICAgICAgIG1vZGFsOiBmYWxzZSwKICAgICAgICBkcmFnZ2FibGU6IHRydWUsCiAgICAgICAgY2xvc2VUZXh0OiAnJywKICAgICAgICB0aXRsZTogJycsCiAgICAgICAgYnV0dG9uczogewogICAgICAgICAgT0s6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCh0aGlzKS5kaWFsb2coJ2Nsb3NlJyk7CiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgb3BlbjogZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIHRpdGxlYmFyID0gJCh0aGlzKS5jbG9zZXN0KCcudWktZGlhbG9nJykuZmluZCgnLnVpLWRpYWxvZy10aXRsZWJhcicpOwogICAgICAgICAgdGl0bGViYXIuZmluZCgnLnVpLWRpYWxvZy10aXRsZScpLmFkZENsYXNzKCd1aS1kaWFsb2ctdGl0bGUtYWN0aXZlJykuYWRkQ2xhc3MoJ3RleHQtb3ZlcmZsb3ctZWxsaXBzaXMnKTsKICAgICAgICAgIHZhciBjbG9zZSA9IHRpdGxlYmFyLmZpbmQoJy51aS1kaWFsb2ctdGl0bGViYXItY2xvc2UnKTsKCiAgICAgICAgICAvLyBUaXRsZSBzaG91bGQgbm90IHNob3cgdXAgb24gbW91c2VvdmVyCiAgICAgICAgICBjbG9zZS5yZW1vdmVBdHRyKCd0aXRsZScpLmFkZENsYXNzKCd1aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uJyk7CgogICAgICAgICAgLy8gcmUtY2VudGVyIGRpYWxvZyBvbiB0aXRsZSBkYmxjbGljawogICAgICAgICAgLy8galF1ZXJ5LVVJIHRha2VzIGNhcmUgYWJvdXQgaW5pdGlhbCBkaWFsb2cgcG9zaXRpb24sIGJ1dCBpZiBjb250ZW50J3MgaGVpZ2h0IGdyb3dzLAogICAgICAgICAgLy8gdGhlbiBkaWFsb2cncyBib3R0b20gbWF5IGdvIGJleW9uZCBzY3JlZW4gKGUuZy4gJ0F1dG8gZHJhdycgd2l0aCBhIGJ1bmNoIG9mIGJvb2ttYXJrcyBpbiBmb2xkZXIpLgogICAgICAgICAgLy8gU28gdGhpcyBpcyBqdXN0IGEgbmFzdHkgd29ya2Fyb3VuZCBmb3Igc3VjaCBpc3N1ZS4KICAgICAgICAgIC8vIHRvZG86IHdhdGNoIGhlaWdodCBjaGFuZ2VzIGFuZCBhZGFwdCBhdXRvbWF0aWNhbGx5CiAgICAgICAgICB0aXRsZWJhci5kYmxjbGljayhzaXplRml4KTsKCiAgICAgICAgICBpZiAoISQodGhpcykuZGlhbG9nKCdvcHRpb24nLCAnbW9kYWwnKSkgewogICAgICAgICAgICAvLyBTdGFydCBvdXQgd2l0aCBhIGNsb25lZCB2ZXJzaW9uIG9mIHRoZSBjbG9zZSBidXR0b24KICAgICAgICAgICAgdmFyIGNvbGxhcHNlID0gY2xvc2UuY2xvbmUoKTsKCiAgICAgICAgICAgIC8vIENoYW5nZSBpdCBpbnRvIGEgY29sbGFwc2UgYnV0dG9uIGFuZCBzZXQgdGhlIGNsaWNrIGhhbmRsZXIKICAgICAgICAgICAgY29sbGFwc2UuYWRkQ2xhc3MoJ3VpLWRpYWxvZy10aXRsZWJhci1idXR0b24tY29sbGFwc2UgdWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jb2xsYXBzZS1leHBhbmRlZCcpOwogICAgICAgICAgICBjb2xsYXBzZS5jbGljaygKICAgICAgICAgICAgICAkLnByb3h5KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBjb2xsYXBzZWQgPSAkKHRoaXMpLmRhdGEoJ2NvbGxhcHNlZCcpID09PSB0cnVlOwoKICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSBjb2xsYXBzZWQgc3RhdGUKICAgICAgICAgICAgICAgICQodGhpcykuZGF0YSgnY29sbGFwc2VkJywgIWNvbGxhcHNlZCk7CgogICAgICAgICAgICAgICAgLy8gUnVuIGNhbGxiYWNrcyBpZiB3ZSBoYXZlIHRoZW0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ2NvbGxhcHNlRXhwYW5kQ2FsbGJhY2snKSkgewogICAgICAgICAgICAgICAgICAkLnByb3h5KCQodGhpcykuZGF0YSgnY29sbGFwc2VFeHBhbmRDYWxsYmFjaycpLCB0aGlzKSghY29sbGFwc2VkKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGlmICghY29sbGFwc2VkICYmICQodGhpcykuZGF0YSgnY29sbGFwc2VDYWxsYmFjaycpKSB7CiAgICAgICAgICAgICAgICAgICAgJC5wcm94eSgkKHRoaXMpLmRhdGEoJ2NvbGxhcHNlQ2FsbGJhY2snKSwgdGhpcykoKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xsYXBzZWQgJiYgJCh0aGlzKS5kYXRhKCdleHBhbmRDYWxsYmFjaycpKSB7CiAgICAgICAgICAgICAgICAgICAgJC5wcm94eSgkKHRoaXMpLmRhdGEoJ2V4cGFuZENhbGxiYWNrJyksIHRoaXMpKCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBidXR0b24gcGFuZSBhbmQgY29udGVudCBkaWFsb2cgaW4gdGhpcyB1aS1kaWFsb2csIGFuZCBhZGQgb3IgcmVtb3ZlIHRoZSAnaGlkZGVuJyBjbGFzcy4KICAgICAgICAgICAgICAgIHZhciBkaWFsb2cgPSAkKHRoaXMpLmNsb3Nlc3QoJy51aS1kaWFsb2cnKTsKICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gZGlhbG9nLmZpbmQoJy51aS1kaWFsb2ctY29udGVudCcpOwogICAgICAgICAgICAgICAgdmFyIGJ1dHRvbnBhbmUgPSBkaWFsb2cuZmluZCgnLnVpLWRpYWxvZy1idXR0b25wYW5lJyk7CiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gZGlhbG9nLmZpbmQoJy51aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uLWNvbGxhcHNlJyk7CgogICAgICAgICAgICAgICAgLy8gU2xpZGUgdG9nZ2xlCiAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcygnaGVpZ2h0JywgJycpOwogICAgICAgICAgICAgICAgJChjb250ZW50KS5zbGlkZVRvZ2dsZSh7CiAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB3aW5kb3cuRElBTE9HX1NMSURFX0RVUkFUSU9OLAogICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICQoYnV0dG9ucGFuZSkuc2xpZGVUb2dnbGUoewogICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHdpbmRvdy5ESUFMT0dfU0xJREVfRFVSQVRJT04sCiAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogc2l6ZUZpeCwKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmIChjb2xsYXBzZWQpIHsKICAgICAgICAgICAgICAgICAgJChidXR0b24pLnJlbW92ZUNsYXNzKCd1aS1kaWFsb2ctdGl0bGViYXItYnV0dG9uLWNvbGxhcHNlLWNvbGxhcHNlZCcpOwogICAgICAgICAgICAgICAgICAkKGJ1dHRvbikuYWRkQ2xhc3MoJ3VpLWRpYWxvZy10aXRsZWJhci1idXR0b24tY29sbGFwc2UtZXhwYW5kZWQnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICQoYnV0dG9uKS5yZW1vdmVDbGFzcygndWktZGlhbG9nLXRpdGxlYmFyLWJ1dHRvbi1jb2xsYXBzZS1leHBhbmRlZCcpOwogICAgICAgICAgICAgICAgICAkKGJ1dHRvbikuYWRkQ2xhc3MoJ3VpLWRpYWxvZy10aXRsZWJhci1idXR0b24tY29sbGFwc2UtY29sbGFwc2VkJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwgdGhpcykKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIC8vIFB1dCBpdCBpbnRvIHRoZSB0aXRsZWJhcgogICAgICAgICAgICB0aXRsZWJhci5wcmVwZW5kKGNvbGxhcHNlKTsKICAgICAgICAgICAgY2xvc2UuYWRkQ2xhc3MoJ3VpLWRpYWxvZy10aXRsZWJhci1idXR0b24tY2xvc2UnKTsKICAgICAgICAgIH0KCiAgICAgICAgICB3aW5kb3cuRElBTE9HU1skKHRoaXMpLmRhdGEoJ2lkJyldID0gdGhpczsKICAgICAgICAgIHdpbmRvdy5ESUFMT0dfQ09VTlQrKzsKCiAgICAgICAgICBsb2cubG9nKCd3aW5kb3cuZGlhbG9nOiAnICsgJCh0aGlzKS5kYXRhKCdpZCcpICsgJyAoJyArICQodGhpcykuZGlhbG9nKCdvcHRpb24nLCAndGl0bGUnKSArICcpIG9wZW5lZC4gJyArIHdpbmRvdy5ESUFMT0dfQ09VTlQgKyAnIHJlbWFpbi4nKTsKICAgICAgICB9LAogICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBSdW4gdGhlIGNsb3NlIGNhbGxiYWNrIGlmIHdlIGhhdmUgb25lCiAgICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdjbG9zZUNhbGxiYWNrJykpIHsKICAgICAgICAgICAgJC5wcm94eSgkKHRoaXMpLmRhdGEoJ2Nsb3NlQ2FsbGJhY2snKSwgdGhpcykoKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCBrZWVwIGEgZGVhZCBkaWFsb2cgaW4gZm9jdXMKICAgICAgICAgIGlmICh3aW5kb3cuRElBTE9HX0ZPQ1VTICYmICQod2luZG93LkRJQUxPR19GT0NVUykuZGF0YSgnaWQnKSA9PT0gJCh0aGlzKS5kYXRhKCdpZCcpKSB7CiAgICAgICAgICAgIHdpbmRvdy5ESUFMT0dfRk9DVVMgPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEZpbmFsaXplCiAgICAgICAgICBkZWxldGUgd2luZG93LkRJQUxPR1NbJCh0aGlzKS5kYXRhKCdpZCcpXTsKCiAgICAgICAgICB3aW5kb3cuRElBTE9HX0NPVU5ULS07CiAgICAgICAgICBsb2cubG9nKCd3aW5kb3cuZGlhbG9nOiAnICsgJCh0aGlzKS5kYXRhKCdpZCcpICsgJyAoJyArICQodGhpcykuZGlhbG9nKCdvcHRpb24nLCAndGl0bGUnKSArICcpIGNsb3NlZC4gJyArIHdpbmRvdy5ESUFMT0dfQ09VTlQgKyAnIHJlbWFpbi4nKTsKCiAgICAgICAgICAvLyByZW1vdmUgZnJvbSBET00gYW5kIGRlc3Ryb3kKICAgICAgICAgICQodGhpcykuZGlhbG9nKCdkZXN0cm95JykucmVtb3ZlKCk7CiAgICAgICAgfSwKICAgICAgICBmb2N1czogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKCQodGhpcykuZGF0YSgnZm9jdXNDYWxsYmFjaycpKSB7CiAgICAgICAgICAgICQucHJveHkoJCh0aGlzKS5kYXRhKCdmb2N1c0NhbGxiYWNrJyksIHRoaXMpKCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gQmx1ciB0aGUgd2luZG93IGN1cnJlbnRseSBpbiBmb2N1cyB1bmxlc3Mgd2UncmUgZ2FpbmluZyBmb2N1cwogICAgICAgICAgaWYgKHdpbmRvdy5ESUFMT0dfRk9DVVMgJiYgJCh3aW5kb3cuRElBTE9HX0ZPQ1VTKS5kYXRhKCdpZCcpICE9PSAkKHRoaXMpLmRhdGEoJ2lkJykpIHsKICAgICAgICAgICAgJC5wcm94eShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgaWYgKCQodGhpcykuZGF0YSgnYmx1ckNhbGxiYWNrJykpIHsKICAgICAgICAgICAgICAgICQucHJveHkoJCh0aGlzKS5kYXRhKCdibHVyQ2FsbGJhY2snKSwgdGhpcykoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLnVpLWRpYWxvZycpLmZpbmQoJy51aS1kaWFsb2ctdGl0bGUnKS5yZW1vdmVDbGFzcygndWktZGlhbG9nLXRpdGxlLWFjdGl2ZScpLmFkZENsYXNzKCd1aS1kaWFsb2ctdGl0bGUtaW5hY3RpdmUnKTsKICAgICAgICAgICAgfSwgd2luZG93LkRJQUxPR19GT0NVUykoKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBUaGlzIGRpYWxvZyBpcyBub3cgaW4gZm9jdXMKICAgICAgICAgIHdpbmRvdy5ESUFMT0dfRk9DVVMgPSB0aGlzOwogICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcudWktZGlhbG9nJykuZmluZCgnLnVpLWRpYWxvZy10aXRsZScpLnJlbW92ZUNsYXNzKCd1aS1kaWFsb2ctdGl0bGUtaW5hY3RpdmUnKS5hZGRDbGFzcygndWktZGlhbG9nLXRpdGxlLWFjdGl2ZScpOwogICAgICAgIH0sCiAgICAgIH0sCiAgICAgIG9wdGlvbnMKICAgICkKICApOwoKICBkaWFsb2cub24oJ2RpYWxvZ2RyYWdzdG9wIGRpYWxvZ3Jlc2l6ZXN0b3AnLCBzaXplRml4KTsKCiAgLy8gU2V0IEhUTUwgYW5kIElEcwogIGRpYWxvZy5odG1sKGh0bWwpOwogIGRpYWxvZy5kYXRhKCdpZCcsIGlkKTsKICBkaWFsb2cuZGF0YSgnanFJRCcsIGpxSUQpOwoKICAvLyBTZXQgY2FsbGJhY2tzCiAgZGlhbG9nLmRhdGEoJ2Nsb3NlQ2FsbGJhY2snLCBvcHRpb25zLmNsb3NlQ2FsbGJhY2spOwogIGRpYWxvZy5kYXRhKCdjb2xsYXBzZUNhbGxiYWNrJywgb3B0aW9ucy5jb2xsYXBzZUNhbGxiYWNrKTsKICBkaWFsb2cuZGF0YSgnZXhwYW5kQ2FsbGJhY2snLCBvcHRpb25zLmV4cGFuZENhbGxiYWNrKTsKICBkaWFsb2cuZGF0YSgnY29sbGFwc2VFeHBhbmRDYWxsYmFjaycsIG9wdGlvbnMuY29sbGFwc2VFeHBhbmRDYWxsYmFjayk7CiAgZGlhbG9nLmRhdGEoJ2ZvY3VzQ2FsbGJhY2snLCBvcHRpb25zLmZvY3VzQ2FsbGJhY2spOwogIGRpYWxvZy5kYXRhKCdibHVyQ2FsbGJhY2snLCBvcHRpb25zLmJsdXJDYWxsYmFjayk7CgogIGlmIChvcHRpb25zLm1vZGFsKSB7CiAgICAvLyB1aS1tb2RhbCBpbmNsdWRlcyBvdmVycmlkZXMgZm9yIG1vZGFsIGRpYWxvZ3MKICAgIGRpYWxvZy5wYXJlbnQoKS5hZGRDbGFzcygndWktbW9kYWwnKTsKICB9IGVsc2UgewogICAgLy8gRW5hYmxlIHNuYXBwaW5nCiAgICBkaWFsb2cuZGlhbG9nKCkucGFyZW50cygnLnVpLWRpYWxvZycpLmRyYWdnYWJsZSgnb3B0aW9uJywgJ3NuYXAnLCB0cnVlKTsKICB9CgogIC8vIFJ1biBpdAogIGRpYWxvZy5kaWFsb2coJ29wZW4nKTsKCiAgcmV0dXJuIGRpYWxvZzsKfTsKCi8qKgogKiBDcmVhdGVzIGFuIGFsZXJ0IGRpYWxvZyB3aXRoIGRlZmF1bHQgc2V0dGluZ3MuIFRoaXMgZnVuY3Rpb24gaXMgYSBzaW1wbGlmaWVkIHdyYXBwZXIgYXJvdW5kIGB3aW5kb3cuZGlhbG9nYC4KICogSXQgcHJvdmlkZXMgYSBxdWljayB3YXkgdG8gY3JlYXRlIGJhc2ljIGFsZXJ0IGRpYWxvZ3Mgd2l0aCBvcHRpb25hbCBIVE1MIGNvbnRlbnQgYW5kIGEgY2xvc2UgY2FsbGJhY2suCiAqCiAqIEBmdW5jdGlvbiBhbGVydAogKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSB0ZXh0IG9yIEhUTUwgY29udGVudCB0byBkaXNwbGF5IGluIHRoZSBhbGVydCBkaWFsb2cuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzSFRNTD1mYWxzZV0gLSBTcGVjaWZpZXMgd2hldGhlciB0aGUgYHRleHRgIHBhcmFtZXRlciBzaG91bGQgYmUgdHJlYXRlZCBhcyBIVE1MLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgYHRydWVgLCB0aGUgYHRleHRgIHdpbGwgYmUgaW5zZXJ0ZWQgYXMgSFRNTCwgb3RoZXJ3aXNlIGFzIHBsYWluIHRleHQuCiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjbG9zZUNhbGxiYWNrXSAtIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgYWxlcnQgZGlhbG9nIGlzIGNsb3NlZC4KICoKICogQHJldHVybnMge2pRdWVyeX0gVGhlIGpRdWVyeSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjcmVhdGVkIGFsZXJ0IGRpYWxvZy4KICovCndpbmRvdy5hbGVydCA9IGZ1bmN0aW9uICh0ZXh0LCBpc0hUTUwsIGNsb3NlQ2FsbGJhY2spIHsKICB2YXIgb2JqID0geyBjbG9zZUNhbGxiYWNrOiBjbG9zZUNhbGxiYWNrIH07CiAgaWYgKGlzSFRNTCkgewogICAgb2JqLmh0bWwgPSB0ZXh0OwogIH0gZWxzZSB7CiAgICBvYmoudGV4dCA9IHRleHQ7CiAgfQoKICByZXR1cm4gd2luZG93LmRpYWxvZyhvYmopOwp9OwoKd2luZG93LnNldHVwRGlhbG9ncyA9IGZ1bmN0aW9uICgpIHsKICB3aW5kb3cuRElBTE9HX0lEID0gMDsKICB3aW5kb3cuRElBTE9HUyA9IHt9OwogIHdpbmRvdy5ESUFMT0dfQ09VTlQgPSAwOwogIHdpbmRvdy5ESUFMT0dfRk9DVVMgPSBudWxsOwp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogZGlhbG9nX2Fib3V0LmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygnZGlhbG9nX2Fib3V0Jyk7Ci8qIGdsb2JhbCBMLCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgVGhpcyBmaWxlIGNvbnRhaW5zIGZ1bmN0aW9ucyByZWxhdGVkIHRvIHRoZSAnQWJvdXQgSUlUQycgZGlhbG9nLgogKiBAbW9kdWxlIGRpYWxvZ19hYm91dAogKi8KCi8qKgogKiBEaXNwbGF5cyB0aGUgJ0Fib3V0IElJVEMnIGRpYWxvZy4KICogVGhpcyBkaWFsb2cgaW5jbHVkZXMgdGhlIElJVEMgdmVyc2lvbiwgYSBsaXN0IG9mIGxvYWRlZCBwbHVnaW5zLCBhbmQgb3RoZXIgcmVsZXZhbnQgaW5mb3JtYXRpb24uCiAqCiAqIEBmdW5jdGlvbgogKi8Kd2luZG93LmFib3V0SUlUQyA9IGZ1bmN0aW9uICgpIHsKICB2YXIgaHRtbCA9IGNyZWF0ZURpYWxvZ0NvbnRlbnQoKTsKCiAgd2luZG93LmRpYWxvZyh7CiAgICB0aXRsZTogJ0lJVEMgJyArIGdldElJVENWZXJzaW9uKCksCiAgICBpZDogJ2lpdGMtYWJvdXQnLAogICAgaHRtbDogaHRtbCwKICAgIHdpZHRoOiAnYXV0bycsCiAgICBkaWFsb2dDbGFzczogJ3VpLWRpYWxvZy1hYm91dElJVEMnLAogIH0pOwp9OwoKLyoqCiAqIENyZWF0ZXMgdGhlIGNvbnRlbnQgZm9yIHRoZSAnQWJvdXQgSUlUQycgZGlhbG9nLgogKgogKiBAZnVuY3Rpb24KICogQHJldHVybnMge3N0cmluZ30gSFRNTCBjb250ZW50IGZvciB0aGUgYWJvdXQgZGlhbG9nLgogKi8KZnVuY3Rpb24gY3JlYXRlRGlhbG9nQ29udGVudCgpIHsKICB2YXIgaHRtbCA9IGA8ZGl2PjxiPkFib3V0IElJVEM8L2I+PC9kaXY+CiAgICAgICAgICAgICAgPGRpdj5JbmdyZXNzIEludGVsIFRvdGFsIENvbnZlcnNpb248L2Rpdj4KICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgPGEgaHJlZj0iJHsnaHR0cHM6Ly9paXRjLmFwcC8nfSIgdGFyZ2V0PSJfYmxhbmsiPklJVEMgSG9tZXBhZ2U8L2E+IHwKICAgICAgICAgICAgICAgPGEgaHJlZj0iJHsnaHR0cHM6Ly90Lm1lL2lpdGNfbmV3cyd9IiB0YXJnZXQ9Il9ibGFuayI+VGVsZWdyYW0gY2hhbm5lbDwvYT48YnIgLz4KICAgICAgICAgICAgICAgT24gdGhlIHNjcmlwdOKAmXMgaG9tZXBhZ2UgeW91IGNhbjoKICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgIDxsaT5GaW5kIFVwZGF0ZXM8L2xpPgogICAgICAgICAgICAgICAgIDxsaT5HZXQgUGx1Z2luczwvbGk+CiAgICAgICAgICAgICAgICAgPGxpPlJlcG9ydCBCdWdzPC9saT4KICAgICAgICAgICAgICAgICA8bGk+Q29udHJpYnV0ZSE8L2xpPgogICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICA8ZGl2PlZlcnNpb246ICR7Z2V0SUlUQ1ZlcnNpb24oKX0gJHtjcmVhdGVDaGFuZ2Vsb2cod2luZG93LnNjcmlwdF9pbmZvKX08L2Rpdj5gOwoKICBpZiAoaXNTaG9ydE9uTG9jYWxTdG9yYWdlKCkpIHsKICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9Indhcm5pbmciPllvdSBhcmUgcnVubmluZyBsb3cgb24gTG9jYWxTdG9yYWdlIG1lbW9yeS48YnIvPlBsZWFzZSBmcmVlIHNvbWUgc3BhY2UgdG8gcHJldmVudCBkYXRhIGxvc3MuPC9kaXY+JzsKICB9CgogIGlmICh3aW5kb3cuaXNBcHAgJiYgd2luZG93LmFwcC5nZXRWZXJzaW9uTmFtZSkgewogICAgaHRtbCArPSAnPGRpdj5JSVRDIE1vYmlsZSAnICsgd2luZG93LmFwcC5nZXRWZXJzaW9uTmFtZSgpICsgJzwvZGl2Pic7CiAgfQoKICB2YXIgcGx1Z2lucyA9IGdldFBsdWdpbnMoKTsKICBpZiAocGx1Z2lucykgewogICAgaHRtbCArPSAnPGRpdj48cD5QbHVnaW5zOjwvcD48dWw+JyArIHBsdWdpbnMgKyAnPC91bD48L2Rpdj4nOwogIH0KCiAgcmV0dXJuIGh0bWw7Cn0KCi8qKgogKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIHBsdWdpbnMgY3VycmVudGx5IGxvYWRlZCBpbiBJSVRDLiBUaGUgbGlzdCBpbmNsdWRlcyBwbHVnaW4gbmFtZXMsIHZlcnNpb25zLCBhbmQgZGVzY3JpcHRpb25zLgogKgogKiBAZnVuY3Rpb24KICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIGxpc3Qgb2YgcGx1Z2lucyBpbiBIVE1MLgogKi8KZnVuY3Rpb24gZ2V0UGx1Z2lucygpIHsKICB2YXIgcGx1Z2luc0luZm8gPSB3aW5kb3cuYm9vdFBsdWdpbnMuaW5mbzsKCiAgd2hpbGUgKHdpbmRvdy5ib290UGx1Z2luc1swXSkgewogICAgdmFyIHBsdWdpbiA9IHdpbmRvdy5ib290UGx1Z2lucy5zaGlmdCgpOwogICAgcGx1Z2luc0luZm8ucHVzaChwbHVnaW4uaW5mbyB8fCB7fSk7CiAgfQoKICB2YXIgZXh0cmEgPSBnZXRJSVRDVmVyc2lvbkFkZGl0aW9uKCk7CgogIHZhciBwbHVnaW5zID0gcGx1Z2luc0luZm8KICAgIC5tYXAoY29udmVydFBsdWdpbkluZm8pCiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYS5uYW1lID4gYi5uYW1lID8gMSA6IC0xOwogICAgfSkKICAgIC5tYXAoZnVuY3Rpb24gKHApIHsKICAgICAgcmV0dXJuIHBsdWdpbkluZm9Ub1N0cmluZyhwLCBleHRyYSk7CiAgICB9KQogICAgLmpvaW4oJ1xuJyk7CgogIHJldHVybiBwbHVnaW5zOwp9CgovKioKICogQ29udmVydHMgcGx1Z2luIGluZm9ybWF0aW9uIGludG8gYSBzdHJ1Y3R1cmVkIG9iamVjdCBmb3IgZWFzaWVyIHByb2Nlc3NpbmcuCiAqCiAqIEBmdW5jdGlvbgogKiBAcGFyYW0ge09iamVjdH0gaW5mbyAtIFRoZSBwbHVnaW4gaW5mb3JtYXRpb24gb2JqZWN0LgogKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHBsdWdpbiBpbiB0aGUgYXJyYXkuCiAqIEByZXR1cm5zIHtPYmplY3R9IFN0cnVjdHVyZWQgcGx1Z2luIGluZm9ybWF0aW9uLgogKi8KZnVuY3Rpb24gY29udmVydFBsdWdpbkluZm8oaW5mbywgaW5kZXgpIHsKICAvLyBQbHVnaW5zIG1ldGFkYXRhIGNvbWUgZnJvbSAyIHNvdXJjZXM6CiAgLy8gLSBidWlsZE5hbWUsIHBsdWdpbklkLCBkYXRlVGltZVZlcnNpb246IGluc2VydGVkIGluIHBsdWdpbiBib2R5IGJ5IGJ1aWxkIHNjcmlwdAogIC8vICAgKG9ubHkgc3RhbmRhcmQgcGx1Z2lucykKICAvLyAtIHNjcmlwdC5uYW1lL3ZlcnNpb24vZGVzY3JpcHRpb246IGZyb20gR01faW5mbyBvYmplY3QsIHBhc3NlZCB0byB3cmFwcGVyCiAgLy8gICBgc2NyaXB0YCBtYXkgYmUgbm90IGF2YWlsYWJsZSBpZiB1c2Vyc2NyaXB0IG1hbmFnZXIgZG9lcyBub3QgcHJvdmVkZSBHTV9pbmZvCiAgLy8gICAoYXRtOiBJSVRDLU1vYmlsZSBmb3IgaU9TKQogIHZhciByZXN1bHQgPSB7CiAgICBidWlsZDogaW5mby5idWlsZE5hbWUsCiAgICBjaGFuZ2Vsb2c6IGluZm8uY2hhbmdlbG9nLAogICAgaWQ6IGluZm8ucGx1Z2luSWQsCiAgICBuYW1lOiBpbmZvLnBsdWdpbklkLAogICAgZGF0ZTogaW5mby5kYXRlVGltZVZlcnNpb24sCiAgICBlcnJvcjogaW5mby5lcnJvciwKICAgIHZlcnNpb246IHVuZGVmaW5lZCwKICAgIGRlc2NyaXB0aW9uOiB1bmRlZmluZWQsCiAgfTsKCiAgdmFyIHNjcmlwdCA9IGluZm8uc2NyaXB0OwogIGlmIChzY3JpcHQpIHsKICAgIGlmICh0eXBlb2Ygc2NyaXB0Lm5hbWUgPT09ICdzdHJpbmcnKSB7CiAgICAgIHJlc3VsdC5uYW1lID0gc2NyaXB0Lm5hbWUucmVwbGFjZSgvXklJVENbXHMtXStwbHVnaW46XHMrL2ksICcnKTsgLy8gY3V0IG5vbi1pbmZvcm1hdGl2ZSBuYW1lIHBhcnQKICAgIH0KICAgIHJlc3VsdC52ZXJzaW9uID0gc2NyaXB0LnZlcnNpb247CiAgICByZXN1bHQuZGVzY3JpcHRpb24gPSBzY3JpcHQuZGVzY3JpcHRpb247CiAgfQoKICBpZiAoIXJlc3VsdC5uYW1lKSB7CiAgICBpZiAod2luZG93LnNjcmlwdF9pbmZvLnNjcmlwdCkgewogICAgICAvLyBjaGVjayBpZiBHTV9pbmZvIGlzIGF2YWlsYWJsZQogICAgICByZXN1bHQubmFtZSA9ICdbdW5rbm93biBwbHVnaW46IGluZGV4ICcgKyBpbmRleCArICddJzsKICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gInRoaXMgcGx1Z2luIGRvZXMgbm90IGhhdmUgcHJvcGVyIHdyYXBwZXI7IHJlcG9ydCB0byBpdCdzIGF1dGhvciI7CiAgICB9IGVsc2UgewogICAgICAvLyB1c2Vyc2NyaXB0IG1hbmFnZXIgZmF1bHQKICAgICAgcmVzdWx0Lm5hbWUgPSAnWzNyZC1wYXJ0eSBwbHVnaW46IGluZGV4ICcgKyBpbmRleCArICddJzsKICAgIH0KICB9CgogIHJldHVybiByZXN1bHQ7Cn0KCi8qKgogKiBDcmVhdGVzIGEgY2hhbmdlbG9nIHNlY3Rpb24gZm9yIGEgZ2l2ZW4gcGx1Z2luLgogKgogKiBAZnVuY3Rpb24KICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIFRoZSBwbHVnaW4gZm9yIHdoaWNoIHRvIGNyZWF0ZSB0aGUgY2hhbmdlbG9nLgogKiBAcmV0dXJucyB7c3RyaW5nfSBIVE1MIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNoYW5nZWxvZy4KICovCmZ1bmN0aW9uIGNyZWF0ZUNoYW5nZWxvZyhwbHVnaW4pIHsKICB2YXIgaWQgPSAncGx1Z2luLWNoYW5nZWxvZy0nICsgcGx1Z2luLmlkOwogIHJldHVybiAoCiAgICBgPGEgb25jbGljaz0iJCgnIyR7aWR9JykudG9nZ2xlKCkiPmNoYW5nZWxvZzwvYT5gICsKICAgIGA8dWwgaWQ9IiR7aWR9IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPmAgKwogICAgcGx1Z2luLmNoYW5nZWxvZwogICAgICAubWFwKGZ1bmN0aW9uIChsb2dFbnRyeSkgewogICAgICAgIHJldHVybiAoCiAgICAgICAgICAnPGxpPicgKwogICAgICAgICAgbG9nRW50cnkudmVyc2lvbiArCiAgICAgICAgICAnPHVsPicgKwogICAgICAgICAgbG9nRW50cnkuY2hhbmdlcwogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjaGFuZ2UpIHsKICAgICAgICAgICAgICByZXR1cm4gYDxsaT4ke2NoYW5nZX08L2xpPmA7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5qb2luKCcnKSArCiAgICAgICAgICAnPC91bD48L2xpPicKICAgICAgICApOwogICAgICB9KQogICAgICAuam9pbignJykgKwogICAgJzwvdWw+JwogICk7Cn0KCi8qKgogKiBDb252ZXJ0cyBwbHVnaW4gaW5mb3JtYXRpb24gaW50byBhIHN0cmluZyBmb3JtYXQgc3VpdGFibGUgZm9yIGRpc3BsYXkgaW4gdGhlICdBYm91dCBJSVRDJyBkaWFsb2cuCiAqCiAqIEBmdW5jdGlvbgogKiBAcGFyYW0ge09iamVjdH0gcCAtIFRoZSBwbHVnaW4gaW5mb3JtYXRpb24gb2JqZWN0LgogKiBAcGFyYW0ge3N0cmluZ30gZXh0cmEgLSBBZGRpdGlvbmFsIHZlcnNpb24gaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBwbHVnaW4gaW5mb3JtYXRpb24gc3RyaW5nLgogKi8KZnVuY3Rpb24gcGx1Z2luSW5mb1RvU3RyaW5nKHAsIGV4dHJhKSB7CiAgdmFyIGluZm8gPSB7CiAgICBjaGFuZ2Vsb2c6ICcnLAogICAgY2xhc3M6ICcnLAogICAgZGVzY3JpcHRpb246IHAuZGVzY3JpcHRpb24gfHwgJycsCiAgICBuYW1lOiBwLm5hbWUsCiAgICB2ZXJpbmZvOiBmb3JtYXRWZXJJbmZvKHAsIGV4dHJhKSwKICB9OwoKICBpZiAoaXNTdGFuZGFyZFBsdWdpbihwKSkgewogICAgaW5mby5jbGFzcyArPSAncGx1Z2luLWlzLXN0YW5kYXJkJzsKICB9CgogIGlmIChwLmVycm9yKSB7CiAgICBpbmZvLmNsYXNzICs9ICcgcGx1Z2luLWVycm9yJzsKICAgIGluZm8uZGVzY3JpcHRpb24gPSBwLmVycm9yOwogIH0KCiAgaWYgKHAuY2hhbmdlbG9nKSB7CiAgICBpbmZvLmNoYW5nZWxvZyA9IGNyZWF0ZUNoYW5nZWxvZyhwKTsKICB9CgogIHJldHVybiBMLlV0aWwudGVtcGxhdGUoJzxsaSBjbGFzcz0ie2NsYXNzfSIgdGl0bGU9IntkZXNjcmlwdGlvbn0iPntuYW1lfXt2ZXJpbmZvfSB7Y2hhbmdlbG9nfTwvbGk+JywgaW5mbyk7Cn0KCi8qKgogKiBDaGVja3MgaWYgYSBnaXZlbiBwbHVnaW4gaXMgYSBzdGFuZGFyZCBwbHVnaW4gYmFzZWQgb24gdGhlIGJ1aWxkIG5hbWUgYW5kIGRhdGUuCiAqIFN0YW5kYXJkIHBsdWdpbnMgYXJlIHRob3NlIHRoYXQgbWF0Y2ggdGhlIGJ1aWxkIGFuZCBkYXRlIG9mIHRoZSBtYWluIElJVEMgc2NyaXB0LgogKgogKiBAZnVuY3Rpb24KICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIFRoZSBwbHVnaW4gb2JqZWN0IHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGx1Z2luIGlzIHN0YW5kYXJkLCBmYWxzZSBvdGhlcndpc2UuCiAqLwpmdW5jdGlvbiBpc1N0YW5kYXJkUGx1Z2luKHBsdWdpbikgewogIHJldHVybiBwbHVnaW4uYnVpbGQgPT09IHdpbmRvdy5zY3JpcHRfaW5mby5idWlsZE5hbWUgJiYgcGx1Z2luLmRhdGUgPT09IHdpbmRvdy5zY3JpcHRfaW5mby5kYXRlVGltZVZlcnNpb247Cn0KCi8qKgogKiBSZXRyaWV2ZXMgdGhlIElJVEMgdmVyc2lvbiBzdHJpbmcuCiAqCiAqIEBmdW5jdGlvbgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgSUlUQyB2ZXJzaW9uIHN0cmluZy4KICovCmZ1bmN0aW9uIGdldElJVENWZXJzaW9uKCkgewogIHZhciBpaXRjID0gd2luZG93LnNjcmlwdF9pbmZvOwogIHJldHVybiAoKGlpdGMuc2NyaXB0ICYmIGlpdGMuc2NyaXB0LnZlcnNpb24pIHx8IGlpdGMuZGF0ZVRpbWVWZXJzaW9uKSArICcgWycgKyBpaXRjLmJ1aWxkTmFtZSArICddJzsKfQoKLyoqCiAqIEV4dHJhY3RzIHRoZSBhZGRpdGlvbmFsIHZlcnNpb24gaW5mb3JtYXRpb24gZnJvbSB0aGUgSUlUQyBzY3JpcHQgdmVyc2lvbi4KICoKICogQGZ1bmN0aW9uCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBhZGRpdGlvbmFsIHZlcnNpb24gaW5mb3JtYXRpb24sIGlmIGFueS4KICovCmZ1bmN0aW9uIGdldElJVENWZXJzaW9uQWRkaXRpb24oKSB7CiAgdmFyIGV4dHJhID0gd2luZG93LnNjcmlwdF9pbmZvLnNjcmlwdCAmJiB3aW5kb3cuc2NyaXB0X2luZm8uc2NyaXB0LnZlcnNpb24ubWF0Y2goL15cZCtcLlxkK1wuXGQrKFwuLispJC8pOwogIHJldHVybiBleHRyYSAmJiBleHRyYVsxXTsKfQoKLyoqCiAqIEZvcm1hdHMgdmVyc2lvbiBpbmZvcm1hdGlvbiBmb3IgcGx1Z2lucyBhbmQgdGhlIG1haW4gc2NyaXB0LgogKiBJZiBhbiAnZXh0cmEnIHBhcmFtZXRlciBpcyBwcm92aWRlZCBhbmQgbWF0Y2hlcyB0aGUgZW5kIG9mIHRoZSB2ZXJzaW9uIHN0cmluZywgaXQgaXMgcmVtb3ZlZC4KICogVGhpcyBpcyB1c2VkIHRvIGN1dCBvZmYgYSBjb21tb24gdGltZXN0YW1wIGFwcGVuZGVkIHRvIHZlcnNpb25zLgogKiBUaGUgZnVuY3Rpb24gYWxzbyBwcmVwYXJlcyBhIHRvb2x0aXAgc2hvd2luZyB0aGUgYnVpbGQgbnVtYmVyIGFuZCBkYXRlLCBpZiBhdmFpbGFibGUuCiAqCiAqIEBmdW5jdGlvbiBmb3JtYXRWZXJJbmZvCiAqIEBwYXJhbSB7T2JqZWN0fSBwIC0gVGhlIHBsdWdpbiBvciBzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgdmVyc2lvbiBpbmZvcm1hdGlvbi4KICogQHBhcmFtIHtzdHJpbmd9IFtleHRyYV0gLSBBbiBvcHRpb25hbCBleHRyYSBzdHJpbmcgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSB2ZXJzaW9uIGluZm9ybWF0aW9uLgogKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgdmVyc2lvbiBzdHJpbmcgd2l0aCBvcHRpb25hbCBIVE1MIHRvb2x0aXAuCiAqLwpmdW5jdGlvbiBmb3JtYXRWZXJJbmZvKHAsIGV4dHJhKSB7CiAgaWYgKHAudmVyc2lvbiAmJiBleHRyYSkgewogICAgdmFyIGN1dFBvcyA9IHAudmVyc2lvbi5sZW5ndGggLSBleHRyYS5sZW5ndGg7CiAgICAvLyBjdXQgZXh0cmEgdmVyc2lvbiBjb21wb25lbnQgKHRpbWVzdGFtcCkgaWYgaXQgaXMgZXF1YWwgdG8gbWFpbiBzY3JpcHQncyBvbmUKICAgIGlmIChwLnZlcnNpb24uc3Vic3RyaW5nKGN1dFBvcykgPT09IGV4dHJhKSB7CiAgICAgIHAudmVyc2lvbiA9IHAudmVyc2lvbi5zdWJzdHJpbmcoMCwgY3V0UG9zKTsKICAgIH0KICB9CgogIHAudmVyc2lvbiA9IHAudmVyc2lvbiB8fCBwLmRhdGU7CiAgaWYgKHAudmVyc2lvbikgewogICAgdmFyIHRvb2x0aXAgPSBbXTsKICAgIGlmIChwLmJ1aWxkKSB7CiAgICAgIHRvb2x0aXAucHVzaCgnWycgKyBwLmJ1aWxkICsgJ10nKTsKICAgIH0KICAgIGlmIChwLmRhdGUgJiYgcC5kYXRlICE9PSBwLnZlcnNpb24pIHsKICAgICAgdG9vbHRpcC5wdXNoKHAuZGF0ZSk7CiAgICB9CiAgICByZXR1cm4gTC5VdGlsLnRlbXBsYXRlKCcgLSA8Y29kZXt0aXRsZX0+e3ZlcnNpb259PC9jb2RlPicsIHsKICAgICAgdGl0bGU6IHRvb2x0aXBbMF0gPyAnIHRpdGxlPSInICsgdG9vbHRpcC5qb2luKCcgJykgKyAnIicgOiAnJywKICAgICAgdmVyc2lvbjogcC52ZXJzaW9uLAogICAgfSk7CiAgfQoKICByZXR1cm4gJyc7Cn0KCi8qKgogKiBDaGVja3MgaWYgdGhlIGJyb3dzZXIncyBsb2NhbCBzdG9yYWdlIGlzIHJ1bm5pbmcgc2hvcnQgb24gYXZhaWxhYmxlIHNwYWNlLgogKiBUaGlzIGZ1bmN0aW9uIHRyaWVzIHRvIHdyaXRlIGEgc3BlY2lmaWMgYW1vdW50IG9mIGRhdGEgdG8gdGhlIGxvY2FsIHN0b3JhZ2UgYW5kIGNhcHR1cmVzIGFueSBlcnJvcnMuCiAqIElmIGFuIGVycm9yIG9jY3VycywgaXQgaXMgYW4gaW5kaWNhdGlvbiB0aGF0IHRoZSBsb2NhbCBzdG9yYWdlIGhhcyBsaW1pdGVkIGZyZWUgc3BhY2UgbGVmdC4KICoKICogQGZ1bmN0aW9uCiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgbG9jYWwgc3RvcmFnZSBpcyBydW5uaW5nIHNob3J0IG9uIHNwYWNlLCBvdGhlcndpc2UgYGZhbHNlYC4KICovCmZ1bmN0aW9uIGlzU2hvcnRPbkxvY2FsU3RvcmFnZSgpIHsKICB2YXIgTUlOSU1VTV9GUkVFX1NQQUNFID0gMTAwMDAwOwogIHRyeSB7CiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnX01FTV9DSEVDS18nLCAnIycucmVwZWF0KE1JTklNVU1fRlJFRV9TUEFDRSkpOwogIH0gY2F0Y2ggKGUpIHsKICAgIGxvZy5lcnJvcignb3V0IG9mIGxvY2Fsc3RvcmFnZSBzcGFjZScsIGUpOwogICAgcmV0dXJuIHRydWU7CiAgfQoKICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnX01FTV9DSEVDS18nKTsKICByZXR1cm4gZmFsc2U7Cn0KCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGVudGl0eV9kZWNvZGUuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdlbnRpdHlfZGVjb2RlJyk7Ci8qIGdsb2JhbCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgRGVjb2RlIHRoZSBvbi1uZXR3b3JrIGFycmF5IGVudGl0eSBmb3JtYXQgaW50byBhbiBvYmplY3QgZm9ybWF0IGNsb3NlciB0byB0aGF0IHVzZWQgYmVmb3JlCiAqIG1ha2VzIG11Y2ggbW9yZSBzZW5zZSBhcyBhbiBvYmplY3QsIG1lYW5zIHRoYXQgZXhpc3RpbmcgY29kZSBkaWRuJ3QgbmVlZCB0byBjaGFuZ2UsIGFuZCBpdCdzIHdoYXQgdGhlCiAqIHN0b2NrIGludGVsIHNpdGUgZG9lcyBpbnRlcm5hbGx5IHRvbyAodGhlIGFycmF5IGZvcm1hdCBpcyBvbmx5IG9uIHRoZSBuZXR3b3JrKQogKgogKiBAbW9kdWxlIGVudGl0eV9kZWNvZGUKICovCgovKioKICogQG5hbWVzcGFjZSB3aW5kb3cuZGVjb2RlQXJyYXkKICovCndpbmRvdy5kZWNvZGVBcnJheSA9IGZ1bmN0aW9uICgpIHt9OwoKLyoqCiAqIFBhcnNlcyBhIG1vZCBhcnJheSBpbnRvIGFuIG9iamVjdC4KICoKICogQGZ1bmN0aW9uIHBhcnNlTW9kCiAqIEBwYXJhbSB7QXJyYXl9IGFyciAtIFRoZSBtb2QgYXJyYXkuCiAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gUGFyc2VkIG1vZCBvYmplY3Qgb3IgbnVsbCBpZiB0aGUgaW5wdXQgaXMgZmFsc3kuCiAqLwpmdW5jdGlvbiBwYXJzZU1vZChhcnIpIHsKICBpZiAoIWFycikgewogICAgcmV0dXJuIG51bGw7CiAgfQogIHJldHVybiB7CiAgICBvd25lcjogYXJyWzBdLAogICAgbmFtZTogYXJyWzFdLAogICAgcmFyaXR5OiBhcnJbMl0sCiAgICBzdGF0czogYXJyWzNdLAogIH07Cn0KCi8qKgogKiBQYXJzZXMgYSByZXNvbmF0b3IgYXJyYXkgaW50byBhbiBvYmplY3QuCiAqCiAqIEBmdW5jdGlvbiBwYXJzZVJlc29uYXRvcgogKiBAcGFyYW0ge0FycmF5fSBhcnIgLSBUaGUgcmVzb25hdG9yIGFycmF5LgogKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IFBhcnNlZCByZXNvbmF0b3Igb2JqZWN0IG9yIG51bGwgaWYgdGhlIGlucHV0IGlzIGZhbHN5LgogKi8KZnVuY3Rpb24gcGFyc2VSZXNvbmF0b3IoYXJyKSB7CiAgaWYgKCFhcnIpIHsKICAgIHJldHVybiBudWxsOwogIH0KICByZXR1cm4gewogICAgb3duZXI6IGFyclswXSwKICAgIGxldmVsOiBhcnJbMV0sCiAgICBlbmVyZ3k6IGFyclsyXSwKICB9Owp9CgovKioKICogUGFyc2VzIGFuIGFydGlmYWN0IGJyaWVmIGFycmF5IGludG8gYW4gb2JqZWN0LgogKiBAZnVuY3Rpb24gcGFyc2VBcnRpZmFjdEJyaWVmCiAqIEBwYXJhbSB7QXJyYXl9IGFyciAtIFRoZSBhcnRpZmFjdCBicmllZiBhcnJheS4KICogQHJldHVybnMge09iamVjdHxudWxsfSBQYXJzZWQgYXJ0aWZhY3QgYnJpZWYgb2JqZWN0IG9yIG51bGwgaWYgdGhlIGlucHV0IGlzIGZhbHN5LgogKi8KZnVuY3Rpb24gcGFyc2VBcnRpZmFjdEJyaWVmKGFycikgewogIGlmICghYXJyKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIC8vIGFycmF5IGluZGV4IDAgaXMgZm9yIGZyYWdtZW50cyBhdCB0aGUgcG9ydGFsLiBpbmRleCAxIGlzIGZvciB0YXJnZXQgcG9ydGFscwogIC8vIGVhY2ggb2YgdGhvc2UgaXMgdHdvIGRpbWVuc2lvbmFsIC0gbm90IHN1cmUgd2h5LiBwYXJ0IG9mIHRoaXMgaXMgdG8gYWxsb3cgZm9yIG11bHRpcGxlIHR5cGVzIG9mIGFydGlmYWN0cywKICAvLyB3aXRoIHRoZWlyIG93biB0YXJnZXRzLCBhY3RpdmUgYXQgb25jZSAtIGJ1dCBvbmUgbGV2ZWwgZm9yIHRoZSBhcnJheSBpcyBlbm91Z2ggZm9yIHRoYXQKCiAgLy8gbWFraW5nIGEgZ3Vlc3MgLSBmaXJzdCBsZXZlbCBpcyBmb3IgZGlmZmVyZW50IGFydGlmYWN0IHR5cGVzLCBzZWNvbmQgaW5kZXggd291bGQgYWxsb3cgZm9yCiAgLy8gZXh0cmEgZGF0YSBmb3IgdGhhdCBhcnRpZmFjdCB0eXBlCgogIGZ1bmN0aW9uIGRlY29kZUFydGlmYWN0QXJyYXkoYXJyKSB7CiAgICB2YXIgcmVzdWx0ID0ge307CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICAvLyB3ZSdsbCB1c2UgdGhlIHR5cGUgYXMgdGhlIGtleSAtIGFuZCBzdG9yZSBhbnkgYWRkaXRpb25hbCBhcnJheSB2YWx1ZXMgYXMgdGhlIHZhbHVlCiAgICAgIC8vIHRoYXQgd2lsbCBiZSBhbiBlbXB0eSBhcnJheSBmb3Igbm93LCBzbyBvbmx5IG9iamVjdCBrZXlzIGFyZSB1c2VmdWwgZGF0YQogICAgICByZXN1bHRbYXJyW2ldWzBdXSA9IGFycltpXS5zbGljZSgxKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQoKICByZXR1cm4gewogICAgZnJhZ21lbnQ6IGRlY29kZUFydGlmYWN0QXJyYXkoYXJyWzBdKSwKICAgIHRhcmdldDogZGVjb2RlQXJ0aWZhY3RBcnJheShhcnJbMV0pLAogIH07Cn0KCi8qKgogKiBQYXJzZXMgYW4gYXJ0aWZhY3QgZGV0YWlsIGFycmF5IGludG8gYW4gb2JqZWN0LgogKgogKiBAZnVuY3Rpb24gcGFyc2VBcnRpZmFjdERldGFpbAogKiBAcGFyYW0ge0FycmF5fSBhcnIgLSBUaGUgYXJ0aWZhY3QgZGV0YWlsIGFycmF5LgogKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IFBhcnNlZCBhcnRpZmFjdCBkZXRhaWwgb2JqZWN0IG9yIG51bGwgaWYgdGhlIGlucHV0IGlzIGZhbHN5LgogKi8KZnVuY3Rpb24gcGFyc2VBcnRpZmFjdERldGFpbChhcnIpIHsKICBpZiAoIWFycikgewogICAgcmV0dXJuIG51bGw7CiAgfQogIC8vIGVtcHR5IGFydGlmYWN0IGRhdGEgaXMgcG9pbnRsZXNzIC0gaWdub3JlIGl0CiAgaWYgKGFyci5sZW5ndGggPT09IDMgJiYgYXJyWzBdID09PSAnJyAmJiBhcnJbMV0gPT09ICcnICYmIGFyclsyXS5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiBudWxsOwogIH0KICByZXR1cm4gewogICAgdHlwZTogYXJyWzBdLAogICAgZGlzcGxheU5hbWU6IGFyclsxXSwKICAgIGZyYWdtZW50czogYXJyWzJdLAogIH07Cn0KCi8qKgogKiBQYXJzZXMgYSBoaXN0b3J5IGRldGFpbCBiaXQgYXJyYXkgaW50byBhbiBvYmplY3QuCiAqCiAqIEBmdW5jdGlvbiBwYXJzZUhpc3RvcnlEZXRhaWwKICogQHBhcmFtIHtudW1iZXJ9IGJpdGFycmF5IC0gVGhlIGhpc3RvcnkgZGV0YWlsIGJpdCBhcnJheS4KICogQHJldHVybnMge09iamVjdH0gUGFyc2VkIGhpc3RvcnkgZGV0YWlsIG9iamVjdC4KICovCmZ1bmN0aW9uIHBhcnNlSGlzdG9yeURldGFpbChiaXRhcnJheSkgewogIHJldHVybiB7CiAgICBfcmF3OiBiaXRhcnJheSwKICAgIHZpc2l0ZWQ6ICEhKGJpdGFycmF5ICYgMSksCiAgICBjYXB0dXJlZDogISEoYml0YXJyYXkgJiAyKSwKICAgIHNjb3V0Q29udHJvbGxlZDogISEoYml0YXJyYXkgJiA0KSwKICB9Owp9CgovLyB0aGVyZSdzIGFsc28gYSAncGxhY2Vob2xkZXInIHBvcnRhbCAtIGdlbmVyYXRlZCBmcm9tIHRoZSBkYXRhIGluIGxpbmtzL2ZpZWxkcy4gb25seSBoYXMgdGVhbS9sYXQvbG5nCgp2YXIgQ09SRV9QT1JUQUxfREFUQV9MRU5HVEggPSA0OwoKLyoqCiAqIFBhcnNlcyB0aGUgY29yZSBwb3J0YWwgZGF0YSBmcm9tIGFuIGFycmF5LgogKgogKiBAZnVuY3Rpb24gY29yZVBvcnRhbERhdGEKICogQHBhcmFtIHtBcnJheX0gYSAtIFRoZSBwb3J0YWwgZGF0YSBhcnJheS4KICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNvcmUgZGF0YSBvZiBhIHBvcnRhbC4KICovCmZ1bmN0aW9uIGNvcmVQb3J0YWxEYXRhKGEpIHsKICByZXR1cm4gewogICAgLy8gYVswXSA9PSB0eXBlIChhbHdheXMgJ3AnKQogICAgdGVhbTogYVsxXSwKICAgIGxhdEU2OiBhWzJdLAogICAgbG5nRTY6IGFbM10sCiAgfTsKfQoKdmFyIFNVTU1BUllfUE9SVEFMX0RBVEFfTEVOR1RIID0gMTQ7CnZhciBERVRBSUxFRF9QT1JUQUxfREFUQV9MRU5HVEggPSBTVU1NQVJZX1BPUlRBTF9EQVRBX0xFTkdUSCArIDQ7CnZhciBFWFRFTkRFRF9QT1JUQUxfREFUQV9MRU5HVEggPSBERVRBSUxFRF9QT1JUQUxfREFUQV9MRU5HVEggKyAxOwoKLyoqCiAqIFBhcnNlcyB0aGUgc3VtbWFyeSBwb3J0YWwgZGF0YSBmcm9tIGFuIGFycmF5LgogKgogKiBAZnVuY3Rpb24gc3VtbWFyeVBvcnRhbERhdGEKICogQHBhcmFtIHtBcnJheX0gYSAtIFRoZSBwb3J0YWwgZGF0YSBhcnJheS4KICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN1bW1hcnkgZGF0YSBvZiBhIHBvcnRhbC4KICovCmZ1bmN0aW9uIHN1bW1hcnlQb3J0YWxEYXRhKGEpIHsKICByZXR1cm4gewogICAgbGV2ZWw6IGFbNF0sCiAgICBoZWFsdGg6IGFbNV0sCiAgICByZXNDb3VudDogYVs2XSwKICAgIGltYWdlOiBhWzddLAogICAgdGl0bGU6IGFbOF0sCiAgICBvcm5hbWVudHM6IGFbOV0sCiAgICBtaXNzaW9uOiBhWzEwXSwKICAgIG1pc3Npb241MHBsdXM6IGFbMTFdLAogICAgYXJ0aWZhY3RCcmllZjogcGFyc2VBcnRpZmFjdEJyaWVmKGFbMTJdKSwKICAgIHRpbWVzdGFtcDogYVsxM10sCiAgfTsKfQoKLyoqCiAqIFBhcnNlcyB0aGUgZGV0YWlsZWQgcG9ydGFsIGRhdGEgZnJvbSBhbiBhcnJheS4KICoKICogQGZ1bmN0aW9uIGRldGFpbHNQb3J0YWxEYXRhCiAqIEBwYXJhbSB7QXJyYXl9IGEgLSBUaGUgcG9ydGFsIGRhdGEgYXJyYXkuCiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBkZXRhaWxlZCBkYXRhIG9mIGEgcG9ydGFsLgogKi8KZnVuY3Rpb24gZGV0YWlsc1BvcnRhbERhdGEoYSkgewogIHJldHVybiB7CiAgICBtb2RzOiBhW1NVTU1BUllfUE9SVEFMX0RBVEFfTEVOR1RIXS5tYXAocGFyc2VNb2QpLAogICAgcmVzb25hdG9yczogYVtTVU1NQVJZX1BPUlRBTF9EQVRBX0xFTkdUSCArIDFdLm1hcChwYXJzZVJlc29uYXRvciksCiAgICBvd25lcjogYVtTVU1NQVJZX1BPUlRBTF9EQVRBX0xFTkdUSCArIDJdLAogICAgYXJ0aWZhY3REZXRhaWw6IHBhcnNlQXJ0aWZhY3REZXRhaWwoYVtTVU1NQVJZX1BPUlRBTF9EQVRBX0xFTkdUSCArIDNdKSwKICB9Owp9CgovKioKICogUGFyc2VzIHRoZSBleHRlbmRlZCBwb3J0YWwgZGF0YSBmcm9tIGFuIGFycmF5LgogKiBAZnVuY3Rpb24gZXh0ZW5kZWRQb3J0YWxEYXRhCiAqIEBwYXJhbSB7QXJyYXl9IGEgLSBUaGUgcG9ydGFsIGRhdGEgYXJyYXkuCiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBleHRlbmRlZCBkYXRhIG9mIGEgcG9ydGFsLgogKi8KZnVuY3Rpb24gZXh0ZW5kZWRQb3J0YWxEYXRhKGEpIHsKICByZXR1cm4gewogICAgaGlzdG9yeTogcGFyc2VIaXN0b3J5RGV0YWlsKGFbREVUQUlMRURfUE9SVEFMX0RBVEFfTEVOR1RIXSB8fCAwKSwKICB9Owp9Cgp3aW5kb3cuZGVjb2RlQXJyYXkuZGF0YUxlbiA9IHsKICBjb3JlOiBbQ09SRV9QT1JUQUxfREFUQV9MRU5HVEhdLAogIHN1bW1hcnk6IFtTVU1NQVJZX1BPUlRBTF9EQVRBX0xFTkdUSF0sCiAgZGV0YWlsZWQ6IFtFWFRFTkRFRF9QT1JUQUxfREFUQV9MRU5HVEgsIERFVEFJTEVEX1BPUlRBTF9EQVRBX0xFTkdUSF0sCiAgZXh0ZW5kZWQ6IFtFWFRFTkRFRF9QT1JUQUxfREFUQV9MRU5HVEgsIFNVTU1BUllfUE9SVEFMX0RBVEFfTEVOR1RIXSwKICBhbnlrbm93bjogW0NPUkVfUE9SVEFMX0RBVEFfTEVOR1RILCBTVU1NQVJZX1BPUlRBTF9EQVRBX0xFTkdUSCwgREVUQUlMRURfUE9SVEFMX0RBVEFfTEVOR1RILCBFWFRFTkRFRF9QT1JUQUxfREFUQV9MRU5HVEhdLAp9OwoKLyoqCiAqIERlY29kZXMgYW4gYXJyYXkgb2YgcG9ydGFsIGRhdGEgaW50byBhIG1vcmUgZGV0YWlsZWQgb2JqZWN0IGZvcm1hdC4KICoKICogQGZ1bmN0aW9uIHdpbmRvdy5kZWNvZGVBcnJheS5wb3J0YWwKICogQHBhcmFtIHtBcnJheX0gYSAtIEFycmF5IGNvbnRhaW5pbmcgcG9ydGFsIGRhdGEuCiAqIEBwYXJhbSB7c3RyaW5nfSBbZGV0YWlscz0nYW55a25vd24nXSAtIFRoZSBsZXZlbCBvZiBkZXRhaWwgdG8gZGVjb2RlLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYW4gYmUgJ2NvcmUnLCAnc3VtbWFyeScsICdkZXRhaWxlZCcsICdleHRlbmRlZCcsIG9yICdhbnlrbm93bicuCiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIGRlY29kZWQgcG9ydGFsIGRhdGEuCiAqLwp3aW5kb3cuZGVjb2RlQXJyYXkucG9ydGFsID0gZnVuY3Rpb24gKGEsIGRldGFpbHMpIHsKICBpZiAoIWEpIHsKICAgIGxvZy53YXJuKCdBcmd1bWVudCBub3Qgc3BlY2lmaWVkJyk7CiAgICByZXR1cm47CiAgfQoKICBpZiAoYVswXSAhPT0gJ3AnKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY29kZUFycmF5LnBvcnRhbDogbm90IGEgcG9ydGFsJyk7CiAgfQoKICBkZXRhaWxzID0gZGV0YWlscyB8fCAnYW55a25vd24nOwogIHZhciBleHBlY3RlZCA9IHdpbmRvdy5kZWNvZGVBcnJheS5kYXRhTGVuW2RldGFpbHNdOwogIGlmIChleHBlY3RlZC5pbmRleE9mKGEubGVuZ3RoKSA9PT0gLTEpIHsKICAgIGxvZy53YXJuKCdVbmV4cGVjdGVkIHBvcnRhbCBkYXRhIGxlbmd0aDogJyArIGEubGVuZ3RoICsgJyAoJyArIGRldGFpbHMgKyAnKScpOwogIH0KCiAgdmFyIGRhdGEgPSBjb3JlUG9ydGFsRGF0YShhKTsKCiAgaWYgKGEubGVuZ3RoID49IFNVTU1BUllfUE9SVEFMX0RBVEFfTEVOR1RIKSB7CiAgICAkLmV4dGVuZChkYXRhLCBzdW1tYXJ5UG9ydGFsRGF0YShhKSk7CiAgfQoKICBpZiAoYS5sZW5ndGggPj0gREVUQUlMRURfUE9SVEFMX0RBVEFfTEVOR1RIKSB7CiAgICBpZiAoYVtTVU1NQVJZX1BPUlRBTF9EQVRBX0xFTkdUSF0pIHsKICAgICAgJC5leHRlbmQoZGF0YSwgZGV0YWlsc1BvcnRhbERhdGEoYSkpOwogICAgfSBlbHNlIGlmIChkZXRhaWxzID09PSAnZGV0YWlsZWQnKSB7CiAgICAgIGxvZy53YXJuKCdQb3J0YWwgZGV0YWlscyBtaXNzaW5nJyk7CiAgICB9CiAgfQoKICBpZiAoYS5sZW5ndGggPj0gRVhURU5ERURfUE9SVEFMX0RBVEFfTEVOR1RIIHx8IGRldGFpbHMgPT09ICdleHRlbmRlZCcgfHwgZGV0YWlscyA9PT0gJ2RldGFpbGVkJykgewogICAgJC5leHRlbmQoZGF0YSwgZXh0ZW5kZWRQb3J0YWxEYXRhKGEpKTsKICAgIGlmIChkYXRhLmhpc3RvcnkgJiYgZGF0YS5oaXN0b3J5LmNhcHR1cmVkICYmICFkYXRhLmhpc3RvcnkudmlzaXRlZCkgewogICAgICBsb2cud2FybignSW5jb25zaXN0ZW50IGhpc3RvcnkgZGF0YSBmb3VuZCBpbiBwb3J0YWwgIicgKyBkYXRhLnRpdGxlICsgJyInKTsKICAgIH0KICB9CgogIHJldHVybiBkYXRhOwp9OwoKd2luZG93LmRlY29kZUFycmF5LnBvcnRhbFN1bW1hcnkgPSBmdW5jdGlvbiAoYSkgewogIC8vIGRlcHJlY2F0ZWQhIQogIHJldHVybiB3aW5kb3cuZGVjb2RlQXJyYXkucG9ydGFsKGEsICdzdW1tYXJ5Jyk7Cn07Cgp3aW5kb3cuZGVjb2RlQXJyYXkucG9ydGFsRGV0YWlsID0gZnVuY3Rpb24gKGEpIHsKICAvLyBkZXByZWNhdGVkISEKICByZXR1cm4gd2luZG93LmRlY29kZUFycmF5LnBvcnRhbChhLCAnZGV0YWlsZWQnKTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGV4dHJhY3RfbmlhbnRpY19wYXJhbWV0ZXJzLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygnZXh0cmFjdF9uaWFudGljX3BhcmFtZXRlcnMnKTsKLyogZ2xvYmFsIGxvZyAtLSBlc2xpbnQgKi8KCi8qKgogKiBFeHRyYWN0IGVzc2VudGlhbCBwYXJhbWV0ZXJzIGFuZCBmdW5jdGlvbnMgZnJvbSB0aGUgSW5ncmVzcyBJbnRlbCBzaXRlJ3MgbWluaWZpZWQgSmF2YVNjcmlwdC4KICogTmVjZXNzYXJ5IGR1ZSB0byBOaWFudGljJ3MgbWluaWZpY2F0aW9uIGFuZCBvYmZ1c2NhdGlvbiBvZiB0aGVpciBJbnRlbCBNYXAgY29kZS4KICoKICogQG1vZHVsZSBleHRyYWN0X25pYW50aWNfcGFyYW1ldGVycwogKi8KCi8qKgogKiBNYWluIGZ1bmN0aW9uIHRvIGV4dHJhY3QgcmVxdWlyZWQgcGFyYW1ldGVycyBmcm9tIHRoZSBJbmdyZXNzIEludGVsIHNpdGUncyBKYXZhU2NyaXB0LgogKiBUaHJvd3MgYW4gZXJyb3IgYW5kIHNob3dzIGEgZGlhbG9nIGlmIGl0IGZhaWxzIHRvIGZpbmQgdGhlIG5lY2Vzc2FyeSBwYXJhbWV0ZXJzLgogKgogKiBAZnVuY3Rpb24gZXh0cmFjdEZyb21TdG9jawogKi8KCndpbmRvdy5leHRyYWN0RnJvbVN0b2NrID0gZnVuY3Rpb24gKCkgewogIHdpbmRvdy5uaWFudGljX3BhcmFtcyA9IHt9OwoKICAvLyBleHRyYWN0IHRoZSBmb3JtZXIgbmVtZXNpcy5kYXNoYm9hcmQuY29uZmlnLkNVUlJFTlRfVkVSU0lPTiBmcm9tIHRoZSBjb2RlCiAgdmFyIHJlVmVyc2lvbiA9IG5ldyBSZWdFeHAoJyJYLUNTUkZUb2tlbiIuKlthLXpdLnY9IihbYS1mMC05XXs0MH0pIjsnKTsKCiAgdmFyIG1pbmlmaWVkID0gbmV3IFJlZ0V4cCgnXlthLXpBLVokXVthLXpBLVokMC05XT8kJyk7CgogIGZvciAodmFyIHRvcExldmVsIGluIHdpbmRvdykgewogICAgaWYgKG1pbmlmaWVkLnRlc3QodG9wTGV2ZWwpKSB7CiAgICAgIC8vIGEgbWluaWZpZWQgb2JqZWN0IC0gY2hlY2sgZm9yIG1pbmlmaWVkIHByb3RvdHlwZSBlbnRyaWVzCgogICAgICB2YXIgdG9wT2JqZWN0ID0gd2luZG93W3RvcExldmVsXTsKICAgICAgaWYgKHRvcE9iamVjdCAmJiB0b3BPYmplY3QucHJvdG90eXBlKSB7CiAgICAgICAgLy8gdGhlIG9iamVjdCBoYXMgYSBwcm90b3R5cGUgLSBpdGVyYXRlIHRocm91Z2ggdGhlIHByb3BlcnRpZXMgb2YgdGhhdAogICAgICAgIGZvciAodmFyIHNlY0xldmVsIGluIHRvcE9iamVjdC5wcm90b3R5cGUpIHsKICAgICAgICAgIGlmIChtaW5pZmllZC50ZXN0KHNlY0xldmVsKSkgewogICAgICAgICAgICAvLyBsb29rcyBsaWtlIHdlJ3ZlIGZvdW5kIGFuIG9iamVjdCBvZiB0aGUgZm9ybWF0ICJYWC5wcm90b3R5cGUuWVkiLi4uCiAgICAgICAgICAgIHZhciBpdGVtID0gdG9wT2JqZWN0LnByb3RvdHlwZVtzZWNMZXZlbF07CgogICAgICAgICAgICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgIC8vIGEgZnVuY3Rpb24gLSB0ZXN0IGl0IGFnYWluc3QgdGhlIHJlbGV2YW50IHJlZ3VsYXIgZXhwcmVzc2lvbnMKICAgICAgICAgICAgICB2YXIgZnVuY1N0ciA9IGl0ZW0udG9TdHJpbmcoKTsKCiAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVWZXJzaW9uLmV4ZWMoZnVuY1N0cik7CiAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgICBsb2cubG9nKCdGb3VuZCBmb3JtZXIgQ1VSUkVOVF9WRVJTSU9OIGluICcgKyB0b3BMZXZlbCArICcucHJvdG90eXBlLicgKyBzZWNMZXZlbCk7CiAgICAgICAgICAgICAgICB3aW5kb3cubmlhbnRpY19wYXJhbXMuQ1VSUkVOVF9WRVJTSU9OID0gbWF0Y2hbMV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IC8vIGVuZCAnaWYgLnByb3RvdHlwZScKCiAgICAgIGlmICh0b3BPYmplY3QgJiYgQXJyYXkuaXNBcnJheSAmJiBBcnJheS5pc0FycmF5KHRvcE9iamVjdCkpIHsKICAgICAgICAvLyBmaW5kIGFsbCBub24temVybyBsZW5ndGggYXJyYXlzIGNvbnRhaW5pbmcganVzdCBudW1iZXJzCiAgICAgICAgaWYgKHRvcE9iamVjdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICB2YXIganVzdEludHMgPSB0cnVlOwogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3BPYmplY3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiB0b3BPYmplY3RbaV0gIT09ICdudW1iZXInIHx8IHRvcE9iamVjdFtpXSAhPT0gcGFyc2VJbnQodG9wT2JqZWN0W2ldKSkgewogICAgICAgICAgICAgIGp1c3RJbnRzID0gZmFsc2U7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChqdXN0SW50cykgewogICAgICAgICAgICAvLyBjdXJyZW50IGxlbmd0aHMgYXJlOiAxNzogWk9PTV9UT19MRVZFTCwgMTQ6IFRJTEVTX1BFUl9FREdFCiAgICAgICAgICAgIC8vIGhvd2V2ZXIsIHNsaWdodGx5IGxvbmdlciBvciBzaG9ydGVyIGFyZSBhIHBvc3NpYmlsaXR5IGluIHRoZSBmdXR1cmUKCiAgICAgICAgICAgIGlmICh0b3BPYmplY3QubGVuZ3RoID49IDEyICYmIHRvcE9iamVjdC5sZW5ndGggPD0gMTgpIHsKICAgICAgICAgICAgICAvLyBhIHJlYXNvbmFibGUgYXJyYXkgbGVuZ3RoIGZvciB0aWxlIHBhcmFtZXRlcnMKICAgICAgICAgICAgICAvLyBuZWVkIHRvIGZpbmQgdHdvIHR5cGVzOgogICAgICAgICAgICAgIC8vIGEuIHBvcnRhbCBsZXZlbCBsaW1pdHMuIGRlY3JlYXNpbmcgbnVtYmVycywgc3RhcnRpbmcgYXQgOAogICAgICAgICAgICAgIC8vIGIuIHRpbGVzIHBlciBlZGdlLiBpbmNyZWFzaW5nIG51bWJlcnMuIGN1cnJlbnQgbWF4IGlzIDM2MDAwLCA5MDAwIHdhcyB0aGUgcHJldmlvdXMgdmFsdWUgLSAxODAwMCBpcyBhIGxpa2VseSBwb3NzaWJpbGl0eSB0b28KCiAgICAgICAgICAgICAgaWYgKHRvcE9iamVjdFswXSA9PT0gOCkgewogICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHRpbGUgbGV2ZWxzCiAgICAgICAgICAgICAgICB2YXIgZGVjcmVhc2luZyA9IHRydWU7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRvcE9iamVjdC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICBpZiAodG9wT2JqZWN0W2kgLSAxXSA8IHRvcE9iamVjdFtpXSkgewogICAgICAgICAgICAgICAgICAgIGRlY3JlYXNpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGRlY3JlYXNpbmcpIHsKICAgICAgICAgICAgICAgICAgd2luZG93Lm5pYW50aWNfcGFyYW1zLlpPT01fVE9fTEVWRUwgPSB0b3BPYmplY3Q7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSAvLyBlbmQgaWYgKHRvcE9iamVjdFswXSA9PSA4KQoKICAgICAgICAgICAgICAvLyAyMDE1LTA2LTI1IC0gY2hhbmdlZCB0byB0b3AgdmFsdWUgb2YgNjQwMDAsIHRoZW4gdG8gMzIwMDAgLSBhbGxvdyBmb3IgdGhlbSB0byByZXN0b3JlIGl0IGp1c3QgaW4gY2FzZQogICAgICAgICAgICAgIGlmICh0b3BPYmplY3RbdG9wT2JqZWN0Lmxlbmd0aCAtIDFdID49IDkwMDAgJiYgdG9wT2JqZWN0W3RvcE9iamVjdC5sZW5ndGggLSAxXSA8PSA2NDAwMCkgewogICAgICAgICAgICAgICAgdmFyIGluY3JlYXNpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0b3BPYmplY3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgaWYgKHRvcE9iamVjdFtpIC0gMV0gPiB0b3BPYmplY3RbaV0pIHsKICAgICAgICAgICAgICAgICAgICBpbmNyZWFzaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpbmNyZWFzaW5nKSB7CiAgICAgICAgICAgICAgICAgIHdpbmRvdy5uaWFudGljX3BhcmFtcy5USUxFU19QRVJfRURHRSA9IHRvcE9iamVjdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IC8vIGVuZCBpZiAodG9wT2JqZWN0W3RvcE9iamVjdC5sZW5ndGgtMV0gPT0gOTAwMCkgewogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICBpZiAod2luZG93Lm5pYW50aWNfcGFyYW1zLkNVUlJFTlRfVkVSU0lPTiA9PT0gdW5kZWZpbmVkKSB7CiAgICB3aW5kb3cuZGlhbG9nKHsKICAgICAgdGl0bGU6ICdJSVRDIEJyb2tlbicsCiAgICAgIGh0bWw6CiAgICAgICAgJzxwPklJVEMgZmFpbGVkIHRvIGV4dHJhY3QgdGhlIHJlcXVpcmVkIHBhcmFtZXRlcnMgZnJvbSB0aGUgaW50ZWwgc2l0ZTwvcD4nICsKICAgICAgICAnPHA+VGhpcyBjYW4gaGFwcGVuIGFmdGVyIE5pYW50aWMgdXBkYXRlIHRoZSBzdGFuZGFyZCBpbnRlbCBzaXRlLiBBIGZpeCB3aWxsIGJlIG5lZWRlZCBmcm9tIHRoZSBJSVRDIGRldmVsb3BlcnMuPC9wPicsCiAgICB9KTsKCiAgICBsb2cubG9nKCdEaXNjb3ZlcmVkIHBhcmFtZXRlcnMnKTsKICAgIGxvZy5sb2coSlNPTi5zdHJpbmdpZnkod2luZG93Lm5pYW50aWNfcGFyYW1zLCBudWxsLCAyKSk7CgogICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvcjogSUlUQyBmYWlsZWQgdG8gZXh0cmFjdCBDVVJSRU5UX1ZFUlNJT04gc3RyaW5nIC0gY2Fubm90IGNvbnRpbnVlJyk7CiAgfQp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogZmlsdGVycy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ2ZpbHRlcnMnKTsKLyogZ2xvYmFsIElJVEMsIEwgKi8KCi8qKgogKiAjIyMgRmlsdGVycyBBUEkKICoKICogRmlsdGVycyBBUEkgaXMgYSBtZWNoYW5pc20gdG8gaGlkZSBpbnRlbCBlbnRpdGllcyB1c2luZyB0aGVpciBwcm9wZXJ0aWVzIChmYWN0aW9uLAogKiBoZWFsdGgsIHRpbWVzdGFtcC4uLikuIEl0IHByb3ZpZGVzIHR3byBsZXZlbCBBUElzOiBhIHNldCBvZiBuYW1lZCBmaWx0ZXJzIHRoYXQKICogYXBwbHkgZ2xvYmFsbHkgKGFueSBlbnRpdHkgbWF0Y2hpbmcgb25lIG9mIHRoZSBmaWx0ZXJzIHdpbGwgYmUgaGlkZGVuKSwgYW5kIGxvdwogKiBsZXZlbCBBUEkgdG8gdGVzdCBhbiBlbnRpdHkgYWdhaW5zdCBhIGZpbHRlciBmb3IgZ2VuZXJpYyBwdXJwb3NlLgogKiBUaGlzIGNvbWVzIHdpdGggYSBMZWFmbGV0IGxheWVyIHN5c3RlbSBmb2xsb3dpbmcgdGhlIG9sZCBsYXllciBzeXN0ZW0sIHRoZSBmaWx0ZXIKICogaXMgZGlzYWJsZWQgd2hlbiB0aGUgbGF5ZXIgaXMgYWRkZWQgdG8gdGhlIG1hcCBhbmQgaXMgZW5hYmxlZCB3aGVuIHJlbW92ZWQuCiAqCiAqIEEgZmlsdGVyIGFwcGxpZXMgdG8gYSBjb21iaW5haXNvbiBvZiBwb3J0YWwvbGluay9maWVsZCBhbmQgaXMgZGVzY3JpYmVkIGJ5CiAqICAtIGRhdGEgcHJvcGVydGllcyB0aGF0IG11c3QgKGFsbCkgbWF0Y2gKICogIC0gb3IgYSBwcmVkaWNhdGUgZm9yIGNvbXBsZXggZmlsdGVyCiAqCiAqICAgYHsgcG9ydGFsOiB0cnVlLCBsaW5rOiB0cnVlLCBkYXRhOiB7IHRlYW06ICdFJyB9fWAKICogICAgICAgZmlsdGVycyBhbnkgRU5MIHBvcnRhbC9saW5rCiAqCiAqICAgYFt7IGxpbms6IHRydWUsIGRhdGE6IHsgb0d1aWQ6ICJzb21lIGd1aWQiIH19LCB7IGxpbms6IHRydWUsIGRhdGE6IHsgZEd1aWQ6ICJzb21lIGd1aWQiIH19XWAKICogICAgICAgZmlsdGVycyBhbnkgbGlua3Mgb24gcG9ydGFsIHdpdGggZ3VpZCAic29tZSBndWlkIgogKgogKiAgIGB7IGZpZWxkOiB0cnVlLCBwcmVkOiBmdW5jdGlvbiAoZikgeyByZXR1cm4gZi5vcHRpb25zLnRpbWVzdGFtcCA8IERhdGUucGFyc2UoJzIwMjEtMTAtMzEnKTsgfSB9YAogKiAgICAgICBmaWx0ZXJzIGFueSBmaWVsZHMgbWFkZSBiZWZvcmUgSGFsbG93ZWVuIDIwMjEKICoKICogRGF0YSBwcm9wZXJ0aWVzIGNhbiBiZSBzcGVjaWZpZWQgYXMgdmFsdWUsIG9yIGFzIGEgY29tcGxleCBleHByZXNzaW9uIChyZXF1aXJlZAogKiBmb3IgYXJyYXkgZGF0YSBwcm9wZXJ0aWVzKS4gQSBjb21wbGV4IGV4cHJlc3Npb24gaXMgYSAyLWFycmF5LCBmaXJzdCBlbGVtZW50IGlzCiAqIGFuIG9wZXJhdG9yLCBzZWNvbmQgaXMgdGhlIGFyZ3VtZW50IG9mIHRoZSBvcGVyYXRvciBmb3IgdGhlIHByb3BlcnR5LgogKiBUaGUgb3BlcmF0b3JzIGFyZToKICogIC0gYFsnZXEnLCB2YWx1ZV1gIDogdGhpcyBpcyBlcXVpdmFsZW50IHRvIHR5cGUgZGlyZWN0bHkgYHZhbHVlYAogKiAgLSBgWydub3QnLCBdYAogKiAgLSBgWydvcicsIFtleHAxLCBleHAyLC4uLl1dYDogdGhlIGV4cHJlc3Npb24gbWF0Y2hlcyBpZiBvbmUgb2YgdGhlIGV4cDEuLiBtYXRjaGVzCiAqICAtIGBbJ2FuZCcsIFtleHAxLCBleHAyLi4uXV1gOiBtYXRjaGVzIGlmIGFsbCBleHAxIG1hdGNoZXMgKHVzZWZ1bCBmb3IgYXJyYXkKICogICBwcm9wZXJ0aWVzKQogKiAgLSBgWydzb21lJywgZXhwXWA6IHdoZW4gdGhlIHByb3BlcnR5IGlzIGFuIGFycmF5LCBtYXRjaGVzIGlmIG9uZSBvZiB0aGUgZWxlbWVudAogKiAgIG1hdGNoZXMgYGV4cGAKICogIC0gYFsnZXZlcnknLCBleHBdYDogYWxsIGVsZW1lbnRzIG11c3QgbWF0Y2ggYGV4cGAKICogIC0gYFsnPCcsIG51bWJlcl1gOiBmb3IgbnVtYmVyIGNvbXBhcmlzb24gKGFuZCA8PSA+ID49KQogKgogKiBFeGFtcGxlczoKICoKICogICBgeyBwb3J0YWw6IHRydWUsIGRhdGE6ICBbJ25vdCcsIHsgaGlzdG9yeTogeyBzY291dENvbnRyb2xsZWQ6IGZhbHNlIH0sIG9ybmFtZW50czoKICogICBbJ3NvbWUnLCAnc2M1X3AnXSB9XSB9YAogKiAgICAgICBmaWx0ZXJzIGFsbCBwb3J0YWxzIGJ1dCB0aGUgb25lIG5ldmVyIHNjb3V0IGNvbnRyb2xsZWQgdGhhdCBoYXZlIGEgc2NvdXQKICogICAgICAgdm9sYXRpbGUgb3JuYW1lbnQKICoKICogICBgeyBwb3J0YWw6IHRydWUsIGRhdGE6IFsnbm90JywgeyByZXNvbmF0b3JzOiBbJ2V2ZXJ5JywgeyBvd25lcjogJ3NvbWUgYWdlbnQnIH0gXSB9IF0gfWAKICogICAgICAgZmlsdGVycyBhbGwgcG9ydGFscyB0aGF0IGhhdmUgcmVzb25hdG9ycyBub3Qgb3duZWQgZnJvbSAnc29tZSBhZ2VudCcKICogICAgICAgKG5vdGU6IHRoYXQgd291bGQgbmVlZCB0byBsb2FkIHBvcnRhbCBkZXRhaWxzKQogKgogKiAgIGB7IHBvcnRhbDogdHJ1ZSwgZGF0YTogeyBsZXZlbDogWydvcicsIFsxLDQsNV1dLCBoZWFsdGg6IFsnPicsIDg1XSB9IH1gCiAqICAgICAgIGZpbHRlcnMgYWxsIHBvcnRhbHMgd2l0aCBsZXZlbCAxLDQgb3IgNSBhbmQgaGVhbHRoIG92ZXIgODUKICoKICogICBgeyBwb3J0YWw6IHRydWUsIGxpbms6IHRydWUsIGZpZWxkOiB0cnVlLCBvcHRpb25zOiB7IHRpbWVzdGFtcDogWyc8JywKICogICBEYXRlLm5vdygpIC0gMzYwMDAwMF0gfSB9YAogKiAgICAgICBmaWx0ZXJzIGFsbCBlbnRpdGllcyB3aXRoIG5vIGNoYW5nZSBzaW5jZSAxIGhvdXIgKGZyb20gdGhlIGNyZWF0aW9uIG9mCiAqICAgICAgIHRoZSBmaWx0ZXIpCiAqCiAqIEBtZW1iZXJvZiBJSVRDCiAqIEBuYW1lc3BhY2UgZmlsdGVycwogKi8KCklJVEMuZmlsdGVycyA9IHt9OwovKioKICogQHR5cGUge09iamVjdC48c3RyaW5nLCBJSVRDLmZpbHRlcnMuRmlsdGVyRGVzYz59CiAqLwpJSVRDLmZpbHRlcnMuX2ZpbHRlcnMgPSB7fTsKCi8qKgogKiBAbWVtYmVyb2YgSUlUQy5maWx0ZXJzCiAqIEBjYWxsYmFjayBGaWx0ZXJQcmVkaWNhdGUKICogQHBhcmFtIHtPYmplY3R9IGVudCAtIElJVEMgZW50aXR5CiAqIEByZXR1cm5zIHtib29sZWFufQogKi8KCi8qKgogKiBAbWVtYmVyb2YgSUlUQy5maWx0ZXJzCiAqIEB0eXBlZGVmIEZpbHRlckRlc2MKICogQHR5cGUge29iamVjdH0KICogQHByb3BlcnR5IHtib29sZWFufSBmaWx0ZXJEZXNjLnBvcnRhbCAgICAgICAgIGFwcGx5IHRvIHBvcnRhbAogKiBAcHJvcGVydHkge2Jvb2xlYW59IGZpbHRlckRlc2MubGluayAgICAgICAgICAgYXBwbHkgdG8gbGluawogKiBAcHJvcGVydHkge2Jvb2xlYW59IGZpbHRlckRlc2MuZmllbGQgICAgICAgICAgYXBwbHkgdG8gZmllbGQKICogQHByb3BlcnR5IHtvYmplY3R9IFtmaWx0ZXJEZXNjLmRhdGFdICAgICAgICAgIGVudGl0eSBkYXRhIHByb3BlcnRpZXMgdGhhdCBtdXN0IG1hdGNoCiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmlsdGVyRGVzYy5vcHRpb25zXSAgICAgICBlbnRpdHkgb3B0aW9ucyB0aGF0IG11c3QgbWF0Y2gKICogQHByb3BlcnR5IHtJSVRDLmZpbHRlcnMuRmlsdGVyUHJlZGljYXRlfSBbZmlsdGVyRGVzYy5wcmVkXSBwcmVkaWNhdGUgb24gdGhlIGVudGl0eQogKi8KCi8qKgogKiBTZXRzIG9yIHVwZGF0ZXMgYSBmaWx0ZXIgd2l0aCBhIGdpdmVuIG5hbWUuIElmIGEgZmlsdGVyIHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cywgaXQgaXMgb3ZlcndyaXR0ZW4uCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyIG5hbWUKICogQHBhcmFtIHtJSVRDLmZpbHRlcnMuRmlsdGVyRGVzYyB8IElJVEMuZmlsdGVycy5GaWx0ZXJEZXNjW119IGZpbHRlckRlc2MgICAgIGZpbHRlciBkZXNjcmlwdGlvbiAoT1IpCiAqLwpJSVRDLmZpbHRlcnMuc2V0ID0gZnVuY3Rpb24gKG5hbWUsIGZpbHRlckRlc2MpIHsKICBJSVRDLmZpbHRlcnMuX2ZpbHRlcnNbbmFtZV0gPSBmaWx0ZXJEZXNjOwp9OwoKLyoqCiAqIENoZWNrcyBpZiBhIGZpbHRlciB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZSBleGlzdHMuCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpbHRlciB0byBjaGVjay4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGZpbHRlciBleGlzdHMsIGZhbHNlIG90aGVyd2lzZS4KICovCklJVEMuZmlsdGVycy5oYXMgPSBmdW5jdGlvbiAobmFtZSkgewogIHJldHVybiBuYW1lIGluIElJVEMuZmlsdGVycy5fZmlsdGVyczsKfTsKCi8qKgogKiBSZW1vdmVzIGEgZmlsdGVyIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLgogKgogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBmaWx0ZXIgdG8gYmUgcmVtb3ZlZC4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGZpbHRlciB3YXMgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQsIGZhbHNlIG90aGVyd2lzZS4KICovCklJVEMuZmlsdGVycy5yZW1vdmUgPSBmdW5jdGlvbiAobmFtZSkgewogIHJldHVybiBkZWxldGUgSUlUQy5maWx0ZXJzLl9maWx0ZXJzW25hbWVdOwp9OwoKZnVuY3Rpb24gY29tcGFyZVZhbHVlKGNvbnN0cmFpbnQsIHZhbHVlKSB7CiAgaWYgKGNvbnN0cmFpbnQgaW5zdGFuY2VvZiBBcnJheSkgcmV0dXJuIGZhbHNlOwogIC8vIGFycmF5IG11c3QgYmUgaGFuZGxlZCBieSAic29tZSIgb3IgImV2ZXJ5IgogIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSByZXR1cm4gZmFsc2U7CiAgaWYgKGNvbnN0cmFpbnQgaW5zdGFuY2VvZiBPYmplY3QpIHsKICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSkgcmV0dXJuIGZhbHNlOwogICAgLy8gaW1wbGljaXQgQU5EIG9uIG9iamVjdCBwcm9wZXJ0aWVzCiAgICBmb3IgKGNvbnN0IHByb3AgaW4gY29uc3RyYWludCkgewogICAgICBpZiAoIWdlbmVyaWNDb21wYXJlKGNvbnN0cmFpbnRbcHJvcF0sIHZhbHVlW3Byb3BdKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQogIHJldHVybiBjb25zdHJhaW50ID09PSB2YWx1ZTsKfQoKZnVuY3Rpb24gY29tcGFyZU51bWJlcihjb25zdHJhaW50LCB2YWx1ZSkgewogIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7CiAgaWYgKHR5cGVvZiBjb25zdHJhaW50WzFdICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlOwogIGNvbnN0IHYgPSBjb25zdHJhaW50WzFdOwogIHN3aXRjaCAoY29uc3RyYWludFswXSkgewogICAgY2FzZSAnPT0nOgogICAgICByZXR1cm4gdmFsdWUgPT09IHY7CiAgICBjYXNlICc8JzoKICAgICAgcmV0dXJuIHZhbHVlIDwgdjsKICAgIGNhc2UgJzw9JzoKICAgICAgcmV0dXJuIHZhbHVlIDw9IHY7CiAgICBjYXNlICc+JzoKICAgICAgcmV0dXJuIHZhbHVlID4gdjsKICAgIGNhc2UgJz49JzoKICAgICAgcmV0dXJuIHZhbHVlID49IHY7CiAgfQogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZ2VuZXJpY0NvbXBhcmUoY29uc3RyYWludCwgb2JqZWN0KSB7CiAgaWYgKGNvbnN0cmFpbnQgaW5zdGFuY2VvZiBBcnJheSkgewogICAgaWYgKGNvbnN0cmFpbnQubGVuZ3RoICE9PSAyKSByZXR1cm4gZmFsc2U7CiAgICBjb25zdCBbb3AsIGFyZ3NdID0gY29uc3RyYWludDsKICAgIHN3aXRjaCAob3ApIHsKICAgICAgY2FzZSAnZXEnOgogICAgICAgIHJldHVybiBjb21wYXJlVmFsdWUoYXJncywgb2JqZWN0KTsKICAgICAgY2FzZSAnb3InOgogICAgICAgIGlmIChhcmdzIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHsKICAgICAgICAgICAgaWYgKGdlbmVyaWNDb21wYXJlKGFyZywgb2JqZWN0KSkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgY2FzZSAnYW5kJzoKICAgICAgICBpZiAoYXJncyBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7CiAgICAgICAgICAgIGlmICghZ2VuZXJpY0NvbXBhcmUoYXJnLCBvYmplY3QpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgICBjYXNlICdzb21lJzoKICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIG9iamVjdCkgewogICAgICAgICAgICBpZiAoZ2VuZXJpY0NvbXBhcmUoYXJncywgb2JqKSkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgY2FzZSAnZXZlcnknOgogICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBBcnJheSkgewogICAgICAgICAgZm9yIChjb25zdCBvYmogb2Ygb2JqZWN0KSB7CiAgICAgICAgICAgIGlmICghZ2VuZXJpY0NvbXBhcmUoYXJncywgb2JqKSkgewogICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgY2FzZSAnbm90JzoKICAgICAgICByZXR1cm4gIWdlbmVyaWNDb21wYXJlKGFyZ3MsIG9iamVjdCk7CiAgICAgIGNhc2UgJz09JzoKICAgICAgY2FzZSAnPCc6CiAgICAgIGNhc2UgJzw9JzoKICAgICAgY2FzZSAnPic6CiAgICAgIGNhc2UgJz49JzoKICAgICAgICByZXR1cm4gY29tcGFyZU51bWJlcihjb25zdHJhaW50LCBvYmplY3QpOwogICAgICBkZWZhdWx0OgogICAgICAvLyB1bmtub3duIG9wCiAgICB9CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiBjb21wYXJlVmFsdWUoY29uc3RyYWludCwgb2JqZWN0KTsKfQoKLyoqCiAqIFRlc3RzIHdoZXRoZXIgYSBnaXZlbiBlbnRpdHkgbWF0Y2hlcyBhIHNwZWNpZmllZCBmaWx0ZXIuCiAqCiAqIEBwYXJhbSB7InBvcnRhbCJ8ImxpbmsifCJmaWVsZCJ9IHR5cGUgVHlwZSBvZiB0aGUgZW50aXR5CiAqIEBwYXJhbSB7b2JqZWN0fSBlbnRpdHkgUG9ydGFsL2xpbmsvZmllbGQgdG8gdGVzdAogKiBAcGFyYW0ge0lJVEMuZmlsdGVycy5GaWx0ZXJEZXNjfSBmaWx0ZXIgRmlsdGVyCiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHRoZSBgZW50aXR5YCBvZiB0eXBlIGB0eXBlYCBtYXRjaGVzIHRoZSBgZmlsdGVyYAogKi8KSUlUQy5maWx0ZXJzLnRlc3RGaWx0ZXIgPSBmdW5jdGlvbiAodHlwZSwgZW50aXR5LCBmaWx0ZXIpIHsKICAvLyB0eXBlIG11c3QgbWF0Y2gKICBpZiAoIWZpbHRlclt0eXBlXSkgcmV0dXJuIGZhbHNlOwogIC8vIHVzZSBwcmVkaWNhdGUgaWYgYXZhaWxhYmxlCiAgaWYgKHR5cGVvZiBmaWx0ZXIucHJlZCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZpbHRlci5wcmVkKGVudGl0eSk7CiAgLy8gaWYgZG9lc24ndCBtYXRjaCBkYXRhIGNvbnN0cmFpbnQKICBpZiAoZmlsdGVyLmRhdGEgJiYgIWdlbmVyaWNDb21wYXJlKGZpbHRlci5kYXRhLCBlbnRpdHkub3B0aW9ucy5kYXRhKSkgcmV0dXJuIGZhbHNlOwogIC8vIGlmIGRvZXNuJ3QgbWF0Y2ggb3B0aW9ucwogIGlmIChmaWx0ZXIub3B0aW9ucyAmJiAhZ2VuZXJpY0NvbXBhcmUoZmlsdGVyLm9wdGlvbnMsIGVudGl0eS5vcHRpb25zKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KICAvLyBlbHNlIGl0IG1hdGNoZXMKICByZXR1cm4gdHJ1ZTsKfTsKCmZ1bmN0aW9uIGFycmF5RmlsdGVyKHR5cGUsIGVudGl0eSwgZmlsdGVycykgewogIGlmICghQXJyYXkuaXNBcnJheShmaWx0ZXJzKSkgZmlsdGVycyA9IFtmaWx0ZXJzXTsKICBmaWx0ZXJzID0gZmlsdGVycy5mbGF0KCk7CiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoSUlUQy5maWx0ZXJzLnRlc3RGaWx0ZXIodHlwZSwgZW50aXR5LCBmaWx0ZXJzW2ldKSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CgovKioKICogVGVzdHMgd2hldGhlciBhIGdpdmVuIHBvcnRhbCBtYXRjaGVzIGFueSBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBmaWx0ZXJzLgogKgogKiBAcGFyYW0ge29iamVjdH0gcG9ydGFsIFBvcnRhbCB0byB0ZXN0CiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHRoZSBwb3J0YWwgbWF0Y2hlcyBvbmUgb2YgdGhlIGZpbHRlcnMKICovCklJVEMuZmlsdGVycy5maWx0ZXJQb3J0YWwgPSBmdW5jdGlvbiAocG9ydGFsKSB7CiAgcmV0dXJuIGFycmF5RmlsdGVyKCdwb3J0YWwnLCBwb3J0YWwsIE9iamVjdC52YWx1ZXMoSUlUQy5maWx0ZXJzLl9maWx0ZXJzKSk7Cn07CgovKioKICogVGVzdHMgd2hldGhlciBhIGdpdmVuIGxpbmsgbWF0Y2hlcyBhbnkgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgZmlsdGVycy4KICoKICogQHBhcmFtIHtvYmplY3R9IGxpbmsgTGluayB0byB0ZXN0CiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHRoZSBsaW5rIG1hdGNoZXMgb25lIG9mIHRoZSBmaWx0ZXJzCiAqLwpJSVRDLmZpbHRlcnMuZmlsdGVyTGluayA9IGZ1bmN0aW9uIChsaW5rKSB7CiAgcmV0dXJuIGFycmF5RmlsdGVyKCdsaW5rJywgbGluaywgT2JqZWN0LnZhbHVlcyhJSVRDLmZpbHRlcnMuX2ZpbHRlcnMpKTsKfTsKCi8qKgogKiBUZXN0cyB3aGV0aGVyIGEgZ2l2ZW4gZmllbGQgbWF0Y2hlcyBhbnkgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgZmlsdGVycy4KICoKICogQHBhcmFtIHtvYmplY3R9IGZpZWxkIEZpZWxkIHRvIHRlc3QKICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdGhlIGZpZWxkIG1hdGNoZXMgb25lIG9mIHRoZSBmaWx0ZXJzCiAqLwpJSVRDLmZpbHRlcnMuZmlsdGVyRmllbGQgPSBmdW5jdGlvbiAoZmllbGQpIHsKICByZXR1cm4gYXJyYXlGaWx0ZXIoJ2ZpZWxkJywgZmllbGQsIE9iamVjdC52YWx1ZXMoSUlUQy5maWx0ZXJzLl9maWx0ZXJzKSk7Cn07CgovKioKICogQXBwbGllcyBhbGwgZXhpc3RpbmcgZmlsdGVycyB0byB0aGUgZW50aXRpZXMgKHBvcnRhbHMsIGxpbmtzLCBhbmQgZmllbGRzKSBvbiB0aGUgbWFwLgogKiBFbnRpdGllcyB0aGF0IG1hdGNoIGFueSBvZiB0aGUgYWN0aXZlIGZpbHRlcnMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgbWFwOyBvdGhlcnMgYXJlIGFkZGVkIG9yIHJlbWFpbiBvbiB0aGUgbWFwLgogKi8KSUlUQy5maWx0ZXJzLmZpbHRlckVudGl0aWVzID0gZnVuY3Rpb24gKCkgewogIGZvciAoY29uc3QgZ3VpZCBpbiB3aW5kb3cucG9ydGFscykgewogICAgY29uc3QgcCA9IHdpbmRvdy5wb3J0YWxzW2d1aWRdOwogICAgaWYgKElJVEMuZmlsdGVycy5maWx0ZXJQb3J0YWwocCkpIHAucmVtb3ZlKCk7CiAgICBlbHNlIHAuYWRkVG8od2luZG93Lm1hcCk7CiAgfQogIGZvciAoY29uc3QgZ3VpZCBpbiB3aW5kb3cubGlua3MpIHsKICAgIGNvbnN0IGxpbmsgPSB3aW5kb3cubGlua3NbZ3VpZF07CiAgICBpZiAoSUlUQy5maWx0ZXJzLmZpbHRlckxpbmsobGluaykpIGxpbmsucmVtb3ZlKCk7CiAgICBlbHNlIGxpbmsuYWRkVG8od2luZG93Lm1hcCk7CiAgfQogIGZvciAoY29uc3QgZ3VpZCBpbiB3aW5kb3cuZmllbGRzKSB7CiAgICBjb25zdCBmaWVsZCA9IHdpbmRvdy5maWVsZHNbZ3VpZF07CiAgICBpZiAoSUlUQy5maWx0ZXJzLmZpbHRlckZpZWxkKGZpZWxkKSkgZmllbGQucmVtb3ZlKCk7CiAgICBlbHNlIGZpZWxkLmFkZFRvKHdpbmRvdy5tYXApOwogIH0KfTsKCi8qKgogKiBAbWVtYmVyb2YgSUlUQy5maWx0ZXJzCiAqIEBjbGFzcyBGaWx0ZXJMYXllcgogKiBAZGVzY3JpcHRpb24gTGF5ZXIgYWJzdHJhY3Rpb24gdG8gY29udHJvbCB3aXRoIHRoZSBsYXllciBjaG9vc2VyIGEgZmlsdGVyLgogKiAgICAgICAgICAgICAgVGhlIGZpbHRlciBpcyBkaXNhYmxlZCBvbiBsYXllciBhZGQsIGFuZCBlbmFibGVkIG9uIGxheWVyIHJlbW92ZS4KICogQGV4dGVuZHMgTC5MYXllcgogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGZpbHRlciBsYXllcgogKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpbHRlcgogKiBAcGFyYW0ge0lJVEMuZmlsdGVycy5GaWx0ZXJEZXNjfSBvcHRpb25zLmZpbHRlciAtIFRoZSBmaWx0ZXIgZGVzY3JpcHRpb24KICovCklJVEMuZmlsdGVycy5GaWx0ZXJMYXllciA9IEwuTGF5ZXIuZXh0ZW5kKHsKICBvcHRpb25zOiB7CiAgICBuYW1lOiBudWxsLAogICAgZmlsdGVyOiB7fSwKICB9LAoKICBpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykgewogICAgTC5zZXRPcHRpb25zKHRoaXMsIG9wdGlvbnMpOwogICAgSUlUQy5maWx0ZXJzLnNldCh0aGlzLm9wdGlvbnMubmFtZSwgdGhpcy5vcHRpb25zLmZpbHRlcik7CiAgfSwKCiAgb25BZGQ6IGZ1bmN0aW9uICgpIHsKICAgIElJVEMuZmlsdGVycy5yZW1vdmUodGhpcy5vcHRpb25zLm5hbWUpOwogICAgSUlUQy5maWx0ZXJzLmZpbHRlckVudGl0aWVzKCk7CiAgfSwKCiAgb25SZW1vdmU6IGZ1bmN0aW9uICgpIHsKICAgIElJVEMuZmlsdGVycy5zZXQodGhpcy5vcHRpb25zLm5hbWUsIHRoaXMub3B0aW9ucy5maWx0ZXIpOwogICAgSUlUQy5maWx0ZXJzLmZpbHRlckVudGl0aWVzKCk7CiAgfSwKfSk7CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBnYW1lX3N0YXR1cy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ2dhbWVfc3RhdHVzJyk7Ci8qIGdsb2JhbCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgQ29udGFpbnMgZnVuY3Rpb25zIHJlbGF0ZWQgdG8gdXBkYXRpbmcgYW5kIGRpc3BsYXlpbmcgdGhlIGN1cnJlbnQgTWluZFVuaXQgc2NvcmVzIGluIHRoZSBnYW1lLgogKiBUaGUgTWluZFVuaXQgc2NvcmVzIHJlcHJlc2VudCB0aGUgY3VycmVudCBnbG9iYWwgc2NvcmUgZm9yIGVhY2ggZmFjdGlvbiBpbiBJbmdyZXNzLgogKiBAbW9kdWxlIGdhbWVfc3RhdHVzCiAqLwoKLyoqCiAqIFVwZGF0ZXMgdGhlIGdhbWUgc2NvcmUgZGlzcGxheWVkIG9uIHRoZSBtYXAuCiAqIFRoaXMgZnVuY3Rpb24gcXVlcmllcyB0aGUgY3VycmVudCBnbG9iYWwgTWluZFVuaXQgc2NvcmUgZm9yIGVhY2ggZmFjdGlvbiBmcm9tIHRoZSBJbmdyZXNzIHNlcnZlcnMKICogYW5kIHVwZGF0ZXMgdGhlIGRpc3BsYXkuIFRoZSBzY29yZXMgYXJlIGRpc3BsYXllZCBpbiBhIHBlcmNlbnRhZ2UgZm9ybWF0LCBzaG93aW5nIHRoZSBkb21pbmFuY2Ugb2YgZWFjaCBmYWN0aW9uLgogKiBJZiB0aGUgZGF0YSBpc24ndCBhdmFpbGFibGUsIHRoaXMgZnVuY3Rpb24gYXR0ZW1wdHMgdG8gZmV0Y2ggaXQgZnJvbSB0aGUgc2VydmVyLgogKgogKiBAZnVuY3Rpb24gdXBkYXRlR2FtZVNjb3JlCiAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV0gLSBUaGUgZ2FtZSBzY29yZSBkYXRhIHJldHJpZXZlZCBmcm9tIHRoZSBJbmdyZXNzIHNlcnZlcnMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBub3QgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiB3aWxsIG1ha2UgYSBzZXJ2ZXIgcmVxdWVzdCB0byBmZXRjaCB0aGUgZGF0YS4KICovCndpbmRvdy51cGRhdGVHYW1lU2NvcmUgPSBmdW5jdGlvbiAoZGF0YSkgewogIGlmICghZGF0YSkgewogICAgLy8gbW92ZSB0aGUgcG9zdEFqYXggY2FsbCBvbnRvIGEgdmVyeSBzaG9ydCB0aW1lci4gdGhpcyB3YXksIGlmIGl0IHRocm93cyBhbiBleGNlcHRpb24sIGl0IHdvbid0IHByZXZlbnQgSUlUQyBib290aW5nCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgd2luZG93LnBvc3RBamF4KCdnZXRHYW1lU2NvcmUnLCB7fSwgd2luZG93LnVwZGF0ZUdhbWVTY29yZSk7CiAgICB9LCAxKTsKICAgIHJldHVybjsKICB9CgogIGlmIChkYXRhICYmIGRhdGEucmVzdWx0KSB7CiAgICB2YXIgZSA9IHBhcnNlSW50KGRhdGEucmVzdWx0WzBdKTsgLy8gZW5saWdodGVuZWQgc2NvcmUgaW4gcmVzdWx0WzBdCiAgICB2YXIgciA9IHBhcnNlSW50KGRhdGEucmVzdWx0WzFdKTsgLy8gcmVzaXN0YW5jZSBzY29yZSBpbiByZXN1bHRbMV0KICAgIHZhciBzID0gciArIGU7CiAgICB2YXIgcnAgPSAociAvIHMpICogMTAwLAogICAgICBlcCA9IChlIC8gcykgKiAxMDA7CiAgICByID0gd2luZG93LmRpZ2l0cyhyKTsKICAgIGUgPSB3aW5kb3cuZGlnaXRzKGUpOwogICAgdmFyIHRlYW1JZCA9IHdpbmRvdy50ZWFtU3RyaW5nVG9JZCh3aW5kb3cuUExBWUVSLnRlYW0pOwogICAgdmFyIHJzID0gJzxzcGFuIGNsYXNzPSJyZXMiIHN0eWxlPSJ3aWR0aDonICsgcnAgKyAnJTt0ZXh0LWFsaWduOiAnICsgKHRlYW1JZCA9PT0gd2luZG93LlRFQU1fUkVTID8gJ3JpZ2h0JyA6ICdsZWZ0JykgKyAnOyI+JyArIE1hdGgucm91bmQocnApICsgJyU8L3NwYW4+JzsKICAgIHZhciBlcyA9ICc8c3BhbiBjbGFzcz0iZW5sIiBzdHlsZT0id2lkdGg6JyArIGVwICsgJyU7dGV4dC1hbGlnbjogJyArICh0ZWFtSWQgPT09IHdpbmRvdy5URUFNX0VOTCA/ICdyaWdodCcgOiAnbGVmdCcpICsgJzsiPicgKyBNYXRoLnJvdW5kKGVwKSArICclPC9zcGFuPic7CiAgICB2YXIgZ2FtZXN0YXRFbGVtZW50ID0gJCgnI2dhbWVzdGF0Jyk7CiAgICBnYW1lc3RhdEVsZW1lbnQuaHRtbCh0ZWFtSWQgPT09IHdpbmRvdy5URUFNX1JFUyA/IHJzICsgZXMgOiBlcyArIHJzKS5vbmUoJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cudXBkYXRlR2FtZVNjb3JlKCk7CiAgICB9KTsKICAgIC8vIGhlbHAgY3Vyc29yIHZpYSDigJwjZ2FtZXN0YXQgc3BhbuKAnQogICAgdmFyIHJlc011ID0gJ1Jlc2lzdGFuY2U6XHQnICsgciArICcgTWluZFVuaXRzJzsKICAgIHZhciBlbmxNdSA9ICdFbmxpZ2h0ZW5lZDpcdCcgKyBlICsgJyBNaW5kVW5pdHMnOwogICAgZ2FtZXN0YXRFbGVtZW50LmF0dHIoJ3RpdGxlJywgdGVhbUlkID09PSB3aW5kb3cuVEVBTV9SRVMgPyByZXNNdSArICdcbicgKyBlbmxNdSA6IGVubE11ICsgJ1xuJyArIHJlc011KTsKICB9IGVsc2UgaWYgKGRhdGEgJiYgZGF0YS5lcnJvcikgewogICAgbG9nLndhcm4oJ2dhbWUgc2NvcmUgZmFpbGVkIHRvIGxvYWQ6ICcgKyBkYXRhLmVycm9yKTsKICB9IGVsc2UgewogICAgbG9nLndhcm4oJ2dhbWUgc2NvcmUgZmFpbGVkIHRvIGxvYWQgLSB1bmtub3duIHJlYXNvbicpOwogIH0KCiAgLy8gVE9ETzogaWRsZSBoYW5kbGluZyAtIGRvbid0IHJlZnJlc2ggd2hlbiBJSVRDIGlzIGlkbGUhCiAgd2luZG93LnNldFRpbWVvdXQoJ3dpbmRvdy51cGRhdGVHYW1lU2NvcmUnLCB3aW5kb3cuUkVGUkVTSF9HQU1FX1NDT1JFICogMTAwMCk7Cn07CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBob29rcy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ2hvb2tzJyk7Ci8qIGdsb2JhbCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgUGx1Z2luIGhvb2tzIGZvciBJSVRDLiBUaGlzIGZpbGUgZGVmaW5lcyB0aGUgaW5mcmFzdHJ1Y3R1cmUgZm9yIG1hbmFnaW5nIGFuZCBleGVjdXRpbmcgaG9va3MsCiAqIHdoaWNoIGFyZSB1c2VkIHRvIHRyaWdnZXIgY3VzdG9tIHBsdWdpbiBhY3Rpb25zIGF0IHNwZWNpZmljIHBvaW50cyBpbiB0aGUgYXBwbGljYXRpb24gbGlmZWN5Y2xlLgogKiBQbHVnaW5zIG1heSBsaXN0ZW4gdG8gYW55IG51bWJlciBvZiBldmVudHMgYnkgc3BlY2lmeWluZyB0aGUgbmFtZSBvZiB0aGUgZXZlbnQgYW5kIHByb3ZpZGluZyBhIGZ1bmN0aW9uCiAqIHRvIGV4ZWN1dGUgd2hlbiBhbiBldmVudCBvY2N1cnMuIENhbGxiYWNrcyByZWNlaXZlIGFkZGl0aW9uYWwgZGF0YSBjcmVhdGVkIGJ5IHRoZSBldmVudCBhcyB0aGVpciBmaXJzdCBwYXJhbWV0ZXIuCiAqIFRoZSB2YWx1ZSBpcyBhbHdheXMgYW4gT2JqZWN0IHRoYXQgY29udGFpbnMgbW9yZSBkZXRhaWxzLgogKgogKiBGb3IgZXhhbXBsZSwgdGhpcyBsaW5lIHdpbGwgbGlzdGVuIGZvciBwb3J0YWxzIHRvIGJlIGFkZGVkIGFuZCBwcmludCB0aGUgZGF0YSBnZW5lcmF0ZWQgYnkgdGhlIGV2ZW50IHRvIHRoZSBjb25zb2xlOgogKiBgd2luZG93LmFkZEhvb2soJ3BvcnRhbEFkZGVkJywgZnVuY3Rpb24oZGF0YSkgeyBsb2cubG9nKGRhdGEpIH0pO2AKICoKICogQm9vdCBob29rOiBib290aW5nIGlzIGhhbmRsZWQgZGlmZmVyZW50bHkgYmVjYXVzZSBJSVRDIG1heSBub3QgeWV0IGJlIGF2YWlsYWJsZS4KICogSGF2ZSBhIGxvb2sgYXQgdGhlIHBsdWdpbnMgaW4gcGx1Z2lucy8uIEFsbCBjb2RlIGJlZm9yZSBgLy8gUExVR0lOIFNUQVJUYCBhbmQgYWZ0ZXIgYC8vIFBMVUdJTiBFTkRgIGlzIHJlcXVpcmVkCiAqIHRvIHN1Y2Nlc3NmdWxseSBib290IHRoZSBwbHVnaW4uCiAqCiAqIERlc2NyaXB0aW9uIG9mIGF2YWlsYWJsZSBob29rIGV2ZW50czoKICogLSBgcG9ydGFsU2VsZWN0ZWRgOiBUcmlnZ2VyZWQgd2hlbiBhIHBvcnRhbCBvbiB0aGUgbWFwIGlzIHNlbGVjdGVkIG9yIHVuc2VsZWN0ZWQuCiAqICAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXMgdGhlIEdVSUQgb2YgYm90aCB0aGUgc2VsZWN0ZWQgYW5kIHVuc2VsZWN0ZWQgcG9ydGFsLgogKiAtIGBtYXBEYXRhUmVmcmVzaFN0YXJ0YDogVHJpZ2dlcmVkIGF0IHRoZSBzdGFydCBvZiByZWZyZXNoaW5nIG1hcCBkYXRhLgogKiAtIGBtYXBEYXRhRW50aXR5SW5qZWN0YDogVHJpZ2dlcmVkIGp1c3QgYXMgd2Ugc3RhcnQgdG8gcmVuZGVyIGRhdGEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICBBbGxvd3MgaW5qZWN0aW5nIGNhY2hlZCBlbnRpdGllcyBpbnRvIHRoZSBtYXAgcmVuZGVyLgogKiAtIGBtYXBEYXRhUmVmcmVzaEVuZGA6IFRyaWdnZXJlZCB3aGVuIHRoZSBtYXAgZGF0YSBsb2FkIGlzIGNvbXBsZXRlLgogKiAtIGBwb3J0YWxBZGRlZGA6IFRyaWdnZXJlZCB3aGVuIGEgcG9ydGFsIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBpcyBhYm91dCB0byBiZSBhZGRlZCB0byBpdHMgbGF5ZXIgZ3JvdXAuCiAqICAgICAgICAgICAgICAgICAgRG9lcyBub3QgZ3VhcmFudGVlIHRoZSBwb3J0YWwgd2lsbCBiZSB2aXNpYmxlIG9yIHNob3duIHNvb24uCiAqICAgICAgICAgICAgICAgICAgUG9ydGFscyBhZGRlZCB0byBoaWRkZW4gbGF5ZXJzIG1heSBuZXZlciBiZSBzaG93bi4KICogICAgICAgICAgICAgICAgICBJbmplY3Rpb24gcG9pbnQgaXMgaW4gYGNvZGUvbWFwX2RhdGEuanMjcmVuZGVyUG9ydGFsYCBuZWFyIHRoZSBlbmQuCiAqICAgICAgICAgICAgICAgICAgUHJvdmlkZXMgdGhlIExlYWZsZXQgQ2lyY2xlTWFya2VyIGZvciB0aGUgcG9ydGFsIGluIHRoZSAicG9ydGFsIiB2YXJpYWJsZS4KICogLSBgbGlua0FkZGVkYDogVHJpZ2dlcmVkIHdoZW4gYSBsaW5rIGlzIGFib3V0IHRvIGJlIGFkZGVkIHRvIHRoZSBtYXAuCiAqIC0gYGZpZWxkQWRkZWRgOiBUcmlnZ2VyZWQgd2hlbiBhIGZpZWxkIGlzIGFib3V0IHRvIGJlIGFkZGVkIHRvIHRoZSBtYXAuCiAqIC0gYHBvcnRhbFJlbW92ZWRgOiBUcmlnZ2VyZWQgd2hlbiBhIHBvcnRhbCBoYXMgYmVlbiByZW1vdmVkLgogKiAtIGBsaW5rUmVtb3ZlZGA6IFRyaWdnZXJlZCB3aGVuIGEgbGluayBoYXMgYmVlbiByZW1vdmVkLgogKiAtIGBmaWVsZFJlbW92ZWRgOiBUcmlnZ2VyZWQgd2hlbiBhIGZpZWxkIGhhcyBiZWVuIHJlbW92ZWQuCiAqIC0gYHBvcnRhbERldGFpbHNVcGRhdGVkYDogRmlyZWQgYWZ0ZXIgdGhlIGRldGFpbHMgaW4gdGhlIHNpZGViYXIgaGF2ZSBiZWVuIChyZS0pcmVuZGVyZWQuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvdmlkZXMgZGF0YSBhYm91dCB0aGUgc2VsZWN0ZWQgcG9ydGFsLgogKiAtIGBjb21tRGF0YUF2YWlsYWJsZWA6IFJ1bnMgYWZ0ZXIgZGF0YSBmb3IgYW55IG9mIHRoZSBjaGF0cyBoYXMgYmVlbiByZWNlaXZlZCBhbmQgcHJvY2Vzc2VkLCBidXQgbm90IHlldAogKiAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gZGlzcGxheWVkLiBUaGUgZGF0YSBoYXNoIGNvbnRhaW5zIGJvdGggdGhlIHVucHJvY2Vzc2VkIHJhdyBhamF4IHJlc3BvbnNlIGFzCiAqICAgICAgICAgICAgICAgICAgICAgICAgd2VsbCBhcyB0aGUgY2hhdCBkYXRhIHRoYXQgaXMgZ29pbmcgdG8gYmUgdXNlZCBmb3IgZGlzcGxheS4KICogLSBgcHVibGljQ2hhdERhdGFBdmFpbGFibGVgOiBTaW1pbGFyIHRvIGBjaGF0RGF0YUF2YWlsYWJsZWAsIGJ1dCBmb3IgYWxsIGNoYXQgb25seS4KICogLSBgZmFjdGlvbkNoYXREYXRhQXZhaWxhYmxlYDogU2ltaWxhciB0byBgcHVibGljQ2hhdERhdGFBdmFpbGFibGVgLCBidXQgZm9yIGZhY3Rpb24gY2hhdC4KICogLSBgYWxlcnRzQ2hhdERhdGFBdmFpbGFibGVgOiBTaW1pbGFyIHRvIGBwdWJsaWNDaGF0RGF0YUF2YWlsYWJsZWAsIGJ1dCBmb3IgYWxlcnRzIGNoYXQuCiAqIC0gYHJlcXVlc3RGaW5pc2hlZGA6ICoqRGVwcmVjYXRlZCoqLiBSZWNvbW1lbmRlZCB0byB1c2UgYG1hcERhdGFSZWZyZXNoRW5kYCBpbnN0ZWFkLgogKiAgICAgICAgICAgICAgICAgICAgICBDYWxsZWQgYWZ0ZXIgZWFjaCBtYXAgZGF0YSByZXF1ZXN0IGlzIGZpbmlzaGVkLiBBcmd1bWVudCBpcyB7c3VjY2VzczogYm9vbGVhbn0uCiAqIC0gYGlpdGNMb2FkZWRgOiBDYWxsZWQgYWZ0ZXIgSUlUQyBhbmQgYWxsIHBsdWdpbnMgaGF2ZSBsb2FkZWQuCiAqIC0gYHBvcnRhbERldGFpbExvYWRlZGA6IENhbGxlZCB3aGVuIGEgcmVxdWVzdCB0byBsb2FkIGZ1bGwgcG9ydGFsIGRldGFpbCBjb21wbGV0ZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmFtZXRlcnMgYXJlIGd1aWQsIHN1Y2Nlc3MsIGRldGFpbHMuCiAqIC0gYHBhbmVDaGFuZ2VkYDogQ2FsbGVkIHdoZW4gdGhlIGN1cnJlbnQgcGFuZSBoYXMgY2hhbmdlZC4gT24gZGVza3RvcCwgdGhpcyBjaGFuZ2VzIHRoZSBjdXJyZW50IGNoYXQgcGFuZTsKICogICAgICAgICAgICAgICAgICBvbiBtb2JpbGUsIGl0IGFsc28gc3dpdGNoZXMgYmV0d2VlbiBtYXAsIGluZm8sIGFuZCBvdGhlciBwYW5lcyBkZWZpbmVkIGJ5IHBsdWdpbnMuCiAqIC0gYGFydGlmYWN0c1VwZGF0ZWRgOiBDYWxsZWQgd2hlbiB0aGUgc2V0IG9mIGFydGlmYWN0cyAoaW5jbHVkaW5nIHRhcmdldHMpIGhhcyBjaGFuZ2VkLgogKiAgICAgICAgICAgICAgICAgICAgICAgUGFyYW1ldGVycyBhcmUgb2xkLCBuZXcuCiAqIC0gYG5pY2tuYW1lQ2xpY2tlZGA6IEV2ZW50IHRyaWdnZXJlZCB3aGVuIGEgcGxheWVyJ3Mgbmlja25hbWUgaXMgY2xpY2tlZC4KICogLSBgZ2VvU2VhcmNoYDogRXZlbnQgdHJpZ2dlcmVkIGR1cmluZyBhIGdlb2dyYXBoaWMgc2VhcmNoLgogKiAtIGBzZWFyY2hgOiBFdmVudCB0cmlnZ2VyZWQgZHVyaW5nIGEgc2VhcmNoIG9wZXJhdGlvbi4KICoKICogQG1vZHVsZSBob29rcwogKi8KCndpbmRvdy5faG9va3MgPSB7fTsKd2luZG93LlZBTElEX0hPT0tTID0gW107IC8vIHN0dWIgZm9yIGNvbXBhdGliaWxpdHkKCnZhciBpc1J1bm5pbmcgPSAwOwoKLyoqCiAqIEV4ZWN1dGVzIGFsbCBjYWxsYmFja3MgYXNzb2NpYXRlZCB3aXRoIGEgZ2l2ZW4gaG9vayBldmVudC4KICoKICogQGZ1bmN0aW9uIHJ1bkhvb2tzCiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIFRoZSBuYW1lIG9mIHRoZSBob29rIGV2ZW50LgogKiBAcGFyYW0ge09iamVjdH0gW2RhdGFdIC0gQWRkaXRpb25hbCBkYXRhIHRvIHBhc3MgdG8gZWFjaCBjYWxsYmFjay4KICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYCBpZiB0aGUgZXhlY3V0aW9uIG9mIHRoZSBjYWxsYmFja3Mgd2FzIGludGVycnVwdGVkLCBvdGhlcndpc2UgYHRydWVgLgogKi8Kd2luZG93LnJ1bkhvb2tzID0gZnVuY3Rpb24gKGV2ZW50LCBkYXRhKSB7CiAgaWYgKCF3aW5kb3cuX2hvb2tzW2V2ZW50XSkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIHZhciBpbnRlcnJ1cHRlZCA9IGZhbHNlOwogIGlzUnVubmluZysrOwogICQuZWFjaCh3aW5kb3cuX2hvb2tzW2V2ZW50XSwgZnVuY3Rpb24gKGluZCwgY2FsbGJhY2spIHsKICAgIHRyeSB7CiAgICAgIGlmIChjYWxsYmFjayhkYXRhKSA9PT0gZmFsc2UpIHsKICAgICAgICBpbnRlcnJ1cHRlZCA9IHRydWU7CiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBicmVhayBmcm9tICQuZWFjaAogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGxvZy5lcnJvcignZXJyb3IgcnVubmluZyBob29rICcgKyBldmVudCwgJ1xuJyArIGUsICdcbmNhbGxiYWNrOiAnLCBjYWxsYmFjaywgJ1xuZGF0YTogJywgZGF0YSk7CiAgICB9CiAgfSk7CiAgaXNSdW5uaW5nLS07CiAgcmV0dXJuICFpbnRlcnJ1cHRlZDsKfTsKCndpbmRvdy5wbHVnaW5DcmVhdGVIb29rID0gZnVuY3Rpb24gKCkge307IC8vIHN0dWIgZm9yIGNvbXBhdGliaWxpdHkKCi8qKgogKiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiBmb3IgYSBzcGVjaWZpZWQgaG9vayBldmVudC4KICoKICogQGZ1bmN0aW9uIGFkZEhvb2sKICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gVGhlIG5hbWUgb2YgdGhlIGhvb2sgZXZlbnQuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZC4KICovCndpbmRvdy5hZGRIb29rID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykgewogIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHsKICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLicpOwogIH0KCiAgaWYgKCF3aW5kb3cuX2hvb2tzW2V2ZW50XSkgewogICAgd2luZG93Ll9ob29rc1tldmVudF0gPSBbY2FsbGJhY2tdOwogIH0gZWxzZSB7CiAgICB3aW5kb3cuX2hvb2tzW2V2ZW50XS5wdXNoKGNhbGxiYWNrKTsKICB9Cn07CgovKioKICogUmVtb3ZlcyBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFjayBmdW5jdGlvbiBmb3IgYSBzcGVjaWZpZWQgaG9vayBldmVudC4KICogQ2FsbGJhY2sgbXVzdCB0aGUgU0FNRSBmdW5jdGlvbiB0byBiZSB1bnJlZ2lzdGVyZWQuCiAqCiAqIEBmdW5jdGlvbiByZW1vdmVIb29rCiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIFRoZSBuYW1lIG9mIHRoZSBob29rIGV2ZW50LgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSByZW1vdmVkLgogKi8Kd2luZG93LnJlbW92ZUhvb2sgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7CiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7CiAgfQoKICB2YXIgbGlzdGVuZXJzID0gd2luZG93Ll9ob29rc1tldmVudF07CiAgaWYgKGxpc3RlbmVycykgewogICAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spOwogICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICBsb2cud2FybigiQ2FsbGJhY2sgd2Fzbid0IHJlZ2lzdGVyZWQgZm9yIHRoaXMgZXZlbnQuIik7CiAgICB9IGVsc2UgewogICAgICBpZiAoaXNSdW5uaW5nKSB7CiAgICAgICAgbGlzdGVuZXJzW2luZGV4XSA9ICQubm9vcDsKICAgICAgICB3aW5kb3cuX2hvb2tzW2V2ZW50XSA9IGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgpOwogICAgICB9CiAgICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpOwogICAgfQogIH0KfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGlkbGUuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdpZGxlJyk7Ci8qIGdsb2JhbCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgQ29udGFpbnMgZnVuY3Rpb25zIGFuZCBsb2dpYyB0byBoYW5kbGUgdGhlIGlkbGUgc3RhdGUgb2YgdGhlIHVzZXIuCiAqIEBtb2R1bGUgaWRsZQogKi8KCi8qKgogKiBUb3RhbCB0aW1lIG9mIHVzZXIgaW5hY3Rpdml0eSBpbiBzZWNvbmRzLgogKgogKiBAbmFtZSBpZGxlVGltZQogKiBAdHlwZSB7bnVtYmVyfQogKi8Kd2luZG93LmlkbGVUaW1lID0gMDsKd2luZG93Ll9pZGxlVGltZUxpbWl0ID0gd2luZG93Lk1BWF9JRExFX1RJTUU7Cgp2YXIgSURMRV9QT0xMX1RJTUUgPSAxMDsKCnZhciBpZGxlUG9sbCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgd2FzSWRsZSA9IHdpbmRvdy5pc0lkbGUoKTsKICB3aW5kb3cuaWRsZVRpbWUgKz0gSURMRV9QT0xMX1RJTUU7CgogIHZhciBoaWRkZW4gPSBkb2N1bWVudC5oaWRkZW4gfHwgZG9jdW1lbnQud2Via2l0SGlkZGVuIHx8IGRvY3VtZW50Lm1vekhpZGRlbiB8fCBkb2N1bWVudC5tc0hpZGRlbiB8fCBmYWxzZTsKICBpZiAoaGlkZGVuKSB7CiAgICB3aW5kb3cuX2lkbGVUaW1lTGltaXQgPSB3aW5kb3cuUkVGUkVTSDsgLy8gc2V0IGEgc21hbGwgdGltZSBsaW1pdCBiZWZvcmUgZW50ZXJpbmcgaWRsZSBtb2RlCiAgfQogIGlmICghd2FzSWRsZSAmJiB3aW5kb3cuaXNJZGxlKCkpIHsKICAgIGxvZy5sb2coJ2lkbGVQb2xsOiBlbnRlcmluZyBpZGxlIG1vZGUnKTsKICB9Cn07CgpzZXRJbnRlcnZhbChpZGxlUG9sbCwgSURMRV9QT0xMX1RJTUUgKiAxMDAwKTsKCi8qKgogKiBSZXNldHMgdGhlIGlkbGUgdGltZXIuIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgYmVjb21lcyBhY3RpdmUgYWZ0ZXIgYmVpbmcgaWRsZS4KICoKICogQGZ1bmN0aW9uIGlkbGVSZXNldAogKi8Kd2luZG93LmlkbGVSZXNldCA9IGZ1bmN0aW9uICgpIHsKICAvLyB1cGRhdGUgaW1tZWRpYXRlbHkgd2hlbiB0aGUgdXNlciBjb21lcyBiYWNrCiAgaWYgKHdpbmRvdy5pc0lkbGUoKSkgewogICAgbG9nLmxvZygnaWRsZVJlc2V0OiBsZWF2aW5nIGlkbGUgbW9kZScpOwogICAgd2luZG93LmlkbGVUaW1lID0gMDsKICAgICQuZWFjaCh3aW5kb3cuX29uUmVzdW1lRnVuY3Rpb25zLCBmdW5jdGlvbiAoaW5kLCBmKSB7CiAgICAgIGYoKTsKICAgIH0pOwogIH0KICB3aW5kb3cuaWRsZVRpbWUgPSAwOwogIHdpbmRvdy5faWRsZVRpbWVMaW1pdCA9IHdpbmRvdy5NQVhfSURMRV9USU1FOwp9OwoKLyoqCiAqIFNldHMgdGhlIGlkbGUgc3RhdGUgaW1tZWRpYXRlbHksIHJlZ2FyZGxlc3Mgb2YgdGhlIGFjdHVhbCBpZGxlIHRpbWUuCiAqCiAqIEBmdW5jdGlvbiBpZGxlU2V0CiAqLwp3aW5kb3cuaWRsZVNldCA9IGZ1bmN0aW9uICgpIHsKICB2YXIgd2FzSWRsZSA9IHdpbmRvdy5pc0lkbGUoKTsKCiAgd2luZG93Ll9pZGxlVGltZUxpbWl0ID0gMDsgLy8gYSB6ZXJvIHRpbWUgaGVyZSB3aWxsIGNhdXNlIGlkbGUgdG8gc3RhcnQgaW1tZWRpYXRlbHkKCiAgaWYgKCF3YXNJZGxlICYmIHdpbmRvdy5pc0lkbGUoKSkgewogICAgbG9nLmxvZygnaWRsZVNldDogZW50ZXJpbmcgaWRsZSBtb2RlJyk7CiAgfQp9OwoKLy8gb25seSByZXNldCBpZGxlIG9uIG1vdXNlIG1vdmUgd2hlcmUgdGhlIGNvb3JkaW5hdGVzIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQuCi8vIHNvbWUgYnJvd3NlcnMgc2VuZCB0aGUgZXZlbnQgd2hlbiBub3QgbW92aW5nIQp2YXIgX2xhc3RNb3VzZVggPSAtMSwKICBfbGFzdE1vdXNlWSA9IC0xOwp2YXIgaWRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIChlKSB7CiAgdmFyIGRYID0gX2xhc3RNb3VzZVggLSBlLmNsaWVudFg7CiAgdmFyIGRZID0gX2xhc3RNb3VzZVkgLSBlLmNsaWVudFk7CiAgdmFyIGRlbHRhU3F1YXJlZCA9IGRYICogZFggKyBkWSAqIGRZOwogIC8vIG9ubHkgdHJlYXQgbW92ZW1lbnRzIG92ZXIgMyBwaXhlbHMgYXMgZW5vdWdoIHRvIHJlc2V0IHVzCiAgaWYgKGRlbHRhU3F1YXJlZCA+IDMgKiAzKSB7CiAgICBfbGFzdE1vdXNlWCA9IGUuY2xpZW50WDsKICAgIF9sYXN0TW91c2VZID0gZS5jbGllbnRZOwogICAgd2luZG93LmlkbGVSZXNldCgpOwogIH0KfTsKCi8qKgogKiBJbml0aWFsaXplcyB0aGUgaWRsZSBoYW5kbGluZyBzZXR1cCwgYXR0YWNoaW5nIG5lY2Vzc2FyeSBldmVudCBsaXN0ZW5lcnMuCiAqCiAqIEBmdW5jdGlvbiBzZXR1cElkbGUKICovCndpbmRvdy5zZXR1cElkbGUgPSBmdW5jdGlvbiAoKSB7CiAgJCgnYm9keScpLmtleXByZXNzKHdpbmRvdy5pZGxlUmVzZXQpOwogICQoJ2JvZHknKS5tb3VzZW1vdmUoaWRsZU1vdXNlTW92ZSk7Cn07CgovKioKICogQ2hlY2tzIGlmIHRoZSB1c2VyIGlzIGN1cnJlbnRseSBpZGxlLgogKgogKiBAZnVuY3Rpb24gaXNJZGxlCiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB1c2VyIGlzIGlkbGUsIGZhbHNlIG90aGVyd2lzZS4KICovCndpbmRvdy5pc0lkbGUgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHdpbmRvdy5pZGxlVGltZSA+PSB3aW5kb3cuX2lkbGVUaW1lTGltaXQ7Cn07Cgp3aW5kb3cuX29uUmVzdW1lRnVuY3Rpb25zID0gW107CgovKioKICogUmVnaXN0ZXJzIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHVzZXIgcmVzdW1lcyBmcm9tIGJlaW5nIGlkbGUuCiAqCiAqIEBmdW5jdGlvbiBhZGRSZXN1bWVGdW5jdGlvbgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmIFRoZSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBvbiByZXN1bWUuCiAqLwp3aW5kb3cuYWRkUmVzdW1lRnVuY3Rpb24gPSBmdW5jdGlvbiAoZikgewogIHdpbmRvdy5fb25SZXN1bWVGdW5jdGlvbnMucHVzaChmKTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IGxheWVyY2hvb3Nlci5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ2xheWVyY2hvb3NlcicpOwondXNlIHN0cmljdCc7CgovKiBnbG9iYWwgTCwgbG9nIC0tIGVzbGludCAqLwoKLyoqCiAqIFJlcHJlc2VudHMgYSBjb250cm9sIGZvciBzZWxlY3RpbmcgbGF5ZXJzIG9uIHRoZSBtYXAuIEl0IGV4dGVuZHMgdGhlIExlYWZsZXQncyBMLkNvbnRyb2wuTGF5ZXJzIGNsYXNzLgogKiBUaGlzIGNvbnRyb2wgbm90IG9ubHkgbWFuYWdlcyBsYXllciB2aXNpYmlsaXR5IGJ1dCBhbHNvIHByb3ZpZGVzIHBlcnNpc3RlbmNlIG9mIGxheWVyIGRpc3BsYXkgc3RhdGVzIGJldHdlZW4gc2Vzc2lvbnMuCiAqIFRoZSBjbGFzcyBoYXMgYmVlbiBlbmhhbmNlZCB3aXRoIGFkZGl0aW9uYWwgb3B0aW9ucyBhbmQgbWV0aG9kcyBmb3IgbW9yZSBmbGV4aWJsZSBsYXllciBtYW5hZ2VtZW50LgogKgogKiBAbWVtYmVyb2YgTAogKiBAY2xhc3MgTGF5ZXJDaG9vc2VyCiAqIEBleHRlbmRzIEwuQ29udHJvbC5MYXllcnMKICovCnZhciBMYXllckNob29zZXIgPSBMLkNvbnRyb2wuTGF5ZXJzLmV4dGVuZCh7CiAgb3B0aW9uczogewogICAgLyoqCiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHNvcnRMYXllcnM9dHJ1ZSAtIEVuc3VyZXMgc3RhYmxlIHNvcnQgb3JkZXIgKGJhc2VkIG9uIGluaXRpYWwpLCB3aGlsZSBzdGlsbCBwcm92aWRpbmcKICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJpbGl0eSB0byBlbmZvcmNlIHNwZWNpZmljIG9yZGVyIHdpdGggYGFkZEJhc2VMYXllcmAvYGFkZE92ZXJsYXlgCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzb3J0UHJpb3JpdHlgIG9wdGlvbi4KICAgICAqLwogICAgc29ydExheWVyczogdHJ1ZSwKCiAgICAvKioKICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHNvcnRGdW5jdGlvbiAtIEEgY29tcGFyZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZyB0aGUgbGF5ZXJzLAogICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBgc29ydExheWVyc2AgaXMgYHRydWVgLiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgb2JqZWN0cyB3aXRoCiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbGF5ZXIncyBkYXRhLgogICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb3J0CiAgICAgKi8KICAgIHNvcnRGdW5jdGlvbjogZnVuY3Rpb24gKEEsIEIpIHsKICAgICAgdmFyIGEgPSBBLnNvcnRQcmlvcml0eTsKICAgICAgdmFyIGIgPSBCLnNvcnRQcmlvcml0eTsKICAgICAgcmV0dXJuIGEgPCBiID8gLTEgOiBiIDwgYSA/IDEgOiAwOwogICAgfSwKICB9LAoKICAvKioKICAgKiBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgTGF5ZXJDaG9vc2VyIGNvbnRyb2wuCiAgICoKICAgKiBAbWVtYmVyb2YgTGF5ZXJDaG9vc2VyCiAgICogQG1ldGhvZAogICAqIEBwYXJhbSB7TC5MYXllcltdfSBiYXNlTGF5ZXJzIC0gQXJyYXkgb2YgYmFzZSBsYXllcnMgdG8gaW5jbHVkZSBpbiB0aGUgY2hvb3Nlci4KICAgKiBAcGFyYW0ge0wuTGF5ZXJbXX0gb3ZlcmxheXMgLSBBcnJheSBvZiBvdmVybGF5IGxheWVycyB0byBpbmNsdWRlIGluIHRoZSBjaG9vc2VyLgogICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBMYXllckNob29zZXIgY29udHJvbC4KICAgKi8KICBpbml0aWFsaXplOiBmdW5jdGlvbiAoYmFzZUxheWVycywgb3ZlcmxheXMsIG9wdGlvbnMpIHsKICAgIHRoaXMuX292ZXJsYXlTdGF0dXMgPSB7fTsKICAgIHZhciBsYXllcnNKU09OID0gbG9jYWxTdG9yYWdlWydpbmdyZXNzLmludGVsbWFwLmxheWVyZ3JvdXBkaXNwbGF5ZWQnXTsKICAgIGlmIChsYXllcnNKU09OKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdGhpcy5fb3ZlcmxheVN0YXR1cyA9IEpTT04ucGFyc2UobGF5ZXJzSlNPTik7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBsb2cuZXJyb3IoZSk7CiAgICAgIH0KICAgIH0KICAgIHRoaXMuX21hcFRvQWRkID0gb3B0aW9ucyAmJiBvcHRpb25zLm1hcDsKICAgIHRoaXMubGFzdEJhc2VMYXllck5hbWUgPSBsb2NhbFN0b3JhZ2VbJ2lpdGMtYmFzZS1tYXAnXTsKICAgIHRoaXMuX2xhc3RQcmlvcml0eSA9IC0xMDAwOyAvLyBpbml0aWFsIGxheWVycyBnZXQgcHJpb3JpdHkgPDAKICAgIEwuQ29udHJvbC5MYXllcnMucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIHRoaXMuX2xhc3RQcmlvcml0eSA9IDA7IC8vIGFueSBmb2xsb3dpbmcgZ2V0cyA+MAogIH0sCgogIF9hZGRMYXllcjogZnVuY3Rpb24gKGxheWVyLCBuYW1lLCBvdmVybGF5LCBvcHRpb25zKSB7CiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgIC8vIF9jaG9vc2VyIHByb3BlcnR5IHN0b3JlcyBsYXllckNob29zZXIgZGF0YSBhZnRlciBsYXllciByZW1vdmFsCiAgICAvLyAoaW4gY2FzZSBpZiBpdCdzIG1lYW50IHRvIGJlIHJlLWFkZGVkKQogICAgdmFyIGRhdGEgPSBsYXllci5fY2hvb3NlcjsKICAgIGlmICghZGF0YSkgewogICAgICBkYXRhID0gewogICAgICAgIGxheWVyOiBsYXllciwKICAgICAgICAvLyBuYW1lIHNob3VsZCBiZSB1bmlxdWUsIG90aGVyd2lzZSBiZWhhdmlvciBvZiBvdGhlciBtZXRob2RzIGlzIHVuZGVmaW5lZAogICAgICAgIC8vICh0eXBpY2FsbHk6IGZpcnN0IGZvdW5kIHdpbGwgYmUgdGFrZW4pCiAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAvLyBsYWJlbDogbmFtZSwKICAgICAgICBvdmVybGF5OiBvdmVybGF5LAogICAgICAgIHBlcnNpc3RlbnQ6ICdwZXJzaXN0ZW50JyBpbiBvcHRpb25zID8gb3B0aW9ucy5wZXJzaXN0ZW50IDogdHJ1ZSwKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIGRlbGV0ZSBsYXllci5fY2hvb3NlcjsKICAgIH0KICAgIC8vIHByb3ZpZGUgc3RhYmxlIHNvcnQgb3JkZXIKICAgIGlmICgnc29ydFByaW9yaXR5JyBpbiBvcHRpb25zKSB7CiAgICAgIGRhdGEuc29ydFByaW9yaXR5ID0gb3B0aW9ucy5zb3J0UHJpb3JpdHk7CiAgICB9IGVsc2UgaWYgKCEoJ3NvcnRQcmlvcml0eScgaW4gZGF0YSkpIHsKICAgICAgdGhpcy5fbGFzdFByaW9yaXR5ID0gdGhpcy5fbGFzdFByaW9yaXR5ICsgMTA7CiAgICAgIGRhdGEuc29ydFByaW9yaXR5ID0gdGhpcy5fbGFzdFByaW9yaXR5OwogICAgfQogICAgLy8gKioqIGFkYXB0ZWQgZnJvbSBMLkNvbnRyb2wuTGF5ZXJzLnByb3RvdHlwZS5fYWRkTGF5ZXIuY2FsbCh0aGlzLCBsYXllciwgbmFtZSwgb3ZlcmxheSk7CiAgICBpZiAodGhpcy5fbWFwKSB7CiAgICAgIGxheWVyLm9uKCdhZGQgcmVtb3ZlJywgdGhpcy5fb25MYXllckNoYW5nZSwgdGhpcyk7CiAgICB9CgogICAgdGhpcy5fbGF5ZXJzLnB1c2goZGF0YSk7CgogICAgaWYgKHRoaXMub3B0aW9ucy5zb3J0TGF5ZXJzKSB7CiAgICAgIHRoaXMuX2xheWVycy5zb3J0KHRoaXMub3B0aW9ucy5zb3J0RnVuY3Rpb24pOwogICAgfQoKICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1pJbmRleCAmJiBsYXllci5zZXRaSW5kZXgpIHsKICAgICAgdGhpcy5fbGFzdFpJbmRleCsrOwogICAgICBsYXllci5zZXRaSW5kZXgodGhpcy5fbGFzdFpJbmRleCk7CiAgICB9CgogICAgdGhpcy5fZXhwYW5kSWZOb3RDb2xsYXBzZWQoKTsKICAgIC8vICoqKgoKICAgIGlmIChkYXRhLm92ZXJsYXkpIHsKICAgICAgZGF0YS5kZWZhdWx0ID0gJ2RlZmF1bHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLmRlZmF1bHQgOiB0cnVlOwogICAgfQogICAgdmFyIG1hcCA9IHRoaXMuX21hcCB8fCB0aGlzLl9tYXBUb0FkZDsKICAgIGlmICghZGF0YS5wZXJzaXN0ZW50KSB7CiAgICAgIGlmICghZGF0YS5vdmVybGF5KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICgnZW5hYmxlJyBpbiBvcHRpb25zID8gb3B0aW9ucy5lbmFibGUgOiBkYXRhLmRlZmF1bHQpIHsKICAgICAgICBsYXllci5hZGRUbyhtYXApOwogICAgICB9CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChvdmVybGF5KSB7CiAgICAgIGRhdGEuc3RhdHVzVHJhY2tpbmcgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIHRoaXMuX3N0b3JlT3ZlcmxheVN0YXRlKGRhdGEubmFtZSwgZS50eXBlID09PSAnYWRkJyk7CiAgICAgIH07CiAgICAgIGxheWVyLm9uKCdhZGQgcmVtb3ZlJywgZGF0YS5zdGF0dXNUcmFja2luZywgdGhpcyk7CiAgICAgIGlmICgnZW5hYmxlJyBpbiBvcHRpb25zKSB7CiAgICAgICAgLy8gZG8gYXMgZXhwbGljaXRseSBzcGVjaWZpZWQKICAgICAgICBtYXBbb3B0aW9ucy5lbmFibGUgPyAnYWRkTGF5ZXInIDogJ3JlbW92ZUxheWVyJ10obGF5ZXIpOwogICAgICB9IGVsc2UgaWYgKGxheWVyLl9tYXApIHsKICAgICAgICAvLyBhbHJlYWR5IG9uIG1hcCwgb25seSBzdG9yZSBzdGF0ZQogICAgICAgIHRoaXMuX3N0b3JlT3ZlcmxheVN0YXRlKGRhdGEubmFtZSwgdHJ1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gcmVzdG9yZSBhdCByZWNvcmRlZCBzdGF0ZQogICAgICAgIGlmICh0aGlzLl9pc092ZXJsYXlEaXNwbGF5ZWQoZGF0YS5uYW1lLCBkYXRhLmRlZmF1bHQpKSB7CiAgICAgICAgICBsYXllci5hZGRUbyhtYXApOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZGF0YS5zdGF0dXNUcmFja2luZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBsb2NhbFN0b3JhZ2VbJ2lpdGMtYmFzZS1tYXAnXSA9IGRhdGEubmFtZTsKICAgICAgfTsKICAgICAgbGF5ZXIub24oJ2FkZCcsIGRhdGEuc3RhdHVzVHJhY2tpbmcpOwogICAgfQogIH0sCgogIF9hZGRJdGVtOiBmdW5jdGlvbiAob2JqKSB7CiAgICB2YXIgbGFiZWxFbCA9IEwuQ29udHJvbC5MYXllcnMucHJvdG90eXBlLl9hZGRJdGVtLmNhbGwodGhpcywgewogICAgICBsYXllcjogb2JqLmxheWVyLAogICAgICBvdmVybGF5OiBvYmoub3ZlcmxheSwKICAgICAgbmFtZTogb2JqLmxhYmVsIHx8IG9iai5uYW1lLAogICAgfSk7CiAgICBvYmoubGFiZWxFbCA9IGxhYmVsRWw7CiAgICAvLyBvYmouaW5wdXRFbCA9IHRoaXMuX2xheWVyQ29udHJvbElucHV0c1t0aGlzLl9sYXllckNvbnRyb2xJbnB1dHMubGVuZ3RoLTFdOwogICAgcmV0dXJuIGxhYmVsRWw7CiAgfSwKCiAgLyoqCiAgICogQWRkcyBhIGJhc2UgbGF5ZXIgKHJhZGlvIGJ1dHRvbiBlbnRyeSkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSB0byB0aGUgY29udHJvbC4KICAgKgogICAqIEBtZW1iZXJvZiBMYXllckNob29zZXIKICAgKiBAcGFyYW0ge0wuTGF5ZXJ9IGxheWVyIC0gVGhlIGxheWVyIHRvIGJlIGFkZGVkLgogICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGxheWVyLgogICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBsYXllciBlbnRyeS4KICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnBlcnNpc3RlbnQ9dHJ1ZV0gLSBXaGVuIHNldCB0byBgZmFsc2VgLCB0aGUgYmFzZSBsYXllcidzIHN0YXR1cyBpcyBub3QgdHJhY2tlZC4KICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuc29ydFByaW9yaXR5XSAtIEVuZm9yY2VzIGEgc3BlY2lmaWMgb3JkZXIgaW4gdGhlIGNvbnRyb2wuIExvd2VyIHZhbHVlIG1lYW5zCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdoZXIgcG9zaXRpb24gaW4gdGhlIGxpc3QuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB2YWx1ZQogICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBhc3NpZ25lZCBpbXBsaWNpdGx5IGluIGFuIGluY3JlYXNpbmcgbWFubmVyLgogICAqIEByZXR1cm5zIHtMYXllckNob29zZXJ9IFJldHVybnMgdGhlIGBMYXllckNob29zZXJgIGluc3RhbmNlIGZvciBjaGFpbmluZy4KICAgKi8KICBhZGRCYXNlTGF5ZXI6IGZ1bmN0aW9uIChsYXllciwgbmFtZSwgb3B0aW9ucykgewogICAgdGhpcy5fYWRkTGF5ZXIobGF5ZXIsIG5hbWUsIGZhbHNlLCBvcHRpb25zKTsKICAgIHJldHVybiB0aGlzLl9tYXAgPyB0aGlzLl91cGRhdGUoKSA6IHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQWRkcyBhbiBvdmVybGF5IChjaGVja2JveCBlbnRyeSkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSB0byB0aGUgY29udHJvbC4KICAgKgogICAqIEBtZW1iZXJvZiBMYXllckNob29zZXIKICAgKiBAcGFyYW0ge0wuTGF5ZXJ9IGxheWVyIC0gVGhlIG92ZXJsYXkgbGF5ZXIgdG8gYmUgYWRkZWQuCiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgb3ZlcmxheS4KICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgb3ZlcmxheSBlbnRyeS4KICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnBlcnNpc3RlbnQ9dHJ1ZV0gLSBXaGVuIGB0cnVlYCAob3Igbm90IHNwZWNpZmllZCksIHRoZSBvdmVybGF5IGlzIGFkZGVkIHRvIHRoZSBtYXAKICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpdHMgbGFzdCBzdGF0ZSB3YXMgYWN0aXZlLiBJZiBubyBwcmV2aW91cyBzdGF0ZSBpcyByZWNvcmRlZCwKICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdmFsdWUgc3BlY2lmaWVkIGluIHRoZSBgZGVmYXVsdGAgb3B0aW9uIGlzIHVzZWQuCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiBgZmFsc2VgLCB0aGUgb3ZlcmxheSBzdGF0dXMgaXMgbm90IHRyYWNrZWQsCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSBgZGVmYXVsdGAgb3B0aW9uIGlzIHN0aWxsIGhvbm9yZWQuCiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kZWZhdWx0PXRydWVdIC0gVGhlIGRlZmF1bHQgc3RhdGUgb2YgdGhlIG92ZXJsYXksIHVzZWQgb25seSB3aGVuIG5vIHJlY29yZAogICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBwcmV2aW91cyBzdGF0ZSBpcyBmb3VuZC4KICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZV0gLSBJZiBzZXQsIGVuZm9yY2VzIHRoZSBzcGVjaWZpZWQgc3RhdGUsIGlnbm9yaW5nIGFueSBwcmV2aW91c2x5IHNhdmVkIHN0YXRlLgogICAqIEByZXR1cm5zIHtMYXllckNob29zZXJ9IFJldHVybnMgdGhlIGBMYXllckNob29zZXJgIGluc3RhbmNlIGZvciBjaGFpbmluZy4KICAgKi8KICBhZGRPdmVybGF5OiBmdW5jdGlvbiAobGF5ZXIsIG5hbWUsIG9wdGlvbnMpIHsKICAgIHRoaXMuX2FkZExheWVyKGxheWVyLCBuYW1lLCB0cnVlLCBvcHRpb25zKTsKICAgIHJldHVybiB0aGlzLl9tYXAgPyB0aGlzLl91cGRhdGUoKSA6IHRoaXM7CiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gbGF5ZXIgZnJvbSB0aGUgY29udHJvbC4KICAgKgogICAqIEBtZW1iZXJvZiBMYXllckNob29zZXIKICAgKiBAcGFyYW0ge0wuTGF5ZXJ8U3RyaW5nfSBsYXllciAtIFRoZSBsYXllciB0byBiZSByZW1vdmVkLCBlaXRoZXIgYXMgYSBMZWFmbGV0IGxheWVyIG9iamVjdCBvciBpdHMgbmFtZS4KICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWRkaXRpb25hbCBvcHRpb25zLCBpbmNsdWRpbmcgYGtlZXBPbk1hcGAgdG8ga2VlcCB0aGUgbGF5ZXIgb24gdGhlIG1hcC4KICAgKiBAcmV0dXJucyB7TGF5ZXJDaG9vc2VyfSBSZXR1cm5zIHRoZSBgTGF5ZXJDaG9vc2VyYCBpbnN0YW5jZSBmb3IgY2hhaW5pbmcuCiAgICovCiAgcmVtb3ZlTGF5ZXI6IGZ1bmN0aW9uIChsYXllciwgb3B0aW9ucykgewogICAgbGF5ZXIgPSB0aGlzLmdldExheWVyKGxheWVyKTsKICAgIHZhciBkYXRhID0gdGhpcy5sYXllckluZm8obGF5ZXIpOwogICAgaWYgKGRhdGEpIHsKICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICAgIGlmIChkYXRhLnN0YXR1c1RyYWNraW5nKSB7CiAgICAgICAgZGF0YS5sYXllci5vZmYoJ2FkZCByZW1vdmUnLCBkYXRhLnN0YXR1c1RyYWNraW5nLCB0aGlzKTsKICAgICAgICBkZWxldGUgZGF0YS5zdGF0dXNUcmFja2luZzsKICAgICAgfQogICAgICBMLkNvbnRyb2wuTGF5ZXJzLnByb3RvdHlwZS5yZW1vdmVMYXllci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICBpZiAodGhpcy5fbWFwICYmICFvcHRpb25zLmtlZXBPbk1hcCkgewogICAgICAgIHdpbmRvdy5tYXAucmVtb3ZlTGF5ZXIoZGF0YS5sYXllcik7CiAgICAgIH0KICAgICAgZGVsZXRlIGRhdGEubGFiZWxFbDsKICAgICAgLy8gZGVsZXRlIGRhdGEuaW5wdXRFbDsKICAgICAgbGF5ZXIuX2Nob29zZXIgPSBkYXRhOwogICAgfSBlbHNlIHsKICAgICAgbG9nLndhcm4oJ0xheWVyIG5vdCBmb3VuZDogJywgbGF5ZXIpOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgX3N0b3JlT3ZlcmxheVN0YXRlOiBmdW5jdGlvbiAobmFtZSwgaXNEaXNwbGF5ZWQpIHsKICAgIHRoaXMuX292ZXJsYXlTdGF0dXNbbmFtZV0gPSBpc0Rpc3BsYXllZDsKICAgIGxvY2FsU3RvcmFnZVsnaW5ncmVzcy5pbnRlbG1hcC5sYXllcmdyb3VwZGlzcGxheWVkJ10gPSBKU09OLnN0cmluZ2lmeSh0aGlzLl9vdmVybGF5U3RhdHVzKTsKICB9LAoKICBfaXNPdmVybGF5RGlzcGxheWVkOiBmdW5jdGlvbiAobmFtZSwgZGVmYXVsdFN0YXRlKSB7CiAgICBpZiAobmFtZSBpbiB0aGlzLl9vdmVybGF5U3RhdHVzKSB7CiAgICAgIHJldHVybiB0aGlzLl9vdmVybGF5U3RhdHVzW25hbWVdOwogICAgfQogICAgcmV0dXJuIGRlZmF1bHRTdGF0ZTsKICB9LAoKICBfX2J5TmFtZTogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHZhciBuYW1lID0gdGhpcy50b1N0cmluZygpOwogICAgcmV0dXJuIGRhdGEubmFtZSA9PT0gbmFtZSB8fCBkYXRhLmxhYmVsID09PSBuYW1lOwogIH0sCgogIF9fYnlMYXllcjogZnVuY3Rpb24gKGRhdGEpIHsKICAgIHJldHVybiBkYXRhLmxheWVyID09PSB0aGlzOwogIH0sCgogIF9fYnlMYWJlbEVsOiBmdW5jdGlvbiAoZGF0YSkgewogICAgcmV0dXJuIGRhdGEubGFiZWxFbCA9PT0gdGhpczsKICB9LAoKICAvLyBAbWV0aG9kIGxheWVySW5mbyhuYW1lOiBTdHJpbmd8TGF5ZXIpOiBMYXllcgogIC8vIFJldHVybnMgbGF5ZXIgaW5mbyBieSBpdCdzIG5hbWUgaW4gdGhlIGNvbnRyb2wsIG9yIGJ5IGxheWVyIG9iamVjdCBpdHNlbGYsCiAgLy8gb3IgbGFiZWwgaHRtbCBlbGVtZW50LgogIC8vIEluZm8gaXMgaW50ZXJuYWwgZGF0YSBvYmplY3Qgd2l0aCBmb2xsb3dpbmcgcHJvcGVydGllczoKICAvLyBgbGF5ZXJgLCBgbmFtZWAsIGBsYWJlbGAsIGBvdmVybGF5YCwgYHNvcnRQcmlvcml0eWAsIGBwZXJzaXN0ZW50YCwgYGRlZmF1bHRgLAogIC8vIGBsYWJlbEVsYCwgYGlucHV0RWxgLCBgc3RhdHVzVHJhY2tpbmdgLgogIC8qKgogICAqIFJldHJpZXZlcyBsYXllciBpbmZvIGJ5IGl0cyBuYW1lIGluIHRoZSBjb250cm9sLCBvciBieSB0aGUgbGF5ZXIgb2JqZWN0IGl0c2VsZiwgb3IgaXRzIGxhYmVsIEhUTUwgZWxlbWVudC4KICAgKgogICAqIEBtZW1iZXJvZiBMYXllckNob29zZXIKICAgKiBAcGFyYW0ge1N0cmluZ3xMLkxheWVyfEhUTUxFbGVtZW50fSBsYXllciAtIFRoZSBuYW1lLCBsYXllciBvYmplY3QsIG9yIGxhYmVsIGVsZW1lbnQgb2YgdGhlIGxheWVyLgogICAqIEByZXR1cm5zIHtPYmplY3R9IExheWVyIGluZm8gb2JqZWN0IHdpdGggZm9sbG93aW5nIHByb3BlcnRpZXM6IGBsYXllcmAsIGBuYW1lYCwgYGxhYmVsYCwgYG92ZXJsYXlgLCBgc29ydFByaW9yaXR5YCwKICAgKiAgICAgICAgICAgICAgICAgICBgcGVyc2lzdGVudGAsIGBkZWZhdWx0YCwgYGxhYmVsRWxgLCBgaW5wdXRFbGAsIGBzdGF0dXNUcmFja2luZ2AuCiAgICovCiAgbGF5ZXJJbmZvOiBmdW5jdGlvbiAobGF5ZXIpIHsKICAgIHZhciBmbiA9IGxheWVyIGluc3RhbmNlb2YgTC5MYXllciA/IHRoaXMuX19ieUxheWVyIDogbGF5ZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IHRoaXMuX19ieUxhYmVsRWwgOiB0aGlzLl9fYnlOYW1lOwogICAgcmV0dXJuIHRoaXMuX2xheWVycy5maW5kKGZuLCBsYXllcik7CiAgfSwKCiAgLyoqCiAgICogUmV0dXJucyB0aGUgTGVhZmxldCBsYXllciBvYmplY3QgYmFzZWQgb24gaXRzIG5hbWUgaW4gdGhlIGNvbnRyb2wsIG9yIHRoZSBsYXllciBvYmplY3QgaXRzZWxmLAogICAqIG9yIGl0cyBsYWJlbCBIVE1MIGVsZW1lbnQuIFRoZSBsYXR0ZXIgY2FuIGJlIHVzZWQgdG8gZW5zdXJlIHRoZSBsYXllciBpcyBpbiBsYXllckNob29zZXIuCiAgICoKICAgKiBAbWVtYmVyb2YgTGF5ZXJDaG9vc2VyCiAgICogQHBhcmFtIHtTdHJpbmd8TC5MYXllcnxIVE1MRWxlbWVudH0gbGF5ZXIgLSBUaGUgbmFtZSwgbGF5ZXIgb2JqZWN0LCBvciBsYWJlbCBlbGVtZW50IG9mIHRoZSBsYXllci4KICAgKiBAcmV0dXJucyB7TC5MYXllcn0gVGhlIGNvcnJlc3BvbmRpbmcgTGVhZmxldCBsYXllciBvYmplY3QuCiAgICovCiAgZ2V0TGF5ZXI6IGZ1bmN0aW9uIChsYXllcikgewogICAgdmFyIGRhdGEgPSB0aGlzLmxheWVySW5mbyhsYXllcik7CiAgICByZXR1cm4gZGF0YSAmJiBkYXRhLmxheWVyOwogIH0sCgogIC8qKgogICAqIFNob3dzIG9yIGhpZGVzIGEgc3BlY2lmaWVkIGJhc2VtYXAgb3Igb3ZlcmxheSBsYXllci4gVGhlIGxheWVyIGNhbiBiZSBzcGVjaWZpZWQgYnkgaXRzIElELCBuYW1lLCBvciBsYXllciBvYmplY3QuCiAgICogSWYgdGhlIGRpc3BsYXkgcGFyYW1ldGVyIGlzIG5vdCBwcm92aWRlZCwgdGhlIGxheWVyIHdpbGwgYmUgc2hvd24gYnkgZGVmYXVsdC4KICAgKiBXaGVuIHNob3dpbmcgYSBiYXNlIGxheWVyLCBpdCBlbnN1cmVzIHRoYXQgbm8gb3RoZXIgYmFzZSBsYXllcnMgYXJlIGRpc3BsYXllZCBhdCB0aGUgc2FtZSB0aW1lLgogICAqCiAgICogQG1lbWJlcm9mIExheWVyQ2hvb3NlcgogICAqIEBwYXJhbSB7TC5MYXllcnxTdHJpbmd8TnVtYmVyfSBsYXllciAtIFRoZSBsYXllciB0byBzaG93IG9yIGhpZGUuIFRoaXMgY2FuIGJlIGEgTGVhZmxldCBsYXllciBvYmplY3QsCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBsYXllciBuYW1lLCBvciBhIGxheWVyIElELgogICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2Rpc3BsYXk9dHJ1ZV0gLSBQYXNzIGBmYWxzZWAgdG8gaGlkZSB0aGUgbGF5ZXIsIG9yIGB0cnVlYC9vbWl0IHRvIHNob3cgaXQuCiAgICogQHJldHVybnMge0xheWVyQ2hvb3Nlcn0gUmV0dXJucyB0aGUgYExheWVyQ2hvb3NlcmAgaW5zdGFuY2UgZm9yIGNoYWluaW5nLgogICAqLwogIHNob3dMYXllcjogZnVuY3Rpb24gKGxheWVyLCBkaXNwbGF5KSB7CiAgICB2YXIgZGF0YSA9IHRoaXMuX2xheWVyc1tsYXllcl07IC8vIGxheWVyIGlzIGluZGV4LCBwcml2YXRlIHVzZSBvbmx5CiAgICBpZiAoIWRhdGEpIHsKICAgICAgZGF0YSA9IHRoaXMubGF5ZXJJbmZvKGxheWVyKTsKICAgICAgaWYgKCFkYXRhKSB7CiAgICAgICAgbG9nLndhcm4oJ0xheWVyIG5vdCBmb3VuZDogJywgbGF5ZXIpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICB9CiAgICB2YXIgbWFwID0gdGhpcy5fbWFwOwogICAgaWYgKGRpc3BsYXkgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgewogICAgICBpZiAoIW1hcC5oYXNMYXllcihkYXRhLmxheWVyKSkgewogICAgICAgIGlmICghZGF0YS5vdmVybGF5KSB7CiAgICAgICAgICAvLyBpZiBpdCdzIGEgYmFzZSBsYXllciwgcmVtb3ZlIGFueSBvdGhlcnMKICAgICAgICAgIHRoaXMuX2xheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICBpZiAoIWVsLm92ZXJsYXkgJiYgZWwubGF5ZXIgIT09IGRhdGEubGF5ZXIpIHsKICAgICAgICAgICAgICBtYXAucmVtb3ZlTGF5ZXIoZWwubGF5ZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgbWFwLmFkZExheWVyKGRhdGEubGF5ZXIpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBtYXAucmVtb3ZlTGF5ZXIoZGF0YS5sYXllcik7CiAgICB9CiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBTZXRzIHRoZSBsYWJlbCBvZiBhIGxheWVyIGluIHRoZSBjb250cm9sLgogICAqCiAgICogQG1lbWJlcm9mIExheWVyQ2hvb3NlcgogICAqIEBwYXJhbSB7U3RyaW5nfEwuTGF5ZXJ9IGxheWVyIC0gVGhlIG5hbWUgb3IgbGF5ZXIgb2JqZWN0LgogICAqIEBwYXJhbSB7U3RyaW5nfSBbbGFiZWxdIC0gVGhlIGxhYmVsIHRleHQgKEhUTUwgYWxsb3dlZCkgdG8gc2V0LiBSZXNldHMgdG8gb3JpZ2luYWwgbmFtZSBpZiBub3QgcHJvdmlkZWQuCiAgICogQHJldHVybnMge0xheWVyQ2hvb3Nlcn0gUmV0dXJucyB0aGUgYExheWVyQ2hvb3NlcmAgaW5zdGFuY2UgZm9yIGNoYWluaW5nLgogICAqLwogIHNldExhYmVsOiBmdW5jdGlvbiAobGF5ZXIsIGxhYmVsKSB7CiAgICB2YXIgZGF0YSA9IHRoaXMubGF5ZXJJbmZvKGxheWVyKTsKICAgIGlmICghZGF0YSkgewogICAgICBsb2cud2FybignTGF5ZXIgbm90IGZvdW5kOiAnLCBsYXllcik7CiAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgZGF0YS5sYWJlbCA9IGxhYmVsOwogICAgdmFyIG5hbWVFbCA9IGRhdGEubGFiZWxFbC5xdWVyeVNlbGVjdG9yKCdzcGFuJyk7CiAgICBuYW1lRWwuaW5uZXJIVE1MID0gJyAnICsgbGFiZWw7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICBfb25Mb25nQ2xpY2s6IGZ1bmN0aW9uIChkYXRhLCBvcmlnaW5hbEV2ZW50KSB7CiAgICB2YXIgZGVmYXVsdFByZXZlbnRlZDsKCiAgICAvLyBAbWluaWNsYXNzIExheWVyc0NvbnRyb2xJbnRlcmFjdGlvbkV2ZW50IChMYXllckNob29zZXIpCiAgICAvLyBAaW5oZXJpdHMgRXZlbnQKICAgIC8vIEBwcm9wZXJ0eSBsYXllcjogTC5MYXllcgogICAgLy8gVGhlIGxheWVyIHRoYXQgd2FzIGludGVyYWN0ZWQgaW4gTGF5ZXJDaG9vc2VyIGNvbnRyb2wuCiAgICAvLyBAcHJvcGVydHkgY29udHJvbDogTGF5ZXJDaG9vc2VyCiAgICAvLyBMYXllckNob29zZXIgY29udHJvbCBpbnN0YW5jZSAoanVzdCBoYW5keSBzaG9ydGN1dCBmb3Igd2luZG93LmxheWVyQ2hvb3NlcikuCiAgICAvLyBAcHJvcGVydHkgZGF0YTogT2JqZWN0CiAgICAvLyBJbnRlcm5hbCBkYXRhIG9iamVjdCBUT0RPCiAgICAvLyBAcHJvcGVydHkgb3JpZ2luYWxFdmVudDogRE9NRXZlbnQKICAgIC8vIFRoZSBvcmlnaW5hbCBtb3VzZS9qUXVlcnkgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBMZWFmbGV0IGV2ZW50LgogICAgLy8gQG1ldGhvZCBwcmV2ZW50RGVmYXVsdDogRnVuY3Rpb24KICAgIC8vIE1ldGhvZCB0byBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uIG9mIGV2ZW50IChsaWtlIG92ZXJsYXlzIHRvZ2dsaW5nKSwgb3RoZXJ3aXNlIGhhbmRsZWQgYnkgbGF5ZXJDaG9vc2VyLgogICAgdmFyIG9iaiA9IHsKICAgICAgY29udHJvbDogdGhpcywKICAgICAgZGF0YTogZGF0YSwKICAgICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudCB8fCB7IHR5cGU6ICd0YXBob2xkJyB9LAogICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkgewogICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOwogICAgICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7CiAgICAgIH0sCiAgICB9OwoKICAgIC8vIEBuYW1lc3BhY2UgTGF5ZXIKICAgIC8vIEBzZWN0aW9uIExheWVycyBjb250cm9sIGludGVyYWN0aW9uIGV2ZW50cwogICAgLy8gRmlyZWQgd2hlbiB0aGUgb3ZlcmxheSdzIGxhYmVsIGlzIGxvbmctY2xpY2tlZCBpbiB0aGUgbGF5ZXJzIGNvbnRyb2wuCgogICAgLy8gQHNlY3Rpb24gTGF5ZXJzIGNvbnRyb2wgaW50ZXJhY3Rpb24gZXZlbnRzCiAgICAvLyBAZXZlbnQgbG9uZ2NsaWNrOiBMYXllcnNDb250cm9sSW50ZXJhY3Rpb25FdmVudAogICAgLy8gRmlyZWQgb24gbGF5ZXIKICAgIGRhdGEubGF5ZXIuZmlyZSgnbG9uZ2NsaWNrJywgb2JqKTsKICAgIGlmICghZGVmYXVsdFByZXZlbnRlZCkgewogICAgICB0aGlzLl90b2dnbGVPdmVybGF5KGRhdGEpOwogICAgfQogICAgLy8gQG5hbWVzcGFjZSBMYXllckNob29zZXIKICB9LAoKICAvLyBhZGRzIGxpc3RlbmVycyB0byB0aGUgb3ZlcmxheXMgbGlzdCB0byBtYWtlIGlucHV0cyB0b2dnbGVhYmxlLgogIF9pbml0TGF5b3V0OiBmdW5jdGlvbiAoKSB7CiAgICBMLkNvbnRyb2wuTGF5ZXJzLnByb3RvdHlwZS5faW5pdExheW91dC5jYWxsKHRoaXMpOwogICAgJCh0aGlzLl9vdmVybGF5c0xpc3QpLm9uKAogICAgICAnY2xpY2sgdGFwaG9sZCcsCiAgICAgICdsYWJlbCcsCiAgICAgIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKCEoZS5tZXRhS2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUudHlwZSA9PT0gJ3RhcGhvbGQnKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvLyBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHNlZW1zIG5vIGVmZmVjdAogICAgICAgIHZhciBsYWJlbEVsID0gZS50YXJnZXQuY2xvc2VzdCgnbGFiZWwnKTsKICAgICAgICB0aGlzLl9vbkxvbmdDbGljayh0aGlzLmxheWVySW5mbyhsYWJlbEVsKSwgZSk7CiAgICAgIH0uYmluZCh0aGlzKQogICAgKTsKICB9LAoKICBfZmlsdGVyT3ZlcmxheXM6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICByZXR1cm4gZGF0YS5vdmVybGF5ICYmIFsnREVCVUcgRGF0YSBUaWxlcycsICdSZXNpc3RhbmNlJywgJ0VubGlnaHRlbmVkJ10uaW5kZXhPZihkYXRhLm5hbWUpID09PSAtMTsKICB9LAoKICAvLyBIaWRlcyBhbGwgdGhlIGNvbnRyb2wncyBvdmVybGF5cyBleGNlcHQgZ2l2ZW4gb25lLAogIC8vIG9yIHJlc3RvcmVzIGFsbCwgaWYgaXQgd2FzIHRoZSBvbmx5IG9uZSBkaXNwbGF5ZWQgKG9yIG5vbmUgd2FzIGRpc3BsYXllZCkuCiAgX3RvZ2dsZU92ZXJsYXk6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICBpZiAoIWRhdGEgfHwgIWRhdGEub3ZlcmxheSkgewogICAgICBsb2cud2FybignT3ZlcmxheSBub3QgZm91bmQ6ICcsIGRhdGEpOwogICAgICByZXR1cm47CiAgICB9CiAgICB2YXIgbWFwID0gdGhpcy5fbWFwOwoKICAgIHZhciBpc0NoZWNrZWQgPSBtYXAuaGFzTGF5ZXIoZGF0YS5sYXllcik7CiAgICB2YXIgY2hlY2tlZCA9IDA7CiAgICB2YXIgb3ZlcmxheXMgPSB0aGlzLl9sYXllcnMuZmlsdGVyKHRoaXMuX2ZpbHRlck92ZXJsYXlzKTsKICAgIG92ZXJsYXlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7CiAgICAgIGlmIChtYXAuaGFzTGF5ZXIoZWwubGF5ZXIpKSB7CiAgICAgICAgY2hlY2tlZCsrOwogICAgICB9CiAgICB9KTsKCiAgICBpZiAoY2hlY2tlZCA9PT0gMCB8fCAoaXNDaGVja2VkICYmIGNoZWNrZWQgPT09IDEpKSB7CiAgICAgIC8vIGlmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIG9yIHNwZWNpZmllZCBvdmVybGF5IGlzIGV4Y2x1c2l2ZSwKICAgICAgLy8gYXNzdW1lIGFsbCBib3hlcyBzaG91bGQgYmUgY2hlY2tlZCBhZ2FpbgogICAgICBvdmVybGF5cy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICAgIGlmIChlbC5kZWZhdWx0KSB7CiAgICAgICAgICBtYXAuYWRkTGF5ZXIoZWwubGF5ZXIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICAvLyB1bmNoZWNrIGFsbCwgY2hlY2sgc3BlY2lmaWVkCiAgICAgIG92ZXJsYXlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgaWYgKGVsLmxheWVyID09PSBkYXRhLmxheWVyKSB7CiAgICAgICAgICBtYXAuYWRkTGF5ZXIoZWwubGF5ZXIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBtYXAucmVtb3ZlTGF5ZXIoZWwubGF5ZXIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKCiAgX3N0cmlwSHRtbFRhZ3M6IGZ1bmN0aW9uIChzdHIpIHsKICAgIHJldHVybiBzdHIucmVwbGFjZSgvKDwoW14+XSspPikvZ2ksICcnKTsgLy8gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9qYXZhc2NyaXB0L3N0cmlwLWh0bWwtdGFncy1pbi1qYXZhc2NyaXB0LwogIH0sCgogIC8qKgogICAqIFJldHJpZXZlcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBiYXNlIGFuZCBvdmVybGF5IGxheWVycyBtYW5hZ2VkIGJ5IHRoaXMgY29udHJvbC4KICAgKiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgYmUgdXNlZCB3aXRoIGNhdXRpb24uCiAgICoKICAgKiBUaGUgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IHdpdGggdHdvIHByb3BlcnRpZXM6ICdiYXNlTGF5ZXJzJyBhbmQgJ292ZXJsYXlMYXllcnMnLgogICAqIEVhY2ggYXJyYXkgY29udGFpbnMgb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIHJlc3BlY3RpdmUgbGF5ZXJzIHdpdGggcHJvcGVydGllczogJ2xheWVySWQnLCAnbmFtZScsIGFuZCAnYWN0aXZlJy4KICAgKiAnbGF5ZXJJZCcgaXMgYW4gaW50ZXJuYWwgaWRlbnRpZmllciBmb3IgdGhlIGxheWVyLCAnbmFtZScgaXMgdGhlIGxheWVyJ3MgbmFtZSwgYW5kICdhY3RpdmUnIGlzIGEgYm9vbGVhbiBpbmRpY2F0aW5nCiAgICogaWYgdGhlIGxheWVyIGlzIGN1cnJlbnRseSBhY3RpdmUgb24gdGhlIG1hcC4KICAgKgogICAqIEBtZW1iZXJvZiBMYXllckNob29zZXIKICAgKiBAZGVwcmVjYXRlZAogICAqIEByZXR1cm5zIHt7b3ZlcmxheUxheWVyczogQXJyYXksIGJhc2VMYXllcnM6IEFycmF5fX0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgYXJyYXlzIG9mIGJhc2UgYW5kIG92ZXJsYXkgbGF5ZXJzLgogICAqLwogIGdldExheWVyczogZnVuY3Rpb24gKCkgewogICAgdmFyIGJhc2VMYXllcnMgPSBbXTsKICAgIHZhciBvdmVybGF5TGF5ZXJzID0gW107CiAgICB0aGlzLl9sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSwgaWR4KSB7CiAgICAgIChkYXRhLm92ZXJsYXkgPyBvdmVybGF5TGF5ZXJzIDogYmFzZUxheWVycykucHVzaCh7CiAgICAgICAgbGF5ZXJJZDogaWR4LAogICAgICAgIG5hbWU6IHRoaXMuX3N0cmlwSHRtbFRhZ3MoZGF0YS5sYWJlbCB8fCBkYXRhLm5hbWUpLCAvLyBJSVRDbSBkb2VzIG5vdCBzdXBwb3J0IGh0bWwgaW4gbGF5ZXJzIGxhYmVscwogICAgICAgIGFjdGl2ZTogdGhpcy5fbWFwLmhhc0xheWVyKGRhdGEubGF5ZXIpLAogICAgICB9KTsKICAgIH0sIHRoaXMpOwoKICAgIHJldHVybiB7CiAgICAgIGJhc2VMYXllcnM6IGJhc2VMYXllcnMsCiAgICAgIG92ZXJsYXlMYXllcnM6IG92ZXJsYXlMYXllcnMsCiAgICB9OwogIH0sCn0pOwoKd2luZG93LkxheWVyQ2hvb3NlciA9IExheWVyQ2hvb3NlcjsKCi8vIGNvbnRhaW5zIGN1cnJlbnQgc3RhdHVzKG9uL29mZikgb2Ygb3ZlcmxheSBsYXllckdyb3Vwcy4KLy8gISFkZXByZWNhdGVkOiB1c2UgYG1hcC5oYXNMYXllcmAgaW5zdGVhZCAoaHR0cHM6Ly9sZWFmbGV0anMuY29tL3JlZmVyZW5jZS5odG1sI21hcC1oYXNsYXllcikKd2luZG93Lm92ZXJsYXlTdGF0dXMgPSB7fTsgLy8gdG8gYmUgc2V0IGluIGNvbnN0cnVjdG9yCgovLyBSZWFkcyByZWNvcmRlZCBsYXllckdyb3VwIHN0YXR1cyAoYXMgaXQgbWF5IG5vdCBiZSBhZGRlZCB0byBtYXAgeWV0KSwKLy8gcmV0dXJuIGBkZWZhdWx0RGlzcGxheWAgaWYgbm8gcmVjb3JkIGZvdW5kLgovLyAhIWRlcHJlY2F0ZWQ6IGZvciBtb3N0IHVzZSBjYXNlcyBwcmVmZXIgYGdldExheWVyKClgIG1ldGhvZAovLyBvciBgbWFwLmhhc0xheWVyYCAoaHR0cHM6Ly9sZWFmbGV0anMuY29tL3JlZmVyZW5jZS5odG1sI21hcC1oYXNsYXllcikKLy8gd2luZG93LmlzTGF5ZXJHcm91cERpc3BsYXllZCA9IGZ1bmN0aW9uIChuYW1lLCBkZWZhdWx0RGlzcGxheSkgeyAvLyAuLi4Kd2luZG93LmlzTGF5ZXJHcm91cERpc3BsYXllZCA9IEwuVXRpbC5mYWxzZUZuOyAvLyB0byBiZSBzZXQgaW4gY29uc3RydWN0b3IKCkxheWVyQ2hvb3Nlci5hZGRJbml0SG9vayhmdW5jdGlvbiAoKSB7CiAgd2luZG93Lm92ZXJsYXlTdGF0dXMgPSB0aGlzLl9vdmVybGF5U3RhdHVzOwogIHdpbmRvdy5pc0xheWVyR3JvdXBEaXNwbGF5ZWQgPSB0aGlzLl9pc092ZXJsYXlEaXNwbGF5ZWQuYmluZCh0aGlzKTsKfSk7CgovLyAhIWRlcHJlY2F0ZWQ6IHVzZSBgbGF5ZXJDaG9vc2VyLmFkZE92ZXJsYXlgIGRpcmVjdGx5CndpbmRvdy5hZGRMYXllckdyb3VwID0gZnVuY3Rpb24gKG5hbWUsIGxheWVyR3JvdXAsIGRlZmF1bHREaXNwbGF5KSB7CiAgdmFyIG9wdGlvbnMgPSB7IGRlZmF1bHQ6IGRlZmF1bHREaXNwbGF5IH07CiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7CiAgICBvcHRpb25zID0gdW5kZWZpbmVkOwogIH0KICB3aW5kb3cubGF5ZXJDaG9vc2VyLmFkZE92ZXJsYXkobGF5ZXJHcm91cCwgbmFtZSwgb3B0aW9ucyk7Cn07CgovLyAhIWRlcHJlY2F0ZWQ6IHVzZSBgbGF5ZXJDaG9vc2VyLnJlbW92ZUxheWVyYCBkaXJlY3RseQovLyBvdXIgbWV0aG9kIGRpZmZlcnMgZnJvbSBpbmhlcml0ZWQgKGh0dHBzOi8vbGVhZmxldGpzLmNvbS9yZWZlcmVuY2UuaHRtbCNjb250cm9sLWxheWVycy1yZW1vdmVsYXllciksCi8vIGFzIChieSBkZWZhdWx0KSBsYXllciBpcyByZW1vdmVkIGZyb20gdGhlIG1hcCBhcyB3ZWxsLCBzZWUgZGVzY3JpcHRpb24gZm9yIG1vcmUgZGV0YWlscy4Kd2luZG93LnJlbW92ZUxheWVyR3JvdXAgPSBmdW5jdGlvbiAobGF5ZXJHcm91cCkgewogIHdpbmRvdy5sYXllckNob29zZXIucmVtb3ZlTGF5ZXIobGF5ZXJHcm91cCk7Cn07CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBtYXAuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdtYXAnKTsKLyogZ2xvYmFsIElJVEMsIEwsIGxvZyAtLSBlc2xpbnQgKi8KCi8qKgogKiBAZmlsZSBUaGlzIGZpbGUgcHJvdmlkZXMgZnVuY3Rpb25zIGZvciB3b3JraW5nIHdpdGggbWFwcy4KICogQG1vZHVsZSBtYXAKICovCgpmdW5jdGlvbiBzZXR1cENSUygpIHsKICAvLyB1c2UgdGhlIGVhcnRoIHJhZGl1cyB2YWx1ZSBmcm9tIHMyIGdlb21ldHJ5IGxpYnJhcnkKICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3MyLWdlb21ldHJ5LWxpYnJhcnktamF2YS9ibG9iL2MyOGYyODdiOTk2YzBjZWRjNTUxNmEwNDI2ZmJkNDlmNmM5NjExZWMvc3JjL2NvbS9nb29nbGUvY29tbW9uL2dlb21ldHJ5L1MyTGF0TG5nLmphdmEjTDMxCiAgdmFyIEVBUlRIX1JBRElVU19NRVRFUlMgPSA2MzY3MDAwLjA7CiAgLy8gZGlzdGFuY2UgY2FsY3VsYXRpb25zIHdpdGggdGhhdCBjb25zdGFudCBhcmUgYSBsaXR0bGUgY2xvc2VyIHRvIHZhbHVlcyBvYnNlcnZhYmxlIGluIEluZ3Jlc3MgY2xpZW50LgogIC8vIGRpZmZlcmVuY2UgaXM6CiAgLy8gLSB+MC4wNiUgd2hlbiB1c2luZyBMYXRMbmcuZGlzdGFuY2VUbygpIChSIGlzIDYzNzEgdnMgNjM2NykKICAvLyAtIH4wLjE3JSB3aGVuIHVzaW5nIE1hcC5kaXN0YW5jZSgpIC8gQ1JTLmRlc3RhbmNlKCkgKFIgaXMgNjM3OC4xMzcgdnMgNjM2NykKICAvLyAoWWVzLCBMZWFmbGV0IGlzIG5vdCBjb25zaXN0ZW50IGhlcmUsIGUuZy4gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFmbGV0L0xlYWZsZXQvcHVsbC82OTI4KQoKICAvLyB0aGlzIGFmZmVjdHMgTGF0TG5nLmRpc3RhbmNlVG8oKSwgd2hpY2ggaXMgY3VycmVudGx5IHVzZWQgaW4gbW9zdCBpaXRjIHBsdWdpbnMKICBMLkNSUy5FYXJ0aC5SID0gRUFSVEhfUkFESVVTX01FVEVSUzsKCiAgLy8gdGhpcyBhZmZlY3RzIE1hcC5kaXN0YW5jZSgpLCB3aGljaCBpcyBrbm93biB0byBiZSB1c2VkIGluIGRyYXctdG9vbHMKICB2YXIgU3BoZXJpY2FsTWVyY2F0b3IgPSBMLlByb2plY3Rpb24uU3BoZXJpY2FsTWVyY2F0b3I7CiAgU3BoZXJpY2FsTWVyY2F0b3IuUzIgPSBMLmV4dGVuZCh7fSwgU3BoZXJpY2FsTWVyY2F0b3IsIHsKICAgIFI6IEVBUlRIX1JBRElVU19NRVRFUlMsCiAgICBib3VuZHM6IChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBkID0gRUFSVEhfUkFESVVTX01FVEVSUyAqIE1hdGguUEk7CiAgICAgIHJldHVybiBMLmJvdW5kcyhbLWQsIC1kXSwgW2QsIGRdKTsKICAgIH0pKCksCiAgfSk7CgogIEwuQ1JTLlMyID0gTC5leHRlbmQoe30sIEwuQ1JTLkVhcnRoLCB7CiAgICBjb2RlOiAnSW5ncmVzcycsCiAgICBwcm9qZWN0aW9uOiBTcGhlcmljYWxNZXJjYXRvci5TMiwKICAgIHRyYW5zZm9ybWF0aW9uOiAoZnVuY3Rpb24gKCkgewogICAgICB2YXIgc2NhbGUgPSAwLjUgLyAoTWF0aC5QSSAqIFNwaGVyaWNhbE1lcmNhdG9yLlMyLlIpOwogICAgICByZXR1cm4gTC50cmFuc2Zvcm1hdGlvbihzY2FsZSwgMC41LCAtc2NhbGUsIDAuNSk7CiAgICB9KSgpLAogIH0pOwp9CgovKioKICogTm9ybWFsaXplcyBsYXRpdHVkZSwgbG9uZ2l0dWRlLCBhbmQgem9vbSB2YWx1ZXMuIEVuc3VyZXMgdGhhdCB0aGUgdmFsdWVzIGFyZSB2YWxpZCBudW1iZXJzLCBwcm92aWRpbmcKICogZGVmYXVsdHMgaWYgbmVjZXNzYXJ5LgogKgogKiBAZnVuY3Rpb24gbm9ybUxMCiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbGF0IC0gTGF0aXR1ZGUgdmFsdWUgb3Igc3RyaW5nIHRoYXQgY2FuIGJlIGNvbnZlcnRlZCB0byBhIG51bWJlci4KICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBsbmcgLSBMb25naXR1ZGUgdmFsdWUgb3Igc3RyaW5nIHRoYXQgY2FuIGJlIGNvbnZlcnRlZCB0byBhIG51bWJlci4KICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB6b29tIC0gWm9vbSBsZXZlbCB2YWx1ZSBvciBzdHJpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIHRvIGEgbnVtYmVyLgogKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyBub3JtYWxpemVkIGNlbnRlciAobGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSkgYW5kIHpvb20gbGV2ZWwuCiAqLwpmdW5jdGlvbiBub3JtTEwobGF0LCBsbmcsIHpvb20pIHsKICByZXR1cm4gewogICAgY2VudGVyOiBbcGFyc2VGbG9hdChsYXQpIHx8IDAsIHBhcnNlRmxvYXQobG5nKSB8fCAwXSwKICAgIHpvb206IHBhcnNlSW50KHpvb20pIHx8IHdpbmRvdy5ERUZBVUxUX1pPT00sCiAgfTsKfQoKLyoqCiAqIFJldHJpZXZlcyB0aGUgbGFzdCBrbm93biBtYXAgcG9zaXRpb24gZnJvbSB0aGUgVVJMIHBhcmFtZXRlcnMgb3IgY29va2llcy4KICogUHJpb3JpdGl6ZXMgVVJMIHBhcmFtZXRlcnMgb3ZlciBjb29raWVzLiBFeHRyYWN0cyBhbmQgbm9ybWFsaXplcyB0aGUgbGF0aXR1ZGUsIGxvbmdpdHVkZSwgYW5kIHpvb20gbGV2ZWwuCiAqCiAqIEBmdW5jdGlvbiBnZXRQb3NpdGlvbgogKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgbWFwJ3MgcG9zaXRpb24gYW5kIHpvb20gbGV2ZWwsIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmQuCiAqLwpmdW5jdGlvbiBnZXRQb3NpdGlvbigpIHsKICB2YXIgdXJsID0gd2luZG93LmdldFVSTFBhcmFtOwoKICB2YXIgem9vbSA9IHVybCgneicpOwogIHZhciBsYXRFNiA9IHVybCgnbGF0RTYnKTsKICB2YXIgbG5nRTYgPSB1cmwoJ2xuZ0U2Jyk7CiAgaWYgKGxhdEU2ICYmIGxuZ0U2KSB7CiAgICBsb2cubG9nKCdtYXBwb3M6IHJlYWRpbmcgZW1haWwgVVJMIHBhcmFtcycpOwogICAgcmV0dXJuIG5vcm1MTChwYXJzZUludChsYXRFNikgLyAxZTYsIHBhcnNlSW50KGxuZ0U2KSAvIDFlNiwgem9vbSk7CiAgfQoKICB2YXIgbGwgPSB1cmwoJ2xsJykgfHwgdXJsKCdwbGwnKTsKICBpZiAobGwpIHsKICAgIGxvZy5sb2coJ21hcHBvczogcmVhZGluZyBzdG9jayBJbnRlbCBVUkwgcGFyYW1zJyk7CiAgICBsbCA9IGxsLnNwbGl0KCcsJyk7CiAgICByZXR1cm4gbm9ybUxMKGxsWzBdLCBsbFsxXSwgem9vbSk7CiAgfQoKICB2YXIgbGF0ID0gd2luZG93LnJlYWRDb29raWUoJ2luZ3Jlc3MuaW50ZWxtYXAubGF0Jyk7CiAgdmFyIGxuZyA9IHdpbmRvdy5yZWFkQ29va2llKCdpbmdyZXNzLmludGVsbWFwLmxuZycpOwogIGlmIChsYXQgJiYgbG5nKSB7CiAgICBsb2cubG9nKCdtYXBwb3M6IHJlYWRpbmcgY29va2llcycpOwogICAgcmV0dXJuIG5vcm1MTChsYXQsIGxuZywgd2luZG93LnJlYWRDb29raWUoJ2luZ3Jlc3MuaW50ZWxtYXAuem9vbScpKTsKICB9Cn0KCi8qKgogKiBJbml0aWFsaXplcyBhbmQgcmV0dXJucyBhIGNvbGxlY3Rpb24gb2YgZGVmYXVsdCBiYXNlbWFwIGxheWVycy4gVGhlIGZ1bmN0aW9uIGNyZWF0ZXMgYSBzZXQgb2YgYmFzZSBsYXllcnMKICogaW5jbHVkaW5nIENhcnRvREIgKGJvdGggZGFyayBhbmQgbGlnaHQgdGhlbWVzKSwgYW5kIHZhcmlvdXMgR29vZ2xlIE1hcHMgbGF5ZXJzIChEZWZhdWx0IEluZ3Jlc3MgTWFwLCBSb2FkcywKICogUm9hZHMgd2l0aCBUcmFmZmljLCBTYXRlbGxpdGUsIEh5YnJpZCwgYW5kIFRlcnJhaW4pLgogKgogKiBAcmV0dXJucyB7T2JqZWN0LjxTdHJpbmcsIE9iamVjdD59IEFuIG9iamVjdCBjb250YWluaW5nIGRpZmZlcmVudCBiYXNlbWFwIGxheWVycyByZWFkeSB0byBiZSBhZGRlZCB0byBhIG1hcC4gRWFjaCBwcm9wZXJ0eSBvZiB0aGUKICogICAgICAgICAgICAgICAgICAgb2JqZWN0IGlzIGEgbmFtZWQgbWFwIGxheWVyLCB3aXRoIGl0cyB2YWx1ZSBiZWluZyB0aGUgY29ycmVzcG9uZGluZyBMZWFmbGV0IHRpbGUgbGF5ZXIgb2JqZWN0LgogKi8KZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEJhc2VNYXBMYXllcnMoKSB7CiAgdmFyIGJhc2VMYXllcnMgPSB7fTsKCiAgLyoKICAvLyBPcGVuU3RyZWV0TWFwIGF0dHJpYnV0aW9uIC0gcmVxdWlyZWQgYnkgc2V2ZXJhbCBvZiB0aGUgbGF5ZXJzCiAgb3NtQXR0cmlidXRpb24gPSAnTWFwIGRhdGEgwqkgT3BlblN0cmVldE1hcCBjb250cmlidXRvcnMnOwoKICAvLyBNYXBRdWVzdCAtIGh0dHA6Ly9kZXZlbG9wZXIubWFwcXVlc3QuY29tL3dlYi9wcm9kdWN0cy9vcGVuL21hcAogIC8vIG5vdyByZXF1aXJlcyBhbiBBUEkga2V5CiAgdmFyIG1xU3ViZG9tYWlucyA9IFsgJ290aWxlMScsICdvdGlsZTInLCAnb3RpbGUzJywgJ290aWxlNCcgXTsKICB2YXIgbXFUaWxlVXJsUHJlZml4ID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSAnaHR0cHM6JyA/ICdodHRwOi8ve3N9Lm1xY2RuLmNvbScgOiAnaHR0cHM6Ly97c30tcy5tcWNkbi5jb20nOwogIHZhciBtcU1hcE9wdCA9IHthdHRyaWJ1dGlvbjogb3NtQXR0cmlidXRpb24rJywgVGlsZXMgQ291cnRlc3kgb2YgTWFwUXVlc3QnLCBtYXhOYXRpdmVab29tOiAxOCwgbWF4Wm9vbTogMjEsIHN1YmRvbWFpbnM6IG1xU3ViZG9tYWluc307CiAgYmFzZUxheWVyc1snTWFwUXVlc3QgT1NNJ10gPSBuZXcgTC5UaWxlTGF5ZXIobXFUaWxlVXJsUHJlZml4KycvdGlsZXMvMS4wLjAvbWFwL3t6fS97eH0ve3l9LmpwZycsIG1xTWFwT3B0KTsKICAqLwoKICAvLyBjYXJ0b2RiIGhhcyBzb21lIG5pY2UgdGlsZXMgdG9vIC0gYm90aCBkYXJrIGFuZCBsaWdodCBzdWJ0bGUgbWFwcyAtIGh0dHA6Ly9jYXJ0b2RiLmNvbS9iYXNlbWFwcy8KICAvLyAobm90IGF2YWlsYWJsZSBvdmVyIGh0dHBzIHRob3VnaCAtIG5vdCBvbiB0aGUgcmlnaHQgZG9tYWluIG5hbWUgYW55d2F5KQogIHZhciBjYXJ0b0F0dHIgPQogICAgJyZjb3B5OyA8YSBocmVmPSJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzLCAmY29weTsgPGEgaHJlZj0iaHR0cDovL2NhcnRvZGIuY29tL2F0dHJpYnV0aW9ucyI+Q2FydG9EQjwvYT4nOwogIHZhciBjYXJ0b1VybCA9ICdodHRwczovL3tzfS5iYXNlbWFwcy5jYXJ0b2Nkbi5jb20ve3RoZW1lfS97en0ve3h9L3t5fS5wbmcnOwogIGJhc2VMYXllcnNbJ0NhcnRvREIgRGFyayBNYXR0ZXInXSA9IEwudGlsZUxheWVyKGNhcnRvVXJsLCB7IGF0dHJpYnV0aW9uOiBjYXJ0b0F0dHIsIHRoZW1lOiAnZGFya19hbGwnIH0pOwogIGJhc2VMYXllcnNbJ0NhcnRvREIgUG9zaXRyb24nXSA9IEwudGlsZUxheWVyKGNhcnRvVXJsLCB7IGF0dHJpYnV0aW9uOiBjYXJ0b0F0dHIsIHRoZW1lOiAnbGlnaHRfYWxsJyB9KTsKCiAgLy8gR29vZ2xlIE1hcHMgLSBpbmNsdWRpbmcgaW5ncmVzcyBkZWZhdWx0ICh1c2luZyB0aGUgc3RvY2staW50ZWwgQVBJLWtleSkKICBiYXNlTGF5ZXJzWydHb29nbGUgRGVmYXVsdCBJbmdyZXNzIE1hcCddID0gTC5ncmlkTGF5ZXIuZ29vZ2xlTXV0YW50KHsKICAgIHR5cGU6ICdyb2FkbWFwJywKICAgIGJhY2tncm91bmRDb2xvcjogJyMwZTNkNGUnLAogICAgc3R5bGVzOiBbCiAgICAgIHsgZmVhdHVyZVR5cGU6ICdhbGwnLCBlbGVtZW50VHlwZTogJ2FsbCcsIHN0eWxlcnM6IFt7IHZpc2liaWxpdHk6ICdvbicgfSwgeyBodWU6ICcjMTMxYzFjJyB9LCB7IHNhdHVyYXRpb246ICctNTAnIH0sIHsgaW52ZXJ0X2xpZ2h0bmVzczogdHJ1ZSB9XSB9LAogICAgICB7IGZlYXR1cmVUeXBlOiAnd2F0ZXInLCBlbGVtZW50VHlwZTogJ2FsbCcsIHN0eWxlcnM6IFt7IHZpc2liaWxpdHk6ICdvbicgfSwgeyBodWU6ICcjMDA1ZWZmJyB9LCB7IGludmVydF9saWdodG5lc3M6IHRydWUgfV0gfSwKICAgICAgeyBmZWF0dXJlVHlwZTogJ3BvaScsIHN0eWxlcnM6IFt7IHZpc2liaWxpdHk6ICdvZmYnIH1dIH0sCiAgICAgIHsgZmVhdHVyZVR5cGU6ICd0cmFuc2l0JywgZWxlbWVudFR5cGU6ICdhbGwnLCBzdHlsZXJzOiBbeyB2aXNpYmlsaXR5OiAnb2ZmJyB9XSB9LAogICAgICB7IGZlYXR1cmVUeXBlOiAncm9hZCcsIGVsZW1lbnRUeXBlOiAnbGFiZWxzLmljb24nLCBzdHlsZXJzOiBbeyBpbnZlcnRfbGlnaHRuZXNzOiAhMCB9XSB9LAogICAgXSwKICB9KTsKICBiYXNlTGF5ZXJzWydHb29nbGUgUm9hZHMnXSA9IEwuZ3JpZExheWVyLmdvb2dsZU11dGFudCh7IHR5cGU6ICdyb2FkbWFwJyB9KTsKICB2YXIgdHJhZmZpY011dGFudCA9IEwuZ3JpZExheWVyLmdvb2dsZU11dGFudCh7IHR5cGU6ICdyb2FkbWFwJyB9KTsKICB0cmFmZmljTXV0YW50LmFkZEdvb2dsZUxheWVyKCdUcmFmZmljTGF5ZXInKTsKICBiYXNlTGF5ZXJzWydHb29nbGUgUm9hZHMgKyBUcmFmZmljJ10gPSB0cmFmZmljTXV0YW50OwogIHZhciB0cmFuc2l0TXV0YW50ID0gTC5ncmlkTGF5ZXIuZ29vZ2xlTXV0YW50KHsgdHlwZTogJ3JvYWRtYXAnIH0pOwogIHRyYW5zaXRNdXRhbnQuYWRkR29vZ2xlTGF5ZXIoJ1RyYW5zaXRMYXllcicpOwogIGJhc2VMYXllcnNbJ0dvb2dsZSBSb2FkcyArIFRyYW5zaXQnXSA9IHRyYW5zaXRNdXRhbnQ7CiAgYmFzZUxheWVyc1snR29vZ2xlIFNhdGVsbGl0ZSddID0gTC5ncmlkTGF5ZXIuZ29vZ2xlTXV0YW50KHsgdHlwZTogJ3NhdGVsbGl0ZScgfSk7CiAgYmFzZUxheWVyc1snR29vZ2xlIEh5YnJpZCddID0gTC5ncmlkTGF5ZXIuZ29vZ2xlTXV0YW50KHsgdHlwZTogJ2h5YnJpZCcgfSk7CiAgYmFzZUxheWVyc1snR29vZ2xlIFRlcnJhaW4nXSA9IEwuZ3JpZExheWVyLmdvb2dsZU11dGFudCh7IHR5cGU6ICd0ZXJyYWluJyB9KTsKCiAgcmV0dXJuIGJhc2VMYXllcnM7Cn0KCi8qKgogKiBDcmVhdGVzIGFuZCByZXR1cm5zIHRoZSBkZWZhdWx0IG92ZXJsYXkgbGF5ZXJzIGZvciB0aGUgbWFwLgogKiBTZXRzIHVwIHZhcmlvdXMgb3ZlcmxheSBsYXllcnMgaW5jbHVkaW5nIHBvcnRhbHMsIGxpbmtzLCBmaWVsZHMsIGFuZCBmYWN0aW9uLXNwZWNpZmljIGxheWVycy4KICoKICogQGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRPdmVybGF5cwogKiBAcmV0dXJucyB7T2JqZWN0LjxTdHJpbmcsIEwuTGF5ZXJHcm91cD59IEFuIG9iamVjdCBjb250YWluaW5nIG92ZXJsYXkgbGF5ZXJzIGZvciBwb3J0YWxzLCBsaW5rcywgZmllbGRzLCBhbmQgZmFjdGlvbnMKICovCmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRPdmVybGF5cygpIHsKICB2YXIgYWRkTGF5ZXJzID0ge307CgogIHZhciBsMExheWVyID0gbmV3IElJVEMuZmlsdGVycy5GaWx0ZXJMYXllcih7CiAgICBuYW1lOiAnVW5jbGFpbWVkL1BsYWNlaG9sZGVyIFBvcnRhbHMnLAogICAgZmlsdGVyOiBbCiAgICAgIHsgcG9ydGFsOiB0cnVlLCBkYXRhOiB7IHRlYW06ICdOJyB9IH0sCiAgICAgIHsgcG9ydGFsOiB0cnVlLCBkYXRhOiB7IGxldmVsOiB1bmRlZmluZWQgfSB9LAogICAgXSwKICB9KTsKICBhZGRMYXllcnNbbDBMYXllci5vcHRpb25zLm5hbWVdID0gbDBMYXllcjsKICBmb3IgKHZhciBpID0gMTsgaSA8PSA4OyBpKyspIHsKICAgIHZhciB0ID0gJ0xldmVsICcgKyBpICsgJyBQb3J0YWxzJzsKICAgIHZhciBwb3J0YWxzTGF5ZXIgPSBuZXcgSUlUQy5maWx0ZXJzLkZpbHRlckxheWVyKHsKICAgICAgbmFtZTogdCwKICAgICAgZmlsdGVyOiBbCiAgICAgICAgeyBwb3J0YWw6IHRydWUsIGRhdGE6IHsgbGV2ZWw6IGksIHRlYW06ICdSJyB9IH0sCiAgICAgICAgeyBwb3J0YWw6IHRydWUsIGRhdGE6IHsgbGV2ZWw6IGksIHRlYW06ICdFJyB9IH0sCiAgICAgICAgeyBwb3J0YWw6IHRydWUsIGRhdGE6IHsgbGV2ZWw6IGksIHRlYW06ICdNJyB9IH0sCiAgICAgIF0sCiAgICB9KTsKICAgIGFkZExheWVyc1t0XSA9IHBvcnRhbHNMYXllcjsKICB9CgogIHZhciBmaWVsZHNMYXllciA9IG5ldyBJSVRDLmZpbHRlcnMuRmlsdGVyTGF5ZXIoewogICAgbmFtZTogJ0ZpZWxkcycsCiAgICBmaWx0ZXI6IHsgZmllbGQ6IHRydWUgfSwKICB9KTsKICBhZGRMYXllcnNbZmllbGRzTGF5ZXIub3B0aW9ucy5uYW1lXSA9IGZpZWxkc0xheWVyOwoKICB2YXIgbGlua3NMYXllciA9IG5ldyBJSVRDLmZpbHRlcnMuRmlsdGVyTGF5ZXIoewogICAgbmFtZTogJ0xpbmtzJywKICAgIGZpbHRlcjogeyBsaW5rOiB0cnVlIH0sCiAgfSk7CiAgYWRkTGF5ZXJzW2xpbmtzTGF5ZXIub3B0aW9ucy5uYW1lXSA9IGxpbmtzTGF5ZXI7CgogIC8vIGZhY3Rpb24tc3BlY2lmaWMgbGF5ZXJzCiAgdmFyIHJlc2lzdGFuY2VMYXllciA9IG5ldyBJSVRDLmZpbHRlcnMuRmlsdGVyTGF5ZXIoewogICAgbmFtZTogd2luZG93LlRFQU1fTkFNRV9SRVMsCiAgICBmaWx0ZXI6IHsgcG9ydGFsOiB0cnVlLCBsaW5rOiB0cnVlLCBmaWVsZDogdHJ1ZSwgZGF0YTogeyB0ZWFtOiAnUicgfSB9LAogIH0pOwogIHZhciBlbmxpZ2h0ZW5lZExheWVyID0gbmV3IElJVEMuZmlsdGVycy5GaWx0ZXJMYXllcih7CiAgICBuYW1lOiB3aW5kb3cuVEVBTV9OQU1FX0VOTCwKICAgIGZpbHRlcjogeyBwb3J0YWw6IHRydWUsIGxpbms6IHRydWUsIGZpZWxkOiB0cnVlLCBkYXRhOiB7IHRlYW06ICdFJyB9IH0sCiAgfSk7CiAgdmFyIG1hY2hpbmFMYXllciA9IG5ldyBJSVRDLmZpbHRlcnMuRmlsdGVyTGF5ZXIoewogICAgbmFtZTogd2luZG93LlRFQU1fTkFNRV9NQUMsCiAgICBmaWx0ZXI6IHsgcG9ydGFsOiB0cnVlLCBsaW5rOiB0cnVlLCBmaWVsZDogdHJ1ZSwgZGF0YTogeyB0ZWFtOiAnTScgfSB9LAogIH0pOwoKICAvLyB0byBhdm9pZCBhbnkgZmF2b3VyaXRpc20sIHdlJ2xsIHB1dCB0aGUgcGxheWVyJ3Mgb3duIGZhY3Rpb24gbGF5ZXIgZmlyc3QKICBpZiAod2luZG93LlBMQVlFUi50ZWFtID09PSAnUkVTSVNUQU5DRScpIHsKICAgIGFkZExheWVyc1tyZXNpc3RhbmNlTGF5ZXIub3B0aW9ucy5uYW1lXSA9IHJlc2lzdGFuY2VMYXllcjsKICAgIGFkZExheWVyc1tlbmxpZ2h0ZW5lZExheWVyLm9wdGlvbnMubmFtZV0gPSBlbmxpZ2h0ZW5lZExheWVyOwogIH0gZWxzZSB7CiAgICBhZGRMYXllcnNbZW5saWdodGVuZWRMYXllci5vcHRpb25zLm5hbWVdID0gZW5saWdodGVuZWRMYXllcjsKICAgIGFkZExheWVyc1tyZXNpc3RhbmNlTGF5ZXIub3B0aW9ucy5uYW1lXSA9IHJlc2lzdGFuY2VMYXllcjsKICB9CgogIC8vIGFuZCBqdXN0IHB1dCBfX01BQ0hJTkFfXyBmYWN0aW9uIGxhc3QKICBhZGRMYXllcnNbd2luZG93LlRFQU1fTkFNRV9NQUNdID0gbWFjaGluYUxheWVyOwoKICByZXR1cm4gYWRkTGF5ZXJzOwogIC8qIGVzbGludC1lbmFibGUgZG90LW5vdGF0aW9uICAqLwp9CgovLyB0byBiZSBleHRlbmRlZCBpbiBhcHAuanMgKG9yIGJ5IHBsdWdpbnM6IGBzZXR1cC5wcmlvcml0eSA9ICdib290JztgKQp3aW5kb3cubWFwT3B0aW9ucyA9IHsKICBwcmVmZXJDYW52YXM6ICdQUkVGRVJfQ0FOVkFTJyBpbiB3aW5kb3cgPyB3aW5kb3cuUFJFRkVSX0NBTlZBUyA6IHRydWUsIC8vIGRlZmF1bHQgaXMgVFJVRQp9OwoKLyoqCiAqIEluaXRpYWxpemVzIHRoZSBMZWFmbGV0IG1hcCBhbmQgY29uZmlndXJlcyB2YXJpb3VzIG1hcCBsYXllcnMgYW5kIGV2ZW50IGxpc3RlbmVycy4KICogVGhpcyBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3Igc2V0dGluZyB1cCB0aGUgYmFzZSBtYXAsCiAqIGluY2x1ZGluZyB0aGUgZGVmYXVsdCBiYXNlbWFwIHRpbGVzIChDYXJ0b0RCLCBEZWZhdWx0IEluZ3Jlc3MgTWFwLCBHb29nbGUgTWFwcyksCiAqIGFuZCBjb25maWd1cmluZyB0aGUgbWFwJ3MgcHJvcGVydGllcyBzdWNoIGFzIGNlbnRlciwgem9vbSwgYm91bmRzLCBhbmQgcmVuZGVyZXIgb3B0aW9ucy4KICogSXQgYWxzbyBjbGVhcnMgdGhlICdMb2FkaW5nLCBwbGVhc2Ugd2FpdCcgbWVzc2FnZSBmcm9tIHRoZSBtYXAgY29udGFpbmVyLgogKgogKiBJbXBvcnRhbnQgZnVuY3Rpb25hbGl0aWVzOgogKiAtIEFkZHMgZHVtbXkgZGl2cyB0byBMZWFmbGV0IGNvbnRyb2wgYXJlYXMgdG8gYWNjb21tb2RhdGUgSUlUQyBVSSBlbGVtZW50cy4KICogLSBDcmVhdGVzIGFuZCBhZGRzIGJhc2UgbGF5ZXJzIGFuZCBvdmVybGF5cyB0byB0aGUgbWFwLgogKiAtIENvbmZpZ3VyZXMgZXZlbnQgbGlzdGVuZXJzIGZvciBtYXAgbW92ZW1lbnRzLCBpbmNsdWRpbmcgYWJvcnRpbmcgcGVuZGluZyByZXF1ZXN0cyBhbmQgcmVmcmVzaGluZyBtYXAgZGF0YS4KICogLSBNYW5hZ2VzIGNvb2tpZXMgZm9yIG1hcCBwb3NpdGlvbiBhbmQgem9vbSBsZXZlbC4KICogLSBIYW5kbGVzIHRoZSAnaWl0Y0xvYWRlZCcgaG9vayB0byBzZXQgdGhlIGluaXRpYWwgbWFwIHZpZXcgYW5kIGV2YWx1YXRlIFVSTCBwYXJhbWV0ZXJzIGZvciBwb3J0YWwgc2VsZWN0aW9uLgogKgogKiBAZnVuY3Rpb24gc2V0dXBNYXAKICovCndpbmRvdy5zZXR1cE1hcCA9IGZ1bmN0aW9uICgpIHsKICBzZXR1cENSUygpOwoKICAkKCcjbWFwJykudGV4dCgnJyk7IC8vIGNsZWFyICdMb2FkaW5nLCBwbGVhc2Ugd2FpdCcKCiAgdmFyIG1hcCA9IEwubWFwKAogICAgJ21hcCcsCiAgICBMLmV4dGVuZCgKICAgICAgewogICAgICAgIC8vIHByb3BlciBpbml0aWFsIHBvc2l0aW9uIGlzIG5vdyBkZWxheWVkIHVudGlsIGFsbCBwbHVnaW5zIGFyZSBsb2FkZWQgYW5kIHRoZSBiYXNlIGxheWVyIGlzIHNldAogICAgICAgIGNlbnRlcjogWzAsIDBdLAogICAgICAgIHpvb206IDEsCiAgICAgICAgY3JzOiBMLkNSUy5TMiwKICAgICAgICBtaW5ab29tOiB3aW5kb3cuTUlOX1pPT00sCiAgICAgICAgLy8gem9vbUFuaW1hdGlvbjogZmFsc2UsCiAgICAgICAgbWFya2VyWm9vbUFuaW1hdGlvbjogZmFsc2UsCiAgICAgICAgYm91bmNlQXRab29tTGltaXRzOiBmYWxzZSwKICAgICAgICBtYXhCb3VuZHNWaXNjb3NpdHk6IDAuNywKICAgICAgICB3b3JsZENvcHlKdW1wOiB0cnVlLAogICAgICB9LAogICAgICB3aW5kb3cubWFwT3B0aW9ucwogICAgKQogICk7CiAgdmFyIG1heF9sYXQgPSBtYXAub3B0aW9ucy5jcnMucHJvamVjdGlvbi5NQVhfTEFUSVRVREU7CiAgbWFwLnNldE1heEJvdW5kcyhbCiAgICBbbWF4X2xhdCwgMzYwXSwKICAgIFstbWF4X2xhdCwgLTM2MF0sCiAgXSk7CgogIEwuUmVuZGVyZXIubWVyZ2VPcHRpb25zKHsKICAgIHBhZGRpbmc6IHdpbmRvdy5SRU5ERVJFUl9QQURESU5HIHx8IDAuNSwKICB9KTsKCiAgLy8gYWRkIGVtcHR5IGRpdiB0byBsZWFmbGV0IGNvbnRyb2wgYXJlYXMgLSB0byBmb3JjZSBvdGhlciBsZWFmbGV0IGNvbnRyb2xzIHRvIG1vdmUgYXJvdW5kIElJVEMgVUkgZWxlbWVudHMKICAvLyBUT0RPPyBtb3ZlIHRoZSBhY3R1YWwgSUlUQyBET00gaW50byB0aGUgbGVhZmxldCBjb250cm9sIGFyZWFzLCBzbyBkdW1teSA8ZGl2PnMgYXJlbid0IG5lZWRlZAogIGlmICghd2luZG93LmlzU21hcnRwaG9uZSgpKSB7CiAgICAvLyBjaGF0IHdpbmRvdyBhcmVhCiAgICAkKCc8ZGl2PicpCiAgICAgIC5hZGRDbGFzcygnbGVhZmxldC1jb250cm9sJykKICAgICAgLndpZHRoKDcwOCkKICAgICAgLmhlaWdodCgxMDgpCiAgICAgIC5jc3MoewogICAgICAgICdwb2ludGVyLWV2ZW50cyc6ICdub25lJywKICAgICAgICBtYXJnaW46ICcwJywKICAgICAgfSkKICAgICAgLmFwcGVuZFRvKG1hcC5fY29udHJvbENvcm5lcnMuYm90dG9tbGVmdCk7CiAgfQogIHZhciBiYXNlTGF5ZXJzID0gY3JlYXRlRGVmYXVsdEJhc2VNYXBMYXllcnMoKTsKICB2YXIgb3ZlcmxheXMgPSBjcmVhdGVEZWZhdWx0T3ZlcmxheXMoKTsKCiAgdmFyIGxheWVyQ2hvb3NlciA9ICh3aW5kb3cubGF5ZXJDaG9vc2VyID0gbmV3IHdpbmRvdy5MYXllckNob29zZXIoYmFzZUxheWVycywgb3ZlcmxheXMsIHsgbWFwOiBtYXAgfSkuYWRkVG8obWFwKSk7CgogICQuZWFjaChvdmVybGF5cywgZnVuY3Rpb24gKF8sIGxheWVyKSB7CiAgICBpZiAobWFwLmhhc0xheWVyKGxheWVyKSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gLy8gY29udGludWUKCiAgICAvLyBhcyB1c2VycyBvZnRlbiBiZWNvbWUgY29uZnVzZWQgaWYgdGhleSBhY2NpZGVudGFsbHkgc3dpdGNoIGEgc3RhbmRhcmQgbGF5ZXIgb2ZmLCBkaXNwbGF5IGEgd2FybmluZyBpbiB0aGlzIGNhc2UKICAgICQoJyNwb3J0YWxkZXRhaWxzJykuaHRtbCgKICAgICAgJzxkaXYgY2xhc3M9ImxheWVyX29mZl93YXJuaW5nIj4nICsKICAgICAgICAnPHA+PGI+V2FybmluZzwvYj46IHNvbWUgb2YgdGhlIHN0YW5kYXJkIGxheWVycyBhcmUgdHVybmVkIG9mZi4gU29tZSBwb3J0YWxzL2xpbmtzL2ZpZWxkcyB3aWxsIG5vdCBiZSB2aXNpYmxlLjwvcD4nICsKICAgICAgICAnPGEgaWQ9ImVuYWJsZV9zdGFuZGFyZF9sYXllcnMiPkVuYWJsZSBzdGFuZGFyZCBsYXllcnM8L2E+JyArCiAgICAgICAgJzwvZGl2PicKICAgICk7CiAgICAkKCcjZW5hYmxlX3N0YW5kYXJkX2xheWVycycpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgJC5lYWNoKG92ZXJsYXlzLCBmdW5jdGlvbiAoaW5kLCBvdmVybGF5KSB7CiAgICAgICAgaWYgKCFtYXAuaGFzTGF5ZXIob3ZlcmxheSkpIHsKICAgICAgICAgIG1hcC5hZGRMYXllcihvdmVybGF5KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAkKCcjcG9ydGFsZGV0YWlscycpLmh0bWwoJycpOwogICAgfSk7CiAgICByZXR1cm4gZmFsc2U7IC8vIGJyZWFrCiAgfSk7CgogIG1hcC5hdHRyaWJ1dGlvbkNvbnRyb2wuc2V0UHJlZml4KCcnKTsKCiAgLyoqCiAgICogT3ZlcnJpZGUgZGVmYXVsdCBHb29nbGUgTWFwcyBhdHRyaWJ1dGlvbiB0byB1c2UgTGVhZmxldCdzIG5hdGl2ZSBhdHRyaWJ1dGlvbiBjb250cm9sCiAgICogaW5zdGVhZCBvZiBjcmVhdGluZyBzZXBhcmF0ZSBET00gZWxlbWVudHMuIEV4dHJhY3RzIHRleHQgY29udGVudCBmcm9tIEdvb2dsZSdzCiAgICogYXR0cmlidXRpb24gY29udGFpbmVyIGFuZCBhZGRzIGl0IHRvIExlYWZsZXQncyBjb250cm9sLgogICAqLwogIEwuR3JpZExheWVyLkdvb2dsZU11dGFudC5wcm90b3R5cGUuX3NldHVwQXR0cmlidXRpb24gPSBmdW5jdGlvbiAoZXYpIHsKICAgIGlmICghdGhpcy5fbWFwPy5hdHRyaWJ1dGlvbkNvbnRyb2wpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgICBjb25zdCBwb3MgPSBnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb247CiAgICBjb25zdCBjb250YWluZXIgPSBldi5wb3NpdGlvbnMuZ2V0KHBvcy5CT1RUT01fUklHSFQpOwogICAgY29uc3QgYXR0cmlidXRpb24gPSBjb250YWluZXI/LnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKT8udGV4dENvbnRlbnQ7CiAgICBpZiAoYXR0cmlidXRpb24pIHsKICAgICAgdGhpcy5fYXR0cmlidXRpb25UZXh0ID0gYXR0cmlidXRpb247IC8vINCh0L7RhdGA0LDQvdGP0LXQvCDRgtC10LrRgdGCINCw0YLRgNC40LHRg9GG0LjQuAogICAgICB0aGlzLl9tYXAuYXR0cmlidXRpb25Db250cm9sLmFkZEF0dHJpYnV0aW9uKGF0dHJpYnV0aW9uKTsKICAgIH0KICB9OwogIGNvbnN0IG9yaWdpbmFsR29vZ2xlTXV0YW50T25SZW1vdmUgPSBMLkdyaWRMYXllci5Hb29nbGVNdXRhbnQucHJvdG90eXBlLm9uUmVtb3ZlOwogIEwuR3JpZExheWVyLkdvb2dsZU11dGFudC5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiAobWFwKSB7CiAgICBvcmlnaW5hbEdvb2dsZU11dGFudE9uUmVtb3ZlLmNhbGwodGhpcywgbWFwKTsKICAgIGlmICh0aGlzLl9hdHRyaWJ1dGlvblRleHQgJiYgbWFwLmF0dHJpYnV0aW9uQ29udHJvbCkgewogICAgICBtYXAuYXR0cmlidXRpb25Db250cm9sLnJlbW92ZUF0dHJpYnV0aW9uKHRoaXMuX2F0dHJpYnV0aW9uVGV4dCk7CiAgICB9CiAgfTsKCiAgd2luZG93Lm1hcCA9IG1hcDsKCiAgbWFwLm9uKCdtb3ZlZW5kJywgZnVuY3Rpb24gKCkgewogICAgdmFyIGNlbnRlciA9IHRoaXMuZ2V0Q2VudGVyKCkud3JhcCgpOwogICAgd2luZG93LndyaXRlQ29va2llKCdpbmdyZXNzLmludGVsbWFwLmxhdCcsIGNlbnRlci5sYXQpOwogICAgd2luZG93LndyaXRlQ29va2llKCdpbmdyZXNzLmludGVsbWFwLmxuZycsIGNlbnRlci5sbmcpOwogICAgd2luZG93LndyaXRlQ29va2llKCdpbmdyZXNzLmludGVsbWFwLnpvb20nLCB0aGlzLmdldFpvb20oKSk7CiAgfSk7CgogIC8vIG1hcCB1cGRhdGUgc3RhdHVzIGhhbmRsaW5nICYgdXBkYXRlIG1hcCBob29rcwogIC8vIGVuc3VyZXMgb3JkZXIgb2YgY2FsbHMKICBtYXAub24oJ21vdmVzdGFydCcsIGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5yZXF1ZXN0cy5hYm9ydCgpOwogICAgd2luZG93LnN0YXJ0UmVmcmVzaFRpbWVvdXQoLTEpOwogIH0pOwogIG1hcC5vbignbW92ZWVuZCcsIGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5zdGFydFJlZnJlc2hUaW1lb3V0KHdpbmRvdy5PTl9NT1ZFX1JFRlJFU0ggKiAxMDAwKTsKICB9KTsKCiAgLy8gc2V0IGEgJ21vdmVlbmQnIGhhbmRsZXIgZm9yIHRoZSBtYXAgdG8gY2xlYXIgaWRsZSBzdGF0ZS4gZS5nLiBhZnRlciBtb2JpbGUgJ215IGxvY2F0aW9uJyBpcyB1c2VkLgogIC8vIHBvc3NpYmx5IHNvbWUgY2FzZXMgd2hlbiByZXNpemluZyBkZXNrdG9wIGJyb3dzZXIgdG9vCiAgbWFwLm9uKCdtb3ZlZW5kJywgd2luZG93LmlkbGVSZXNldCk7CgogIHdpbmRvdy5hZGRSZXN1bWVGdW5jdGlvbihmdW5jdGlvbiAoKSB7CiAgICB3aW5kb3cuc3RhcnRSZWZyZXNoVGltZW91dCh3aW5kb3cuT05fTU9WRV9SRUZSRVNIICogMTAwMCk7CiAgfSk7CgogIC8vIGNyZWF0ZSB0aGUgbWFwIGRhdGEgcmVxdWVzdGVyCiAgd2luZG93Lm1hcERhdGFSZXF1ZXN0ID0gbmV3IHdpbmRvdy5NYXBEYXRhUmVxdWVzdCgpOwogIHdpbmRvdy5tYXBEYXRhUmVxdWVzdC5zdGFydCgpOwoKICAvLyBzdGFydCB0aGUgcmVmcmVzaCBwcm9jZXNzIHdpdGggYSBzbWFsbCB0aW1lb3V0LCBzbyB0aGUgZmlyc3QgZGF0YSByZXF1ZXN0IGhhcHBlbnMgcXVpY2tseQogIC8vICh0aGUgY29kZSBvcmlnaW5hbGx5IGNhbGxlZCB0aGUgcmVxdWVzdCBmdW5jdGlvbiBkaXJlY3RseSwgYW5kIHRyaWdnZXJlZCBhIG5vcm1hbCBkZWxheSBmb3IgdGhlIG5leHQgcmVmcmVzaC4KICAvLyAgaG93ZXZlciwgdGhlIG1vdmVlbmQvem9vbWVuZCBnZXRzIHRyaWdnZXJlZCBvbiBtYXAgbG9hZCwgY2F1c2luZyBhIGR1cGxpY2F0ZSByZWZyZXNoLiB0aGlzIGhlbHBzIHByZXZlbnQgdGhhdAogIHdpbmRvdy5zdGFydFJlZnJlc2hUaW1lb3V0KHdpbmRvdy5PTl9NT1ZFX1JFRlJFU0ggKiAxMDAwKTsKCiAgLy8gYWRkcyBhIGJhc2UgbGF5ZXIgdG8gdGhlIG1hcC4gZG9uZSBzZXBhcmF0ZWx5IGZyb20gdGhlIGFib3ZlLAogIC8vIHNvIHRoYXQgcGx1Z2lucyB0aGF0IGFkZCBiYXNlIGxheWVycyBjYW4gYmUgdGhlIGRlZmF1bHQKICB3aW5kb3cuYWRkSG9vaygnaWl0Y0xvYWRlZCcsIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzdG9yZWQgPSBsYXllckNob29zZXIuZ2V0TGF5ZXIobGF5ZXJDaG9vc2VyLmxhc3RCYXNlTGF5ZXJOYW1lKTsKICAgIG1hcC5hZGRMYXllcihzdG9yZWQgfHwgYmFzZUxheWVyc1snQ2FydG9EQiBEYXJrIE1hdHRlciddKTsKCiAgICAvLyAoc2V0dGluZyBhbiBpbml0aWFsIHBvc2l0aW9uLCBiZWZvcmUgYSBiYXNlIGxheWVyIGlzIGFkZGVkLCBjYXVzZXMgaXNzdWVzIHdpdGggbGVhZmxldCkgLy8gdG9kbyBjaGVjawogICAgdmFyIHBvcyA9IGdldFBvc2l0aW9uKCk7CiAgICBpZiAoIXBvcykgewogICAgICBwb3MgPSB7IGNlbnRlcjogWzAsIDBdLCB6b29tOiAxIH07CiAgICAgIG1hcC5sb2NhdGUoeyBzZXRWaWV3OiB0cnVlIH0pOwogICAgfQogICAgbWFwLnNldFZpZXcocG9zLmNlbnRlciwgcG9zLnpvb20sIHsgcmVzZXQ6IHRydWUgfSk7CgogICAgLy8gcmVhZCBoZXJlIE9OQ0UsIHNvIHRoZSBVUkwgaXMgb25seSBldmFsdWF0ZWQgb25lIHRpbWUgYWZ0ZXIgdGhlCiAgICAvLyBuZWNlc3NhcnkgZGF0YSBoYXMgYmVlbiBsb2FkZWQuCiAgICB2YXIgcGxsID0gd2luZG93LmdldFVSTFBhcmFtKCdwbGwnKTsKICAgIGlmIChwbGwpIHsKICAgICAgcGxsID0gcGxsLnNwbGl0KCcsJyk7CiAgICAgIHdpbmRvdy51cmxQb3J0YWxMTCA9IG5vcm1MTChwbGxbMF0sIHBsbFsxXSkuY2VudGVyOwogICAgfQogICAgd2luZG93LnVybFBvcnRhbCA9IHdpbmRvdy5nZXRVUkxQYXJhbSgncGd1aWQnKTsKCiAgICAvLyB0b2RvIGNoZWNrCiAgICAvLyBsZWFmbGV0IG5vIGxvbmdlciBlbnN1cmVzIHRoZSBiYXNlIGxheWVyIHpvb20gaXMgc3VpdGFibGUgZm9yIHRoZSBtYXAgKGEgYnVnPyBmZWF0dXJlIGNoYW5nZT8pLCBzbyBkbyBzbyBoZXJlCiAgICBtYXAub24oJ2Jhc2VsYXllcmNoYW5nZScsIGZ1bmN0aW9uICgpIHsKICAgICAgbWFwLnNldFpvb20obWFwLmdldFpvb20oKSk7CiAgICB9KTsKICB9KTsKCiAgLyogISFUaGlzIGJsb2NrIGlzIGNvbW1lbnRlZCBvdXQgYXMgaXQncyB1bmxpa2VseSB0aGF0IHdlIHN0aWxsIG5lZWQgdGhpcyB3b3JrYXJvdW5kIGluIGxlYWZsZXQgMSsKICAvLyBvbiB6b29tZW5kLCBjaGVjayB0byBzZWUgdGhlIHpvb20gbGV2ZWwgaXMgYW4gaW50LCBhbmQgcmVzZXQgdGhlIHZpZXcgaWYgbm90CiAgLy8gKHRoZXJlJ3MgYSBidWcgb24gbW9iaWxlIHdoZXJlIHpvb20gbGV2ZWxzIHNvbWV0aW1lcyBlbmQgdXAgYXMgZnJhY3Rpb25hbCBsZXZlbHMuIHRoaXMgY2F1c2VzIHRoZSBiYXNlIG1hcCB0byBiZSBpbnZpc2libGUpCiAgbWFwLm9uKCd6b29tZW5kJywgZnVuY3Rpb24oKSB7CiAgICB2YXIgeiA9IG1hcC5nZXRab29tKCk7CiAgICBpZiAoeiAhPSBwYXJzZUludCh6KSkKICAgIHsKICAgICAgbG9nLndhcm4oJ05vbi1pbnRlZ2VyIHpvb20gbGV2ZWwgYXQgem9vbWVuZDogJyt6KycgLSB0cnlpbmcgdG8gZml4Li4uJyk7CiAgICAgIG1hcC5zZXRab29tKHBhcnNlSW50KHopLCB7YW5pbWF0ZTpmYWxzZX0pOwogICAgfQogIH0pOwogICovCgogIC8qICEhVGhpcyBibG9jayBpcyBjb21tZW50ZWQgb3V0IGFzIGl0J3MgdW5saWtlbHkgdGhhdCB3ZSBzdGlsbCBuZWVkIHRoaXMgd29ya2Fyb3VuZCBpbiBsZWFmbGV0IDErCiAgLy8gRml4IExlYWZsZXQ6IGhhbmRsZSB0b3VjaGNhbmNlbCBldmVudHMgaW4gRHJhZ2dhYmxlCiAgTC5EcmFnZ2FibGUucHJvdG90eXBlLl9vbkRvd25PcmlnID0gTC5EcmFnZ2FibGUucHJvdG90eXBlLl9vbkRvd247CiAgTC5EcmFnZ2FibGUucHJvdG90eXBlLl9vbkRvd24gPSBmdW5jdGlvbihlKSB7CiAgICBMLkRyYWdnYWJsZS5wcm90b3R5cGUuX29uRG93bk9yaWcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgICBpZihlLnR5cGUgPT09ICJ0b3VjaHN0YXJ0IikgewogICAgICBMLkRvbUV2ZW50Lm9uKGRvY3VtZW50LCAidG91Y2hjYW5jZWwiLCB0aGlzLl9vblVwLCB0aGlzKTsKICAgIH0KICB9OwogICovCn07CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBtYXBfZGF0YV9jYWxjX3Rvb2xzLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygnbWFwX2RhdGFfY2FsY190b29scycpOwovKiBnbG9iYWwgbG9nIC0tIGVzbGludCAqLwoKLyoqCiAqIEBmaWxlIENvbnRhaW5zIGZ1bmN0aW9ucyBmb3IgY2FsY3VsYXRpbmcgbWFwIGRhdGEgcmVxdWVzdCBwYXJhbWV0ZXJzIGFuZCBjb252ZXJ0aW5nIGJldHdlZW4gbGF0L2xuZyBhbmQgbWFwIHRpbGVzLgogKiBJbmdyZXNzIEludGVsIHNwbGl0cyB1cCByZXF1ZXN0cyBmb3IgbWFwIGRhdGEgKHBvcnRhbHMsIGxpbmtzLCBmaWVsZHMpIGludG8gdGlsZXMuCiAqIFRvIGdldCBkYXRhIGZvciB0aGUgY3VycmVudCB2aWV3cG9ydCAoaS5lLiB3aGF0IGlzIGN1cnJlbnRseSB2aXNpYmxlKSBpdCBmaXJzdCBjYWxjdWxhdGVzIHdoaWNoIHRpbGVzIGludGVyc2VjdC4KICogRm9yIGFsbCB0aG9zZSB0aWxlcywgaXQgdGhlbiBjYWxjdWxhdGVzIHRoZSBsYXQvbG5nIGJvdW5kcyBvZiB0aGF0IHRpbGUgYW5kIGEgcXVhZGtleS4KICogQm90aCB0aGUgYm91bmRzIGFuZCB0aGUgcXVhZGtleSBhcmUg4oCcc29tZXdoYXTigJ0gcmVxdWlyZWQgdG8gZ2V0IGNvbXBsZXRlIGRhdGEuCiAqIENvbnZlcnNpb24gZnVuY3Rpb25zIGNvdXJ0ZXN5IG9mCiAqIFt3aWtpLm9wZW5zdHJlZXRtYXAub3JnL3dpa2kvU2xpcHB5X21hcF90aWxlbmFtZXNdKGh0dHA6Ly93aWtpLm9wZW5zdHJlZXRtYXAub3JnL3dpa2kvU2xpcHB5X21hcF90aWxlbmFtZXMpCiAqIEBtb2R1bGUgbWFwX2RhdGFfY2FsY190b29scwogKi8KCi8qKgogKiBTZXRzIHVwIHRoZSBkYXRhIHRpbGUgcGFyYW1ldGVycyB1c2VkIGZvciBtYXAgZGF0YSByZXF1ZXN0cy4gVGhpcyBmdW5jdGlvbiBpbml0aWFsaXplcyB0aGUgVElMRV9QQVJBTVMKICogZ2xvYmFsIG9iamVjdCB3aXRoIGRlZmF1bHQgdmFsdWVzIG9yIHZhbHVlcyBkZXRlY3RlZCBmcm9tIHRoZSBzdG9jayBJbnRlbCBtYXAuCiAqCiAqIEBmdW5jdGlvbiBzZXR1cERhdGFUaWxlUGFyYW1zCiAqLwp3aW5kb3cuc2V0dXBEYXRhVGlsZVBhcmFtcyA9IGZ1bmN0aW9uICgpIHsKICAvLyBkZWZhdWx0IHZhbHVlcyAtIHVzZWQgdG8gZmFsbCBiYWNrIHRvIGlmIHdlIGNhbid0IGRldGVjdCB0aG9zZSB1c2VkIGluIHN0b2NrIGludGVsCiAgdmFyIERFRkFVTFRfWk9PTV9UT19USUxFU19QRVJfRURHRSA9IFsxLCAxLCAxLCA0MCwgNDAsIDgwLCA4MCwgMzIwLCAxMDAwLCAyMDAwLCAyMDAwLCA0MDAwLCA4MDAwLCAxNjAwMCwgMTYwMDAsIDMyMDAwXTsKICB2YXIgREVGQVVMVF9aT09NX1RPX0xFVkVMID0gWzgsIDgsIDgsIDgsIDcsIDcsIDcsIDYsIDYsIDUsIDQsIDQsIDMsIDIsIDIsIDEsIDFdOwoKICAvLyBzdG9jayBpbnRlbCBkb2Vzbid0IGhhdmUgdGhpcyBhcnJheSAodGhleSB1c2UgYSBzd2l0Y2ggc3RhdGVtZW50IGluc3RlYWQpLCBidXQgdGhpcyBpcyBmYXIgbmVhdGVyCiAgdmFyIERFRkFVTFRfWk9PTV9UT19MSU5LX0xFTkdUSCA9IFsyMDAwMDAsIDIwMDAwMCwgMjAwMDAwLCAyMDAwMDAsIDIwMDAwMCwgNjAwMDAsIDYwMDAwLCAxMDAwMCwgNTAwMCwgMjUwMCwgMjUwMCwgODAwLCAzMDAsIDAsIDBdOwoKICB3aW5kb3cuVElMRV9QQVJBTVMgPSB7fTsKCiAgLy8gbm90IGluIHN0b2NrIHRvIGRldGVjdCAtIHdlJ2xsIGhhdmUgdG8gYXNzdW1lIHRoZSBhYm92ZSB2YWx1ZXMuLi4KICB3aW5kb3cuVElMRV9QQVJBTVMuWk9PTV9UT19MSU5LX0xFTkdUSCA9IERFRkFVTFRfWk9PTV9UT19MSU5LX0xFTkdUSDsKCiAgaWYgKHdpbmRvdy5uaWFudGljX3BhcmFtcy5aT09NX1RPX0xFVkVMICYmIHdpbmRvdy5uaWFudGljX3BhcmFtcy5USUxFU19QRVJfRURHRSkgewogICAgd2luZG93LlRJTEVfUEFSQU1TLlpPT01fVE9fTEVWRUwgPSB3aW5kb3cubmlhbnRpY19wYXJhbXMuWk9PTV9UT19MRVZFTDsKICAgIHdpbmRvdy5USUxFX1BBUkFNUy5USUxFU19QRVJfRURHRSA9IHdpbmRvdy5uaWFudGljX3BhcmFtcy5USUxFU19QRVJfRURHRTsKCiAgICAvLyBsYXp5IG51bWVyaWNhbCBhcnJheSBjb21wYXJpc29uCiAgICBpZiAoSlNPTi5zdHJpbmdpZnkod2luZG93Lm5pYW50aWNfcGFyYW1zLlpPT01fVE9fTEVWRUwpICE9PSBKU09OLnN0cmluZ2lmeShERUZBVUxUX1pPT01fVE9fTEVWRUwpKSB7CiAgICAgIGxvZy53YXJuKCdUaWxlIHBhcmFtZXRlciBaT09NX1RPX0xFVkVMIGhhdmUgY2hhbmdlZCBpbiBzdG9jayBpbnRlbC4gRGV0ZWN0ZWQgY29ycmVjdCB2YWx1ZXMsIGJ1dCBjb2RlIHNob3VsZCBiZSB1cGRhdGVkJyk7CiAgICB9CiAgICBpZiAoSlNPTi5zdHJpbmdpZnkod2luZG93Lm5pYW50aWNfcGFyYW1zLlRJTEVTX1BFUl9FREdFKSAhPT0gSlNPTi5zdHJpbmdpZnkoREVGQVVMVF9aT09NX1RPX1RJTEVTX1BFUl9FREdFKSkgewogICAgICBsb2cud2FybignVGlsZSBwYXJhbWV0ZXIgVElMRVNfUEVSX0VER0UgaGF2ZSBjaGFuZ2VkIGluIHN0b2NrIGludGVsLiBEZXRlY3RlZCBjb3JyZWN0IHZhbHVlcywgYnV0IGNvZGUgc2hvdWxkIGJlIHVwZGF0ZWQnKTsKICAgIH0KICB9IGVsc2UgewogICAgd2luZG93LmRpYWxvZyh7CiAgICAgIHRpdGxlOiAnSUlUQyBXYXJuaW5nJywKICAgICAgaHRtbDoKICAgICAgICAnPHA+SUlUQyBmYWlsZWQgdG8gZGV0ZWN0IHRoZSBaT09NX1RPX0xFVkVMIGFuZC9vciBUSUxFU19QRVJfRURHRSBzZXR0aW5ncyBmcm9tIHRoZSBzdG9jayBpbnRlbCBzaXRlLjwvcD4nICsKICAgICAgICAiPHA+SUlUQyBpcyBub3cgdXNpbmcgZmFsbGJhY2sgZGVmYXVsdCB2YWx1ZXMuIEhvd2V2ZXIsIGlmIGRldGVjdGlvbiBoYXMgZmFpbGVkIGl0J3MgbGlrZWx5IHRoZSB2YWx1ZXMgaGF2ZSBjaGFuZ2VkLiIgKwogICAgICAgICcgSUlUQyBtYXkgbm90IGxvYWQgdGhlIG1hcCBpZiB0aGVzZSBkZWZhdWx0IHZhbHVlcyBhcmUgd3JvbmcuPC9wPicsCiAgICB9KTsKCiAgICB3aW5kb3cuVElMRV9QQVJBTVMuWk9PTV9UT19MRVZFTCA9IERFRkFVTFRfWk9PTV9UT19MRVZFTDsKICAgIHdpbmRvdy5USUxFX1BBUkFNUy5USUxFU19QRVJfRURHRSA9IERFRkFVTFRfWk9PTV9UT19USUxFU19QRVJfRURHRTsKICB9CgogIC8vIDIwMTUtMDctMDE6IG5pYW50aWMgYWRkZWQgY29kZSB0byB0aGUgc3RvY2sgc2l0ZSB0aGF0IG92ZXJyaWRlcyB0aGUgbWluIHpvb20gbGV2ZWwgZm9yIHVuY2xhaW1lZCBwb3J0YWxzIHRvIDE1IGFuZCBhYm92ZQogIC8vIGluc3RlYWQgb2YgdXBkYXRpbmcgdGhlIHpvb20tdG8tbGV2ZWwgYXJyYXkuIG1ha2VzIG5vIHNlbnNlIHJlYWxseS4uLi4KICAvLyB3ZSdsbCBqdXN0IGNob3Agb2ZmIHRoZSBhcnJheSBhdCB0aGF0IHBvaW50LCBzbyB0aGUgY29kZSBkZWZhdWx0cyB0byBsZXZlbCAwICh1bmNsYWltZWQpIGV2ZXJ5d2hlcmUuLi4KICB3aW5kb3cuVElMRV9QQVJBTVMuWk9PTV9UT19MRVZFTCA9IHdpbmRvdy5USUxFX1BBUkFNUy5aT09NX1RPX0xFVkVMLnNsaWNlKDAsIDE1KTsgLy8gZGVwcmVjYXRlZAp9OwoKLyoqCiAqIEdldHMgdGhlIG1hcCB6b29tIHRpbGUgcGFyYW1ldGVycyBmb3IgYSBzcGVjaWZpYyB6b29tIGxldmVsLiBJdCBjYWxjdWxhdGVzIHRoZSB0aWxlIGxldmVsLCBudW1iZXIgb2YgdGlsZXMgcGVyIGVkZ2UsCiAqIG1pbmltdW0gbGluayBsZW5ndGgsIGFuZCB3aGV0aGVyIHBvcnRhbHMgYXJlIGF2YWlsYWJsZSBhdCB0aGUgc3BlY2lmaWVkIHpvb20gbGV2ZWwuCiAqCiAqIEBmdW5jdGlvbiBnZXRNYXBab29tVGlsZVBhcmFtZXRlcnMKICogQHBhcmFtIHtudW1iZXJ9IHpvb20gLSBUaGUgbWFwIHpvb20gbGV2ZWwuCiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRpbGUgcGFyYW1ldGVycyBmb3IgdGhlIGdpdmVuIHpvb20gbGV2ZWwuCiAqLwp3aW5kb3cuZ2V0TWFwWm9vbVRpbGVQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKHpvb20pIHsKICB2YXIgbWF4VGlsZXNQZXJFZGdlID0gd2luZG93LlRJTEVfUEFSQU1TLlRJTEVTX1BFUl9FREdFW3dpbmRvdy5USUxFX1BBUkFNUy5USUxFU19QRVJfRURHRS5sZW5ndGggLSAxXTsKCiAgcmV0dXJuIHsKICAgIGxldmVsOiB3aW5kb3cuVElMRV9QQVJBTVMuWk9PTV9UT19MRVZFTFt6b29tXSB8fCAwLCAvLyBkZXByZWNhdGVkCiAgICB0aWxlc1BlckVkZ2U6IHdpbmRvdy5USUxFX1BBUkFNUy5USUxFU19QRVJfRURHRVt6b29tXSB8fCBtYXhUaWxlc1BlckVkZ2UsCiAgICBtaW5MaW5rTGVuZ3RoOiB3aW5kb3cuVElMRV9QQVJBTVMuWk9PTV9UT19MSU5LX0xFTkdUSFt6b29tXSB8fCAwLAogICAgaGFzUG9ydGFsczogem9vbSA+PSB3aW5kb3cuVElMRV9QQVJBTVMuWk9PTV9UT19MSU5LX0xFTkdUSC5sZW5ndGgsIC8vIG5vIHBvcnRhbHMgcmV0dXJuZWQgYXQgYWxsIHdoZW4gbGluayBsZW5ndGggbGltaXRzIHRoaW5ncwogICAgem9vbTogem9vbSwgLy8gaW5jbHVkZSB0aGUgem9vbSBsZXZlbCwgZm9yIHJlZmVyZW5jZQogIH07Cn07Cgp3aW5kb3cuZ2V0RGF0YVpvb21UaWxlUGFyYW1ldGVycyA9IGZ1bmN0aW9uICh6b29tKSB7CiAgem9vbSA9IGFyZ3VtZW50cy5sZW5ndGggPyB6b29tIDogd2luZG93Lm1hcC5nZXRab29tKCk7CiAgdmFyIGRhdGFab29tID0gd2luZG93LmdldERhdGFab29tRm9yTWFwWm9vbSh6b29tKTsKICByZXR1cm4gd2luZG93LmdldE1hcFpvb21UaWxlUGFyYW1ldGVycyhkYXRhWm9vbSk7Cn07CgovKioKICogRGV0ZXJtaW5lcyB0aGUgZGF0YSB6b29tIGxldmVsIGZvciBhIGdpdmVuIG1hcCB6b29tIGxldmVsLiBUaGlzIGZ1bmN0aW9uIGFkanVzdHMgdGhlIHpvb20gbGV2ZWwgZm9yCiAqIGRhdGEgcmVxdWVzdHMgYmFzZWQgb24gdmFyaW91cyBmYWN0b3JzIHRvIG9wdGltaXplIGNhY2hpbmcgcGVyZm9ybWFuY2UgYW5kIHNlcnZlciBsb2FkLgogKgogKiBAZnVuY3Rpb24gZ2V0RGF0YVpvb21Gb3JNYXBab29tCiAqIEBwYXJhbSB7bnVtYmVyfSB6b29tIC0gVGhlIGN1cnJlbnQgbWFwIHpvb20gbGV2ZWwuCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhZGp1c3RlZCB6b29tIGxldmVsIGZvciBkYXRhIHJlcXVlc3RzLgogKi8Kd2luZG93LmdldERhdGFab29tRm9yTWFwWm9vbSA9IGZ1bmN0aW9uICh6b29tKSB7CiAgLy8gd2UgY2FuIGZldGNoIGRhdGEgYXQgYSB6b29tIGxldmVsIGRpZmZlcmVudCB0byB0aGUgbWFwIHpvb20uCgogIC8vIE5PVEU6IHRoZSBzcGVjaWZpY3Mgb2YgdGhpcyBhcmUgdGlnaHRseSBjb3VwbGVkIHdpdGggdGhlIGFib3ZlIFpPT01fVE9fTEVWRUwgYW5kIFRJTEVTX1BFUl9FREdFIGFycmF5cwoKICAvLyBmaXJzdGx5LCBzb21lIG9mIElJVENzIHpvb20gbGV2ZWxzLCBkZXBlbmRpbmcgb24gYmFzZSBtYXAgbGF5ZXIsIGNhbiBiZSBoaWdoZXIgdGhhbiBzdG9jay4gbGltaXQgem9vbSBsZXZlbAogIC8vIChzdG9jayBzaXRlIG1heCB6b29tIG1heSB2YXJ5IGRlcGVuZGluZyBvbiBnb29nbGUgbWFwcyBkZXRhaWwgaW4gdGhlIGFyZWEgLSAyMCBvciAyMSBtYXggaXMgY29tbW9uKQogIGlmICh6b29tID4gMjEpIHsKICAgIHpvb20gPSAyMTsKICB9CgogIC8vIHRvIGltcHJvdmUgdGhlIGNhY2hlaW5nIHBlcmZvcm1hbmNlLCB3ZSB0cnkgYW5kIGxpbWl0IHRoZSBudW1iZXIgb2Ygem9vbSBsZXZlbHMgd2UgcmV0cmlldmUgZGF0YSBmb3IKICAvLyB0byBhdm9pZCBpbXBhY3Rpbmcgc2VydmVyIGxvYWQsIHdlIGtlZXAgb3Vyc2VsdmVzIHJlc3RyaWN0ZWQgdG8gYSB6b29tIGxldmVsIHdpdGggdGhlIHNhbmUgbnVtYmVyCiAgLy8gb2YgdGlsZXNQZXJFZGdlIGFuZCBwb3J0YWwgbGV2ZWxzIHZpc2libGUKCiAgdmFyIG9yaWdUaWxlUGFyYW1zID0gd2luZG93LmdldE1hcFpvb21UaWxlUGFyYW1ldGVycyh6b29tKTsKCiAgd2hpbGUgKHpvb20gPiB3aW5kb3cuTUlOX1pPT00pIHsKICAgIHZhciBuZXdUaWxlUGFyYW1zID0gd2luZG93LmdldE1hcFpvb21UaWxlUGFyYW1ldGVycyh6b29tIC0gMSk7CgogICAgaWYgKAogICAgICBuZXdUaWxlUGFyYW1zLnRpbGVzUGVyRWRnZSAhPT0gb3JpZ1RpbGVQYXJhbXMudGlsZXNQZXJFZGdlIHx8CiAgICAgIG5ld1RpbGVQYXJhbXMuaGFzUG9ydGFscyAhPT0gb3JpZ1RpbGVQYXJhbXMuaGFzUG9ydGFscyB8fAogICAgICBuZXdUaWxlUGFyYW1zLmxldmVsICogbmV3VGlsZVBhcmFtcy5oYXNQb3J0YWxzICE9PSBvcmlnVGlsZVBhcmFtcy5sZXZlbCAqIG9yaWdUaWxlUGFyYW1zLmhhc1BvcnRhbHMgLy8gbXVsdGlwbHkgYnkgJ2hhc1BvcnRhbHMnIGJvb2wgLSBzbyBjb21wYXJpc29uIGRvZXMgbm90IG1hdHRlciB3aGVuIG5vIHBvcnRhbHMgYXZhaWxhYmxlCiAgICApIHsKICAgICAgLy8gc3dpdGNoaW5nIHRvIHpvb20tMSB3b3VsZCByZXN1bHQgaW4gYSBkaWZmZXJlbnQgZGV0YWlsIGxldmVsIC0gc28gd2UgYWJvcnQgY2hhbmdpbmcgdGhpbmdzCiAgICAgIGJyZWFrOwogICAgfSBlbHNlIHsKICAgICAgLy8gY2hhbmdpbmcgdG8gem9vbSA9IHpvb20tMSByZXN1bHRzIGluIGlkZW50aWNhbCB0aWxlIHBhcmFtZXRlcnMgLSBzbyB3ZSBjYW4gc2FmZWx5IHN0ZXAgYmFjawogICAgICAvLyB3aXRoIG5vIGluY3JlYXNlIGluIGVpdGhlciBzZXJ2ZXIgbG9hZCBvciBudW1iZXIgb2YgcmVxdWVzdHMKICAgICAgem9vbSA9IHpvb20gLSAxOwogICAgfQogIH0KCiAgcmV0dXJuIHpvb207Cn07Cgp3aW5kb3cubG5nVG9UaWxlID0gZnVuY3Rpb24gKGxuZywgcGFyYW1zKSB7CiAgcmV0dXJuIE1hdGguZmxvb3IoKChsbmcgKyAxODApIC8gMzYwKSAqIHBhcmFtcy50aWxlc1BlckVkZ2UpOwp9OwoKd2luZG93LmxhdFRvVGlsZSA9IGZ1bmN0aW9uIChsYXQsIHBhcmFtcykgewogIHJldHVybiBNYXRoLmZsb29yKCgoMSAtIE1hdGgubG9nKE1hdGgudGFuKChsYXQgKiBNYXRoLlBJKSAvIDE4MCkgKyAxIC8gTWF0aC5jb3MoKGxhdCAqIE1hdGguUEkpIC8gMTgwKSkgLyBNYXRoLlBJKSAvIDIpICogcGFyYW1zLnRpbGVzUGVyRWRnZSk7Cn07Cgp3aW5kb3cudGlsZVRvTG5nID0gZnVuY3Rpb24gKHgsIHBhcmFtcykgewogIHJldHVybiAoeCAvIHBhcmFtcy50aWxlc1BlckVkZ2UpICogMzYwIC0gMTgwOwp9OwoKd2luZG93LnRpbGVUb0xhdCA9IGZ1bmN0aW9uICh5LCBwYXJhbXMpIHsKICB2YXIgbiA9IE1hdGguUEkgLSAoMiAqIE1hdGguUEkgKiB5KSAvIHBhcmFtcy50aWxlc1BlckVkZ2U7CiAgcmV0dXJuICgxODAgLyBNYXRoLlBJKSAqIE1hdGguYXRhbigwLjUgKiAoTWF0aC5leHAobikgLSBNYXRoLmV4cCgtbikpKTsKfTsKCndpbmRvdy5wb2ludFRvVGlsZUlkID0gZnVuY3Rpb24gKHBhcmFtcywgeCwgeSkgewogIC8vIGNoYW5nZSB0byBxdWFka2V5IGNvbnN0cnVjdGlvbgogIC8vIGFzIG9mIDIwMTQtMDUtMDY6IHpvb21feF95X21pbmx2bF9tYXhsdmxfbWF4aGVhbHRoCgogIHJldHVybiBwYXJhbXMuem9vbSArICdfJyArIHggKyAnXycgKyB5ICsgJ18nICsgcGFyYW1zLmxldmVsICsgJ184XzEwMCc7Cn07CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBtYXBfZGF0YV9kZWJ1Zy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ21hcF9kYXRhX2RlYnVnJyk7Ci8qIGdsb2JhbCBMIC0tIGVzbGludCAqLwoKLyoqCiAqIENvbnRhaW5zIGZ1bmN0aW9ucyBmb3IgcmVuZGVyaW5nIGRlYnVnIHRpbGVzIG9uIHRoZSBtYXAuIFRoZXNlIGFyZSB1c2VkIGZvciBkZWJ1Z2dpbmcgbWFwIGRhdGEgdGlsZXMuCiAqIEBjbGFzcyBSZW5kZXJEZWJ1Z1RpbGVzCiAqLwp3aW5kb3cuUmVuZGVyRGVidWdUaWxlcyA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLkNMRUFSX0NIRUNLX1RJTUUgPSAwLjE7CiAgdGhpcy5GQURFX1RJTUUgPSAxLjA7CgogIHRoaXMuZGVidWdUaWxlTGF5ZXIgPSBMLmxheWVyR3JvdXAoKTsKICB3aW5kb3cubGF5ZXJDaG9vc2VyLmFkZE92ZXJsYXkodGhpcy5kZWJ1Z1RpbGVMYXllciwgJ0RFQlVHIERhdGEgVGlsZXMnLCB7IGRlZmF1bHQ6IGZhbHNlIH0pOwoKICB0aGlzLmRlYnVnVGlsZVRvUmVjdGFuZ2xlID0ge307CiAgdGhpcy5kZWJ1Z1RpbGVDbGVhclRpbWVzID0ge307CiAgdGhpcy50aW1lciA9IHVuZGVmaW5lZDsKfTsKCi8qKgogKiBSZXNldHMgdGhlIGRlYnVnIHRpbGVzIGJ5IGNsZWFyaW5nIGFsbCBsYXllcnMsIHJlY3RhbmdsZXMgYW5kIGNsZWFyIHRpbWVzLgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIFJlbmRlckRlYnVnVGlsZXMKICovCndpbmRvdy5SZW5kZXJEZWJ1Z1RpbGVzLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLmRlYnVnVGlsZUxheWVyLmNsZWFyTGF5ZXJzKCk7CiAgdGhpcy5kZWJ1Z1RpbGVUb1JlY3RhbmdsZSA9IHt9OwogIHRoaXMuZGVidWdUaWxlQ2xlYXJUaW1lcyA9IHt9Owp9OwoKLyoqCiAqIENyZWF0ZXMgYSBuZXcgZGVidWcgdGlsZSB3aXRoIHRoZSBzcGVjaWZpZWQgSUQgYW5kIGJvdW5kcy4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXJEZWJ1Z1RpbGVzCiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgZGVidWcgdGlsZS4KICogQHBhcmFtIHtMLkxhdExuZ0JvdW5kc30gYm91bmRzIC0gVGhlIGdlb2dyYXBoaWNhbCBib3VuZHMgb2YgdGhlIHRpbGUuCiAqLwp3aW5kb3cuUmVuZGVyRGVidWdUaWxlcy5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGlkLCBib3VuZHMpIHsKICB2YXIgcyA9IHsgY29sb3I6ICcjNjY2Jywgd2VpZ2h0OiAxLCBvcGFjaXR5OiAwLjQsIGZpbGxDb2xvcjogJyM2NjYnLCBmaWxsT3BhY2l0eTogMC4xLCBpbnRlcmFjdGl2ZTogZmFsc2UgfTsKCiAgYm91bmRzID0gbmV3IEwuTGF0TG5nQm91bmRzKGJvdW5kcyk7CiAgYm91bmRzID0gYm91bmRzLnBhZCgtMC4wMik7CgogIHZhciBsID0gTC5yZWN0YW5nbGUoYm91bmRzLCBzKTsKICB0aGlzLmRlYnVnVGlsZVRvUmVjdGFuZ2xlW2lkXSA9IGw7CiAgdGhpcy5kZWJ1Z1RpbGVMYXllci5hZGRMYXllcihsKTsKICBpZiAod2luZG93Lm1hcC5oYXNMYXllcih0aGlzLmRlYnVnVGlsZUxheWVyKSkgewogICAgLy8gb25seSBicmluZyB0byBiYWNrIGlmIHdlIGhhdmUgdGhlIGRlYnVnIGxheWVyIHR1cm5lZCBvbgogICAgbC5icmluZ1RvQmFjaygpOwogIH0KfTsKCi8qKgogKiBTZXRzIHRoZSBjb2xvciBvZiB0aGUgYm9yZGVyIGFuZCBmaWxsIGZvciBhIHNwZWNpZmljIGRlYnVnIHRpbGUuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyRGVidWdUaWxlcwogKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgSUQgb2YgdGhlIGRlYnVnIHRpbGUuCiAqIEBwYXJhbSB7c3RyaW5nfSBib3JkZXJjb2wgLSBUaGUgY29sb3IgZm9yIHRoZSBib3JkZXIuCiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxsY29sIC0gVGhlIGNvbG9yIGZvciB0aGUgZmlsbC4KICovCndpbmRvdy5SZW5kZXJEZWJ1Z1RpbGVzLnByb3RvdHlwZS5zZXRDb2xvdXIgPSBmdW5jdGlvbiAoaWQsIGJvcmRlcmNvbCwgZmlsbGNvbCkgewogIHZhciBsID0gdGhpcy5kZWJ1Z1RpbGVUb1JlY3RhbmdsZVtpZF07CiAgaWYgKGwpIHsKICAgIHZhciBzID0geyBjb2xvcjogYm9yZGVyY29sLCBmaWxsQ29sb3I6IGZpbGxjb2wgfTsKICAgIGwuc2V0U3R5bGUocyk7CiAgfQp9OwoKLyoqCiAqIFNldHMgdGhlIHN0YXRlIG9mIGEgc3BlY2lmaWMgZGVidWcgdGlsZS4gQ2hhbmdlcyBpdHMgY29sb3IgYmFzZWQgb24gdGhlIHN0YXRlLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIFJlbmRlckRlYnVnVGlsZXMKICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIElEIG9mIHRoZSBkZWJ1ZyB0aWxlLgogKiBAcGFyYW0ge3N0cmluZ30gc3RhdGUgLSBUaGUgc3RhdGUgb2YgdGhlIHRpbGUgKGUuZy4sICdvaycsICdlcnJvcicsICdyZXF1ZXN0ZWQnKS4KICovCndpbmRvdy5SZW5kZXJEZWJ1Z1RpbGVzLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChpZCwgc3RhdGUpIHsKICB2YXIgY29sID0gJyNmMGYnOwogIHZhciBmaWxsID0gJyNmMGYnOwogIHZhciBjbGVhckRlbGF5ID0gLTE7CiAgc3dpdGNoIChzdGF0ZSkgewogICAgY2FzZSAnb2snOgogICAgICBjb2wgPSAnIzBmMCc7CiAgICAgIGZpbGwgPSAnIzBmMCc7CiAgICAgIGNsZWFyRGVsYXkgPSAyOwogICAgICBicmVhazsKICAgIGNhc2UgJ2Vycm9yJzoKICAgICAgY29sID0gJyNmMDAnOwogICAgICBmaWxsID0gJyNmMDAnOwogICAgICBjbGVhckRlbGF5ID0gMzA7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnY2FjaGUtZnJlc2gnOgogICAgICBjb2wgPSAnIzBmMCc7CiAgICAgIGZpbGwgPSAnI2ZmMCc7CiAgICAgIGNsZWFyRGVsYXkgPSAyOwogICAgICBicmVhazsKICAgIGNhc2UgJ2NhY2hlLXN0YWxlJzoKICAgICAgY29sID0gJyNmMDAnOwogICAgICBmaWxsID0gJyNmZjAnOwogICAgICBjbGVhckRlbGF5ID0gMTA7CiAgICAgIGJyZWFrOwogICAgY2FzZSAncmVxdWVzdGVkJzoKICAgICAgY29sID0gJyM2NmYnOwogICAgICBmaWxsID0gJyM2NmYnOwogICAgICBicmVhazsKICAgIGNhc2UgJ3JldHJ5aW5nJzoKICAgICAgY29sID0gJyM2NjYnOwogICAgICBmaWxsID0gJyM2NjYnOwogICAgICBicmVhazsKICAgIGNhc2UgJ3JlcXVlc3QtZmFpbCc6CiAgICAgIGNvbCA9ICcjYTAwJzsKICAgICAgZmlsbCA9ICcjNjY2JzsKICAgICAgYnJlYWs7CiAgICBjYXNlICd0aWxlLWZhaWwnOgogICAgICBjb2wgPSAnI2YwMCc7CiAgICAgIGZpbGwgPSAnIzY2Nic7CiAgICAgIGJyZWFrOwogICAgY2FzZSAndGlsZS10aW1lb3V0JzoKICAgICAgY29sID0gJyNmZjAnOwogICAgICBmaWxsID0gJyM2NjYnOwogICAgICBicmVhazsKICAgIGNhc2UgJ3JlbmRlci1xdWV1ZSc6CiAgICAgIGNvbCA9ICcjZjBmJzsKICAgICAgZmlsbCA9ICcjZjBmJzsKICAgICAgYnJlYWs7CiAgfQogIHRoaXMuc2V0Q29sb3VyKGlkLCBjb2wsIGZpbGwpOwogIGlmIChjbGVhckRlbGF5ID49IDApIHsKICAgIHZhciBjbGVhckF0ID0gRGF0ZS5ub3coKSArIGNsZWFyRGVsYXkgKiAxMDAwOwogICAgdGhpcy5kZWJ1Z1RpbGVDbGVhclRpbWVzW2lkXSA9IGNsZWFyQXQ7CgogICAgaWYgKCF0aGlzLnRpbWVyKSB7CiAgICAgIHRoaXMuc3RhcnRUaW1lcihjbGVhckRlbGF5ICogMTAwMCk7CiAgICB9CiAgfQp9OwoKLyoqCiAqIFN0YXJ0cyBhIHRpbWVyIHRvIHJ1biB0aGUgY2xlYXIgcGFzcyBmdW5jdGlvbiBhZnRlciBhIHNwZWNpZmllZCB3YWl0IHRpbWUuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyRGVidWdUaWxlcwogKiBAcGFyYW0ge251bWJlcn0gd2FpdFRpbWUgLSBUaGUgd2FpdCB0aW1lIGluIG1pbGxpc2Vjb25kcyBiZWZvcmUgcnVubmluZyB0aGUgY2xlYXIgcGFzcy4KICovCndpbmRvdy5SZW5kZXJEZWJ1Z1RpbGVzLnByb3RvdHlwZS5zdGFydFRpbWVyID0gZnVuY3Rpb24gKHdhaXRUaW1lKSB7CiAgdmFyIF90aGlzID0gdGhpczsKICBpZiAoIV90aGlzLnRpbWVyKSB7CiAgICAvLyBhIHRpbWVvdXQgb2YgMCBmaXJpbmcgdGhlIGFjdHVhbCB0aW1lb3V0IC0gaGVscHMgdGhpbmdzIHJ1biBzbW9vdGhlcgogICAgX3RoaXMudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpcy50aW1lciA9IHVuZGVmaW5lZDsKICAgICAgICBfdGhpcy5ydW5DbGVhclBhc3MoKTsKICAgICAgfSwgd2FpdFRpbWUpOwogICAgfSwgMCk7CiAgfQp9OwoKLyoqCiAqIEV4ZWN1dGVzIGEgcGFzcyB0byBjbGVhciBkZWJ1ZyB0aWxlcyB0aGF0IGhhdmUgZXhjZWVkZWQgdGhlaXIgZmFkZSB0aW1lLgogKiBUaGlzIGZ1bmN0aW9uIGFkanVzdHMgdGhlIG9wYWNpdHkgb2YgdGhlIHRpbGVzIGFuZCByZW1vdmVzIHRoZW0gaWYgbmVjZXNzYXJ5LgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIFJlbmRlckRlYnVnVGlsZXMKICovCndpbmRvdy5SZW5kZXJEZWJ1Z1RpbGVzLnByb3RvdHlwZS5ydW5DbGVhclBhc3MgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIG5vdyA9IERhdGUubm93KCk7CiAgZm9yICh2YXIgaWQgaW4gdGhpcy5kZWJ1Z1RpbGVDbGVhclRpbWVzKSB7CiAgICB2YXIgZGlmZiA9IG5vdyAtIHRoaXMuZGVidWdUaWxlQ2xlYXJUaW1lc1tpZF07CiAgICBpZiAoZGlmZiA+IDApIHsKICAgICAgaWYgKGRpZmYgPiB0aGlzLkZBREVfVElNRSAqIDEwMDApIHsKICAgICAgICB0aGlzLmRlYnVnVGlsZUxheWVyLnJlbW92ZUxheWVyKHRoaXMuZGVidWdUaWxlVG9SZWN0YW5nbGVbaWRdKTsKICAgICAgICBkZWxldGUgdGhpcy5kZWJ1Z1RpbGVDbGVhclRpbWVzW2lkXTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgZmFkZSA9IDEuMCAtIGRpZmYgLyAodGhpcy5GQURFX1RJTUUgKiAxMDAwKTsKCiAgICAgICAgdGhpcy5kZWJ1Z1RpbGVUb1JlY3RhbmdsZVtpZF0uc2V0U3R5bGUoeyBvcGFjaXR5OiAwLjQgKiBmYWRlLCBmaWxsT3BhY2l0eTogMC4xICogZmFkZSB9KTsKICAgICAgfQogICAgfQogIH0KCiAgaWYgKE9iamVjdC5rZXlzKHRoaXMuZGVidWdUaWxlQ2xlYXJUaW1lcykubGVuZ3RoID4gMCkgewogICAgdGhpcy5zdGFydFRpbWVyKHRoaXMuQ0xFQVJfQ0hFQ0tfVElNRSAqIDEwMDApOwogIH0KfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IG1hcF9kYXRhX3JlbmRlci5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ21hcF9kYXRhX3JlbmRlcicpOwovKiBnbG9iYWwgSUlUQywgTCwgbG9nIC0tIGVzbGludCAqLwoKLyoqCiAqIE1hbmFnZXMgcmVuZGVyaW5nIG9mIG1hcCBkYXRhIChwb3J0YWxzLCBsaW5rcywgZmllbGRzKSBpbnRvIExlYWZsZXQuCiAqIEBjbGFzcyBSZW5kZXIKICovCndpbmRvdy5SZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy5wb3J0YWxNYXJrZXJTY2FsZSA9IHVuZGVmaW5lZDsKfTsKCi8qKgogKiBJbml0aWF0ZXMgYSByZW5kZXIgcGFzcy4gSXQncyBjYWxsZWQgYXQgdGhlIHN0YXJ0IG9mIG1ha2luZyBhIGJhdGNoIG9mIGRhdGEgcmVxdWVzdHMgdG8gdGhlIHNlcnZlcnMuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7TC5MYXRMbmdCb3VuZHN9IGJvdW5kcyAtIFRoZSBib3VuZHMgd2l0aGluIHdoaWNoIHRoZSByZW5kZXIgcGFzcyB3aWxsIG9jY3VyLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUuc3RhcnRSZW5kZXJQYXNzID0gZnVuY3Rpb24gKGJvdW5kcykgewogIHRoaXMuZGVsZXRlZEd1aWQgPSB7fTsgLy8gb2JqZWN0IC0gcmVwcmVzZW50cyB0aGUgc2V0IG9mIGFsbCBkZWxldGVkIGdhbWUgZW50aXR5IEdVSURzIHNlZW4gaW4gYSByZW5kZXIgcGFzcwoKICB0aGlzLnNlZW5Qb3J0YWxzR3VpZCA9IHt9OwogIHRoaXMuc2VlbkxpbmtzR3VpZCA9IHt9OwogIHRoaXMuc2VlbkZpZWxkc0d1aWQgPSB7fTsKCiAgLy8gd2UgcGFkIHRoZSBib3VuZHMgdXNlZCBmb3IgY2xlYXJpbmcgYSBsaXRsZSBiaXQsIGFzIGVudGl0aWVzIGFyZSBzb21ldGltZXMgcmV0dXJuZWQgb3V0c2lkZSBvZiB0aGVpciBzcGVjaWZpZWQgdGlsZSBib3VuZGFyaWVzCiAgLy8gdGhpcyB3aWxsIGp1c3QgYXZvaWQgYSBmZXcgZW50aXR5IHJlbW92YWxzIGF0IHN0YXJ0IG9mIHJlbmRlciB3aGVuIHRoZXknbGwganVzdCBiZSBhZGRlZCBhZ2FpbgogIHZhciBwYWRkZWRCb3VuZHMgPSBib3VuZHMucGFkKDAuMSk7CgogIHRoaXMuY2xlYXJQb3J0YWxzT3V0c2lkZUJvdW5kcyhwYWRkZWRCb3VuZHMpOwoKICB0aGlzLmNsZWFyTGlua3NPdXRzaWRlQm91bmRzKHBhZGRlZEJvdW5kcyk7CiAgdGhpcy5jbGVhckZpZWxkc091dHNpZGVCb3VuZHMocGFkZGVkQm91bmRzKTsKCiAgdGhpcy5yZXNjYWxlUG9ydGFsTWFya2VycygpOwp9OwoKLyoqCiAqIENsZWFycyBwb3J0YWxzIG91dHNpZGUgdGhlIHNwZWNpZmllZCBib3VuZHMuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7TC5MYXRMbmdCb3VuZHN9IGJvdW5kcyAtIFRoZSBib3VuZHMgdG8gY2hlY2sgYWdhaW5zdC4KICovCndpbmRvdy5SZW5kZXIucHJvdG90eXBlLmNsZWFyUG9ydGFsc091dHNpZGVCb3VuZHMgPSBmdW5jdGlvbiAoYm91bmRzKSB7CiAgZm9yICh2YXIgZ3VpZCBpbiB3aW5kb3cucG9ydGFscykgewogICAgdmFyIHAgPSB3aW5kb3cucG9ydGFsc1tndWlkXTsKICAgIC8vIGNsZWFyIHBvcnRhbHMgb3V0c2lkZSB2aXNpYmxlIGJvdW5kcyAtIHVubGVzcyBpdCdzIHRoZSBzZWxlY3RlZCBwb3J0YWwsIG9yIGl0J3MgcmVsZXZhbnQgdG8gYXJ0aWZhY3RzCiAgICBpZiAoIWJvdW5kcy5jb250YWlucyhwLmdldExhdExuZygpKSAmJiBndWlkICE9PSB3aW5kb3cuc2VsZWN0ZWRQb3J0YWwgJiYgIXdpbmRvdy5hcnRpZmFjdC5pc0ludGVyZXN0aW5nUG9ydGFsKGd1aWQpKSB7CiAgICAgIC8vIHJlbW92ZSB0aGUgbWFya2VyIGFzIGEgbGF5ZXIgZmlyc3QKICAgICAgLy8gZGVsZXRpb24gd2lsbCBiZSBkb25lIGF0IGVuZFJlbmRlclBhc3MKICAgICAgcC5yZW1vdmUoKTsKICAgIH0KICB9Cn07CgovKioKICogQ2xlYXJzIGxpbmtzIHRoYXQgYXJlIG91dHNpZGUgdGhlIHNwZWNpZmllZCBib3VuZHMuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7TC5MYXRMbmdCb3VuZHN9IGJvdW5kcyAtIFRoZSBib3VuZHMgdG8gY2hlY2sgYWdhaW5zdCBmb3IgbGluayByZW1vdmFsLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUuY2xlYXJMaW5rc091dHNpZGVCb3VuZHMgPSBmdW5jdGlvbiAoYm91bmRzKSB7CiAgZm9yICh2YXIgZ3VpZCBpbiB3aW5kb3cubGlua3MpIHsKICAgIHZhciBsID0gd2luZG93LmxpbmtzW2d1aWRdOwoKICAgIC8vIE5PVEU6IG91ciBnZW9kZXNpYyBsaW5lcyBjYW4gaGF2ZSBsb3RzIG9mIGludGVybWVkaWF0ZSBwb2ludHMuIHRoZSBib3VuZHMgY2FsY3VsYXRpb24gaGFzbid0IGJlZW4gb3B0aW1pc2VkIGZvciB0aGlzCiAgICAvLyBzbyBjYW4gYmUgcGFydGljdWxhcmx5IHNsb3cuIGEgc2ltcGxlIGJvdW5kcyBjaGVjayBiYXNlZCBvbiBzdGFydCtlbmQgcG9pbnQgd2lsbCBiZSBnb29kIGVub3VnaCBmb3IgdGhpcyBjaGVjawogICAgdmFyIGxscyA9IGwuZ2V0TGF0TG5ncygpOwogICAgdmFyIGxpbmtCb3VuZHMgPSBMLmxhdExuZ0JvdW5kcyhsbHMpOwoKICAgIGlmICghYm91bmRzLmludGVyc2VjdHMobGlua0JvdW5kcykpIHsKICAgICAgdGhpcy5kZWxldGVMaW5rRW50aXR5KGd1aWQpOwogICAgfQogIH0KfTsKCi8qKgogKiBDbGVhcnMgZmllbGRzIHRoYXQgYXJlIG91dHNpZGUgdGhlIHNwZWNpZmllZCBib3VuZHMuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7TC5MYXRMbmdCb3VuZHN9IGJvdW5kcyAtIFRoZSBib3VuZHMgdG8gY2hlY2sgYWdhaW5zdCBmb3IgZmllbGQgcmVtb3ZhbC4KICovCndpbmRvdy5SZW5kZXIucHJvdG90eXBlLmNsZWFyRmllbGRzT3V0c2lkZUJvdW5kcyA9IGZ1bmN0aW9uIChib3VuZHMpIHsKICBmb3IgKHZhciBndWlkIGluIHdpbmRvdy5maWVsZHMpIHsKICAgIHZhciBmID0gd2luZG93LmZpZWxkc1tndWlkXTsKCiAgICAvLyBOT1RFOiBvdXIgZ2VvZGVzaWMgcG9seXMgY2FuIGhhdmUgbG90cyBvZiBpbnRlcm1lZGlhdGUgcG9pbnRzLiB0aGUgYm91bmRzIGNhbGN1bGF0aW9uIGhhc24ndCBiZWVuIG9wdGltaXNlZCBmb3IgdGhpcwogICAgLy8gc28gY2FuIGJlIHBhcnRpY3VsYXJseSBzbG93LiBhIHNpbXBsZSBib3VuZHMgY2hlY2sgYmFzZWQgb24gY29ybmVyIHBvaW50cyB3aWxsIGJlIGdvb2QgZW5vdWdoIGZvciB0aGlzIGNoZWNrCiAgICB2YXIgbGxzID0gZi5nZXRMYXRMbmdzKCk7CiAgICB2YXIgZmllbGRCb3VuZHMgPSBMLmxhdExuZ0JvdW5kcyhbbGxzWzBdLCBsbHNbMV1dKS5leHRlbmQobGxzWzJdKTsKCiAgICBpZiAoIWJvdW5kcy5pbnRlcnNlY3RzKGZpZWxkQm91bmRzKSkgewogICAgICB0aGlzLmRlbGV0ZUZpZWxkRW50aXR5KGd1aWQpOwogICAgfQogIH0KfTsKCi8qKgogKiBQcm9jZXNzZXMgdGlsZSBkYXRhIGluY2x1ZGluZyBkZWxldGVkIGVudGl0eSBHVUlEcyBhbmQgZ2FtZSBlbnRpdGllcy4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICogQHBhcmFtIHtPYmplY3R9IHRpbGVkYXRhIC0gRGF0YSBmb3IgYSBzcGVjaWZpYyBtYXAgdGlsZS4KICovCndpbmRvdy5SZW5kZXIucHJvdG90eXBlLnByb2Nlc3NUaWxlRGF0YSA9IGZ1bmN0aW9uICh0aWxlZGF0YSkgewogIHRoaXMucHJvY2Vzc0RlbGV0ZWRHYW1lRW50aXR5R3VpZHModGlsZWRhdGEuZGVsZXRlZEdhbWVFbnRpdHlHdWlkcyB8fCBbXSk7CiAgdGhpcy5wcm9jZXNzR2FtZUVudGl0aWVzKHRpbGVkYXRhLmdhbWVFbnRpdGllcyB8fCBbXSk7Cn07CgovKioKICogUHJvY2Vzc2VzIGRlbGV0ZWQgZ2FtZSBlbnRpdHkgR1VJRHMgYW5kIHJlbW92ZXMgdGhlbSBmcm9tIHRoZSBtYXAuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7QXJyYXl9IGRlbGV0ZWQgLSBBcnJheSBvZiBkZWxldGVkIGdhbWUgZW50aXR5IEdVSURzLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUucHJvY2Vzc0RlbGV0ZWRHYW1lRW50aXR5R3VpZHMgPSBmdW5jdGlvbiAoZGVsZXRlZCkgewogIGZvciAodmFyIGkgaW4gZGVsZXRlZCkgewogICAgdmFyIGd1aWQgPSBkZWxldGVkW2ldOwoKICAgIGlmICghKGd1aWQgaW4gdGhpcy5kZWxldGVkR3VpZCkpIHsKICAgICAgdGhpcy5kZWxldGVkR3VpZFtndWlkXSA9IHRydWU7IC8vIGZsYWcgdGhpcyBndWlkIGFzIGhhdmluZyBiZWluZyBwcm9jZXNzZWQKCiAgICAgIGlmIChndWlkID09PSB3aW5kb3cuc2VsZWN0ZWRQb3J0YWwpIHsKICAgICAgICAvLyB0aGUgcmFyZSBjYXNlIG9mIHRoZSBzZWxlY3RlZCBwb3J0YWwgYmVpbmcgZGVsZXRlZC4gY2xlYXIgdGhlIGRldGFpbHMgdGFiIGFuZCBkZXNlbGVjdCBpdAogICAgICAgIHdpbmRvdy5yZW5kZXJQb3J0YWxEZXRhaWxzKG51bGwpOwogICAgICB9CgogICAgICB0aGlzLmRlbGV0ZUVudGl0eShndWlkKTsKICAgIH0KICB9Cn07CgovKioKICogUHJvY2Vzc2VzIGdhbWUgZW50aXRpZXMgKGZpZWxkcywgbGlua3MsIHBvcnRhbHMpIGFuZCBjcmVhdGVzIHRoZW0gb24gdGhlIG1hcC4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICogQHBhcmFtIHtBcnJheX0gZW50aXRpZXMgLSBBcnJheSBvZiBnYW1lIGVudGl0aWVzLgogKiBAcGFyYW0ge3N0cmluZ30gZGV0YWlscyAtIERldGFpbHMgZm9yIHRoZSB7QGxpbmsgd2luZG93LmRlY29kZUFycmF5LnBvcnRhbH0gZnVuY3Rpb24uCiAqLwp3aW5kb3cuUmVuZGVyLnByb3RvdHlwZS5wcm9jZXNzR2FtZUVudGl0aWVzID0gZnVuY3Rpb24gKGVudGl0aWVzLCBkZXRhaWxzKSB7CiAgLy8gZGV0YWlscyBleHBlY3RlZCBpbiBkZWNvZGVBcnJheS5wb3J0YWwKCiAgLy8gd2UgbG9vcCB0aHJvdWdoIHRoZSBlbnRpdGllcyB0aHJlZSB0aW1lcyAtIGZvciBmaWVsZHMsIGxpbmtzIGFuZCBwb3J0YWxzIHNlcGFyYXRlbHkKICAvLyB0aGlzIGlzIGEgcmVhc29uYWJseSBlZmZpY2llbnQgd29yay1hcm91bmQgZm9yIGxlYWZsZXRqcyBsaW1pdGF0aW9ucyBvbiBzdmcgcmVuZGVyIG9yZGVyCgogIGZvciAoY29uc3QgaSBpbiBlbnRpdGllcykgewogICAgY29uc3QgZW50ID0gZW50aXRpZXNbaV07CiAgICBpZiAoZW50WzJdWzBdID09PSAncicgJiYgIShlbnRbMF0gaW4gdGhpcy5kZWxldGVkR3VpZCkpIHsKICAgICAgdGhpcy5jcmVhdGVGaWVsZEVudGl0eShlbnQpOwogICAgfQogIH0KCiAgZm9yIChjb25zdCBpIGluIGVudGl0aWVzKSB7CiAgICBjb25zdCBlbnQgPSBlbnRpdGllc1tpXTsKCiAgICBpZiAoZW50WzJdWzBdID09PSAnZScgJiYgIShlbnRbMF0gaW4gdGhpcy5kZWxldGVkR3VpZCkpIHsKICAgICAgdGhpcy5jcmVhdGVMaW5rRW50aXR5KGVudCk7CiAgICB9CiAgfQoKICBmb3IgKGNvbnN0IGkgaW4gZW50aXRpZXMpIHsKICAgIGNvbnN0IGVudCA9IGVudGl0aWVzW2ldOwoKICAgIGlmIChlbnRbMl1bMF0gPT09ICdwJyAmJiAhKGVudFswXSBpbiB0aGlzLmRlbGV0ZWRHdWlkKSkgewogICAgICB0aGlzLmNyZWF0ZVBvcnRhbEVudGl0eShlbnQsIGRldGFpbHMpOwogICAgfQogIH0KfTsKCi8qKgogKiBFbmRzIGEgcmVuZGVyIHBhc3MuIFRoaXMgaW5jbHVkZXMgY2xlYW51cCBhbmQgcHJvY2Vzc2luZyBvZiBhbnkgcmVtYWluaW5nIGRhdGEuCiAqIENhbGxlZCB3aGVuIHRoZSByZW5kZXIgaXMgY29uc2lkZXJlZCBjb21wbGV0ZS4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICovCndpbmRvdy5SZW5kZXIucHJvdG90eXBlLmVuZFJlbmRlclBhc3MgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIGNvdW50cCA9IDAsCiAgICBjb3VudGwgPSAwLAogICAgY291bnRmID0gMDsKCiAgLy8gY2hlY2sgdG8gc2VlIGlmIHRoZXJlIGFyZSBhbnkgZW50aXRpZXMgd2UgaGF2ZW4ndCBzZWVuLiBpZiBzbywgZGVsZXRlIHRoZW0KICBmb3IgKGNvbnN0IGd1aWQgaW4gd2luZG93LnBvcnRhbHMpIHsKICAgIC8vIHNwZWNpYWwgY2FzZSBmb3Igc2VsZWN0ZWQgcG9ydGFsIC0gaXQncyBrZXB0IGV2ZW4gaWYgbm90IHNlZW4KICAgIC8vIGFydGlmYWN0IChlLmcuIGphcnZpcyBzaGFyZCkgcG9ydGFscyBhcmUgYWxzbyBrZXB0IC0gYnV0IHRoZXkncmUgYWx3YXlzICdzZWVuJwogICAgaWYgKCEoZ3VpZCBpbiB0aGlzLnNlZW5Qb3J0YWxzR3VpZCkgJiYgZ3VpZCAhPT0gd2luZG93LnNlbGVjdGVkUG9ydGFsKSB7CiAgICAgIHRoaXMuZGVsZXRlUG9ydGFsRW50aXR5KGd1aWQpOwogICAgICBjb3VudHArKzsKICAgIH0KICB9CiAgZm9yIChjb25zdCBndWlkIGluIHdpbmRvdy5saW5rcykgewogICAgaWYgKCEoZ3VpZCBpbiB0aGlzLnNlZW5MaW5rc0d1aWQpKSB7CiAgICAgIHRoaXMuZGVsZXRlTGlua0VudGl0eShndWlkKTsKICAgICAgY291bnRsKys7CiAgICB9CiAgfQogIGZvciAoY29uc3QgZ3VpZCBpbiB3aW5kb3cuZmllbGRzKSB7CiAgICBpZiAoIShndWlkIGluIHRoaXMuc2VlbkZpZWxkc0d1aWQpKSB7CiAgICAgIHRoaXMuZGVsZXRlRmllbGRFbnRpdHkoZ3VpZCk7CiAgICAgIGNvdW50ZisrOwogICAgfQogIH0KCiAgbG9nLmxvZygnUmVuZGVyOiBlbmQgY2xlYW51cDogcmVtb3ZlZCAnICsgY291bnRwICsgJyBwb3J0YWxzLCAnICsgY291bnRsICsgJyBsaW5rcywgJyArIGNvdW50ZiArICcgZmllbGRzJyk7CgogIC8vIHJlb3JkZXIgcG9ydGFscyB0byBiZSBhZnRlciBsaW5rcy9maWVsZHMKICB0aGlzLmJyaW5nUG9ydGFsc1RvRnJvbnQoKTsKfTsKCi8qKgogKiBCcmluZ3MgcG9ydGFsIG1hcmtlcnMgdG8gdGhlIGZyb250IG9mIHRoZSBtYXAgdmlldywgZW5zdXJpbmcgdGhleSBhcmUgcmVuZGVyZWQgYWJvdmUgbGlua3MgYW5kIGZpZWxkcy4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICovCndpbmRvdy5SZW5kZXIucHJvdG90eXBlLmJyaW5nUG9ydGFsc1RvRnJvbnQgPSBmdW5jdGlvbiAoKSB7CiAgZm9yICh2YXIgZ3VpZCBpbiB3aW5kb3cucG9ydGFscykgewogICAgd2luZG93LnBvcnRhbHNbZ3VpZF0uYnJpbmdUb0Zyb250KCk7CiAgfQoKICAvLyBhcnRpZmFjdCBwb3J0YWxzIGFyZSBhbHdheXMgYnJvdWdodCB0byB0aGUgZnJvbnQsIGFib3ZlIGFsbCBvdGhlcnMKICAkLmVhY2god2luZG93LmFydGlmYWN0LmdldEludGVyZXN0aW5nUG9ydGFscygpLCBmdW5jdGlvbiAoaSwgZ3VpZCkgewogICAgaWYgKHdpbmRvdy5wb3J0YWxzW2d1aWRdICYmIHdpbmRvdy5wb3J0YWxzW2d1aWRdLl9tYXApIHsKICAgICAgd2luZG93LnBvcnRhbHNbZ3VpZF0uYnJpbmdUb0Zyb250KCk7CiAgICB9CiAgfSk7Cn07CgovKioKICogRGVsZXRlcyBhbiBlbnRpdHkgKHBvcnRhbCwgbGluaywgb3IgZmllbGQpIGZyb20gdGhlIG1hcCBiYXNlZCBvbiBpdHMgR1VJRC4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGVudGl0eSB0byBkZWxldGUuCiAqLwp3aW5kb3cuUmVuZGVyLnByb3RvdHlwZS5kZWxldGVFbnRpdHkgPSBmdW5jdGlvbiAoZ3VpZCkgewogIHRoaXMuZGVsZXRlUG9ydGFsRW50aXR5KGd1aWQpOwogIHRoaXMuZGVsZXRlTGlua0VudGl0eShndWlkKTsKICB0aGlzLmRlbGV0ZUZpZWxkRW50aXR5KGd1aWQpOwp9OwoKLyoqCiAqIERlbGV0ZXMgYSBwb3J0YWwgZW50aXR5IGZyb20gdGhlIG1hcCBiYXNlZCBvbiBpdHMgR1VJRC4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHBvcnRhbCB0byBkZWxldGUuCiAqLwp3aW5kb3cuUmVuZGVyLnByb3RvdHlwZS5kZWxldGVQb3J0YWxFbnRpdHkgPSBmdW5jdGlvbiAoZ3VpZCkgewogIGlmIChndWlkIGluIHdpbmRvdy5wb3J0YWxzKSB7CiAgICB2YXIgcCA9IHdpbmRvdy5wb3J0YWxzW2d1aWRdOwogICAgd2luZG93Lm9ybmFtZW50cy5yZW1vdmVQb3J0YWwocCk7CiAgICB0aGlzLnJlbW92ZVBvcnRhbEZyb21NYXBMYXllcihwKTsKICAgIGRlbGV0ZSB3aW5kb3cucG9ydGFsc1tndWlkXTsKICAgIHdpbmRvdy5ydW5Ib29rcygncG9ydGFsUmVtb3ZlZCcsIHsgcG9ydGFsOiBwLCBkYXRhOiBwLm9wdGlvbnMuZGF0YSB9KTsKICB9Cn07CgovKioKICogRGVsZXRlcyBhIGxpbmsgZW50aXR5IGZyb20gdGhlIG1hcCBiYXNlZCBvbiBpdHMgR1VJRC4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgZ2xvYmFsbHkgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGxpbmsgdG8gZGVsZXRlLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUuZGVsZXRlTGlua0VudGl0eSA9IGZ1bmN0aW9uIChndWlkKSB7CiAgaWYgKGd1aWQgaW4gd2luZG93LmxpbmtzKSB7CiAgICB2YXIgbCA9IHdpbmRvdy5saW5rc1tndWlkXTsKICAgIGwucmVtb3ZlKCk7CiAgICBkZWxldGUgd2luZG93LmxpbmtzW2d1aWRdOwogICAgd2luZG93LnJ1bkhvb2tzKCdsaW5rUmVtb3ZlZCcsIHsgbGluazogbCwgZGF0YTogbC5vcHRpb25zLmRhdGEgfSk7CiAgfQp9OwoKLyoqCiAqIERlbGV0ZXMgYSBmaWVsZCBlbnRpdHkgZnJvbSB0aGUgbWFwIGJhc2VkIG9uIGl0cyBHVUlELgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIFJlbmRlcgogKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgZmllbGQgdG8gZGVsZXRlLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUuZGVsZXRlRmllbGRFbnRpdHkgPSBmdW5jdGlvbiAoZ3VpZCkgewogIGlmIChndWlkIGluIHdpbmRvdy5maWVsZHMpIHsKICAgIHZhciBmID0gd2luZG93LmZpZWxkc1tndWlkXTsKICAgIGYucmVtb3ZlKCk7CiAgICBkZWxldGUgd2luZG93LmZpZWxkc1tndWlkXTsKICAgIHdpbmRvdy5ydW5Ib29rcygnZmllbGRSZW1vdmVkJywgeyBmaWVsZDogZiwgZGF0YTogZi5vcHRpb25zLmRhdGEgfSk7CiAgfQp9OwoKLyoqCiAqIENyZWF0ZXMgYSBwbGFjZWhvbGRlciBwb3J0YWwgZW50aXR5LiBUaGlzIGlzIHVzZWQgd2hlbiB0aGUgcG9ydGFsIGlzIG5vdCBmdWxseSBsb2FkZWQsCiAqIGJ1dCBpdHMgZXhpc3RlbmNlIGlzIGtub3duIGZyb20gbGlua3MvZmllbGRzLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIFJlbmRlcgogKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge251bWJlcn0gbGF0RTYgLSBUaGUgbGF0aXR1ZGUgb2YgdGhlIHBvcnRhbCBpbiBFNiBmb3JtYXQuCiAqIEBwYXJhbSB7bnVtYmVyfSBsbmdFNiAtIFRoZSBsb25naXR1ZGUgb2YgdGhlIHBvcnRhbCBpbiBFNiBmb3JtYXQuCiAqIEBwYXJhbSB7c3RyaW5nfSB0ZWFtIC0gVGhlIHRlYW0gZmFjdGlvbiBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge251bWJlcn0gW3RpbWVzdGFtcD0wXSAtIFRpbWVzdGFtcCBvZiB0aGUgcG9ydGFsIGRhdGEuIERlZmF1bHRzIHRvIDAgdG8gYWxsb3cgbmV3ZXIgZGF0YSBzb3VyY2VzIHRvIG92ZXJyaWRlCiAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZXN0YW1wXSAtIFRoZSB0aW1lc3RhbXAgb2YgdGhlIHBvcnRhbCBkYXRhLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUuY3JlYXRlUGxhY2Vob2xkZXJQb3J0YWxFbnRpdHkgPSBmdW5jdGlvbiAoZ3VpZCwgbGF0RTYsIGxuZ0U2LCB0ZWFtLCB0aW1lc3RhbXApIHsKICAvLyBpbnRlbCBubyBsb25nZXIgcmV0dXJucyBwb3J0YWxzIGF0IGFueXRoaW5nIGJ1dCB0aGUgY2xvc2VzdCB6b29tCiAgLy8gc3RvY2sgaW50ZWwgY3JlYXRlcyAncGxhY2Vob2xkZXInIHBvcnRhbHMgZnJvbSB0aGUgZGF0YSBpbiBsaW5rcy9maWVsZHMgLSBJSVRDIG5lZWRzIHRvIGRvIHRoZSBzYW1lCiAgLy8gd2Ugb25seSBoYXZlIHRoZSBwb3J0YWwgZ3VpZCwgbGF0L2xuZyBjb29yZHMsIGFuZCB0aGUgZmFjdGlvbiAtIG5vIG90aGVyIGRhdGEKICAvLyBoYXZpbmcgdGhlIGd1aWQsIGF0IGxlYXN0LCBhbGxvd3MgdGhlIHBvcnRhbCBkZXRhaWxzIHRvIGJlIGxvYWRlZCBvbmNlIGl0J3Mgc2VsZWN0ZWQuIGhvd2V2ZXIsCiAgLy8gbm8gaGlnaGxpZ2h0ZXJzLCBwb3J0YWwgbGV2ZWwgbnVtYmVycywgcG9ydGFsIG5hbWVzLCB1c2VmdWwgY291bnRzIG9mIHBvcnRhbHMsIGV0YyBhcmUgcG9zc2libGUKCiAgLy8gemVybyB3aWxsIG1lYW4gYW55IG90aGVyIHNvdXJjZSBvZiBwb3J0YWwgZGF0YSB3aWxsIGhhdmUgYSBoaWdoZXIgdGltZXN0YW1wCiAgdGltZXN0YW1wID0gdGltZXN0YW1wIHx8IDA7CgogIHZhciBlbnQgPSBbCiAgICBndWlkLCAvLyBlbnRbMF0gPSBndWlkCiAgICB0aW1lc3RhbXAsIC8vIGVudFsxXSA9IHRpbWVzdGFtcAogICAgLy8gZW50WzJdID0gYW4gYXJyYXkgd2l0aCB0aGUgZW50aXR5IGRhdGEKICAgIFsKICAgICAgJ3AnLCAvLyAwIC0gYSBwb3J0YWwKICAgICAgdGVhbSwgLy8gMSAtIHRlYW0KICAgICAgbGF0RTYsIC8vIDIgLSBsYXQKICAgICAgbG5nRTYsIC8vIDMgLSBsbmcKICAgIF0sCiAgXTsKCiAgdGhpcy5jcmVhdGVQb3J0YWxFbnRpdHkoZW50LCAnY29yZScpOyAvLyBwbGFjZWhvbGRlcgp9OwoKLyoqCiAqIENyZWF0ZXMgYSBwb3J0YWwgZW50aXR5IGZyb20gdGhlIHByb3ZpZGVkIGdhbWUgZW50aXR5IGRhdGEuCiAqIElmIHRoZSBwb3J0YWwgYWxyZWFkeSBleGlzdHMgYW5kIHRoZSBuZXcgZGF0YSBpcyBtb3JlIHJlY2VudCwgaXQgcmVwbGFjZXMgdGhlIGV4aXN0aW5nIGRhdGEuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7QXJyYXl9IGVudCAtIEFuIGFycmF5IHJlcHJlc2VudGluZyB0aGUgZ2FtZSBlbnRpdHkuCiAqIEBwYXJhbSB7c3RyaW5nfSBkZXRhaWxzIC0gRGV0YWlsIGxldmVsIGV4cGVjdGVkIGluIHtAbGluayB3aW5kb3cuZGVjb2RlQXJyYXkucG9ydGFsfSAoZS5nLiwgJ2NvcmUnLCAnc3VtbWFyeScpLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUuY3JlYXRlUG9ydGFsRW50aXR5ID0gZnVuY3Rpb24gKGVudCwgZGV0YWlscykgewogIHRoaXMuc2VlblBvcnRhbHNHdWlkW2VudFswXV0gPSB0cnVlOyAvLyBmbGFnIHdlJ3ZlIHNlZW4gaXQKCiAgdmFyIHByZXZpb3VzRGF0YSA9IHVuZGVmaW5lZDsKCiAgdmFyIGRhdGEgPSB3aW5kb3cuZGVjb2RlQXJyYXkucG9ydGFsKGVudFsyXSwgZGV0YWlscyk7CiAgdmFyIGd1aWQgPSBlbnRbMF07CgogIC8vIGFkZCBtaXNzaW5nIGZpZWxkcwogIGRhdGEuZ3VpZCA9IGd1aWQ7CiAgaWYgKCFkYXRhLnRpbWVzdGFtcCkgewogICAgZGF0YS50aW1lc3RhbXAgPSBlbnRbMV07CiAgfQoKICAvLyBMRUdBQ1kgLSBUTyBCRSBSRU1PVkVEIEFUIFNPTUUgUE9JTlQhIHVzZSAuZ3VpZCwgLnRpbWVzdGFtcCBhbmQgLmRhdGEgaW5zdGVhZAogIGRhdGEuZW50ID0gZW50OwoKICAvLyBjaGVjayBpZiBlbnRpdHkgYWxyZWFkeSBleGlzdHMKICBjb25zdCBvbGRQb3J0YWwgPSBndWlkIGluIHdpbmRvdy5wb3J0YWxzOwoKICBpZiAob2xkUG9ydGFsKSB7CiAgICAvLyB5ZXMuIG5vdyBjaGVjayB0byBzZWUgaWYgdGhlIGVudGl0eSBkYXRhIHdlIGhhdmUgaXMgbmV3ZXIgdGhhbiB0aGF0IGluIHBsYWNlCiAgICB2YXIgcCA9IHdpbmRvdy5wb3J0YWxzW2d1aWRdOwoKICAgIGlmICghcC53aWxsVXBkYXRlKGRhdGEpKSB7CiAgICAgIC8vIHRoaXMgZGF0YSBkb2Vzbid0IGJyaW5nIG5ldyBkZXRhaWwgLSBhYm9ydCBwcm9jZXNzaW5nCiAgICAgIC8vIHJlLWFkZCB0aGUgcG9ydGFsIHRvIHRoZSByZWxldmFudCBsYXllciAoZG9lcyBub3RoaW5nIGlmIGFscmVhZHkgaW4gdGhlIGNvcnJlY3QgbGF5ZXIpCiAgICAgIC8vIHVzZWZ1bCBmb3IgcG9ydGFscyBvdXRzaWRlIHRoZSB2aWV3CiAgICAgIHRoaXMuYWRkUG9ydGFsVG9NYXBMYXllcihwKTsKICAgICAgcmV0dXJuIHA7CiAgICB9CgogICAgLy8gdGhlIGRhdGEgd2UgaGF2ZSBpcyBuZXdlci4gbWFueSBkYXRhIGNoYW5nZXMgcmVxdWlyZSByZS1yZW5kZXJpbmcgb2YgdGhlIHBvcnRhbAogICAgLy8gKGUuZy4gbGV2ZWwgY2hhbmdlZCwgc28gc2l6ZSBpcyBkaWZmZXJlbnQsIG9yIHN0YXRzIGNoYW5nZWQgc28gaGlnaGxpZ2h0ZXIgaXMgZGlmZmVyZW50KQoKICAgIC8vIHJlbWVtYmVyIHRoZSBvbGQgZGV0YWlscywgZm9yIHRoZSBjYWxsYmFjawogICAgcHJldmlvdXNEYXRhID0gJC5leHRlbmQodHJ1ZSwge30sIHAuZ2V0RGV0YWlscygpKTsKICB9CgogIHZhciBsYXRsbmcgPSBMLmxhdExuZyhkYXRhLmxhdEU2IC8gMWU2LCBkYXRhLmxuZ0U2IC8gMWU2KTsKCiAgd2luZG93LnB1c2hQb3J0YWxHdWlkUG9zaXRpb25DYWNoZShkYXRhLmd1aWQsIGRhdGEubGF0RTYsIGRhdGEubG5nRTYpOwoKICAvLyBjaGVjayBmb3IgVVJMIGxpbmtzIHRvIHBvcnRhbCwgYW5kIHNlbGVjdCBpdCBpZiB0aGlzIGlzIHRoZSBvbmUKICBpZiAod2luZG93LnVybFBvcnRhbExMICYmIHdpbmRvdy51cmxQb3J0YWxMTFswXSA9PT0gbGF0bG5nLmxhdCAmJiB3aW5kb3cudXJsUG9ydGFsTExbMV0gPT09IGxhdGxuZy5sbmcpIHsKICAgIC8vIFVSTC1wYXNzZWQgcG9ydGFsIGZvdW5kIHZpYSBwbGwgcGFyYW1ldGVyIC0gc2V0IHRoZSBndWlkLWJhc2VkIHBhcmFtZXRlcgogICAgbG9nLmxvZygndXJsUG9ydGFsTEwgJyArIHdpbmRvdy51cmxQb3J0YWxMTFswXSArICcsJyArIHdpbmRvdy51cmxQb3J0YWxMTFsxXSArICcgbWF0Y2hlcyBwb3J0YWwgR1VJRCAnICsgZGF0YS5ndWlkKTsKCiAgICB3aW5kb3cudXJsUG9ydGFsID0gZGF0YS5ndWlkOwogICAgd2luZG93LnVybFBvcnRhbExMID0gdW5kZWZpbmVkOyAvLyBjbGVhciB0aGUgVVJMIHBhcmFtZXRlciBzbyBpdCdzIG5vdCBtYXRjaGVkIGFnYWluCiAgfQogIGlmICh3aW5kb3cudXJsUG9ydGFsID09PSBkYXRhLmd1aWQpIHsKICAgIC8vIFVSTC1wYXNzZWQgcG9ydGFsIGZvdW5kIHZpYSBndWlkIHBhcmFtZXRlciAtIHNldCBpdCBhcyB0aGUgc2VsZWN0ZWQgcG9ydGFsCiAgICBsb2cubG9nKCd1cmxQb3J0YWwgR1VJRCAnICsgd2luZG93LnVybFBvcnRhbCArICcgZm91bmQgLSBzZWxlY3RpbmcuLi4nKTsKICAgIHdpbmRvdy5zZWxlY3RlZFBvcnRhbCA9IGRhdGEuZ3VpZDsKICAgIHdpbmRvdy51cmxQb3J0YWwgPSB1bmRlZmluZWQ7IC8vIGNsZWFyIHRoZSBVUkwgcGFyYW1ldGVyIHNvIGl0J3Mgbm90IG1hdGNoZWQgYWdhaW4KICB9CgogIGxldCBtYXJrZXIgPSB1bmRlZmluZWQ7CiAgaWYgKG9sZFBvcnRhbCkgewogICAgLy8gdXBkYXRlIG1hcmtlciBzdHlsZS9oaWdobGlnaHQgYW5kIGxheWVyCiAgICBtYXJrZXIgPSB3aW5kb3cucG9ydGFsc1tkYXRhLmd1aWRdOwogICAgbWFya2VyLnVwZGF0ZURldGFpbHMoZGF0YSk7CgogICAgaWYgKHdpbmRvdy5wb3J0YWxEZXRhaWwuaXNGcmVzaChndWlkKSkgewogICAgICB2YXIgb2xkRGV0YWlscyA9IHdpbmRvdy5wb3J0YWxEZXRhaWwuZ2V0KGd1aWQpOwogICAgICBpZiAoZGF0YS50aW1lc3RhbXAgPiBvbGREZXRhaWxzLnRpbWVzdGFtcCkgewogICAgICAgIC8vIGRhdGEgaXMgbW9yZSByZWNlbnQgdGhhbiB0aGUgY2FjaGVkIGRldGFpbHMgc28gd2UgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgY2FjaGUKICAgICAgICB3aW5kb3cucG9ydGFsRGV0YWlsLnJlbW92ZShndWlkKTsKICAgICAgfQogICAgfQoKICAgIHdpbmRvdy5ydW5Ib29rcygncG9ydGFsQWRkZWQnLCB7IHBvcnRhbDogbWFya2VyLCBwcmV2aW91c0RhdGE6IHByZXZpb3VzRGF0YSB9KTsKICB9IGVsc2UgewogICAgbWFya2VyID0gd2luZG93LmNyZWF0ZU1hcmtlcihsYXRsbmcsIGRhdGEpOwoKICAgIC8vIGluIGNhc2Ugb2YgaW5jb21wbGV0ZSBkYXRhIHdoaWxlIGhhdmluZyBmcmVzaCBkZXRhaWxzIGluIGNhY2hlLCB1cGRhdGUgdGhlIHBvcnRhbCB3aXRoIHRob3NlIGRldGFpbHMKICAgIGlmICh3aW5kb3cucG9ydGFsRGV0YWlsLmlzRnJlc2goZ3VpZCkpIHsKICAgICAgdmFyIG9sZERldGFpbHMgPSB3aW5kb3cucG9ydGFsRGV0YWlsLmdldChndWlkKTsKICAgICAgaWYgKGRhdGEudGltZXN0YW1wID4gb2xkRGV0YWlscy50aW1lc3RhbXApIHsKICAgICAgICAvLyBkYXRhIGlzIG1vcmUgcmVjZW50IHRoYW4gdGhlIGNhY2hlZCBkZXRhaWxzIHNvIHdlIHJlbW92ZSB0aGVtIGZyb20gdGhlIGNhY2hlCiAgICAgICAgd2luZG93LnBvcnRhbERldGFpbC5yZW1vdmUoZ3VpZCk7CiAgICAgIH0gZWxzZSBpZiAobWFya2VyLndpbGxVcGRhdGUob2xkRGV0YWlscykpIHsKICAgICAgICBtYXJrZXIudXBkYXRlRGV0YWlscyhvbGREZXRhaWxzKTsKICAgICAgfQogICAgfQoKICAgIHdpbmRvdy5ydW5Ib29rcygncG9ydGFsQWRkZWQnLCB7IHBvcnRhbDogbWFya2VyIH0pOwoKICAgIHdpbmRvdy5wb3J0YWxzW2RhdGEuZ3VpZF0gPSBtYXJrZXI7CiAgfQoKCiAgd2luZG93Lm9ybmFtZW50cy5hZGRQb3J0YWwobWFya2VyKTsKCiAgLy8gVE9ETz8gcG9zdHBvbmUgYWRkaW5nIHRvIHRoZSBtYXAgbGF5ZXIKICB0aGlzLmFkZFBvcnRhbFRvTWFwTGF5ZXIobWFya2VyKTsKCiAgcmV0dXJuIG1hcmtlcjsKfTsKCi8qKgogKiBDcmVhdGVzIGEgZmllbGQgZW50aXR5IGZyb20gdGhlIHByb3ZpZGVkIGdhbWUgZW50aXR5IGRhdGEuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7QXJyYXl9IGVudCAtIEFuIGFycmF5IHJlcHJlc2VudGluZyB0aGUgZ2FtZSBlbnRpdHkuCiAqLwp3aW5kb3cuUmVuZGVyLnByb3RvdHlwZS5jcmVhdGVGaWVsZEVudGl0eSA9IGZ1bmN0aW9uIChlbnQpIHsKICB0aGlzLnNlZW5GaWVsZHNHdWlkW2VudFswXV0gPSB0cnVlOyAvLyBmbGFnIHdlJ3ZlIHNlZW4gaXQKCiAgdmFyIGRhdGEgPSB7CiAgICAvLyB0eXBlOiBlbnRbMl1bMF0sCiAgICB0aW1lc3RhbXA6IGVudFsxXSwKICAgIHRlYW06IGVudFsyXVsxXSwKICAgIHBvaW50czogZW50WzJdWzJdLm1hcChmdW5jdGlvbiAoYXJyKSB7CiAgICAgIHJldHVybiB7IGd1aWQ6IGFyclswXSwgbGF0RTY6IGFyclsxXSwgbG5nRTY6IGFyclsyXSB9OwogICAgfSksCiAgfTsKCiAgLy8gY3JlYXRlIHBsYWNlaG9sZGVyIHBvcnRhbHMgZm9yIGZpZWxkIGNvcm5lcnMuIHdlIGFscmVhZHkgZG8gbGlua3MsIGJ1dCB0aGVyZSBhcmUgdGhlIG9kZCBjYXNlIHdoZXJlIHRoaXMgaXMgdXNlZnVsCiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHsKICAgIHZhciBwID0gZGF0YS5wb2ludHNbaV07CiAgICB0aGlzLmNyZWF0ZVBsYWNlaG9sZGVyUG9ydGFsRW50aXR5KHAuZ3VpZCwgcC5sYXRFNiwgcC5sbmdFNiwgZGF0YS50ZWFtLCAwKTsKICB9CgogIC8vIGNoZWNrIGlmIGVudGl0eSBhbHJlYWR5IGV4aXN0cwogIGlmIChlbnRbMF0gaW4gd2luZG93LmZpZWxkcykgewogICAgLy8geWVzLiBpbiB0aGVvcnksIHdlIHNob3VsZCBuZXZlciBnZXQgdXBkYXRlZCBkYXRhIGZvciBhbiBleGlzdGluZyBmaWVsZC4gdGhleSdyZSBjcmVhdGVkLCBhbmQgdGhleSdyZSBkZXN0cm95ZWQgLSBuZXZlciBjaGFuZ2VkCiAgICAvLyBidXQgdGhlb3J5IGFuZCBwcmFjdGljZSBtYXkgbm90IGJlIHRoZSBzYW1lIHRoaW5nLi4uCiAgICB2YXIgZiA9IHdpbmRvdy5maWVsZHNbZW50WzBdXTsKCiAgICBpZiAoZi5vcHRpb25zLnRpbWVzdGFtcCA+PSBlbnRbMV0pIHJldHVybjsgLy8gdGhpcyBkYXRhIGlzIGlkZW50aWNhbCAob3Igb3JkZXIpIHRoYW4gdGhhdCByZW5kZXJlZCAtIGFib3J0IHByb2Nlc3NpbmcKCiAgICAvLyB0aGUgZGF0YSB3ZSBoYXZlIGlzIG5ld2VyIC0gdHdvIG9wdGlvbnMKICAgIC8vIDEuIGp1c3QgdXBkYXRlIHRoZSBkYXRhLCBhc3N1bWUgdGhlIGZpZWxkIHJlbmRlciBhcHBlYXJhbmNlIGlzIHVubW9kaWZpZWQKICAgIC8vIDIuIGRlbGV0ZSB0aGUgZW50aXR5LCB0aGVuIHJlLWNyZWF0ZSB3aXRoIHRoZSBuZXcgZGF0YQogICAgdGhpcy5kZWxldGVGaWVsZEVudGl0eShlbnRbMF0pOyAvLyBvcHRpb24gMiwgZm9yIG5vdwogIH0KCiAgdmFyIHRlYW0gPSB3aW5kb3cudGVhbVN0cmluZ1RvSWQoZW50WzJdWzFdKTsKICB2YXIgbGF0bG5ncyA9IFsKICAgIEwubGF0TG5nKGRhdGEucG9pbnRzWzBdLmxhdEU2IC8gMWU2LCBkYXRhLnBvaW50c1swXS5sbmdFNiAvIDFlNiksCiAgICBMLmxhdExuZyhkYXRhLnBvaW50c1sxXS5sYXRFNiAvIDFlNiwgZGF0YS5wb2ludHNbMV0ubG5nRTYgLyAxZTYpLAogICAgTC5sYXRMbmcoZGF0YS5wb2ludHNbMl0ubGF0RTYgLyAxZTYsIGRhdGEucG9pbnRzWzJdLmxuZ0U2IC8gMWU2KSwKICBdOwoKICB2YXIgcG9seSA9IEwuZ2VvZGVzaWNQb2x5Z29uKGxhdGxuZ3MsIHsKICAgIGZpbGxDb2xvcjogd2luZG93LkNPTE9SU1t0ZWFtXSwKICAgIGZpbGxPcGFjaXR5OiAwLjI1LAogICAgc3Ryb2tlOiBmYWxzZSwKICAgIGludGVyYWN0aXZlOiBmYWxzZSwKCiAgICB0ZWFtOiB0ZWFtLAogICAgZW50OiBlbnQsIC8vIExFR0FDWSAtIFRPIEJFIFJFTU9WRUQgQVQgU09NRSBQT0lOVCEgdXNlIC5ndWlkLCAudGltZXN0YW1wIGFuZCAuZGF0YSBpbnN0ZWFkCiAgICBndWlkOiBlbnRbMF0sCiAgICB0aW1lc3RhbXA6IGRhdGEudGltZXN0YW1wLAogICAgZGF0YTogZGF0YSwKICB9KTsKCiAgd2luZG93LnJ1bkhvb2tzKCdmaWVsZEFkZGVkJywgeyBmaWVsZDogcG9seSB9KTsKCiAgd2luZG93LmZpZWxkc1tlbnRbMF1dID0gcG9seTsKCiAgLy8gVE9ETz8gcG9zdHBvbmUgYWRkaW5nIHRvIHRoZSBsYXllcj8/CiAgaWYgKCFJSVRDLmZpbHRlcnMuZmlsdGVyRmllbGQocG9seSkpIHBvbHkuYWRkVG8od2luZG93Lm1hcCk7Cn07CgovKioKICogQ3JlYXRlcyBhIGxpbmsgZW50aXR5IGZyb20gdGhlIHByb3ZpZGVkIGdhbWUgZW50aXR5IGRhdGEuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7QXJyYXl9IGVudCAtIEFuIGFycmF5IHJlcHJlc2VudGluZyB0aGUgZ2FtZSBlbnRpdHkuCiAqLwp3aW5kb3cuUmVuZGVyLnByb3RvdHlwZS5jcmVhdGVMaW5rRW50aXR5ID0gZnVuY3Rpb24gKGVudCkgewogIC8vIE5pYW50aWMgaGF2ZSBiZWVuIGZha2luZyBsaW5rIGVudGl0aWVzLCBiYXNlZCBvbiBkYXRhIGZyb20gZmllbGRzCiAgLy8gdGhlc2UgZmFrZWQgbGlua3MgYXJlIHNlbnQgYWxvbmcgd2l0aCB0aGUgcmVhbCBwb3J0YWwgbGlua3MsIGNhdXNpbmcgZHVwbGljYXRlcwogIC8vIHRoZSBmYWtlZCBvbmVzIGFsbCBoYXZlIGxvbmdlciBHVUlEcywgYmFzZWQgb24gdGhlIGZpZWxkIEdVSUQgKHdpdGggX2FiLCBfYWMsIF9iYyBhcHBlbmRlZCkKICB2YXIgZmFrZWRMaW5rID0gbmV3IFJlZ0V4cCgnXlswLTlhLWZdezMyfS5iX1thYl1bYmNdJCcpOyAvLyBmaWVsZCBHVUlEcyBhbHdheXMgZW5kIHdpdGggIi5iIiAtIGZha2VkIGxpbmtzIGFwcGVuZCB0aGUgZWRnZSBpZGVudGlmaWVyCiAgaWYgKGZha2VkTGluay50ZXN0KGVudFswXSkpIHJldHVybjsKCiAgdGhpcy5zZWVuTGlua3NHdWlkW2VudFswXV0gPSB0cnVlOyAvLyBmbGFnIHdlJ3ZlIHNlZW4gaXQKCiAgdmFyIGRhdGEgPSB7CiAgICAvLyBUT0RPIGFkZCBvdGhlciBwcm9wZXJ0aWVzIGFuZCBjaGVjayBjb3JyZWN0aW9uIGRpcmVjdGlvbgogICAgLy8gICAgdHlwZTogICBlbnRbMl1bMF0sCiAgICB0aW1lc3RhbXA6IGVudFsxXSwKICAgIHRlYW06IGVudFsyXVsxXSwKICAgIG9HdWlkOiBlbnRbMl1bMl0sCiAgICBvTGF0RTY6IGVudFsyXVszXSwKICAgIG9MbmdFNjogZW50WzJdWzRdLAogICAgZEd1aWQ6IGVudFsyXVs1XSwKICAgIGRMYXRFNjogZW50WzJdWzZdLAogICAgZExuZ0U2OiBlbnRbMl1bN10sCiAgfTsKCiAgLy8gY3JlYXRlIHBsYWNlaG9sZGVyIGVudGl0aWVzIGZvciBsaW5rIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIChiZWZvcmUgY2hlY2tpbmcgaWYgdGhlIGxpbmsgaXRzZWxmIGFscmVhZHkgZXhpc3RzCiAgdGhpcy5jcmVhdGVQbGFjZWhvbGRlclBvcnRhbEVudGl0eShkYXRhLm9HdWlkLCBkYXRhLm9MYXRFNiwgZGF0YS5vTG5nRTYsIGRhdGEudGVhbSwgZGF0YS50aW1lc3RhbXApOwogIHRoaXMuY3JlYXRlUGxhY2Vob2xkZXJQb3J0YWxFbnRpdHkoZGF0YS5kR3VpZCwgZGF0YS5kTGF0RTYsIGRhdGEuZExuZ0U2LCBkYXRhLnRlYW0sIGRhdGEudGltZXN0YW1wKTsKCiAgLy8gY2hlY2sgaWYgZW50aXR5IGFscmVhZHkgZXhpc3RzCiAgaWYgKGVudFswXSBpbiB3aW5kb3cubGlua3MpIHsKICAgIHZhciBsID0gd2luZG93LmxpbmtzW2VudFswXV07CiAgICBpZiAobC5vcHRpb25zLnRpbWVzdGFtcCA+PSBlbnRbMV0pIHJldHVybjsgLy8gdGhpcyBkYXRhIGlzIG9sZGVyIG9yIGlkZW50aWNhbCB0byB0aGUgcmVuZGVyZWQgZGF0YSAtIGFib3J0IHByb2Nlc3NpbmcKCiAgICAvLyB0aGUgZGF0YSBpcyBuZXdlci9iZXR0ZXIgLSB0d28gb3B0aW9ucwogICAgLy8gMS4ganVzdCB1cGRhdGUgdGhlIGRhdGEuIGFzc3VtZSB0aGUgbGluayByZW5kZXIgYXBwZWFyYW5jZSBpcyB1bm1vZGlmaWVkCiAgICAvLyAyLiBkZWxldGUgdGhlIGVudGl0eSwgdGhlbiByZS1jcmVhdGUgaXQgd2l0aCB0aGUgbmV3IGRhdGEKICAgIHRoaXMuZGVsZXRlTGlua0VudGl0eShlbnRbMF0pOyAvLyBvcHRpb24gMiAtIGZvciBub3cKICB9CgogIHZhciB0ZWFtID0gd2luZG93LnRlYW1TdHJpbmdUb0lkKGVudFsyXVsxXSk7CiAgdmFyIGxhdGxuZ3MgPSBbTC5sYXRMbmcoZGF0YS5vTGF0RTYgLyAxZTYsIGRhdGEub0xuZ0U2IC8gMWU2KSwgTC5sYXRMbmcoZGF0YS5kTGF0RTYgLyAxZTYsIGRhdGEuZExuZ0U2IC8gMWU2KV07CiAgdmFyIHBvbHkgPSBMLmdlb2Rlc2ljUG9seWxpbmUobGF0bG5ncywgewogICAgY29sb3I6IHdpbmRvdy5DT0xPUlNbdGVhbV0sCiAgICBvcGFjaXR5OiAxLAogICAgd2VpZ2h0OiAyLAogICAgaW50ZXJhY3RpdmU6IGZhbHNlLAoKICAgIHRlYW06IHRlYW0sCiAgICBlbnQ6IGVudCwgLy8gTEVHQUNZIC0gVE8gQkUgUkVNT1ZFRCBBVCBTT01FIFBPSU5UISB1c2UgLmd1aWQsIC50aW1lc3RhbXAgYW5kIC5kYXRhIGluc3RlYWQKICAgIGd1aWQ6IGVudFswXSwKICAgIHRpbWVzdGFtcDogZW50WzFdLAogICAgZGF0YTogZGF0YSwKICB9KTsKCiAgd2luZG93LnJ1bkhvb2tzKCdsaW5rQWRkZWQnLCB7IGxpbms6IHBvbHkgfSk7CgogIHdpbmRvdy5saW5rc1tlbnRbMF1dID0gcG9seTsKCiAgaWYgKCFJSVRDLmZpbHRlcnMuZmlsdGVyTGluayhwb2x5KSkgcG9seS5hZGRUbyh3aW5kb3cubWFwKTsKfTsKCi8qKgogKiBSZXNjYWxlcyBwb3J0YWwgbWFya2VycyBiYXNlZCBvbiB0aGUgY3VycmVudCBtYXAgem9vbSBsZXZlbC4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICovCndpbmRvdy5SZW5kZXIucHJvdG90eXBlLnJlc2NhbGVQb3J0YWxNYXJrZXJzID0gZnVuY3Rpb24gKCkgewogIGlmICh0aGlzLnBvcnRhbE1hcmtlclNjYWxlID09PSB1bmRlZmluZWQgfHwgdGhpcy5wb3J0YWxNYXJrZXJTY2FsZSAhPT0gd2luZG93LnBvcnRhbE1hcmtlclNjYWxlKCkpIHsKICAgIHRoaXMucG9ydGFsTWFya2VyU2NhbGUgPSB3aW5kb3cucG9ydGFsTWFya2VyU2NhbGUoKTsKCiAgICBsb2cubG9nKCdSZW5kZXI6IG1hcCB6b29tICcgKyB3aW5kb3cubWFwLmdldFpvb20oKSArICcgY2hhbmdlcyBwb3J0YWwgc2NhbGUgdG8gJyArIHdpbmRvdy5wb3J0YWxNYXJrZXJTY2FsZSgpICsgJyAtIHJlZHJhd2luZyBhbGwgcG9ydGFscycpOwoKICAgIC8vIE5PVEU6IHdlJ3JlIG5vdCBjYWxsaW5nIHRoaXMgYmVjYXVzZSBpdCByZXNldHMgaGlnaGxpZ2h0cyAtIHdlJ3JlIGNhbGxpbmcgaXQgYXMgaXQKICAgIC8vIHJlc2V0cyB0aGUgc3R5bGUgKGluYyBzaXplKSBvZiBhbGwgcG9ydGFsIG1hcmtlcnMsIGFwcGx5aW5nIHRoZSBuZXcgc2NhbGUKICAgIHdpbmRvdy5yZXNldEhpZ2hsaWdodGVkUG9ydGFscygpOwogIH0KfTsKCi8qKgogKiBBZGRzIGEgcG9ydGFsIHRvIHRoZSB2aXNpYmxlIG1hcCBsYXllci4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBSZW5kZXIKICogQHBhcmFtIHtPYmplY3R9IHBvcnRhbCAtIFRoZSBwb3J0YWwgb2JqZWN0IHRvIGFkZCB0byB0aGUgbWFwIGxheWVyLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUuYWRkUG9ydGFsVG9NYXBMYXllciA9IGZ1bmN0aW9uIChwb3J0YWwpIHsKICBpZiAoIUlJVEMuZmlsdGVycy5maWx0ZXJQb3J0YWwocG9ydGFsKSkgcG9ydGFsLmFkZFRvKHdpbmRvdy5tYXApOwp9OwoKLyoqCiAqIFJlbW92ZXMgYSBwb3J0YWwgZnJvbSB0aGUgdmlzaWJsZSBtYXAgbGF5ZXIuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgUmVuZGVyCiAqIEBwYXJhbSB7T2JqZWN0fSBwb3J0YWwgLSBUaGUgcG9ydGFsIG9iamVjdCB0byByZW1vdmUgZnJvbSB0aGUgbWFwIGxheWVyLgogKi8Kd2luZG93LlJlbmRlci5wcm90b3R5cGUucmVtb3ZlUG9ydGFsRnJvbU1hcExheWVyID0gZnVuY3Rpb24gKHBvcnRhbCkgewogIC8vIHJlbW92ZSBpdCBmcm9tIHRoZSBwb3J0YWxzTGV2ZWxzIGxheWVyCiAgcG9ydGFsLnJlbW92ZSgpOwp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogbWFwX2RhdGFfcmVxdWVzdC5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ21hcF9kYXRhX3JlcXVlc3QnKTsKLyogZ2xvYmFsIEwsIGxvZyAtLSBlc2xpbnQgKi8KCi8qKgogKiBDbGFzcyBmb3IgbWFuYWdpbmcgbWFwIGRhdGEgcmVxdWVzdHMgZnJvbSB0aGUgSW5ncmVzcyBzZXJ2ZXJzLCBjYWNoaW5nIHRoZSBkYXRhLCBhbmQgcGFzc2luZyBpdCB0byB0aGUgcmVuZGVyZXIuCiAqIEBjbGFzcyBNYXBEYXRhUmVxdWVzdAogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0ID0gZnVuY3Rpb24gKCkgewogIHRoaXMuY2FjaGUgPSBuZXcgd2luZG93LkRhdGFDYWNoZSgpOwogIHRoaXMucmVuZGVyID0gbmV3IHdpbmRvdy5SZW5kZXIoKTsKICB0aGlzLmRlYnVnVGlsZXMgPSBuZXcgd2luZG93LlJlbmRlckRlYnVnVGlsZXMoKTsKCiAgdGhpcy5hY3RpdmVSZXF1ZXN0Q291bnQgPSAwOwogIHRoaXMucmVxdWVzdGVkVGlsZXMgPSB7fTsKCiAgdGhpcy5yZW5kZXJRdWV1ZSA9IFtdOwogIHRoaXMucmVuZGVyUXVldWVUaW1lciA9IHVuZGVmaW5lZDsKICB0aGlzLnJlbmRlclF1ZXVlUGF1c2VkID0gZmFsc2U7CgogIHRoaXMuaWRsZSA9IGZhbHNlOwoKICAvLyBubyBtb3JlIHRoYW4gdGhpcyBtYW55IHJlcXVlc3RzIGluIHBhcmFsbGVsLiBzdG9jayBzaXRlIHNlZW1zIHRvIHJlbHkgb24gYnJvd3NlciBsaW1pdHMgKDYsIHVzdWFsbHkpLCBzZW5kaW5nCiAgLy8gbWFueSByZXF1ZXN0cyBhdCBvbmNlLgogIC8vIHVzaW5nIG91ciBvd24gcXVldWUgbGltaXQgZW5zdXJlcyB0aGF0IG90aGVyIHJlcXVlc3RzIChlLmcuIGNoYXQsIHBvcnRhbCBkZXRhaWxzKSBkb24ndCBnZXQgZGVsYXllZAogIHRoaXMuTUFYX1JFUVVFU1RTID0gNTsKCiAgLy8gdGhpcyBtYW55IHRpbGVzIGluIG9uZSByZXF1ZXN0CiAgdGhpcy5OVU1fVElMRVNfUEVSX1JFUVVFU1QgPSAyNTsKCiAgLy8gbnVtYmVyIG9mIHRpbWVzIHRvIHJldHJ5IGEgdGlsZSBhZnRlciBhbiBlcnJvciAoaW5jbHVkaW5nICJlcnJvcjogVElNRU9VVCIgbm93IC0gYXMgc3RvY2sgaW50ZWwgZG9lcykKICAvLyBUT0RPPyBkaWZmZXJlbnQgcmV0cnkgY291bnRlcnMgZm9yIFRJTUVPVVQgdnMgb3RoZXIgZXJyb3JzLi4/CiAgdGhpcy5NQVhfVElMRV9SRVRSSUVTID0gNTsKCiAgLy8gcmVmcmVzaCB0aW1lcnMKICB0aGlzLk1PVkVfUkVGUkVTSCA9IDM7IC8vIHRpbWUsIGFmdGVyIGEgbWFwIG1vdmUgKHBhbi96b29tKSBiZWZvcmUgc3RhcnRpbmcgdGhlIHJlZnJlc2ggcHJvY2Vzc2luZwogIHRoaXMuU1RBUlRVUF9SRUZSRVNIID0gMzsgLy8gcmVmcmVzaCB0aW1lIHVzZWQgb24gZmlyc3QgbG9hZCBvZiBJSVRDCiAgdGhpcy5JRExFX1JFU1VNRV9SRUZSRVNIID0gNTsgLy8gcmVmcmVzaCB0aW1lIHVzZWQgYWZ0ZXIgcmVzdW1pbmcgZnJvbSBpZGxlCgogIC8vIGFmdGVyIG9uZSBvZiB0aGUgYWJvdmUsIHRoZXJlJ3MgYW4gYWRkaXRpb25hbCBkZWxheSBiZXR3ZWVuIHByZXBhcmluZyB0aGUgcmVmcmVzaCAoY2xlYXJpbmcgb3V0IG9mIGJvdW5kcywKICAvLyBwcm9jZXNzaW5nIGNhY2hlLCBldGMpIGFuZCBhY3R1YWxseSBzZW5kaW5nIHRoZSBmaXJzdCBuZXR3b3JrIHJlcXVlc3RzCiAgdGhpcy5ET1dOTE9BRF9ERUxBWSA9IDE7IC8vIGRlbGF5IGFmdGVyIHByZXBhcmluZyB0aGUgZGF0YSBkb3dubG9hZCBiZWZvcmUgdGlsZSByZXF1ZXN0cyBhcmUgc2VudAoKICAvLyBhIHNob3J0IGRlbGF5IGJldHdlZW4gb25lIHJlcXVlc3QgZmluaXNoaW5nIGFuZCB0aGUgcXVldWUgYmVpbmcgcnVuIGZvciB0aGUgbmV4dCByZXF1ZXN0LgogIHRoaXMuUlVOX1FVRVVFX0RFTEFZID0gMDsKCiAgLy8gZGVsYXkgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIHF1ZXVlIGFmdGVyIGZhaWxlZCByZXF1ZXN0cwogIHRoaXMuQkFEX1JFUVVFU1RfUlVOX1FVRVVFX0RFTEFZID0gNTsgLy8gbG9uZ2VyIGRlbGF5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBhZnRlciBlcnJvcnMgKG90aGVyIHRoYW4gVElNRU9VVCkKCiAgLy8gZGVsYXkgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIHF1ZXVlIGFmdGVyIGVtcHR5IHJlc3BvbnNlcwogIHRoaXMuRU1QVFlfUkVTUE9OU0VfUlVOX1FVRVVFX0RFTEFZID0gNTsgLy8gYWxzbyBsb25nIGRlbGF5IC0gZW1wdHkgcmVzcG9uc2VzIGFyZSBsaWtlbHkgZHVlIHRvIHNvbWUgc2VydmVyIGlzc3VlcwoKICAvLyBkZWxheSBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgcXVldWUgYWZ0ZXIgZXJyb3I9PVRJTUVPVVQgcmVxdWVzdHMuIHRoaXMgaXMgJ2V4cGVjdGVkJywgc28gbWluaW1hbCBleHRyYSBkZWxheSBvdmVyIHRoZSByZWd1bGFyIFJVTl9RVUVVRV9ERUxBWQogIHRoaXMuVElNRU9VVF9SRVFVRVNUX1JVTl9RVUVVRV9ERUxBWSA9IDA7CgogIC8vIHJlbmRlciBxdWV1ZQogIC8vIG51bWJlciBvZiBpdGVtcyB0byBwcm9jZXNzIGluIGVhY2ggcmVuZGVyIHBhc3MuIHRoZXJlIGFyZSBwcm9zIGFuZCBjb25zIHRvIHNtYWxsZXIgYW5kIGxhcmdlciB2YWx1ZXMKICAvLyAoaG93ZXZlciwgaWYgdXNpbmcgbGVhZmxldCBjYW52YXMgcmVuZGVyaW5nLCBpdCBtYWtlcyBzZW5zZSB0byBwdXNoIGFzIG11Y2ggYXMgcG9zc2libGUgdGhyb3VnaCBldmVyeSB0aW1lKQogIHRoaXMuUkVOREVSX0JBVENIX1NJWkUgPSB3aW5kb3cubWFwLm9wdGlvbnMucHJlZmVyQ2FudmFzID8gMWU5IDogMTUwMDsKCiAgLy8gZGVsYXkgYmVmb3JlIHJlcGVhdGluZyB0aGUgcmVuZGVyIGxvb3AuIHRoaXMgZ2l2ZXMgYSBiZXR0ZXIgY2hhbmNlIGZvciB1c2VyIGludGVyYWN0aW9uCiAgdGhpcy5SRU5ERVJfUEFVU0UgPSB3aW5kb3cuaXNBcHAgPyAwLjIgOiAwLjE7IC8vIDIwMG1zIG1vYmlsZSwgMTAwbXMgZGVza3RvcAoKICB0aGlzLlJFRlJFU0hfQ0xPU0UgPSAzMDA7IC8vIHJlZnJlc2ggdGltZSB0byB1c2UgZm9yIGNsb3NlIHZpZXdzIHo+MTIgd2hlbiBub3QgaWRsZSBhbmQgbm90IG1vdmluZwogIHRoaXMuUkVGUkVTSF9GQVIgPSA5MDA7IC8vIHJlZnJlc2ggdGltZSBmb3IgZmFyIHZpZXdzIHogPD0gMTIKICB0aGlzLkZFVENIX1RPX1JFRlJFU0hfRkFDVE9SID0gMjsgLy8gbWluaW11bSByZWZyZXNoIHRpbWUgaXMgYmFzZWQgb24gdGhlIHRpbWUgdG8gY29tcGxldGUgYSBkYXRhIGZldGNoLCB0aW1lcyB0aGlzIHZhbHVlCgogIC8vIGVuc3VyZSB3ZSBoYXZlIHNvbWUgaW5pdGlhbCBtYXAgc3RhdHVzCiAgdGhpcy5zZXRTdGF0dXMoJ3N0YXJ0dXAnLCB1bmRlZmluZWQsIC0xKTsKfTsKCi8qKgogKiBTdGFydHMgdGhlIGRhdGEgcmVxdWVzdCBwcm9jZXNzLCBzZXR0aW5nIHVwIGhvb2tzIGFuZCBjYWxsYmFja3MuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTWFwRGF0YVJlcXVlc3QKICovCndpbmRvdy5NYXBEYXRhUmVxdWVzdC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHNhdmVkQ29udGV4dCA9IHRoaXM7CgogIC8vIHNldHVwIGlkbGUgcmVzdW1lIGZ1bmN0aW9uCiAgd2luZG93LmFkZFJlc3VtZUZ1bmN0aW9uKGZ1bmN0aW9uICgpIHsKICAgIHNhdmVkQ29udGV4dC5pZGxlUmVzdW1lKCk7CiAgfSk7CgogIC8vIGFuZCBtYXAgbW92ZSBzdGFydC9lbmQgY2FsbGJhY2tzCiAgd2luZG93Lm1hcC5vbignbW92ZXN0YXJ0JywgdGhpcy5tYXBNb3ZlU3RhcnQsIHRoaXMpOwogIHdpbmRvdy5tYXAub24oJ21vdmVlbmQnLCB0aGlzLm1hcE1vdmVFbmQsIHRoaXMpOwoKICAvLyB0aGVuIHNldCBhIHRpbWVvdXQgdG8gc3RhcnQgdGhlIGZpcnN0IHJlZnJlc2gKICB0aGlzLnJlZnJlc2hPblRpbWVvdXQodGhpcy5TVEFSVFVQX1JFRlJFU0gpOwogIHRoaXMuc2V0U3RhdHVzKCdyZWZyZXNoaW5nJywgdW5kZWZpbmVkLCAtMSk7CgogIHRoaXMuY2FjaGU/LnN0YXJ0RXhwaXJlSW50ZXJ2YWwoMTUpOwp9OwoKLyoqCiAqIENhbGxiYWNrIGZvciBtYXAgbW92ZW1lbnQgc3RhcnQuIFBhdXNlcyB0aGUgcmVuZGVyaW5nIGFuZCBkYXRhIHJlcXVlc3RzLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqLwp3aW5kb3cuTWFwRGF0YVJlcXVlc3QucHJvdG90eXBlLm1hcE1vdmVTdGFydCA9IGZ1bmN0aW9uICgpIHsKICBsb2cubG9nKCdyZWZyZXNoIG1hcCBtb3Zlc3RhcnQnKTsKCiAgdGhpcy5zZXRTdGF0dXMoJ3BhdXNlZCcpOwogIHRoaXMuY2xlYXJUaW1lb3V0KCk7CiAgdGhpcy5wYXVzZVJlbmRlclF1ZXVlKHRydWUpOwp9OwoKLyoqCiAqIEhhbmRsZXMgbWFwIG1vdmVtZW50IGVuZC4gRGV0ZXJtaW5lcyB3aGV0aGVyIG5ldyBkYXRhIG5lZWRzIHRvIGJlIGZldGNoZWQgYmFzZWQgb24gbWFwIGJvdW5kcyBhbmQgem9vbSBsZXZlbC4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNYXBEYXRhUmVxdWVzdAogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5tYXBNb3ZlRW5kID0gZnVuY3Rpb24gKCkgewogIHZhciBib3VuZHMgPSB3aW5kb3cuY2xhbXBMYXRMbmdCb3VuZHMod2luZG93Lm1hcC5nZXRCb3VuZHMoKSk7CgogIGlmICh0aGlzLmZldGNoZWREYXRhUGFyYW1zKSB7CiAgICAvLyB3ZSBoYXZlIGZldGNoZWQgKG9yIGFyZSBmZXRjaGluZykgZGF0YS4uLgogICAgaWYgKHRoaXMuZmV0Y2hlZERhdGFQYXJhbXMubWFwWm9vbSA9PT0gd2luZG93Lm1hcC5nZXRab29tKCkgJiYgdGhpcy5mZXRjaGVkRGF0YVBhcmFtcy5ib3VuZHMuY29udGFpbnMoYm91bmRzKSkgewogICAgICAvLyAuLi4gYW5kIHRoZSB6b29tIGxldmVsIGlzIHRoZSBzYW1lIGFuZCB0aGUgY3VycmVudCBib3VuZHMgaXMgaW5zaWRlIHRoZSBmZXRjaGVkIGJvdW5kcwogICAgICAvLyBzbywgbm8gbmVlZCB0byBmZXRjaCBkYXRhLiBpZiB0aGVyZSdzIHRpbWUgbGVmdCwgcmVzdG9yZSB0aGUgb3JpZ2luYWwgdGltZW91dAoKICAgICAgdmFyIHJlbWFpbmluZ1RpbWUgPSAodGhpcy50aW1lckV4cGVjdGVkVGltZW91dFRpbWUgLSBuZXcgRGF0ZSgpLmdldFRpbWUoKSkgLyAxMDAwOwoKICAgICAgaWYgKHJlbWFpbmluZ1RpbWUgPiB0aGlzLk1PVkVfUkVGUkVTSCkgewogICAgICAgIHRoaXMuc2V0U3RhdHVzKCdkb25lJywgJ01hcCBtb3ZlZCwgYnV0IG5vIGRhdGEgdXBkYXRlcyBuZWVkZWQnKTsKICAgICAgICB0aGlzLnJlZnJlc2hPblRpbWVvdXQocmVtYWluaW5nVGltZSk7CiAgICAgICAgdGhpcy5wYXVzZVJlbmRlclF1ZXVlKGZhbHNlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgIH0KICB9CgogIHRoaXMuc2V0U3RhdHVzKCdyZWZyZXNoaW5nJywgdW5kZWZpbmVkLCAtMSk7CiAgdGhpcy5yZWZyZXNoT25UaW1lb3V0KHRoaXMuTU9WRV9SRUZSRVNIKTsKfTsKCi8qKgogKiBSZXN1bWVzIGRhdGEgZmV0Y2hpbmcgYW5kIHJlbmRlcmluZyBhZnRlciBiZWluZyBpZGxlLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqLwp3aW5kb3cuTWFwRGF0YVJlcXVlc3QucHJvdG90eXBlLmlkbGVSZXN1bWUgPSBmdW5jdGlvbiAoKSB7CiAgLy8gaWYgd2UgaGF2ZSBubyB0aW1lciBzZXQgYW5kIHRoZXJlIGFyZSBubyBhY3RpdmUgcmVxdWVzdHMsIHJlZnJlc2ggaGFzIGdvbmUgaWRsZSBhbmQgdGhlIHRpbWVyIG5lZWRzIHJlc3RhcnRpbmcKCiAgaWYgKHRoaXMuaWRsZSkgewogICAgbG9nLmxvZygncmVmcmVzaCBtYXAgaWRsZSByZXN1bWUnKTsKICAgIHRoaXMuaWRsZSA9IGZhbHNlOwogICAgdGhpcy5zZXRTdGF0dXMoJ2lkbGUgcmVzdGFydCcsIHVuZGVmaW5lZCwgLTEpOwogICAgdGhpcy5yZWZyZXNoT25UaW1lb3V0KHRoaXMuSURMRV9SRVNVTUVfUkVGUkVTSCk7CiAgfQp9OwoKLyoqCiAqIENsZWFycyB0aGUgY3VycmVudCBkYXRhIHJlZnJlc2ggdGltZW91dC4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNYXBEYXRhUmVxdWVzdAogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHRoaXMudGltZXIpIHsKICAgIGxvZy5sb2coJ2NhbmNlbGxpbmcgZXhpc3RpbmcgbWFwIHJlZnJlc2ggdGltZXInKTsKICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTsKICAgIHRoaXMudGltZXIgPSB1bmRlZmluZWQ7CiAgfQp9OwoKLyoqCiAqIFNldHMgYSB0aW1lb3V0IHRvIHJlZnJlc2ggdGhlIG1hcCBkYXRhLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqIEBwYXJhbSB7bnVtYmVyfSBzZWNvbmRzIC0gVGltZSBpbiBzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHJlZnJlc2hpbmcgdGhlIG1hcCBkYXRhLgogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5yZWZyZXNoT25UaW1lb3V0ID0gZnVuY3Rpb24gKHNlY29uZHMpIHsKICB0aGlzLmNsZWFyVGltZW91dCgpOwoKICBsb2cubG9nKCdzdGFydGluZyBtYXAgcmVmcmVzaCBpbiAnICsgc2Vjb25kcyArICcgc2Vjb25kcycpOwoKICAvLyAndGhpcycgd29uJ3QgYmUgcmlnaHQgaW5zaWRlIHRoZSBjYWxsYmFjaywgc28gc2F2ZSBpdAogIC8vIGFsc28sIGRvdWJsZSBzZXRUaW1lb3V0IHVzZWQgdG8gZW5zdXJlIHRoZSBkZWxheSBvY2N1cnMgYWZ0ZXIgYW55IGJyb3dzZXItcmVsYXRlZCByZW5kZXJpbmcvdXBkYXRpbmcvZXRjCiAgdmFyIF90aGlzID0gdGhpczsKICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICBfdGhpcy50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy50aW1lciA9IHVuZGVmaW5lZDsKICAgICAgX3RoaXMucmVmcmVzaCgpOwogICAgfSwgc2Vjb25kcyAqIDEwMDApOwogIH0sIDApOwogIHRoaXMudGltZXJFeHBlY3RlZFRpbWVvdXRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBzZWNvbmRzICogMTAwMDsKfTsKCi8qKgogKiBTZXRzIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgbWFwIGRhdGEgcmVxdWVzdCwgaW5jbHVkaW5nIGEgc2hvcnQgZGVzY3JpcHRpb24sIGxvbmcgZGVzY3JpcHRpb24sIGFuZCBwcm9ncmVzcy4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNYXBEYXRhUmVxdWVzdAogKiBAcGFyYW0ge3N0cmluZ30gc2hvcnQgLSBTaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgY3VycmVudCBzdGF0dXMuCiAqIEBwYXJhbSB7c3RyaW5nfSBbbG9uZ10gLSBMb25nIGRlc2NyaXB0aW9uIG9mIHRoZSBjdXJyZW50IHN0YXR1cy4KICogQHBhcmFtIHtudW1iZXJ9IFtwcm9ncmVzc10gLSBQcm9ncmVzcyBpbmRpY2F0b3IsIHR5cGljYWxseSByZXByZXNlbnRlZCBhcyBhIHBlcmNlbnRhZ2UuCiAqLwp3aW5kb3cuTWFwRGF0YVJlcXVlc3QucHJvdG90eXBlLnNldFN0YXR1cyA9IGZ1bmN0aW9uIChzaG9ydCwgbG9uZywgcHJvZ3Jlc3MpIHsKICB0aGlzLnN0YXR1cyA9IHsgc2hvcnQ6IHNob3J0LCBsb25nOiBsb25nLCBwcm9ncmVzczogcHJvZ3Jlc3MgfTsKICB3aW5kb3cucmVuZGVyVXBkYXRlU3RhdHVzKCk7Cn07CgovKioKICogR2V0cyB0aGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIG1hcCBkYXRhIHJlcXVlc3QsIGluY2x1ZGluZyBzaG9ydCBkZXNjcmlwdGlvbiwgbG9uZyBkZXNjcmlwdGlvbiwgYW5kIHByb2dyZXNzLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgbWFwIGRhdGEgcmVxdWVzdC4KICovCndpbmRvdy5NYXBEYXRhUmVxdWVzdC5wcm90b3R5cGUuZ2V0U3RhdHVzID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzLnN0YXR1czsKfTsKCi8qKgogKiBJbml0aWF0ZXMgdGhlIG1hcCBkYXRhIHJlZnJlc2ggcHJvY2Vzcy4gVGhpcyBpbmNsdWRlcyByZXNldHRpbmcgbmVjZXNzYXJ5IHByb3BlcnRpZXMsCiAqIHByZXBhcmluZyByZXF1ZXN0cyBmb3IgbWFwIGRhdGEsIGFuZCBoYW5kbGluZyBjYWNoZWQgZGF0YS4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNYXBEYXRhUmVxdWVzdAogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkgewogIC8vIGlmIHdlJ3JlIGlkbGUsIGRvbid0IHJlZnJlc2gKICBpZiAod2luZG93LmlzSWRsZSgpKSB7CiAgICBsb2cubG9nKCdzdXNwZW5kaW5nIG1hcCByZWZyZXNoIC0gaXMgaWRsZScpOwogICAgdGhpcy5zZXRTdGF0dXMoJ2lkbGUnKTsKICAgIHRoaXMuaWRsZSA9IHRydWU7CiAgICByZXR1cm47CiAgfQoKICAvLyB0aW1lIHRoZSByZWZyZXNoIGN5Y2xlCiAgdGhpcy5yZWZyZXNoU3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CgogIHRoaXMuZGVidWdUaWxlcy5yZXNldCgpOwogIHRoaXMucmVzZXRSZW5kZXJRdWV1ZSgpOwoKICAvLyBhICdzZXQnIHRvIGtlZXAgdHJhY2sgb2YgaGFyZCBmYWlsdXJlcyBmb3IgdGlsZXMKICB0aGlzLnRpbGVFcnJvckNvdW50ID0ge307CgogIC8vIHRoZSAnc2V0JyBvZiByZXF1ZXN0ZWQgdGlsZSBRS3MKICAvLyBOT1RFOiBqYXZhc2NyaXB0IGRvZXMgbm90IGd1YXJhbnRlZSBhbnkgb3JkZXIgdG8gcHJvcGVydGllcyBvZiBhbiBvYmplY3QuIGhvd2V2ZXIsIGluIGFsbCBtYWpvciBpbXBsZW1lbnRhdGlvbnMKICAvLyBwcm9wZXJ0aWVzIHJldGFpbiB0aGUgb3JkZXIgdGhleSBhcmUgYWRkZWQgaW4uIElJVEMgdXNlcyB0aGlzIHRvIGNvbnRyb2wgdGhlIHRpbGUgZmV0Y2ggb3JkZXIuIGlmIGJyb3dzZXJzIGNoYW5nZQogIC8vIHRoZW4gZmV0Y2ggb3JkZXIgaXNuJ3Qgb3B0aW1hbCwgYnV0IGl0IHdvbid0IGJyZWFrIHRoaW5ncy4KICB0aGlzLnF1ZXVlZFRpbGVzID0ge307CgogIHZhciBib3VuZHMgPSB3aW5kb3cuY2xhbXBMYXRMbmdCb3VuZHMod2luZG93Lm1hcC5nZXRCb3VuZHMoKSk7CiAgdmFyIG1hcFpvb20gPSB3aW5kb3cubWFwLmdldFpvb20oKTsKCiAgdmFyIGRhdGFab29tID0gd2luZG93LmdldERhdGFab29tRm9yTWFwWm9vbShtYXBab29tKTsKCiAgdmFyIHRpbGVQYXJhbXMgPSB3aW5kb3cuZ2V0TWFwWm9vbVRpbGVQYXJhbWV0ZXJzKGRhdGFab29tKTsKCiAgLy8gREVCVUc6IHJlc2l6ZSB0aGUgYm91bmRzIHNvIHdlIG9ubHkgcmV0cmlldmUgc29tZSBkYXRhCiAgLy8gYm91bmRzID0gYm91bmRzLnBhZCgtMC40KTsKCiAgLy8gdmFyIGRlYnVncmVjdCA9IEwucmVjdGFuZ2xlKGJvdW5kcyx7Y29sb3I6ICdyZWQnLCBmaWxsOiBmYWxzZSwgd2VpZ2h0OiA0LCBvcGFjaXR5OiAwLjh9KS5hZGRUbyhtYXApOwogIC8vIHNldFRpbWVvdXQgKGZ1bmN0aW9uKCl7IG1hcC5yZW1vdmVMYXllcihkZWJ1Z3JlY3QpOyB9LCAxMCoxMDAwKTsKCiAgdmFyIHgxID0gd2luZG93LmxuZ1RvVGlsZShib3VuZHMuZ2V0V2VzdCgpLCB0aWxlUGFyYW1zKTsKICB2YXIgeDIgPSB3aW5kb3cubG5nVG9UaWxlKGJvdW5kcy5nZXRFYXN0KCksIHRpbGVQYXJhbXMpOwogIHZhciB5MSA9IHdpbmRvdy5sYXRUb1RpbGUoYm91bmRzLmdldE5vcnRoKCksIHRpbGVQYXJhbXMpOwogIHZhciB5MiA9IHdpbmRvdy5sYXRUb1RpbGUoYm91bmRzLmdldFNvdXRoKCksIHRpbGVQYXJhbXMpOwoKICAvLyBjYWxjdWxhdGUgdGhlIGZ1bGwgYm91bmRzIGZvciB0aGUgZGF0YSAtIGluY2x1ZGluZyB0aGUgcGFydCBvZiB0aGUgdGlsZXMgb2ZmIHRoZSBzY3JlZW4gZWRnZQogIHZhciBkYXRhQm91bmRzID0gTC5sYXRMbmdCb3VuZHMoWwogICAgW3dpbmRvdy50aWxlVG9MYXQoeTIgKyAxLCB0aWxlUGFyYW1zKSwgd2luZG93LnRpbGVUb0xuZyh4MSwgdGlsZVBhcmFtcyldLAogICAgW3dpbmRvdy50aWxlVG9MYXQoeTEsIHRpbGVQYXJhbXMpLCB3aW5kb3cudGlsZVRvTG5nKHgyICsgMSwgdGlsZVBhcmFtcyldLAogIF0pOwogIC8vIHZhciBkZWJ1Z3JlY3QyID0gTC5yZWN0YW5nbGUoZGF0YUJvdW5kcyx7Y29sb3I6ICdtYWdlbnRhJywgZmlsbDogZmFsc2UsIHdlaWdodDogNCwgb3BhY2l0eTogMC44fSkuYWRkVG8obWFwKTsKICAvLyBzZXRUaW1lb3V0IChmdW5jdGlvbigpeyBtYXAucmVtb3ZlTGF5ZXIoZGVidWdyZWN0Mik7IH0sIDEwKjEwMDApOwoKICAvLyBzdG9yZSB0aGUgcGFyYW1ldGVycyB1c2VkIGZvciBmZXRjaGluZyB0aGUgZGF0YS4gdXNlZCB0byBwcmV2ZW50IHVubmVlZGVkIHJlZnJlc2hlcyBhZnRlciBtb3ZlL3pvb20KICB0aGlzLmZldGNoZWREYXRhUGFyYW1zID0geyBib3VuZHM6IGRhdGFCb3VuZHMsIG1hcFpvb206IG1hcFpvb20sIGRhdGFab29tOiBkYXRhWm9vbSB9OwoKICB3aW5kb3cucnVuSG9va3MoJ21hcERhdGFSZWZyZXNoU3RhcnQnLCB7IGJvdW5kczogYm91bmRzLCBtYXBab29tOiBtYXBab29tLCBkYXRhWm9vbTogZGF0YVpvb20sIG1pblBvcnRhbExldmVsOiB0aWxlUGFyYW1zLmxldmVsLCB0aWxlQm91bmRzOiBkYXRhQm91bmRzIH0pOwoKICB0aGlzLnJlbmRlci5zdGFydFJlbmRlclBhc3MoZGF0YUJvdW5kcyk7CgogIHdpbmRvdy5ydW5Ib29rcygnbWFwRGF0YUVudGl0eUluamVjdCcsIHsgY2FsbGJhY2s6IHRoaXMucmVuZGVyLnByb2Nlc3NHYW1lRW50aXRpZXMuYmluZCh0aGlzLnJlbmRlcikgfSk7CgogIHZhciBsb2dNZXNzYWdlID0gJ3JlcXVlc3RpbmcgZGF0YSB0aWxlcyBhdCB6b29tICcgKyBkYXRhWm9vbTsKICBsb2dNZXNzYWdlICs9ICcgKEwnICsgdGlsZVBhcmFtcy5sZXZlbCArICcrIHBvcnRhbHMnOwogIGxvZ01lc3NhZ2UgKz0gJywgJyArIHRpbGVQYXJhbXMudGlsZXNQZXJFZGdlICsgJyB0aWxlcyBwZXIgZ2xvYmFsIGVkZ2UpLCBtYXAgem9vbSBpcyAnICsgbWFwWm9vbTsKCiAgbG9nLmxvZyhsb2dNZXNzYWdlKTsKCiAgdGhpcy5jYWNoZWRUaWxlQ291bnQgPSAwOwogIHRoaXMucmVxdWVzdGVkVGlsZUNvdW50ID0gMDsKICB0aGlzLnN1Y2Nlc3NUaWxlQ291bnQgPSAwOwogIHRoaXMuZmFpbGVkVGlsZUNvdW50ID0gMDsKICB0aGlzLnN0YWxlVGlsZUNvdW50ID0gMDsKCiAgdmFyIHRpbGVzVG9GZXRjaERpc3RhbmNlID0ge307CgogIC8vIG1hcCBjZW50ZXIgcG9pbnQgLSBmb3IgZmV0Y2hpbmcgY2VudGVyIHRpbGVzIGZpcnN0CiAgdmFyIG1hcENlbnRlclBvaW50ID0gd2luZG93Lm1hcC5wcm9qZWN0KHdpbmRvdy5tYXAuZ2V0Q2VudGVyKCksIG1hcFpvb20pOwoKICAvLyB5IGdvZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0CiAgZm9yICh2YXIgeSA9IHkxOyB5IDw9IHkyOyB5KyspIHsKICAgIC8vIHggZ29lcyBmcm9tIGJvdHRvbSB0byB0b3AoPykKICAgIGZvciAodmFyIHggPSB4MTsgeCA8PSB4MjsgeCsrKSB7CiAgICAgIHZhciB0aWxlX2lkID0gd2luZG93LnBvaW50VG9UaWxlSWQodGlsZVBhcmFtcywgeCwgeSk7CiAgICAgIHZhciBsYXROb3J0aCA9IHdpbmRvdy50aWxlVG9MYXQoeSwgdGlsZVBhcmFtcyk7CiAgICAgIHZhciBsYXRTb3V0aCA9IHdpbmRvdy50aWxlVG9MYXQoeSArIDEsIHRpbGVQYXJhbXMpOwogICAgICB2YXIgbG5nV2VzdCA9IHdpbmRvdy50aWxlVG9MbmcoeCwgdGlsZVBhcmFtcyk7CiAgICAgIHZhciBsbmdFYXN0ID0gd2luZG93LnRpbGVUb0xuZyh4ICsgMSwgdGlsZVBhcmFtcyk7CgogICAgICB0aGlzLmRlYnVnVGlsZXMuY3JlYXRlKHRpbGVfaWQsIFsKICAgICAgICBbbGF0U291dGgsIGxuZ1dlc3RdLAogICAgICAgIFtsYXROb3J0aCwgbG5nRWFzdF0sCiAgICAgIF0pOwoKICAgICAgaWYgKHRoaXMuY2FjaGUgJiYgdGhpcy5jYWNoZS5pc0ZyZXNoKHRpbGVfaWQpKSB7CiAgICAgICAgLy8gZGF0YSBpcyBmcmVzaCBpbiB0aGUgY2FjaGUgLSBqdXN0IHJlbmRlciBpdAogICAgICAgIHRoaXMucHVzaFJlbmRlclF1ZXVlKHRpbGVfaWQsIHRoaXMuY2FjaGUuZ2V0KHRpbGVfaWQpLCAnY2FjaGUtZnJlc2gnKTsKICAgICAgICB0aGlzLmNhY2hlZFRpbGVDb3VudCArPSAxOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIG5vIGZyZXNoIGRhdGEKCiAgICAgICAgLy8gdGlsZSBuZWVkZWQuIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2VudHJlIG9mIHRoZSBzY3JlZW4sIHRvIG9wdGltaXNlIHRoZSBsb2FkIG9yZGVyCgogICAgICAgIHZhciBsYXRDZW50ZXIgPSAobGF0Tm9ydGggKyBsYXRTb3V0aCkgLyAyOwogICAgICAgIHZhciBsbmdDZW50ZXIgPSAobG5nRWFzdCArIGxuZ1dlc3QpIC8gMjsKICAgICAgICB2YXIgdGlsZUxhdExuZyA9IEwubGF0TG5nKGxhdENlbnRlciwgbG5nQ2VudGVyKTsKCiAgICAgICAgdmFyIHRpbGVQb2ludCA9IHdpbmRvdy5tYXAucHJvamVjdCh0aWxlTGF0TG5nLCBtYXBab29tKTsKCiAgICAgICAgdmFyIGRlbHRhID0gbWFwQ2VudGVyUG9pbnQuc3VidHJhY3QodGlsZVBvaW50KTsKICAgICAgICB2YXIgZGlzdGFuY2VTcXVhcmVkID0gZGVsdGEueCAqIGRlbHRhLnggKyBkZWx0YS55ICogZGVsdGEueTsKCiAgICAgICAgdGlsZXNUb0ZldGNoRGlzdGFuY2VbdGlsZV9pZF0gPSBkaXN0YW5jZVNxdWFyZWQ7CiAgICAgICAgdGhpcy5yZXF1ZXN0ZWRUaWxlQ291bnQgKz0gMTsKICAgICAgfQogICAgfQogIH0KCiAgLy8gcmUtb3JkZXIgdGhlIHRpbGUgbGlzdCBieSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50cmUgb2YgdGhlIHNjcmVlbi4gdGhpcyBzaG91bGQgbG9hZCBtb3JlIHJlbGV2YW50IGRhdGEgZmlyc3QKICB2YXIgdGlsZXNUb0ZldGNoID0gT2JqZWN0LmtleXModGlsZXNUb0ZldGNoRGlzdGFuY2UpOwogIHRpbGVzVG9GZXRjaC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICByZXR1cm4gdGlsZXNUb0ZldGNoRGlzdGFuY2VbYV0gLSB0aWxlc1RvRmV0Y2hEaXN0YW5jZVtiXTsKICB9KTsKCiAgZm9yICh2YXIgaSBpbiB0aWxlc1RvRmV0Y2gpIHsKICAgIHZhciBxayA9IHRpbGVzVG9GZXRjaFtpXTsKCiAgICB0aGlzLnF1ZXVlZFRpbGVzW3FrXSA9IHFrOwogIH0KCiAgdGhpcy5zZXRTdGF0dXMoJ2xvYWRpbmcnLCB1bmRlZmluZWQsIC0xKTsKCiAgLy8gdGVjaG5pY2FsbHkgYSByZXF1ZXN0IGhhc24ndCBhY3R1YWxseSBmaW5pc2hlZCAtIGhvd2V2ZXIsIGRpc3BsYXllZCBwb3J0YWwgZGF0YSBoYXMgYmVlbiByZWZyZXNoZWQKICAvLyBzbyBhcyBmYXIgYXMgcGx1Z2lucyBhcmUgY29uY2VybmVkLCBpdCBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIGZpbmlzaGVkIHJlcXVlc3QKICB3aW5kb3cucnVuSG9va3MoJ3JlcXVlc3RGaW5pc2hlZCcsIHsgc3VjY2VzczogdHJ1ZSB9KTsKCiAgbG9nLmxvZygnZG9uZSByZXF1ZXN0IHByZXBhcmF0aW9uIChjbGVhcmVkIG91dC1vZi1ib3VuZHMgYW5kIGludmFsaWQgZm9yIHpvb20sIGFuZCByZW5kZXJlZCBjYWNoZWQgZGF0YSknKTsKCiAgaWYgKE9iamVjdC5rZXlzKHRoaXMucXVldWVkVGlsZXMpLmxlbmd0aCA+IDApIHsKICAgIC8vIHF1ZXVlZCByZXF1ZXN0cyAtIGRvbid0IHN0YXJ0IHByb2Nlc3NpbmcgdGhlIGRvd25sb2FkIHF1ZXVlIGltbWVkaWF0ZWx5IC0gc3RhcnQgaXQgYWZ0ZXIgYSBzaG9ydCBkZWxheQogICAgdGhpcy5kZWxheVByb2Nlc3NSZXF1ZXN0UXVldWUodGhpcy5ET1dOTE9BRF9ERUxBWSk7CiAgfSBlbHNlIHsKICAgIC8vIGFsbCBkYXRhIHdhcyBmcm9tIHRoZSBjYWNoZSwgbm90aGluZyBxdWV1ZWQgLSBydW4gdGhlIHF1ZXVlICdpbW1lZGlhdGVseScgc28gaXQgaGFuZGxlcyB0aGUgZW5kIHJlcXVlc3QgcHJvY2Vzc2luZwogICAgdGhpcy5kZWxheVByb2Nlc3NSZXF1ZXN0UXVldWUoMCk7CiAgfQp9OwoKLyoqCiAqIERlbGF5cyB0aGUgcHJvY2Vzc2luZyBvZiB0aGUgcmVxdWVzdCBxdWV1ZSBmb3IgZmV0Y2hpbmcgbWFwIGRhdGEgdGlsZXMuIFRoZSBkZWxheSBpcyBzcGVjaWZpZWQgaW4gc2Vjb25kcy4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNYXBEYXRhUmVxdWVzdAogKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIFRoZSBkZWxheSBpbiBzZWNvbmRzIGJlZm9yZSBzdGFydGluZyB0byBwcm9jZXNzIHRoZSByZXF1ZXN0IHF1ZXVlLgogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5kZWxheVByb2Nlc3NSZXF1ZXN0UXVldWUgPSBmdW5jdGlvbiAoc2Vjb25kcykgewogIGlmICh0aGlzLnRpbWVyID09PSB1bmRlZmluZWQpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMudGltZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgX3RoaXMucHJvY2Vzc1JlcXVlc3RRdWV1ZSgpOwogICAgICB9LCBzZWNvbmRzICogMTAwMCk7CiAgICB9LCAwKTsKICB9Cn07CgovKioKICogUHJvY2Vzc2VzIHRoZSByZXF1ZXN0IHF1ZXVlIGZvciBmZXRjaGluZyBtYXAgZGF0YSB0aWxlcy4gTWFuYWdlcyB0aGUgbnVtYmVyIG9mIHNpbXVsdGFuZW91cyB0aWxlIHJlcXVlc3RzLAogKiB0aWxlIGVycm9yIGhhbmRsaW5nLCBhbmQgdXBkYXRlcyB0aGUgcmVxdWVzdCBzdGF0dXMuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTWFwRGF0YVJlcXVlc3QKICovCndpbmRvdy5NYXBEYXRhUmVxdWVzdC5wcm90b3R5cGUucHJvY2Vzc1JlcXVlc3RRdWV1ZSA9IGZ1bmN0aW9uICgpIHsKICAvLyBpZiBub3RoaW5nIGxlZnQgaW4gdGhlIHF1ZXVlLCBmaW5pc2gKICBpZiAoT2JqZWN0LmtleXModGhpcy5xdWV1ZWRUaWxlcykubGVuZ3RoID09PSAwKSB7CiAgICAvLyB3ZSBsZWF2ZSB0aGUgcmVuZGVyUXVldWUgY29kZSB0byBoYW5kbGUgZW5kaW5nIHRoZSByZW5kZXIgcGFzcyBub3cKICAgIC8vIChidXQgd2UgbmVlZCB0byBtYWtlIHN1cmUgaXQncyBub3QgbGVmdCB3aXRob3V0IGl0J3MgdGltZXIgcnVubmluZyEpCiAgICBpZiAoIXRoaXMucmVuZGVyUXVldWVQYXVzZWQpIHsKICAgICAgdGhpcy5zdGFydFF1ZXVlVGltZXIodGhpcy5SRU5ERVJfUEFVU0UpOwogICAgfQoKICAgIHJldHVybjsKICB9CgogIC8vIGNyZWF0ZSBhIGxpc3Qgb2YgdGlsZXMgdGhhdCBhcmVuJ3QgcmVxdWVzdGVkIG92ZXIgdGhlIG5ldHdvcmsKICB2YXIgcGVuZGluZ1RpbGVzID0gW107CiAgZm9yIChjb25zdCBpZCBpbiB0aGlzLnF1ZXVlZFRpbGVzKSB7CiAgICBpZiAoIShpZCBpbiB0aGlzLnJlcXVlc3RlZFRpbGVzKSkgewogICAgICBwZW5kaW5nVGlsZXMucHVzaChpZCk7CiAgICB9CiAgfQoKICAvLyBsb2cubG9nKCctIHJlcXVlc3Qgc3RhdGU6ICcrT2JqZWN0LmtleXModGhpcy5yZXF1ZXN0ZWRUaWxlcykubGVuZ3RoKycgdGlsZXMgaW4gJyt0aGlzLmFjdGl2ZVJlcXVlc3RDb3VudCsnIGFjdGl2ZSByZXF1ZXN0cywgJytwZW5kaW5nVGlsZXMubGVuZ3RoKycgdGlsZXMgcXVldWVkJyk7CgogIHZhciByZXF1ZXN0QnVja2V0cyA9IHRoaXMuTUFYX1JFUVVFU1RTIC0gdGhpcy5hY3RpdmVSZXF1ZXN0Q291bnQ7CiAgaWYgKHBlbmRpbmdUaWxlcy5sZW5ndGggPiAwICYmIHJlcXVlc3RCdWNrZXRzID4gMCkgewogICAgdmFyIHJlcXVlc3RCdWNrZXRTaXplID0gTWF0aC5taW4odGhpcy5OVU1fVElMRVNfUEVSX1JFUVVFU1QsIE1hdGgubWF4KDUsIE1hdGguY2VpbChwZW5kaW5nVGlsZXMubGVuZ3RoIC8gcmVxdWVzdEJ1Y2tldHMpKSk7CiAgICBmb3IgKHZhciBidWNrZXQgPSAwOyBidWNrZXQgPCByZXF1ZXN0QnVja2V0czsgYnVja2V0KyspIHsKICAgICAgLy8gaWYgdGhlIHRpbGVzIGZvciB0aGlzIHJlcXVlc3QgaGF2ZSBoYWQgc2V2ZXJhbCByZXRyaWVzLCB1c2Ugc21hbGxlciByZXF1ZXN0cwogICAgICAvLyBtYXliZSBzb21lIG9mIHRoZSB0aWxlcyBjYXVzZWQgYWxsIHRoZSBvdGhlcnMgdG8gZXJyb3I/IG5vIGhhcm0gYW55d2F5LCBhbmQgaXQgbWF5IGhlbHAuLi4KICAgICAgdmFyIG51bVRpbGVzVGhpc1JlcXVlc3QgPSBNYXRoLm1pbihyZXF1ZXN0QnVja2V0U2l6ZSwgcGVuZGluZ1RpbGVzLmxlbmd0aCk7CgogICAgICBsZXQgaWQgPSBwZW5kaW5nVGlsZXNbMF07CiAgICAgIHZhciByZXRyeVRvdGFsID0gdGhpcy50aWxlRXJyb3JDb3VudFtpZF0gfHwgMDsKICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBudW1UaWxlc1RoaXNSZXF1ZXN0OyBpKyspIHsKICAgICAgICBpZCA9IHBlbmRpbmdUaWxlc1tpXTsKICAgICAgICByZXRyeVRvdGFsICs9IHRoaXMudGlsZUVycm9yQ291bnRbaWRdIHx8IDA7CiAgICAgICAgaWYgKHJldHJ5VG90YWwgPiB0aGlzLk1BWF9USUxFX1JFVFJJRVMpIHsKICAgICAgICAgIG51bVRpbGVzVGhpc1JlcXVlc3QgPSBpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgdGlsZXMgPSBwZW5kaW5nVGlsZXMuc3BsaWNlKDAsIG51bVRpbGVzVGhpc1JlcXVlc3QpOwogICAgICBpZiAodGlsZXMubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuc2VuZFRpbGVSZXF1ZXN0KHRpbGVzKTsKICAgICAgfQogICAgfQogIH0KCiAgLy8gdXBkYXRlIHN0YXR1cwogIHZhciBwZW5kaW5nVGlsZUNvdW50ID0gdGhpcy5yZXF1ZXN0ZWRUaWxlQ291bnQgLSAodGhpcy5zdWNjZXNzVGlsZUNvdW50ICsgdGhpcy5mYWlsZWRUaWxlQ291bnQgKyB0aGlzLnN0YWxlVGlsZUNvdW50KTsKICB2YXIgbG9uZ1RleHQgPQogICAgYFRpbGVzOiAke3RoaXMuY2FjaGVkVGlsZUNvdW50fSBjYWNoZWQsIGAgKwogICAgYCR7dGhpcy5zdWNjZXNzVGlsZUNvdW50fSBsb2FkZWQsIGAgKwogICAgKHRoaXMuc3RhbGVUaWxlQ291bnQgPyB0aGlzLnN0YWxlVGlsZUNvdW50ICsgJyBzdGFsZSwgJyA6ICcnKSArCiAgICAodGhpcy5mYWlsZWRUaWxlQ291bnQgPyB0aGlzLmZhaWxlZFRpbGVDb3VudCArICcgZmFpbGVkLCAnIDogJycpICsKICAgIGAke3BlbmRpbmdUaWxlQ291bnR9IHJlbWFpbmluZ2A7CgogIGNvbnN0IHByb2dyZXNzID0gdGhpcy5yZXF1ZXN0ZWRUaWxlQ291bnQgPiAwID8gKHRoaXMucmVxdWVzdGVkVGlsZUNvdW50IC0gcGVuZGluZ1RpbGVDb3VudCkgLyB0aGlzLnJlcXVlc3RlZFRpbGVDb3VudCA6IHVuZGVmaW5lZDsKICB0aGlzLnNldFN0YXR1cygnbG9hZGluZycsIGxvbmdUZXh0LCBwcm9ncmVzcyk7Cn07CgovKioKICogU2VuZHMgcmVxdWVzdHMgZm9yIGEgZ3JvdXAgb2YgdGlsZXMgdG8gdGhlIHNlcnZlci4KICogVXBkYXRlcyB0aGUgZGVidWdUaWxlcyBzdGF0ZSBhbmQgbWFuYWdlcyB0aGUgY291bnQgb2YgYWN0aXZlIHJlcXVlc3RzLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqIEBwYXJhbSB7QXJyYXl9IHRpbGVzIC0gQW4gYXJyYXkgb2YgdGlsZSBpZGVudGlmaWVycyB0byByZXF1ZXN0LgogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5zZW5kVGlsZVJlcXVlc3QgPSBmdW5jdGlvbiAodGlsZXMpIHsKICB2YXIgdGlsZXNMaXN0ID0gW107CgogIGZvciAodmFyIGkgaW4gdGlsZXMpIHsKICAgIHZhciBpZCA9IHRpbGVzW2ldOwoKICAgIHRoaXMuZGVidWdUaWxlcy5zZXRTdGF0ZShpZCwgJ3JlcXVlc3RlZCcpOwoKICAgIHRoaXMucmVxdWVzdGVkVGlsZXNbaWRdID0gdHJ1ZTsKCiAgICBpZiAoaWQgaW4gdGhpcy5xdWV1ZWRUaWxlcykgewogICAgICB0aWxlc0xpc3QucHVzaChpZCk7CiAgICB9IGVsc2UgewogICAgICBsb2cud2Fybignbm8gcXVldWUgZW50cnkgZm9yIHRpbGUgaWQgJyArIGlkKTsKICAgIH0KICB9CgogIHZhciBkYXRhID0geyB0aWxlS2V5czogdGlsZXNMaXN0IH07CgogIHRoaXMuYWN0aXZlUmVxdWVzdENvdW50ICs9IDE7CgogIHZhciBzYXZlZFRoaXMgPSB0aGlzOwoKICAvLyBOT1RFOiBkb24ndCBhZGQgdGhlIHJlcXVlc3Qgd2l0aCB3aW5kb3cucmVxdWVzdC5hZGQsIGFzIHdlIGRvbid0IHdhbnQgdGhlIGFib3J0IGhhbmRsaW5nIHRvIGFwcGx5IHRvIG1hcCBkYXRhIGFueSBtb3JlCiAgd2luZG93LnBvc3RBamF4KAogICAgJ2dldEVudGl0aWVzJywKICAgIGRhdGEsCiAgICBmdW5jdGlvbiAoZGF0YSkgewogICAgICBzYXZlZFRoaXMuaGFuZGxlUmVzcG9uc2UoZGF0YSwgdGlsZXMsIHRydWUpOwogICAgfSwgLy8gcmVxdWVzdCBzdWNjZXNzZnVsIGNhbGxiYWNrCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgIHNhdmVkVGhpcy5oYW5kbGVSZXNwb25zZSh1bmRlZmluZWQsIHRpbGVzLCBmYWxzZSk7CiAgICB9IC8vIHJlcXVlc3QgZmFpbGVkIGNhbGxiYWNrCiAgKTsKfTsKCi8qKgogKiBSZS1xdWV1ZXMgYSB0aWxlIGZvciBkYXRhIGZldGNoaW5nIGluIGNhc2Ugb2YgYW4gZXJyb3Igb3IgdGltZW91dHMuCiAqIEhhbmRsZXMgcmV0cnkgbGltaXRzIGFuZCB1c2VzIHN0YWxlIGRhdGEgaWYgYXZhaWxhYmxlLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSB0aWxlIGlkZW50aWZpZXIuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gZXJyb3IgLSBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgdGlsZSBmZXRjaCBlbmNvdW50ZXJlZCBhbiBlcnJvci4KICovCndpbmRvdy5NYXBEYXRhUmVxdWVzdC5wcm90b3R5cGUucmVxdWV1ZVRpbGUgPSBmdW5jdGlvbiAoaWQsIGVycm9yKSB7CiAgaWYgKGlkIGluIHRoaXMucXVldWVkVGlsZXMpIHsKICAgIC8vIHRpbGUgaXMgY3VycmVudGx5IHdhbnRlZC4uLgoKICAgIC8vIGZpcnN0LCBzZWUgaWYgdGhlIGVycm9yIGNhbiBiZSBpZ25vcmVkIGR1ZSB0byByZXRyeSBjb3VudHMKICAgIGlmIChlcnJvcikgewogICAgICB0aGlzLnRpbGVFcnJvckNvdW50W2lkXSA9ICh0aGlzLnRpbGVFcnJvckNvdW50W2lkXSB8fCAwKSArIDE7CiAgICAgIGlmICh0aGlzLnRpbGVFcnJvckNvdW50W2lkXSA8PSB0aGlzLk1BWF9USUxFX1JFVFJJRVMpIHsKICAgICAgICAvLyByZXRyeSBsaW1pdCBsb3cgZW5vdWdoIC0gY2xlYXIgdGhlIGVycm9yIGZsYWcKICAgICAgICBlcnJvciA9IGZhbHNlOwogICAgICB9CiAgICB9CgogICAgaWYgKGVycm9yKSB7CiAgICAgIC8vIGlmIGVycm9yIGlzIHN0aWxsIHRydWUsIHJldHJ5IGxpbWl0IGhpdC4gdXNlIHN0YWxlIGRhdGEgZnJvbSBjYWNoZSBpZiBhdmFpbGFibGUKICAgICAgdmFyIGRhdGEgPSB0aGlzLmNhY2hlID8gdGhpcy5jYWNoZS5nZXQoaWQpIDogdW5kZWZpbmVkOwogICAgICBpZiAoZGF0YSkgewogICAgICAgIC8vIHdlIGhhdmUgY2FjaGVkIGRhdGEgLSB1c2UgaXQsIGV2ZW4gdGhvdWdoIGl0J3Mgc3RhbGUKICAgICAgICB0aGlzLnB1c2hSZW5kZXJRdWV1ZShpZCwgZGF0YSwgJ2NhY2hlLXN0YWxlJyk7CiAgICAgICAgdGhpcy5zdGFsZVRpbGVDb3VudCArPSAxOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIG5vIGNhY2hlZCBkYXRhCiAgICAgICAgdGhpcy5kZWJ1Z1RpbGVzLnNldFN0YXRlKGlkLCAnZXJyb3InKTsKICAgICAgICB0aGlzLmZhaWxlZFRpbGVDb3VudCArPSAxOwogICAgICB9CiAgICAgIC8vIGFuZCBkZWxldGUgZnJvbSB0aGUgcGVuZGluZyByZXF1ZXN0cy4uLgogICAgICBkZWxldGUgdGhpcy5xdWV1ZWRUaWxlc1tpZF07CiAgICB9IGVsc2UgewogICAgICAvLyBpZiBmYWxzZSwgd2FzIGEgJ3RpbWVvdXQnIG9yIHdlJ3JlIHJldHJ5aW5nLCBzbyB1bmxpbWl0ZWQgcmV0cmllcyAoYXMgdGhlIHN0b2NrIHNpdGUgZG9lcykKICAgICAgdGhpcy5kZWJ1Z1RpbGVzLnNldFN0YXRlKGlkLCAncmV0cnlpbmcnKTsKCiAgICAgIC8vIEZJWE1FPyBpdCdzIG5pY2UgdG8gbW92ZSByZXRyaWVkIHRpbGVzIHRvIHRoZSBlbmQgb2YgdGhlIHJlcXVlc3QgcXVldWUuIGhvd2V2ZXIsIHdlIGRvbid0IGFjdHVhbGx5IGhhdmUgYQogICAgICAvLyBwcm9wZXIgcXVldWUsIGp1c3QgYW4gb2JqZWN0IHdpdGggZ3VpZCBhcyBwcm9wZXJ0aWVzLiBKYXZhc2NyaXB0IHN0YW5kYXJkcyBkb24ndCBndWFyYW50ZWUgdGhlIG9yZGVyIG9mIHByb3BlcnRpZXMKICAgICAgLy8gd2l0aGluIGFuIG9iamVjdC4gaG93ZXZlciwgYWxsIGN1cnJlbnQgYnJvd3NlcnMgZG8ga2VlcCBwcm9wZXJ0eSBvcmRlciwgYW5kIG5ldyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCBhdCB0aGUgZW5kLgogICAgICAvLyB0aGVyZWZvcmUsIGRlbGV0ZSBhbmQgcmUtYWRkIHRoZSByZXF1ZXVlZCB0aWxlIGFuZCBpdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIHF1ZXVlCiAgICAgIGRlbGV0ZSB0aGlzLnF1ZXVlZFRpbGVzW2lkXTsKICAgICAgdGhpcy5xdWV1ZWRUaWxlc1tpZF0gPSBpZDsKICAgIH0KICB9IC8vIGVsc2UgdGhlIHRpbGUgd2Fzbid0IGN1cnJlbnRseSB3YW50ZWQgKGFuIG9sZCBub24tY2FuY2VsbGVkIHJlcXVlc3QpIC0gaWdub3JlCn07CgovKioKICogSGFuZGxlcyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGZvciB0aWxlIGRhdGEgcmVxdWVzdHMuCiAqIFByb2Nlc3NlcyBzdWNjZXNzIGFuZCBlcnJvciBjYXNlcywgbWFuYWdlcyByZXRyaWVzIGZvciBmYWlsZWQgdGlsZXMsIGFuZCB1cGRhdGVzIHRoZSByZW5kZXIgcXVldWUgd2l0aCBuZXcgZGF0YS4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNYXBEYXRhUmVxdWVzdAogKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSByZXNwb25zZSBkYXRhIGZyb20gdGhlIHNlcnZlci4KICogQHBhcmFtIHtBcnJheX0gdGlsZXMgLSBUaGUgYXJyYXkgb2YgcmVxdWVzdGVkIHRpbGUgaWRlbnRpZmllcnMuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3VjY2VzcyAtIEZsYWcgaW5kaWNhdGluZyBpZiB0aGUgcmVxdWVzdCB3YXMgc3VjY2Vzc2Z1bC4KICovCndpbmRvdy5NYXBEYXRhUmVxdWVzdC5wcm90b3R5cGUuaGFuZGxlUmVzcG9uc2UgPSBmdW5jdGlvbiAoZGF0YSwgdGlsZXMsIHN1Y2Nlc3MpIHsKICB0aGlzLmFjdGl2ZVJlcXVlc3RDb3VudCAtPSAxOwoKICB2YXIgc3VjY2Vzc1RpbGVzID0gW107CiAgdmFyIGVycm9yVGlsZXMgPSBbXTsKICB2YXIgcmV0cnlUaWxlcyA9IFtdOwogIHZhciB0aW1lb3V0VGlsZXMgPSBbXTsKICB2YXIgdW5hY2NvdW50ZWRUaWxlcyA9IHRpbGVzLnNsaWNlKDApOyAvLyBDbG9uZQoKICBpZiAoIXN1Y2Nlc3MgfHwgIWRhdGEgfHwgIWRhdGEucmVzdWx0KSB7CiAgICBsb2cud2FybignUmVxdWVzdC5oYW5kbGVSZXNwb25zZTogcmVxdWVzdCBmYWlsZWQgLSByZXF1ZXVpbmcuLi4nICsgKGRhdGEgJiYgZGF0YS5lcnJvciA/ICcgZXJyb3I6ICcgKyBkYXRhLmVycm9yIDogJycpKTsKCiAgICAvLyByZXF1ZXN0IGZhaWxlZCAtIHJlcXVldWUgYWxsIHRoZSB0aWxlcyg/KQoKICAgIGlmIChkYXRhICYmIGRhdGEuZXJyb3IgJiYgZGF0YS5lcnJvciA9PT0gJ1JFVFJZJykgewogICAgICAvLyB0aGUgc2VydmVyIGNhbiBzb21ldGltZXMgYXNrIHVzIHRvIHJldHJ5IGEgcmVxdWVzdC4gdGhpcyBpcyBib3RndWFyZCByZWxhdGVkLCBJIGJlbGlldmUKCiAgICAgIGZvciAoY29uc3QgaSBpbiB0aWxlcykgewogICAgICAgIGNvbnN0IGlkID0gdGlsZXNbaV07CiAgICAgICAgcmV0cnlUaWxlcy5wdXNoKGlkKTsKICAgICAgICB0aGlzLmRlYnVnVGlsZXMuc2V0U3RhdGUoaWQsICdyZXRyeWluZycpOwogICAgICB9CgogICAgICB3aW5kb3cucnVuSG9va3MoJ3JlcXVlc3RGaW5pc2hlZCcsIHsgc3VjY2VzczogZmFsc2UgfSk7CiAgICB9IGVsc2UgewogICAgICBmb3IgKGNvbnN0IGkgaW4gdGlsZXMpIHsKICAgICAgICBjb25zdCBpZCA9IHRpbGVzW2ldOwogICAgICAgIGVycm9yVGlsZXMucHVzaChpZCk7CiAgICAgICAgdGhpcy5kZWJ1Z1RpbGVzLnNldFN0YXRlKGlkLCAncmVxdWVzdC1mYWlsJyk7CiAgICAgIH0KCiAgICAgIHdpbmRvdy5ydW5Ib29rcygncmVxdWVzdEZpbmlzaGVkJywgeyBzdWNjZXNzOiBmYWxzZSB9KTsKICAgIH0KICAgIHVuYWNjb3VudGVkVGlsZXMgPSBbXTsKICB9IGVsc2UgewogICAgLy8gVE9ETzogdXNlIHJlc3VsdC5taW5MZXZlbE9mRGV0YWlsID8/PyBzdG9jayBzaXRlIGRvZXNuJ3QgdXNlIGl0IHlldC4uLgoKICAgIHZhciBtID0gZGF0YS5yZXN1bHQubWFwOwoKICAgIGZvciAodmFyIGlkIGluIG0pIHsKICAgICAgdmFyIHZhbCA9IG1baWRdOwogICAgICB1bmFjY291bnRlZFRpbGVzLnNwbGljZSh1bmFjY291bnRlZFRpbGVzLmluZGV4T2YoaWQpLCAxKTsKICAgICAgaWYgKCdlcnJvcicgaW4gdmFsKSB7CiAgICAgICAgLy8gc2VydmVyIHJldHVybmVkIGFuIGVycm9yIGZvciB0aGlzIGluZGl2aWR1YWwgZGF0YSB0aWxlCgogICAgICAgIGlmICh2YWwuZXJyb3IgPT09ICdUSU1FT1VUJykgewogICAgICAgICAgLy8gVElNRU9VVCBlcnJvcnMgZm9yIGluZGl2aWR1YWwgdGlsZXMgYXJlIHF1aXRlIGNvbW1vbi4gdXNlZCB0byBiZSB1bmxpbWl0ZWQgcmV0cmllcywgYnV0IG5vdCBhbnkgbW9yZQogICAgICAgICAgdGltZW91dFRpbGVzLnB1c2goaWQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBsb2cud2FybignbWFwIGRhdGEgdGlsZSAnICsgaWQgKyAnIGZhaWxlZDogZXJyb3I9PScgKyB2YWwuZXJyb3IpOwogICAgICAgICAgZXJyb3JUaWxlcy5wdXNoKGlkKTsKICAgICAgICAgIHRoaXMuZGVidWdUaWxlcy5zZXRTdGF0ZShpZCwgJ3RpbGUtZmFpbCcpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBubyBlcnJvciBmb3IgdGhpcyBkYXRhIHRpbGUgLSBwcm9jZXNzIGl0CiAgICAgICAgc3VjY2Vzc1RpbGVzLnB1c2goaWQpOwoKICAgICAgICAvLyBzdG9yZSB0aGUgcmVzdWx0IGluIHRoZSBjYWNoZQogICAgICAgIHRoaXMuY2FjaGU/LnN0b3JlKGlkLCB2YWwpOwoKICAgICAgICAvLyBpZiB0aGlzIHRpbGUgd2FzIGluIHRoZSByZW5kZXIgbGlzdCwgcmVuZGVyIGl0CiAgICAgICAgLy8gKHJlcXVlc3RzIGFyZW4ndCBhYm9ydGVkIHdoZW4gbmV3IHJlcXVlc3RzIGFyZSBzdGFydGVkLCBzbyBpdCdzIGVudGlyZWx5IHBvc3NpYmxlIHdlIGRvbid0IHdhbnQgdG8gcmVuZGVyIGl0ISkKICAgICAgICBpZiAoaWQgaW4gdGhpcy5xdWV1ZWRUaWxlcykgewogICAgICAgICAgdGhpcy5wdXNoUmVuZGVyUXVldWUoaWQsIHZhbCwgJ29rJyk7CgogICAgICAgICAgZGVsZXRlIHRoaXMucXVldWVkVGlsZXNbaWRdOwogICAgICAgICAgdGhpcy5zdWNjZXNzVGlsZUNvdW50ICs9IDE7CiAgICAgICAgfSAvLyBlbHNlIHdlIGRvbid0IHdhbnQgdGhpcyB0aWxlIChmcm9tIGFuIG9sZCBub24tY2FuY2VsbGVkIHJlcXVlc3QpIC0gaWdub3JlCiAgICAgIH0KICAgIH0KCiAgICB3aW5kb3cucnVuSG9va3MoJ3JlcXVlc3RGaW5pc2hlZCcsIHsgc3VjY2VzczogdHJ1ZSB9KTsKICB9CgogIC8vIHNldCB0aGUgcXVldWUgZGVsYXkgYmFzZWQgb24gYW55IGVycm9ycyBvciB0aW1lb3V0cwogIC8vIE5PVEU6IHJldHJ5VGltZXMgYXJlIHJldHJpZWQgYXQgdGhlIHJlZ3VsYXIgZGVsYXkgLSBubyBsb25nZXIgd2FpdCBhcyBmb3IgZXJyb3IvdGltZW91dCBjYXNlcwogIGxldCBuZXh0UXVldWVEZWxheTsKICBpZiAoZXJyb3JUaWxlcy5sZW5ndGggPiAwKSB7CiAgICBuZXh0UXVldWVEZWxheSA9IHRoaXMuQkFEX1JFUVVFU1RfUlVOX1FVRVVFX0RFTEFZOwogIH0gZWxzZSBpZiAodW5hY2NvdW50ZWRUaWxlcy5sZW5ndGggPiAwKSB7CiAgICBuZXh0UXVldWVEZWxheSA9IHRoaXMuRU1QVFlfUkVTUE9OU0VfUlVOX1FVRVVFX0RFTEFZOwogIH0gZWxzZSBpZiAodGltZW91dFRpbGVzLmxlbmd0aCA+IDApIHsKICAgIG5leHRRdWV1ZURlbGF5ID0gdGhpcy5USU1FT1VUX1JFUVVFU1RfUlVOX1FVRVVFX0RFTEFZOwogIH0gZWxzZSB7CiAgICBuZXh0UXVldWVEZWxheSA9IHRoaXMuUlVOX1FVRVVFX0RFTEFZOwogIH0KICB2YXIgc3RhdHVzTXNnID0gJ2dldEVudGl0aWVzIHN0YXR1czogJyArIHRpbGVzLmxlbmd0aCArICcgdGlsZXM6ICc7CiAgc3RhdHVzTXNnICs9IHN1Y2Nlc3NUaWxlcy5sZW5ndGggKyAnIHN1Y2Nlc3NmdWwnOwogIGlmIChyZXRyeVRpbGVzLmxlbmd0aCkgc3RhdHVzTXNnICs9ICcsICcgKyByZXRyeVRpbGVzLmxlbmd0aCArICcgcmV0cmllZCc7CiAgaWYgKHRpbWVvdXRUaWxlcy5sZW5ndGgpIHN0YXR1c01zZyArPSAnLCAnICsgdGltZW91dFRpbGVzLmxlbmd0aCArICcgdGltZWQgb3V0JzsKICBpZiAoZXJyb3JUaWxlcy5sZW5ndGgpIHN0YXR1c01zZyArPSAnLCAnICsgZXJyb3JUaWxlcy5sZW5ndGggKyAnIGZhaWxlZCc7CiAgaWYgKHVuYWNjb3VudGVkVGlsZXMubGVuZ3RoKSBzdGF0dXNNc2cgKz0gJywgJyArIHVuYWNjb3VudGVkVGlsZXMubGVuZ3RoICsgJyB1bmFjY291bnRlZCc7CiAgc3RhdHVzTXNnICs9ICcuIGRlbGF5ICcgKyBuZXh0UXVldWVEZWxheSArICcgc2Vjb25kcyc7CiAgbG9nLmxvZyhzdGF0dXNNc2cpOwoKICAvLyByZXF1ZXVlIGFueSAndGltZW91dCcgdGlsZXMgaW1tZWRpYXRlbHkKICBpZiAodGltZW91dFRpbGVzLmxlbmd0aCA+IDApIHsKICAgIGZvciAoY29uc3QgaSBpbiB0aW1lb3V0VGlsZXMpIHsKICAgICAgY29uc3QgaWQgPSB0aW1lb3V0VGlsZXNbaV07CiAgICAgIGRlbGV0ZSB0aGlzLnJlcXVlc3RlZFRpbGVzW2lkXTsKCiAgICAgIHRoaXMucmVxdWV1ZVRpbGUoaWQsIHRydWUpOwogICAgfQogIH0KCiAgaWYgKHJldHJ5VGlsZXMubGVuZ3RoID4gMCkgewogICAgZm9yIChjb25zdCBpIGluIHJldHJ5VGlsZXMpIHsKICAgICAgY29uc3QgaWQgPSByZXRyeVRpbGVzW2ldOwogICAgICBkZWxldGUgdGhpcy5yZXF1ZXN0ZWRUaWxlc1tpZF07CgogICAgICB0aGlzLnJlcXVldWVUaWxlKGlkLCBmYWxzZSk7IC8vIHRpbGVzIGZyb20gYSBlcnJvcj09UkVUUlkgcmVxdWVzdCBhcmUgcmVxdWV1ZWQgd2l0aG91dCBjb3VudGluZyBpdCBhcyBhbiBlcnJvcgogICAgfQogIH0KCiAgaWYgKGVycm9yVGlsZXMubGVuZ3RoID4gMCkgewogICAgZm9yIChjb25zdCBpIGluIGVycm9yVGlsZXMpIHsKICAgICAgY29uc3QgaWQgPSBlcnJvclRpbGVzW2ldOwogICAgICBkZWxldGUgdGhpcy5yZXF1ZXN0ZWRUaWxlc1tpZF07CiAgICAgIHRoaXMucmVxdWV1ZVRpbGUoaWQsIHRydWUpOwogICAgfQogIH0KCiAgaWYgKHVuYWNjb3VudGVkVGlsZXMubGVuZ3RoID4gMCkgewogICAgZm9yIChjb25zdCBpIGluIHVuYWNjb3VudGVkVGlsZXMpIHsKICAgICAgY29uc3QgaWQgPSB1bmFjY291bnRlZFRpbGVzW2ldOwogICAgICBkZWxldGUgdGhpcy5yZXF1ZXN0ZWRUaWxlc1tpZF07CiAgICAgIHRoaXMucmVxdWV1ZVRpbGUoaWQsIHRydWUpOwogICAgfQogIH0KCiAgZm9yIChjb25zdCBpIGluIHN1Y2Nlc3NUaWxlcykgewogICAgY29uc3QgaWQgPSBzdWNjZXNzVGlsZXNbaV07CiAgICBkZWxldGUgdGhpcy5yZXF1ZXN0ZWRUaWxlc1tpZF07CiAgfQoKICB0aGlzLmRlbGF5UHJvY2Vzc1JlcXVlc3RRdWV1ZShuZXh0UXVldWVEZWxheSk7Cn07CgovKioKICogUmVzZXRzIHRoZSByZW5kZXIgcXVldWUsIGNsZWFyaW5nIGV4aXN0aW5nIHF1ZXVlZCByZW5kZXIgdGFza3MgYW5kIHN0b3BwaW5nIGFueSBhY3RpdmUgdGltZXIuCiAqCiAqIEBmdW5jdGlvbgogKiBAbWVtYmVyb2YgTWFwRGF0YVJlcXVlc3QKICovCndpbmRvdy5NYXBEYXRhUmVxdWVzdC5wcm90b3R5cGUucmVzZXRSZW5kZXJRdWV1ZSA9IGZ1bmN0aW9uICgpIHsKICB0aGlzLnJlbmRlclF1ZXVlID0gW107CgogIGlmICh0aGlzLnJlbmRlclF1ZXVlVGltZXIpIHsKICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbmRlclF1ZXVlVGltZXIpOwogICAgdGhpcy5yZW5kZXJRdWV1ZVRpbWVyID0gdW5kZWZpbmVkOwogIH0KICB0aGlzLnJlbmRlclF1ZXVlUGF1c2VkID0gZmFsc2U7Cn07CgovKioKICogUHVzaGVzIGEgdGlsZSB0byB0aGUgcmVuZGVyIHF1ZXVlIGZvciBwcm9jZXNzaW5nLiBUaGUgcXVldWUgaXMgcHJvY2Vzc2VkIHRvIHJlbmRlciBlbnRpdGllcyBvbiB0aGUgbWFwLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBpZGVudGlmaWVyIG9mIHRoZSB0aWxlLgogKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIERhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSB0aWxlLCBpbmNsdWRpbmcgZ2FtZSBlbnRpdHkgR1VJRHMgYW5kIGVudGl0aWVzLgogKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzIC0gVGhlIHN0YXR1cyBvZiB0aGUgdGlsZSwgc3VjaCBhcyAncmVuZGVyLXF1ZXVlJy4KICovCndpbmRvdy5NYXBEYXRhUmVxdWVzdC5wcm90b3R5cGUucHVzaFJlbmRlclF1ZXVlID0gZnVuY3Rpb24gKGlkLCBkYXRhLCBzdGF0dXMpIHsKICB0aGlzLmRlYnVnVGlsZXMuc2V0U3RhdGUoaWQsICdyZW5kZXItcXVldWUnKTsKICB0aGlzLnJlbmRlclF1ZXVlLnB1c2goewogICAgaWQ6IGlkLAogICAgLy8gdGhlIGRhdGEgaW4gdGhlIHJlbmRlciBxdWV1ZSBpcyBtb2RpZmllZCBhcyB3ZSBnbywgc28gd2UgbmVlZCB0byBjb3B5IHRoZSB2YWx1ZXMgb2YgdGhlIGFycmF5cy4ganVzdCBzdG9yaW5nIHRoZSByZWZlcmVuY2Ugd291bGQgbW9kaWZ5IHRoZSBkYXRhIGluIHRoZSBjYWNoZSEKICAgIGRlbGV0ZWQ6IChkYXRhLmRlbGV0ZWRHYW1lRW50aXR5R3VpZHMgfHwgW10pLnNsaWNlKDApLAogICAgZW50aXRpZXM6IChkYXRhLmdhbWVFbnRpdGllcyB8fCBbXSkuc2xpY2UoMCksCiAgICBzdGF0dXM6IHN0YXR1cywKICB9KTsKCiAgaWYgKCF0aGlzLnJlbmRlclF1ZXVlUGF1c2VkKSB7CiAgICB0aGlzLnN0YXJ0UXVldWVUaW1lcih0aGlzLlJFTkRFUl9QQVVTRSk7CiAgfQp9OwoKLyoqCiAqIFN0YXJ0cyBhIHRpbWVyIHRvIHByb2Nlc3MgdGhlIHJlbmRlciBxdWV1ZSBhZnRlciBhIHNwZWNpZmllZCBkZWxheS4KICoKICogQGZ1bmN0aW9uCiAqIEBtZW1iZXJvZiBNYXBEYXRhUmVxdWVzdAogKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBUaGUgZGVsYXkgaW4gc2Vjb25kcyBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgcmVuZGVyIHF1ZXVlLgogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5zdGFydFF1ZXVlVGltZXIgPSBmdW5jdGlvbiAoZGVsYXkpIHsKICBpZiAodGhpcy5yZW5kZXJRdWV1ZVRpbWVyID09PSB1bmRlZmluZWQpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICB0aGlzLnJlbmRlclF1ZXVlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMucmVuZGVyUXVldWVUaW1lciA9IHNldFRpbWVvdXQoCiAgICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMucmVuZGVyUXVldWVUaW1lciA9IHVuZGVmaW5lZDsKICAgICAgICAgIF90aGlzLnByb2Nlc3NSZW5kZXJRdWV1ZSgpOwogICAgICAgIH0sCiAgICAgICAgKGRlbGF5IHx8IDApICogMTAwMAogICAgICApOwogICAgfSwgMCk7CiAgfQp9OwoKLyoqCiAqIFBhdXNlcyBvciByZXN1bWVzIHRoZSByZW5kZXIgcXVldWUgcHJvY2Vzc2luZy4gV2hlbiBwYXVzZWQsIHRoZSBxdWV1ZSB0aW1lciBpcyBjbGVhcmVkLgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqIEBwYXJhbSB7Ym9vbGVhbn0gcGF1c2UgLSBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0byBwYXVzZSAodHJ1ZSkgb3IgcmVzdW1lIChmYWxzZSkgdGhlIHJlbmRlciBxdWV1ZSBwcm9jZXNzaW5nLgogKi8Kd2luZG93Lk1hcERhdGFSZXF1ZXN0LnByb3RvdHlwZS5wYXVzZVJlbmRlclF1ZXVlID0gZnVuY3Rpb24gKHBhdXNlKSB7CiAgdGhpcy5yZW5kZXJRdWV1ZVBhdXNlZCA9IHBhdXNlOwogIGlmIChwYXVzZSkgewogICAgaWYgKHRoaXMucmVuZGVyUXVldWVUaW1lcikgewogICAgICBjbGVhclRpbWVvdXQodGhpcy5yZW5kZXJRdWV1ZVRpbWVyKTsKICAgICAgdGhpcy5yZW5kZXJRdWV1ZVRpbWVyID0gdW5kZWZpbmVkOwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAodGhpcy5yZW5kZXJRdWV1ZS5sZW5ndGggPiAwKSB7CiAgICAgIHRoaXMuc3RhcnRRdWV1ZVRpbWVyKHRoaXMuUkVOREVSX1BBVVNFKTsKICAgIH0KICB9Cn07CgovKioKICogUHJvY2Vzc2VzIHRoZSByZW5kZXIgcXVldWUsIHJlbmRlcmluZyBlbnRpdGllcyBvbiB0aGUgbWFwLgogKiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgYm90aCB0aGUgcmVuZGVyaW5nIG9mIG5ldyBlbnRpdGllcyBhbmQgdGhlIGRlbGV0aW9uIG9mIG9sZCBvbmVzLgogKiBJdCBlbnN1cmVzIHRoYXQgdGhlIHF1YW50aXR5IG9mIGVudGl0aWVzIHByb2Nlc3NlZCBwZXIgY3ljbGUgZG9lcyBub3QgZXhjZWVkIGEgc2V0IGxpbWl0LgogKgogKiBAZnVuY3Rpb24KICogQG1lbWJlcm9mIE1hcERhdGFSZXF1ZXN0CiAqLwp3aW5kb3cuTWFwRGF0YVJlcXVlc3QucHJvdG90eXBlLnByb2Nlc3NSZW5kZXJRdWV1ZSA9IGZ1bmN0aW9uICgpIHsKICB2YXIgZHJhd0VudGl0eUxpbWl0ID0gdGhpcy5SRU5ERVJfQkFUQ0hfU0laRTsKCiAgLy8gVE9ETzogd2UgZG9uJ3QgdGFrZSBhY2NvdW50IG9mIGhvdyBtYW55IG9mIHRoZSBlbnRpdGllcyBhcmUgYWN0dWFsbHkgbmV3L3JlbW92ZWQgLSB0aGV5CiAgLy8gIGNvdWxkIGFscmVhZHkgYmUgZHJhd24gYW5kIG5vdCBjaGFuZ2VkLiB3aWxsIHNlZSBob3cgaXQgd29ya3MgbGlrZSB0aGlzLi4uCiAgd2hpbGUgKGRyYXdFbnRpdHlMaW1pdCA+IDAgJiYgdGhpcy5yZW5kZXJRdWV1ZS5sZW5ndGggPiAwKSB7CiAgICB2YXIgY3VycmVudCA9IHRoaXMucmVuZGVyUXVldWVbMF07CgogICAgaWYgKGN1cnJlbnQuZGVsZXRlZC5sZW5ndGggPiAwKSB7CiAgICAgIHZhciBkZWxldGVUaGlzUGFzcyA9IGN1cnJlbnQuZGVsZXRlZC5zcGxpY2UoMCwgZHJhd0VudGl0eUxpbWl0KTsKICAgICAgZHJhd0VudGl0eUxpbWl0IC09IGRlbGV0ZVRoaXNQYXNzLmxlbmd0aDsKICAgICAgdGhpcy5yZW5kZXIucHJvY2Vzc0RlbGV0ZWRHYW1lRW50aXR5R3VpZHMoZGVsZXRlVGhpc1Bhc3MpOwogICAgfQoKICAgIGlmIChkcmF3RW50aXR5TGltaXQgPiAwICYmIGN1cnJlbnQuZW50aXRpZXMubGVuZ3RoID4gMCkgewogICAgICB2YXIgZHJhd1RoaXNQYXNzID0gY3VycmVudC5lbnRpdGllcy5zcGxpY2UoMCwgZHJhd0VudGl0eUxpbWl0KTsKICAgICAgZHJhd0VudGl0eUxpbWl0IC09IGRyYXdUaGlzUGFzcy5sZW5ndGg7CiAgICAgIHRoaXMucmVuZGVyLnByb2Nlc3NHYW1lRW50aXRpZXMoZHJhd1RoaXNQYXNzLCAnZXh0ZW5kZWQnKTsKICAgIH0KCiAgICBpZiAoY3VycmVudC5kZWxldGVkLmxlbmd0aCA9PT0gMCAmJiBjdXJyZW50LmVudGl0aWVzLmxlbmd0aCA9PT0gMCkgewogICAgICB0aGlzLnJlbmRlclF1ZXVlLnNwbGljZSgwLCAxKTsKICAgICAgdGhpcy5kZWJ1Z1RpbGVzLnNldFN0YXRlKGN1cnJlbnQuaWQsIGN1cnJlbnQuc3RhdHVzKTsKICAgIH0KICB9CgogIGlmICh0aGlzLnJlbmRlclF1ZXVlLmxlbmd0aCA+IDApIHsKICAgIHRoaXMuc3RhcnRRdWV1ZVRpbWVyKHRoaXMuUkVOREVSX1BBVVNFKTsKICB9IGVsc2UgaWYgKE9iamVjdC5rZXlzKHRoaXMucXVldWVkVGlsZXMpLmxlbmd0aCA9PT0gMCkgewogICAgdGhpcy5yZW5kZXIuZW5kUmVuZGVyUGFzcygpOwoKICAgIHZhciBlbmRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICB2YXIgZHVyYXRpb24gPSAoZW5kVGltZSAtIHRoaXMucmVmcmVzaFN0YXJ0VGltZSkgLyAxMDAwOwoKICAgIGxvZy5sb2coJ2ZpbmlzaGVkIHJlcXVlc3RpbmcgZGF0YSEgKHRvb2sgJyArIGR1cmF0aW9uICsgJyBzZWNvbmRzIHRvIGNvbXBsZXRlKScpOwoKICAgIHdpbmRvdy5ydW5Ib29rcygnbWFwRGF0YVJlZnJlc2hFbmQnLCB7fSk7CgogICAgdmFyIGxvbmdTdGF0dXMgPQogICAgICBgVGlsZXM6ICR7dGhpcy5jYWNoZWRUaWxlQ291bnR9IGNhY2hlZCwgYCArCiAgICAgIGAke3RoaXMuc3VjY2Vzc1RpbGVDb3VudH0gbG9hZGVkLCBgICsKICAgICAgKHRoaXMuc3RhbGVUaWxlQ291bnQgPyB0aGlzLnN0YWxlVGlsZUNvdW50ICsgJyBzdGFsZSwgJyA6ICcnKSArCiAgICAgICh0aGlzLmZhaWxlZFRpbGVDb3VudCA/IHRoaXMuZmFpbGVkVGlsZUNvdW50ICsgJyBmYWlsZWQsICcgOiAnJykgKwogICAgICBgaW4gJHtkdXJhdGlvbn0gc2Vjb25kc2A7CgogICAgLy8gcmVmcmVzaCB0aW1lciBiYXNlZCBvbiB0aW1lIHRvIHJ1biB0aGlzIHBhc3MsIHdpdGggYSBtaW5pbXVtIG9mIFJFRlJFU0ggc2Vjb25kcwogICAgdmFyIG1pblJlZnJlc2ggPSB3aW5kb3cubWFwLmdldFpvb20oKSA+IDEyID8gdGhpcy5SRUZSRVNIX0NMT1NFIDogdGhpcy5SRUZSRVNIX0ZBUjsKICAgIHZhciByZWZyZXNoVGltZXIgPSBNYXRoLm1heChtaW5SZWZyZXNoLCBkdXJhdGlvbiAqIHRoaXMuRkVUQ0hfVE9fUkVGUkVTSF9GQUNUT1IpOwogICAgdGhpcy5yZWZyZXNoT25UaW1lb3V0KHJlZnJlc2hUaW1lcik7CiAgICB0aGlzLnNldFN0YXR1cyh0aGlzLmZhaWxlZFRpbGVDb3VudCA/ICdlcnJvcnMnIDogdGhpcy5zdGFsZVRpbGVDb3VudCA/ICdvdXQgb2YgZGF0ZScgOiAnZG9uZScsIGxvbmdTdGF0dXMpOwogIH0KfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IG9ybmFtZW50cy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ29ybmFtZW50cycpOwovKiBnbG9iYWwgSUlUQywgTCwgbG9nIC0tIGVzbGludCAqLwoKLyoqCiAqIEBuYW1lc3BhY2Ugd2luZG93Lm9ybmFtZW50cwogKiBAZGVzY3JpcHRpb24gTWFuYWdlcyB0aGUgb3ZlcmxheSBvZiBhZGRpdGlvbmFsIGltYWdlcyAob3JuYW1lbnRzKSBvbiBwb3J0YWxzLCBzdWNoIGFzIGJlYWNvbnMsIGZyYWNrZXJzLAogKiBhbmQgYW5vbWFseSBtYXJrZXJzLgogKgogKiBBZGRlZCBhcyBwYXJ0IG9mIHRoZSBJbmdyZXNzICNIZWxpb3MgaW4gMjAxNCwgb3JuYW1lbnRzIGFyZSBhZGRpdGlvbmFsIGltYWdlIG92ZXJsYXlzIGZvciBwb3J0YWxzLgogKiBjdXJyZW50bHkgdGhlcmUgYXJlIDYga25vd24gdHlwZXMgb2Ygb3JuYW1lbnRzOiBgYXAkeCRzdWZmaXhgCiAqIC0gYGNsdXN0ZXIgcG9ydGFsc2AgKHdpdGhvdXQgc3VmZml4KQogKiAtIGB2b2xhdGlsZSBwb3J0YWxzYCAoX3YpCiAqIC0gYG1lZXRpbmcgcG9pbnRzYCAoX3N0YXJ0KQogKiAtIGBmaW5pc2ggcG9pbnRzYCAoX2VuZCkKICoKICogQmVhY29ucyBhbmQgRnJhY2tlcnMgd2VyZSBpbnRyb2R1Y2VkIGF0IHRoZSBsYXVuY2ggb2YgdGhlIEluZ3Jlc3MgaW5nYW1lIHN0b3JlIG9uIE5vdmVtYmVyIDFzdCwgMjAxNQogKiAtIGBCZWFjb25zYCAocGUkVEFHIC0gJE5BTUUpIGllOiBgcGVOSUEgLSBOSUFOVElDYAogKiAtIGBGcmFja2Vyc2AgKCdwZUZSQUNLJykKICogKHRoZXJlIGFyZSA3IGRpZmZlcmVudCBjb2xvcnMgZm9yIGVhY2ggb2YgdGhlbSkKICoKICogT3JuYW1lbnQgSURzIGFyZSBkeW5hbWljLiBOSUFOVElDIG1pZ2h0IGNoYW5nZSB0aGVtIGF0IGFueSB0aW1lIHdpdGhvdXQgcHJpb3Igbm90aWNlLgogKiBOZXcgb3JuYW1uZW50IElEcyBmb3VuZCBvbiB0aGUgbWFwIHdpbGwgYmUgcmVjb3JkZWQgYW5kIHNhdmVkIHRvIGtub3duT3JuYW1lbnRzIGZyb20KICogd2hpY2ggdGhlIE9ybmFtZW50cyBkaWFsb2cgd2lsbCBiZSBmaWxsZWQgd2l0aCBjaGVja2VkIGNoZWNrYm94ZXMuCiAqIFRvIGV4Y2x1ZGUgYSBzZXQgb2Ygb3JuYW1lbnRzLCBldmVuIGlmIHRoZXkgaGF2ZSBub3QgeWV0IHNob3duIHVwIG9uIHRoZSBtYXAsIHRoZSB1c2VyCiAqIGNhbiBhZGQgYW4gZW50cnkgdG8gZXhjbHVkZWRPcm5hbWVudHMsIHdoaWNoIHdpbGwgY29tcGFyZWQgKHN0YXJ0c1dpdGgpIHRvIGFsbCBrbm93biBhbmQKICogZnV0dXJlIElEcy4gZXhhbXBsZTogImFwIiB0byBleGNsdWRlIGFsbCBPcm5hbWVudHMgZm9yIGFub21hbGllcyAoYXAxLCBhcDIsIGFwMl92KQogKi8Kd2luZG93Lm9ybmFtZW50cyA9IHsKICAvKioKICAgKiBEZWZhdWx0IHNpemUgZm9yIG9ybmFtZW50LgogICAqIEBjb25zdGFudAogICAqIEB0eXBlIHtudW1iZXJ9CiAgICovCiAgT1ZFUkxBWV9TSVpFOiA2MCwKCiAgLyoqCiAgICogRGVmYXVsdCBvcGFjaXR5IGZvciBvcm5hbWVudC4KICAgKiBAY29uc3RhbnQKICAgKiBAdHlwZSB7bnVtYmVyfQogICAqLwogIE9WRVJMQVlfT1BBQ0lUWTogMC42LAoKICAvKioKICAgKiBPYmplY3QgaG9sZGluZyBvcHRpb25hbCBkZWZpbml0aW9ucyBmb3Igb3JuYW1lbnRzIGFuZCBiZWFjb25zLgogICAqIFRoZSBpY29uIG9iamVjdCBob2xkcyBvcHRpb25hbCBkZWZpbml0aW9ucyBmb3IgdGhlIG9ybmFtZW50cyBhbiBiZWFjb25zLiBUaGUgb2JqZWN0IHNoYWxsCiAgICogYmUgZmlsbGVkIGZyb20gYSBwbHVnaW4KICAgKiBgYGAKICAgKiAnb3JuYW1lbnRJRCcgOiB7CiAgICogICBuYW1lOiAnbWVhbmluZ2Z1bCBuYW1lJywgICAgIC8vIHNob3dzIHVwIGluIGRpYWxvZwogICAqICAgbGF5ZXI6ICduYW1lIGZvciB0aGUgTGF5ZXInLCAvLyBzaG93cyB1cCBpbiBsYXllcmNob29zZXIsIG9wdGlvbmFsLCBpZiBub3Qgc2V0CiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9ybmFtZW50IHdpbGwgYmUgaW4gIk9ybmFtZW50cyIKICAgKiAgIHVybDogJ3VybCcsICAgICAgICAgICAgICAgICAgLy8gZnJvbSB3aGljaCB0aGUgaW1hZ2Ugd2lsbCBiZSB0YWtlbiwgb3B0aW9uYWwsCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDg0eDg0cHggaXMgZGVmYXVsdCwgaWYgbm90IHNldCwgc3RvY2sgaW1hZ2VzIHdpbGwgYmUKICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlZAogICAqICAgb2Zmc2V0OiBbZHgsZHldLCAgICAgICAgICAgICAvLyBvcHRpb25hbCwgc2hpZnQgdGhlIG9ybmFtZW50IHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5IGJ5CiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGR4ICh2ZXJ0aWNhbClhbmQgZHkgKWhvcml6b250YWwuCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFswLCAwLjVdIHRvIHBsYWNlIHJpZ2h0IGFib3ZlIHRoZSBwb3J0YWwuCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgaXMgWzAsIDBdIHRvIGNlbnRlcgogICAqICAgb3BhY2l0eTogMC4uMSAgICAgICAgICAgICAgICAvLyBvcHRpb25hbCwgZGVmYXVsdCBpcyAwLjYKICAgKiB9CiAgICogYGBgCiAgICoKICAgKiBAcHJvcGVydHkge29iamVjdH0gaWNvbiAtIFRoZSBpY29uIG9iamVjdCBmb3Igb3JuYW1lbnRzIGFuZCBiZWFjb25zLgogICAqLwogIGljb246IHt9LAoKICAvKioKICAgKiBMaXN0IG9mIG9ybmFtZW50cyB0byBiZSBleGNsdWRlZC4KICAgKiBAcHJvcGVydHkge3N0cmluZ1tdfSBleGNsdWRlZE9ybmFtZW50cyAtIFBhdHRlcm5zIHRvIGJlIGV4Y2x1ZGVkIGZyb20gZGlzcGxheS4KICAgKi8KICBleGNsdWRlZE9ybmFtZW50czogW10sCgogIC8qKgogICAqIExpc3Qgb2Yga25vd24gb3JuYW1lbnRzLgogICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBrbm93bk9ybmFtZW50cyAtIE9iamVjdCB0cmFja2luZyBrbm93biBvcm5hbWVudHMuCiAgICovCiAga25vd25Pcm5hbWVudHM6IHt9LAoKICAvKioKICAgKiBTZXRzIHVwIHRoZSBvcm5hbWVudCBsYXllciBhbmQgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzLgogICAqCiAgICogQGZ1bmN0aW9uCiAgICogQG1lbWJlcm9mIHdpbmRvdy5vcm5hbWVudHMKICAgKi8KICBzZXR1cDogZnVuY3Rpb24gKCkgewogICAgdGhpcy5fcG9ydGFscyA9IHt9OwogICAgdGhpcy5sYXllckdyb3VwID0gTC5sYXllckdyb3VwOwogICAgaWYgKHdpbmRvdy5tYXAub3B0aW9ucy5wcmVmZXJDYW52YXMgJiYgTC5Ccm93c2VyLmNhbnZhcyAmJiAhd2luZG93LkRJU0FCTEVfQ0FOVkFTSUNPTkxBWUVSKSB7CiAgICAgIHRoaXMubGF5ZXJHcm91cCA9IEwuY2FudmFzSWNvbkxheWVyOwogICAgICBMLkNhbnZhc0ljb25MYXllci5tZXJnZU9wdGlvbnMoeyBwYWRkaW5nOiBMLkNhbnZhcy5wcm90b3R5cGUub3B0aW9ucy5wYWRkaW5nIH0pOwogICAgfQogICAgdGhpcy5sb2FkKCk7CgogICAgdGhpcy5sYXllcnMgPSB7fTsKICAgIHRoaXMubGF5ZXJzWydPcm5hbWVudHMnXSA9IHdpbmRvdy5vcm5hbWVudHMubGF5ZXJHcm91cCgpOwogICAgdGhpcy5sYXllcnNbJ0V4Y2x1ZGVkIG9ybmFtZW50cyddID0gd2luZG93Lm9ybmFtZW50cy5sYXllckdyb3VwKCk7IC8vIHRvIGtlZXAgZXhjbHVkZWQgb3JuYW1lbnRzIGluIGFuIG93biBsYXllcgoKICAgIHdpbmRvdy5sYXllckNob29zZXIuYWRkT3ZlcmxheSh0aGlzLmxheWVyc1snT3JuYW1lbnRzJ10sICdPcm5hbWVudHMnKTsKICAgIHdpbmRvdy5sYXllckNob29zZXIuYWRkT3ZlcmxheSh0aGlzLmxheWVyc1snRXhjbHVkZWQgb3JuYW1lbnRzJ10sICdFeGNsdWRlZCBvcm5hbWVudHMnLCB7IGRlZmF1bHQ6IGZhbHNlIH0pOwoKICAgIElJVEMudG9vbGJveC5hZGRCdXR0b24oewogICAgICBpZDogJ29ybmFtZW50cy10b29sYm94LWxpbmsnLAogICAgICBsYWJlbDogJ09ybmFtZW50cyBPcHQnLAogICAgICB0aXRsZTogJ0VkaXQgb3JuYW1lbnQgZXhjbHVzaW9ucycsCiAgICAgIGFjY2Vzc2tleTogJ28nLAogICAgICBhY3Rpb246IHdpbmRvdy5vcm5hbWVudHMub3JuYW1lbnRzT3B0LAogICAgfSk7CiAgfSwKCiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBsYXllciBmb3IgYSBnaXZlbiBvcm5hbWVudCBJRC4KICAgKgogICAqIEBmdW5jdGlvbgogICAqIEBtZW1iZXJvZiB3aW5kb3cub3JuYW1lbnRzCiAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVySUQgLSBUaGUgSUQgZm9yIHRoZSBuZXcgbGF5ZXIuCiAgICovCiAgY3JlYXRlTGF5ZXI6IGZ1bmN0aW9uIChsYXllcklEKSB7CiAgICB3aW5kb3cub3JuYW1lbnRzLmxheWVyc1tsYXllcklEXSA9IHdpbmRvdy5vcm5hbWVudHMubGF5ZXJHcm91cCgpOwogICAgd2luZG93LmxheWVyQ2hvb3Nlci5hZGRPdmVybGF5KHdpbmRvdy5vcm5hbWVudHMubGF5ZXJzW2xheWVySURdLCBsYXllcklEKTsKICB9LAoKICAvKioKICAgKiBBZGRzIG9ybmFtZW50IG92ZXJsYXlzIHRvIHRoZSBzcGVjaWZpZWQgcG9ydGFsLgogICAqCiAgICogQGZ1bmN0aW9uCiAgICogQG1lbWJlcm9mIHdpbmRvdy5vcm5hbWVudHMKICAgKiBAcGFyYW0ge29iamVjdH0gcG9ydGFsIC0gVGhlIHBvcnRhbCB0byB3aGljaCBvcm5hbWVudHMgYXJlIGFkZGVkLgogICAqLwogIGFkZFBvcnRhbDogZnVuY3Rpb24gKHBvcnRhbCkgewogICAgdGhpcy5yZW1vdmVQb3J0YWwocG9ydGFsKTsKICAgIHZhciBvcm5hbWVudHMgPSBwb3J0YWwub3B0aW9ucy5kYXRhLm9ybmFtZW50czsKICAgIGlmIChvcm5hbWVudHMgJiYgb3JuYW1lbnRzLmxlbmd0aCkgewogICAgICB0aGlzLl9wb3J0YWxzW3BvcnRhbC5vcHRpb25zLmd1aWRdID0gb3JuYW1lbnRzLm1hcChmdW5jdGlvbiAob3JuYW1lbnQpIHsKICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLmxheWVyc1snT3JuYW1lbnRzJ107CiAgICAgICAgdmFyIG9wYWNpdHkgPSB0aGlzLk9WRVJMQVlfT1BBQ0lUWTsKICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuT1ZFUkxBWV9TSVpFICogd2luZG93LnBvcnRhbE1hcmtlclNjYWxlKCk7CiAgICAgICAgdmFyIGFuY2hvciA9IFtzaXplIC8gMiwgc2l6ZSAvIDJdOwogICAgICAgIHZhciBpY29uVXJsID0gJy8vY29tbW9uZGF0YXN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vaW5ncmVzcy5jb20vaW1nL21hcF9pY29ucy9tYXJrZXJfaW1hZ2VzLycgKyBvcm5hbWVudCArICcucG5nJzsKCiAgICAgICAgaWYgKCF0aGlzLmtub3duT3JuYW1lbnRzW29ybmFtZW50XSkgewogICAgICAgICAgdGhpcy5rbm93bk9ybmFtZW50c1tvcm5hbWVudF0gPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmIChvcm5hbWVudCBpbiB0aGlzLmljb24pIHsKICAgICAgICAgIGlmICh0aGlzLmljb25bb3JuYW1lbnRdLmxheWVyKSB7CiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyc1t0aGlzLmljb25bb3JuYW1lbnRdLmxheWVyXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgbG9nLmxvZygnQWRkIG1pc3NpbmcgbGF5ZXI6ICcsIHRoaXMuaWNvbltvcm5hbWVudF0ubGF5ZXIpOwogICAgICAgICAgICAgIHdpbmRvdy5vcm5hbWVudHMuY3JlYXRlTGF5ZXIod2luZG93Lm9ybmFtZW50cy5pY29uW29ybmFtZW50XS5sYXllcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGF5ZXIgPSB0aGlzLmxheWVyc1t3aW5kb3cub3JuYW1lbnRzLmljb25bb3JuYW1lbnRdLmxheWVyXTsKICAgICAgICAgIH0KICAgICAgICAgIGlmICh3aW5kb3cub3JuYW1lbnRzLmljb25bb3JuYW1lbnRdLnVybCkgewogICAgICAgICAgICBpY29uVXJsID0gd2luZG93Lm9ybmFtZW50cy5pY29uW29ybmFtZW50XS51cmw7CiAgICAgICAgICAgIGlmICh0aGlzLmljb25bb3JuYW1lbnRdLm9mZnNldCkgewogICAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLmljb25bb3JuYW1lbnRdLm9mZnNldDsKICAgICAgICAgICAgICBhbmNob3IgPSBbc2l6ZSAqIG9mZnNldFswXSArIGFuY2hvclswXSwgc2l6ZSAqIG9mZnNldFsxXSArIGFuY2hvclsxXV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMuaWNvbltvcm5hbWVudF0ub3BhY2l0eSkgewogICAgICAgICAgICAgIG9wYWNpdHkgPSB0aGlzLmljb25bb3JuYW1lbnRdLm9wYWNpdHk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBleGNsdWRlID0gZmFsc2U7CiAgICAgICAgaWYgKHRoaXMuZXhjbHVkZWRPcm5hbWVudHMgJiYgISh0aGlzLmV4Y2x1ZGVkT3JuYW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmV4Y2x1ZGVkT3JuYW1lbnRzWzBdID09PSAnJykpIHsKICAgICAgICAgIGV4Y2x1ZGUgPSB0aGlzLmV4Y2x1ZGVkT3JuYW1lbnRzLnNvbWUoZnVuY3Rpb24gKHBhdHRlcm4pIHsKICAgICAgICAgICAgcmV0dXJuIG9ybmFtZW50LnN0YXJ0c1dpdGgocGF0dGVybik7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgZXhjbHVkZSA9IGV4Y2x1ZGUgfHwgdGhpcy5rbm93bk9ybmFtZW50c1tvcm5hbWVudF07CiAgICAgICAgaWYgKGV4Y2x1ZGUpIHsKICAgICAgICAgIGxheWVyID0gdGhpcy5sYXllcnNbJ0V4Y2x1ZGVkIG9ybmFtZW50cyddOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIEwubWFya2VyKHBvcnRhbC5nZXRMYXRMbmcoKSwgewogICAgICAgICAgaWNvbjogTC5pY29uKHsKICAgICAgICAgICAgaWNvblVybDogaWNvblVybCwKICAgICAgICAgICAgaWNvblNpemU6IFtzaXplLCBzaXplXSwKICAgICAgICAgICAgaWNvbkFuY2hvcjogYW5jaG9yLCAvLyBodHRwczovL2dpdGh1Yi5jb20vSUlUQy1DRS9MZWFmbGV0LkNhbnZhcy1NYXJrZXJzL2lzc3Vlcy80CiAgICAgICAgICAgIGNsYXNzTmFtZTogJ25vLXBvaW50ZXItZXZlbnRzJywKICAgICAgICAgIH0pLAogICAgICAgICAgaW50ZXJhY3RpdmU6IGZhbHNlLAogICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLAogICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSwKICAgICAgICAgIGxheWVyOiBsYXllciwKICAgICAgICB9KS5hZGRUbyhsYXllcik7CiAgICAgIH0sIHRoaXMpOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlbW92ZXMgb3JuYW1lbnQgb3ZlcmxheXMgZnJvbSB0aGUgc3BlY2lmaWVkIHBvcnRhbC4KICAgKgogICAqIEBmdW5jdGlvbgogICAqIEBtZW1iZXJvZiB3aW5kb3cub3JuYW1lbnRzCiAgICogQHBhcmFtIHtvYmplY3R9IHBvcnRhbCAtIFRoZSBwb3J0YWwgZnJvbSB3aGljaCBvcm5hbWVudHMgYXJlIHJlbW92ZWQuCiAgICovCiAgcmVtb3ZlUG9ydGFsOiBmdW5jdGlvbiAocG9ydGFsKSB7CiAgICB2YXIgZ3VpZCA9IHBvcnRhbC5vcHRpb25zLmd1aWQ7CiAgICBpZiAodGhpcy5fcG9ydGFsc1tndWlkXSkgewogICAgICB0aGlzLl9wb3J0YWxzW2d1aWRdLmZvckVhY2goZnVuY3Rpb24gKG1hcmtlcikgewogICAgICAgIG1hcmtlci5vcHRpb25zLmxheWVyLnJlbW92ZUxheWVyKG1hcmtlcik7CiAgICAgIH0pOwogICAgICBkZWxldGUgdGhpcy5fcG9ydGFsc1tndWlkXTsKICAgIH0KICB9LAoKICAvKioKICAgKiBJbml0aWFsaXplcyBrbm93biBvcm5hbWVudHMuCiAgICoKICAgKiBAZnVuY3Rpb24KICAgKiBAbWVtYmVyb2Ygd2luZG93Lm9ybmFtZW50cwogICAqLwogIGluaXRPcm5hbWVudHM6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMua25vd25Pcm5hbWVudHMgPSB7fTsKICAgIHRoaXMuc2F2ZSgpOwogIH0sCgogIC8qKgogICAqIExvYWRzIG9ybmFtZW50IGRhdGEgZnJvbSBsb2NhbFN0b3JhZ2UuCiAgICoKICAgKiBAZnVuY3Rpb24KICAgKiBAbWVtYmVyb2Ygd2luZG93Lm9ybmFtZW50cwogICAqLwogIGxvYWQ6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhU3RyOwogICAgdHJ5IHsKICAgICAgZGF0YVN0ciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdleGNsdWRlZE9ybmFtZW50cycpOwogICAgICBpZiAoIWRhdGFTdHIpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5leGNsdWRlZE9ybmFtZW50cyA9IEpTT04ucGFyc2UoZGF0YVN0cik7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGxvZy53YXJuKCdvcm5hbWVudHM6IGZhaWxlZCB0byBsb2FkIGV4Y2x1ZGVkT3JuYW1lbnRzIGZyb20gbG9jYWxTdG9yYWdlOiAnICsgZSk7CiAgICB9CiAgICB0cnkgewogICAgICBkYXRhU3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2tub3duT3JuYW1lbnRzJyk7CiAgICAgIGlmICghZGF0YVN0cikgewogICAgICAgIHRoaXMuaW5pdE9ybmFtZW50cygpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLmtub3duT3JuYW1lbnRzID0gSlNPTi5wYXJzZShkYXRhU3RyKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgbG9nLndhcm4oJ29ybmFtZW50czogZmFpbGVkIHRvIGxvYWQgZGF0YSBmcm9tIGxvY2FsU3RvcmFnZTogJyArIGUpOwogICAgfQogIH0sCgogIC8qKgogICAqIFNhdmVzIHRoZSBjdXJyZW50IG9ybmFtZW50IGNvbmZpZ3VyYXRpb24gdG8gbG9jYWxTdG9yYWdlLgogICAqCiAgICogQGZ1bmN0aW9uCiAgICogQG1lbWJlcm9mIHdpbmRvdy5vcm5hbWVudHMKICAgKi8KICBzYXZlOiBmdW5jdGlvbiAoKSB7CiAgICBsb2NhbFN0b3JhZ2VbJ2V4Y2x1ZGVkT3JuYW1lbnRzJ10gPSBKU09OLnN0cmluZ2lmeSh0aGlzLmV4Y2x1ZGVkT3JuYW1lbnRzKTsKICAgIGxvY2FsU3RvcmFnZVsna25vd25Pcm5hbWVudHMnXSA9IEpTT04uc3RyaW5naWZ5KHRoaXMua25vd25Pcm5hbWVudHMpOwogIH0sCgogIC8qKgogICAqIFJlbG9hZHMgYWxsIG9ybmFtZW50cyBvbiB0aGUgbWFwLgogICAqIEBmdW5jdGlvbgogICAqIEBtZW1iZXJvZiB3aW5kb3cub3JuYW1lbnRzCiAgICovCiAgcmVsb2FkOiBmdW5jdGlvbiAoKSB7CiAgICAvLyByZWxvYWQ6IGFkZFBvcnRhbCBhbHNvIGNhbGxzIHJlbW92ZVBvcnRhbAogICAgZm9yICh2YXIgZ3VpZCBpbiB3aW5kb3cub3JuYW1lbnRzLl9wb3J0YWxzKSB7CiAgICAgIHdpbmRvdy5vcm5hbWVudHMuYWRkUG9ydGFsKHdpbmRvdy5wb3J0YWxzW2d1aWRdKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBQcm9jZXNzZXMgaW5wdXQgZGF0YSBmb3IgbWFuYWdpbmcgb3JuYW1lbnRzLgogICAqCiAgICogQGZ1bmN0aW9uCiAgICogQG1lbWJlcm9mIHdpbmRvdy5vcm5hbWVudHMKICAgKi8KICBwcm9jZXNzSW5wdXQ6IGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5vcm5hbWVudHMuZXhjbHVkZWRPcm5hbWVudHMgPSAkKCcjb3JuYW1lbnRzX0UnKQogICAgICAudmFsKCkKICAgICAgLnNwbGl0KC9bXHMsXSsvKTsKICAgIHdpbmRvdy5vcm5hbWVudHMuZXhjbHVkZWRPcm5hbWVudHMgPSB3aW5kb3cub3JuYW1lbnRzLmV4Y2x1ZGVkT3JuYW1lbnRzLmZpbHRlcihmdW5jdGlvbiAob3JuYW1lbnRDb2RlKSB7CiAgICAgIHJldHVybiBvcm5hbWVudENvZGUgIT09ICcnOwogICAgfSk7CiAgICAvLyBwcm9jZXNzIHRoZSBpbnB1dCBmcm9tIHRoZSBjaGVja2JveGVzCiAgICBmb3IgKHZhciBvcm5hbWVudENvZGUgaW4gd2luZG93Lm9ybmFtZW50cy5rbm93bk9ybmFtZW50cykgewogICAgICB2YXIgaW5wdXQgPSAkKCcjY2hrX29ybl8nICsgb3JuYW1lbnRDb2RlKTsKICAgICAgd2luZG93Lm9ybmFtZW50cy5rbm93bk9ybmFtZW50c1tvcm5hbWVudENvZGVdID0gaW5wdXQuaXMoJzpjaGVja2VkJyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogR2VuZXJhdGVzIGEgbGlzdCBvZiBvcm5hbWVudHMgZm9yIGRpc3BsYXkgaW4gdGhlIG9wdGlvbnMgZGlhbG9nLgogICAqCiAgICogQGZ1bmN0aW9uCiAgICogQG1lbWJlcm9mIHdpbmRvdy5vcm5hbWVudHMKICAgKiBAcmV0dXJucyB7c3RyaW5nfSBIVE1MIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGxpc3Qgb2Ygb3JuYW1lbnRzLgogICAqLwogIG9ybmFtZW50c0xpc3Q6IGZ1bmN0aW9uICgpIHsKICAgIHZhciB0ZXh0ID0gJyc7CiAgICB2YXIgc29ydGVkSURzID0gT2JqZWN0LmtleXMod2luZG93Lm9ybmFtZW50cy5rbm93bk9ybmFtZW50cykuc29ydCgpOwoKICAgIHNvcnRlZElEcy5mb3JFYWNoKGZ1bmN0aW9uIChvcm5hbWVudENvZGUpIHsKICAgICAgdmFyIGhpZGRlbiA9IHdpbmRvdy5vcm5hbWVudHMuZXhjbHVkZWRPcm5hbWVudHMuc29tZShmdW5jdGlvbiAoY29kZSkgewogICAgICAgIHJldHVybiBvcm5hbWVudENvZGUuc3RhcnRzV2l0aChjb2RlKTsKICAgICAgfSk7CgogICAgICB2YXIgbmFtZSA9IHdpbmRvdy5vcm5hbWVudHMuaWNvbltvcm5hbWVudENvZGVdID8gd2luZG93Lm9ybmFtZW50cy5pY29uW29ybmFtZW50Q29kZV0ubmFtZSArICcgKCcgKyBvcm5hbWVudENvZGUgKyAnKScgOiBvcm5hbWVudENvZGU7CiAgICAgIHZhciBjaGVja2VkID0gd2luZG93Lm9ybmFtZW50cy5rbm93bk9ybmFtZW50c1tvcm5hbWVudENvZGVdIHx8IGhpZGRlbiA/ICdjaGVja2VkICcgOiAnJzsKICAgICAgdGV4dCArPSAnPGxhYmVsPjxpbnB1dCBpZD0iY2hrX29ybl8nICsgb3JuYW1lbnRDb2RlICsgJyIgdHlwZT0iY2hlY2tib3giICcgKyBjaGVja2VkOwogICAgICB0ZXh0ICs9ICcgb25jaGFuZ2U9IndpbmRvdy5vcm5hbWVudHMucHJvY2Vzc0lucHV0KCk7d2luZG93Lm9ybmFtZW50cy5zYXZlKCk7d2luZG93Lm9ybmFtZW50cy5yZWxvYWQoKSInOwogICAgICB0ZXh0ICs9IGhpZGRlbiA/ICdkaXNhYmxlZCcgOiAnJzsKICAgICAgdGV4dCArPSAnPicgKyBuYW1lICsgJzwvbGFiZWw+PGJyPic7CiAgICB9KTsKICAgIHJldHVybiB0ZXh0OwogIH0sCgogIC8qKgogICAqIFJlcGxhY2VzIHRoZSBjb250ZW50IG9mIHRoZSBvcm5hbWVudHMgbGlzdCBpbiB0aGUgZGlhbG9nLgogICAqCiAgICogQGZ1bmN0aW9uCiAgICogQG1lbWJlcm9mIHdpbmRvdy5vcm5hbWVudHMKICAgKi8KICByZXBsYWNlT0w6IGZ1bmN0aW9uICgpIHsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcm5hbWVudHNMaXN0JykuaW5uZXJIVE1MID0gd2luZG93Lm9ybmFtZW50cy5vcm5hbWVudHNMaXN0KCk7CiAgfSwKCiAgLyoqCiAgICogSGFuZGxlcyBjaGFuZ2VzIGluIG9ybmFtZW50IG9wdGlvbnMgYW5kIHVwZGF0ZXMgdGhlIG1hcCBhY2NvcmRpbmdseS4KICAgKgogICAqIEBmdW5jdGlvbgogICAqIEBtZW1iZXJvZiB3aW5kb3cub3JuYW1lbnRzCiAgICovCiAgb25DaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiAoKSB7CiAgICB3aW5kb3cub3JuYW1lbnRzLnByb2Nlc3NJbnB1dCgpOwogICAgd2luZG93Lm9ybmFtZW50cy5yZXBsYWNlT0woKTsKICAgIHdpbmRvdy5vcm5hbWVudHMuc2F2ZSgpOwogICAgd2luZG93Lm9ybmFtZW50cy5yZWxvYWQoKTsKICB9LAoKICAvKioKICAgKiBPcGVucyB0aGUgZGlhbG9nIGZvciBvcm5hbWVudCBvcHRpb25zLCBhbGxvd2luZyB1c2VycyB0byBtYW5hZ2Ugb3JuYW1lbnQgdmlzaWJpbGl0eS4KICAgKgogICAqIEBmdW5jdGlvbgogICAqIEBtZW1iZXJvZiB3aW5kb3cub3JuYW1lbnRzCiAgICovCiAgb3JuYW1lbnRzT3B0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZXhjbHVkZWRJRHMgPSB3aW5kb3cub3JuYW1lbnRzLmV4Y2x1ZGVkT3JuYW1lbnRzLmpvaW4oJywnKTsKICAgIHZhciBodG1sID0KICAgICAgJzxkaXYgY2xhc3M9Im9ybmFtZW50c09wdHMiPicgKwogICAgICAnSGlkZSBPcm5hbWVudHMgZnJvbSBJSVRDIHRoYXQgc3RhcnQgd2l0aDo8YnI+JyArCiAgICAgIGA8aW5wdXQgdHlwZT0idGV4dCIgdmFsdWU9IiR7ZXhjbHVkZWRJRHN9IiBpZD0ib3JuYW1lbnRzX0UiYCArCiAgICAgICcgb25jaGFuZ2U9IndpbmRvdy5vcm5hbWVudHMub25DaGFuZ2VIYW5kbGVyKCkiIC8+PGJyPicgKwogICAgICAnKHNlcGFyYXRvcjogc3BhY2Ugb3IgY29tbWEgYWxsb3dlZCk8aHI+JyArCiAgICAgICc8Yj5rbm93biBPcm5hbWVudHMsIGNoZWNrIHRvIGhpZGU6PC9iPjxicj4nICsKICAgICAgYDxkaXYgaWQ9Im9ybmFtZW50c0xpc3QiPiAke3dpbmRvdy5vcm5hbWVudHMub3JuYW1lbnRzTGlzdCgpfTwvZGl2PmAgKwogICAgICAnPC9kaXY+JzsKCiAgICB3aW5kb3cuZGlhbG9nKHsKICAgICAgaHRtbDogaHRtbCwKICAgICAgaWQ6ICdvcm5hbWVudHNPcHQnLAogICAgICB0aXRsZTogJ09ybmFtZW50IGV4Y2x1ZGVzJywKICAgICAgYnV0dG9uczogewogICAgICAgIFJFU0VUOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB3aW5kb3cub3JuYW1lbnRzLmluaXRPcm5hbWVudHMoKTsKICAgICAgICAgIHdpbmRvdy5vcm5hbWVudHMucmVsb2FkKCk7CiAgICAgICAgICAkKHRoaXMpLmRpYWxvZygnY2xvc2UnKTsKICAgICAgICB9LAogICAgICAgIE9LOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBwcm9jZXNzIHRoZSBpbnB1dCBmcm9tIHRoZSBpbnB1dAogICAgICAgICAgd2luZG93Lm9ybmFtZW50cy5wcm9jZXNzSW5wdXQoKTsKICAgICAgICAgIHdpbmRvdy5vcm5hbWVudHMuc2F2ZSgpOwogICAgICAgICAgd2luZG93Lm9ybmFtZW50cy5yZWxvYWQoKTsKICAgICAgICAgICQodGhpcykuZGlhbG9nKCdjbG9zZScpOwogICAgICAgIH0sCiAgICAgIH0sCiAgICB9KTsKICB9LAp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogcGFuZXMuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdwYW5lcycpOwovKioKICogQGZpbGUgTWFuYWdlcyB0aGUgZGlzcGxheSBvZiBkaWZmZXJlbnQgcGFuZXMgb2YgdGhlIElJVEMgaW50ZXJmYWNlLgogKiBAbW9kdWxlIHBhbmVzCiAqLwoKLyoqCiAqIFRyYWNrcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBwYW5lLgogKiBAdHlwZSB7c3RyaW5nfQogKiBAbWVtYmVyIGN1cnJlbnRQYW5lCiAqLwp3aW5kb3cuY3VycmVudFBhbmUgPSAnJzsKCi8qKgogKiBTaG93cyBhIHNwZWNpZmllZCBwYW5lIGFuZCBoaWRlcyBvdGhlcnMuCiAqCiAqIEBmdW5jdGlvbiBzaG93CiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgcGFuZSB0byBzaG93LgogKi8Kd2luZG93LnNob3cgPSBmdW5jdGlvbiAoaWQpIHsKICBpZiAod2luZG93LmN1cnJlbnRQYW5lID09PSBpZCkgcmV0dXJuOwogIHdpbmRvdy5jdXJyZW50UGFuZSA9IGlkOwogIHdpbmRvdy5oaWRlYWxsKCk7CgogIHdpbmRvdy5ydW5Ib29rcygncGFuZUNoYW5nZWQnLCBpZCk7CgogIC8vIGxvb2sgZm9yIGNvbW0gdGFiIGZpcnN0CiAgaWYgKHdpbmRvdy5jaGF0LmdldENoYW5uZWxEZXNjKGlkKSkgd2luZG93LmNoYXQuc2hvdyhpZCk7CiAgZWxzZSB7CiAgICBzd2l0Y2ggKGlkKSB7CiAgICAgIGNhc2UgJ21hcCc6CiAgICAgICAgd2luZG93LnNtYXJ0cGhvbmUubWFwQnV0dG9uLmNsaWNrKCk7CiAgICAgICAgJCgnI3BvcnRhbF9oaWdobGlnaHRfc2VsZWN0Jykuc2hvdygpOwogICAgICAgICQoJyNmYXJtX2xldmVsX3NlbGVjdCcpLnNob3coKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnaW5mbyc6CiAgICAgICAgd2luZG93LnNtYXJ0cGhvbmUuc2lkZUJ1dHRvbi5jbGljaygpOwogICAgICAgIGJyZWFrOwogICAgfQogIH0KfTsKCi8qKgogKiBIaWRlcyBhbGwgcGFuZXMgYW5kIHJlbGF0ZWQgZWxlbWVudHMuCiAqCiAqIEBmdW5jdGlvbiBoaWRlYWxsCiAqLwp3aW5kb3cuaGlkZWFsbCA9IGZ1bmN0aW9uICgpIHsKICAkKCcjY2hhdGNvbnRyb2xzLCAjY2hhdCwgI2NoYXRpbnB1dCwgI3NpZGViYXJ0b2dnbGUsICNzY3JvbGx3cmFwcGVyLCAjdXBkYXRlc3RhdHVzLCAjcG9ydGFsX2hpZ2hsaWdodF9zZWxlY3QnKS5oaWRlKCk7CiAgJCgnI2Zhcm1fbGV2ZWxfc2VsZWN0JykuaGlkZSgpOwogICQoJyNtYXAnKS5jc3MoeyB2aXNpYmlsaXR5OiAnaGlkZGVuJywgb3BhY2l0eTogJzAnIH0pOwogICQoJy51aS10b29sdGlwJykucmVtb3ZlKCk7Cn07CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBwbGF5ZXJfbmFtZXMuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdwbGF5ZXJfbmFtZXMnKTsKLyoqCiAqIEBmaWxlIE1hbmFnZXMgcGxheWVyIG5hbWVzIGFuZCBwcm92aWRlcyBmdW5jdGlvbnMgdG8gY2hlY2sgaWYgYSBwbGF5ZXIgaXMgYSBzcGVjaWFsIHN5c3RlbSBhY2NvdW50LgogKgogKiBAbW9kdWxlIHBsYXllcl9uYW1lcwogKi8KCi8qKgogKiBDaGVja3MgaWYgYSBwbGF5ZXIgbmFtZSBpcyBhIHNwZWNpYWwgc3lzdGVtIGFjY291bnQgKGUuZy4sIGBfX0pBUlZJU19fYCwgYF9fQURBX19gKQogKiB0aGF0IHNob3VsZG4ndCBiZSBsaXN0ZWQgYXMgYSByZWd1bGFyIHBsYXllci4KICoKICogQGZ1bmN0aW9uIGlzU3lzdGVtUGxheWVyCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIHBsYXllciBuYW1lIHRvIGNoZWNrLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHBsYXllciBuYW1lIGlzIGEgc3lzdGVtIGFjY291bnQsIG90aGVyd2lzZSBgZmFsc2VgLgogKi8Kd2luZG93LmlzU3lzdGVtUGxheWVyID0gZnVuY3Rpb24gKG5hbWUpIHsKICBzd2l0Y2ggKG5hbWUpIHsKICAgIGNhc2UgJ19fQURBX18nOgogICAgY2FzZSAnX19KQVJWSVNfXyc6CiAgICBjYXNlICdfX01BQ0hJTkFfXyc6CiAgICAgIHJldHVybiB0cnVlOwoKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBmYWxzZTsKICB9Cn07CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBwb3J0YWxfZGF0YS5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3BvcnRhbF9kYXRhJyk7Ci8qIGdsb2JhbCBMIC0tIGVzbGludCAqLwoKLyoqCiAqIEBmaWxlIENvbnRhaW4gbWlzYyBmdW5jdGlvbnMgdG8gZ2V0IHBvcnRhbCBpbmZvCiAqIEBtb2R1bGUgcG9ydGFsX2RhdGEKICovCgovKioKICogU2VhcmNoIHRocm91Z2ggdGhlIGxpbmtzIGRhdGEgZm9yIGFsbCB0aGF0IGxpbmsgZnJvbSBhbmQgdG8gYSBwb3J0YWwuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggc2VwYXJhdGUgbGlzdHMgb2YgaW4KICogYW5kIG91dCBsaW5rcy4gTWF5IG9yIG1heSBub3QgYmUgYXMgYWNjdXJhdGUgYXMgdGhlIHBvcnRhbCBkZXRhaWxzLCBkZXBlbmRpbmcgb24gaG93IG11Y2ggZGF0YSB0aGUgQVBJIHJldHVybnMuCiAqCiAqIEBmdW5jdGlvbiBnZXRQb3J0YWxMaW5rcwogKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBHVUlEIG9mIHRoZSBwb3J0YWwgdG8gc2VhcmNoIGZvciBsaW5rcy4KICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgYXJyYXlzIG9mIGluY29taW5nICgnaW4nKSBhbmQgb3V0Z29pbmcgKCdvdXQnKSBsaW5rIEdVSURzLgogKi8Kd2luZG93LmdldFBvcnRhbExpbmtzID0gZnVuY3Rpb24gKGd1aWQpIHsKICB2YXIgbGlua3MgPSB7IGluOiBbXSwgb3V0OiBbXSB9OwoKICAkLmVhY2god2luZG93LmxpbmtzLCBmdW5jdGlvbiAoZywgbCkgewogICAgdmFyIGQgPSBsLm9wdGlvbnMuZGF0YTsKCiAgICBpZiAoZC5vR3VpZCA9PT0gZ3VpZCkgewogICAgICBsaW5rcy5vdXQucHVzaChnKTsKICAgIH0KICAgIGlmIChkLmRHdWlkID09PSBndWlkKSB7CiAgICAgIGxpbmtzLmluLnB1c2goZyk7CiAgICB9CiAgfSk7CgogIHJldHVybiBsaW5rczsKfTsKCi8qKgogKiBDb3VudHMgdGhlIHRvdGFsIG51bWJlciBvZiBsaW5rcyAoYm90aCBpbmNvbWluZyBhbmQgb3V0Z29pbmcpIGZvciBhIHNwZWNpZmllZCBwb3J0YWwuCiAqCiAqIEBmdW5jdGlvbiBnZXRQb3J0YWxMaW5rc0NvdW50CiAqIEBwYXJhbSB7c3RyaW5nfSBndWlkIC0gVGhlIEdVSUQgb2YgdGhlIHBvcnRhbC4KICogQHJldHVybnMge251bWJlcn0gVGhlIHRvdGFsIG51bWJlciBvZiBsaW5rcyBmb3IgdGhlIHBvcnRhbC4KICovCndpbmRvdy5nZXRQb3J0YWxMaW5rc0NvdW50ID0gZnVuY3Rpb24gKGd1aWQpIHsKICB2YXIgbGlua3MgPSB3aW5kb3cuZ2V0UG9ydGFsTGlua3MoZ3VpZCk7CiAgcmV0dXJuIGxpbmtzLmluLmxlbmd0aCArIGxpbmtzLm91dC5sZW5ndGg7Cn07CgovKioKICogU2VhcmNoZXMgdGhyb3VnaCB0aGUgZmllbGRzIGZvciBhbGwgZmllbGRzIHRoYXQgcmVmZXJlbmNlIGEgc3BlY2lmaWVkIHBvcnRhbC4KICoKICogQGZ1bmN0aW9uIGdldFBvcnRhbEZpZWxkcwogKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBHVUlEIG9mIHRoZSBwb3J0YWwgdG8gc2VhcmNoIGZvciBmaWVsZHMuCiAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgR1VJRHMgb2YgZmllbGRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcG9ydGFsLgogKi8Kd2luZG93LmdldFBvcnRhbEZpZWxkcyA9IGZ1bmN0aW9uIChndWlkKSB7CiAgdmFyIGZpZWxkcyA9IFtdOwoKICAkLmVhY2god2luZG93LmZpZWxkcywgZnVuY3Rpb24gKGcsIGYpIHsKICAgIHZhciBkID0gZi5vcHRpb25zLmRhdGE7CgogICAgaWYgKGQucG9pbnRzWzBdLmd1aWQgPT09IGd1aWQgfHwgZC5wb2ludHNbMV0uZ3VpZCA9PT0gZ3VpZCB8fCBkLnBvaW50c1syXS5ndWlkID09PSBndWlkKSB7CiAgICAgIGZpZWxkcy5wdXNoKGcpOwogICAgfQogIH0pOwoKICByZXR1cm4gZmllbGRzOwp9OwoKLyoqCiAqIENvdW50cyB0aGUgdG90YWwgbnVtYmVyIG9mIGZpZWxkcyBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpZWQgcG9ydGFsLgogKgogKiBAZnVuY3Rpb24gZ2V0UG9ydGFsRmllbGRzQ291bnQKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsLgogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgdG90YWwgbnVtYmVyIG9mIGZpZWxkcyBhc3NvY2lhdGVkIHdpdGggdGhlIHBvcnRhbC4KICovCndpbmRvdy5nZXRQb3J0YWxGaWVsZHNDb3VudCA9IGZ1bmN0aW9uIChndWlkKSB7CiAgdmFyIGZpZWxkcyA9IHdpbmRvdy5nZXRQb3J0YWxGaWVsZHMoZ3VpZCk7CiAgcmV0dXJuIGZpZWxkcy5sZW5ndGg7Cn07CgovKioKICogWm9vbXMgdGhlIG1hcCB0byBhIHNwZWNpZmljIHBvcnRhbCBhbmQgc2hvd3MgaXRzIGRldGFpbHMgaWYgYXZhaWxhYmxlLgogKgogKiBAZnVuY3Rpb24gem9vbVRvQW5kU2hvd1BvcnRhbAogKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge0wuTGF0TG5nfG51bWJlcltdfSBsYXRsbmcgLSBUaGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBvZiB0aGUgcG9ydGFsLgogKi8Kd2luZG93Lnpvb21Ub0FuZFNob3dQb3J0YWwgPSBmdW5jdGlvbiAoZ3VpZCwgbGF0bG5nKSB7CiAgd2luZG93Lm1hcC5zZXRWaWV3KGxhdGxuZywgd2luZG93LkRFRkFVTFRfWk9PTSk7CiAgLy8gaWYgdGhlIGRhdGEgaXMgYXZhaWxhYmxlLCByZW5kZXIgaXQgaW1tZWRpYXRlbHkuIE90aGVyd2lzZSBkZWZlcgogIC8vIHVudGlsIGl0IGJlY29tZXMgYXZhaWxhYmxlLgogIGlmICh3aW5kb3cucG9ydGFsc1tndWlkXSkgd2luZG93LnJlbmRlclBvcnRhbERldGFpbHMoZ3VpZCk7CiAgZWxzZSB3aW5kb3cudXJsUG9ydGFsID0gZ3VpZDsKfTsKCi8qKgogKiBTZWxlY3RzIGEgcG9ydGFsIGJ5IGl0cyBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLgogKgogKiBAZnVuY3Rpb24gc2VsZWN0UG9ydGFsQnlMYXRMbmcKICogQHBhcmFtIHtudW1iZXJ8QXJyYXl8TC5MYXRMbmd9IGxhdCAtIFRoZSBsYXRpdHVkZSBvZiB0aGUgcG9ydGFsCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBhcnJheSBvciBMLkxhdExuZyBvYmplY3QgY29udGFpbmluZyBib3RoIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUuCiAqIEBwYXJhbSB7bnVtYmVyfSBbbG5nXSAtIFRoZSBsb25naXR1ZGUgb2YgdGhlIHBvcnRhbC4KICovCndpbmRvdy5zZWxlY3RQb3J0YWxCeUxhdExuZyA9IGZ1bmN0aW9uIChsYXQsIGxuZykgewogIGlmIChsbmcgPT09IHVuZGVmaW5lZCAmJiBsYXQgaW5zdGFuY2VvZiBBcnJheSkgewogICAgbG5nID0gbGF0WzFdOwogICAgbGF0ID0gbGF0WzBdOwogIH0gZWxzZSBpZiAobG5nID09PSB1bmRlZmluZWQgJiYgbGF0IGluc3RhbmNlb2YgTC5MYXRMbmcpIHsKICAgIGxuZyA9IGxhdC5sbmc7CiAgICBsYXQgPSBsYXQubGF0OwogIH0KICBmb3IgKHZhciBndWlkIGluIHdpbmRvdy5wb3J0YWxzKSB7CiAgICB2YXIgbGF0bG5nID0gd2luZG93LnBvcnRhbHNbZ3VpZF0uZ2V0TGF0TG5nKCk7CiAgICBpZiAobGF0bG5nLmxhdCA9PT0gbGF0ICYmIGxhdGxuZy5sbmcgPT09IGxuZykgewogICAgICB3aW5kb3cucmVuZGVyUG9ydGFsRGV0YWlscyhndWlkKTsKICAgICAgcmV0dXJuOwogICAgfQogIH0KCiAgLy8gbm90IGN1cnJlbnRseSB2aXNpYmxlCiAgd2luZG93LnVybFBvcnRhbExMID0gW2xhdCwgbG5nXTsKICB3aW5kb3cubWFwLnNldFZpZXcod2luZG93LnVybFBvcnRhbExMLCB3aW5kb3cuREVGQVVMVF9aT09NKTsKfTsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGNhY2hlID0ge307CiAgdmFyIGNhY2hlX2xldmVsID0gMDsKICB2YXIgR0NfTElNSVQgPSAxNTAwMDsgLy8gcnVuIGdhcmJhZ2UgY29sbGVjdG9yIHdoZW4gY2FjaGUgaGFzIG1vcmUgdGhhdCA1MDAwIGl0ZW1zCiAgdmFyIEdDX0tFRVAgPSAxMDAwMDsgLy8ga2VlcCB0aGUgNDAwMCBtb3N0IHJlY2VudCBpdGVtcwoKICAvKioKICAgKiBGaW5kcyBhIHBvcnRhbCBHVUlEIGJ5IGl0cyBwb3NpdGlvbi4gU2VhcmNoZXMgdGhyb3VnaCBjdXJyZW50bHkgcmVuZGVyZWQgcG9ydGFscywgZmllbGRzLCBhbmQgbGlua3MuCiAgICogSWYgdGhlIHBvcnRhbCBpcyBub3QgZm91bmQgaW4gdGhlIGN1cnJlbnQgcmVuZGVyLCBpdCBjaGVja3MgYSBjYWNoZSBvZiByZWNlbnRseSBzZWVuIHBvcnRhbHMuCiAgICoKICAgKiBAZnVuY3Rpb24KICAgKiBAbmFtZSBmaW5kUG9ydGFsR3VpZEJ5UG9zaXRpb25FNgogICAqIEBwYXJhbSB7bnVtYmVyfSBsYXRFNiAtIFRoZSBsYXRpdHVkZSBpbiBFNiBmb3JtYXQuCiAgICogQHBhcmFtIHtudW1iZXJ9IGxuZ0U2IC0gVGhlIGxvbmdpdHVkZSBpbiBFNiBmb3JtYXQuCiAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsIGF0IHRoZSBzcGVjaWZpZWQgbG9jYXRpb24sIG9yIG51bGwgaWYgbm90IGZvdW5kLgogICAqLwogIHdpbmRvdy5maW5kUG9ydGFsR3VpZEJ5UG9zaXRpb25FNiA9IGZ1bmN0aW9uIChsYXRFNiwgbG5nRTYpIHsKICAgIHZhciBpdGVtID0gY2FjaGVbbGF0RTYgKyAnLCcgKyBsbmdFNl07CiAgICBpZiAoaXRlbSkgcmV0dXJuIGl0ZW1bMF07CgogICAgLy8gbm93IHRyeSBzZWFyY2hpbmcgdGhyb3VnaCBjdXJyZW50bHkgcmVuZGVyZWQgcG9ydGFscwogICAgZm9yICh2YXIgZ3VpZCBpbiB3aW5kb3cucG9ydGFscykgewogICAgICB2YXIgZGF0YSA9IHdpbmRvdy5wb3J0YWxzW2d1aWRdLm9wdGlvbnMuZGF0YTsKICAgICAgaWYgKGRhdGEubGF0RTYgPT09IGxhdEU2ICYmIGRhdGEubG5nRTYgPT09IGxuZ0U2KSByZXR1cm4gZ3VpZDsKICAgIH0KCiAgICAvLyBub3cgdHJ5IHNlYXJjaGluZyB0aHJvdWdoIGZpZWxkcwogICAgZm9yICh2YXIgZmd1aWQgaW4gd2luZG93LmZpZWxkcykgewogICAgICB2YXIgcG9pbnRzID0gd2luZG93LmZpZWxkc1tmZ3VpZF0ub3B0aW9ucy5kYXRhLnBvaW50czsKCiAgICAgIGZvciAodmFyIGkgaW4gcG9pbnRzKSB7CiAgICAgICAgdmFyIHBvaW50ID0gcG9pbnRzW2ldOwogICAgICAgIGlmIChwb2ludC5sYXRFNiA9PT0gbGF0RTYgJiYgcG9pbnQubG5nRTYgPT09IGxuZ0U2KSByZXR1cm4gcG9pbnQuZ3VpZDsKICAgICAgfQogICAgfQoKICAgIC8vIGFuZCBmaW5hbGx5IHNlYXJjaCB0aHJvdWdoIGxpbmtzCiAgICBmb3IgKHZhciBsZ3VpZCBpbiB3aW5kb3cubGlua3MpIHsKICAgICAgdmFyIGwgPSB3aW5kb3cubGlua3NbbGd1aWRdLm9wdGlvbnMuZGF0YTsKICAgICAgaWYgKGwub0xhdEU2ID09PSBsYXRFNiAmJiBsLm9MbmdFNiA9PT0gbG5nRTYpIHJldHVybiBsLm9HdWlkOwogICAgICBpZiAobC5kTGF0RTYgPT09IGxhdEU2ICYmIGwuZExuZ0U2ID09PSBsbmdFNikgcmV0dXJuIGwuZEd1aWQ7CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfTsKCiAgLyoqCiAgICogUHVzaGVzIGEgcG9ydGFsIEdVSUQgYW5kIGl0cyBwb3NpdGlvbiBpbnRvIGEgY2FjaGUuCiAgICoKICAgKiBAZnVuY3Rpb24KICAgKiBAbmFtZSBwdXNoUG9ydGFsR3VpZFBvc2l0aW9uQ2FjaGUKICAgKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBHVUlEIG9mIHRoZSBwb3J0YWwuCiAgICogQHBhcmFtIHtudW1iZXJ9IGxhdEU2IC0gVGhlIGxhdGl0dWRlIGluIEU2IGZvcm1hdC4KICAgKiBAcGFyYW0ge251bWJlcn0gbG5nRTYgLSBUaGUgbG9uZ2l0dWRlIGluIEU2IGZvcm1hdC4KICAgKi8KICB3aW5kb3cucHVzaFBvcnRhbEd1aWRQb3NpdGlvbkNhY2hlID0gZnVuY3Rpb24gKGd1aWQsIGxhdEU2LCBsbmdFNikgewogICAgY2FjaGVbbGF0RTYgKyAnLCcgKyBsbmdFNl0gPSBbZ3VpZCwgRGF0ZS5ub3coKV07CiAgICBjYWNoZV9sZXZlbCArPSAxOwoKICAgIGlmIChjYWNoZV9sZXZlbCA+IEdDX0xJTUlUKSB7CiAgICAgIE9iamVjdC5rZXlzKGNhY2hlKSAvLyBnZXQgYWxsIGxhdGxuZ3MKICAgICAgICAubWFwKGZ1bmN0aW9uIChsYXRsbmcpIHsKICAgICAgICAgIHJldHVybiBbbGF0bG5nLCBjYWNoZVtsYXRsbmddWzFdXTsKICAgICAgICB9KSAvLyBtYXAgdGhlbSB0byBbbGF0bG5nLCB0aW1lc3RhbXBdCiAgICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBiWzFdIC0gYVsxXTsKICAgICAgICB9KSAvLyBzb3J0IHRoZW0KICAgICAgICAuc2xpY2UoR0NfS0VFUCkgLy8gZHJvcCB0aGUgTVJVCiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIGRlbGV0ZSBjYWNoZVtpdGVtWzBdXTsKICAgICAgICB9KTsgLy8gZGVsZXRlIHRoZSByZXN0CiAgICAgIGNhY2hlX2xldmVsID0gT2JqZWN0LmtleXMoY2FjaGUpLmxlbmd0aDsKICAgIH0KICB9Owp9KSgpOwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogcG9ydGFsX2RldGFpbC5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3BvcnRhbF9kZXRhaWwnKTsKLyoqCiAqIEBmaWxlIFByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgdG8gaGFuZGxlIHBvcnRhbCBkZXRhaWxzLCBpbmNsdWRpbmcgY2FjaGluZyBhbmQgc2VydmVyIHJlcXVlc3RzLgogKiBAbmFtZXNwYWNlIHdpbmRvdy5wb3J0YWxEZXRhaWwKICovCgp2YXIgY2FjaGU7CnZhciByZXF1ZXN0UXVldWUgPSB7fTsKCndpbmRvdy5wb3J0YWxEZXRhaWwgPSBmdW5jdGlvbiAoKSB7fTsKCi8qKgogKiBTZXRzIHVwIHRoZSBwb3J0YWwgZGV0YWlsIGhhbmRsZXIsIGluaXRpYWxpemluZyB0aGUgY2FjaGUuCiAqCiAqIEBmdW5jdGlvbiB3aW5kb3cucG9ydGFsRGV0YWlsLnNldHVwCiAqLwp3aW5kb3cucG9ydGFsRGV0YWlsLnNldHVwID0gZnVuY3Rpb24gKCkgewogIGNhY2hlID0gbmV3IHdpbmRvdy5EYXRhQ2FjaGUoKTsKCiAgY2FjaGUuc3RhcnRFeHBpcmVJbnRlcnZhbCgyMCk7Cn07CgovKioKICogUmV0cmlldmVzIHBvcnRhbCBkZXRhaWxzIGZyb20gY2FjaGUgYnkgR1VJRC4KICoKICogQGZ1bmN0aW9uIHdpbmRvdy5wb3J0YWxEZXRhaWwuZ2V0CiAqIEBwYXJhbSB7c3RyaW5nfSBndWlkIC0gVGhlIEdsb2JhbCBVbmlxdWUgSWRlbnRpZmllciBvZiB0aGUgcG9ydGFsLgogKiBAcmV0dXJucyBDYWNoZWQgcG9ydGFsIGRldGFpbHMgaWYgYXZhaWxhYmxlLgogKi8Kd2luZG93LnBvcnRhbERldGFpbC5nZXQgPSBmdW5jdGlvbiAoZ3VpZCkgewogIHJldHVybiBjYWNoZS5nZXQoZ3VpZCk7Cn07CgovKioKICogU3RvcmVzIHBvcnRhbCBkZXRhaWxzIGluIHRoZSBjYWNoZS4KICoKICogQGZ1bmN0aW9uIHdpbmRvdy5wb3J0YWxEZXRhaWwuc3RvcmUKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR2xvYmFsIFVuaXF1ZSBJZGVudGlmaWVyIG9mIHRoZSBwb3J0YWwuCiAqIEBwYXJhbSB7b2JqZWN0fSBkaWN0IC0gVGhlIHBvcnRhbCBkZXRhaWwgZGF0YS4KICogQHBhcmFtIHtudW1iZXJ9IGZyZXNodGltZSAtIE9wdGlvbmFsIGZyZXNobmVzcyB0aW1lIGZvciBjYWNoZS4KICogQHJldHVybnMgUmVzdWx0IG9mIGNhY2hlIHN0b3JhZ2Ugb3BlcmF0aW9uLgogKi8Kd2luZG93LnBvcnRhbERldGFpbC5zdG9yZSA9IGZ1bmN0aW9uIChndWlkLCBkaWN0LCBmcmVzaHRpbWUpIHsKICByZXR1cm4gY2FjaGUuc3RvcmUoZ3VpZCwgZGljdCwgZnJlc2h0aW1lKTsKfTsKCi8qKgogKiBDaGVja3MgaWYgcG9ydGFsIGRldGFpbHMgYXJlIGZyZXNoIGluIHRoZSBjYWNoZS4KICoKICogQGZ1bmN0aW9uIHdpbmRvdy5wb3J0YWxEZXRhaWwuaXNGcmVzaAogKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBHbG9iYWwgVW5pcXVlIElkZW50aWZpZXIgb2YgdGhlIHBvcnRhbC4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgZGV0YWlscyBhcmUgZnJlc2gsIGZhbHNlIG90aGVyd2lzZS4KICovCndpbmRvdy5wb3J0YWxEZXRhaWwuaXNGcmVzaCA9IGZ1bmN0aW9uIChndWlkKSB7CiAgcmV0dXJuIGNhY2hlLmlzRnJlc2goZ3VpZCk7Cn07Cgp3aW5kb3cucG9ydGFsRGV0YWlsLnJlbW92ZSA9IGZ1bmN0aW9uIChndWlkKSB7CiAgcmV0dXJuIGNhY2hlLnJlbW92ZShndWlkKTsKfTsKCnZhciBoYW5kbGVSZXNwb25zZSA9IGZ1bmN0aW9uIChkZWZlcnJlZCwgZ3VpZCwgZGF0YSwgc3VjY2VzcykgewogIGlmICghZGF0YSB8fCBkYXRhLmVycm9yIHx8ICFkYXRhLnJlc3VsdCkgewogICAgc3VjY2VzcyA9IGZhbHNlOwogIH0KCiAgaWYgKHN1Y2Nlc3MpIHsKICAgIC8vIFBhcnNlIHBvcnRhbCBkZXRhaWxzCiAgICB2YXIgZGljdCA9IHdpbmRvdy5kZWNvZGVBcnJheS5wb3J0YWwoZGF0YS5yZXN1bHQsICdkZXRhaWxlZCcpOwogICAgY2FjaGUuc3RvcmUoZ3VpZCwgZGljdCk7CgogICAgLy8gZW50aXR5IGZvcm1hdCwgYXMgdXNlZCBpbiBtYXAgZGF0YQogICAgdmFyIGVudCA9IFtndWlkLCBkYXRhLnJlc3VsdFsxM10sIGRhdGEucmVzdWx0XTsKICAgIHZhciBwb3J0YWwgPSB3aW5kb3cubWFwRGF0YVJlcXVlc3QucmVuZGVyLmNyZWF0ZVBvcnRhbEVudGl0eShlbnQsICdkZXRhaWxlZCcpOwoKICAgIGRlZmVycmVkLnJlc29sdmUocG9ydGFsLm9wdGlvbnMuZGF0YSk7CiAgICB3aW5kb3cucnVuSG9va3MoJ3BvcnRhbERldGFpbExvYWRlZCcsIHsgZ3VpZDogZ3VpZCwgc3VjY2Vzczogc3VjY2VzcywgZGV0YWlsczogcG9ydGFsLm9wdGlvbnMuZGF0YSwgZW50OiBlbnQsIHBvcnRhbDogcG9ydGFsIH0pOwogIH0gZWxzZSB7CiAgICBpZiAoZGF0YSAmJiBkYXRhLmVycm9yID09PSAnUkVUUlknKSB7CiAgICAgIC8vIHNlcnZlciBhc2tlZCB1cyB0byB0cnkgYWdhaW4KICAgICAgZG9SZXF1ZXN0KGRlZmVycmVkLCBndWlkKTsKICAgIH0gZWxzZSB7CiAgICAgIGRlZmVycmVkLnJlamVjdCgpOwogICAgICB3aW5kb3cucnVuSG9va3MoJ3BvcnRhbERldGFpbExvYWRlZCcsIHsgZ3VpZDogZ3VpZCwgc3VjY2Vzczogc3VjY2VzcyB9KTsKICAgIH0KICB9Cn07Cgp2YXIgZG9SZXF1ZXN0ID0gZnVuY3Rpb24gKGRlZmVycmVkLCBndWlkKSB7CiAgd2luZG93LnBvc3RBamF4KAogICAgJ2dldFBvcnRhbERldGFpbHMnLAogICAgeyBndWlkOiBndWlkIH0sCiAgICBmdW5jdGlvbiAoZGF0YSkgewogICAgICBoYW5kbGVSZXNwb25zZShkZWZlcnJlZCwgZ3VpZCwgZGF0YSwgdHJ1ZSk7CiAgICB9LAogICAgZnVuY3Rpb24gKCkgewogICAgICBoYW5kbGVSZXNwb25zZShkZWZlcnJlZCwgZ3VpZCwgdW5kZWZpbmVkLCBmYWxzZSk7CiAgICB9CiAgKTsKfTsKCi8qKgogKiBSZXF1ZXN0cyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBmb3IgYSBzcGVjaWZpYyBwb3J0YWwuIElmIHRoZSBpbmZvcm1hdGlvbiBpcyBub3QgYWxyZWFkeSBiZWluZyByZXF1ZXN0ZWQsCiAqIGl0IGluaXRpYXRlcyBhIG5ldyByZXF1ZXN0LiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHBvcnRhbCBkZXRhaWxzLgogKgogKiBAZnVuY3Rpb24gd2luZG93LnBvcnRhbERldGFpbC5yZXF1ZXN0CiAqIEBwYXJhbSB7c3RyaW5nfSBndWlkIC0gVGhlIEdsb2JhbCBVbmlxdWUgSWRlbnRpZmllciBvZiB0aGUgcG9ydGFsLgogKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcG9ydGFsIGRldGFpbHMgdXBvbiBzdWNjZXNzZnVsIHJldHJpZXZhbCBvciByZWplY3Rpb24gb24gZmFpbHVyZS4KICovCndpbmRvdy5wb3J0YWxEZXRhaWwucmVxdWVzdCA9IGZ1bmN0aW9uIChndWlkKSB7CiAgaWYgKCFyZXF1ZXN0UXVldWVbZ3VpZF0pIHsKICAgIHZhciBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTsKICAgIHJlcXVlc3RRdWV1ZVtndWlkXSA9IGRlZmVycmVkLnByb21pc2UoKTsKICAgIGRlZmVycmVkLmFsd2F5cyhmdW5jdGlvbiAoKSB7CiAgICAgIGRlbGV0ZSByZXF1ZXN0UXVldWVbZ3VpZF07CiAgICB9KTsKCiAgICBkb1JlcXVlc3QoZGVmZXJyZWQsIGd1aWQpOwogIH0KCiAgcmV0dXJuIHJlcXVlc3RRdWV1ZVtndWlkXTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHBvcnRhbF9kZXRhaWxfZGlzcGxheS5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3BvcnRhbF9kZXRhaWxfZGlzcGxheScpOwovKiBnbG9iYWwgTCAtLSBlc2xpbnQgKi8KCi8qKgogKiBAZmlsZSBNYWluIGNvZGUgYmxvY2sgdGhhdCByZW5kZXJzIHRoZSBwb3J0YWwgZGV0YWlscyBpbiB0aGUgc2lkZWJhciBhbmQKICogbWV0aG9kcyB0aGF0IGhpZ2hsaWdodCB0aGUgcG9ydGFsIGluIHRoZSBtYXAgdmlldy4KICogQG1vZHVsZSBwb3J0YWxfZGV0YWlsX2Rpc3BsYXkKICovCgovKioKICogUmVzZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHNpZGViYXIgd2hlbiBhIG5ldyBwb3J0YWwgaXMgc2VsZWN0ZWQuCiAqCiAqIEBmdW5jdGlvbiByZXNldFNjcm9sbE9uTmV3UG9ydGFsCiAqLwp3aW5kb3cucmVzZXRTY3JvbGxPbk5ld1BvcnRhbCA9IGZ1bmN0aW9uICgpIHsKICBpZiAod2luZG93LnNlbGVjdGVkUG9ydGFsICE9PSB3aW5kb3cucmVuZGVyUG9ydGFsRGV0YWlscy5sYXN0VmlzaWJsZSkgewogICAgLy8gYW5vdGhlciBwb3J0YWwgc2VsZWN0ZWQgc28gc2Nyb2xsIHBvc2l0aW9uIGJlY29tZSBpcnJlbGV2YW50IHRvIG5ldyBwb3J0YWwgZGV0YWlscwogICAgJCgnI3NpZGViYXInKS5zY3JvbGxUb3AoMCk7IC8vIE5COiB0aGlzIHdvcmtzIE9OTFkgd2hlbiAjc2lkZWJhcjp2aXNpYmxlCiAgfQp9OwoKLyoqCiAqIEdlbmVyYXRlcyBhbmQgZGlzcGxheXMgVVJMcyByZWxhdGVkIHRvIHRoZSBwb3J0YWwuCiAqIFRoaXMgaW5jbHVkZXMgYSBwZXJtYWxpbmsgZm9yIHRoZSBwb3J0YWwsIGEgbGluayBmb3IgSW5ncmVzcyBQcmltZSwgYW5kIGxpbmtzIHRvIGFsdGVybmF0aXZlIG1hcHMuCiAqIEZ1bmN0aW9uIGlzIG92ZXJ3cml0dGVuIGluIGBhcHAuanNgCiAqCiAqIEBmdW5jdGlvbiByZW5kZXJQb3J0YWxVcmwKICogQHBhcmFtIHtudW1iZXJ9IGxhdCAtIFRoZSBsYXRpdHVkZSBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge251bWJlcn0gbG5nIC0gVGhlIGxvbmdpdHVkZSBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgLSBUaGUgdGl0bGUgb2YgdGhlIHBvcnRhbC4KICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsLgogKi8Kd2luZG93LnJlbmRlclBvcnRhbFVybCA9IGZ1bmN0aW9uIChsYXQsIGxuZywgdGl0bGUsIGd1aWQpIHsKICB2YXIgbGlua0RldGFpbHMgPSAkKCcubGlua2RldGFpbHMnKTsKCiAgLy8gYSBwZXJtYWxpbmsgZm9yIHRoZSBwb3J0YWwKICB2YXIgcGVybWFIdG1sID0gJCgnPGE+JykKICAgIC5hdHRyKHsKICAgICAgaHJlZjogd2luZG93Lm1ha2VQZXJtYWxpbmsoW2xhdCwgbG5nXSksCiAgICAgIHRpdGxlOiAnQ3JlYXRlIGEgVVJMIGxpbmsgdG8gdGhpcyBwb3J0YWwnLAogICAgfSkKICAgIC50ZXh0KCdQb3J0YWwgbGluaycpOwogIGxpbmtEZXRhaWxzLmFwcGVuZCgkKCc8YXNpZGU+JykuYXBwZW5kKHBlcm1hSHRtbCkpOwoKICB2YXIgc2Nhbm5lckxpbmsgPSAkKCc8YT4nKQogICAgLmF0dHIoewogICAgICBocmVmOiB3aW5kb3cubWFrZVByaW1lTGluayhndWlkLCBsYXQsIGxuZyksCiAgICAgIHRpdGxlOiAnQ29weSBsaW5rIHRvIHRoaXMgcG9ydGFsIGZvciBJbmdyZXNzIFByaW1lJywKICAgIH0pCiAgICAuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGV2ZW50LnRhcmdldC5ocmVmKS50aGVuKCk7CiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9KQogICAgLnRleHQoJ0NvcHkgc2Nhbm5lciBsaW5rJyk7CiAgbGlua0RldGFpbHMuYXBwZW5kKCQoJzxhc2lkZT4nKS5hcHBlbmQoc2Nhbm5lckxpbmspKTsKCiAgLy8gYW5kIGEgbWFwIGxpbmsgcG9wdXAgZGlhbG9nCiAgdmFyIG1hcEh0bWwgPSAkKCc8YT4nKQogICAgLmF0dHIoewogICAgICB0aXRsZTogJ0xpbmsgdG8gYWx0ZXJuYXRpdmUgbWFwcyAoR29vZ2xlLCBldGMpJywKICAgIH0pCiAgICAudGV4dCgnTWFwIGxpbmtzJykKICAgIC5jbGljayh3aW5kb3cuc2hvd1BvcnRhbFBvc0xpbmtzLmJpbmQodGhpcywgbGF0LCBsbmcsIHRpdGxlKSk7CiAgbGlua0RldGFpbHMuYXBwZW5kKCQoJzxhc2lkZT4nKS5hcHBlbmQobWFwSHRtbCkpOwp9OwoKLyoqCiAqIFNlbGVjdHMgYSBwb3J0YWwsIHJlZnJlc2ggaXRzIGRhdGEgYW5kIHJlbmRlcnMgdGhlIGRldGFpbHMgb2YgdGhlIHBvcnRhbCBpbiB0aGUgc2lkZWJhci4KICoKICogQGZ1bmN0aW9uIHJlbmRlclBvcnRhbERldGFpbHMKICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gZ3VpZCAtIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcG9ydGFsIHRvIGRpc3BsYXkgZGV0YWlscyBmb3IuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZvcmNlU2VsZWN0PWZhbHNlXSAtIElmIHRydWUsIGZvcmNlcyB0aGUgcG9ydGFsIHRvIGJlIHNlbGVjdGVkIGV2ZW4gaWYgaXQncyBhbHJlYWR5IHRoZSBjdXJyZW50IHBvcnRhbC4KICovCndpbmRvdy5yZW5kZXJQb3J0YWxEZXRhaWxzID0gZnVuY3Rpb24gKGd1aWQsIGZvcmNlU2VsZWN0KSB7CiAgaWYgKGZvcmNlU2VsZWN0IHx8IHdpbmRvdy5zZWxlY3RlZFBvcnRhbCAhPT0gZ3VpZCkgewogICAgd2luZG93LnNlbGVjdFBvcnRhbChndWlkICYmIHdpbmRvdy5wb3J0YWxzW2d1aWRdID8gZ3VpZCA6IG51bGwsICdyZW5kZXJQb3J0YWxEZXRhaWxzJyk7CiAgfQoKICBpZiAoJCgnI3NpZGViYXInKS5pcygnOnZpc2libGUnKSkgewogICAgd2luZG93LnJlc2V0U2Nyb2xsT25OZXdQb3J0YWwoKTsKICAgIHdpbmRvdy5yZW5kZXJQb3J0YWxEZXRhaWxzLmxhc3RWaXNpYmxlID0gZ3VpZDsKICB9CgogIGlmIChndWlkICYmICF3aW5kb3cucG9ydGFsRGV0YWlsLmlzRnJlc2goZ3VpZCkpIHsKICAgIHdpbmRvdy5wb3J0YWxEZXRhaWwucmVxdWVzdChndWlkKTsKICB9CgogIGlmICghZ3VpZCB8fCAhd2luZG93LnBvcnRhbHNbZ3VpZF0pIHsKICAgIHdpbmRvdy51cmxQb3J0YWwgPSBndWlkOwogICAgJCgnI3BvcnRhbGRldGFpbHMnKS5odG1sKCcnKTsKICAgIGlmICh3aW5kb3cuaXNTbWFydHBob25lKCkpIHsKICAgICAgJCgnLmZ1bGxpbWcnKS5yZW1vdmUoKTsKICAgICAgJCgnI21vYmlsZWluZm8nKS5odG1sKCc8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXIiPjxiPnRhcCBoZXJlIGZvciBpbmZvIHNjcmVlbjwvYj48L2Rpdj4nKTsKICAgIH0KICAgIHJldHVybjsKICB9CgogIHdpbmRvdy5yZW5kZXJQb3J0YWxUb1NpZGVCYXIod2luZG93LnBvcnRhbHNbZ3VpZF0pOwp9OwoKLyoqCiAqIFJlbmRlcnMgdGhlIGRldGFpbHMgb2YgYSBwb3J0YWwgaW4gdGhlIHNpZGViYXIuCiAqCiAqIEBmdW5jdGlvbiByZW5kZXJQb3J0YWxUb1NpZGVCYXIKICogQHBhcmFtIHtMLlBvcnRhbE1hcmtlcn0gcG9ydGFsIC0gVGhlIHBvcnRhbCBtYXJrZXIgb2JqZWN0IGhvbGRpbmcgcG9ydGFsIGRldGFpbHMuCiAqLwp3aW5kb3cucmVuZGVyUG9ydGFsVG9TaWRlQmFyID0gZnVuY3Rpb24gKHBvcnRhbCkgewogIHZhciBndWlkID0gcG9ydGFsLm9wdGlvbnMuZ3VpZDsKICB2YXIgZGV0YWlscyA9IHBvcnRhbC5nZXREZXRhaWxzKCk7CiAgdmFyIGhhc0Z1bGxEZXRhaWxzID0gcG9ydGFsLmhhc0Z1bGxEZXRhaWxzKCk7CiAgdmFyIGhpc3RvcnlEZXRhaWxzID0gd2luZG93LmdldFBvcnRhbEhpc3RvcnlEZXRhaWxzKGRldGFpbHMpOwoKICB2YXIgbW9kRGV0YWlscyA9IGhhc0Z1bGxEZXRhaWxzID8gJzxkaXYgY2xhc3M9Im1vZHMiPicgKyB3aW5kb3cuZ2V0TW9kRGV0YWlscyhkZXRhaWxzKSArICc8L2Rpdj4nIDogJyc7CiAgdmFyIG1pc2NEZXRhaWxzID0gaGFzRnVsbERldGFpbHMgPyB3aW5kb3cuZ2V0UG9ydGFsTWlzY0RldGFpbHMoZ3VpZCwgZGV0YWlscykgOiAnJzsKICB2YXIgcmVzb0RldGFpbHMgPSBoYXNGdWxsRGV0YWlscyA/IHdpbmRvdy5nZXRSZXNvbmF0b3JEZXRhaWxzKGRldGFpbHMpIDogJyc7CgogIC8vIFRPRE8/IG90aGVyIHN0YXR1cyBkZXRhaWxzLi4uCiAgdmFyIHN0YXR1c0RldGFpbHMgPSBoYXNGdWxsRGV0YWlscyA/ICcnIDogJzxkaXYgaWQ9InBvcnRhbFN0YXR1cyI+TG9hZGluZyBkZXRhaWxzLi4uPC9kaXY+JzsKCiAgdmFyIGltZyA9IHdpbmRvdy5maXhQb3J0YWxJbWFnZVVybChkZXRhaWxzLmltYWdlKTsKICB2YXIgdGl0bGUgPSBkZXRhaWxzLnRpdGxlIHx8ICdudWxsJzsKCiAgdmFyIGxhdCA9IGRldGFpbHMubGF0RTYgLyAxZTY7CiAgdmFyIGxuZyA9IGRldGFpbHMubG5nRTYgLyAxZTY7CgogIHZhciBpbWdUaXRsZSA9IHRpdGxlICsgJ1xuXG5DbGljayB0byBzaG93IGZ1bGwgaW1hZ2UuJzsKCiAgLy8gcG9ydGFsIGxldmVsLiBzdGFydCB3aXRoIGJhc2ljIGRhdGEgLSB0aGVuIGV4dGVuZCB3aXRoIGZyYWN0aW9uYWwgaW5mbyBpbiB0b29sdGlwIGlmIGF2YWlsYWJsZQogIHZhciBsZXZlbEludCA9IHBvcnRhbC5vcHRpb25zLmxldmVsOwogIHZhciBsZXZlbERldGFpbHMgPSBsZXZlbEludDsKICBpZiAoaGFzRnVsbERldGFpbHMpIHsKICAgIGxldmVsRGV0YWlscyA9IHdpbmRvdy5nZXRQb3J0YWxMZXZlbChkZXRhaWxzKTsKICAgIGlmIChsZXZlbERldGFpbHMgIT09IDgpIHsKICAgICAgaWYgKGxldmVsRGV0YWlscyA9PT0gTWF0aC5jZWlsKGxldmVsRGV0YWlscykpIGxldmVsRGV0YWlscyArPSAnXG44JzsKICAgICAgZWxzZSBsZXZlbERldGFpbHMgKz0gJ1xuJyArIChNYXRoLmNlaWwobGV2ZWxEZXRhaWxzKSAtIGxldmVsRGV0YWlscykgKiA4OwogICAgICBsZXZlbERldGFpbHMgKz0gJyByZXNvbmF0b3IgbGV2ZWwocykgbmVlZGVkIGZvciBuZXh0IHBvcnRhbCBsZXZlbCc7CiAgICB9IGVsc2UgewogICAgICBsZXZlbERldGFpbHMgKz0gJ1xuZnVsbHkgdXBncmFkZWQnOwogICAgfQogIH0KICBsZXZlbERldGFpbHMgPSAnTGV2ZWwgJyArIGxldmVsRGV0YWlsczsKCiAgJCgnI3BvcnRhbGRldGFpbHMnKQogICAgLmh0bWwoJycpIC8vIHRvIGVuc3VyZSBpdCdzIGNsZWFyCiAgICAuYXR0cignY2xhc3MnLCB3aW5kb3cuVEVBTV9UT19DU1Nbd2luZG93LnRlYW1TdHJpbmdUb0lkKGRldGFpbHMudGVhbSldKQogICAgLmFwcGVuZCgKICAgICAgJCgnPGgzPicsIHsgY2xhc3M6ICd0aXRsZScgfSkKICAgICAgICAudGV4dCh0aXRsZSkKICAgICAgICAucHJlcGVuZCgKICAgICAgICAgICQoJzxzdmc+PHVzZSB4bGluazpocmVmPSIjaWNfcGxhY2VfMjRweCIvPjx0aXRsZT5DbGljayB0byBtb3ZlIHRvIHBvcnRhbDwvdGl0bGU+PC9zdmc+JykKICAgICAgICAgICAgLmF0dHIoewogICAgICAgICAgICAgIGNsYXNzOiAnbWF0ZXJpYWwtaWNvbnMgaWNvbi1idXR0b24nLAogICAgICAgICAgICAgIHN0eWxlOiAnZmxvYXQ6IGxlZnQnLAogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHdpbmRvdy56b29tVG9BbmRTaG93UG9ydGFsKGd1aWQsIFtkZXRhaWxzLmxhdEU2IC8gMWU2LCBkZXRhaWxzLmxuZ0U2IC8gMWU2XSk7CiAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pc1NtYXJ0cGhvbmUoKSkgewogICAgICAgICAgICAgICAgd2luZG93LnNob3coJ21hcCcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICApLAoKICAgICAgJCgnPHNwYW4+JykKICAgICAgICAuYXR0cih7CiAgICAgICAgICBjbGFzczogJ2Nsb3NlJywKICAgICAgICAgIHRpdGxlOiAnQ2xvc2UgW3ddJywKICAgICAgICAgIGFjY2Vzc2tleTogJ3cnLAogICAgICAgIH0pCiAgICAgICAgLnRleHQoJ1gnKQogICAgICAgIC5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICB3aW5kb3cucmVuZGVyUG9ydGFsRGV0YWlscyhudWxsKTsKICAgICAgICB9KSwKCiAgICAgIC8vIGhlbHAgY3Vyc29yIHZpYSAiLmltZ3ByZXZpZXcgaW1nIgogICAgICAkKCc8ZGl2PicpCiAgICAgICAgLmF0dHIoewogICAgICAgICAgY2xhc3M6ICdpbWdwcmV2aWV3JywKICAgICAgICAgIHRpdGxlOiBpbWdUaXRsZSwKICAgICAgICAgIHN0eWxlOiAnYmFja2dyb3VuZC1pbWFnZTogdXJsKCInICsgaW1nICsgJyIpJywKICAgICAgICB9KQogICAgICAgIC5hcHBlbmQoJCgnPHNwYW4+JywgeyBpZDogJ2xldmVsJywgdGl0bGU6IGxldmVsRGV0YWlscyB9KS50ZXh0KGxldmVsSW50KSwgJCgnPGltZz4nLCB7IGNsYXNzOiAnaGlkZScsIHNyYzogaW1nIH0pKSwKCiAgICAgIG1vZERldGFpbHMsCiAgICAgIG1pc2NEZXRhaWxzLAogICAgICByZXNvRGV0YWlscywKICAgICAgc3RhdHVzRGV0YWlscywKICAgICAgJCgnPGRpdj4nLCB7IGNsYXNzOiAnbGlua2RldGFpbHMnIH0pLAogICAgICBoaXN0b3J5RGV0YWlscwogICAgKTsKCiAgd2luZG93LnJlbmRlclBvcnRhbFVybChsYXQsIGxuZywgdGl0bGUsIGd1aWQpOwoKICAvLyBjb21wYXRpYmlsaXR5CiAgdmFyIGRhdGEgPSBoYXNGdWxsRGV0YWlscyA/IHdpbmRvdy5nZXRQb3J0YWxTdW1tYXJ5RGF0YShkZXRhaWxzKSA6IGRldGFpbHM7CgogIC8vIG9ubHkgcnVuIHRoZSBob29rcyB3aGVuIHdlIGhhdmUgYSBwb3J0YWxEZXRhaWxzIG9iamVjdCAtIG1vc3QgcGx1Z2lucyByZWx5IG9uIHRoZSBleHRlbmRlZCBkYXRhCiAgLy8gVE9ETz8gYW5vdGhlciBob29rIHRvIGNhbGwgYWx3YXlzLCBmb3IgYW55IHBsdWdpbnMgdGhhdCBjYW4gd29yayB3aXRoIGxlc3MgZGF0YT8KICBpZiAoaGFzRnVsbERldGFpbHMpIHsKICAgIHdpbmRvdy5ydW5Ib29rcygncG9ydGFsRGV0YWlsc1VwZGF0ZWQnLCB7IGd1aWQ6IGd1aWQsIHBvcnRhbDogcG9ydGFsLCBwb3J0YWxEZXRhaWxzOiBkZXRhaWxzLCBwb3J0YWxEYXRhOiBkYXRhIH0pOwogIH0KfTsKCi8qKgogKiBHZXRzIG1pc2NlbGxhbmVvdXMgZGV0YWlscyBmb3IgYSBzcGVjaWZpZWQgcG9ydGFsLgogKgogKiBAZnVuY3Rpb24gZ2V0UG9ydGFsTWlzY0RldGFpbHMKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIHZhcmlvdXMgcHJvcGVydGllcyBvZiB0aGUgcG9ydGFsLgogKiBAcmV0dXJucyB7c3RyaW5nfSBIVE1MIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1pc2NlbGxhbmVvdXMgZGV0YWlscyBvZiB0aGUgcG9ydGFsLgogKi8Kd2luZG93LmdldFBvcnRhbE1pc2NEZXRhaWxzID0gZnVuY3Rpb24gKGd1aWQsIGQpIHsKICB2YXIgcmFuZERldGFpbHM7CgogIGlmIChkKSB7CiAgICAvLyBjb2xsZWN0IHNvbWUgcmFuZG9tIGRhdGEgdGhhdOKAmXMgbm90IHdvcnRoIHRvIHB1dCBpbiBhbiBvd24gbWV0aG9kCiAgICB2YXIgbGlua0luZm8gPSB3aW5kb3cuZ2V0UG9ydGFsTGlua3MoZ3VpZCk7CiAgICB2YXIgbWF4T3V0Z29pbmcgPSB3aW5kb3cuZ2V0TWF4T3V0Z29pbmdMaW5rcyhkKTsKICAgIHZhciBsaW5rQ291bnQgPSBsaW5rSW5mby5pbi5sZW5ndGggKyBsaW5rSW5mby5vdXQubGVuZ3RoOwogICAgdmFyIGxpbmtzID0geyBpbmNvbWluZzogbGlua0luZm8uaW4ubGVuZ3RoLCBvdXRnb2luZzogbGlua0luZm8ub3V0Lmxlbmd0aCB9OwoKICAgIHZhciB0aXRsZSA9CiAgICAgIGBhdCBtb3N0ICR7bWF4T3V0Z29pbmd9IG91dGdvaW5nIGxpbmtzXG5gICsKICAgICAgYCR7bGlua3Mub3V0Z29pbmd9IGxpbmtzIG91dFxuYCArCiAgICAgIGAke2xpbmtzLmluY29taW5nfSBsaW5rcyBpblxuYCArCiAgICAgIGAoJHtsaW5rcy5vdXRnb2luZyArIGxpbmtzLmluY29taW5nfSB0b3RhbClgOwogICAgdmFyIGxpbmtzVGV4dCA9IFsnbGlua3MnLCBsaW5rcy5vdXRnb2luZyArICcgb3V0IC8gJyArIGxpbmtzLmluY29taW5nICsgJyBpbicsIHRpdGxlXTsKCiAgICB2YXIgcGxheWVyID0gZC5vd25lciA/ICc8c3BhbiBjbGFzcz0ibmlja25hbWUiPicgKyBkLm93bmVyICsgJzwvc3Bhbj4nIDogJy0nOwogICAgdmFyIHBsYXllclRleHQgPSBbJ293bmVyJywgcGxheWVyXTsKCiAgICB2YXIgZmllbGRDb3VudCA9IHdpbmRvdy5nZXRQb3J0YWxGaWVsZHNDb3VudChndWlkKTsKCiAgICB2YXIgZmllbGRzVGV4dCA9IFsnZmllbGRzJywgZmllbGRDb3VudF07CgogICAgdmFyIGFwR2FpblRleHQgPSB3aW5kb3cuZ2V0QXR0YWNrQXBHYWluVGV4dChkLCBmaWVsZENvdW50LCBsaW5rQ291bnQpOwoKICAgIHZhciBhdHRhY2tWYWx1ZXMgPSB3aW5kb3cuZ2V0UG9ydGFsQXR0YWNrVmFsdWVzKGQpOwoKICAgIC8vIGNvbGxlY3QgYW5kIGh0bWwtaWZ5IHJhbmRvbSBkYXRhCgogICAgdmFyIHJhbmREZXRhaWxzRGF0YSA9IFsKICAgICAgLy8gdGhlc2UgcGllY2VzIG9mIGRhdGEgYXJlIG9ubHkgcmVsZXZhbnQgd2hlbiB0aGUgcG9ydGFsIGlzIGNhcHR1cmVkCiAgICAgIC8vIG1heWJlIGNoZWNrIGlmIHBvcnRhbCBpcyBjYXB0dXJlZCBhbmQgcmVtb3ZlPwogICAgICAvLyBCdXQgdGhpcyBtYWtlcyB0aGUgaW5mbyBwYW5lbCBsb29rIHJhdGhlciBlbXB0eSBmb3IgdW5jbGFpbWVkIHBvcnRhbHMKICAgICAgcGxheWVyVGV4dCwKICAgICAgd2luZG93LmdldFJhbmdlVGV4dChkKSwKICAgICAgbGlua3NUZXh0LAogICAgICBmaWVsZHNUZXh0LAogICAgICB3aW5kb3cuZ2V0TWl0aWdhdGlvblRleHQoZCwgbGlua0NvdW50KSwKICAgICAgd2luZG93LmdldEVuZXJneVRleHQoZCksCiAgICAgIC8vIGFuZCB0aGVzZSBoYXZlIHNvbWUgdXNlLCBldmVuIGZvciB1bmNhcHR1cmVkIHBvcnRhbHMKICAgICAgYXBHYWluVGV4dCwKICAgICAgd2luZG93LmdldEhhY2tEZXRhaWxzVGV4dChkKSwKICAgIF07CgogICAgaWYgKGF0dGFja1ZhbHVlcy5hdHRhY2tfZnJlcXVlbmN5ICE9PSAwKSB7CiAgICAgIHJhbmREZXRhaWxzRGF0YS5wdXNoKFsnPHNwYW4gdGl0bGU9ImF0dGFjayBmcmVxdWVuY3kiIGNsYXNzPSJ0ZXh0LW92ZXJmbG93LWVsbGlwc2lzIj5hdHRhY2sgZnJlcXVlbmN5PC9zcGFuPicsICfDlycgKyBhdHRhY2tWYWx1ZXMuYXR0YWNrX2ZyZXF1ZW5jeV0pOwogICAgfQogICAgaWYgKGF0dGFja1ZhbHVlcy5oaXRfYm9udXMgIT09IDApIHsKICAgICAgcmFuZERldGFpbHNEYXRhLnB1c2goWydoaXQgYm9udXMnLCBhdHRhY2tWYWx1ZXMuaGl0X2JvbnVzICsgJyUnXSk7CiAgICB9CiAgICBpZiAoYXR0YWNrVmFsdWVzLmZvcmNlX2FtcGxpZmllciAhPT0gMCkgewogICAgICByYW5kRGV0YWlsc0RhdGEucHVzaChbJzxzcGFuIHRpdGxlPSJmb3JjZSBhbXBsaWZpZXIiIGNsYXNzPSJ0ZXh0LW92ZXJmbG93LWVsbGlwc2lzIj5mb3JjZSBhbXBsaWZpZXI8L3NwYW4+JywgJ8OXJyArIGF0dGFja1ZhbHVlcy5mb3JjZV9hbXBsaWZpZXJdKTsKICAgIH0KCiAgICByYW5kRGV0YWlscyA9ICc8dGFibGUgaWQ9InJhbmRkZXRhaWxzIj4nICsgd2luZG93LmdlbkZvdXJDb2x1bW5UYWJsZShyYW5kRGV0YWlsc0RhdGEpICsgJzwvdGFibGU+JzsKCiAgICAvLyBhcnRpZmFjdHMgLSB0YWNrZWQgb24gYWZ0ZXIgKGJ1dCBub3QgYXMgcGFydCBvZikgdGhlICdyYW5kZGV0YWlscycgdGFibGUKICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgdGhlIGV4aXN0aW5nIGNvbHVtbnMuLi4uCgogICAgaWYgKGQuYXJ0aWZhY3RCcmllZiAmJiBkLmFydGlmYWN0QnJpZWYudGFyZ2V0ICYmIE9iamVjdC5rZXlzKGQuYXJ0aWZhY3RCcmllZi50YXJnZXQpLmxlbmd0aCA+IDApIHsKICAgICAgdmFyIHRhcmdldHMgPSBPYmplY3Qua2V5cyhkLmFydGlmYWN0QnJpZWYudGFyZ2V0KTsKICAgICAgLy8gY3VycmVudGx5ICgyMDE1LTA3LTEwKSB3ZSBubyBsb25nZXIga25vdyB0aGUgdGVhbSBlYWNoIHRhcmdldCBwb3J0YWwgaXMgZm9yIC0gc28gd2UnbGwganVzdCBzaG93IHRoZSBhcnRpZmFjdCB0eXBlKHMpCiAgICAgIHJhbmREZXRhaWxzICs9CiAgICAgICAgJzxkaXYgaWQ9ImFydGlmYWN0X3RhcmdldCI+VGFyZ2V0IHBvcnRhbDogJyArCiAgICAgICAgdGFyZ2V0cwogICAgICAgICAgLm1hcChmdW5jdGlvbiAoeCkgewogICAgICAgICAgICByZXR1cm4geC5jYXBpdGFsaXplKCk7CiAgICAgICAgICB9KQogICAgICAgICAgLmpvaW4oJywgJykgKwogICAgICAgICc8L2Rpdj4nOwogICAgfQoKICAgIC8vIHNoYXJkcyAtIHRha2VuIGRpcmVjdGx5IGZyb20gdGhlIHBvcnRhbCBkZXRhaWxzCiAgICBpZiAoZC5hcnRpZmFjdERldGFpbCkgewogICAgICByYW5kRGV0YWlscyArPSAnPGRpdiBpZD0iYXJ0aWZhY3RfZnJhZ21lbnRzIj5TaGFyZHM6ICcgKyBkLmFydGlmYWN0RGV0YWlsLmRpc3BsYXlOYW1lICsgJyAjJyArIGQuYXJ0aWZhY3REZXRhaWwuZnJhZ21lbnRzLmpvaW4oJywgJykgKyAnPC9kaXY+JzsKICAgIH0KICB9CgogIHJldHVybiByYW5kRGV0YWlsczsKfTsKCi8qKgogKiBUaGUgZnVuY3Rpb24gYWRkcyBjaXJjbGVzIGluZGljYXRpbmcgdGhlIGhhY2sgcmFuZ2UgYW5kIGxpbmsgcmFuZ2Ugb2YgdGhlIHBvcnRhbC4KICogSWYgdGhlIHBvcnRhbCBvYmplY3QgYXJlIG51bGwsIHRoZSBpbmRpY2F0b3JzIGFyZSByZW1vdmVkLgogKgogKiBAZnVuY3Rpb24gc2V0UG9ydGFsSW5kaWNhdG9ycwogKiBAcGFyYW0ge09iamVjdH0gcCAtIFRoZSBwb3J0YWwgb2JqZWN0IGZvciB3aGljaCB0byBzZXQgdGhlIGluZGljYXRvcnMuCiAqLwp3aW5kb3cuc2V0UG9ydGFsSW5kaWNhdG9ycyA9IGZ1bmN0aW9uIChwKSB7CiAgaWYgKHdpbmRvdy5wb3J0YWxSYW5nZUluZGljYXRvcikgd2luZG93Lm1hcC5yZW1vdmVMYXllcih3aW5kb3cucG9ydGFsUmFuZ2VJbmRpY2F0b3IpOwogIHdpbmRvdy5wb3J0YWxSYW5nZUluZGljYXRvciA9IG51bGw7CiAgaWYgKHdpbmRvdy5wb3J0YWxBY2Nlc3NJbmRpY2F0b3IpIHdpbmRvdy5tYXAucmVtb3ZlTGF5ZXIod2luZG93LnBvcnRhbEFjY2Vzc0luZGljYXRvcik7CiAgd2luZG93LnBvcnRhbEFjY2Vzc0luZGljYXRvciA9IG51bGw7CgogIC8vIGlmIHdlIGhhdmUgYSBwb3J0YWwuLi4KCiAgaWYgKHApIHsKICAgIHZhciBjb29yZCA9IHAuZ2V0TGF0TG5nKCk7CgogICAgLy8gcmFuZ2UgaXMgb25seSBrbm93biBmb3Igc3VyZSBpZiB3ZSBoYXZlIHBvcnRhbCBkZXRhaWxzCiAgICAvLyBUT0RPPyByZW5kZXIgYSBtaW4gcmFuZ2UgZ3Vlc3MgdW50aWwgZGV0YWlscyBhcmUgbG9hZGVkLi4/CgogICAgdmFyIGQgPSB3aW5kb3cucG9ydGFsRGV0YWlsLmdldChwLm9wdGlvbnMuZ3VpZCk7CiAgICBpZiAoZCkgewogICAgICB2YXIgcmFuZ2UgPSB3aW5kb3cuZ2V0UG9ydGFsUmFuZ2UoZCk7CiAgICAgIHdpbmRvdy5wb3J0YWxSYW5nZUluZGljYXRvciA9ICgKICAgICAgICByYW5nZS5yYW5nZSA+IDAKICAgICAgICAgID8gTC5nZW9kZXNpY0NpcmNsZShjb29yZCwgcmFuZ2UucmFuZ2UsIHsKICAgICAgICAgICAgICBmaWxsOiBmYWxzZSwKICAgICAgICAgICAgICBjb2xvcjogd2luZG93LlJBTkdFX0lORElDQVRPUl9DT0xPUiwKICAgICAgICAgICAgICB3ZWlnaHQ6IDMsCiAgICAgICAgICAgICAgZGFzaEFycmF5OiByYW5nZS5pc0xpbmthYmxlID8gdW5kZWZpbmVkIDogJzEwLDEwJywKICAgICAgICAgICAgICBpbnRlcmFjdGl2ZTogZmFsc2UsCiAgICAgICAgICAgIH0pCiAgICAgICAgICA6IEwuY2lyY2xlKGNvb3JkLCByYW5nZS5yYW5nZSwgeyBmaWxsOiBmYWxzZSwgc3Ryb2tlOiBmYWxzZSwgaW50ZXJhY3RpdmU6IGZhbHNlIH0pCiAgICAgICkuYWRkVG8od2luZG93Lm1hcCk7CiAgICB9CgogICAgd2luZG93LnBvcnRhbEFjY2Vzc0luZGljYXRvciA9IEwuY2lyY2xlKGNvb3JkLCB3aW5kb3cuSEFDS19SQU5HRSwgewogICAgICBmaWxsOiBmYWxzZSwKICAgICAgY29sb3I6IHdpbmRvdy5BQ0NFU1NfSU5ESUNBVE9SX0NPTE9SLAogICAgICB3ZWlnaHQ6IDIsCiAgICAgIGludGVyYWN0aXZlOiBmYWxzZSwKICAgIH0pLmFkZFRvKHdpbmRvdy5tYXApOwogIH0KfTsKCi8qKgogKiBIaWdobGlnaHRzIHRoZSBzZWxlY3RlZCBwb3J0YWwgb24gdGhlIG1hcCBhbmQgY2xlYXJzIHRoZSBoaWdobGlnaHQgZnJvbSB0aGUgcHJldmlvdXNseSBzZWxlY3RlZCBwb3J0YWwuCiAqCiAqIEBmdW5jdGlvbiBzZWxlY3RQb3J0YWwKICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBUaGUgR1VJRCBvZiB0aGUgcG9ydGFsIHRvIHNlbGVjdC4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNhbWUgcG9ydGFsIGlzIHJlLXNlbGVjdGVkIChqdXN0IGFuIHVwZGF0ZSksIGZhbHNlIGlmIGEgZGlmZmVyZW50IHBvcnRhbCBpcyBzZWxlY3RlZC4KICovCndpbmRvdy5zZWxlY3RQb3J0YWwgPSBmdW5jdGlvbiAoZ3VpZCwgZXZlbnQpIHsKICB2YXIgdXBkYXRlID0gd2luZG93LnNlbGVjdGVkUG9ydGFsID09PSBndWlkOwogIHZhciBvbGRQb3J0YWxHdWlkID0gd2luZG93LnNlbGVjdGVkUG9ydGFsOwogIHdpbmRvdy5zZWxlY3RlZFBvcnRhbCA9IGd1aWQ7CgogIHZhciBvbGRQb3J0YWwgPSB3aW5kb3cucG9ydGFsc1tvbGRQb3J0YWxHdWlkXTsKICB2YXIgbmV3UG9ydGFsID0gd2luZG93LnBvcnRhbHNbZ3VpZF07CgogIC8vIFJlc3RvcmUgc3R5bGUgb2YgdW5zZWxlY3RlZCBwb3J0YWwKICBpZiAoIXVwZGF0ZSAmJiBvbGRQb3J0YWwpIG9sZFBvcnRhbC5zZXRTZWxlY3RlZChmYWxzZSk7CgogIC8vIENoYW5nZSBzdHlsZSBvZiBzZWxlY3RlZCBwb3J0YWwKICBpZiAobmV3UG9ydGFsKSBuZXdQb3J0YWwuc2V0U2VsZWN0ZWQodHJ1ZSk7CgogIHdpbmRvdy5zZXRQb3J0YWxJbmRpY2F0b3JzKG5ld1BvcnRhbCk7CgogIHdpbmRvdy5ydW5Ib29rcygncG9ydGFsU2VsZWN0ZWQnLCB7CiAgICBzZWxlY3RlZFBvcnRhbEd1aWQ6IGd1aWQsCiAgICB1bnNlbGVjdGVkUG9ydGFsR3VpZDogb2xkUG9ydGFsR3VpZCwKICAgIGV2ZW50OiBldmVudCwKICB9KTsKICByZXR1cm4gdXBkYXRlOwp9OwoKLyoqCiAqIENoYW5nZXMgdGhlIGNvb3JkaW5hdGVzIGFuZCBtYXAgc2NhbGUgdG8gc2hvdyB0aGUgcmFuZ2UgZm9yIHBvcnRhbCBsaW5rcy4KICoKICogQGZ1bmN0aW9uIHJhbmdlTGlua0NsaWNrCiAqLwp3aW5kb3cucmFuZ2VMaW5rQ2xpY2sgPSBmdW5jdGlvbiAoKSB7CiAgaWYgKHdpbmRvdy5wb3J0YWxSYW5nZUluZGljYXRvcikgd2luZG93Lm1hcC5maXRCb3VuZHMod2luZG93LnBvcnRhbFJhbmdlSW5kaWNhdG9yLmdldEJvdW5kcygpKTsKICBpZiAod2luZG93LmlzU21hcnRwaG9uZSgpKSB3aW5kb3cuc2hvdygnbWFwJyk7Cn07CgovKioKICogQ3JlYXRlcyBhIGxpbmsgdG8gb3BlbiBhIHNwZWNpZmljIHBvcnRhbCBpbiBJbmdyZXNzIFByaW1lLgogKgogKiBAZnVuY3Rpb24gbWFrZVByaW1lTGluawogKiBAcGFyYW0ge3N0cmluZ30gZ3VpZCAtIFRoZSBnbG9iYWxseSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge251bWJlcn0gbGF0IC0gVGhlIGxhdGl0dWRlIG9mIHRoZSBwb3J0YWwuCiAqIEBwYXJhbSB7bnVtYmVyfSBsbmcgLSBUaGUgbG9uZ2l0dWRlIG9mIHRoZSBwb3J0YWwuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBJbmdyZXNzIFByaW1lIGxpbmsgZm9yIHRoZSBwb3J0YWwKICovCndpbmRvdy5tYWtlUHJpbWVMaW5rID0gZnVuY3Rpb24gKGd1aWQsIGxhdCwgbG5nKSB7CiAgcmV0dXJuIGBodHRwczovL2xpbmsuaW5ncmVzcy5jb20vP2xpbms9aHR0cHMlM0ElMkYlMkZpbnRlbC5pbmdyZXNzLmNvbSUyRnBvcnRhbCUyRiR7Z3VpZH0mYXBuPWNvbS5uaWFudGljcHJvamVjdC5pbmdyZXNzJmlzaT01NzY1MDUxODEmaWJpPWNvbS5nb29nbGUuaW5ncmVzcyZpZmw9aHR0cHMlM0ElMkYlMkZhcHBzLmFwcGxlLmNvbSUyRmFwcCUyRmluZ3Jlc3MlMkZpZDU3NjUwNTE4MSZvZmw9aHR0cHMlM0ElMkYlMkZpbnRlbC5pbmdyZXNzLmNvbSUyRmludGVsJTNGcGxsJTNEJHtsYXR9JTJDJHtsbmd9YDsKfTsKCi8qKgogKiBHZW5lcmF0ZXMgYSBwZXJtYWxpbmsgVVJMIGJhc2VkIG9uIHRoZSBzcGVjaWZpZWQgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBhbmQgYWRkaXRpb25hbCBvcHRpb25zLgogKgogKiBAcGFyYW0ge0wuTGF0TG5nfG51bWJlcltdfSBbbGF0bG5nXSAtIFRoZSBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIGZvciB0aGUgcGVybWFsaW5rLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBiZSBvbWl0dGVkIHRvIGNyZWF0ZSBtYXB2aWV3LW9ubHkgcGVybWFsaW5rLgogKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciBwZXJtYWxpbmsgZ2VuZXJhdGlvbi4KICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pbmNsdWRlTWFwVmlld10gLSBJbmNsdWRlIGN1cnJlbnQgbWFwIHZpZXcgaW4gdGhlIHBlcm1hbGluay4KICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5mdWxsVVJMXSAtIEdlbmVyYXRlIGEgZnVsbHkgcXVhbGlmaWVkIFVSTCAoZGVmYXVsdDogcmVsYXRpdmUgbGluaykuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgcGVybWFsaW5rIFVSTC4KICovCndpbmRvdy5tYWtlUGVybWFsaW5rID0gZnVuY3Rpb24gKGxhdGxuZywgb3B0aW9ucykgewogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICBmdW5jdGlvbiByb3VuZChsKSB7CiAgICAvLyBlbnN1cmVzIHRoYXQgbGF0LGxuZyBhcmUgd2l0aCBzYW1lIHByZWNpc2lvbiBhcyBpbiBzdG9jayBpbnRlbCBwZXJtYWxpbmtzCiAgICByZXR1cm4gTWF0aC5mbG9vcihsICogMWU2KSAvIDFlNjsKICB9CiAgdmFyIGFyZ3MgPSBbXTsKICBpZiAoIWxhdGxuZyB8fCBvcHRpb25zLmluY2x1ZGVNYXBWaWV3KSB7CiAgICB2YXIgYyA9IHdpbmRvdy5tYXAuZ2V0Q2VudGVyKCk7CiAgICBhcmdzLnB1c2goJ2xsPScgKyBbcm91bmQoYy5sYXQpLCByb3VuZChjLmxuZyldLmpvaW4oJywnKSwgJ3o9JyArIHdpbmRvdy5tYXAuZ2V0Wm9vbSgpKTsKICB9CiAgaWYgKGxhdGxuZykgewogICAgaWYgKCdsYXQnIGluIGxhdGxuZykgewogICAgICBsYXRsbmcgPSBbbGF0bG5nLmxhdCwgbGF0bG5nLmxuZ107CiAgICB9CiAgICBhcmdzLnB1c2goJ3BsbD0nICsgbGF0bG5nLmpvaW4oJywnKSk7CiAgfQogIHZhciB1cmwgPSAnJzsKICBpZiAob3B0aW9ucy5mdWxsVVJMKSB7CiAgICB1cmwgKz0gbmV3IFVSTChkb2N1bWVudC5iYXNlVVJJKS5vcmlnaW47CiAgfQogIHVybCArPSAnLyc7CiAgcmV0dXJuIHVybCArICc/JyArIGFyZ3Muam9pbignJicpOwp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogcG9ydGFsX2RldGFpbF9kaXNwbGF5X3Rvb2xzLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygncG9ydGFsX2RldGFpbF9kaXNwbGF5X3Rvb2xzJyk7Ci8qIGdsb2JhbCBMIC0tIGVzbGludCAqLwoKLyoqCiAqIEBmaWxlIEhhbmQgYW55IG9mIHRoZXNlIGZ1bmN0aW9ucyB0aGUgZGV0YWlscy1oYXNoIG9mIGEgcG9ydGFsLCBhbmQgdGhleQogKiB3aWxsIHJldHVybiBwcmV0dHksIGRpc3BsYXlhYmxlIEhUTUwgb3IgcGFydHMgdGhlcmVvZi4KICogQG1vZHVsZSBwb3J0YWxfZGV0YWlsX2Rpc3BsYXlfdG9vbHMKICovCgovKioKICogUHJvdmlkZXMgaGlzdG9yaWNhbCBkZXRhaWxzIGFib3V0IGEgcG9ydGFsIGluY2x1ZGluZyB2aXNpdGF0aW9uLCBjYXB0dXJlLCBhbmQgc2NvdXQgY29udHJvbCBzdGF0dXMuCiAqCiAqIEBmdW5jdGlvbiBnZXRQb3J0YWxIaXN0b3J5RGV0YWlscwogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIHRoZSBoaXN0b3J5IHByb3BlcnRpZXMuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgaGlzdG9yaWNhbCBkZXRhaWxzIG9mIHRoZSBwb3J0YWwuCiAqLwp3aW5kb3cuZ2V0UG9ydGFsSGlzdG9yeURldGFpbHMgPSBmdW5jdGlvbiAoZCkgewogIGlmICghZC5oaXN0b3J5KSB7CiAgICByZXR1cm4gJzxkaXYgaWQ9Imhpc3RvcnlkZXRhaWxzIiBjbGFzcz0ibWlzc2luZyI+SGlzdG9yeSBtaXNzaW5nPC9kaXY+JzsKICB9CiAgdmFyIGNsYXNzUGFydHMgPSB7fTsKICBbJ3Zpc2l0ZWQnLCAnY2FwdHVyZWQnLCAnc2NvdXRDb250cm9sbGVkJ10uZm9yRWFjaChmdW5jdGlvbiAoaykgewogICAgY2xhc3NQYXJ0c1trXSA9IGQuaGlzdG9yeVtrXSA/ICdjbGFzcz0iY29tcGxldGVkIicgOiAnJzsKICB9KTsKCiAgcmV0dXJuIEwuVXRpbC50ZW1wbGF0ZSgKICAgICc8ZGl2IGlkPSJoaXN0b3J5ZGV0YWlscyI+SGlzdG9yeTogJyArCiAgICAgICc8c3BhbiBpZD0idmlzaXRlZCIge3Zpc2l0ZWR9PnZpc2l0ZWQ8L3NwYW4+IHwgJyArCiAgICAgICc8c3BhbiBpZD0iY2FwdHVyZWQiIHtjYXB0dXJlZH0+Y2FwdHVyZWQ8L3NwYW4+IHwgJyArCiAgICAgICc8c3BhbiBpZD0ic2NvdXQtY29udHJvbGxlZCIge3Njb3V0Q29udHJvbGxlZH0+c2NvdXQgY29udHJvbGxlZDwvc3Bhbj4nICsKICAgICAgJzwvZGl2PicsCiAgICBjbGFzc1BhcnRzCiAgKTsKfTsKCi8qKgogKiBSZXR1cm5zIGRpc3BsYXlhYmxlIHRleHQgYW5kIGxpbmsgYWJvdXQgcG9ydGFsIHJhbmdlIGluY2x1ZGluZyBiYXNlIHJhbmdlLCBsaW5rIGFtcCBib29zdCwgYW5kIHRvdGFsIHJhbmdlLgogKgogKiBAZnVuY3Rpb24gZ2V0UmFuZ2VUZXh0CiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgcmFuZ2UgaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgcmFuZ2UgbGFiZWwsIEhUTUwgY29udGVudCwgYW5kIGEgdG9vbHRpcCB0aXRsZS4KICovCndpbmRvdy5nZXRSYW5nZVRleHQgPSBmdW5jdGlvbiAoZCkgewogIHZhciByYW5nZSA9IHdpbmRvdy5nZXRQb3J0YWxSYW5nZShkKTsKCiAgdmFyIHRpdGxlID0gYEJhc2UgcmFuZ2U6XHQke3dpbmRvdy5kaWdpdHMoTWF0aC5mbG9vcihyYW5nZS5iYXNlKSl9bVxuTGluayBhbXAgYm9vc3Q6XHTDlyR7cmFuZ2UuYm9vc3R9XG5SYW5nZTpcdCR7d2luZG93LmRpZ2l0cyhNYXRoLmZsb29yKHJhbmdlLnJhbmdlKSl9bWA7CgogIGlmICghcmFuZ2UuaXNMaW5rYWJsZSkgdGl0bGUgKz0gJ1xuUG9ydGFsIGlzIG1pc3NpbmcgcmVzb25hdG9ycyxcbm5vIG5ldyBsaW5rcyBjYW4gYmUgbWFkZSc7CgogIHJldHVybiBbCiAgICAncmFuZ2UnLAogICAgJzxhIG9uY2xpY2s9IndpbmRvdy5yYW5nZUxpbmtDbGljaygpIicgKwogICAgICAocmFuZ2UuaXNMaW5rYWJsZSA/ICcnIDogJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOmxpbmUtdGhyb3VnaDsiJykgKwogICAgICAnPicgKwogICAgICB3aW5kb3cuZm9ybWF0RGlzdGFuY2UocmFuZ2UucmFuZ2UpICsKICAgICAgJzwvYT4nLAogICAgdGl0bGUsCiAgXTsKfTsKCi8qKgogKiBHaXZlbiBwb3J0YWwgZGV0YWlscywgcmV0dXJucyBIVE1MIGNvZGUgdG8gZGlzcGxheSBtb2QgZGV0YWlscy4KICoKICogQGZ1bmN0aW9uIGdldE1vZERldGFpbHMKICogQHBhcmFtIHtPYmplY3R9IGQgLSBUaGUgcG9ydGFsIGRldGFpbCBvYmplY3QgY29udGFpbmluZyBtb2QgaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtzdHJpbmd9IEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbW9kIGRldGFpbHMgb2YgdGhlIHBvcnRhbC4KICovCndpbmRvdy5nZXRNb2REZXRhaWxzID0gZnVuY3Rpb24gKGQpIHsKICB2YXIgbW9kcyA9IFtdOwogIHZhciBtb2RzVGl0bGUgPSBbXTsKICB2YXIgbW9kc0NvbG9yID0gW107CiAgJC5lYWNoKGQubW9kcywgZnVuY3Rpb24gKGluZCwgbW9kKSB7CiAgICB2YXIgbW9kTmFtZSA9ICcnOwogICAgdmFyIG1vZFRvb2x0aXAgPSAnJzsKICAgIHZhciBtb2RDb2xvciA9ICcjMDAwJzsKCiAgICBpZiAobW9kKSB7CiAgICAgIC8vIGFsbCBtb2RzIHNlZW0gdG8gZm9sbG93IHRoZSBzYW1lIHBhdHRlcm4gZm9yIHRoZSBkYXRhIHN0cnVjdHVyZQogICAgICAvLyBidXQgbGV0J3MgdHJ5IGFuZCBtYWtlIHRoaXMgcm9idXN0IGVub3VnaCB0byBoYW5kbGUgcG9zc2libGUgZnV0dXJlIGRpZmZlcmVuY2VzCgogICAgICBtb2ROYW1lID0gbW9kLm5hbWUgfHwgJyh1bmtub3duIG1vZCknOwoKICAgICAgaWYgKG1vZC5yYXJpdHkpIHsKICAgICAgICBtb2ROYW1lID0gbW9kLnJhcml0eS5jYXBpdGFsaXplKCkucmVwbGFjZSgvXy9nLCAnICcpICsgJyAnICsgbW9kTmFtZTsKICAgICAgfQoKICAgICAgbW9kVG9vbHRpcCA9IG1vZE5hbWUgKyAnXG4nOwogICAgICBpZiAobW9kLm93bmVyKSB7CiAgICAgICAgbW9kVG9vbHRpcCArPSAnSW5zdGFsbGVkIGJ5OiAnICsgbW9kLm93bmVyICsgJ1xuJzsKICAgICAgfQoKICAgICAgaWYgKG1vZC5zdGF0cykgewogICAgICAgIG1vZFRvb2x0aXAgKz0gJ1N0YXRzOic7CiAgICAgICAgZm9yICh2YXIga2V5IGluIG1vZC5zdGF0cykgewogICAgICAgICAgaWYgKCFPYmplY3QuaGFzT3duKG1vZC5zdGF0cywga2V5KSkgY29udGludWU7CiAgICAgICAgICB2YXIgdmFsID0gbW9kLnN0YXRzW2tleV07CgogICAgICAgICAgLy8gaWYgKGtleSA9PT0gJ1JFTU9WQUxfU1RJQ0tJTkVTUycgJiYgdmFsID09IDApIGNvbnRpbnVlOyAgLy8gc3RhdCBvbiBhbGwgbW9kcyByZWNlbnRseSAtIHVua25vd24gbWVhbmluZywgbm90IGRpc3BsYXllZCBpbiBzdG9jayBjbGllbnQKCiAgICAgICAgICAvLyBzcGVjaWFsIGZvcm1hdHRpbmcgZm9yIGtub3duIG1vZCBzdGF0cywgd2hlcmUgdGhlIGRpc3BsYXkgb2YgdGhlIHJhdyB2YWx1ZSBpcyBsZXNzIHVzZWZ1bAogICAgICAgICAgaWYgKGtleSA9PT0gJ0hBQ0tfU1BFRUQnKQogICAgICAgICAgICB2YWwgPSB2YWwgLyAxMDAwMCArICclJzsgLy8gNTAwMDAwID0gNTAlCiAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdISVRfQk9OVVMnKQogICAgICAgICAgICB2YWwgPSB2YWwgLyAxMDAwMCArICclJzsgLy8gMzAwMDAwID0gMzAlCiAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdBVFRBQ0tfRlJFUVVFTkNZJykKICAgICAgICAgICAgdmFsID0gdmFsIC8gMTAwMCArICd4JzsgLy8gMjAwMCA9IDJ4CiAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdGT1JDRV9BTVBMSUZJRVInKQogICAgICAgICAgICB2YWwgPSB2YWwgLyAxMDAwICsgJ3gnOyAvLyAyMDAwID0gMngKICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ0xJTktfUkFOR0VfTVVMVElQTElFUicpCiAgICAgICAgICAgIHZhbCA9IHZhbCAvIDEwMDAgKyAneCc7IC8vIDIwMDAgPSAyeAogICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnTElOS19ERUZFTlNFX0JPT1NUJykKICAgICAgICAgICAgdmFsID0gdmFsIC8gMTAwMCArICd4JzsgLy8gMTUwMCA9IDEuNXgKICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ1JFTU9WQUxfU1RJQ0tJTkVTUycgJiYgdmFsID4gMTAwKSB2YWwgPSB2YWwgLyAxMDAwMCArICclJzsgLy8gYW4gZWR1Y2F0ZWQgZ3Vlc3MKICAgICAgICAgIC8vIGVsc2UgZGlzcGxheSB1bm1vZGlmaWVkLiBjb3JyZWN0IGZvciBzaGllbGQgbWl0aWdhdGlvbiBhbmQgbXVsdGloYWNrIC0gdW5rbm93biBmb3IgZnV0dXJlL290aGVyIG1vZHMKCiAgICAgICAgICBtb2RUb29sdGlwICs9ICdcbisnICsgdmFsICsgJyAnICsga2V5LmNhcGl0YWxpemUoKS5yZXBsYWNlKC9fL2csICcgJyk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAobW9kLnJhcml0eSkgewogICAgICAgIG1vZENvbG9yID0gd2luZG93LkNPTE9SU19NT0RbbW9kLnJhcml0eV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbW9kQ29sb3IgPSAnI2ZmZic7CiAgICAgIH0KICAgIH0KCiAgICBtb2RzLnB1c2gobW9kTmFtZSk7CiAgICBtb2RzVGl0bGUucHVzaChtb2RUb29sdGlwKTsKICAgIG1vZHNDb2xvci5wdXNoKG1vZENvbG9yKTsKICB9KTsKCiAgdmFyIHQgPSAnJzsKICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZHMubGVuZ3RoOyBpKyspIHsKICAgIHQgKz0gJzxzcGFuJyArIChtb2RzVGl0bGVbaV0ubGVuZ3RoID8gJyB0aXRsZT0iJyArIG1vZHNUaXRsZVtpXSArICciJyA6ICcnKSArICcgc3R5bGU9ImNvbG9yOicgKyBtb2RzQ29sb3JbaV0gKyAnIj4nICsgbW9kc1tpXSArICc8L3NwYW4+JzsKICB9CiAgLy8gYW5kIGFkZCBibGFuayBlbnRyaWVzIGlmIHdlIGhhdmUgbGVzcyB0aGFuIDQgbW9kcyAoYXMgdGhlIHNlcnZlciBubyBsb25nZXIgcmV0dXJucyBhbGwgbW9kIHNsb3RzLCBidXQganVzdCB0aGUgZmlsbGVkIG9uZXMpCiAgZm9yIChsZXQgaSA9IG1vZHMubGVuZ3RoOyBpIDwgNDsgaSsrKSB7CiAgICB0ICs9ICc8c3BhbiBzdHlsZT0iY29sb3I6IzAwMCI+PC9zcGFuPic7CiAgfQoKICByZXR1cm4gdDsKfTsKCi8qKgogKiBHZW5lcmF0ZXMgdGV4dCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgYW5kIHRvdGFsIGVuZXJneSBvZiBhIHBvcnRhbC4KICoKICogQGZ1bmN0aW9uIGdldEVuZXJneVRleHQKICogQHBhcmFtIHtPYmplY3R9IGQgLSBUaGUgcG9ydGFsIGRldGFpbCBvYmplY3QgY29udGFpbmluZyBlbmVyZ3kgaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZW5lcmd5IGxhYmVsLCBmb3JtYXR0ZWQgZW5lcmd5IHZhbHVlcywgYW5kIGEgdG9vbHRpcCB0aXRsZS4KICovCndpbmRvdy5nZXRFbmVyZ3lUZXh0ID0gZnVuY3Rpb24gKGQpIHsKICB2YXIgY3VycmVudE5yZyA9IHdpbmRvdy5nZXRDdXJyZW50UG9ydGFsRW5lcmd5KGQpOwogIHZhciB0b3RhbE5yZyA9IHdpbmRvdy5nZXRUb3RhbFBvcnRhbEVuZXJneShkKTsKICB2YXIgdGl0bGUgPSBjdXJyZW50TnJnICsgJyAvICcgKyB0b3RhbE5yZzsKICB2YXIgZmlsbCA9IHdpbmRvdy5wcmV0dHlFbmVyZ3koY3VycmVudE5yZykgKyAnIC8gJyArIHdpbmRvdy5wcmV0dHlFbmVyZ3kodG90YWxOcmcpOwogIHJldHVybiBbJ2VuZXJneScsIGZpbGwsIHRpdGxlXTsKfTsKCi8qKgogKiBHZW5lcmF0ZXMgSFRNTCBkZXRhaWxzIGZvciByZXNvbmF0b3JzIGRlcGxveWVkIG9uIGEgcG9ydGFsLgogKgogKiBAZnVuY3Rpb24gZ2V0UmVzb25hdG9yRGV0YWlscwogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIHJlc29uYXRvciBpbmZvcm1hdGlvbi4KICogQHJldHVybnMge3N0cmluZ30gSFRNTCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByZXNvbmF0b3IgZGV0YWlscyBvZiB0aGUgcG9ydGFsLgogKi8Kd2luZG93LmdldFJlc29uYXRvckRldGFpbHMgPSBmdW5jdGlvbiAoZCkgewogIHZhciByZXNvRGV0YWlscyA9IFtdOwogIC8vIG9jdGFudD1zbG90OiAwPUUsIDE9TkUsIDI9TiwgMz1OVywgND1XLCA1PVNXLCA2PVMsIFNFPTcKICAvLyByZXNvcyBpbiB0aGUgZGlzcGxheSBzaG91bGQgYmUgb3JkZXJlZCBsaWtlIHRoaXM6CiAgLy8gICBOICAgIE5FICAgICAgICAgU2luY2UgdGhlIHZpZXcgaXMgZGlzcGxheWVkIGluIHJvd3MsIHRoZXkKICAvLyAgTlcgICAgRSAgICAgICAgICBuZWVkIHRvIGJlIG9yZGVyZWQgbGlrZSB0aGlzOiBOIE5FIE5XIEUgVyBTRSBTVyBTCiAgLy8gICBXICAgIFNFICAgICAgICAgaS5lLiAyIDEgMyAwIDQgNyA1IDYKICAvLyAgU1cgICAgUwogIC8vIG5vdGU6IGFzIG9mIDIwMTQtMDUtMjMgdXBkYXRlLCB0aGlzIGlzIG5vdCB0cnVlIGZvciBwb3J0YWxzIHdpdGggZW1wdHkgc2xvdHMhCgogIHZhciBwcm9jZXNzUmVzb25hdG9yU2xvdCA9IGZ1bmN0aW9uIChyZXNvLCBzbG90KSB7CiAgICB2YXIgbHZsID0gMCwKICAgICAgbnJnID0gMCwKICAgICAgb3duZXIgPSBudWxsOwoKICAgIGlmIChyZXNvKSB7CiAgICAgIGx2bCA9IHBhcnNlSW50KHJlc28ubGV2ZWwpOwogICAgICBucmcgPSBwYXJzZUludChyZXNvLmVuZXJneSk7CiAgICAgIG93bmVyID0gcmVzby5vd25lcjsKICAgIH0KCiAgICByZXNvRGV0YWlscy5wdXNoKHdpbmRvdy5yZW5kZXJSZXNvbmF0b3JEZXRhaWxzKHNsb3QsIGx2bCwgbnJnLCBvd25lcikpOwogIH07CgogIC8vIGlmIGFsbCA4IHJlc29uYXRvcnMgYXJlIGRlcGxveWVkLCB3ZSBrbm93IHdoaWNoIGlzIGluIHdoaWNoIHNsb3QKCiAgaWYgKGQucmVzb25hdG9ycy5sZW5ndGggPT09IDgpIHsKICAgIC8vIGZ1bGx5IGRlcGxveWVkIC0gd2UgY2FuIG1ha2UgYXNzdW1wdGlvbnMgYWJvdXQgZGVwbG95bWVudCBzbG90cwogICAgJC5lYWNoKFsyLCAxLCAzLCAwLCA0LCA3LCA1LCA2XSwgZnVuY3Rpb24gKGluZCwgc2xvdCkgewogICAgICBwcm9jZXNzUmVzb25hdG9yU2xvdChkLnJlc29uYXRvcnNbc2xvdF0sIHNsb3QpOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIC8vIHBhcnRpYWxseSBkZXBsb3llZCBwb3J0YWwgLSB3ZSBjYW4gbm8gbG9uZ2VyIGZpbmQgb3V0IHdoaWNoIHJlc29uYXRvciBpcyBpbiB3aGljaCBzbG90CiAgICBmb3IgKHZhciBpbmQgPSAwOyBpbmQgPCA4OyBpbmQrKykgewogICAgICBwcm9jZXNzUmVzb25hdG9yU2xvdChpbmQgPCBkLnJlc29uYXRvcnMubGVuZ3RoID8gZC5yZXNvbmF0b3JzW2luZF0gOiBudWxsLCBudWxsKTsKICAgIH0KICB9CgogIHJldHVybiAnPHRhYmxlIGlkPSJyZXNvZGV0YWlscyI+JyArIHdpbmRvdy5nZW5Gb3VyQ29sdW1uVGFibGUocmVzb0RldGFpbHMpICsgJzwvdGFibGU+JzsKfTsKCi8qKgogKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCByZW5kZXJzIHRoZSBIVE1MIGZvciBhIGdpdmVuIHJlc29uYXRvci4KICoKICogQGZ1bmN0aW9uIHJlbmRlclJlc29uYXRvckRldGFpbHMKICogQHBhcmFtIHtudW1iZXJ9IHNsb3QgLSBUaGUgc2xvdCBudW1iZXIgd2hlcmUgdGhlIHJlc29uYXRvciBpcyBkZXBsb3llZC4gU3RhcnRzIHdpdGggMCAoZWFzdCkgYW5kIHJvdGF0ZXMgY2xvY2t3aXNlLgogKiAgICAgICAgICAgICAgICAgICAgICAgIFNvLCBsYXN0IG9uZSBpcyA3IChzb3V0aGVhc3QpLgogKiBAcGFyYW0ge251bWJlcn0gbGV2ZWwgLSBUaGUgbGV2ZWwgb2YgdGhlIHJlc29uYXRvci4KICogQHBhcmFtIHtudW1iZXJ9IG5yZyAtIFRoZSBlbmVyZ3kgb2YgdGhlIHJlc29uYXRvci4KICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gbmljayAtIFRoZSBuaWNrbmFtZSBvZiB0aGUgb3duZXIgb2YgdGhlIHJlc29uYXRvciwgb3IgbnVsbCBpZiBub3QgYXBwbGljYWJsZS4KICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBIVE1MIGNvbnRlbnQgb2YgdGhlIHJlc29uYXRvciBhbmQgdGhlIG93bmVyJ3Mgbmlja25hbWUuCiAqLwp3aW5kb3cucmVuZGVyUmVzb25hdG9yRGV0YWlscyA9IGZ1bmN0aW9uIChzbG90LCBsZXZlbCwgbnJnLCBuaWNrKSB7CiAgY29uc3QgY2xhc3NOYW1lID0gd2luZG93Lk9DVEFOVFNbc2xvdF0gPT09ICdOJyA/ICdtZXRlciBub3J0aCcgOiAnbWV0ZXInOwoKICB2YXIgbWF4ID0gd2luZG93LlJFU09fTlJHW2xldmVsXTsKICB2YXIgZmlsbEdyYWRlID0gbGV2ZWwgPiAwID8gKG5yZyAvIG1heCkgKiAxMDAgOiAwOwoKICB2YXIgaW5mID0KICAgIChsZXZlbCA+IDAgPyAnZW5lcmd5Olx0JyArIG5yZyArICcgLyAnICsgbWF4ICsgJyAoJyArIE1hdGgucm91bmQoZmlsbEdyYWRlKSArICclKVxuJyArICdsZXZlbDpcdCcgKyBsZXZlbCArICdcbicgKyAnb3duZXI6XHQnICsgbmljayArICdcbicgOiAnJykgKwogICAgKHNsb3QgIT09IG51bGwgPyAnb2N0YW50Olx0JyArIHdpbmRvdy5PQ1RBTlRTW3Nsb3RdICsgJyAnICsgd2luZG93Lk9DVEFOVFNfQVJST1dbc2xvdF0gOiAnJyk7CgogIHZhciBzdHlsZSA9IGZpbGxHcmFkZSA/ICd3aWR0aDonICsgZmlsbEdyYWRlICsgJyU7IGJhY2tncm91bmQ6JyArIHdpbmRvdy5DT0xPUlNfTFZMW2xldmVsXSArICc7JyA6ICcnOwoKICB2YXIgY29sb3IgPSBsZXZlbCA8IDMgPyAnIzk5MDBGRicgOiAnI0ZGRkZGRic7CgogIHZhciBsYmFyID0gbGV2ZWwgPiAwID8gJzxzcGFuIGNsYXNzPSJtZXRlci1sZXZlbCIgc3R5bGU9ImNvbG9yOiAnICsgY29sb3IgKyAnOyI+IEwgJyArIGxldmVsICsgJyA8L3NwYW4+JyA6ICcnOwoKICB2YXIgZmlsbCA9ICc8c3BhbiBzdHlsZT0iJyArIHN0eWxlICsgJyI+PC9zcGFuPic7CgogIHZhciBtZXRlciA9ICc8c3BhbiBjbGFzcz0iJyArIGNsYXNzTmFtZSArICciIHRpdGxlPSInICsgaW5mICsgJyI+JyArIGZpbGwgKyBsYmFyICsgJzwvc3Bhbj4nOwoKICBuaWNrID0gbmljayA/ICc8c3BhbiBjbGFzcz0ibmlja25hbWUiPicgKyBuaWNrICsgJzwvc3Bhbj4nIDogbnVsbDsKICByZXR1cm4gW21ldGVyLCBuaWNrIHx8ICcnXTsKfTsKCi8qKgogKiBDYWxjdWxhdGVzIHRoZSBBUCBnYWluIGZyb20gZGVzdHJveWluZyBhbmQgdGhlbiBjYXB0dXJpbmcgYSBwb3J0YWwgYnkgZGVwbG95aW5nIHJlc29uYXRvcnMuCiAqCiAqIEBmdW5jdGlvbiBnZXRBdHRhY2tBcEdhaW5UZXh0CiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgcG9ydGFsIGluZm9ybWF0aW9uLgogKiBAcGFyYW0ge251bWJlcn0gZmllbGRDb3VudCAtIFRoZSBudW1iZXIgb2YgZmllbGRzIGxpbmtlZCB0byB0aGUgcG9ydGFsLgogKiBAcGFyYW0ge251bWJlcn0gbGlua0NvdW50IC0gVGhlIG51bWJlciBvZiBsaW5rcyBjb25uZWN0ZWQgdG8gdGhlIHBvcnRhbC4KICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBjb250YWluaW5nIHRoZSBsYWJlbCAnQVAgR2FpbicsIHRvdGFsIEFQIGdhaW4sIGFuZCBhIGJyZWFrZG93biB0b29sdGlwLgogKi8Kd2luZG93LmdldEF0dGFja0FwR2FpblRleHQgPSBmdW5jdGlvbiAoZCwgZmllbGRDb3VudCwgbGlua0NvdW50KSB7CiAgdmFyIGJyZWFrZG93biA9IHdpbmRvdy5nZXRBdHRhY2tBcEdhaW4oZCwgZmllbGRDb3VudCwgbGlua0NvdW50KTsKICB2YXIgdG90YWxHYWluID0gYnJlYWtkb3duLmVuZW15QXA7CgogIHZhciB0ID0gJyc7CiAgaWYgKHdpbmRvdy50ZWFtU3RyaW5nVG9JZCh3aW5kb3cuUExBWUVSLnRlYW0pID09PSB3aW5kb3cudGVhbVN0cmluZ1RvSWQoZC50ZWFtKSkgewogICAgdG90YWxHYWluID0gYnJlYWtkb3duLmZyaWVuZGx5QXA7CiAgICB0ICs9ICdGcmllbmRseSBBUDpcdCcgKyBicmVha2Rvd24uZnJpZW5kbHlBcCArICdcbic7CiAgICB0ICs9ICcgIERlcGxveSAnICsgYnJlYWtkb3duLmRlcGxveUNvdW50ICsgJywgJzsKICAgIHQgKz0gJ1VwZ3JhZGUgJyArIGJyZWFrZG93bi51cGdyYWRlQ291bnQgKyAnXG4nOwogICAgdCArPSAnXG4nOwogIH0KICB0ICs9ICdFbmVteSBBUDpcdCcgKyBicmVha2Rvd24uZW5lbXlBcCArICdcbic7CiAgdCArPSAnICBEZXN0cm95IEFQOlx0JyArIGJyZWFrZG93bi5kZXN0cm95QXAgKyAnXG4nOwogIHQgKz0gJyAgQ2FwdHVyZSBBUDpcdCcgKyBicmVha2Rvd24uY2FwdHVyZUFwICsgJ1xuJzsKCiAgcmV0dXJuIFsnQVAgR2FpbicsIHdpbmRvdy5kaWdpdHModG90YWxHYWluKSwgdF07Cn07CgovKioKICogUHJvdmlkZXMgZGV0YWlscyBhYm91dCB0aGUgaGFjayBjb3VudCBhbmQgY29vbGRvd24gdGltZSBvZiBhIHBvcnRhbC4KICoKICogQGZ1bmN0aW9uIGdldEhhY2tEZXRhaWxzVGV4dAogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIGhhY2sgaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgY29udGFpbmluZyB0aGUgbGFiZWwgJ2hhY2tzJywgc2hvcnQgaGFjayBpbmZvLCBhbmQgYSBkZXRhaWxlZCB0b29sdGlwLgogKi8Kd2luZG93LmdldEhhY2tEZXRhaWxzVGV4dCA9IGZ1bmN0aW9uIChkKSB7CiAgdmFyIGhhY2tEZXRhaWxzID0gd2luZG93LmdldFBvcnRhbEhhY2tEZXRhaWxzKGQpOwoKICB2YXIgc2hvcnRIYWNrSW5mbyA9IGhhY2tEZXRhaWxzLmhhY2tzICsgJyBAICcgKyB3aW5kb3cuZm9ybWF0SW50ZXJ2YWwoaGFja0RldGFpbHMuY29vbGRvd24pOwoKICB2YXIgdGl0bGUgPQogICAgYEhhY2tzIGF2YWlsYWJsZSBldmVyeSA0IGhvdXJzXG5gICsKICAgIGBIYWNrIGNvdW50Olx0JHtoYWNrRGV0YWlscy5oYWNrc31cbmAgKwogICAgYENvb2xkb3duIHRpbWU6XHQke3dpbmRvdy5mb3JtYXRJbnRlcnZhbChoYWNrRGV0YWlscy5jb29sZG93bil9XG5gICsKICAgIGBCdXJub3V0IHRpbWU6XHQke3dpbmRvdy5mb3JtYXRJbnRlcnZhbChoYWNrRGV0YWlscy5idXJub3V0KX1gOwoKICByZXR1cm4gWydoYWNrcycsIHNob3J0SGFja0luZm8sIHRpdGxlXTsKfTsKCi8qKgogKiBHZW5lcmF0ZXMgdGV4dCByZXByZXNlbnRpbmcgdGhlIHRvdGFsIG1pdGlnYXRpb24gcHJvdmlkZWQgYnkgc2hpZWxkcyBhbmQgbGlua3Mgb24gYSBwb3J0YWwuCiAqCiAqIEBmdW5jdGlvbiBnZXRNaXRpZ2F0aW9uVGV4dAogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIG1pdGlnYXRpb24gaW5mb3JtYXRpb24uCiAqIEBwYXJhbSB7bnVtYmVyfSBsaW5rQ291bnQgLSBUaGUgbnVtYmVyIG9mIGxpbmtzIGNvbm5lY3RlZCB0byB0aGUgcG9ydGFsLgogKiBAcmV0dXJucyB7QXJyYXl9IEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGxhYmVsICdzaGllbGRpbmcnLCBzaG9ydCBtaXRpZ2F0aW9uIGluZm8sIGFuZCBhIGRldGFpbGVkIHRvb2x0aXAuCiAqLwp3aW5kb3cuZ2V0TWl0aWdhdGlvblRleHQgPSBmdW5jdGlvbiAoZCwgbGlua0NvdW50KSB7CiAgdmFyIG1pdGlnYXRpb25EZXRhaWxzID0gd2luZG93LmdldFBvcnRhbE1pdGlnYXRpb25EZXRhaWxzKGQsIGxpbmtDb3VudCk7CgogIHZhciBtaXRpZ2F0aW9uU2hvcnQgPSBtaXRpZ2F0aW9uRGV0YWlscy50b3RhbDsKICBpZiAobWl0aWdhdGlvbkRldGFpbHMuZXhjZXNzKSBtaXRpZ2F0aW9uU2hvcnQgKz0gJyAoKycgKyBtaXRpZ2F0aW9uRGV0YWlscy5leGNlc3MgKyAnKSc7CgogIHZhciB0aXRsZSA9CiAgICBgVG90YWwgc2hpZWxkaW5nOlx0JHttaXRpZ2F0aW9uRGV0YWlscy5zaGllbGRzICsgbWl0aWdhdGlvbkRldGFpbHMubGlua3N9XG5gICsKICAgIGAtIGFjdGl2ZTpcdCR7bWl0aWdhdGlvbkRldGFpbHMudG90YWx9XG5gICsKICAgIGAtIGV4Y2VzczpcdCR7bWl0aWdhdGlvbkRldGFpbHMuZXhjZXNzfVxuYCArCiAgICBgRnJvbVxuYCArCiAgICBgLSBzaGllbGRzOlx0JHttaXRpZ2F0aW9uRGV0YWlscy5zaGllbGRzfVxuYCArCiAgICBgLSBsaW5rczpcdCR7bWl0aWdhdGlvbkRldGFpbHMubGlua3N9ICgke21pdGlnYXRpb25EZXRhaWxzLmxpbmtEZWZlbnNlQm9vc3R9eClgOwoKICByZXR1cm4gWydzaGllbGRpbmcnLCBtaXRpZ2F0aW9uU2hvcnQsIHRpdGxlXTsKfTsKCi8qKgogKiBEaXNwbGF5cyBhIGRpYWxvZyB3aXRoIGxpbmtzIHRvIHNob3cgdGhlIHNwZWNpZmllZCBsb2NhdGlvbiBvbiB2YXJpb3VzIG1hcCBzZXJ2aWNlcy4KICoKICogQGZ1bmN0aW9uIHNob3dQb3J0YWxQb3NMaW5rcwogKiBAcGFyYW0ge251bWJlcn0gbGF0IC0gTGF0aXR1ZGUgb2YgdGhlIGxvY2F0aW9uLgogKiBAcGFyYW0ge251bWJlcn0gbG5nIC0gTG9uZ2l0dWRlIG9mIHRoZSBsb2NhdGlvbi4KICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBsb2NhdGlvbi4KICovCndpbmRvdy5zaG93UG9ydGFsUG9zTGlua3MgPSBmdW5jdGlvbiAobGF0LCBsbmcsIG5hbWUpIHsKICB2YXIgZW5jb2RlZF9uYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpOwogIHZhciBxcmNvZGUgPSAnPGRpdiBpZD0icXJjb2RlIj48L2Rpdj4nOwogIHZhciBzY3JpcHQgPSAiPHNjcmlwdD4kKCcjcXJjb2RlJykucXJjb2RlKHt0ZXh0OidHRU86IiArIGxhdCArICcsJyArIGxuZyArICInfSk7PC9zY3JpcHQ+IjsKICB2YXIgZ21hcHMgPSAnPGEgaHJlZj0iaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9sbD0nICsgbGF0ICsgJywnICsgbG5nICsgJyZxPScgKyBsYXQgKyAnLCcgKyBsbmcgKyAnJTIwKCcgKyBlbmNvZGVkX25hbWUgKyAnKSI+R29vZ2xlIE1hcHM8L2E+JzsKICB2YXIgYmluZ21hcHMgPQogICAgJzxhIGhyZWY9Imh0dHBzOi8vd3d3LmJpbmcuY29tL21hcHMvP3Y9MiZjcD0nICsgbGF0ICsgJ34nICsgbG5nICsgJyZsdmw9MTYmc3A9UG9pbnQuJyArIGxhdCArICdfJyArIGxuZyArICdfJyArIGVuY29kZWRfbmFtZSArICdfX18iPkJpbmcgTWFwczwvYT4nOwogIHZhciBvc20gPSAnPGEgaHJlZj0iaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvP21sYXQ9JyArIGxhdCArICcmbWxvbj0nICsgbG5nICsgJyZ6b29tPTE2Ij5PcGVuU3RyZWV0TWFwPC9hPic7CiAgdmFyIGxhdExuZyA9ICc8c3Bhbj4nICsgbGF0ICsgJywnICsgbG5nICsgJzwvc3Bhbj4nOwogIHdpbmRvdy5kaWFsb2coewogICAgaHRtbDogJzxkaXYgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPicgKyBxcmNvZGUgKyBzY3JpcHQgKyBnbWFwcyArICc7ICcgKyBiaW5nbWFwcyArICc7ICcgKyBvc20gKyAnPGJyIC8+JyArIGxhdExuZyArICc8L2Rpdj4nLAogICAgdGl0bGU6IG5hbWUsCiAgICBpZDogJ3Bvc2xpbmtzJywKICB9KTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHBvcnRhbF9oaWdobGlnaHRlci5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3BvcnRhbF9oaWdobGlnaHRlcicpOwovKioKICogQGZpbGUgVGhlc2UgZnVuY3Rpb25zIGhhbmRsZSBwb3J0YWwgaGlnaGxpZ2h0ZXJzCiAqIEBtb2R1bGUgcG9ydGFsX2hpZ2hsaWdodGVyCiAqLwoKLy8gYW4gb2JqZWN0IG1hcHBpbmcgaGlnaGxpZ2h0ZXIgbmFtZXMgdG8gdGhlIG9iamVjdCBjb250YWluaW5nIGNhbGxiYWNrIGZ1bmN0aW9ucwp3aW5kb3cuX2hpZ2hsaWdodGVycyA9IG51bGw7CgovLyB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBoaWdobGlnaHRlcgp3aW5kb3cuX2N1cnJlbnRfaGlnaGxpZ2h0ZXIgPSBsb2NhbFN0b3JhZ2UucG9ydGFsX2hpZ2hsaWdodGVyOwoKd2luZG93Ll9ub19oaWdobGlnaHRlciA9ICdObyBIaWdobGlnaHRzJzsKCi8qKgogKiBBZGRzIGEgbmV3IHBvcnRhbCBoaWdobGlnaHRlciB0byBtYXAuIFRoZSBoaWdobGlnaHRlciBpcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggcG9ydGFsLgogKgogKiBAZnVuY3Rpb24gYWRkUG9ydGFsSGlnaGxpZ2h0ZXIKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaGlnaGxpZ2h0ZXIuCiAqIEBwYXJhbSB7RnVuY3Rpb259IGRhdGEgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIHRoZSBoaWdobGlnaHRlci4KICogICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgZGF0YSBhYm91dCB0aGUgcG9ydGFsIGFuZCBkZWNpZGVzIGhvdyB0byBoaWdobGlnaHQgaXQuCiAqLwp3aW5kb3cuYWRkUG9ydGFsSGlnaGxpZ2h0ZXIgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkgewogIGlmICh3aW5kb3cuX2hpZ2hsaWdodGVycyA9PT0gbnVsbCkgewogICAgd2luZG93Ll9oaWdobGlnaHRlcnMgPSB7fTsKICB9CgogIC8vIG9sZC1mb3JtYXQgaGlnaGxpZ2h0ZXJzIGp1c3QgcGFzc2VkIGEgY2FsbGJhY2sgZnVuY3Rpb24uIHRoaXMgaXMgdGhlIHNhbWUgYXMganVzdCBhIGhpZ2hsaWdodCBtZXRob2QKICBpZiAoIWRhdGEuaGlnaGxpZ2h0KSB7CiAgICBkYXRhID0geyBoaWdobGlnaHQ6IGRhdGEgfTsKICB9CgogIHdpbmRvdy5faGlnaGxpZ2h0ZXJzW25hbWVdID0gZGF0YTsKCiAgaWYgKHdpbmRvdy5pc0FwcCAmJiB3aW5kb3cuYXBwLmFkZFBvcnRhbEhpZ2hsaWdodGVyKSB3aW5kb3cuYXBwLmFkZFBvcnRhbEhpZ2hsaWdodGVyKG5hbWUpOwoKICBpZiAod2luZG93Ll9jdXJyZW50X2hpZ2hsaWdodGVyID09PSB1bmRlZmluZWQpIHsKICAgIHdpbmRvdy5fY3VycmVudF9oaWdobGlnaHRlciA9IG5hbWU7CiAgfQoKICBpZiAod2luZG93Ll9jdXJyZW50X2hpZ2hsaWdodGVyID09PSBuYW1lKSB7CiAgICBpZiAod2luZG93LmlzQXBwICYmIHdpbmRvdy5hcHAuc2V0QWN0aXZlSGlnaGxpZ2h0ZXIpIHdpbmRvdy5hcHAuc2V0QWN0aXZlSGlnaGxpZ2h0ZXIobmFtZSk7CgogICAgLy8gY2FsbCB0aGUgc2V0U2VsZWN0ZWQgY2FsbGJhY2sKICAgIGlmICh3aW5kb3cuX2hpZ2hsaWdodGVyc1t3aW5kb3cuX2N1cnJlbnRfaGlnaGxpZ2h0ZXJdLnNldFNlbGVjdGVkKSB7CiAgICAgIHdpbmRvdy5faGlnaGxpZ2h0ZXJzW3dpbmRvdy5fY3VycmVudF9oaWdobGlnaHRlcl0uc2V0U2VsZWN0ZWQodHJ1ZSk7CiAgICB9CiAgfQogIHdpbmRvdy51cGRhdGVQb3J0YWxIaWdobGlnaHRlckNvbnRyb2woKTsKfTsKCi8qKgogKiBVcGRhdGVzIHRoZSBwb3J0YWwgaGlnaGxpZ2h0ZXIgZHJvcGRvd24gbGlzdCwgcmVjcmVhdGluZyB0aGUgZHJvcGRvd24gbGlzdCBvZiBhdmFpbGFibGUgaGlnaGxpZ2h0ZXJzLgogKgogKiBAZnVuY3Rpb24gdXBkYXRlUG9ydGFsSGlnaGxpZ2h0ZXJDb250cm9sCiAqLwp3aW5kb3cudXBkYXRlUG9ydGFsSGlnaGxpZ2h0ZXJDb250cm9sID0gZnVuY3Rpb24gKCkgewogIGlmICh3aW5kb3cuaXNBcHAgJiYgd2luZG93LmFwcC5hZGRQb3J0YWxIaWdobGlnaHRlcikgewogICAgJCgnI3BvcnRhbF9oaWdobGlnaHRfc2VsZWN0JykucmVtb3ZlKCk7CiAgICByZXR1cm47CiAgfQoKICBpZiAod2luZG93Ll9oaWdobGlnaHRlcnMgIT09IG51bGwpIHsKICAgIGlmICgkKCcjcG9ydGFsX2hpZ2hsaWdodF9zZWxlY3QnKS5sZW5ndGggPT09IDApIHsKICAgICAgJCgnLmxlYWZsZXQtdG9wLmxlYWZsZXQtbGVmdCcpLmZpcnN0KCkuYXBwZW5kKCI8c2VsZWN0IGlkPSdwb3J0YWxfaGlnaGxpZ2h0X3NlbGVjdCcgY2xhc3M9J2xlYWZsZXQtY29udHJvbCc+PC9zZWxlY3Q+Iik7CiAgICAgICQoJyNwb3J0YWxfaGlnaGxpZ2h0X3NlbGVjdCcpLmNoYW5nZShmdW5jdGlvbiAoKSB7CiAgICAgICAgd2luZG93LmNoYW5nZVBvcnRhbEhpZ2hsaWdodHMoJCh0aGlzKS52YWwoKSk7CiAgICAgIH0pOwogICAgfQogICAgJCgnI3BvcnRhbF9oaWdobGlnaHRfc2VsZWN0JykuaHRtbCgnJyk7CiAgICAkKCcjcG9ydGFsX2hpZ2hsaWdodF9zZWxlY3QnKS5hcHBlbmQoJCgnPG9wdGlvbj4nKS5hdHRyKCd2YWx1ZScsIHdpbmRvdy5fbm9faGlnaGxpZ2h0ZXIpLnRleHQod2luZG93Ll9ub19oaWdobGlnaHRlcikpOwogICAgdmFyIGhfbmFtZXMgPSBPYmplY3Qua2V5cyh3aW5kb3cuX2hpZ2hsaWdodGVycykuc29ydCgpOwoKICAgICQuZWFjaChoX25hbWVzLCBmdW5jdGlvbiAoaSwgbmFtZSkgewogICAgICAkKCcjcG9ydGFsX2hpZ2hsaWdodF9zZWxlY3QnKS5hcHBlbmQoJCgnPG9wdGlvbj4nKS5hdHRyKCd2YWx1ZScsIG5hbWUpLnRleHQobmFtZSkpOwogICAgfSk7CgogICAgJCgnI3BvcnRhbF9oaWdobGlnaHRfc2VsZWN0JykudmFsKHdpbmRvdy5fY3VycmVudF9oaWdobGlnaHRlcik7CiAgfQp9OwoKLyoqCiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgcG9ydGFsIGhpZ2hsaWdodHMgYmFzZWQgb24gdGhlIHNlbGVjdGVkIGhpZ2hsaWdodGVyLgogKgogKiBAZnVuY3Rpb24gY2hhbmdlUG9ydGFsSGlnaGxpZ2h0cwogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBoaWdobGlnaHRlciB0byBiZSBhcHBsaWVkLgogKi8Kd2luZG93LmNoYW5nZVBvcnRhbEhpZ2hsaWdodHMgPSBmdW5jdGlvbiAobmFtZSkgewogIC8vIGZpcnN0IGNhbGwgYW55IHByZXZpb3VzIGhpZ2hsaWdodGVyIHNlbGVjdCBjYWxsYmFjawogIGlmICh3aW5kb3cuX2N1cnJlbnRfaGlnaGxpZ2h0ZXIgJiYgd2luZG93Ll9oaWdobGlnaHRlcnNbd2luZG93Ll9jdXJyZW50X2hpZ2hsaWdodGVyXSAmJiB3aW5kb3cuX2hpZ2hsaWdodGVyc1t3aW5kb3cuX2N1cnJlbnRfaGlnaGxpZ2h0ZXJdLnNldFNlbGVjdGVkKSB7CiAgICB3aW5kb3cuX2hpZ2hsaWdodGVyc1t3aW5kb3cuX2N1cnJlbnRfaGlnaGxpZ2h0ZXJdLnNldFNlbGVjdGVkKGZhbHNlKTsKICB9CgogIHdpbmRvdy5fY3VycmVudF9oaWdobGlnaHRlciA9IG5hbWU7CiAgaWYgKHdpbmRvdy5pc0FwcCAmJiB3aW5kb3cuYXBwLnNldEFjdGl2ZUhpZ2hsaWdodGVyKSB3aW5kb3cuYXBwLnNldEFjdGl2ZUhpZ2hsaWdodGVyKG5hbWUpOwoKICAvLyBub3cgY2FsbCB0aGUgc2V0U2VsZWN0ZWQgY2FsbGJhY2sgZm9yIHRoZSBuZXcgaGlnaGxpZ2h0ZXIKICBpZiAod2luZG93Ll9jdXJyZW50X2hpZ2hsaWdodGVyICYmIHdpbmRvdy5faGlnaGxpZ2h0ZXJzW3dpbmRvdy5fY3VycmVudF9oaWdobGlnaHRlcl0gJiYgd2luZG93Ll9oaWdobGlnaHRlcnNbd2luZG93Ll9jdXJyZW50X2hpZ2hsaWdodGVyXS5zZXRTZWxlY3RlZCkgewogICAgd2luZG93Ll9oaWdobGlnaHRlcnNbd2luZG93Ll9jdXJyZW50X2hpZ2hsaWdodGVyXS5zZXRTZWxlY3RlZCh0cnVlKTsKICB9CgogIHdpbmRvdy5yZXNldEhpZ2hsaWdodGVkUG9ydGFscygpOwogIGxvY2FsU3RvcmFnZS5wb3J0YWxfaGlnaGxpZ2h0ZXIgPSBuYW1lOwp9OwoKLyoqCiAqIEFwcGxpZXMgdGhlIGN1cnJlbnRseSBhY3RpdmUgaGlnaGxpZ2h0ZXIgdG8gYSBzcGVjaWZpYyBwb3J0YWwuCiAqIFRoaXMgZnVuY3Rpb24gaXMgdHlwaWNhbGx5IGNhbGxlZCBmb3IgZWFjaCBwb3J0YWwgb24gdGhlIG1hcC4KICoKICogQGZ1bmN0aW9uIGhpZ2hsaWdodFBvcnRhbAogKiBAcGFyYW0ge09iamVjdH0gcCAtIFRoZSBwb3J0YWwgb2JqZWN0IHRvIGJlIGhpZ2hsaWdodGVkLgogKi8Kd2luZG93LmhpZ2hsaWdodFBvcnRhbCA9IGZ1bmN0aW9uIChwKSB7CiAgaWYgKHdpbmRvdy5faGlnaGxpZ2h0ZXJzICE9PSBudWxsICYmIHdpbmRvdy5faGlnaGxpZ2h0ZXJzW3dpbmRvdy5fY3VycmVudF9oaWdobGlnaHRlcl0gIT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIHdpbmRvdy5faGlnaGxpZ2h0ZXJzW3dpbmRvdy5fY3VycmVudF9oaWdobGlnaHRlcl0uaGlnaGxpZ2h0KHsgcG9ydGFsOiBwIH0pOwogIH0KfTsKCi8qKgogKiBSZXNldHMgdGhlIGhpZ2hsaWdodGluZyBvZiBhbGwgcG9ydGFscywgcmV0dXJuaW5nIHRoZW0gdG8gdGhlaXIgZGVmYXVsdCBzdHlsZS4KICoKICogQGZ1bmN0aW9uIHJlc2V0SGlnaGxpZ2h0ZWRQb3J0YWxzCiAqLwp3aW5kb3cucmVzZXRIaWdobGlnaHRlZFBvcnRhbHMgPSBmdW5jdGlvbiAoKSB7CiAgJC5lYWNoKHdpbmRvdy5wb3J0YWxzLCBmdW5jdGlvbiAoZ3VpZCwgcG9ydGFsKSB7CiAgICB3aW5kb3cuc2V0TWFya2VyU3R5bGUocG9ydGFsLCBndWlkID09PSB3aW5kb3cuc2VsZWN0ZWRQb3J0YWwpOwogIH0pOwp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogcG9ydGFsX2luZm8uanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdwb3J0YWxfaW5mbycpOwovKioKICogQGZpbGUgVGhpcyBmaWxlIGNvbnRhaW5zIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZSB0aGUgZXh0cmFjdGlvbiBhbmQgY29tcHV0YXRpb24gb2YgcmF3IGRhdGEKICogZnJvbSBwb3J0YWwgZGV0YWlscyBmb3IgdmFyaW91cyBwdXJwb3Nlcy4KICogQG1vZHVsZSBwb3J0YWxfaW5mbwogKi8KCi8qKgogKiBDYWxjdWxhdGVzIHRoZSBkaXNwbGF5ZWQgbGV2ZWwgb2YgYSBwb3J0YWwsIHdoaWNoIGlzIGFsd2F5cyByb3VuZGVkIGRvd24gZnJvbSB0aGUgYWN0dWFsIGZsb2F0IHZhbHVlLgogKgogKiBAZnVuY3Rpb24gZ2V0UG9ydGFsTGV2ZWwKICogQHBhcmFtIHtPYmplY3R9IGQgLSBUaGUgcG9ydGFsIGRldGFpbCBvYmplY3QgY29udGFpbmluZyByZXNvbmF0b3IgaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjYWxjdWxhdGVkIHBvcnRhbCBsZXZlbC4KICovCndpbmRvdy5nZXRQb3J0YWxMZXZlbCA9IGZ1bmN0aW9uIChkKSB7CiAgdmFyIGx2bCA9IDA7CiAgdmFyIGhhc1Jlc28gPSBmYWxzZTsKICAkLmVhY2goZC5yZXNvbmF0b3JzLCBmdW5jdGlvbiAoaW5kLCByZXNvKSB7CiAgICBpZiAoIXJlc28pIHJldHVybiB0cnVlOwogICAgbHZsICs9IHBhcnNlSW50KHJlc28ubGV2ZWwpOwogICAgaGFzUmVzbyA9IHRydWU7CiAgfSk7CiAgcmV0dXJuIGhhc1Jlc28gPyBNYXRoLm1heCgxLCBsdmwgLyA4KSA6IDA7Cn07CgovKioKICogQ2FsY3VsYXRlcyB0aGUgdG90YWwgZW5lcmd5IGNhcGFjaXR5IG9mIGEgcG9ydGFsIGJhc2VkIG9uIGl0cyByZXNvbmF0b3JzLgogKgogKiBAZnVuY3Rpb24gZ2V0VG90YWxQb3J0YWxFbmVyZ3kKICogQHBhcmFtIHtPYmplY3R9IGQgLSBUaGUgcG9ydGFsIGRldGFpbCBvYmplY3QgY29udGFpbmluZyByZXNvbmF0b3IgaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB0b3RhbCBlbmVyZ3kgY2FwYWNpdHkgb2YgdGhlIHBvcnRhbC4KICovCndpbmRvdy5nZXRUb3RhbFBvcnRhbEVuZXJneSA9IGZ1bmN0aW9uIChkKSB7CiAgdmFyIG5yZyA9IDA7CiAgJC5lYWNoKGQucmVzb25hdG9ycywgZnVuY3Rpb24gKGluZCwgcmVzbykgewogICAgaWYgKCFyZXNvKSByZXR1cm4gdHJ1ZTsKICAgIHZhciBsZXZlbCA9IHBhcnNlSW50KHJlc28ubGV2ZWwpOwogICAgdmFyIG1heCA9IHdpbmRvdy5SRVNPX05SR1tsZXZlbF07CiAgICBucmcgKz0gbWF4OwogIH0pOwogIHJldHVybiBucmc7Cn07CgovLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKd2luZG93LmdldFBvcnRhbEVuZXJneSA9IHdpbmRvdy5nZXRUb3RhbFBvcnRhbEVuZXJneTsKCi8qKgogKiBDYWxjdWxhdGVzIHRoZSBjdXJyZW50IGVuZXJneSBvZiBhIHBvcnRhbCBiYXNlZCBvbiBpdHMgcmVzb25hdG9ycy4KICoKICogQGZ1bmN0aW9uIGdldEN1cnJlbnRQb3J0YWxFbmVyZ3kKICogQHBhcmFtIHtPYmplY3R9IGQgLSBUaGUgcG9ydGFsIGRldGFpbCBvYmplY3QgY29udGFpbmluZyByZXNvbmF0b3IgaW5mb3JtYXRpb24uCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjdXJyZW50IGVuZXJneSBvZiB0aGUgcG9ydGFsLgogKi8Kd2luZG93LmdldEN1cnJlbnRQb3J0YWxFbmVyZ3kgPSBmdW5jdGlvbiAoZCkgewogIHZhciBucmcgPSAwOwogICQuZWFjaChkLnJlc29uYXRvcnMsIGZ1bmN0aW9uIChpbmQsIHJlc28pIHsKICAgIGlmICghcmVzbykgcmV0dXJuIHRydWU7CiAgICBucmcgKz0gcGFyc2VJbnQocmVzby5lbmVyZ3kpOwogIH0pOwogIHJldHVybiBucmc7Cn07CgovKioKICogQ2FsY3VsYXRlcyB0aGUgaGVhbHRoIHBlcmNlbnRhZ2Ugb2YgYSBwb3J0YWwgYmFzZWQgb24gaXRzIGN1cnJlbnQgYW5kIHRvdGFsIGVuZXJneS4KICoKICogQGZ1bmN0aW9uIGdldFBvcnRhbEhlYWx0aAogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIHJlc29uYXRvciBpbmZvcm1hdGlvbi4KICogQHJldHVybnMge251bWJlcn0gVGhlIHBvcnRhbCBoZWFsdGggYXMgYSBwZXJjZW50YWdlICgwLTEwMCkuCiAqICAgICAgICAgICAgICAgICAgIFJldHVybnMgMCBpZiB0aGUgcG9ydGFsIGhhcyBubyB0b3RhbCBlbmVyZ3kuCiAqLwp3aW5kb3cuZ2V0UG9ydGFsSGVhbHRoID0gZnVuY3Rpb24gKGQpIHsKICB2YXIgbWF4ID0gd2luZG93LmdldFRvdGFsUG9ydGFsRW5lcmd5KGQpOwogIHZhciBjdXIgPSB3aW5kb3cuZ2V0Q3VycmVudFBvcnRhbEVuZXJneShkKTsKCiAgcmV0dXJuIG1heCA+IDAgPyBNYXRoLmZsb29yKChjdXIgLyBtYXgpICogMTAwKSA6IDA7Cn07CgovKioKICogQ2FsY3VsYXRlcyB0aGUgcmFuZ2Ugb2YgYSBwb3J0YWwgZm9yIGNyZWF0aW5nIGxpbmtzLiBUaGUgcmFuZ2UgZGVwZW5kcyBvbiBwb3J0YWwgbGV2ZWwgYW5kIGFueSBpbnN0YWxsZWQgTGluayBBbXBzLgogKgogKiBAZnVuY3Rpb24gZ2V0UG9ydGFsUmFuZ2UKICogQHBhcmFtIHtPYmplY3R9IGQgLSBUaGUgcG9ydGFsIGRldGFpbCBvYmplY3QgY29udGFpbmluZyBkZXRhaWxzIGFib3V0IHRoZSB0ZWFtIGFuZCByZXNvbmF0b3JzLgogKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgYmFzZSByYW5nZSAoYGJhc2VgKSwgYm9vc3QgbXVsdGlwbGllciAoYGJvb3N0YCksCiAqICAgICAgICAgICAgICAgICAgIHRvdGFsIHJhbmdlIGFmdGVyIGFwcGx5aW5nIHRoZSBib29zdCAoYHJhbmdlYCksCiAqICAgICAgICAgICAgICAgICAgIGFuZCBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgcG9ydGFsIGlzIGxpbmthYmxlIChgaXNMaW5rYWJsZWApLgogKi8Kd2luZG93LmdldFBvcnRhbFJhbmdlID0gZnVuY3Rpb24gKGQpIHsKICAvLyBmb3JtdWxhIGJ5IHRoZSBncmVhdCBnYWxzIGFuZCBndXlzIGF0CiAgLy8gaHR0cDovL2RlY29kZWluZ3Jlc3MubWUvMjAxMi8xMS8xOC9pbmdyZXNzLXBvcnRhbC1sZXZlbHMtYW5kLWxpbmstcmFuZ2UvCiAgdmFyIHJhbmdlID0gewogICAgYmFzZTogd2luZG93LnRlYW1TdHJpbmdUb0lkKGQudGVhbSkgPT09IHdpbmRvdy5URUFNX01BQyA/IHdpbmRvdy5MSU5LX1JBTkdFX01BQ1tkLmxldmVsICsgMV0gOiAxNjAgKiBNYXRoLnBvdyh3aW5kb3cuZ2V0UG9ydGFsTGV2ZWwoZCksIDQpLAogICAgYm9vc3Q6IHdpbmRvdy5nZXRMaW5rQW1wUmFuZ2VCb29zdChkKSwKICB9OwoKICByYW5nZS5yYW5nZSA9IHJhbmdlLmJvb3N0ICogcmFuZ2UuYmFzZTsKICByYW5nZS5pc0xpbmthYmxlID0gZC5yZXNDb3VudCA9PT0gODsKCiAgcmV0dXJuIHJhbmdlOwp9OwoKLyoqCiAqIENhbGN1bGF0ZXMgdGhlIGJvb3N0IGluIGxpbmsgcmFuZ2UgcHJvdmlkZWQgYnkgaW5zdGFsbGVkIExpbmsgQW1wcy4KICoKICogQGZ1bmN0aW9uIGdldExpbmtBbXBSYW5nZUJvb3N0CiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgbW9kIGluZm9ybWF0aW9uLgogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgdG90YWwgYm9vc3QgZmFjdG9yIGZvciB0aGUgbGluayByYW5nZS4KICovCndpbmRvdy5nZXRMaW5rQW1wUmFuZ2VCb29zdCA9IGZ1bmN0aW9uIChkKSB7CiAgaWYgKHdpbmRvdy50ZWFtU3RyaW5nVG9JZChkLnRlYW0pID09PSB3aW5kb3cuVEVBTV9NQUMpIHsKICAgIHJldHVybiAxLjA7CiAgfQogIC8vIGFkZGl0aW9uYWwgcmFuZ2UgYm9vc3QgY2FsY3VsYXRpb24KCiAgLy8gbGluayBhbXBzIHNjYWxlOiBmaXJzdCBpcyBmdWxsLCBzZWNvbmQgYSBxdWFydGVyLCB0aGUgbGFzdCB0d28gYW4gZWlnaHRoCiAgdmFyIHNjYWxlID0gWzEuMCwgMC4yNSwgMC4xMjUsIDAuMTI1XTsKCiAgdmFyIGJvb3N0ID0gMC4wOyAvLyBpbml0aWFsIGJvb3N0IGlzIDAuMCAoaS5lLiBubyBib29zdCBvdmVyIHN0YW5kYXJkIHJhbmdlKQoKICB2YXIgbGlua0FtcHMgPSB3aW5kb3cuZ2V0UG9ydGFsTW9kc0J5VHlwZShkLCAnTElOS19BTVBMSUZJRVInKTsKCiAgbGlua0FtcHMuZm9yRWFjaChmdW5jdGlvbiAobW9kLCBpKSB7CiAgICAvLyBsaW5rIGFtcCBzdGF0IExJTktfUkFOR0VfTVVMVElQTElFUiBpcyAyMDAwIGZvciByYXJlLCBhbmQgZ2l2ZXMgMnggYm9vc3QgdG8gdGhlIHJhbmdlCiAgICAvLyBhbmQgdmVyeS1yYXJlIGlzIDcwMDAgYW5kIGdpdmVzIDd4IHRoZSByYW5nZQogICAgdmFyIGJhc2VNdWx0aXBsaWVyID0gbW9kLnN0YXRzLkxJTktfUkFOR0VfTVVMVElQTElFUiAvIDEwMDA7CiAgICBib29zdCArPSBiYXNlTXVsdGlwbGllciAqIHNjYWxlW2ldOwogIH0pOwoKICByZXR1cm4gbGlua0FtcHMubGVuZ3RoID4gMCA/IGJvb3N0IDogMS4wOwp9OwoKLyoqCiAqIENhbGN1bGF0ZXMgdGhlIHBvdGVudGlhbCBBUCBnYWluIGZyb20gYXR0YWNraW5nIGEgcG9ydGFsLgogKgogKiBAZnVuY3Rpb24gZ2V0QXR0YWNrQXBHYWluCiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgcmVzb25hdG9yIGFuZCBvd25lcnNoaXAgaW5mb3JtYXRpb24uCiAqIEBwYXJhbSB7bnVtYmVyfSBmaWVsZENvdW50IC0gVGhlIG51bWJlciBvZiBmaWVsZHMgYXR0YWNoZWQgdG8gdGhlIHBvcnRhbC4KICogQHBhcmFtIHtudW1iZXJ9IGxpbmtDb3VudCAtIFRoZSBudW1iZXIgb2YgbGlua3MgYXR0YWNoZWQgdG8gdGhlIHBvcnRhbC4KICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGRldGFpbGluZyB2YXJpb3VzIGNvbXBvbmVudHMgb2YgQVAgZ2FpbiwgaW5jbHVkaW5nIHRvdGFscyBmb3IgZnJpZW5kbHkgYW5kIGVuZW15IGZhY3Rpb25zLgogKi8Kd2luZG93LmdldEF0dGFja0FwR2FpbiA9IGZ1bmN0aW9uIChkLCBmaWVsZENvdW50LCBsaW5rQ291bnQpIHsKICBpZiAoIWZpZWxkQ291bnQpIGZpZWxkQ291bnQgPSAwOwoKICB2YXIgcmVzb0NvdW50ID0gMDsKICB2YXIgbWF4UmVzb25hdG9ycyA9IHdpbmRvdy5NQVhfUkVTT19QRVJfUExBWUVSLnNsaWNlKDApOwogIHZhciBjdXJSZXNvbmF0b3JzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdOwoKICBmb3IgKGxldCBuID0gd2luZG93LlBMQVlFUi5sZXZlbCArIDE7IG4gPCA5OyBuKyspIHsKICAgIG1heFJlc29uYXRvcnNbbl0gPSAwOwogIH0KICAkLmVhY2goZC5yZXNvbmF0b3JzLCBmdW5jdGlvbiAoaW5kLCByZXNvKSB7CiAgICBpZiAoIXJlc28pIHJldHVybiB0cnVlOwogICAgcmVzb0NvdW50ICs9IDE7CiAgICB2YXIgcmVzbGV2ZWwgPSBwYXJzZUludChyZXNvLmxldmVsKTsKICAgIGlmIChyZXNvLm93bmVyID09PSB3aW5kb3cuUExBWUVSLm5pY2tuYW1lKSB7CiAgICAgIGlmIChtYXhSZXNvbmF0b3JzW3Jlc2xldmVsXSA+IDApIHsKICAgICAgICBtYXhSZXNvbmF0b3JzW3Jlc2xldmVsXSAtPSAxOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjdXJSZXNvbmF0b3JzW3Jlc2xldmVsXSArPSAxOwogICAgfQogIH0pOwoKICB2YXIgcmVzb0FwID0gcmVzb0NvdW50ICogd2luZG93LkRFU1RST1lfUkVTT05BVE9SOwogIHZhciBsaW5rQXAgPSBsaW5rQ291bnQgKiB3aW5kb3cuREVTVFJPWV9MSU5LOwogIHZhciBmaWVsZEFwID0gZmllbGRDb3VudCAqIHdpbmRvdy5ERVNUUk9ZX0ZJRUxEOwogIHZhciBkZXN0cm95QXAgPSByZXNvQXAgKyBsaW5rQXAgKyBmaWVsZEFwOwogIHZhciBjYXB0dXJlQXAgPSB3aW5kb3cuQ0FQVFVSRV9QT1JUQUwgKyA4ICogd2luZG93LkRFUExPWV9SRVNPTkFUT1IgKyB3aW5kb3cuQ09NUExFVElPTl9CT05VUzsKICB2YXIgZW5lbXlBcCA9IGRlc3Ryb3lBcCArIGNhcHR1cmVBcDsKICB2YXIgZGVwbG95Q291bnQgPSA4IC0gcmVzb0NvdW50OwogIHZhciBjb21wbGV0aW9uQXAgPSBkZXBsb3lDb3VudCA+IDAgPyB3aW5kb3cuQ09NUExFVElPTl9CT05VUyA6IDA7CiAgdmFyIHVwZ3JhZGVDb3VudCA9IDA7CiAgdmFyIHVwZ3JhZGVBdmFpbGFibGUgPSBtYXhSZXNvbmF0b3JzWzhdOwogIGZvciAobGV0IG4gPSA3OyBuID49IDA7IG4tLSkgewogICAgdXBncmFkZUNvdW50ICs9IGN1clJlc29uYXRvcnNbbl07CiAgICBpZiAodXBncmFkZUF2YWlsYWJsZSA8IHVwZ3JhZGVDb3VudCkgewogICAgICB1cGdyYWRlQ291bnQgLT0gdXBncmFkZUNvdW50IC0gdXBncmFkZUF2YWlsYWJsZTsKICAgIH0KICAgIHVwZ3JhZGVBdmFpbGFibGUgKz0gbWF4UmVzb25hdG9yc1tuXTsKICB9CiAgdmFyIGZyaWVuZGx5QXAgPSBkZXBsb3lDb3VudCAqIHdpbmRvdy5ERVBMT1lfUkVTT05BVE9SICsgdXBncmFkZUNvdW50ICogd2luZG93LlVQR1JBREVfQU5PVEhFUlNfUkVTT05BVE9SICsgY29tcGxldGlvbkFwOwogIHJldHVybiB7CiAgICBmcmllbmRseUFwOiBmcmllbmRseUFwLAogICAgZGVwbG95Q291bnQ6IGRlcGxveUNvdW50LAogICAgdXBncmFkZUNvdW50OiB1cGdyYWRlQ291bnQsCiAgICBlbmVteUFwOiBlbmVteUFwLAogICAgZGVzdHJveUFwOiBkZXN0cm95QXAsCiAgICByZXNvQXA6IHJlc29BcCwKICAgIGNhcHR1cmVBcDogY2FwdHVyZUFwLAogIH07Cn07CgovKioKICogQ29ycmVjdHMgdGhlIHBvcnRhbCBpbWFnZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgcHJvdG9jb2wgKGh0dHAvaHR0cHMpLgogKgogKiBAZnVuY3Rpb24gZml4UG9ydGFsSW1hZ2VVcmwKICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBvcmlnaW5hbCBpbWFnZSBVUkwuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb3JyZWN0ZWQgaW1hZ2UgVVJMLgogKi8Kd2luZG93LmZpeFBvcnRhbEltYWdlVXJsID0gZnVuY3Rpb24gKHVybCkgewogIGlmICh1cmwpIHsKICAgIGlmICh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonKSB7CiAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eaHR0cDpcL1wvLywgJy8vJyk7CiAgICB9CiAgICByZXR1cm4gdXJsOwogIH0gZWxzZSB7CiAgICByZXR1cm4gd2luZG93LkRFRkFVTFRfUE9SVEFMX0lNRzsKICB9Cn07CgovKioKICogUmV0dXJucyBhIGxpc3Qgb2YgcG9ydGFsIG1vZHMgZmlsdGVyZWQgYnkgYSBzcGVjaWZpYyB0eXBlLgogKgogKiBAZnVuY3Rpb24gZ2V0UG9ydGFsTW9kc0J5VHlwZQogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIG1vZCBpbmZvcm1hdGlvbi4KICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBtb2RzIHRvIGZpbHRlciAoZS5nLiwgJ1JFU19TSElFTEQnLCAnTElOS19BTVBMSUZJRVInKS4KICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiBtb2RzIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgdHlwZS4KICovCndpbmRvdy5nZXRQb3J0YWxNb2RzQnlUeXBlID0gZnVuY3Rpb24gKGQsIHR5cGUpIHsKICB2YXIgbW9kcyA9IFtdOwoKICB2YXIgdHlwZVRvU3RhdCA9IHsKICAgIFJFU19TSElFTEQ6ICdNSVRJR0FUSU9OJywKICAgIEZPUkNFX0FNUDogJ0ZPUkNFX0FNUExJRklFUicsCiAgICBUVVJSRVQ6ICdISVRfQk9OVVMnLCAvLyBhbmQvb3IgQVRUQUNLX0ZSRVFVRU5DWT8/CiAgICBIRUFUU0lOSzogJ0hBQ0tfU1BFRUQnLAogICAgTVVMVElIQUNLOiAnQlVSTk9VVF9JTlNVTEFUSU9OJywKICAgIExJTktfQU1QTElGSUVSOiAnTElOS19SQU5HRV9NVUxUSVBMSUVSJywKICAgIFVMVFJBX0xJTktfQU1QOiAnT1VUR09JTkdfTElOS1NfQk9OVVMnLCAvLyBhbmQvb3IgTElOS19ERUZFTlNFX0JPT1NUPz8KICB9OwoKICB2YXIgc3RhdCA9IHR5cGVUb1N0YXRbdHlwZV07CgogICQuZWFjaChkLm1vZHMgfHwgW10sIGZ1bmN0aW9uIChpLCBtb2QpIHsKICAgIGlmIChtb2QgJiYgT2JqZWN0Lmhhc093bihtb2Quc3RhdHMsIHN0YXQpKSBtb2RzLnB1c2gobW9kKTsKICB9KTsKCiAgLy8gc29ydGluZyBtb2RzIGJ5IHRoZSBzdGF0IGtlZXBzIGNvZGUgc2ltcGxlciwgd2hlbiBjYWxjdWxhdGluZyBjb21iaW5lZCBtb2QgZWZmZWN0cwogIG1vZHMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgcmV0dXJuIGIuc3RhdHNbc3RhdF0gLSBhLnN0YXRzW3N0YXRdOwogIH0pOwoKICByZXR1cm4gbW9kczsKfTsKCi8qKgogKiBDYWxjdWxhdGVzIHRoZSB0b3RhbCBtaXRpZ2F0aW9uIHByb3ZpZGVkIGJ5IHNoaWVsZHMgaW5zdGFsbGVkIG9uIGEgcG9ydGFsLgogKgogKiBAZnVuY3Rpb24gZ2V0UG9ydGFsU2hpZWxkTWl0aWdhdGlvbgogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIG1vZCBpbmZvcm1hdGlvbi4KICogQHJldHVybnMge251bWJlcn0gVGhlIHRvdGFsIG1pdGlnYXRpb24gdmFsdWUgZnJvbSBhbGwgc2hpZWxkcyBpbnN0YWxsZWQgb24gdGhlIHBvcnRhbC4KICovCndpbmRvdy5nZXRQb3J0YWxTaGllbGRNaXRpZ2F0aW9uID0gZnVuY3Rpb24gKGQpIHsKICB2YXIgc2hpZWxkcyA9IHdpbmRvdy5nZXRQb3J0YWxNb2RzQnlUeXBlKGQsICdSRVNfU0hJRUxEJyk7CgogIHZhciBtaXRpZ2F0aW9uID0gMDsKICAkLmVhY2goc2hpZWxkcywgZnVuY3Rpb24gKGksIHMpIHsKICAgIG1pdGlnYXRpb24gKz0gcGFyc2VJbnQocy5zdGF0cy5NSVRJR0FUSU9OKTsKICB9KTsKCiAgcmV0dXJuIG1pdGlnYXRpb247Cn07CgovKioKICogQ2FsY3VsYXRlcyB0aGUgbGluayBkZWZlbnNlIGJvb3N0IHByb3ZpZGVkIGJ5IGluc3RhbGxlZCBVbHRyYSBMaW5rIEFtcHMuCiAqCiAqIEBmdW5jdGlvbiBnZXRQb3J0YWxMaW5rRGVmZW5zZUJvb3N0CiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgbW9kIGluZm9ybWF0aW9uLgogKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgdG90YWwgbGluayBkZWZlbnNlIGJvb3N0IGZhY3Rvci4KICovCndpbmRvdy5nZXRQb3J0YWxMaW5rRGVmZW5zZUJvb3N0ID0gZnVuY3Rpb24gKGQpIHsKICB2YXIgdWx0cmFMaW5rQW1wcyA9IHdpbmRvdy5nZXRQb3J0YWxNb2RzQnlUeXBlKGQsICdVTFRSQV9MSU5LX0FNUCcpOwoKICB2YXIgbGlua0RlZmVuc2VCb29zdCA9IDE7CgogICQuZWFjaCh1bHRyYUxpbmtBbXBzLCBmdW5jdGlvbiAoaW5kZXgsIHVsdHJhTGlua0FtcCkgewogICAgbGlua0RlZmVuc2VCb29zdCAqPSBwYXJzZUludCh1bHRyYUxpbmtBbXAuc3RhdHMuTElOS19ERUZFTlNFX0JPT1NUKSAvIDEwMDA7CiAgfSk7CgogIHJldHVybiBNYXRoLnJvdW5kKDEwICogbGlua0RlZmVuc2VCb29zdCkgLyAxMDsKfTsKCi8qKgogKiBDYWxjdWxhdGVzIHRoZSBhZGRpdGlvbmFsIG1pdGlnYXRpb24gcHJvdmlkZWQgYnkgbGlua3MgYXR0YWNoZWQgdG8gYSBwb3J0YWwuCiAqCiAqIEBmdW5jdGlvbiBnZXRQb3J0YWxMaW5rc01pdGlnYXRpb24KICogQHBhcmFtIHtudW1iZXJ9IGxpbmtDb3VudCAtIFRoZSBudW1iZXIgb2YgbGlua3MgYXR0YWNoZWQgdG8gdGhlIHBvcnRhbC4KICogQHJldHVybnMge251bWJlcn0gVGhlIGFkZGl0aW9uYWwgbWl0aWdhdGlvbiB2YWx1ZSBwcm92aWRlZCBieSB0aGUgbGlua3MuCiAqLwp3aW5kb3cuZ2V0UG9ydGFsTGlua3NNaXRpZ2F0aW9uID0gZnVuY3Rpb24gKGxpbmtDb3VudCkgewogIHZhciBtaXRpZ2F0aW9uID0gTWF0aC5yb3VuZCgoNDAwIC8gOSkgKiBNYXRoLmF0YW4obGlua0NvdW50IC8gTWF0aC5FKSk7CiAgcmV0dXJuIG1pdGlnYXRpb247Cn07CgovKioKICogQ2FsY3VsYXRlcyBkZXRhaWxlZCBtaXRpZ2F0aW9uIGluZm9ybWF0aW9uIGZvciBhIHBvcnRhbCwgaW5jbHVkaW5nIGNvbnRyaWJ1dGlvbnMgZnJvbSBzaGllbGRzIGFuZCBsaW5rcy4KICoKICogQGZ1bmN0aW9uIGdldFBvcnRhbE1pdGlnYXRpb25EZXRhaWxzCiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgbW9kIGFuZCByZXNvbmF0b3IgaW5mb3JtYXRpb24uCiAqIEBwYXJhbSB7bnVtYmVyfSBsaW5rQ291bnQgLSBUaGUgbnVtYmVyIG9mIGxpbmtzIGF0dGFjaGVkIHRvIHRoZSBwb3J0YWwuCiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBkZXRhaWxpbmcgdmFyaW91cyBjb21wb25lbnRzIG9mIG1pdGlnYXRpb24uCiAqLwp3aW5kb3cuZ2V0UG9ydGFsTWl0aWdhdGlvbkRldGFpbHMgPSBmdW5jdGlvbiAoZCwgbGlua0NvdW50KSB7CiAgdmFyIGxpbmtEZWZlbnNlQm9vc3QgPSB3aW5kb3cuZ2V0UG9ydGFsTGlua0RlZmVuc2VCb29zdChkKTsKCiAgdmFyIG1pdGlnYXRpb24gPSB7CiAgICBzaGllbGRzOiB3aW5kb3cuZ2V0UG9ydGFsU2hpZWxkTWl0aWdhdGlvbihkKSwKICAgIGxpbmtzOiB3aW5kb3cuZ2V0UG9ydGFsTGlua3NNaXRpZ2F0aW9uKGxpbmtDb3VudCkgKiBsaW5rRGVmZW5zZUJvb3N0LAogICAgbGlua0RlZmVuc2VCb29zdDogbGlua0RlZmVuc2VCb29zdCwKICB9OwoKICAvLyBtaXRpZ2F0aW9uIGlzIGxpbWl0ZWQgdG8gOTUlIChhcyBjb25maXJtZWQgYnkgQnJhbmRvbiBCYWRnZXIgb24gRyspCiAgbWl0aWdhdGlvbi50b3RhbCA9IE1hdGgubWluKDk1LCBtaXRpZ2F0aW9uLnNoaWVsZHMgKyBtaXRpZ2F0aW9uLmxpbmtzKTsKCiAgdmFyIGV4Y2VzcyA9IG1pdGlnYXRpb24uc2hpZWxkcyArIG1pdGlnYXRpb24ubGlua3MgLSBtaXRpZ2F0aW9uLnRvdGFsOwogIG1pdGlnYXRpb24uZXhjZXNzID0gTWF0aC5yb3VuZCgxMCAqIGV4Y2VzcykgLyAxMDsKCiAgcmV0dXJuIG1pdGlnYXRpb247Cn07CgovKioKICogQ2FsY3VsYXRlcyB0aGUgbWF4aW11bSBudW1iZXIgb2Ygb3V0Z29pbmcgbGlua3MgdGhhdCBjYW4gYmUgY3JlYXRlZCBmcm9tIGEgcG9ydGFsLgogKgogKiBAZnVuY3Rpb24gZ2V0TWF4T3V0Z29pbmdMaW5rcwogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBwb3J0YWwgZGV0YWlsIG9iamVjdCBjb250YWluaW5nIG1vZCBpbmZvcm1hdGlvbi4KICogQHJldHVybnMge251bWJlcn0gVGhlIG1heGltdW0gbnVtYmVyIG9mIG91dGdvaW5nIGxpbmtzLgogKi8Kd2luZG93LmdldE1heE91dGdvaW5nTGlua3MgPSBmdW5jdGlvbiAoZCkgewogIHZhciBsaW5rQW1wcyA9IHdpbmRvdy5nZXRQb3J0YWxNb2RzQnlUeXBlKGQsICdVTFRSQV9MSU5LX0FNUCcpOwoKICB2YXIgbGlua3MgPSA4OwoKICBsaW5rQW1wcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2QpIHsKICAgIGxpbmtzICs9IHBhcnNlSW50KG1vZC5zdGF0cy5PVVRHT0lOR19MSU5LU19CT05VUyk7CiAgfSk7CgogIHJldHVybiBsaW5rczsKfTsKCi8qKgogKiBDYWxjdWxhdGVzIGhhY2stcmVsYXRlZCBkZXRhaWxzIG9mIGEgcG9ydGFsLCBzdWNoIGFzIGhhY2sgY29vbGRvd24gYW5kIGJ1cm5vdXQgdGltZS4KICoKICogQGZ1bmN0aW9uIGdldFBvcnRhbEhhY2tEZXRhaWxzCiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgbW9kIGluZm9ybWF0aW9uLgogKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyBoYWNrLXJlbGF0ZWQgZGV0YWlscyBsaWtlIGNvb2xkb3duIHRpbWUsIGhhY2sgY291bnQsIGFuZCBidXJub3V0IHRpbWUuCiAqLwp3aW5kb3cuZ2V0UG9ydGFsSGFja0RldGFpbHMgPSBmdW5jdGlvbiAoZCkgewogIHZhciBoZWF0c2lua3MgPSB3aW5kb3cuZ2V0UG9ydGFsTW9kc0J5VHlwZShkLCAnSEVBVFNJTksnKTsKICB2YXIgbXVsdGloYWNrcyA9IHdpbmRvdy5nZXRQb3J0YWxNb2RzQnlUeXBlKGQsICdNVUxUSUhBQ0snKTsKCiAgLy8gZmlyc3QgbW9kIG9mIHR5cGUgaXMgZnVsbHkgZWZmZWN0aXZlLCB0aGUgb3RoZXJzIGFyZSBvbmx5IDUwJSBlZmZlY3RpdmUKICB2YXIgZWZmZWN0aXZlbmVzc1JlZHVjdGlvbiA9IFsxLCAwLjUsIDAuNSwgMC41XTsKCiAgdmFyIGNvb2xkb3duVGltZSA9IHdpbmRvdy5CQVNFX0hBQ0tfQ09PTERPV047CgogICQuZWFjaChoZWF0c2lua3MsIGZ1bmN0aW9uIChpbmRleCwgbW9kKSB7CiAgICB2YXIgaGFja1NwZWVkID0gcGFyc2VJbnQobW9kLnN0YXRzLkhBQ0tfU1BFRUQpIC8gMTAwMDAwMDsKICAgIGNvb2xkb3duVGltZSA9IE1hdGgucm91bmQoY29vbGRvd25UaW1lICogKDEgLSBoYWNrU3BlZWQgKiBlZmZlY3RpdmVuZXNzUmVkdWN0aW9uW2luZGV4XSkpOwogIH0pOwoKICB2YXIgaGFja0NvdW50ID0gd2luZG93LkJBU0VfSEFDS19DT1VOVDsgLy8gZGVmYXVsdCBoYWNrcwoKICAkLmVhY2gobXVsdGloYWNrcywgZnVuY3Rpb24gKGluZGV4LCBtb2QpIHsKICAgIHZhciBleHRyYUhhY2tzID0gcGFyc2VJbnQobW9kLnN0YXRzLkJVUk5PVVRfSU5TVUxBVElPTik7CiAgICBoYWNrQ291bnQgPSBoYWNrQ291bnQgKyBleHRyYUhhY2tzICogZWZmZWN0aXZlbmVzc1JlZHVjdGlvbltpbmRleF07CiAgfSk7CgogIHJldHVybiB7IGNvb2xkb3duOiBjb29sZG93blRpbWUsIGhhY2tzOiBoYWNrQ291bnQsIGJ1cm5vdXQ6IGNvb2xkb3duVGltZSAqIChoYWNrQ291bnQgLSAxKSB9Owp9OwoKLyoqCiAqIENvbnZlcnRzIGRldGFpbGVkIHBvcnRhbCBpbmZvcm1hdGlvbiBpbnRvIGEgc3VtbWFyeSBmb3JtYXQgc2ltaWxhciB0byB0aGF0IHNlZW4gaW4gdGhlIG1hcCB0aWxlIGRhdGEuCiAqCiAqIEBmdW5jdGlvbiBnZXRQb3J0YWxTdW1tYXJ5RGF0YQogKiBAcGFyYW0ge09iamVjdH0gZCAtIFRoZSBkZXRhaWxlZCBwb3J0YWwgZGF0YS4KICogQHJldHVybnMge09iamVjdH0gQSBzdW1tYXJ5IG9mIHRoZSBwb3J0YWwgZGF0YSwgaW5jbHVkaW5nIGxldmVsLCB0aXRsZSwgaW1hZ2UsIHJlc29uYXRvciBjb3VudCwgaGVhbHRoLCBhbmQgdGVhbS4KICovCndpbmRvdy5nZXRQb3J0YWxTdW1tYXJ5RGF0YSA9IGZ1bmN0aW9uIChkKSB7CiAgLy8gTk9URTogdGhlIHN1bW1hcnkgZGF0YSByZXBvcnRzIHVuY2xhaW1lZCBwb3J0YWxzIGFzIGxldmVsIDEgLSBub3QgemVybyBhcyBlbHNld2hlcmUgaW4gSUlUQwogIHZhciBsZXZlbCA9IE1hdGguZmxvb3Iod2luZG93LmdldFBvcnRhbExldmVsKGQpKTsKICBpZiAobGV2ZWwgPT09IDApIGxldmVsID0gMTsgLy8gbmlhbnRpYyByZXR1cm5zIG5ldXRyYWwgcG9ydGFscyBhcyBsZXZlbCAxLCBub3QgMCBhcyB1c2VkIHRocm91Z2hvdXQgSUlUQyBlbHNld2hlcmUKCiAgdmFyIHJlc0NvdW50ID0gMDsKICBpZiAoZC5yZXNvbmF0b3JzKSB7CiAgICBmb3IgKHZhciB4IGluIGQucmVzb25hdG9ycykgewogICAgICBpZiAoZC5yZXNvbmF0b3JzW3hdKSByZXNDb3VudCsrOwogICAgfQogIH0KICB2YXIgbWF4RW5lcmd5ID0gd2luZG93LmdldFRvdGFsUG9ydGFsRW5lcmd5KGQpOwogIHZhciBjdXJFbmVyZ3kgPSB3aW5kb3cuZ2V0Q3VycmVudFBvcnRhbEVuZXJneShkKTsKICB2YXIgaGVhbHRoID0gbWF4RW5lcmd5ID4gMCA/IE1hdGguZmxvb3IoKGN1ckVuZXJneSAvIG1heEVuZXJneSkgKiAxMDApIDogMDsKCiAgcmV0dXJuIHsKICAgIGxldmVsOiBsZXZlbCwKICAgIHRpdGxlOiBkLnRpdGxlLAogICAgaW1hZ2U6IGQuaW1hZ2UsCiAgICByZXNDb3VudDogcmVzQ291bnQsCiAgICBsYXRFNjogZC5sYXRFNiwKICAgIGhlYWx0aDogaGVhbHRoLAogICAgdGVhbTogZC50ZWFtLAogICAgbG5nRTY6IGQubG5nRTYsCiAgICB0eXBlOiAncG9ydGFsJywKICB9Owp9OwoKLyoqCiAqIENhbGN1bGF0ZXMgdmFyaW91cyBhdHRhY2sgdmFsdWVzIG9mIGEgcG9ydGFsLCBpbmNsdWRpbmcgaGl0IGJvbnVzLCBmb3JjZSBhbXBsaWZpZXIsIGFuZCBhdHRhY2sgZnJlcXVlbmN5LgogKgogKiBAZnVuY3Rpb24gZ2V0UG9ydGFsQXR0YWNrVmFsdWVzCiAqIEBwYXJhbSB7T2JqZWN0fSBkIC0gVGhlIHBvcnRhbCBkZXRhaWwgb2JqZWN0IGNvbnRhaW5pbmcgbW9kIGluZm9ybWF0aW9uLgogKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyBhdHRhY2sgdmFsdWVzIHN1Y2ggYXMgaGl0IGJvbnVzLCBmb3JjZSBhbXBsaWZpZXIsIGFuZCBhdHRhY2sgZnJlcXVlbmN5LgogKi8Kd2luZG93LmdldFBvcnRhbEF0dGFja1ZhbHVlcyA9IGZ1bmN0aW9uIChkKSB7CiAgdmFyIGZvcmNlYW1wcyA9IHdpbmRvdy5nZXRQb3J0YWxNb2RzQnlUeXBlKGQsICdGT1JDRV9BTVAnKTsKICB2YXIgdHVycmV0cyA9IHdpbmRvdy5nZXRQb3J0YWxNb2RzQnlUeXBlKGQsICdUVVJSRVQnKTsKCiAgLy8gYXQgdGhlIHRpbWUgb2Ygd3JpdGluZywgb25seSByYXJlIGZvcmNlIGFtcHMgYW5kIHR1cnJldHMgaGF2ZSBiZWVuIHNlZW4gaW4gdGhlIHdpbGQsIHNvIHRoZXJlJ3MgYSBsaXR0bGUgZ3Vlc3N3b3JrCiAgLy8gYXQgaG93IHRoZSBzdGF0cyB3b3JrIGFuZCBjb21iaW5lCiAgLy8gYWxnb3JpdGhtIGhhcyBiZWVuIGNvbXBpZWQgZnJvbSBnZXRMaW5rQW1wUmFuZ2VCb29zdAogIC8vIEZJWE1FOiBvbmx5IGV4dHJhY3Qgc3RhdHMgYW5kIHB1dCB0aGUgY2FsY3VsYXRpb24gaW4gYSBtZXRob2QgdG8gYmUgdXNlZCBmb3IgbGluayByYW5nZSwgZm9yY2UgYW1wbGlmaWVyIGFuZCBhdHRhY2sKICAvLyBmcmVxdWVuY3kKICAvLyBub3RlOiBzY2FubmVyIHNob3dzIHJvdW5kZWQgdmFsdWVzIChhZGRpbmcgYSBzZWNvbmQgRkEgc2hvd3M6IDIuNXgrMC4yeD0yLjh4LCB3aGljaCBzaG91bGQgYmUgMi41eCswLjI1eD0yLjc1eCkKCiAgLy8gYW1wbGlmaWVyIHNjYWxlOiBmaXJzdCBpcyBmdWxsLCBzZWNvbmQgYSBxdWFydGVyLCB0aGUgbGFzdCB0d28gYW4gZWlnaHRoCiAgdmFyIHNjYWxlID0gWzEuMCwgMC4yNSwgMC4xMjUsIDAuMTI1XTsKCiAgdmFyIGF0dGFja1ZhbHVlcyA9IHsKICAgIGhpdF9ib251czogMCwKICAgIGZvcmNlX2FtcGxpZmllcjogMCwKICAgIGF0dGFja19mcmVxdWVuY3k6IDAsCiAgfTsKCiAgZm9yY2VhbXBzLmZvckVhY2goZnVuY3Rpb24gKG1vZCwgaSkgewogICAgLy8gZm9yY2UgYW1wIHN0YXQgRk9SQ0VfQU1QTElGSUVSIGlzIDIwMDAgZm9yIHJhcmUsIGFuZCBnaXZlcyAyeCBib29zdCB0byB0aGUgcmFuZ2UKICAgIHZhciBiYXNlTXVsdGlwbGllciA9IG1vZC5zdGF0cy5GT1JDRV9BTVBMSUZJRVIgLyAxMDAwOwogICAgYXR0YWNrVmFsdWVzLmZvcmNlX2FtcGxpZmllciArPSBiYXNlTXVsdGlwbGllciAqIHNjYWxlW2ldOwogIH0pOwoKICB0dXJyZXRzLmZvckVhY2goZnVuY3Rpb24gKG1vZCwgaSkgewogICAgLy8gdHVycmV0IHN0YXQgQVRUQUNLX0ZSRVFVRU5DWSBpcyAyMDAwIGZvciByYXJlLCBhbmQgZ2l2ZXMgMnggYm9vc3QgdG8gdGhlIHJhbmdlCiAgICB2YXIgYmFzZU11bHRpcGxpZXIgPSBtb2Quc3RhdHMuQVRUQUNLX0ZSRVFVRU5DWSAvIDEwMDA7CiAgICBhdHRhY2tWYWx1ZXMuYXR0YWNrX2ZyZXF1ZW5jeSArPSBiYXNlTXVsdGlwbGllciAqIHNjYWxlW2ldOwoKICAgIGF0dGFja1ZhbHVlcy5oaXRfYm9udXMgKz0gbW9kLnN0YXRzLkhJVF9CT05VUyAvIDEwMDAwOwogIH0pOwoKICByZXR1cm4gYXR0YWNrVmFsdWVzOwp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogcG9ydGFsX21hcmtlci5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3BvcnRhbF9tYXJrZXInKTsKLyogZ2xvYmFsIElJVEMsIEwsIGxvZyAtLSBlc2xpbnQgKi8KCi8qKgogKiBAZmlsZSBUaGlzIGZpbGUgY29udGFpbnMgdGhlIGNvZGUgcmVsYXRlZCB0byBjcmVhdGluZyBhbmQgdXBkYXRpbmcgcG9ydGFsIG1hcmtlcnMgb24gdGhlIG1hcC4KICogQG1vZHVsZSBwb3J0YWxfbWFya2VyCiAqLwoKLy8gcG9ydGFsIGhvb2tzCmZ1bmN0aW9uIGhhbmRsZXJfcG9ydGFsX2NsaWNrKGUpIHsKICB3aW5kb3cuc2VsZWN0UG9ydGFsKGUudGFyZ2V0Lm9wdGlvbnMuZ3VpZCwgZS50eXBlKTsKICB3aW5kb3cucmVuZGVyUG9ydGFsRGV0YWlscyhlLnRhcmdldC5vcHRpb25zLmd1aWQpOwp9CgpmdW5jdGlvbiBoYW5kbGVyX3BvcnRhbF9kYmxjbGljayhlKSB7CiAgd2luZG93LnNlbGVjdFBvcnRhbChlLnRhcmdldC5vcHRpb25zLmd1aWQsIGUudHlwZSk7CiAgd2luZG93LnJlbmRlclBvcnRhbERldGFpbHMoZS50YXJnZXQub3B0aW9ucy5ndWlkKTsKICB3aW5kb3cubWFwLnNldFZpZXcoZS50YXJnZXQuZ2V0TGF0TG5nKCksIHdpbmRvdy5ERUZBVUxUX1pPT00pOwp9CgpmdW5jdGlvbiBoYW5kbGVyX3BvcnRhbF9jb250ZXh0bWVudShlKSB7CiAgd2luZG93LnNlbGVjdFBvcnRhbChlLnRhcmdldC5vcHRpb25zLmd1aWQsIGUudHlwZSk7CiAgd2luZG93LnJlbmRlclBvcnRhbERldGFpbHMoZS50YXJnZXQub3B0aW9ucy5ndWlkKTsKICBpZiAod2luZG93LmlzU21hcnRwaG9uZSgpKSB7CiAgICB3aW5kb3cuc2hvdygnaW5mbycpOwogIH0gZWxzZSBpZiAoISQoJyNzY3JvbGx3cmFwcGVyJykuaXMoJzp2aXNpYmxlJykpIHsKICAgICQoJyNzaWRlYmFydG9nZ2xlJykuY2xpY2soKTsKICB9Cn0KCkwuUG9ydGFsTWFya2VyID0gTC5DaXJjbGVNYXJrZXIuZXh0ZW5kKHsKICBvcHRpb25zOiB7fSwKCiAgc3RhdGljczogewogICAgLy8gYmFzZSBzdHlsZQogICAgcG9ydGFsQmFzZVN0eWxlOiB7CiAgICAgIHN0cm9rZTogdHJ1ZSwKICAgICAgb3BhY2l0eTogMSwKICAgICAgZmlsbDogdHJ1ZSwKICAgICAgZmlsbE9wYWNpdHk6IDAuNSwKICAgICAgaW50ZXJhY3RpdmU6IHRydWUsCiAgICB9LAogICAgLy8gcGxhY2Vob2xkZXIgc3R5bGUKICAgIHBsYWNlaG9sZGVyU3R5bGU6IHsKICAgICAgZGFzaEFycmF5OiAnMSwyJywKICAgICAgd2VpZ2h0OiAxLAogICAgfSwKICAgIC8vIHBvcnRhbCBsZXZlbCAgIDAgIDEgIDIgIDMgIDQgIDUgIDYgIDcgIDgKICAgIExFVkVMX1RPX1dFSUdIVDogWzIsIDIsIDIsIDIsIDIsIDMsIDMsIDQsIDRdLAogICAgTEVWRUxfVE9fUkFESVVTOiBbNywgNywgNywgNywgOCwgOCwgOSwgMTAsIDExXSwKICB9LAoKICBpbml0aWFsaXplOiBmdW5jdGlvbiAobGF0bG5nLCBkYXRhKSB7CiAgICBMLkNpcmNsZU1hcmtlci5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIGxhdGxuZyk7CiAgICB0aGlzLl9zZWxlY3RlZCA9IGRhdGEuZ3VpZCA9PT0gd2luZG93LnNlbGVjdGVkUG9ydGFsOwogICAgdGhpcy51cGRhdGVEZXRhaWxzKGRhdGEpOwoKICAgIHRoaXMub24oJ2NsaWNrJywgaGFuZGxlcl9wb3J0YWxfY2xpY2spOwogICAgdGhpcy5vbignZGJsY2xpY2snLCBoYW5kbGVyX3BvcnRhbF9kYmxjbGljayk7CiAgICB0aGlzLm9uKCdjb250ZXh0bWVudScsIGhhbmRsZXJfcG9ydGFsX2NvbnRleHRtZW51KTsKICB9LAoKICB3aWxsVXBkYXRlOiBmdW5jdGlvbiAoZGV0YWlscykgewogICAgLy8gZGV0YWlscyBhcmUgZnJvbSBhIHBsYWNlaG9sZGVyCiAgICBpZiAoZGV0YWlscy5sZXZlbCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIC8vIGlmIHRlYW0gZGlmZmVycyBhbmQgY29ycmVzcG9uZGluZyBsaW5rIGlzIG1vcmUgcmVjZW50IChpZ25vcmUgZmllbGQpCiAgICAgIHJldHVybiB0aGlzLl9kZXRhaWxzLnRpbWVzdGFtcCA8IGRldGFpbHMudGltZXN0YW1wICYmIHRoaXMuX2RldGFpbHMudGVhbSAhPT0gZGV0YWlscy50ZWFtOwogICAgfQogICAgLy8gbW9yZSByZWNlbnQgdGltZXN0YW1wLCB0aGlzIG9jY3VycyB3aGVuIHRoZSBkYXRhIGhhcyBjaGFuZ2VkIGJlY2F1c2Ugb2Y6CiAgICAvLyAgLSByZXNvbmF0b3IgZGVwbG95L3VwZ3JhZGUKICAgIC8vICAtIG1vZCBkZXBsb3kKICAgIC8vICAtIHJlY2hhcmdlL2RhbWFnZS9kZWNheQogICAgLy8gIC0gcG9ydGFsIGVkaXQgKHRpdGxlLCBsb2NhdGlvbiwgcG9ydGFsIG1haW4gcGljdHVyZSkKICAgIGlmICh0aGlzLl9kZXRhaWxzLnRpbWVzdGFtcCA8IGRldGFpbHMudGltZXN0YW1wKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgLy8gY3VycmVudCBtYXJrZXIgaXMgYSBwbGFjZWhvbGRlciwgYW5kIGRldGFpbHMgaXMgcmVhbCBkYXRhCiAgICBpZiAodGhpcy5pc1BsYWNlaG9sZGVyKCkgJiYgdGhpcy5fZGV0YWlscy50ZWFtID09PSBkZXRhaWxzLnRlYW0pIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAvLyBldmVuIGlmIHdlIGdldCBoaXN0b3J5IHRoYXQgd2FzIG1pc3NpbmcgPyBpcyBpdCBldmVuIHBvc3NpYmxlID8KICAgIGlmICh0aGlzLl9kZXRhaWxzLnRpbWVzdGFtcCA+IGRldGFpbHMudGltZXN0YW1wKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICAvLyB0aGlzLl9kZXRhaWxzLnRpbWVzdGFtcCA9PT0gZGV0YWlscy50aW1lc3RhbXAKCiAgICAvLyBnZXQgbmV3IGhpc3RvcnkKICAgIGlmIChkZXRhaWxzLmhpc3RvcnkpIHsKICAgICAgaWYgKCF0aGlzLl9kZXRhaWxzLmhpc3RvcnkpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfQogICAgICBpZiAodGhpcy5fZGV0YWlscy5oaXN0b3J5Ll9yYXcgIT09IGRldGFpbHMuaGlzdG9yeS5fcmF3KSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KCiAgICAvLyBnZXQgZGV0YWlscyBwb3J0YWwgZGF0YQogICAgaWYgKCF0aGlzLl9kZXRhaWxzLm1vZHMgJiYgZGV0YWlscy5tb2RzKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIHJldHVybiBmYWxzZTsKICB9LAoKICB1cGRhdGVEZXRhaWxzOiBmdW5jdGlvbiAoZGV0YWlscykgewogICAgaWYgKHRoaXMuX2RldGFpbHMpIHsKICAgICAgLy8gcG9ydGFsIGhhcyBiZWVuIG1vdmVkCiAgICAgIGlmICh0aGlzLl9kZXRhaWxzLmxhdEU2ICE9PSBkZXRhaWxzLmxhdEU2IHx8IHRoaXMuX2RldGFpbHMubG5nRTYgIT09IGRldGFpbHMubG5nRTYpIHsKICAgICAgICB0aGlzLnNldExhdExuZyhMLmxhdExuZyhkZXRhaWxzLmxhdEU2IC8gMWU2LCBkZXRhaWxzLmxuZ0U2IC8gMWU2KSk7CiAgICAgIH0KCiAgICAgIC8vIGNvcmUgZGF0YSBmcm9tIGEgcGxhY2Vob2xkZXIKICAgICAgaWYgKGRldGFpbHMubGV2ZWwgPT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIGlmIHRlYW0gaGFzIGNoYW5nZWQKICAgICAgICBpZiAodGhpcy5fZGV0YWlscy50aW1lc3RhbXAgPCBkZXRhaWxzLnRpbWVzdGFtcCAmJiB0aGlzLl9kZXRhaWxzLnRlYW0gIT09IGRldGFpbHMudGVhbSkgewogICAgICAgICAgLy8ga2VlcCBoaXN0b3J5LCB0aXRsZSwgaW1hZ2UKICAgICAgICAgIGRldGFpbHMudGl0bGUgPSB0aGlzLl9kZXRhaWxzLnRpdGxlOwogICAgICAgICAgZGV0YWlscy5pbWFnZSA9IHRoaXMuX2RldGFpbHMuaW1hZ2U7CiAgICAgICAgICBkZXRhaWxzLmhpc3RvcnkgPSB0aGlzLl9kZXRhaWxzLmhpc3Rvcnk7CiAgICAgICAgICB0aGlzLl9kZXRhaWxzID0gZGV0YWlsczsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodGhpcy5fZGV0YWlscy50aW1lc3RhbXAgPT09IGRldGFpbHMudGltZXN0YW1wKSB7CiAgICAgICAgLy8gd2UgZ290IG1vcmUgZGV0YWlscyAoY29yZS9zdW1tYXJ5IC0+IHN1bW1hcnkvZGV0YWlsZWQvZXh0ZW5kZWQpCiAgICAgICAgdmFyIGxvY2FsVGhpcyA9IHRoaXM7CiAgICAgICAgWwogICAgICAgICAgJ2xldmVsJywKICAgICAgICAgICdoZWFsdGgnLAogICAgICAgICAgJ3Jlc0NvdW50JywKICAgICAgICAgICdpbWFnZScsCiAgICAgICAgICAndGl0bGUnLAogICAgICAgICAgJ29ybmFtZW50cycsCiAgICAgICAgICAnbWlzc2lvbicsCiAgICAgICAgICAnbWlzc2lvbjUwcGx1cycsCiAgICAgICAgICAnYXJ0aWZhY3RCcmllZicsCiAgICAgICAgICAnbW9kcycsCiAgICAgICAgICAncmVzb25hdG9ycycsCiAgICAgICAgICAnb3duZXInLAogICAgICAgICAgJ2FydGlmYWN0RGV0YWlsJywKICAgICAgICBdLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsKICAgICAgICAgIGlmIChkZXRhaWxzW3Byb3BdKSBsb2NhbFRoaXMuX2RldGFpbHNbcHJvcF0gPSBkZXRhaWxzW3Byb3BdOwogICAgICAgIH0pOwogICAgICAgIC8vIHNtYXJ0ZXIgdXBkYXRlIGZvciBoaXN0b3J5IChjYXVzZSBpdCdzIG1pc3Npbmcgc29tZXRpbWVzKQogICAgICAgIGlmIChkZXRhaWxzLmhpc3RvcnkpIHsKICAgICAgICAgIGlmICghdGhpcy5fZGV0YWlscy5oaXN0b3J5KSB7CiAgICAgICAgICAgIHRoaXMuX2RldGFpbHMuaGlzdG9yeSA9IGRldGFpbHMuaGlzdG9yeTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0aGlzLl9kZXRhaWxzLmhpc3RvcnkuX3JhdyAmJiBkZXRhaWxzLmhpc3RvcnkuX3JhdyAhPT0gdGhpcy5fZGV0YWlscy5oaXN0b3J5Ll9yYXcpIHsKICAgICAgICAgICAgICBsb2cud2FybignbmV3IHBvcnRhbCBkYXRhIGhhcyBsb3N0IHNvbWUgaGlzdG9yeScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuX2RldGFpbHMuaGlzdG9yeS5fcmF3IHw9IGRldGFpbHMuaGlzdG9yeS5fcmF3OwogICAgICAgICAgICBbJ3Zpc2l0ZWQnLCAnY2FwdHVyZWQnLCAnc2NvdXRDb250cm9sbGVkJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgewogICAgICAgICAgICAgIGxvY2FsVGhpcy5fZGV0YWlscy5oaXN0b3J5W3Byb3BdIHx8PSBkZXRhaWxzLmhpc3RvcnlbcHJvcF07CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBMRUdBQ1kgLSBUTyBCRSBSRU1PVkVEIEFUIFNPTUUgUE9JTlQhIHVzZSAuZ3VpZCwgLnRpbWVzdGFtcCBhbmQgLmRhdGEgaW5zdGVhZAogICAgICAgIHRoaXMuX2RldGFpbHMuZW50ID0gZGV0YWlscy5lbnQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gcGVybWFuZW50IGRhdGEgKGhpc3Rvcnkgb25seSkKICAgICAgICBpZiAoIWRldGFpbHMuaGlzdG9yeSkgewogICAgICAgICAgZGV0YWlscy5oaXN0b3J5ID0gdGhpcy5fZGV0YWlscy5oaXN0b3J5OwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fZGV0YWlscyA9IGRldGFpbHM7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuX2RldGFpbHMgPSBkZXRhaWxzOwogICAgfQoKICAgIHRoaXMuX2xldmVsID0gcGFyc2VJbnQodGhpcy5fZGV0YWlscy5sZXZlbCkgfHwgMDsKICAgIHRoaXMuX3RlYW0gPSBJSVRDLnV0aWxzLmdldFRlYW1JZCh0aGlzLl9kZXRhaWxzLnRlYW0pOwoKICAgIC8vIHRoZSBkYXRhIHJldHVybnMgdW5jbGFpbWVkIHBvcnRhbHMgYXMgbGV2ZWwgMSAtIGJ1dCBJSVRDIHdhbnRzIHRoZW0gdHJlYXRlZCBhcyBsZXZlbCAwCiAgICBpZiAodGhpcy5fdGVhbSA9PT0gd2luZG93LlRFQU1fTk9ORSkgewogICAgICB0aGlzLl9sZXZlbCA9IDA7CiAgICB9CgogICAgLy8gY29tcGF0aWJpbGl0eQogICAgdmFyIGRhdGFPcHRpb25zID0gewogICAgICBndWlkOiB0aGlzLl9kZXRhaWxzLmd1aWQsCiAgICAgIGxldmVsOiB0aGlzLl9sZXZlbCwKICAgICAgdGVhbTogdGhpcy5fdGVhbSwKICAgICAgZW50OiB0aGlzLl9kZXRhaWxzLmVudCwgLy8gTEVHQUNZIC0gVE8gQkUgUkVNT1ZFRCBBVCBTT01FIFBPSU5UISB1c2UgLmd1aWQsIC50aW1lc3RhbXAgYW5kIC5kYXRhIGluc3RlYWQKICAgICAgdGltZXN0YW1wOiB0aGlzLl9kZXRhaWxzLnRpbWVzdGFtcCwKICAgICAgZGF0YTogdGhpcy5fZGV0YWlscywKICAgIH07CiAgICBMLnNldE9wdGlvbnModGhpcywgZGF0YU9wdGlvbnMpOwoKICAgIHRoaXMuc2V0U2VsZWN0ZWQoKTsKICAgIGlmICh0aGlzLmhhc0Z1bGxEZXRhaWxzKCkpIHsKICAgICAgd2luZG93LnBvcnRhbERldGFpbC5zdG9yZSh0aGlzLm9wdGlvbnMuZ3VpZCwgdGhpcy5fZGV0YWlscyk7CiAgICB9CiAgfSwKCiAgZ2V0RGV0YWlsczogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2RldGFpbHM7CiAgfSwKCiAgaXNQbGFjZWhvbGRlcjogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2RldGFpbHMubGV2ZWwgPT09IHVuZGVmaW5lZDsKICB9LAoKICBoYXNGdWxsRGV0YWlsczogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICEhdGhpcy5fZGV0YWlscy5tb2RzOwogIH0sCgogIHNldFN0eWxlOiBmdW5jdGlvbiAoc3R5bGUpIHsKICAgIC8vIHN0dWIgZm9yIGhpZ2hsaWdodGVycwogICAgTC5VdGlsLnNldE9wdGlvbnModGhpcywgc3R5bGUpOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgc2V0TWFya2VyU3R5bGU6IGZ1bmN0aW9uIChzdHlsZSkgewogICAgdmFyIHN0eWxlT3B0aW9ucyA9IEwuVXRpbC5leHRlbmQodGhpcy5fc3R5bGUoKSwgc3R5bGUpOwogICAgTC5VdGlsLnNldE9wdGlvbnModGhpcywgc3R5bGVPcHRpb25zKTsKCiAgICBMLlV0aWwuc2V0T3B0aW9ucyh0aGlzLCB3aW5kb3cuaGlnaGxpZ2h0UG9ydGFsKHRoaXMpKTsKCiAgICB2YXIgc2VsZWN0ZWQgPSBMLmV4dGVuZCh7IHJhZGl1czogdGhpcy5vcHRpb25zLnJhZGl1cyB9LCB0aGlzLl9zZWxlY3RlZCAmJiB7IGNvbG9yOiB3aW5kb3cuQ09MT1JfU0VMRUNURURfUE9SVEFMIH0pOwogICAgcmV0dXJuIEwuQ2lyY2xlTWFya2VyLnByb3RvdHlwZS5zZXRTdHlsZS5jYWxsKHRoaXMsIHNlbGVjdGVkKTsKICB9LAoKICBzZXRTZWxlY3RlZDogZnVuY3Rpb24gKHNlbGVjdGVkKSB7CiAgICBpZiAoc2VsZWN0ZWQgPT09IGZhbHNlKSB7CiAgICAgIHRoaXMuX3NlbGVjdGVkID0gZmFsc2U7CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9zZWxlY3RlZCA9IHRoaXMuX3NlbGVjdGVkIHx8IHNlbGVjdGVkOwogICAgfQoKICAgIHRoaXMuc2V0TWFya2VyU3R5bGUoKTsKCiAgICBpZiAodGhpcy5fc2VsZWN0ZWQgJiYgd2luZG93Lm1hcC5oYXNMYXllcih0aGlzKSkgewogICAgICB0aGlzLmJyaW5nVG9Gcm9udCgpOwogICAgfQogIH0sCgogIF9zdHlsZTogZnVuY3Rpb24gKCkgewogICAgdmFyIGRhc2hBcnJheSA9IG51bGw7CiAgICAvLyBkYXNoZWQgb3V0bGluZSBmb3IgcGxhY2Vob2xkZXIgcG9ydGFscwogICAgaWYgKHRoaXMuaXNQbGFjZWhvbGRlcigpKSB7CiAgICAgIGRhc2hBcnJheSA9IEwuUG9ydGFsTWFya2VyLnBsYWNlaG9sZGVyU3R5bGUuZGFzaEFycmF5OwogICAgfQoKICAgIHJldHVybiBMLmV4dGVuZCh0aGlzLl9zY2FsZSgpLCBMLlBvcnRhbE1hcmtlci5wb3J0YWxCYXNlU3R5bGUsIHsKICAgICAgY29sb3I6IHdpbmRvdy5DT0xPUlNbdGhpcy5fdGVhbV0sCiAgICAgIGZpbGxDb2xvcjogd2luZG93LkNPTE9SU1t0aGlzLl90ZWFtXSwKICAgICAgZGFzaEFycmF5OiBkYXNoQXJyYXksCiAgICB9KTsKICB9LAoKICBfc2NhbGU6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY2FsZSA9IHdpbmRvdy5wb3J0YWxNYXJrZXJTY2FsZSgpOwoKICAgIHZhciBsZXZlbCA9IE1hdGguZmxvb3IodGhpcy5fbGV2ZWwgfHwgMCk7CgogICAgdmFyIGx2bFdlaWdodCA9IEwuUG9ydGFsTWFya2VyLkxFVkVMX1RPX1dFSUdIVFtsZXZlbF0gKiBNYXRoLnNxcnQoc2NhbGUpOwogICAgdmFyIGx2bFJhZGl1cyA9IEwuUG9ydGFsTWFya2VyLkxFVkVMX1RPX1JBRElVU1tsZXZlbF0gKiBzY2FsZTsKCiAgICAvLyB0aGlubmVyIG91dGxpbmUgZm9yIHBsYWNlaG9sZGVyIHBvcnRhbHMKICAgIGlmICh0aGlzLmlzUGxhY2Vob2xkZXIoKSkgewogICAgICBsdmxXZWlnaHQgPSBMLlBvcnRhbE1hcmtlci5wbGFjZWhvbGRlclN0eWxlLndlaWdodDsKICAgIH0KCiAgICByZXR1cm4gewogICAgICByYWRpdXM6IGx2bFJhZGl1cywKICAgICAgd2VpZ2h0OiBsdmxXZWlnaHQsCiAgICB9OwogIH0sCn0pOwoKLyoqCiAqIENhbGN1bGF0ZXMgdGhlIHNjYWxlIG9mIHBvcnRhbCBtYXJrZXJzIGJhc2VkIG9uIHRoZSBjdXJyZW50IHpvb20gbGV2ZWwgb2YgdGhlIG1hcC4KICoKICogQGZ1bmN0aW9uIHBvcnRhbE1hcmtlclNjYWxlCiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzY2FsZSBmYWN0b3IgZm9yIHBvcnRhbCBtYXJrZXJzLgogKi8Kd2luZG93LnBvcnRhbE1hcmtlclNjYWxlID0gZnVuY3Rpb24gKCkgewogIHZhciB6b29tID0gd2luZG93Lm1hcC5nZXRab29tKCk7CiAgaWYgKEwuQnJvd3Nlci5tb2JpbGUpIHJldHVybiB6b29tID49IDE2ID8gMS41IDogem9vbSA+PSAxNCA/IDEuMiA6IHpvb20gPj0gMTEgPyAxLjAgOiB6b29tID49IDggPyAwLjY1IDogMC41OwogIGVsc2UgcmV0dXJuIHpvb20gPj0gMTQgPyAxIDogem9vbSA+PSAxMSA/IDAuOCA6IHpvb20gPj0gOCA/IDAuNjUgOiAwLjU7Cn07CgovKioKICogQ3JlYXRlcyBhIG5ldyBwb3J0YWwgbWFya2VyIG9uIHRoZSBtYXAuCiAqCiAqIEBmdW5jdGlvbiBjcmVhdGVNYXJrZXIKICogQHBhcmFtIHtMLkxhdExuZ30gbGF0bG5nIC0gVGhlIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgd2hlcmUgdGhlIG1hcmtlciB3aWxsIGJlIHBsYWNlZC4KICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBUaGUgSUlUQy1zcGVjaWZpYyBlbnRpdHkgZGF0YSB0byBiZSBzdG9yZWQgaW4gdGhlIG1hcmtlciBvcHRpb25zLgogKiBAcmV0dXJucyB7TC5Qb3J0YWxNYXJrZXJ9IEEgTGVhZmxldCBjaXJjbGUgbWFya2VyIHJlcHJlc2VudGluZyB0aGUgcG9ydGFsLgogKi8Kd2luZG93LmNyZWF0ZU1hcmtlciA9IGZ1bmN0aW9uIChsYXRsbmcsIGRhdGEpIHsKICByZXR1cm4gbmV3IEwuUG9ydGFsTWFya2VyKGxhdGxuZywgZGF0YSk7Cn07CgovKioKICogU2V0cyB0aGUgc3R5bGUgb2YgYSBwb3J0YWwgbWFya2VyLCBpbmNsdWRpbmcgb3B0aW9ucyBmb3Igd2hlbiB0aGUgcG9ydGFsIGlzIHNlbGVjdGVkLgogKgogKiBAZnVuY3Rpb24gc2V0TWFya2VyU3R5bGUKICogQHBhcmFtIHtMLlBvcnRhbE1hcmtlcn0gbWFya2VyIC0gVGhlIHBvcnRhbCBtYXJrZXIgd2hvc2Ugc3R5bGUgd2lsbCBiZSBzZXQuCiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2VsZWN0ZWQgLSBJbmRpY2F0ZXMgaWYgdGhlIHBvcnRhbCBpcyBzZWxlY3RlZC4KICovCndpbmRvdy5zZXRNYXJrZXJTdHlsZSA9IGZ1bmN0aW9uIChtYXJrZXIsIHNlbGVjdGVkKSB7CiAgbWFya2VyLnNldFNlbGVjdGVkKHNlbGVjdGVkKTsKfTsKCi8qKgogKiBEZXRlcm1pbmVzIHRoZSBzdHlsZSBvcHRpb25zIGZvciBhIHBvcnRhbCBtYXJrZXIgYmFzZWQgb24gaXRzIGRldGFpbHMuCiAqCiAqIEBmdW5jdGlvbiBnZXRNYXJrZXJTdHlsZU9wdGlvbnMKICogQHBhcmFtIHtPYmplY3R9IGRldGFpbHMgLSBEZXRhaWxzIG9mIHRoZSBwb3J0YWwsIGluY2x1ZGluZyB0ZWFtIGFuZCBsZXZlbC4KICogQHJldHVybnMge09iamVjdH0gU3R5bGUgb3B0aW9ucyBmb3IgdGhlIHBvcnRhbCBtYXJrZXIuCiAqLwp3aW5kb3cuZ2V0TWFya2VyU3R5bGVPcHRpb25zID0gZnVuY3Rpb24gKGRldGFpbHMpIHsKICB2YXIgc2NhbGUgPSB3aW5kb3cucG9ydGFsTWFya2VyU2NhbGUoKTsKCiAgdmFyIGxldmVsID0gTWF0aC5mbG9vcihkZXRhaWxzLmxldmVsIHx8IDApOwoKICB2YXIgbHZsV2VpZ2h0ID0gTC5Qb3J0YWxNYXJrZXIuTEVWRUxfVE9fV0VJR0hUW2xldmVsXSAqIE1hdGguc3FydChzY2FsZSk7CiAgdmFyIGx2bFJhZGl1cyA9IEwuUG9ydGFsTWFya2VyLkxFVkVMX1RPX1JBRElVU1tsZXZlbF0gKiBzY2FsZTsKCiAgdmFyIGRhc2hBcnJheSA9IG51bGw7CiAgLy8gdGhpbm5lciBhbmQgZGFzaGVkIG91dGxpbmUgZm9yIHBsYWNlaG9sZGVyIHBvcnRhbHMKICBpZiAoZGV0YWlscy50ZWFtICE9PSB3aW5kb3cuVEVBTV9OT05FICYmIGxldmVsID09PSAwKSB7CiAgICBsdmxXZWlnaHQgPSBMLlBvcnRhbE1hcmtlci5wbGFjZWhvbGRlclN0eWxlLndlaWdodDsKICAgIGRhc2hBcnJheSA9IEwuUG9ydGFsTWFya2VyLnBsYWNlaG9sZGVyU3R5bGUuZGFzaEFycmF5OwogIH0KCiAgdmFyIG9wdGlvbnMgPSBMLmV4dGVuZCgKICAgIHsKICAgICAgcmFkaXVzOiBsdmxSYWRpdXMsCiAgICAgIHdlaWdodDogbHZsV2VpZ2h0LAogICAgfSwKICAgIEwuUG9ydGFsTWFya2VyLnBvcnRhbEJhc2VTdHlsZSwKICAgIHsKICAgICAgY29sb3I6IHdpbmRvdy5DT0xPUlNbZGV0YWlscy50ZWFtXSwKICAgICAgZmlsbENvbG9yOiB3aW5kb3cuQ09MT1JTW2RldGFpbHMudGVhbV0sCiAgICAgIGRhc2hBcnJheTogZGFzaEFycmF5LAogICAgfQogICk7CgogIHJldHVybiBvcHRpb25zOwp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogcmVkZWVtaW5nLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygncmVkZWVtaW5nJyk7Ci8qIGdsb2JhbCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgVGhpcyBmaWxlIGNvbnRhaW5zIGZ1bmN0aW9ucyByZWxhdGVkIHRvIHRoZSBoYW5kbGluZyBvZiBwYXNzY29kZSByZWRlZW1pbmcgaW4gSW5ncmVzcy4KICogQG1vZHVsZSByZWRlZW1pbmcKICovCgovKioKICogUHJvdmlkZXMgYSBzY2FsZSBmYWN0b3IgZm9yIHNob3J0IG5hbWVzIG9mIHZhcmlvdXMgSW5ncmVzcyBpdGVtcyB1c2VkIGluIHBhc3Njb2RlIHJld2FyZHMuCiAqCiAqIEBjb25zdGFudAogKiBAbmFtZSBSRURFRU1fU0hPUlRfTkFNRVMKICogQHR5cGUge09iamVjdH0KICovCndpbmRvdy5SRURFRU1fU0hPUlRfTkFNRVMgPSB7CiAgJ3BvcnRhbCBzaGllbGQnOiAnUycsCiAgJ2ZvcmNlIGFtcCc6ICdGQScsCiAgJ2xpbmsgYW1wJzogJ0xBJywKICBoZWF0c2luazogJ0gnLAogIG11bHRpaGFjazogJ00nLAogIHR1cnJldDogJ1QnLAogICd1bnVzdWFsIG9iamVjdCc6ICdVJywKICByZXNvbmF0b3I6ICdSJywKICAneG1wIGJ1cnN0ZXInOiAnWCcsCiAgJ3Bvd2VyIGN1YmUnOiAnQycsCiAgbWVkaWE6ICdNJywKICAndWx0cmEgc3RyaWtlJzogJ1VTJywKfTsKCi8qKgogKiBIVFRQIHN0YXR1cyBjb2RlcyBhbmQgY29ycmVzcG9uZGluZyBtZXNzYWdlcyByZXR1cm5lZCBieSB0aGUgcmVkZW1wdGlvbiBBUEkuCiAqCiAqIEBjb25zdGFudAogKiBAbmFtZSBSRURFRU1fU1RBVFVTRVMKICogQHR5cGUge09iamVjdH0KICovCndpbmRvdy5SRURFRU1fU1RBVFVTRVMgPSB7CiAgNDI5OiAnWW91IGhhdmUgYmVlbiByYXRlLWxpbWl0ZWQgYnkgdGhlIHNlcnZlci4gV2FpdCBhIGJpdCBhbmQgdHJ5IGFnYWluLicsCiAgNTAwOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJywKfTsKCi8qKgogKiBIYW5kbGVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBwYXNzY29kZSByZWRlZW1pbmcgQVBJLgogKgogKiBAZnVuY3Rpb24gaGFuZGxlUmVkZWVtUmVzcG9uc2UKICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSByZXR1cm5lZCBieSB0aGUgQVBJLgogKiBAcGFyYW0ge3N0cmluZ30gdGV4dFN0YXR1cyAtIFRoZSBzdGF0dXMgb2YgdGhlIHJlc3BvbnNlLgogKiBAcGFyYW0ge2pxWEhSfSBqcVhIUiAtIFRoZSBqUXVlcnkgd3JhcHBlZCBYTUxIdHRwUmVxdWVzdCBvYmplY3QuCiAqLwp3aW5kb3cuaGFuZGxlUmVkZWVtUmVzcG9uc2UgPSBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHsKICB2YXIgcGFzc2NvZGUgPSBqcVhIUi5wYXNzY29kZTsKCiAgaWYgKGRhdGEuZXJyb3IpIHsKICAgIGxvZy5lcnJvcignRXJyb3IgcmVkZWVtaW5nIHBhc3Njb2RlICInICsgcGFzc2NvZGUgKyAnIjogJyArIGRhdGEuZXJyb3IpOwogICAgd2luZG93LmRpYWxvZyh7CiAgICAgIHRpdGxlOiAnRXJyb3I6ICcgKyBwYXNzY29kZSwKICAgICAgaHRtbDogJzxzdHJvbmc+JyArIGRhdGEuZXJyb3IgKyAnPC9zdHJvbmc+JywKICAgIH0pOwogICAgcmV0dXJuOwogIH0KICBpZiAoIWRhdGEucmV3YXJkcykgewogICAgbG9nLmVycm9yKCdFcnJvciByZWRlZW1pbmcgcGFzc2NvZGUgIicgKyBwYXNzY29kZSArICciOiAnLCBkYXRhKTsKICAgIHdpbmRvdy5kaWFsb2coewogICAgICB0aXRsZTogJ0Vycm9yOiAnICsgcGFzc2NvZGUsCiAgICAgIGh0bWw6ICc8c3Ryb25nPkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJlZDwvc3Ryb25nPicsCiAgICB9KTsKICAgIHJldHVybjsKICB9CgogIGlmIChkYXRhLnBsYXllckRhdGEpIHsKICAgIHdpbmRvdy5QTEFZRVIgPSBkYXRhLnBsYXllckRhdGE7CiAgICB3aW5kb3cuc2V0dXBQbGF5ZXJTdGF0KCk7CiAgfQoKICB2YXIgZm9ybWF0ID0gJ2xvbmcnOwogIHRyeSB7CiAgICBmb3JtYXQgPSBsb2NhbFN0b3JhZ2VbJ2lpdGMtcGFzc2NvZGUtZm9ybWF0J107CiAgfSBjYXRjaCB7CiAgICAvKiBlbXB0eSAqLwogIH0KCiAgdmFyIGZvcm1hdEhhbmRsZXJzID0gewogICAgc2hvcnQ6IHdpbmRvdy5mb3JtYXRQYXNzY29kZVNob3J0LAogICAgbG9uZzogd2luZG93LmZvcm1hdFBhc3Njb2RlTG9uZywKICB9OwogIGlmICghZm9ybWF0SGFuZGxlcnNbZm9ybWF0XSkgZm9ybWF0ID0gJ2xvbmcnOwoKICB2YXIgaHRtbCA9IGZvcm1hdEhhbmRsZXJzW2Zvcm1hdF0oZGF0YS5yZXdhcmRzKTsKCiAgdmFyIGJ1dHRvbnMgPSB7fTsKICBPYmplY3Qua2V5cyhmb3JtYXRIYW5kbGVycykuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHsKICAgIGlmIChsYWJlbCA9PT0gZm9ybWF0KSByZXR1cm47CgogICAgYnV0dG9uc1tsYWJlbC50b1VwcGVyQ2FzZSgpXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgJCh0aGlzKS5kaWFsb2coJ2Nsb3NlJyk7CiAgICAgIGxvY2FsU3RvcmFnZVsnaWl0Yy1wYXNzY29kZS1mb3JtYXQnXSA9IGxhYmVsOwogICAgICB3aW5kb3cuaGFuZGxlUmVkZWVtUmVzcG9uc2UoZGF0YSwgdGV4dFN0YXR1cywganFYSFIpOwogICAgfTsKICB9KTsKCiAgLy8gRGlzcGxheSBpdAogIHdpbmRvdy5kaWFsb2coewogICAgdGl0bGU6ICdQYXNzY29kZTogJyArIHBhc3Njb2RlLAogICAgaHRtbDogaHRtbCwKICAgIGJ1dHRvbnM6IGJ1dHRvbnMsCiAgfSk7Cn07CgovKioKICogRm9ybWF0cyBwYXNzY29kZSByZXdhcmQgZGF0YSBpbnRvIGEgbG9uZywgZGV0YWlsZWQgaHRtbCBzdHJpbmcuCiAqCiAqIEBmdW5jdGlvbiBmb3JtYXRQYXNzY29kZUxvbmcKICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBUaGUgcmV3YXJkIGRhdGEuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZXRhaWxlZCByZXdhcmRzLgogKi8Kd2luZG93LmZvcm1hdFBhc3Njb2RlTG9uZyA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgdmFyIGh0bWwgPSAnPHA+PHN0cm9uZz5QYXNzY29kZSBjb25maXJtZWQuIEFjcXVpcmVkIGl0ZW1zOjwvc3Ryb25nPjwvcD48dWwgY2xhc3M9InJlZGVlbVJld2FyZCI+JzsKCiAgaWYgKGRhdGEub3RoZXIpIHsKICAgIGRhdGEub3RoZXIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICBodG1sICs9ICc8bGk+JyArIHdpbmRvdy5lc2NhcGVIdG1sU3BlY2lhbENoYXJzKGl0ZW0pICsgJzwvbGk+JzsKICAgIH0pOwogIH0KCiAgaWYgKDAgPCBkYXRhLnhtKSBodG1sICs9ICc8bGk+JyArIHdpbmRvdy5lc2NhcGVIdG1sU3BlY2lhbENoYXJzKGRhdGEueG0pICsgJyBYTTwvbGk+JzsKICBpZiAoMCA8IGRhdGEuYXApIGh0bWwgKz0gJzxsaT4nICsgd2luZG93LmVzY2FwZUh0bWxTcGVjaWFsQ2hhcnMoZGF0YS5hcCkgKyAnIEFQPC9saT4nOwoKICBpZiAoZGF0YS5pbnZlbnRvcnkpIHsKICAgIGRhdGEuaW52ZW50b3J5LmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgdHlwZS5hd2FyZHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIGh0bWwgKz0gJzxsaT4nICsgaXRlbS5jb3VudCArICd4ICc7CgogICAgICAgIHZhciBsID0gaXRlbS5sZXZlbDsKICAgICAgICBpZiAoMCA8IGwpIHsKICAgICAgICAgIGwgPSBwYXJzZUludChsKTsKICAgICAgICAgIGh0bWwgKz0gJzxzcGFuIGNsYXNzPSJpdGVtbGV2ZWwiIHN0eWxlPSJjb2xvcjonICsgd2luZG93LkNPTE9SU19MVkxbbF0gKyAnIj5MJyArIGwgKyAnPC9zcGFuPiAnOwogICAgICAgIH0KCiAgICAgICAgaHRtbCArPSB3aW5kb3cuZXNjYXBlSHRtbFNwZWNpYWxDaGFycyh0eXBlLm5hbWUpICsgJzwvbGk+JzsKICAgICAgfSk7CiAgICB9KTsKICB9CgogIGh0bWwgKz0gJzwvdWw+JzsKICByZXR1cm4gaHRtbDsKfTsKCi8qKgogKiBGb3JtYXRzIHBhc3Njb2RlIHJld2FyZCBkYXRhIGludG8gYSBzaG9ydCwgY29uY2lzZSBodG1sIHN0cmluZy4KICoKICogQGZ1bmN0aW9uIGZvcm1hdFBhc3Njb2RlU2hvcnQKICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBUaGUgcmV3YXJkIGRhdGEuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjb25jaXNlIHJld2FyZHMuCiAqLwp3aW5kb3cuZm9ybWF0UGFzc2NvZGVTaG9ydCA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgbGV0IGF3YXJkcyA9IFtdOwogIGlmIChkYXRhLm90aGVyKSB7CiAgICBhd2FyZHMgPSBkYXRhLm90aGVyLm1hcCh3aW5kb3cuZXNjYXBlSHRtbFNwZWNpYWxDaGFycyk7CiAgfQoKICBpZiAoMCA8IGRhdGEueG0pIGF3YXJkcy5wdXNoKHdpbmRvdy5lc2NhcGVIdG1sU3BlY2lhbENoYXJzKGRhdGEueG0pICsgJyBYTScpOwogIGlmICgwIDwgZGF0YS5hcCkgYXdhcmRzLnB1c2god2luZG93LmVzY2FwZUh0bWxTcGVjaWFsQ2hhcnMoZGF0YS5hcCkgKyAnIEFQJyk7CgogIGlmIChkYXRhLmludmVudG9yeSkgewogICAgZGF0YS5pbnZlbnRvcnkuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkgewogICAgICB0eXBlLmF3YXJkcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIHN0ciA9ICcnOwogICAgICAgIGlmIChpdGVtLmNvdW50ID4gMSkgc3RyICs9IGl0ZW0uY291bnQgKyAnJm5ic3A7JzsKCiAgICAgICAgaWYgKHdpbmRvdy5SRURFRU1fU0hPUlRfTkFNRVNbdHlwZS5uYW1lLnRvTG93ZXJDYXNlKCldKSB7CiAgICAgICAgICB2YXIgc2hvcnROYW1lID0gd2luZG93LlJFREVFTV9TSE9SVF9OQU1FU1t0eXBlLm5hbWUudG9Mb3dlckNhc2UoKV07CgogICAgICAgICAgbGV0IGwgPSBpdGVtLmxldmVsOwogICAgICAgICAgaWYgKDAgPCBsKSB7CiAgICAgICAgICAgIGwgPSBwYXJzZUludChsKTsKICAgICAgICAgICAgc3RyICs9ICc8c3BhbiBjbGFzcz0iaXRlbWxldmVsIiBzdHlsZT0iY29sb3I6JyArIHdpbmRvdy5DT0xPUlNfTFZMW2xdICsgJyI+JyArIHNob3J0TmFtZSArIGwgKyAnPC9zcGFuPic7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdHIgKz0gc2hvcnROYW1lOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBubyBzaG9ydCBuYW1lIGtub3duCiAgICAgICAgICBsZXQgbCA9IGl0ZW0ubGV2ZWw7CiAgICAgICAgICBpZiAoMCA8IGwpIHsKICAgICAgICAgICAgbCA9IHBhcnNlSW50KGwpOwogICAgICAgICAgICBzdHIgKz0gJzxzcGFuIGNsYXNzPSJpdGVtbGV2ZWwiIHN0eWxlPSJjb2xvcjonICsgd2luZG93LkNPTE9SU19MVkxbbF0gKyAnIj5MJyArIGwgKyAnPC9zcGFuPiAnOwogICAgICAgICAgfQogICAgICAgICAgc3RyICs9IHR5cGUubmFtZTsKICAgICAgICB9CgogICAgICAgIGF3YXJkcy5wdXNoKHN0cik7CiAgICAgIH0pOwogICAgfSk7CiAgfQoKICByZXR1cm4gJzxwIGNsYXNzPSJyZWRlZW1SZXdhcmQiPicgKyBhd2FyZHMuam9pbignLCAnKSArICc8L3A+JzsKfTsKCi8qKgogKiBTZXRzIHVwIHRoZSByZWRlZW0gZnVuY3Rpb25hbGl0eSwgYmluZGluZyB0byBVSSBlbGVtZW50cy4KICoKICogQGZ1bmN0aW9uIHNldHVwUmVkZWVtCiAqLwp3aW5kb3cuc2V0dXBSZWRlZW0gPSBmdW5jdGlvbiAoKSB7CiAgJCgnI3JlZGVlbScpLmtleXByZXNzKGZ1bmN0aW9uIChlKSB7CiAgICBpZiAoKGUua2V5Q29kZSA/IGUua2V5Q29kZSA6IGUud2hpY2gpICE9PSAxMykgcmV0dXJuOwoKICAgIHZhciBwYXNzY29kZSA9ICQodGhpcykudmFsKCk7CiAgICBwYXNzY29kZSA9IHBhc3Njb2RlLnJlcGxhY2UoL1teXHgyMC1ceDdFXSsvZywgJycpOyAvLyByZW1vdmVzIG5vbi1wcmludGFibGUgY2hhcmFjdGVycwogICAgaWYgKCFwYXNzY29kZSkgcmV0dXJuOwoKICAgIHZhciBqcVhIUiA9IHdpbmRvdy5wb3N0QWpheCgncmVkZWVtUmV3YXJkJywgeyBwYXNzY29kZTogcGFzc2NvZGUgfSwgd2luZG93LmhhbmRsZVJlZGVlbVJlc3BvbnNlLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgdmFyIGV4dHJhID0gJyc7CiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMpIHsKICAgICAgICBleHRyYSA9ICh3aW5kb3cuUkVERUVNX1NUQVRVU0VTW3Jlc3BvbnNlLnN0YXR1c10gfHwgJ1RoZSBzZXJ2ZXIgaW5kaWNhdGVkIGFuIGVycm9yLicpICsgJyAoSFRUUCAnICsgcmVzcG9uc2Uuc3RhdHVzICsgJyknOwogICAgICB9IGVsc2UgewogICAgICAgIGV4dHJhID0gJ05vIHN0YXR1cyBjb2RlIHdhcyByZXR1cm5lZC4nOwogICAgICB9CiAgICAgIHdpbmRvdy5kaWFsb2coewogICAgICAgIHRpdGxlOiAnUmVxdWVzdCBmYWlsZWQ6ICcgKyBwYXNzY29kZSwKICAgICAgICBodG1sOiAnPHN0cm9uZz5UaGUgSFRUUCByZXF1ZXN0IGZhaWxlZC48L3N0cm9uZz4gJyArIGV4dHJhLAogICAgICB9KTsKICAgIH0pOwogICAganFYSFIucGFzc2NvZGUgPSBwYXNzY29kZTsKICB9KTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHJlZ2lvbl9zY29yZWJvYXJkLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygncmVnaW9uX3Njb3JlYm9hcmQnKTsKLyogZ2xvYmFsIElJVEMgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBjb2RlIGZvciBkaXNwbGF5aW5nIGFuZCBoYW5kbGluZyB0aGUgcmVnaW9uYWwgc2NvcmVib2FyZC4KICogQG1vZHVsZSByZWdpb25fc2NvcmVib2FyZAogKi8KCi8qKgogKiBTZXRzIHVwIGFuZCBtYW5hZ2VzIHRoZSBtYWluIGRpYWxvZyBmb3IgdGhlIHJlZ2lvbmFsIHNjb3JlYm9hcmQuCiAqCiAqIEBmdW5jdGlvbiBSZWdpb25TY29yZWJvYXJkU2V0dXAKICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHNldHVwIGZ1bmN0aW9uIHRvIGluaXRpYWxpemUgdGhlIHNjb3JlYm9hcmQuCiAqLwp3aW5kb3cuUmVnaW9uU2NvcmVib2FyZFNldHVwID0gKGZ1bmN0aW9uICgpIHsKICB2YXIgbWFpbkRpYWxvZzsKICB2YXIgcmVnaW9uU2NvcmU7CiAgdmFyIHRpbWVyOwoKICAvKioKICAgKiBDb25zdHJ1Y3RzIGEgUmVnaW9uU2NvcmUgb2JqZWN0IGZyb20gc2VydmVyIHJlc3VsdHMuIENvbnRhaW5zIG1ldGhvZHMgdG8gcHJvY2VzcyBhbmQgcmV0cmlldmUgc2NvcmUgZGF0YS4KICAgKgogICAqIEBjbGFzcwogICAqIEBuYW1lIFJlZ2lvblNjb3JlCiAgICogQHBhcmFtIHtPYmplY3R9IHNlcnZlclJlc3VsdCAtIFRoZSBkYXRhIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciBmb3IgcmVnaW9uYWwgc2NvcmVzLgogICAqLwogIGZ1bmN0aW9uIFJlZ2lvblNjb3JlKHNlcnZlclJlc3VsdCkgewogICAgdGhpcy5vcmlfZGF0YSA9IHNlcnZlclJlc3VsdDsKICAgIHRoaXMudG9wQWdlbnRzID0gc2VydmVyUmVzdWx0LnRvcEFnZW50czsKICAgIHRoaXMucmVnaW9uTmFtZSA9IHNlcnZlclJlc3VsdC5yZWdpb25OYW1lOwogICAgdGhpcy5nYW1lU2NvcmUgPSBzZXJ2ZXJSZXN1bHQuZ2FtZVNjb3JlOwoKICAgIHRoaXMubWVkaWFuID0gWy0xLCAtMSwgLTFdOwogICAgdGhpcy5DUF9DT1VOVCA9IDM1OwogICAgdGhpcy5DUF9EVVJBVElPTiA9IDUgKiA2MCAqIDYwICogMTAwMDsKICAgIHRoaXMuQ1lDTEVfRFVSQVRJT04gPSB0aGlzLkNQX0RVUkFUSU9OICogdGhpcy5DUF9DT1VOVDsKCiAgICB0aGlzLmNoZWNrcG9pbnRzID0gW107CgogICAgdGhpcy5oYXNOb1RvcEFnZW50cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHRoaXMudG9wQWdlbnRzLmxlbmd0aCA9PT0gMDsKICAgIH07CgogICAgdGhpcy5nZXRBdmdTY29yZSA9IGZ1bmN0aW9uIChmYWN0aW9uKSB7CiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmdhbWVTY29yZVtmYWN0aW9uID09PSB3aW5kb3cuVEVBTV9FTkwgPyAwIDogMV0pOwogICAgfTsKCiAgICB0aGlzLmdldEF2Z1Njb3JlTWF4ID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5nZXRBdmdTY29yZSh3aW5kb3cuVEVBTV9FTkwpLCB0aGlzLmdldEF2Z1Njb3JlKHdpbmRvdy5URUFNX1JFUyksIDEpOwogICAgfTsKCiAgICB0aGlzLmdldENQU2NvcmUgPSBmdW5jdGlvbiAoY3ApIHsKICAgICAgcmV0dXJuIHRoaXMuY2hlY2twb2ludHNbY3BdOwogICAgfTsKCiAgICB0aGlzLmdldFNjb3JlTWF4ID0gZnVuY3Rpb24gKG1pbl92YWx1ZSkgewogICAgICB2YXIgbWF4ID0gbWluX3ZhbHVlIHx8IDA7CiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5jaGVja3BvaW50cy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjcCA9IHRoaXMuY2hlY2twb2ludHNbaV07CiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBjcFswXSwgY3BbMV0pOwogICAgICB9CiAgICAgIHJldHVybiBtYXg7CiAgICB9OwoKICAgIHRoaXMuZ2V0Q1BTdW0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBzdW1zID0gWzAsIDBdOwogICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMuY2hlY2twb2ludHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBzdW1zWzBdICs9IHRoaXMuY2hlY2twb2ludHNbaV1bMF07CiAgICAgICAgc3Vtc1sxXSArPSB0aGlzLmNoZWNrcG9pbnRzW2ldWzFdOwogICAgICB9CgogICAgICByZXR1cm4gc3VtczsKICAgIH07CgogICAgdGhpcy5nZXRBdmdTY29yZUF0Q1AgPSBmdW5jdGlvbiAoZmFjdGlvbiwgY3BfaWR4KSB7CiAgICAgIHZhciBpZHggPSBmYWN0aW9uID09PSB3aW5kb3cuVEVBTV9SRVMgPyAxIDogMDsKCiAgICAgIHZhciBzY29yZSA9IDA7CiAgICAgIHZhciBjb3VudCA9IDA7CiAgICAgIHZhciBjcF9sZW4gPSBNYXRoLm1pbihjcF9pZHgsIHRoaXMuY2hlY2twb2ludHMubGVuZ3RoKTsKCiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGNwX2xlbjsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMuY2hlY2twb2ludHNbaV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgc2NvcmUgKz0gdGhpcy5jaGVja3BvaW50c1tpXVtpZHhdOwogICAgICAgICAgY291bnQrKzsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChjb3VudCA8IGNwX2lkeCkgewogICAgICAgIHNjb3JlICs9IHRoaXMuZ2V0U2NvcmVNZWRpYW4oZmFjdGlvbikgKiAoY3BfaWR4IC0gY291bnQpOwogICAgICB9CgogICAgICByZXR1cm4gTWF0aC5mbG9vcihzY29yZSAvIGNwX2lkeCk7CiAgICB9OwoKICAgIHRoaXMuZ2V0U2NvcmVNZWRpYW4gPSBmdW5jdGlvbiAoZmFjdGlvbikgewogICAgICBpZiAodGhpcy5tZWRpYW5bZmFjdGlvbl0gPCAwKSB7CiAgICAgICAgdmFyIGlkeCA9IGZhY3Rpb24gPT09IHdpbmRvdy5URUFNX1JFUyA/IDEgOiAwOwogICAgICAgIHZhciB2YWx1ZXMgPSB0aGlzLmNoZWNrcG9pbnRzLm1hcChmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgICByZXR1cm4gdmFsW2lkeF07CiAgICAgICAgfSk7CiAgICAgICAgdmFsdWVzID0gdmFsdWVzLmZpbHRlcihmdW5jdGlvbiAobikgewogICAgICAgICAgcmV0dXJuIG4gIT09IHVuZGVmaW5lZDsKICAgICAgICB9KTsKICAgICAgICB0aGlzLm1lZGlhbltmYWN0aW9uXSA9IHRoaXMuZmluZE1lZGlhbih2YWx1ZXMpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5tZWRpYW5bZmFjdGlvbl07CiAgICB9OwoKICAgIHRoaXMuZmluZE1lZGlhbiA9IGZ1bmN0aW9uICh2YWx1ZXMpIHsKICAgICAgdmFyIGxlbiA9IHZhbHVlcy5sZW5ndGg7CiAgICAgIHZhciByYW5rID0gTWF0aC5mbG9vcigobGVuIC0gMSkgLyAyKTsKCiAgICAgIGlmIChsZW4gPT09IDApIHJldHVybiAwOwoKICAgICAgdmFyIGwgPSAwLAogICAgICAgIG0gPSBsZW4gLSAxOwogICAgICB2YXIgYiwgaSwgaiwgeDsKICAgICAgd2hpbGUgKGwgPCBtKSB7CiAgICAgICAgeCA9IHZhbHVlc1tyYW5rXTsKICAgICAgICBpID0gbDsKICAgICAgICBqID0gbTsKICAgICAgICBkbyB7CiAgICAgICAgICB3aGlsZSAodmFsdWVzW2ldIDwgeCkgaSsrOwogICAgICAgICAgd2hpbGUgKHggPCB2YWx1ZXNbal0pIGotLTsKICAgICAgICAgIGlmIChpIDw9IGopIHsKICAgICAgICAgICAgYiA9IHZhbHVlc1tpXTsKICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWVzW2pdOwogICAgICAgICAgICB2YWx1ZXNbal0gPSBiOwogICAgICAgICAgICBpKys7CiAgICAgICAgICAgIGotLTsKICAgICAgICAgIH0KICAgICAgICB9IHdoaWxlIChpIDw9IGopOwogICAgICAgIGlmIChqIDwgcmFuaykgbCA9IGk7CiAgICAgICAgaWYgKHJhbmsgPCBpKSBtID0gajsKICAgICAgfQogICAgICByZXR1cm4gdmFsdWVzW3JhbmtdOwogICAgfTsKCiAgICB0aGlzLmdldExhc3RDUCA9IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMuY2hlY2twb2ludHMubGVuZ3RoID09PSAwKSByZXR1cm4gMDsKICAgICAgcmV0dXJuIHRoaXMuY2hlY2twb2ludHMubGVuZ3RoIC0gMTsKICAgIH07CgogICAgdGhpcy5nZXRDeWNsZUVuZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hlY2twb2ludEVuZCh0aGlzLkNQX0NPVU5UKTsKICAgIH07CgogICAgdGhpcy5nZXRDaGVja3BvaW50RW5kID0gZnVuY3Rpb24gKGNwKSB7CiAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmN5Y2xlU3RhcnRUaW1lLmdldFRpbWUoKSArIHRoaXMuQ1BfRFVSQVRJT04gKiBjcCk7CiAgICB9OwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VydmVyUmVzdWx0LnNjb3JlSGlzdG9yeS5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaCA9IHNlcnZlclJlc3VsdC5zY29yZUhpc3RvcnlbaV07CiAgICAgIHRoaXMuY2hlY2twb2ludHNbcGFyc2VJbnQoaFswXSldID0gW3BhcnNlSW50KGhbMV0pLCBwYXJzZUludChoWzJdKV07CiAgICB9CgogICAgdGhpcy5jeWNsZVN0YXJ0VGltZSA9IG5ldyBEYXRlKE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIHRoaXMuQ1lDTEVfRFVSQVRJT04pICogdGhpcy5DWUNMRV9EVVJBVElPTik7CiAgfQoKICBmdW5jdGlvbiBzaG93RGlhbG9nKCkgewogICAgdmFyIGxhdExuZyA9IHdpbmRvdy5tYXAuZ2V0Q2VudGVyKCk7CgogICAgdmFyIGxhdEU2ID0gTWF0aC5yb3VuZChsYXRMbmcubGF0ICogMWU2KTsKICAgIHZhciBsbmdFNiA9IE1hdGgucm91bmQobGF0TG5nLmxuZyAqIDFlNik7CgogICAgc2hvd1JlZ2lvbihsYXRFNiwgbG5nRTYpOwogIH0KCiAgLyoKICAgIGZ1bmN0aW9uIHNob3dTY29yZU9mIChyZWdpb24pIHsKICAgICAgY29uc3QgbGF0bG5nID0gcmVnaW9uVG9MYXRMb25nKHJlZ2lvbik7CiAgICAgIGNvbnN0IGxhdEU2ID0gTWF0aC5yb3VuZChsYXRMbmcubGF0KjFFNik7CiAgICAgIGNvbnN0IGxuZ0U2ID0gTWF0aC5yb3VuZChsYXRMbmcubG5nKjFFNik7CiAgICAgIHNob3dSZWdpb24obGF0RTYsbG5nRTYpOwogICAgfQogICAgKi8KCiAgZnVuY3Rpb24gc2hvd1JlZ2lvbihsYXRFNiwgbG5nRTYpIHsKICAgIHZhciB0ZXh0ID0gJ0xvYWRpbmcgcmVnaW9uYWwgc2NvcmVzLi4uJzsKICAgIGlmICh3aW5kb3cudXNlQXBwUGFuZXMoKSkgewogICAgICB2YXIgc3R5bGUgPSAncG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IHdpZHRoOiAxMDAlOyBtYXgtd2lkdGg6IDQxMnB4JzsKICAgICAgbWFpbkRpYWxvZyA9ICQoJzxkaXY+JywgeyBzdHlsZTogc3R5bGUgfSkuaHRtbCh0ZXh0KS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTsKICAgIH0gZWxzZSB7CiAgICAgIG1haW5EaWFsb2cgPSB3aW5kb3cuZGlhbG9nKHsKICAgICAgICB0aXRsZTogJ1JlZ2lvbiBzY29yZXMnLAogICAgICAgIGh0bWw6IHRleHQsCiAgICAgICAgd2lkdGg6IDQ1MCwKICAgICAgICBoZWlnaHQ6IDM0MCwKICAgICAgICBjbG9zZUNhbGxiYWNrOiBvbkRpYWxvZ0Nsb3NlLAogICAgICB9KTsKICAgIH0KCiAgICB3aW5kb3cucG9zdEFqYXgoJ2dldFJlZ2lvblNjb3JlRGV0YWlscycsIHsgbGF0RTY6IGxhdEU2LCBsbmdFNjogbG5nRTYgfSwgb25SZXF1ZXN0U3VjY2Vzcywgb25SZXF1ZXN0RmFpbHVyZSk7CiAgfQoKICBmdW5jdGlvbiBvblJlcXVlc3RGYWlsdXJlKCkgewogICAgbWFpbkRpYWxvZy5odG1sKCdGYWlsZWQgdG8gbG9hZCByZWdpb24gc2NvcmVzIC0gdHJ5IGFnYWluJyk7CiAgfQoKICBmdW5jdGlvbiBvblJlcXVlc3RTdWNjZXNzKGRhdGEpIHsKICAgIGlmIChkYXRhLnJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiBvblJlcXVlc3RGYWlsdXJlKCk7CiAgICB9CgogICAgcmVnaW9uU2NvcmUgPSBuZXcgUmVnaW9uU2NvcmUoZGF0YS5yZXN1bHQpOwogICAgdXBkYXRlRGlhbG9nKCk7CiAgICBzdGFydFRpbWVyKCk7CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVEaWFsb2cobG9nc2NhbGUpIHsKICAgIG1haW5EaWFsb2cuaHRtbCgKICAgICAgYDxkaXYgY2xhc3M9ImNlbGxzY29yZSI+YCArCiAgICAgICAgYDxiPlJlZ2lvbiBzY29yZXMgZm9yICR7cmVnaW9uU2NvcmUucmVnaW9uTmFtZX08L2I+YCArCiAgICAgICAgYDxkaXYgY2xhc3M9Imhpc3RvcnljaGFydCI+JHtjcmVhdGVSZXN1bHRzKCl9JHtIaXN0b3J5Q2hhcnQocmVnaW9uU2NvcmUsIGxvZ3NjYWxlKX08L2Rpdj5gICsKICAgICAgICBgPGI+Q2hlY2twb2ludCBvdmVydmlldzwvYj48ZGl2PiR7Y3JlYXRlSGlzdG9yeVRhYmxlKCl9PC9kaXY+YCArCiAgICAgICAgYDxiPlRvcCBhZ2VudHM8L2I+PGRpdj4ke2NyZWF0ZUFnZW50VGFibGUoKX08L2Rpdj5gICsKICAgICAgICBgPC9kaXY+YCArCiAgICAgICAgY3JlYXRlVGltZXJzKCkKICAgICk7CgogICAgc2V0dXBUb29sVGlwcygpOwoKICAgIHZhciB0b29sdGlwID0gY3JlYXRlUmVzdWx0VG9vbHRpcCgpOwogICAgJCgnI292ZXJ2aWV3JywgbWFpbkRpYWxvZykudG9vbHRpcCh7CiAgICAgIGNvbnRlbnQ6IHdpbmRvdy5jb252ZXJ0VGV4dFRvVGFibGVNYWdpYyh0b29sdGlwKSwKICAgIH0pOwoKICAgICQoJy5jZWxsc2NvcmUnLCBtYWluRGlhbG9nKS5hY2NvcmRpb24oewogICAgICBoZWFkZXI6ICdiJywKICAgICAgaGVpZ2h0U3R5bGU6ICdmaWxsJywKICAgIH0pOwoKICAgICQoJ2lucHV0LmxvZ3NjYWxlJywgbWFpbkRpYWxvZykuY2hhbmdlKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKTsKICAgICAgdXBkYXRlRGlhbG9nKGlucHV0LnByb3AoJ2NoZWNrZWQnKSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIHNldHVwVG9vbFRpcHMoKSB7CiAgICAkKCdnLmNoZWNrcG9pbnQnLCBtYWluRGlhbG9nKS5lYWNoKGZ1bmN0aW9uIChpLCBlbGVtKSB7CiAgICAgIGVsZW0gPSAkKGVsZW0pOwoKICAgICAgZnVuY3Rpb24gZm9ybWF0U2NvcmUoaWR4LCBzY29yZV9ub3csIHNjb3JlX2xhc3QpIHsKICAgICAgICBpZiAoIXNjb3JlX25vd1tpZHhdKSByZXR1cm4gJyc7CiAgICAgICAgdmFyIHJlcyA9IHdpbmRvdy5kaWdpdHMoc2NvcmVfbm93W2lkeF0pOwogICAgICAgIGlmIChzY29yZV9sYXN0ICYmIHNjb3JlX2xhc3RbaWR4XSkgewogICAgICAgICAgdmFyIGRlbHRhID0gc2NvcmVfbm93W2lkeF0gLSBzY29yZV9sYXN0W2lkeF07CiAgICAgICAgICByZXMgKz0gJ1x0KCc7CiAgICAgICAgICBpZiAoZGVsdGEgPiAwKSByZXMgKz0gJysnOwogICAgICAgICAgcmVzICs9IHdpbmRvdy5kaWdpdHMoZGVsdGEpICsgJyknOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzOwogICAgICB9CgogICAgICB2YXIgdG9vbHRpcDsKICAgICAgdmFyIGNwID0gcGFyc2VJbnQoZWxlbS5hdHRyKCdkYXRhLWNwJykpOwogICAgICBpZiAoY3ApIHsKICAgICAgICB2YXIgc2NvcmVfbm93ID0gcmVnaW9uU2NvcmUuZ2V0Q1BTY29yZShjcCk7CiAgICAgICAgdmFyIHNjb3JlX2xhc3QgPSByZWdpb25TY29yZS5nZXRDUFNjb3JlKGNwIC0gMSk7CiAgICAgICAgdmFyIGVubF9zdHIgPSBzY29yZV9ub3cgPyAnXG5Fbmw6XHQnICsgZm9ybWF0U2NvcmUoMCwgc2NvcmVfbm93LCBzY29yZV9sYXN0KSA6ICcnOwogICAgICAgIHZhciByZXNfc3RyID0gc2NvcmVfbm93ID8gJ1xuUmVzOlx0JyArIGZvcm1hdFNjb3JlKDEsIHNjb3JlX25vdywgc2NvcmVfbGFzdCkgOiAnJzsKCiAgICAgICAgdG9vbHRpcCA9ICdDUDpcdCcgKyBjcCArICdcdC1cdCcgKyBmb3JtYXREYXlIb3VycyhyZWdpb25TY29yZS5nZXRDaGVja3BvaW50RW5kKGNwKSkgKyAnXG48aHI+JyArIGVubF9zdHIgKyByZXNfc3RyOwogICAgICB9CgogICAgICBlbGVtLnRvb2x0aXAoewogICAgICAgIGNvbnRlbnQ6IHdpbmRvdy5jb252ZXJ0VGV4dFRvVGFibGVNYWdpYyh0b29sdGlwKSwKICAgICAgICBwb3NpdGlvbjogeyBteTogJ2NlbnRlciBib3R0b20nLCBhdDogJ2NlbnRlciB0b3AtMTAnIH0sCiAgICAgICAgdG9vbHRpcENsYXNzOiAnY2hlY2twb2ludHRvb2x0aXAnLAogICAgICAgIHNob3c6IDEwMCwKICAgICAgfSk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIG9uRGlhbG9nQ2xvc2UoKSB7CiAgICBzdG9wVGltZXIoKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUhpc3RvcnlUYWJsZSgpIHsKICAgIHZhciBfaW52ZXJ0ID0gd2luZG93LlBMQVlFUi50ZWFtID09PSAnUkVTSVNUQU5DRSc7CiAgICBmdW5jdGlvbiBvcmRlcihfMSwgXzIpIHsKICAgICAgcmV0dXJuIChfaW52ZXJ0ID8gW18yLCBfMV0gOiBbXzEsIF8yXSkuam9pbignJyk7CiAgICB9CiAgICB2YXIgZW5sID0geyBjbGFzczogd2luZG93LlRFQU1fVE9fQ1NTW3dpbmRvdy5URUFNX0VOTF0sIG5hbWU6IHdpbmRvdy5URUFNX05BTUVTW3dpbmRvdy5URUFNX0VOTF0gfTsKICAgIHZhciByZXMgPSB7IGNsYXNzOiB3aW5kb3cuVEVBTV9UT19DU1Nbd2luZG93LlRFQU1fUkVTXSwgbmFtZTogd2luZG93LlRFQU1fTkFNRVNbd2luZG93LlRFQU1fUkVTXSB9OwoKICAgIHZhciB0YWJsZSA9IGA8dGFibGUgY2xhc3M9ImNoZWNrcG9pbnRfdGFibGUiPjx0aGVhZD48dHI+PHRoPkNQPC90aD48dGg+VGltZTwvdGg+JHtvcmRlcignPHRoPicgKyBlbmwubmFtZSArICc8L3RoPicsICc8dGg+JyArIHJlcy5uYW1lICsgJzwvdGg+Jyl9PC90cj5gOwoKICAgIHZhciB0b3RhbCA9IHJlZ2lvblNjb3JlLmdldENQU3VtKCk7CiAgICB0YWJsZSArPQogICAgICAnPHRyIGNsYXNzPSJjcF90b3RhbCI+PHRoPjwvdGg+PHRoPjwvdGg+JyArCiAgICAgIG9yZGVyKCc8dGggY2xhc3M9IicgKyBlbmwuY2xhc3MgKyAnIj4nICsgd2luZG93LmRpZ2l0cyh0b3RhbFswXSkgKyAnPC90aD4nLCAnPHRoIGNsYXNzPSInICsgcmVzLmNsYXNzICsgJyI+JyArIHdpbmRvdy5kaWdpdHModG90YWxbMV0pICsgJzwvdGg+JykgKwogICAgICAnPC90cj48L3RoZWFkPic7CgogICAgZm9yICh2YXIgY3AgPSByZWdpb25TY29yZS5nZXRMYXN0Q1AoKTsgY3AgPiAwOyBjcC0tKSB7CiAgICAgIHZhciBzY29yZSA9IHJlZ2lvblNjb3JlLmdldENQU2NvcmUoY3ApOwogICAgICB2YXIgY2xhc3NfZSA9IHNjb3JlWzBdID4gc2NvcmVbMV0gPyAnIGNsYXNzPSInICsgZW5sLmNsYXNzICsgJyInIDogJyc7CiAgICAgIHZhciBjbGFzc19yID0gc2NvcmVbMV0gPiBzY29yZVswXSA/ICcgY2xhc3M9IicgKyByZXMuY2xhc3MgKyAnIicgOiAnJzsKCiAgICAgIHRhYmxlICs9CiAgICAgICAgYDx0cj5gICsKICAgICAgICBgPHRkPiR7Y3B9PC90ZD5gICsKICAgICAgICBgPHRkPiR7Zm9ybWF0RGF5SG91cnMocmVnaW9uU2NvcmUuZ2V0Q2hlY2twb2ludEVuZChjcCkpfTwvdGQ+YCArCiAgICAgICAgb3JkZXIoYDx0ZCR7Y2xhc3NfZX0+JHt3aW5kb3cuZGlnaXRzKHNjb3JlWzBdKX08L3RkPmAsIGA8dGQke2NsYXNzX3J9PiR7d2luZG93LmRpZ2l0cyhzY29yZVsxXSl9PC90ZD5gKSArCiAgICAgICAgYDwvdHI+YDsKICAgIH0KCiAgICB0YWJsZSArPSAnPC90YWJsZT4nOwogICAgcmV0dXJuIHRhYmxlOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlQWdlbnRUYWJsZSgpIHsKICAgIHZhciBhZ2VudFRhYmxlID0gJzx0YWJsZT48dHI+PHRoPiM8L3RoPjx0aD5BZ2VudDwvdGg+PC90cj4nOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaW9uU2NvcmUudG9wQWdlbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBhZ2VudCA9IHJlZ2lvblNjb3JlLnRvcEFnZW50c1tpXTsKICAgICAgYWdlbnRUYWJsZSArPQogICAgICAgICc8dHI+JyArICc8dGQ+JyArIChpICsgMSkgKyAnPC90ZD4nICsgJzx0ZCBjbGFzcz0ibmlja25hbWUgJyArIChhZ2VudC50ZWFtID09PSAnUkVTSVNUQU5DRScgPyAncmVzJyA6ICdlbmwnKSArICciPicgKyBhZ2VudC5uaWNrICsgJzwvdGQ+PC90cj4nOwogICAgfQoKICAgIGlmIChyZWdpb25TY29yZS5oYXNOb1RvcEFnZW50cygpKSB7CiAgICAgIGFnZW50VGFibGUgKz0gJzx0cj48dGQgY29sc3Bhbj0iMiI+PGk+bm8gdG9wIGFnZW50czwvaT48L3RkPjwvdHI+JzsKICAgIH0KICAgIGFnZW50VGFibGUgKz0gJzwvdGFibGU+JzsKCiAgICByZXR1cm4gYWdlbnRUYWJsZTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVJlc3VsdHMoKSB7CiAgICB2YXIgbWF4QXZlcmFnZSA9IHJlZ2lvblNjb3JlLmdldEF2Z1Njb3JlTWF4KCk7CiAgICB2YXIgb3JkZXIgPSB3aW5kb3cuUExBWUVSLnRlYW0gPT09ICdSRVNJU1RBTkNFJyA/IFt3aW5kb3cuVEVBTV9SRVMsIHdpbmRvdy5URUFNX0VOTF0gOiBbd2luZG93LlRFQU1fRU5MLCB3aW5kb3cuVEVBTV9SRVNdOwoKICAgIHZhciByZXN1bHQgPSAnPHRhYmxlIGlkPSJvdmVydmlldyIgdGl0bGU9IiI+JzsKICAgIGZvciAodmFyIHQgPSAwOyB0IDwgMjsgdCsrKSB7CiAgICAgIHZhciBmYWN0aW9uID0gb3JkZXJbdF07CiAgICAgIHZhciB0ZWFtID0gd2luZG93LlRFQU1fTkFNRVNbZmFjdGlvbl07CiAgICAgIHZhciB0ZWFtQ2xhc3MgPSB3aW5kb3cuVEVBTV9UT19DU1NbZmFjdGlvbl07CiAgICAgIHZhciB0ZWFtQ29sID0gd2luZG93LkNPTE9SU1tmYWN0aW9uXTsKICAgICAgdmFyIGJhclNpemUgPSBNYXRoLnJvdW5kKChyZWdpb25TY29yZS5nZXRBdmdTY29yZShmYWN0aW9uKSAvIG1heEF2ZXJhZ2UpICogMTAwKTsKICAgICAgcmVzdWx0ICs9CiAgICAgICAgYDx0cj48dGggY2xhc3M9IiR7dGVhbUNsYXNzfSI+JHt0ZWFtfTwvdGg+YCArCiAgICAgICAgYDx0ZCBjbGFzcz0iJHt0ZWFtQ2xhc3N9Ij4ke3dpbmRvdy5kaWdpdHMocmVnaW9uU2NvcmUuZ2V0QXZnU2NvcmUoZmFjdGlvbikpfTwvdGQ+YCArCiAgICAgICAgYDx0ZCBzdHlsZT0id2lkdGg6MTAwJSI+PGRpdiBzdHlsZT0iYmFja2dyb3VuZDoke3RlYW1Db2x9OyB3aWR0aDogJHtiYXJTaXplfSU7IGhlaWdodDogMS4zZXg7IGJvcmRlcjogMnB4IG91dHNldCAke3RlYW1Db2x9OyBtYXJnaW4tdG9wOiAycHgiPiA8L3RkPmAgKwogICAgICAgIGA8dGQgY2xhc3M9IiR7dGVhbUNsYXNzfSI+PHNtYWxsPiggJHt3aW5kb3cuZGlnaXRzKHJlZ2lvblNjb3JlLmdldEF2Z1Njb3JlQXRDUChmYWN0aW9uLCAzNSkpfSApPC9zbWFsbD48L3RkPmAgKwogICAgICAgIGA8L3RyPmA7CiAgICB9CgogICAgcmV0dXJuIHJlc3VsdCArICc8L3RhYmxlPic7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVSZXN1bHRUb29sdGlwKCkgewogICAgdmFyIGVfcmVzID0gcmVnaW9uU2NvcmUuZ2V0QXZnU2NvcmVBdENQKHdpbmRvdy5URUFNX1JFUywgcmVnaW9uU2NvcmUuQ1BfQ09VTlQpOwogICAgdmFyIGVfZW5sID0gcmVnaW9uU2NvcmUuZ2V0QXZnU2NvcmVBdENQKHdpbmRvdy5URUFNX0VOTCwgcmVnaW9uU2NvcmUuQ1BfQ09VTlQpOwogICAgdmFyIGxvb3NpbmdfZmFjdGlvbiA9IGVfcmVzIDwgZV9lbmwgPyB3aW5kb3cuVEVBTV9SRVMgOiB3aW5kb3cuVEVBTV9FTkw7CgogICAgdmFyIG9yZGVyID0gbG9vc2luZ19mYWN0aW9uID09PSB3aW5kb3cuVEVBTV9FTkwgPyBbd2luZG93LlRFQU1fUkVTLCB3aW5kb3cuVEVBTV9FTkxdIDogW3dpbmRvdy5URUFNX0VOTCwgd2luZG93LlRFQU1fUkVTXTsKCiAgICBmdW5jdGlvbiBwZXJjZW50VG9TdHJpbmcoc2NvcmUsIHRvdGFsKSB7CiAgICAgIGlmICh0b3RhbCA9PT0gMCkgcmV0dXJuICc1MCUnOwogICAgICByZXR1cm4gTWF0aC5yb3VuZCgoc2NvcmUgLyB0b3RhbCkgKiAxMDAwMCkgLyAxMDAgKyAnJSc7CiAgICB9CgogICAgZnVuY3Rpb24gY3VycmVudFNjb3JlKCkgewogICAgICB2YXIgcmVzID0gJ0N1cnJlbnQ6XG4nOwogICAgICB2YXIgdG90YWwgPSByZWdpb25TY29yZS5nZXRBdmdTY29yZSh3aW5kb3cuVEVBTV9SRVMpICsgcmVnaW9uU2NvcmUuZ2V0QXZnU2NvcmUod2luZG93LlRFQU1fRU5MKTsKICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCAyOyB0KyspIHsKICAgICAgICB2YXIgZmFjdGlvbiA9IG9yZGVyW3RdOwogICAgICAgIHZhciBzY29yZSA9IHJlZ2lvblNjb3JlLmdldEF2Z1Njb3JlKGZhY3Rpb24pOwogICAgICAgIHJlcyArPSB3aW5kb3cuVEVBTV9OQU1FU1tmYWN0aW9uXSArICdcdCcgKyB3aW5kb3cuZGlnaXRzKHNjb3JlKSArICdcdCcgKyBwZXJjZW50VG9TdHJpbmcoc2NvcmUsIHRvdGFsKSArICdcbic7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXM7CiAgICB9CgogICAgZnVuY3Rpb24gZXN0aW1hdGVkU2NvcmUoKSB7CiAgICAgIHZhciByZXMgPSAnPGhyPkVzdGltYXRlZDpcbic7CiAgICAgIHZhciB0b3RhbCA9IGVfcmVzICsgZV9lbmw7CiAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgMjsgdCsrKSB7CiAgICAgICAgdmFyIGZhY3Rpb24gPSBvcmRlclt0XTsKICAgICAgICB2YXIgc2NvcmUgPSByZWdpb25TY29yZS5nZXRBdmdTY29yZUF0Q1AoZmFjdGlvbiwgcmVnaW9uU2NvcmUuQ1BfQ09VTlQpOwogICAgICAgIHJlcyArPSB3aW5kb3cuVEVBTV9OQU1FU1tmYWN0aW9uXSArICdcdCcgKyB3aW5kb3cuZGlnaXRzKHNjb3JlKSArICdcdCcgKyBwZXJjZW50VG9TdHJpbmcoc2NvcmUsIHRvdGFsKSArICdcbic7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXM7CiAgICB9CgogICAgZnVuY3Rpb24gcmVxdWlyZWRTY29yZSgpIHsKICAgICAgdmFyIHJlcyA9ICcnOwogICAgICB2YXIgcmVxdWlyZWRfbXUgPSBNYXRoLmFicyhlX3JlcyAtIGVfZW5sKSAqIHJlZ2lvblNjb3JlLkNQX0NPVU5UICsgMTsKICAgICAgcmVzICs9ICc8aHI+XG4nOwogICAgICByZXMgKz0gd2luZG93LlRFQU1fTkFNRVNbbG9vc2luZ19mYWN0aW9uXSArICcgcmVxdWlyZXM6XHQnICsgd2luZG93LmRpZ2l0cyhNYXRoLmNlaWwocmVxdWlyZWRfbXUpKSArICcgXG4nOwogICAgICByZXMgKz0gJ0NoZWNrcG9pbnQocykgbGVmdDpcdCcgKyAocmVnaW9uU2NvcmUuQ1BfQ09VTlQgLSByZWdpb25TY29yZS5nZXRMYXN0Q1AoKSkgKyAnIFxuJzsKCiAgICAgIHJldHVybiByZXM7CiAgICB9CgogICAgcmV0dXJuIGN1cnJlbnRTY29yZSgpICsgZXN0aW1hdGVkU2NvcmUoKSArIHJlcXVpcmVkU2NvcmUoKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVRpbWVycygpIHsKICAgIHZhciBuZXh0Y3AgPSByZWdpb25TY29yZS5nZXRDaGVja3BvaW50RW5kKHJlZ2lvblNjb3JlLmdldExhc3RDUCgpICsgMSk7CiAgICB2YXIgZW5kY3AgPSByZWdpb25TY29yZS5nZXRDeWNsZUVuZCgpOwoKICAgIHJldHVybiAoCiAgICAgIGA8ZGl2IGNsYXNzPSJjaGVja3BvaW50X3RpbWVycyI+PHRhYmxlPjx0cj5gICsKICAgICAgYDx0ZD5OZXh0IENQIGF0OiAke2Zvcm1hdEhvdXJzKG5leHRjcCl9IChpbiA8c3BhbiBpZD0iY3ljbGV0aW1lciI+PC9zcGFuPik8L3RkPmAgKwogICAgICBgPHRkPkN5Y2xlIGVuZHM6ICR7Zm9ybWF0RGF5SG91cnMoZW5kY3ApfTwvdGQ+YCArCiAgICAgIGA8L3RyPjwvdGFibGU+PC9kaXY+YAogICAgKTsKICB9CgogIGZ1bmN0aW9uIHN0YXJ0VGltZXIoKSB7CiAgICBzdG9wVGltZXIoKTsKCiAgICB0aW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChvblRpbWVyLCAxMDAwKTsKICAgIG9uVGltZXIoKTsKICB9CgogIGZ1bmN0aW9uIHN0b3BUaW1lcigpIHsKICAgIGlmICh0aW1lcikgewogICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcik7CiAgICAgIHRpbWVyID0gdW5kZWZpbmVkOwogICAgfQogIH0KCiAgZnVuY3Rpb24gb25UaW1lcigpIHsKICAgIHZhciBkID0gcmVnaW9uU2NvcmUuZ2V0Q2hlY2twb2ludEVuZChyZWdpb25TY29yZS5nZXRMYXN0Q1AoKSArIDEpIC0gbmV3IERhdGUoKTsKICAgICQoJyNjeWNsZXRpbWVyJywgbWFpbkRpYWxvZykuaHRtbChmb3JtYXRNaW51dGVzKE1hdGgubWF4KDAsIE1hdGguZmxvb3IoZCAvIDEwMDApKSkpOwogIH0KCiAgZnVuY3Rpb24gcGFkKG4pIHsKICAgIHJldHVybiB3aW5kb3cuemVyb1BhZChuLCAyKTsKICB9CgogIGZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoc2VjKSB7CiAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKHNlYyAvIDM2MDApOwogICAgdmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKChzZWMgJSAzNjAwKSAvIDYwKTsKICAgIHNlYyA9IHNlYyAlIDYwOwoKICAgIHJldHVybiBob3VycyArICc6JyArIHBhZChtaW51dGVzKSArICc6JyArIHBhZChzZWMpOwogIH0KCiAgZnVuY3Rpb24gZm9ybWF0SG91cnModGltZSkgewogICAgcmV0dXJuIHBhZCh0aW1lLmdldEhvdXJzKCkpICsgJzonICsgcGFkKHRpbWUuZ2V0TWludXRlcygpKTsKICB9CiAgZnVuY3Rpb24gZm9ybWF0RGF5KHRpbWUpIHsKICAgIHJldHVybiBwYWQodGltZS5nZXREYXRlKCkpICsgJy4nICsgcGFkKHRpbWUuZ2V0TW9udGgoKSArIDEpOwogIH0KICBmdW5jdGlvbiBmb3JtYXREYXlIb3Vycyh0aW1lKSB7CiAgICByZXR1cm4gZm9ybWF0RGF5KHRpbWUpICsgJyAnICsgZm9ybWF0SG91cnModGltZSk7CiAgfQoKICByZXR1cm4gZnVuY3Rpb24gc2V0dXAoKSB7CiAgICBpZiAod2luZG93LnVzZUFwcFBhbmVzKCkpIHsKICAgICAgd2luZG93LmFwcC5hZGRQYW5lKCdyZWdpb25TY29yZWJvYXJkJywgJ1JlZ2lvbiBzY29yZXMnLCAnaWNfYWN0aW9uX3ZpZXdfYXNfbGlzdCcpOwogICAgICB3aW5kb3cuYWRkSG9vaygncGFuZUNoYW5nZWQnLCBmdW5jdGlvbiAocGFuZSkgewogICAgICAgIGlmIChwYW5lID09PSAncmVnaW9uU2NvcmVib2FyZCcpIHsKICAgICAgICAgIHNob3dEaWFsb2coKTsKICAgICAgICB9IGVsc2UgaWYgKG1haW5EaWFsb2cpIHsKICAgICAgICAgIG1haW5EaWFsb2cucmVtb3ZlKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIElJVEMudG9vbGJveC5hZGRCdXR0b24oewogICAgICAgIGlkOiAnc2NvcmVib2FyZCcsCiAgICAgICAgbGFiZWw6ICdSZWdpb24gc2NvcmVzJywKICAgICAgICB0aXRsZTogJ1ZpZXcgcmVnaW9uYWwgc2NvcmVib2FyZCcsCiAgICAgICAgYWN0aW9uOiBzaG93RGlhbG9nLAogICAgICB9KTsKICAgIH0KICB9Owp9KSgpOwoKLyoqCiAqIENyZWF0ZXMgYW4gU1ZHLWJhc2VkIGhpc3RvcnkgY2hhcnQgZm9yIHJlZ2lvbmFsIHNjb3Jlcy4KICoKICogQGZ1bmN0aW9uIEhpc3RvcnlDaGFydAogKiBAcGFyYW0ge1JlZ2lvblNjb3JlfSBfcmVnaW9uU2NvcmUgLSBUaGUgUmVnaW9uU2NvcmUgb2JqZWN0IGNvbnRhaW5pbmcgc2NvcmUgZGF0YS4KICogQHBhcmFtIHtib29sZWFufSBsb2dzY2FsZSAtIFdoZXRoZXIgdG8gdXNlIGxvZ2FyaXRobWljIHNjYWxlIGZvciB0aGUgY2hhcnQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEFuIFNWRyBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBoaXN0b3J5IGNoYXJ0LgogKi8KdmFyIEhpc3RvcnlDaGFydCA9IChmdW5jdGlvbiAoKSB7CiAgdmFyIHJlZ2lvblNjb3JlOwogIHZhciBzY2FsZUZjdDsKICB2YXIgbG9nc2NhbGU7CiAgdmFyIHN2Z1RpY2tUZXh0OwoKICBmdW5jdGlvbiBjcmVhdGUoX3JlZ2lvblNjb3JlLCBsb2dzY2FsZSkgewogICAgcmVnaW9uU2NvcmUgPSBfcmVnaW9uU2NvcmU7CgogICAgdmFyIG1heCA9IHJlZ2lvblNjb3JlLmdldFNjb3JlTWF4KDEwKTsgLy8gTk9URTogZW5zdXJlIGEgbWluIG9mIDEwIGZvciB0aGUgZ3JhcGgKICAgIG1heCAqPSAxLjA5OyAvLyBzY2FsZSB1cCBtYXhpbXVtIGEgbGl0dGxlLCBzbyBncmFwaCBpc24ndCBzcXVhc2hlZCByaWdodCBhZ2FpbnN0IHVwcGVyIGVkZ2UKICAgIHNldFNjYWxlVHlwZShtYXgsIGxvZ3NjYWxlKTsKCiAgICBzdmdUaWNrVGV4dCA9IFtdOwoKICAgIC8vIHN2ZyBhcmVhIDQwMHgxMzAuIGdyYXBoIGFyZWEgMzUweDEwMCwgb2Zmc2V0IHRvIDQwLDEwCiAgICB2YXIgc3ZnID0KICAgICAgJzxkaXY+PHN2ZyB3aWR0aD0iNDAwIiBoZWlnaHQ9IjEzMyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMHB4OyI+JyArCiAgICAgIHN2Z0JhY2tncm91bmQoKSArCiAgICAgIHN2Z0F4aXMobWF4KSArCiAgICAgIHN2Z0F2ZXJhZ2VQYXRoKCkgKwogICAgICBzdmdGYWN0aW9uUGF0aCgpICsKICAgICAgc3ZnQ2hlY2tQb2ludE1hcmtlcnMoKSArCiAgICAgIHN2Z1RpY2tUZXh0LmpvaW4oJycpICsKICAgICAgJzxmb3JlaWduT2JqZWN0IGhlaWdodD0iMTgiIHdpZHRoPSI2MCIgeT0iMTEzIiB4PSIwIiBjbGFzcz0ibm9kZSI+PGxhYmVsIHRpdGxlPSJMb2dhcml0aG1pYyBzY2FsZSI+JyArCiAgICAgICc8aW5wdXQgdHlwZT0iY2hlY2tib3giIGNsYXNzPSJsb2dzY2FsZSInICsKICAgICAgKGxvZ3NjYWxlID8gJyBjaGVja2VkJyA6ICcnKSArCiAgICAgICcvPicgKwogICAgICAnbG9nPC9sYWJlbD48L2ZvcmVpZ25PYmplY3Q+JyArCiAgICAgICc8L3N2Zz48L2Rpdj4nOwoKICAgIHJldHVybiBzdmc7CiAgfQoKICBmdW5jdGlvbiBzdmdGYWN0aW9uUGF0aCgpIHsKICAgIHZhciBzdmdQYXRoID0gJyc7CgogICAgZm9yICh2YXIgdCA9IDA7IHQgPCAyOyB0KyspIHsKICAgICAgdmFyIGNvbCA9IGdldEZhY3Rpb25Db2xvcih0KTsKICAgICAgdmFyIHRlYW1QYXRocyA9IFtdOwoKICAgICAgZm9yICh2YXIgY3AgPSAxOyBjcCA8PSByZWdpb25TY29yZS5nZXRMYXN0Q1AoKTsgY3ArKykgewogICAgICAgIHZhciBzY29yZSA9IHJlZ2lvblNjb3JlLmdldENQU2NvcmUoY3ApOwogICAgICAgIGlmIChzY29yZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB2YXIgeCA9IGNwICogMTAgKyA0MDsKICAgICAgICAgIHRlYW1QYXRocy5wdXNoKHggKyAnLCcgKyBzY2FsZUZjdChzY29yZVt0XSkpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHRlYW1QYXRocy5sZW5ndGggPiAwKSB7CiAgICAgICAgc3ZnUGF0aCArPSAnPHBvbHlsaW5lIHBvaW50cz0iJyArIHRlYW1QYXRocy5qb2luKCcgJykgKyAnIiBzdHJva2U9IicgKyBjb2wgKyAnIiBmaWxsPSJub25lIiAvPic7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gc3ZnUGF0aDsKICB9CgogIGZ1bmN0aW9uIHN2Z0NoZWNrUG9pbnRNYXJrZXJzKCkgewogICAgdmFyIG1hcmtlcnMgPSAnJzsKCiAgICB2YXIgY29sMSA9IGdldEZhY3Rpb25Db2xvcigwKTsKICAgIHZhciBjb2wyID0gZ2V0RmFjdGlvbkNvbG9yKDEpOwoKICAgIGZvciAodmFyIGNwID0gMTsgY3AgPD0gcmVnaW9uU2NvcmUuQ1BfQ09VTlQ7IGNwKyspIHsKICAgICAgdmFyIHNjb3JlcyA9IHJlZ2lvblNjb3JlLmdldENQU2NvcmUoY3ApOwoKICAgICAgbWFya2VycyArPQogICAgICAgIGA8ZyB0aXRsZT0iZHVtbXkiIGNsYXNzPSJjaGVja3BvaW50IiBkYXRhLWNwPSIke2NwfSI+YCArIGA8cmVjdCB4PSIke2NwICogMTAgKyAzNX0iIHk9IjEwIiB3aWR0aD0iMTAiIGhlaWdodD0iMTAwIiBmaWxsPSJibGFjayIgZmlsbC1vcGFjaXR5PSIwIiAvPmA7CgogICAgICBpZiAoc2NvcmVzKSB7CiAgICAgICAgbWFya2VycyArPQogICAgICAgICAgYDxjaXJjbGUgY3g9IiR7Y3AgKiAxMCArIDQwfSIgY3k9IiR7c2NhbGVGY3Qoc2NvcmVzWzBdKX0iIHI9IjMiIHN0cm9rZS13aWR0aD0iMSIgc3Ryb2tlPSIke2NvbDF9IiBmaWxsPSIke2NvbDF9IiBmaWxsLW9wYWNpdHk9IjAuNSIgLz5gICsKICAgICAgICAgIGA8Y2lyY2xlIGN4PSIke2NwICogMTAgKyA0MH0iIGN5PSIke3NjYWxlRmN0KHNjb3Jlc1sxXSl9IiByPSIzIiBzdHJva2Utd2lkdGg9IjEiIHN0cm9rZT0iJHtjb2wyfSIgZmlsbD0iJHtjb2wyfSIgZmlsbC1vcGFjaXR5PSIwLjUiIC8+YDsKICAgICAgfQoKICAgICAgbWFya2VycyArPSAnPC9nPic7CiAgICB9CgogICAgcmV0dXJuIG1hcmtlcnM7CiAgfQoKICBmdW5jdGlvbiBzdmdCYWNrZ3JvdW5kKCkgewogICAgcmV0dXJuICc8cmVjdCB4PSIwIiB5PSIxIiB3aWR0aD0iNDAwIiBoZWlnaHQ9IjEzMiIgc3Ryb2tlPSIjRkZDRTAwIiBmaWxsPSIjMDgzMDRFIiAvPic7CiAgfQoKICBmdW5jdGlvbiBzdmdBeGlzKG1heCkgewogICAgcmV0dXJuICc8cGF0aCBkPSJNNDAsMTEwIEw0MCwxMCBNNDAsMTEwIEwzOTAsMTEwIiBzdHJva2U9IiNmZmYiIC8+JyArIGNyZWF0ZVRpY2tzKG1heCk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVUaWNrcyhtYXgpIHsKICAgIHZhciB0aWNrcyA9IGNyZWF0ZVRpY2tzSG9yeigpOwoKICAgIGZ1bmN0aW9uIGFkZFZUaWNrKGkpIHsKICAgICAgdmFyIHkgPSBzY2FsZUZjdChpKTsKCiAgICAgIHRpY2tzLnB1c2goJ000MCwnICsgeSArICcgTDM5MCwnICsgeSk7CiAgICAgIHN2Z1RpY2tUZXh0LnB1c2goCiAgICAgICAgJzx0ZXh0IHg9IjM1IiB5PSInICsgeSArICciIGZvbnQtc2l6ZT0iMTIiIGZvbnQtZmFtaWx5PSJSb2JvdG8sIEhlbHZldGljYSwgc2Fucy1zZXJpZiIgdGV4dC1hbmNob3I9ImVuZCIgZmlsbD0iI2ZmZiI+JyArIGZvcm1hdE51bWJlcihpKSArICc8L3RleHQ+JwogICAgICApOwogICAgfQoKICAgIC8vIHZlcnRpY2FsCiAgICAvLyBmaXJzdCB3ZSBjYWxjdWxhdGUgdGhlIHBvd2VyIG9mIDEwIHRoYXQgaXMgc21hbGxlciB0aGFuIHRoZSBtYXggbGltaXQKICAgIHZhciB2dGlja1N0ZXAgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZzEwKG1heCkpKTsKICAgIGlmIChsb2dzY2FsZSkgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgIGFkZFZUaWNrKHZ0aWNrU3RlcCk7CiAgICAgICAgdnRpY2tTdGVwIC89IDEwOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyB0aGlzIGNvdWxkIGJlIGJldHdlZW4gMSBhbmQgMTAgZ3JpZCBsaW5lcyAtIHNvIHdlIGFkanVzdCB0byBnaXZlIG5pY2VyIHNwYWNpbmdzCiAgICAgIGlmICh2dGlja1N0ZXAgPCBtYXggLyA1KSB7CiAgICAgICAgdnRpY2tTdGVwICo9IDI7CiAgICAgIH0gZWxzZSBpZiAodnRpY2tTdGVwID4gbWF4IC8gMikgewogICAgICAgIHZ0aWNrU3RlcCAvPSAyOwogICAgICB9CgogICAgICBmb3IgKHZhciB0aSA9IHZ0aWNrU3RlcDsgdGkgPD0gbWF4OyB0aSArPSB2dGlja1N0ZXApIHsKICAgICAgICBhZGRWVGljayh0aSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gJzxwYXRoIGQ9IicgKyB0aWNrcy5qb2luKCcgJykgKyAnIiBzdHJva2U9IiNmZmYiIG9wYWNpdHk9IjAuMyIgLz4nOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlVGlja3NIb3J6KCkgewogICAgdmFyIHRpY2tzID0gW107CiAgICBmb3IgKHZhciBpID0gNTsgaSA8PSAzNTsgaSArPSA1KSB7CiAgICAgIHZhciB4ID0gaSAqIDEwICsgNDA7CiAgICAgIHRpY2tzLnB1c2goJ00nICsgeCArICcsMTAgTCcgKyB4ICsgJywxMTAnKTsKICAgICAgc3ZnVGlja1RleHQucHVzaCgKICAgICAgICAnPHRleHQgeD0iJyArIHggKyAnIiB5PSIxMjUiIGZvbnQtc2l6ZT0iMTIiIGZvbnQtZmFtaWx5PSJSb2JvdG8sIEhlbHZldGljYSwgc2Fucy1zZXJpZiIgdGV4dC1hbmNob3I9Im1pZGRsZSIgZmlsbD0iI2ZmZiI+JyArIGkgKyAnPC90ZXh0PicKICAgICAgKTsKICAgIH0KCiAgICByZXR1cm4gdGlja3M7CiAgfQoKICBmdW5jdGlvbiBzdmdBdmVyYWdlUGF0aCgpIHsKICAgIHZhciBwYXRoID0gJyc7CiAgICBmb3IgKHZhciBmYWN0aW9uID0gMTsgZmFjdGlvbiA8IDM7IGZhY3Rpb24rKykgewogICAgICB2YXIgY29sID0gd2luZG93LkNPTE9SU1tmYWN0aW9uXTsKCiAgICAgIHZhciBwb2ludHMgPSBbXTsKICAgICAgZm9yICh2YXIgY3AgPSAxOyBjcCA8PSByZWdpb25TY29yZS5DUF9DT1VOVDsgY3ArKykgewogICAgICAgIHZhciBzY29yZSA9IHJlZ2lvblNjb3JlLmdldEF2Z1Njb3JlQXRDUChmYWN0aW9uLCBjcCk7CgogICAgICAgIHZhciB4ID0gY3AgKiAxMCArIDQwOwogICAgICAgIHZhciB5ID0gc2NhbGVGY3Qoc2NvcmUpOwogICAgICAgIHBvaW50cy5wdXNoKHggKyAnLCcgKyB5KTsKICAgICAgfQoKICAgICAgcGF0aCArPSAnPHBvbHlsaW5lIHBvaW50cz0iJyArIHBvaW50cy5qb2luKCcgJykgKyAnIiBzdHJva2U9IicgKyBjb2wgKyAnIiBzdHJva2UtZGFzaGFycmF5PSIzLDIiIG9wYWNpdHk9IjAuOCIgZmlsbD0ibm9uZSIvPic7CiAgICB9CgogICAgcmV0dXJuIHBhdGg7CiAgfQoKICBmdW5jdGlvbiBzZXRTY2FsZVR5cGUobWF4LCB1c2VMb2dTY2FsZSkgewogICAgbG9nc2NhbGUgPSB1c2VMb2dTY2FsZTsKICAgIGlmICh1c2VMb2dTY2FsZSkgewogICAgICBpZiAoIU1hdGgubG9nMTApCiAgICAgICAgTWF0aC5sb2cxMCA9IGZ1bmN0aW9uICh4KSB7CiAgICAgICAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7CiAgICAgICAgfTsKCiAgICAgIC8vIDAgY2Fubm90IGJlIGRpc3BsYXllZCBvbiBhIGxvZyBzY2FsZSwgc28gd2Ugc2V0IHRoZSBtaW5pbXVtIHRvIDAuMDAxIGFuZCBkaXZpZGUgYnkgbGcoMC4wMDEpPS0zCiAgICAgIHNjYWxlRmN0ID0gZnVuY3Rpb24gKHkpIHsKICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgxMCAtIChNYXRoLmxvZzEwKE1hdGgubWF4KDAuMDAxLCB5IC8gbWF4KSkgLyAzKSAqIDEwMCk7CiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICBzY2FsZUZjdCA9IGZ1bmN0aW9uICh5KSB7CiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoMTEwIC0gKHkgLyBtYXgpICogMTAwKTsKICAgICAgfTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGdldEZhY3Rpb25Db2xvcih0KSB7CiAgICByZXR1cm4gdCA9PT0gMCA/IHdpbmRvdy5DT0xPUlNbd2luZG93LlRFQU1fRU5MXSA6IHdpbmRvdy5DT0xPUlNbd2luZG93LlRFQU1fUkVTXTsKICB9CgogIGZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW0pIHsKICAgIGlmIChudW0gPj0gMV8wMDBfMDAwXzAwMCkgewogICAgICByZXR1cm4gbnVtIC8gMV8wMDBfMDAwXzAwMCArICdCJzsKICAgIH0gZWxzZSBpZiAobnVtID49IDFfMDAwXzAwMCkgewogICAgICByZXR1cm4gbnVtIC8gMV8wMDBfMDAwICsgJ00nOwogICAgfSBlbHNlIGlmIChudW0gPj0gMV8wMDApIHsKICAgICAgcmV0dXJuIG51bSAvIDFfMDAwICsgJ2snOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG51bS50b1N0cmluZygpOwogICAgfQogIH0KCiAgcmV0dXJuIGNyZWF0ZTsKfSkoKTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHJlcXVlc3RfaGFuZGxpbmcuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdyZXF1ZXN0X2hhbmRsaW5nJyk7Ci8qKgogKiBAZmlsZSBUaGlzIGZpbGUgY29udGFpbnMgZnVuY3Rpb25zIGFuZCB2YXJpYWJsZXMgcmVsYXRlZCB0byByZXF1ZXN0IGhhbmRsaW5nIGluIElJVEMuCiAqIE5vdGU6IG9ubHkgbWVhbnQgZm9yIHBvcnRhbC9saW5rcy9maWVsZHMgcmVxdWVzdCwgZXZlcnl0aGluZyBlbHNlIGRvZXMgbm90IGNvdW50IHRvd2FyZHMg4oCcbG9hZGluZ+KAnQogKiBAbW9kdWxlIHJlcXVlc3RfaGFuZGxpbmcKICovCgp3aW5kb3cuYWN0aXZlUmVxdWVzdHMgPSBbXTsKd2luZG93LmZhaWxlZFJlcXVlc3RDb3VudCA9IDA7CndpbmRvdy5zdGF0dXNUb3RhbE1hcFRpbGVzID0gMDsKd2luZG93LnN0YXR1c0NhY2hlZE1hcFRpbGVzID0gMDsKd2luZG93LnN0YXR1c1N1Y2Nlc3NNYXBUaWxlcyA9IDA7CndpbmRvdy5zdGF0dXNTdGFsZU1hcFRpbGVzID0gMDsKd2luZG93LnN0YXR1c0Vycm9yTWFwVGlsZXMgPSAwOwoKLyoqCiAqIE1hbmFnZXMgYW5kIHRyYWNrcyBhY3RpdmUgcmVxdWVzdHMgd2l0aGluIHRoZSBhcHBsaWNhdGlvbi4KICogQG5hbWVzcGFjZSB3aW5kb3cucmVxdWVzdHMKICovCndpbmRvdy5yZXF1ZXN0cyA9IGZ1bmN0aW9uICgpIHt9OwoKLy8gdGltZSBvZiBsYXN0IHJlZnJlc2gKd2luZG93LnJlcXVlc3RzLl9sYXN0UmVmcmVzaFRpbWUgPSAwOwoKLyoqCiAqIEFkZHMgYW4gQUpBWCByZXF1ZXN0IHRvIHRoZSBhY3RpdmVSZXF1ZXN0cyBhcnJheSBhbmQgdXBkYXRlcyB0aGUgc3RhdHVzLgogKgogKiBAZnVuY3Rpb24gd2luZG93LnJlcXVlc3RzLmFkZAogKiBAcGFyYW0ge2pxWEhSfSBhamF4IC0gVGhlIGpRdWVyeSB3cmFwcGVkIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC4KICovCndpbmRvdy5yZXF1ZXN0cy5hZGQgPSBmdW5jdGlvbiAoYWpheCkgewogIHdpbmRvdy5hY3RpdmVSZXF1ZXN0cy5wdXNoKGFqYXgpOwogIHdpbmRvdy5yZW5kZXJVcGRhdGVTdGF0dXMoKTsKfTsKCi8qKgogKiBSZW1vdmVzIGFuIEFKQVggcmVxdWVzdCBmcm9tIHRoZSBhY3RpdmVSZXF1ZXN0cyBhcnJheSBhbmQgdXBkYXRlcyB0aGUgc3RhdHVzLgogKgogKiBAZnVuY3Rpb24gd2luZG93LnJlcXVlc3RzLnJlbW92ZQogKiBAcGFyYW0ge2pxWEhSfSBhamF4IC0gVGhlIGpRdWVyeSB3cmFwcGVkIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC4KICovCndpbmRvdy5yZXF1ZXN0cy5yZW1vdmUgPSBmdW5jdGlvbiAoYWpheCkgewogIHdpbmRvdy5hY3RpdmVSZXF1ZXN0cy5zcGxpY2Uod2luZG93LmFjdGl2ZVJlcXVlc3RzLmluZGV4T2YoYWpheCksIDEpOwogIHdpbmRvdy5yZW5kZXJVcGRhdGVTdGF0dXMoKTsKfTsKCi8qKgogKiBBYm9ydHMgYWxsIGFjdGl2ZSBBSkFYIHJlcXVlc3RzIGFuZCByZXNldHMgcmVsYXRlZCB2YXJpYWJsZXMgYW5kIHN0YXR1cy4KICoKICogQGZ1bmN0aW9uIHdpbmRvdy5yZXF1ZXN0cy5hYm9ydAogKi8Kd2luZG93LnJlcXVlc3RzLmFib3J0ID0gZnVuY3Rpb24gKCkgewogICQuZWFjaCh3aW5kb3cuYWN0aXZlUmVxdWVzdHMsIGZ1bmN0aW9uIChpbmQsIGFjdFJlcSkgewogICAgaWYgKGFjdFJlcSkgYWN0UmVxLmFib3J0KCk7CiAgfSk7CgogIHdpbmRvdy5hY3RpdmVSZXF1ZXN0cyA9IFtdOwogIHdpbmRvdy5mYWlsZWRSZXF1ZXN0Q291bnQgPSAwOwoKICB3aW5kb3cucmVuZGVyVXBkYXRlU3RhdHVzKCk7Cn07CgovKioKICogU2V0cyBhIHRpbWVvdXQgZm9yIHRoZSBuZXh0IGF1dG9tYXRpYyByZWZyZXNoIG9mIGRhdGEuIEVuc3VyZXMgb25seSBvbmUgdGltZW91dCBpcyBxdWV1ZWQuCiAqIENhbiB1c2UgYW4gb3ZlcnJpZGUgdGltZSBpbiBtaWxsaXNlY29uZHMuCiAqIEVzcGVjaWFsbHkgdXNlZnVsIGlmIGEgbGl0dGxlIGRlbGF5IGlzIHJlcXVpcmVkLCBmb3IgZXhhbXBsZSB3aGVuIHpvb21pbmcuCiAqCiAqIEBmdW5jdGlvbiBzdGFydFJlZnJlc2hUaW1lb3V0CiAqIEBwYXJhbSB7bnVtYmVyfSBbb3ZlcnJpZGVdIC0gT3B0aW9uYWwgb3ZlcnJpZGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSBuZXh0IHJlZnJlc2guCiAqLwp3aW5kb3cuc3RhcnRSZWZyZXNoVGltZW91dCA9IGZ1bmN0aW9uIChvdmVycmlkZSkgewogIC8vIG1heSBiZSByZXF1aXJlZCB0byByZW1vdmUgJ3BhdXNlZCBkdXJpbmcgaW50ZXJhY3Rpb24nIG1lc3NhZ2UgaW4KICAvLyBzdGF0dXMgYmFyCiAgd2luZG93LnJlbmRlclVwZGF0ZVN0YXR1cygpOwogIGlmICh3aW5kb3cucmVmcmVzaFRpbWVvdXQpIGNsZWFyVGltZW91dCh3aW5kb3cucmVmcmVzaFRpbWVvdXQpOwogIGlmIChvdmVycmlkZSA9PT0gLTEpIHJldHVybjsgLy8gZG9uJ3Qgc2V0IGEgbmV3IHRpbWVvdXQKCiAgdmFyIHQgPSAwOwogIGlmIChvdmVycmlkZSkgewogICAgdCA9IG92ZXJyaWRlOwogICAgLy8gZW5zdXJlIG92ZXJyaWRlIGNhbid0IGNhdXNlIHRvbyBmYXN0IGEgcmVmcmVzaCBpZiByZXBlYXRlZGx5IHVzZWQgKGUuZy4gbG90cyBvZiBzY3JvbGxpbmcvem9vbWluZykKICAgIGxldCB0aW1lU2luY2VMYXN0UmVmcmVzaCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gd2luZG93LnJlcXVlc3RzLl9sYXN0UmVmcmVzaFRpbWU7CiAgICBpZiAodGltZVNpbmNlTGFzdFJlZnJlc2ggPCAwKSB0aW1lU2luY2VMYXN0UmVmcmVzaCA9IDA7IC8vIGluIGNhc2Ugb2YgY2xvY2sgYWRqdXN0bWVudHMKICAgIGlmICh0aW1lU2luY2VMYXN0UmVmcmVzaCA8IHdpbmRvdy5NSU5JTVVNX09WRVJSSURFX1JFRlJFU0ggKiAxMDAwKSB7CiAgICAgIHQgPSB3aW5kb3cuTUlOSU1VTV9PVkVSUklERV9SRUZSRVNIICogMTAwMCAtIHRpbWVTaW5jZUxhc3RSZWZyZXNoOwogICAgfQogIH0gZWxzZSB7CiAgICB0ID0gd2luZG93LlJFRlJFU0ggKiAxMDAwOwoKICAgIHZhciBhZGogPSB3aW5kb3cuWk9PTV9MRVZFTF9BREogKiAoMTggLSB3aW5kb3cubWFwLmdldFpvb20oKSk7CiAgICBpZiAoYWRqID4gMCkgdCArPSBhZGogKiAxMDAwOwogIH0KCiAgd2luZG93LnJlZnJlc2hUaW1lb3V0ID0gc2V0VGltZW91dCh3aW5kb3cucmVxdWVzdHMuX2NhbGxPblJlZnJlc2hGdW5jdGlvbnMsIHQpOwogIHdpbmRvdy5yZW5kZXJVcGRhdGVTdGF0dXMoKTsKfTsKCndpbmRvdy5yZXF1ZXN0cy5fb25SZWZyZXNoRnVuY3Rpb25zID0gW107CgovKioKICogQ2FsbHMgZWFjaCBmdW5jdGlvbiBpbiB0aGUgX29uUmVmcmVzaEZ1bmN0aW9ucyBhcnJheSwgaGFuZGxpbmcgdGhlIGF1dG9tYXRpYyByZWZyZXNoIHByb2Nlc3MuCiAqCiAqIEBwcml2YXRlCiAqIEBmdW5jdGlvbiB3aW5kb3cucmVxdWVzdHMuX2NhbGxPblJlZnJlc2hGdW5jdGlvbnMKICovCndpbmRvdy5yZXF1ZXN0cy5fY2FsbE9uUmVmcmVzaEZ1bmN0aW9ucyA9IGZ1bmN0aW9uICgpIHsKICB3aW5kb3cuc3RhcnRSZWZyZXNoVGltZW91dCgpOwoKICBpZiAod2luZG93LmlzSWRsZSgpKSB7CiAgICB3aW5kb3cucmVuZGVyVXBkYXRlU3RhdHVzKCk7CiAgICByZXR1cm47CiAgfQoKICB3aW5kb3cucmVxdWVzdHMuX2xhc3RSZWZyZXNoVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwoKICAkLmVhY2god2luZG93LnJlcXVlc3RzLl9vblJlZnJlc2hGdW5jdGlvbnMsIGZ1bmN0aW9uIChpbmQsIGYpIHsKICAgIGYoKTsKICB9KTsKfTsKCi8qKgogKiBBZGRzIGEgZnVuY3Rpb24gdG8gdGhlIGxpc3Qgb2YgZnVuY3Rpb25zIHRvIGJlIGNhbGxlZCBvbiBlYWNoIGF1dG9tYXRpYyByZWZyZXNoLgogKgogKiBAZnVuY3Rpb24gd2luZG93LnJlcXVlc3RzLmFkZFJlZnJlc2hGdW5jdGlvbgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmIC0gVGhlIGZ1bmN0aW9uIHRvIGFkZCB0byB0aGUgcmVmcmVzaCBwcm9jZXNzLgogKi8Kd2luZG93LnJlcXVlc3RzLmFkZFJlZnJlc2hGdW5jdGlvbiA9IGZ1bmN0aW9uIChmKSB7CiAgd2luZG93LnJlcXVlc3RzLl9vblJlZnJlc2hGdW5jdGlvbnMucHVzaChmKTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHNlYXJjaC5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3NlYXJjaCcpOwovKiBnbG9iYWwgSUlUQyAtLSBlc2xpbnQgKi8KCi8qKgogKiBQcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvciB0aGUgc2VhcmNoIHN5c3RlbSB3aXRoaW4gdGhlIGFwcGxpY2F0aW9uLgogKgogKiBZb3UgY2FuIGltcGxlbWVudCB5b3VyIG93biByZXN1bHQgcHJvdmlkZXIgYnkgbGlzdGVuaW5nIHRvIHRoZSBzZWFyY2ggaG9vazoKICogYGBgd2luZG93LmFkZEhvb2soJ3NlYXJjaCcsIGZ1bmN0aW9uKHF1ZXJ5KSB7fSk7YGBgLgogKgogKiBAZXhhbXBsZQogKiAvLyBBZGRpbmcgYSBzZWFyY2ggcmVzdWx0CiAqIHdpbmRvdy5hZGRIb29rKCdzZWFyY2gnLCBmdW5jdGlvbihxdWVyeSkgewogKiAgIHF1ZXJ5LmFkZFJlc3VsdCh7CiAqICAgICB0aXRsZTogJ015IFJlc3VsdCcsCiAqICAgICBwb3NpdGlvbjogTC5sYXRMbmcoMCwgMCkKICogICB9KTsKICogfSk7CiAqCiAqICBAbmFtZXNwYWNlIElJVEMuc2VhcmNoCiAqICBAbWVtYmVyb2YgSUlUQwogKi8KCi8qKgogKiBAbWVtYmVyT2YgSUlUQy5zZWFyY2gKICogQHR5cGVkZWYge09iamVjdH0gU2VhcmNoUXVlcnkKICogQHByb3BlcnR5IHtzdHJpbmd9IHRlcm0gLSBUaGUgdGVybSBmb3Igd2hpY2ggdGhlIHVzZXIgaGFzIHNlYXJjaGVkLgogKiBAcHJvcGVydHkge2Jvb2xlYW59IGNvbmZpcm1lZCAtIEluZGljYXRlcyBpZiB0aGUgdXNlciBoYXMgcHJlc3NlZCBlbnRlciBhZnRlciBzZWFyY2hpbmcuCiAqICAgICAgICAgICBZb3Ugc2hvdWxkIG5vdCBzZWFyY2ggb25saW5lIG9yIGRvIGhlYXZ5IHByb2Nlc3NpbmcgdW5sZXNzIHRoZSB1c2VyIGhhcyBjb25maXJtZWQgdGhlIHNlYXJjaCB0ZXJtLgogKiBAcHJvcGVydHkge0lJVEMuc2VhcmNoLlF1ZXJ5LmFkZFJlc3VsdH0gYWRkUmVzdWx0IC0gTWV0aG9kIHRvIGFkZCBhIHJlc3VsdCB0byB0aGUgcXVlcnkuCiAqIEBwcm9wZXJ0eSB7SUlUQy5zZWFyY2guUXVlcnkuYWRkUG9ydGFsUmVzdWx0fSBhZGRQb3J0YWxSZXN1bHQgLSBNZXRob2QgdG8gYWRkIGEgcG9ydGFsIHRvIHRoZSBxdWVyeS4KICovCgpJSVRDLnNlYXJjaCA9IHsKICBsYXN0U2VhcmNoOiBudWxsLAp9OwoKLyoqCiAqIEluaXRpYXRlcyBhIHNlYXJjaCB3aXRoIHRoZSBzcGVjaWZpZWQgdGVybSBhbmQgY29uZmlybWF0aW9uIHN0YXR1cy4KICoKICogQGZ1bmN0aW9uIElJVEMuc2VhcmNoLmRvU2VhcmNoCiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXJtIC0gVGhlIHNlYXJjaCB0ZXJtLgogKiBAcGFyYW0ge2Jvb2xlYW59IGNvbmZpcm1lZCAtIEluZGljYXRlcyBpZiB0aGUgc2VhcmNoIHRlcm0gaXMgY29uZmlybWVkLgogKi8KSUlUQy5zZWFyY2guZG9TZWFyY2ggPSBmdW5jdGlvbiAodGVybSwgY29uZmlybWVkKSB7CiAgY29uc3Qgc2VhcmNoVGVybSA9IHRlcm0udHJpbSgpOwogIGNvbnN0IHNlYXJjaENhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2hjYW5jZWwnKTsKCiAgaWYgKHNlYXJjaENhbmNlbEJ1dHRvbikgewogICAgc2VhcmNoQ2FuY2VsQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoJ3Zpc2libGUnLCBzZWFyY2hUZXJtLmxlbmd0aCA+IDApOwogIH0KCiAgLy8gTWluaW11bSAzIGNoYXJhY3RlcnMgZm9yIGF1dG9tYXRpYyBzZWFyY2gKICBpZiAoc2VhcmNoVGVybS5sZW5ndGggPCAzICYmICFjb25maXJtZWQpIHJldHVybjsKCiAgLy8gQXZvaWQgY2xlYXJpbmcgbGFzdCBjb25maXJtZWQgc2VhcmNoCiAgY29uc3QgbGFzdFNlYXJjaCA9IElJVEMuc2VhcmNoLmxhc3RTZWFyY2g7CiAgaWYgKGxhc3RTZWFyY2g/LmNvbmZpcm1lZCAmJiAhY29uZmlybWVkKSByZXR1cm47CgogIC8vIFByZXZlbnQgcmVwZWF0IG9mIGlkZW50aWNhbCBxdWVyeQogIGlmIChsYXN0U2VhcmNoPy5jb25maXJtZWQgPT09IGNvbmZpcm1lZCAmJiBsYXN0U2VhcmNoLnRlcm0gPT09IHNlYXJjaFRlcm0pIHJldHVybjsKCiAgaWYgKGxhc3RTZWFyY2gpIGxhc3RTZWFyY2guaGlkZSgpOwogIElJVEMuc2VhcmNoLmxhc3RTZWFyY2ggPSBudWxsOwoKICBpZiAoc2VhcmNoVGVybSA9PT0gJycpIHJldHVybjsKCiAgaWYgKHdpbmRvdy51c2VBcHBQYW5lcygpKSB3aW5kb3cuc2hvdygnaW5mbycpOwoKICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudWktdG9vbHRpcCcpLmZvckVhY2goKHRvb2x0aXApID0+IHRvb2x0aXAucmVtb3ZlKCkpOwoKICBJSVRDLnNlYXJjaC5sYXN0U2VhcmNoID0gbmV3IElJVEMuc2VhcmNoLlF1ZXJ5KHNlYXJjaFRlcm0sIGNvbmZpcm1lZCk7CiAgSUlUQy5zZWFyY2gubGFzdFNlYXJjaC5zaG93KCk7Cn07CgovKioKICogU2V0cyB1cCB0aGUgc2VhcmNoIGlucHV0IGZpZWxkIGFuZCBidXR0b24gZnVuY3Rpb25hbGl0eS4KICoKICogQGZ1bmN0aW9uIElJVEMuc2VhcmNoLnNldHVwCiAqLwpJSVRDLnNlYXJjaC5zZXR1cCA9IGZ1bmN0aW9uICgpIHsKICBjb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWFyY2gnKTsKICBjb25zdCBzZWFyY2hDYW5jZWxCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VhcmNoY2FuY2VsJyk7CiAgY29uc3QgZ2VvTG9jYXRpb25CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnV0dG9uZ2VvbG9jYXRpb24nKTsKICBsZXQgc2VhcmNoVGltZXI7CgogIGlmIChzZWFyY2hJbnB1dCkgewogICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7CiAgICAgIGlmIChlLmtleSAhPT0gJ0VudGVyJykgcmV0dXJuOwogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CgogICAgICBjb25zdCB0ZXJtID0gc2VhcmNoSW5wdXQudmFsdWUudHJpbSgpOwogICAgICBjbGVhclRpbWVvdXQoc2VhcmNoVGltZXIpOwogICAgICBJSVRDLnNlYXJjaC5kb1NlYXJjaCh0ZXJtLCB0cnVlKTsKICAgIH0pOwoKICAgIHNlYXJjaElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4gewogICAgICBjbGVhclRpbWVvdXQoc2VhcmNoVGltZXIpOwogICAgICBzZWFyY2hUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIGNvbnN0IHRlcm0gPSBzZWFyY2hJbnB1dC52YWx1ZS50cmltKCk7CiAgICAgICAgSUlUQy5zZWFyY2guZG9TZWFyY2godGVybSwgZmFsc2UpOwogICAgICB9LCAxMDApOwogICAgfSk7CiAgfQoKICBpZiAoc2VhcmNoQ2FuY2VsQnV0dG9uKSB7CiAgICBzZWFyY2hDYW5jZWxCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpOwoKICAgIHNlYXJjaENhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgaWYgKHNlYXJjaElucHV0KSB7CiAgICAgICAgc2VhcmNoSW5wdXQudmFsdWUgPSAnJzsKICAgICAgICBzZWFyY2hJbnB1dC5mb2N1cygpOwogICAgICAgIHNlYXJjaENhbmNlbEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7CgogICAgICAgIC8vIENsZWFyIHRoZSBjdXJyZW50IHNlYXJjaAogICAgICAgIGNsZWFyVGltZW91dChzZWFyY2hUaW1lcik7CiAgICAgICAgSUlUQy5zZWFyY2guZG9TZWFyY2goJycsIHRydWUpOwogICAgICB9CiAgICB9KTsKICB9CgogIGlmIChnZW9Mb2NhdGlvbkJ1dHRvbikgewogICAgZ2VvTG9jYXRpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgIHdpbmRvdy5tYXAubG9jYXRlKHsgc2V0VmlldzogdHJ1ZSwgbWF4Wm9vbTogMTMgfSk7CiAgICB9KTsKICB9Cn07CgovLyBSZWRpcmVjdCBhbGwgd2luZG93LnNlYXJjaCBhY2Nlc3MgdG8gSUlUQy5zZWFyY2gKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3NlYXJjaCcsIHsKICBnZXQoKSB7CiAgICByZXR1cm4gSUlUQy5zZWFyY2g7CiAgfSwKICBzZXQodmFsdWUpIHsKICAgIElJVEMuc2VhcmNoID0gdmFsdWU7CiAgfSwKICBjb25maWd1cmFibGU6IHRydWUsCn0pOwoKLyoKICogQGRlcHJlY2F0ZWQgLSB1c2UgcXVlcnkuYWRkUG9ydGFsUmVzdWx0CiAqLwp3aW5kb3cuc2VhcmNoLmFkZFNlYXJjaFJlc3VsdCA9IGZ1bmN0aW9uIChxdWVyeSwgZGF0YSwgZ3VpZCkgewogIHF1ZXJ5LmFkZFBvcnRhbFJlc3VsdChkYXRhLCBndWlkKTsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHNlYXJjaF9ob29rcy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3NlYXJjaF9ob29rcycpOwovKiBnbG9iYWwgTCAtLSBlc2xpbnQgKi8KCi8qKgogKiBIYW5kbGVzIHNlYXJjaC1yZWxhdGVkIGhvb2tzIGZvciB0aGUgSUlUQy5zZWFyY2ggbW9kdWxlLCBhZGRpbmcgdmFyaW91cyBzZWFyY2ggcmVzdWx0IHR5cGVzLgogKgogKiBUaGVzZSBmdW5jdGlvbnMgc3VwcGx5IGRlZmF1bHQgc2VhcmNoIHJlc3VsdHMgdG8gdGhlIElJVEMgc2VhcmNoIHN5c3RlbSBieSByZXNwb25kaW5nIHRvIGBzZWFyY2hgIGhvb2tzIHdpdGgKICogZGF0YSBmb3IgcG9ydGFscywgZ2VvZ3JhcGhpYyBjb29yZGluYXRlcywgT3BlblN0cmVldE1hcCBsb2NhdGlvbnMsIGFuZCBwb3J0YWwgR1VJRHMuCiAqCiAqIEBuYW1lc3BhY2UgaG9va3MKICogQG1lbWJlcm9mIElJVEMuc2VhcmNoCiAqLwoKLyoqCiAqIFNlYXJjaGVzIGZvciBwb3J0YWxzIGJ5IG1hdGNoaW5nIHRoZSBxdWVyeSB0ZXJtIGFnYWluc3QgcG9ydGFsIHRpdGxlcyBhbmQgYWRkcyBtYXRjaGVkIHJlc3VsdHMuCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSAtIFRoZSBzZWFyY2ggcXVlcnkgb2JqZWN0LgogKiBAZmlyZXMgaG9vayNzZWFyY2gKICovCndpbmRvdy5hZGRIb29rKCdzZWFyY2gnLCAocXVlcnkpID0+IHsKICBjb25zdCB0ZXJtID0gcXVlcnkudGVybS50b0xvd2VyQ2FzZSgpOwoKICBmb3IgKGNvbnN0IFtndWlkLCBwb3J0YWxdIG9mIE9iamVjdC5lbnRyaWVzKHdpbmRvdy5wb3J0YWxzKSkgewogICAgY29uc3QgZGF0YSA9IHBvcnRhbC5vcHRpb25zLmRhdGE7CiAgICBpZiAoIWRhdGEudGl0bGUpIGNvbnRpbnVlOwoKICAgIGlmIChkYXRhLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGVybSkpIHsKICAgICAgd2luZG93LnNlYXJjaC5hZGRTZWFyY2hSZXN1bHQocXVlcnksIGRhdGEsIGd1aWQpOwogICAgfQogIH0KfSk7CgovKioKICogU2VhcmNoZXMgZm9yIGdlb2dyYXBoaWNhbCBjb29yZGluYXRlcyBmb3JtYXR0ZWQgYXMgbGF0aXR1ZGUsIGxvbmdpdHVkZSBhbmQgYWRkcyB0aGUgcmVzdWx0cy4KICogU3VwcG9ydHMgYm90aCBkZWNpbWFsIGZvcm1hdCAoZS5nLiwgNTEuNTA3NCwgLTAuMTI3OCkgYW5kIERNUyBmb3JtYXQgKGUuZy4sIDUwwrAzMScwMy44Ik4gN8KwNTknMDUuMyJFKS4KICoKICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5IC0gVGhlIHNlYXJjaCBxdWVyeSBvYmplY3QuCiAqIEBmaXJlcyBob29rI3NlYXJjaAogKi8Kd2luZG93LmFkZEhvb2soJ3NlYXJjaCcsIChxdWVyeSkgPT4gewogIGNvbnN0IGFkZGVkID0gbmV3IFNldCgpOwoKICAvLyBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIGRlY2ltYWwgY29vcmRpbmF0ZXMKICBjb25zdCBkZWNpbWFsUmVnZXggPSAvWystXT9cZCtcLlxkKywgP1srLV0/XGQrXC5cZCsvZzsKICAvLyBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIERNUyBjb29yZGluYXRlcwogIGNvbnN0IGRtc1JlZ2V4ID0gLyhcZHsxLDN9KcKwKFxkezEsMn0pJyhcZHsxLDJ9KD86XC5cZCspPyk/IlxzKihbTlNdKSw/XHMqKFxkezEsM30pwrAoXGR7MSwyfSknKFxkezEsMn0oPzpcLlxkKyk/KT8iXHMqKFtFV10pL2c7CgogIC8vIENvbnZlcnQgRE1TIHRvIGRlY2ltYWwgZm9ybWF0CiAgY29uc3QgcGFyc2VETVMgPSAoZGVnLCBtaW4sIHNlYywgZGlyKSA9PiB7CiAgICBjb25zdCBkZWNpbWFsID0gcGFyc2VGbG9hdChkZWcpICsgcGFyc2VGbG9hdChtaW4pIC8gNjAgKyBwYXJzZUZsb2F0KHNlYykgLyAzNjAwOwogICAgcmV0dXJuIGRpciA9PT0gJ1MnIHx8IGRpciA9PT0gJ1cnID8gLWRlY2ltYWwgOiBkZWNpbWFsOwogIH07CgogIC8vIFVuaXZlcnNhbCBmdW5jdGlvbiBmb3IgYWRkaW5nIHNlYXJjaCByZXN1bHQKICBjb25zdCBhZGRSZXN1bHQgPSAobGF0LCBsbmcpID0+IHsKICAgIGNvbnN0IGxhdExuZ1N0cmluZyA9IGAke2xhdC50b0ZpeGVkKDYpfSwke2xuZy50b0ZpeGVkKDYpfWA7CiAgICBpZiAoYWRkZWQuaGFzKGxhdExuZ1N0cmluZykpIHJldHVybjsKICAgIGFkZGVkLmFkZChsYXRMbmdTdHJpbmcpOwoKICAgIHF1ZXJ5LmFkZFJlc3VsdCh7CiAgICAgIHRpdGxlOiBsYXRMbmdTdHJpbmcsCiAgICAgIGRlc2NyaXB0aW9uOiAnZ2VvIGNvb3JkaW5hdGVzJywKICAgICAgcG9zaXRpb246IEwubGF0TG5nKGxhdCwgbG5nKSwKICAgICAgb25TZWxlY3RlZDogKHJlc3VsdCkgPT4gewogICAgICAgIGZvciAoY29uc3QgW2d1aWQsIHBvcnRhbF0gb2YgT2JqZWN0LmVudHJpZXMod2luZG93LnBvcnRhbHMpKSB7CiAgICAgICAgICBjb25zdCB7IGxhdDogcExhdCwgbG5nOiBwTG5nIH0gPSBwb3J0YWwuZ2V0TGF0TG5nKCk7CiAgICAgICAgICBpZiAoYCR7cExhdC50b0ZpeGVkKDYpfSwke3BMbmcudG9GaXhlZCg2KX1gID09PSBsYXRMbmdTdHJpbmcpIHsKICAgICAgICAgICAgd2luZG93LnJlbmRlclBvcnRhbERldGFpbHMoZ3VpZCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgd2luZG93LnVybFBvcnRhbExMID0gW3Jlc3VsdC5wb3NpdGlvbi5sYXQsIHJlc3VsdC5wb3NpdGlvbi5sbmddOwogICAgICB9LAogICAgfSk7CiAgfTsKCiAgLy8gU2VhcmNoIGFuZCBwcm9jZXNzIGRlY2ltYWwgY29vcmRpbmF0ZXMKICBjb25zdCBkZWNpbWFsTWF0Y2hlcyA9IHF1ZXJ5LnRlcm0ucmVwbGFjZSgvJTJDL2dpLCAnLCcpLm1hdGNoKGRlY2ltYWxSZWdleCk7CiAgaWYgKGRlY2ltYWxNYXRjaGVzKSB7CiAgICBkZWNpbWFsTWF0Y2hlcy5mb3JFYWNoKChsb2NhdGlvbikgPT4gewogICAgICBjb25zdCBbbGF0LCBsbmddID0gbG9jYXRpb24uc3BsaXQoJywnKS5tYXAoTnVtYmVyKTsKICAgICAgYWRkUmVzdWx0KGxhdCwgbG5nKTsKICAgIH0pOwogIH0KCiAgLy8gU2VhcmNoIGFuZCBwcm9jZXNzIERNUyBjb29yZGluYXRlcwogIGNvbnN0IGRtc01hdGNoZXMgPSBBcnJheS5mcm9tKHF1ZXJ5LnRlcm0ubWF0Y2hBbGwoZG1zUmVnZXgpKTsKICBkbXNNYXRjaGVzLmZvckVhY2goKG1hdGNoKSA9PiB7CiAgICBjb25zdCBsYXQgPSBwYXJzZURNUyhtYXRjaFsxXSwgbWF0Y2hbMl0sIG1hdGNoWzNdLCBtYXRjaFs0XSk7CiAgICBjb25zdCBsbmcgPSBwYXJzZURNUyhtYXRjaFs1XSwgbWF0Y2hbNl0sIG1hdGNoWzddLCBtYXRjaFs4XSk7CiAgICBhZGRSZXN1bHQobGF0LCBsbmcpOwogIH0pOwp9KTsKCi8qKgogKiBTZWFyY2hlcyBmb3IgcmVzdWx0cyBvbiBPcGVuU3RyZWV0TWFwIGJhc2VkIG9uIHRoZSBxdWVyeSB0ZXJtLCBjb25zaWRlcmluZyBtYXAgdmlldyBib3VuZGFyaWVzLgogKgogKiBAcGFyYW0ge09iamVjdH0gcXVlcnkgLSBUaGUgc2VhcmNoIHF1ZXJ5IG9iamVjdC4KICogQGZpcmVzIGhvb2sjc2VhcmNoCiAqLwp3aW5kb3cuYWRkSG9vaygnc2VhcmNoJywgYXN5bmMgKHF1ZXJ5KSA9PiB7CiAgaWYgKCFxdWVyeS5jb25maXJtZWQpIHJldHVybjsKCiAgY29uc3QgbWFwQm91bmRzID0gd2luZG93Lm1hcC5nZXRCb3VuZHMoKTsKICBjb25zdCB2aWV3Ym94ID0gYCZ2aWV3Ym94PSR7bWFwQm91bmRzLmdldFNvdXRoV2VzdCgpLmxuZ30sJHttYXBCb3VuZHMuZ2V0U291dGhXZXN0KCkubGF0fSwke21hcEJvdW5kcy5nZXROb3J0aEVhc3QoKS5sbmd9LCR7bWFwQm91bmRzLmdldE5vcnRoRWFzdCgpLmxhdH1gOwogIC8vIEJvdW5kZWQgc2VhcmNoIGFsbG93cyBhbWVuaXR5LW9ubHkgc2VhcmNoZXMgKGUuZy4gImFtZW5pdHk9dG9pbGV0IikgdmlhIHNwZWNpYWwgcGhyYXNlcwogIC8vIGh0dHBzOi8vd2lraS5vcGVuc3RyZWV0bWFwLm9yZy93aWtpL05vbWluYXRpbS9TcGVjaWFsX1BocmFzZXMvRU4KICBjb25zdCBib3VuZGVkID0gJyZib3VuZGVkPTEnOwoKICBjb25zdCByZXN1bHRNYXAgPSBuZXcgU2V0KCk7CiAgbGV0IHJlc3VsdENvdW50ID0gMDsKCiAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hSZXN1bHRzKGlzVmlld2JveFJlc3VsdCkgewogICAgdHJ5IHsKICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt3aW5kb3cuTk9NSU5BVElNfSR7ZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5LnRlcm0pfSR7aXNWaWV3Ym94UmVzdWx0ID8gdmlld2JveCArIGJvdW5kZWQgOiB2aWV3Ym94fWApOwogICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwoKICAgICAgaWYgKGlzVmlld2JveFJlc3VsdCAmJiBkYXRhLmxlbmd0aCA9PT0gMCkgewogICAgICAgIC8vIElmIG5vIHJlc3VsdHMgZm91bmQgd2l0aGluIHRoZSB2aWV3Ym94LCB0cnkgYSBicm9hZGVyIHNlYXJjaAogICAgICAgIGF3YWl0IGZldGNoUmVzdWx0cyhmYWxzZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgaWYgKCFpc1ZpZXdib3hSZXN1bHQgJiYgcmVzdWx0Q291bnQgPT09IDAgJiYgZGF0YS5sZW5ndGggPT09IDApIHsKICAgICAgICAvLyBJZiBubyByZXN1bHRzIGF0IGFsbAogICAgICAgIHF1ZXJ5LmFkZFJlc3VsdCh7CiAgICAgICAgICB0aXRsZTogJ05vIHJlc3VsdHMgb24gT3BlblN0cmVldE1hcCcsCiAgICAgICAgICBpY29uOiAnLy93d3cub3BlbnN0cmVldG1hcC5vcmcvZmF2aWNvbi5pY28nLAogICAgICAgICAgb25TZWxlY3RlZDogKCkgPT4gdHJ1ZSwKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHJlc3VsdENvdW50ICs9IGRhdGEubGVuZ3RoOwoKICAgICAgZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7CiAgICAgICAgaWYgKHJlc3VsdE1hcC5oYXMoaXRlbS5wbGFjZV9pZCkpIHJldHVybjsgLy8gZHVwbGljYXRlCiAgICAgICAgcmVzdWx0TWFwLmFkZChpdGVtLnBsYWNlX2lkKTsKCiAgICAgICAgY29uc3QgcmVzdWx0ID0gewogICAgICAgICAgdGl0bGU6IGl0ZW0uZGlzcGxheV9uYW1lLAogICAgICAgICAgZGVzY3JpcHRpb246IGBUeXBlOiAke2l0ZW0udHlwZX1gLAogICAgICAgICAgcG9zaXRpb246IEwubGF0TG5nKHBhcnNlRmxvYXQoaXRlbS5sYXQpLCBwYXJzZUZsb2F0KGl0ZW0ubG9uKSksCiAgICAgICAgICBpY29uOiBpdGVtLmljb24sCiAgICAgICAgfTsKCiAgICAgICAgaWYgKGl0ZW0uZ2VvanNvbikgewogICAgICAgICAgcmVzdWx0LmxheWVyID0gTC5nZW9Kc29uKGl0ZW0uZ2VvanNvbiwgewogICAgICAgICAgICBpbnRlcmFjdGl2ZTogZmFsc2UsCiAgICAgICAgICAgIGNvbG9yOiAncmVkJywKICAgICAgICAgICAgb3BhY2l0eTogMC43LAogICAgICAgICAgICB3ZWlnaHQ6IDIsCiAgICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgICAgICBwb2ludFRvTGF5ZXI6IChmZWF0dXJlRGF0YSwgbGF0TG5nKSA9PgogICAgICAgICAgICAgIEwubWFya2VyKGxhdExuZywgewogICAgICAgICAgICAgICAgaWNvbjogTC5kaXZJY29uLmNvbG9yZWRTdmcoJ3JlZCcpLAogICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0uZGlzcGxheV9uYW1lLAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXRlbS5ib3VuZGluZ2JveCkgewogICAgICAgICAgY29uc3QgW3NvdXRoLCBub3J0aCwgd2VzdCwgZWFzdF0gPSBpdGVtLmJvdW5kaW5nYm94OwogICAgICAgICAgcmVzdWx0LmJvdW5kcyA9IG5ldyBMLkxhdExuZ0JvdW5kcyhMLmxhdExuZyhwYXJzZUZsb2F0KHNvdXRoKSwgcGFyc2VGbG9hdCh3ZXN0KSksIEwubGF0TG5nKHBhcnNlRmxvYXQobm9ydGgpLCBwYXJzZUZsb2F0KGVhc3QpKSk7CiAgICAgICAgfQoKICAgICAgICBxdWVyeS5hZGRSZXN1bHQocmVzdWx0KTsKICAgICAgfSk7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBPU00gZGF0YTonLCBlcnJvcik7CiAgICB9CiAgfQoKICAvLyBTdGFydCB3aXRoIHZpZXdib3gtYm91bmRlZCBzZWFyY2gKICBhd2FpdCBmZXRjaFJlc3VsdHModHJ1ZSk7Cn0pOwoKLyoqCiAqIFNlYXJjaGVzIGJ5IEdVSUQgaW4gdGhlIHF1ZXJ5IHRlcm0uCiAqCiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSAtIFRoZSBzZWFyY2ggcXVlcnkgb2JqZWN0LgogKiBAZmlyZXMgaG9vayNzZWFyY2gKICovCndpbmRvdy5hZGRIb29rKCdzZWFyY2gnLCBhc3luYyAocXVlcnkpID0+IHsKICBjb25zdCBndWlkUmVnZXggPSAvWzAtOWEtZl17MzJ9XC5bMC05YS1mXXsyfS87CiAgY29uc3QgbWF0Y2ggPSBxdWVyeS50ZXJtLm1hdGNoKGd1aWRSZWdleCk7CgogIGlmIChtYXRjaCkgewogICAgY29uc3QgZ3VpZCA9IG1hdGNoWzBdOwogICAgY29uc3QgZGF0YSA9IHdpbmRvdy5wb3J0YWxEZXRhaWwuZ2V0KGd1aWQpOwoKICAgIGlmIChkYXRhKSB7CiAgICAgIHdpbmRvdy5zZWFyY2guYWRkU2VhcmNoUmVzdWx0KHF1ZXJ5LCBkYXRhLCBndWlkKTsKICAgIH0gZWxzZSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZmV0Y2hlZERhdGEgPSBhd2FpdCB3aW5kb3cucG9ydGFsRGV0YWlsLnJlcXVlc3QoZ3VpZCk7CiAgICAgICAgd2luZG93LnNlYXJjaC5hZGRTZWFyY2hSZXN1bHQocXVlcnksIGZldGNoZWREYXRhLCBndWlkKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwb3J0YWwgZGV0YWlsczonLCBlcnJvcik7CiAgICAgIH0KICAgIH0KICB9Cn0pOwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogc2VhcmNoX3F1ZXJ5LmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygnc2VhcmNoX3F1ZXJ5Jyk7Ci8qIGdsb2JhbCBJSVRDLCBMIC0tIGVzbGludCAqLwoKLyoqCiAqIEBtZW1iZXJPZiBJSVRDLnNlYXJjaC5RdWVyeQogKiBAdHlwZWRlZiB7T2JqZWN0fSBTZWFyY2hSZXN1bHQKICogQHByb3BlcnR5IHtzdHJpbmd9IHRpdGxlIC0gVGhlIGxhYmVsIGZvciB0aGlzIHJlc3VsdCAoSFRNTC1mb3JtYXR0ZWQpLgogKiBAcHJvcGVydHkge3N0cmluZ30gW2Rlc2NyaXB0aW9uXSAtIFNlY29uZGFyeSBpbmZvcm1hdGlvbiBmb3IgdGhpcyByZXN1bHQgKEhUTUwtZm9ybWF0dGVkKS4KICogQHByb3BlcnR5IHtMLkxhdExuZ30gW3Bvc2l0aW9uXSAtIFBvc2l0aW9uIG9mIHRoaXMgcmVzdWx0LgogKiBAcHJvcGVydHkge0wuTGF0TG5nQm91bmRzfSBbYm91bmRzXSAtIEJvdW5kcyBvZiB0aGlzIHJlc3VsdC4KICogQHByb3BlcnR5IHtMLkxheWVyfG51bGx9IFtsYXllcl0gLSBMYXllciB0byBiZSBhZGRlZCB0byB0aGUgbWFwIG9uIHJlc3VsdCBzZWxlY3Rpb24uCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaWNvbl0gLSBVUkwgdG8gYSAxMngxMnB4IGljb24gZm9yIHRoZSByZXN1bHQgbGlzdC4KICogQHByb3BlcnR5IHtJSVRDLnNlYXJjaC5RdWVyeS5vblNlbGVjdGVkQ2FsbGJhY2t9IFtvblNlbGVjdGVkXSAtIEhhbmRsZXIgY2FsbGVkIHdoZW4gcmVzdWx0IGlzIHNlbGVjdGVkLgogKiAgICAgICAgICAgTWF5IHJldHVybiBgdHJ1ZWAgdG8gcHJldmVudCB0aGUgbWFwIGZyb20gYmVpbmcgcmVwb3NpdGlvbmVkLgogKiAgICAgICAgICAgWW91IG1heSByZXBvc2l0aW9uIHRoZSBtYXAgeW91cnNlbGYgb3IgZG8gb3RoZXIgd29yay4KICogQHByb3BlcnR5IHtJSVRDLnNlYXJjaC5RdWVyeS5vblJlbW92ZUNhbGxiYWNrfSBbb25SZW1vdmVdIC0gSGFuZGxlciBjYWxsZWQgd2hlbiByZXN1bHQgaXMgcmVtb3ZlZCBmcm9tIG1hcC4KICogICAgICAgICAgIChiZWNhdXNlIGFub3RoZXIgcmVzdWx0IGhhcyBiZWVuIHNlbGVjdGVkIG9yIHRoZSBzZWFyY2ggd2FzIGNhbmNlbGxlZCBieSB0aGUgdXNlcikuCiAqLwoKLyoqCiAqIEBtZW1iZXJPZiBJSVRDLnNlYXJjaC5RdWVyeQogKiBAY2FsbGJhY2sgb25TZWxlY3RlZENhbGxiYWNrCiAqIEBwYXJhbSB7SUlUQy5zZWFyY2guUXVlcnkuU2VhcmNoUmVzdWx0fSByZXN1bHQgLSBUaGUgc2VsZWN0ZWQgc2VhcmNoIHJlc3VsdC4KICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIHNlbGVjdGlvbi4KICogQHJldHVybnMge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIHRvIHByZXZlbnQgbWFwIHJlcG9zaXRpb25pbmcuCiAqLwoKLyoqCiAqIEBtZW1iZXJPZiBJSVRDLnNlYXJjaC5RdWVyeQogKiBAY2FsbGJhY2sgb25SZW1vdmVDYWxsYmFjawogKiBAcGFyYW0ge0lJVEMuc2VhcmNoLlF1ZXJ5LlNlYXJjaFJlc3VsdH0gcmVzdWx0IC0gVGhlIHNlYXJjaCByZXN1bHQgdGhhdCBpcyBiZWluZyByZW1vdmVkLgogKiBAcmV0dXJucyB7dm9pZH0gLSBObyByZXR1cm4gdmFsdWUuCiAqLwoKLyoqCiAqIFJlcHJlc2VudHMgYSBzZWFyY2ggcXVlcnkgd2l0aGluIHRoZSBJSVRDIHNlYXJjaCBtb2R1bGUsIG1hbmFnaW5nIHF1ZXJ5IHN0YXRlLCByZXN1bHRzLCBhbmQgVUkgcmVuZGVyaW5nLgogKgogKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgdG8gaGFuZGxlIHNlYXJjaCBvcGVyYXRpb25zIHN1Y2ggYXMgZGlzcGxheWluZyBhbmQgaW50ZXJhY3Rpbmcgd2l0aCByZXN1bHRzLAogKiBpbmNsdWRpbmcgc2VsZWN0aW9uLCBob3ZlciBhY3Rpb25zLCBhbmQgbWFwIGFkanVzdG1lbnRzLiBIb29rcyBmb3IgY3VzdG9tIHNlYXJjaCBhY3Rpb25zIGFyZSB0cmlnZ2VyZWQgd2hlbgogKiBhIG5ldyBzZWFyY2ggcXVlcnkgaXMgaW5pdGlhbGl6ZWQuCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaAogKiBAY2xhc3MKICovCmNsYXNzIFF1ZXJ5IHsKICAvKioKICAgKiBJbml0aWFsaXplcyB0aGUgc2VhcmNoIHF1ZXJ5LCBzZXR0aW5nIHVwIFVJIGVsZW1lbnRzIGFuZCB0cmlnZ2VyaW5nIHRoZSAnc2VhcmNoJyBob29rLgogICAqCiAgICogQGNvbnN0cnVjdG9yCiAgICogQHBhcmFtIHtzdHJpbmd9IHRlcm0gLSBUaGUgc2VhcmNoIHRlcm0uCiAgICogQHBhcmFtIHtib29sZWFufSBjb25maXJtZWQgLSBJbmRpY2F0ZXMgaWYgdGhlIHNlYXJjaCBpcyBjb25maXJtZWQgKGUuZy4sIGJ5IHByZXNzaW5nIEVudGVyKS4KICAgKi8KICBjb25zdHJ1Y3Rvcih0ZXJtLCBjb25maXJtZWQpIHsKICAgIHRoaXMudGVybSA9IHRlcm07CiAgICB0aGlzLmNvbmZpcm1lZCA9IGNvbmZpcm1lZDsKICAgIHRoaXMucmVzdWx0cyA9IFtdOwogICAgdGhpcy5yZXN1bHRzVmlldyA9IG5ldyBJSVRDLnNlYXJjaC5RdWVyeVJlc3VsdHNWaWV3KHRlcm0sIGNvbmZpcm1lZCk7CgogICAgd2luZG93LnJ1bkhvb2tzKCdzZWFyY2gnLCB0aGlzKTsKICB9CgogIC8qKgogICAqIERpc3BsYXlzIHRoZSBzZWFyY2ggcXVlcnkgcmVzdWx0cyBpbiB0aGUgc3BlY2lmaWVkIHJlc3VsdHNWaWV3IGNvbnRhaW5lci4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeQogICAqIEBmdW5jdGlvbiBzaG93CiAgICogQHByaXZhdGUKICAgKi8KICBzaG93KCkgewogICAgdGhpcy5yZXN1bHRzVmlldy5yZW5kZXJJbignI3NlYXJjaHdyYXBwZXInKTsKICB9CgogIC8qKgogICAqIEhpZGVzIGFuZCByZW1vdmVzIHRoZSBjdXJyZW50IHNlYXJjaCByZXN1bHRzLCBjbGVhcmluZyBzZWxlY3Rpb24gYW5kIGhvdmVyIHN0YXRlcy4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeQogICAqIEBmdW5jdGlvbiBzaG93CiAgICogQHByaXZhdGUKICAgKi8KICBoaWRlKCkgewogICAgdGhpcy5yZXN1bHRzVmlldy5yZW1vdmUoKTsKICAgIHRoaXMucmVtb3ZlU2VsZWN0ZWRSZXN1bHQoKTsKICAgIHRoaXMucmVtb3ZlSG92ZXJSZXN1bHQoKTsKICB9CgogIC8qKgogICAqIEFkZHMgYSBzZWFyY2ggcmVzdWx0IHRvIHRoZSBxdWVyeSBhbmQgdHJpZ2dlcnMgcmUtcmVuZGVyaW5nIG9mIHRoZSByZXN1bHRzIGxpc3QuCiAgICoKICAgKiBAbWVtYmVyb2YgSUlUQy5zZWFyY2guUXVlcnkKICAgKiBAZnVuY3Rpb24gYWRkUmVzdWx0CiAgICogQHBhcmFtIHtJSVRDLnNlYXJjaC5RdWVyeS5TZWFyY2hSZXN1bHR9IHJlc3VsdCAtIFRoZSBzZWFyY2ggcmVzdWx0IHRvIGFkZCwgaW5jbHVkaW5nIHRpdGxlLCBwb3NpdGlvbiwgYW5kIGludGVyYWN0aW9ucy4KICAgKi8KICBhZGRSZXN1bHQocmVzdWx0KSB7CiAgICB0aGlzLnJlc3VsdHMucHVzaChyZXN1bHQpOwogICAgdGhpcy5yZW5kZXJSZXN1bHRzKCk7CiAgfQoKICAvKioKICAgKiBBZGRzIGEgc2VhcmNoIHJlc3VsdCBmb3IgYSBwb3J0YWwgdG8gdGhlIHNlYXJjaCBxdWVyeSByZXN1bHRzLgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5CiAgICogQGZ1bmN0aW9uIGFkZFBvcnRhbFJlc3VsdAogICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIHBvcnRhbCBkYXRhIGZvciB0aGUgc2VhcmNoIHJlc3VsdC4gVGhpcyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBzdWNoIGFzIHRpdGxlLCB0ZWFtLCBsZXZlbCwgaGVhbHRoLCBldGMuCiAgICogQHBhcmFtIHtzdHJpbmd9IGd1aWQgLSBHVUlEIGlmIHRoZSBwb3J0YWwuCiAgICovCiAgYWRkUG9ydGFsUmVzdWx0KGRhdGEsIGd1aWQpIHsKICAgIGNvbnN0IHRlYW0gPSB3aW5kb3cudGVhbVN0cmluZ1RvSWQoZGF0YS50ZWFtKTsKICAgIGNvbnN0IGNvbG9yID0gdGVhbSA9PT0gd2luZG93LlRFQU1fTk9ORSA/ICcjQ0NDJyA6IHdpbmRvdy5DT0xPUlNbdGVhbV07CiAgICBjb25zdCBsYXRMbmcgPSBMLmxhdExuZyhkYXRhLmxhdEU2IC8gMWU2LCBkYXRhLmxuZ0U2IC8gMWU2KTsKCiAgICB0aGlzLmFkZFJlc3VsdCh7CiAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLAogICAgICBkZXNjcmlwdGlvbjogYCR7d2luZG93LlRFQU1fU0hPUlROQU1FU1t0ZWFtXX0sIEwke2RhdGEubGV2ZWx9LCAke2RhdGEuaGVhbHRofSUsICR7ZGF0YS5yZXNDb3VudH0gUmVzb25hdG9yc2AsCiAgICAgIHBvc2l0aW9uOiBsYXRMbmcsCiAgICAgIGljb246IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7YnRvYSgnXAo8c3ZnIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxMiIgaGVpZ2h0PSIxMiIgdmVyc2lvbj0iMS4xIj5cCgk8ZyBzdHlsZT0iZmlsbDolQ09MT1IlO3N0cm9rZTpub25lIj5cCgkJPHBhdGggZD0ibSA2LDEyIC0yLC0xMiAgNCwwIHoiIC8+XAoJCTxwYXRoIGQ9Im0gNiwxMiAtNCwgLTggIDgsMCB6IiAvPlwKCQk8cGF0aCBkPSJtIDYsMTIgLTYsIC00IDEyLDAgeiIgLz5cCgk8L2c+XAo8L3N2Zz5cCicucmVwbGFjZSgvJUNPTE9SJS9nLCBjb2xvcikpfWAsCgogICAgICBvblNlbGVjdGVkKHJlc3VsdCwgZXZlbnQpIHsKICAgICAgICBjb25zdCB7IHBvc2l0aW9uIH0gPSByZXN1bHQ7CgogICAgICAgIGlmIChldmVudC50eXBlID09PSAnZGJsY2xpY2snKSB7CiAgICAgICAgICB3aW5kb3cuem9vbVRvQW5kU2hvd1BvcnRhbChndWlkLCBsYXRMbmcpOwogICAgICAgIH0gZWxzZSBpZiAod2luZG93LnBvcnRhbHNbZ3VpZF0pIHsKICAgICAgICAgIGlmICghd2luZG93Lm1hcC5nZXRCb3VuZHMoKS5jb250YWlucyhwb3NpdGlvbikpIHsKICAgICAgICAgICAgd2luZG93Lm1hcC5zZXRWaWV3KHBvc2l0aW9uKTsKICAgICAgICAgIH0KICAgICAgICAgIHdpbmRvdy5yZW5kZXJQb3J0YWxEZXRhaWxzKGd1aWQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB3aW5kb3cuc2VsZWN0UG9ydGFsQnlMYXRMbmcobGF0TG5nKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0sCiAgICB9KTsKICB9CgogIC8qKgogICAqIEhhbmRsZXMga2V5Ym9hcmQgaW50ZXJhY3Rpb25zIGZvciBzZWxlY3RpbmcgYSByZXN1bHQgd2l0aCBFbnRlciBvciBTcGFjZSBrZXlzLgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5CiAgICogQGZ1bmN0aW9uIGhhbmRsZUtleVByZXNzCiAgICogQHBhcmFtIHtFdmVudH0gZXYgLSBUaGUga2V5Ym9hcmQgZXZlbnQuCiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdCAtIFRoZSByZXN1bHQgYmVpbmcgaW50ZXJhY3RlZCB3aXRoLgogICAqIEBwcml2YXRlCiAgICovCiAgaGFuZGxlS2V5UHJlc3MoZXYsIHJlc3VsdCkgewogICAgaWYgKGV2LmtleSA9PT0gJyAnIHx8IGV2LmtleSA9PT0gJ0VudGVyJykgewogICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICBjb25zdCB0eXBlID0gZXYua2V5ID09PSAnICcgPyAnY2xpY2snIDogJ2RibGNsaWNrJzsKICAgICAgdGhpcy5vblJlc3VsdFNlbGVjdGVkKHJlc3VsdCwgeyAuLi5ldiwgdHlwZSB9KTsKICAgIH0KICB9CgogIC8qKgogICAqIFJlbmRlcnMgYWxsIHNlYXJjaCByZXN1bHRzIHRocm91Z2ggdGhlIHJlc3VsdHNWaWV3IGNsYXNzIGFuZCBzZXRzIHVwIGV2ZW50IGhhbmRsaW5nIGZvciBlYWNoIHJlc3VsdC4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeQogICAqIEBmdW5jdGlvbiByZW5kZXJSZXN1bHRzCiAgICogQHByaXZhdGUKICAgKi8KICByZW5kZXJSZXN1bHRzKCkgewogICAgdGhpcy5yZXN1bHRzVmlldy5yZW5kZXJSZXN1bHRzKHRoaXMucmVzdWx0cywgKHJlc3VsdCwgZXZlbnQpID0+IHRoaXMuaGFuZGxlUmVzdWx0SW50ZXJhY3Rpb24ocmVzdWx0LCBldmVudCkpOwogIH0KCiAgLyoqCiAgICogTWFuYWdlcyBpbnRlcmFjdGlvbnMgd2l0aCBzZWFyY2ggcmVzdWx0cywgc3VjaCBhcyBjbGlja3MsIGhvdmVycywgYW5kIGtleWJvYXJkIGV2ZW50cy4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeQogICAqIEBmdW5jdGlvbiBoYW5kbGVSZXN1bHRJbnRlcmFjdGlvbgogICAqIEBwYXJhbSB7T2JqZWN0fSByZXN1bHQgLSBUaGUgcmVzdWx0IGJlaW5nIGludGVyYWN0ZWQgd2l0aC4KICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhc3NvY2lhdGVkIHdpdGggdGhlIGludGVyYWN0aW9uLgogICAqIEBwcml2YXRlCiAgICovCiAgaGFuZGxlUmVzdWx0SW50ZXJhY3Rpb24ocmVzdWx0LCBldmVudCkgewogICAgc3dpdGNoIChldmVudC50eXBlKSB7CiAgICAgIGNhc2UgJ2NsaWNrJzoKICAgICAgY2FzZSAnZGJsY2xpY2snOgogICAgICAgIHRoaXMub25SZXN1bHRTZWxlY3RlZChyZXN1bHQsIGV2ZW50KTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAnbW91c2VvdmVyJzoKICAgICAgICB0aGlzLm9uUmVzdWx0SG92ZXJTdGFydChyZXN1bHQpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdtb3VzZW91dCc6CiAgICAgICAgdGhpcy5vblJlc3VsdEhvdmVyRW5kKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2tleWRvd24nOgogICAgICAgIHRoaXMuaGFuZGxlS2V5UHJlc3MoZXZlbnQsIHJlc3VsdCk7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICAvKioKICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbWFwIGxheWVyIGZvciB0aGUgZ2l2ZW4gc2VhcmNoIHJlc3VsdCwgd2hpY2ggY291bGQgaW5jbHVkZSBtYXJrZXJzIG9yIHNoYXBlcy4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeQogICAqIEBmdW5jdGlvbiByZXN1bHRMYXllcgogICAqIEBwYXJhbSB7T2JqZWN0fSByZXN1bHQgLSBUaGUgc2VhcmNoIHJlc3VsdCBvYmplY3QuCiAgICogQHJldHVybnMge0wuTGF5ZXJ9IC0gVGhlIGdlbmVyYXRlZCBsYXllciBmb3IgdGhlIHJlc3VsdC4KICAgKiBAcHJpdmF0ZQogICAqLwogIHJlc3VsdExheWVyKHJlc3VsdCkgewogICAgaWYgKCFyZXN1bHQubGF5ZXIpIHsKICAgICAgcmVzdWx0LmxheWVyID0gTC5sYXllckdyb3VwKCk7CgogICAgICBpZiAocmVzdWx0LnBvc2l0aW9uKSB7CiAgICAgICAgTC5tYXJrZXIocmVzdWx0LnBvc2l0aW9uLCB7CiAgICAgICAgICBpY29uOiBMLmRpdkljb24uY29sb3JlZFN2ZygncmVkJyksCiAgICAgICAgICB0aXRsZTogcmVzdWx0LnRpdGxlLAogICAgICAgIH0pLmFkZFRvKHJlc3VsdC5sYXllcik7CiAgICAgIH0KCiAgICAgIGlmIChyZXN1bHQuYm91bmRzKSB7CiAgICAgICAgTC5yZWN0YW5nbGUocmVzdWx0LmJvdW5kcywgewogICAgICAgICAgdGl0bGU6IHJlc3VsdC50aXRsZSwKICAgICAgICAgIGludGVyYWN0aXZlOiBmYWxzZSwKICAgICAgICAgIGNvbG9yOiAncmVkJywKICAgICAgICAgIGZpbGw6IGZhbHNlLAogICAgICAgIH0pLmFkZFRvKHJlc3VsdC5sYXllcik7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHQubGF5ZXI7CiAgfQoKICAvKioKICAgKiBIYW5kbGVzIHRoZSBzZWxlY3Rpb24gb2YgYSBzZWFyY2ggcmVzdWx0LCBhZGp1c3RpbmcgdGhlIG1hcCB2aWV3IGFuZCBhZGRpbmcgaXRzIGxheWVyIHRvIHRoZSBtYXAuCiAgICoKICAgKiBAbWVtYmVyb2YgSUlUQy5zZWFyY2guUXVlcnkKICAgKiBAZnVuY3Rpb24gb25SZXN1bHRTZWxlY3RlZAogICAqIEBwYXJhbSB7T2JqZWN0fSByZXN1bHQgLSBUaGUgc2VsZWN0ZWQgc2VhcmNoIHJlc3VsdCBvYmplY3QuCiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBzZWxlY3Rpb24uCiAgICogQHByaXZhdGUKICAgKi8KICBvblJlc3VsdFNlbGVjdGVkKHJlc3VsdCwgZXZlbnQpIHsKICAgIHRoaXMucmVtb3ZlSG92ZXJSZXN1bHQoKTsKICAgIHRoaXMucmVtb3ZlU2VsZWN0ZWRSZXN1bHQoKTsKICAgIHRoaXMuc2VsZWN0ZWRSZXN1bHQgPSByZXN1bHQ7CgogICAgaWYgKHJlc3VsdC5vblNlbGVjdGVkICYmIHJlc3VsdC5vblNlbGVjdGVkKHJlc3VsdCwgZXZlbnQpKSByZXR1cm47CgogICAgY29uc3QgeyBwb3NpdGlvbiwgYm91bmRzIH0gPSByZXN1bHQ7CiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2RibGNsaWNrJykgewogICAgICBpZiAocG9zaXRpb24pIHsKICAgICAgICB3aW5kb3cubWFwLnNldFZpZXcocG9zaXRpb24sIHdpbmRvdy5ERUZBVUxUX1pPT00pOwogICAgICB9IGVsc2UgaWYgKGJvdW5kcykgewogICAgICAgIHdpbmRvdy5tYXAuZml0Qm91bmRzKGJvdW5kcywgeyBtYXhab29tOiB3aW5kb3cuREVGQVVMVF9aT09NIH0pOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAoYm91bmRzKSB7CiAgICAgICAgd2luZG93Lm1hcC5maXRCb3VuZHMoYm91bmRzLCB7IG1heFpvb206IHdpbmRvdy5ERUZBVUxUX1pPT00gfSk7CiAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24pIHsKICAgICAgICB3aW5kb3cubWFwLnNldFZpZXcocG9zaXRpb24pOwogICAgICB9CiAgICB9CgogICAgcmVzdWx0LmxheWVyID0gdGhpcy5yZXN1bHRMYXllcihyZXN1bHQpOwoKICAgIGlmIChyZXN1bHQubGF5ZXIpIHdpbmRvdy5tYXAuYWRkTGF5ZXIocmVzdWx0LmxheWVyKTsKICAgIGlmICh3aW5kb3cuaXNTbWFydHBob25lKCkpIHdpbmRvdy5zaG93KCdtYXAnKTsKICB9CgogIC8qKgogICAqIFJlbW92ZXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBzZWFyY2ggcmVzdWx0IGZyb20gdGhlIG1hcCBhbmQgcGVyZm9ybXMgbmVjZXNzYXJ5IGNsZWFudXAuCiAgICoKICAgKiBAbWVtYmVyb2YgSUlUQy5zZWFyY2guUXVlcnkKICAgKiBAZnVuY3Rpb24gcmVtb3ZlU2VsZWN0ZWRSZXN1bHQKICAgKiBAcHJpdmF0ZQogICAqLwogIHJlbW92ZVNlbGVjdGVkUmVzdWx0KCkgewogICAgaWYgKHRoaXMuc2VsZWN0ZWRSZXN1bHQpIHsKICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRSZXN1bHQubGF5ZXIpIHdpbmRvdy5tYXAucmVtb3ZlTGF5ZXIodGhpcy5zZWxlY3RlZFJlc3VsdC5sYXllcik7CiAgICAgIGlmICh0aGlzLnNlbGVjdGVkUmVzdWx0Lm9uUmVtb3ZlKSB0aGlzLnNlbGVjdGVkUmVzdWx0Lm9uUmVtb3ZlKHRoaXMuc2VsZWN0ZWRSZXN1bHQpOwogICAgfQogIH0KCiAgLyoqCiAgICogU3RhcnRzIGEgaG92ZXIgaW50ZXJhY3Rpb24gb24gYSBzZWFyY2ggcmVzdWx0LCBkaXNwbGF5aW5nIGl0cyBsYXllciBvbiB0aGUgbWFwLgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5CiAgICogQGZ1bmN0aW9uIG9uUmVzdWx0SG92ZXJTdGFydAogICAqIEBwYXJhbSB7T2JqZWN0fSByZXN1bHQgLSBUaGUgcmVzdWx0IGJlaW5nIGhvdmVyZWQgb3Zlci4KICAgKiBAcHJpdmF0ZQogICAqLwogIG9uUmVzdWx0SG92ZXJTdGFydChyZXN1bHQpIHsKICAgIHRoaXMucmVtb3ZlSG92ZXJSZXN1bHQoKTsKICAgIHRoaXMuaG92ZXJSZXN1bHQgPSByZXN1bHQ7CgogICAgaWYgKHJlc3VsdCA9PT0gdGhpcy5zZWxlY3RlZFJlc3VsdCkgcmV0dXJuOwoKICAgIHJlc3VsdC5sYXllciA9IHRoaXMucmVzdWx0TGF5ZXIocmVzdWx0KTsKCiAgICBpZiAocmVzdWx0LmxheWVyKSB3aW5kb3cubWFwLmFkZExheWVyKHJlc3VsdC5sYXllcik7CiAgfQoKICAvKioKICAgKiBFbmRzIGEgaG92ZXIgaW50ZXJhY3Rpb24gYnkgcmVtb3ZpbmcgdGhlIGhvdmVyIGxheWVyIGZyb20gdGhlIG1hcCBpZiBpdCBpcyBub3Qgc2VsZWN0ZWQuCiAgICoKICAgKiBAbWVtYmVyb2YgSUlUQy5zZWFyY2guUXVlcnkKICAgKiBAZnVuY3Rpb24gcmVtb3ZlSG92ZXJSZXN1bHQKICAgKiBAcHJpdmF0ZQogICAqLwogIHJlbW92ZUhvdmVyUmVzdWx0KCkgewogICAgaWYgKHRoaXMuaG92ZXJSZXN1bHQgJiYgdGhpcy5ob3ZlclJlc3VsdC5sYXllciAmJiB0aGlzLmhvdmVyUmVzdWx0ICE9PSB0aGlzLnNlbGVjdGVkUmVzdWx0KSB7CiAgICAgIHdpbmRvdy5tYXAucmVtb3ZlTGF5ZXIodGhpcy5ob3ZlclJlc3VsdC5sYXllcik7CiAgICB9CiAgICB0aGlzLmhvdmVyUmVzdWx0ID0gbnVsbDsKICB9CgogIC8qKgogICAqIEhhbmRsZXMgdGhlIGVuZCBvZiBhIGhvdmVyIGV2ZW50LCByZW1vdmluZyB0aGUgaG92ZXIgbGF5ZXIgZnJvbSB0aGUgbWFwLgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5CiAgICogQGZ1bmN0aW9uIG9uUmVzdWx0SG92ZXJFbmQKICAgKiBAcHJpdmF0ZQogICAqLwogIG9uUmVzdWx0SG92ZXJFbmQoKSB7CiAgICB0aGlzLnJlbW92ZUhvdmVyUmVzdWx0KCk7CiAgfQp9CgpJSVRDLnNlYXJjaC5RdWVyeSA9IFF1ZXJ5OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogc2VhcmNoX3F1ZXJ5X3Jlc3VsdHNfdmlldy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3NlYXJjaF9xdWVyeV9yZXN1bHRzX3ZpZXcnKTsKLyogZ2xvYmFsIElJVEMgLS0gZXNsaW50ICovCgovKioKICogUmVwcmVzZW50cyB0aGUgdmlldyBmb3IgZGlzcGxheWluZyBzZWFyY2ggcXVlcnkgcmVzdWx0cyBpbiB0aGUgSUlUQyBzZWFyY2ggbW9kdWxlLgogKgogKiBAbWVtYmVyb2YgSUlUQy5zZWFyY2gKICogQGNsYXNzCiAqLwpjbGFzcyBRdWVyeVJlc3VsdHNWaWV3IHsKICAvKioKICAgKiBJbml0aWFsaXplcyB0aGUgcXVlcnkgcmVzdWx0cyB2aWV3LCBzZXR0aW5nIHVwIHRoZSBkaXNwbGF5IGVsZW1lbnRzIGZvciB0aGUgc2VhcmNoIHRlcm0uCiAgICoKICAgKiBAY29uc3RydWN0b3IKICAgKiBAcGFyYW0ge3N0cmluZ30gdGVybSAtIFRoZSBzZWFyY2ggdGVybS4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbmZpcm1lZCAtIEluZGljYXRlcyBpZiB0aGUgc2VhcmNoIGlzIGNvbmZpcm1lZCAoZS5nLiwgYnkgcHJlc3NpbmcgRW50ZXIpLgogICAqLwogIGNvbnN0cnVjdG9yKHRlcm0sIGNvbmZpcm1lZCkgewogICAgdGhpcy50ZXJtID0gdGVybTsKICAgIHRoaXMuY29uZmlybWVkID0gY29uZmlybWVkOwogICAgdGhpcy5jb250YWluZXIgPSB0aGlzLmNyZWF0ZUNvbnRhaW5lcigpOwogICAgdGhpcy5oZWFkZXIgPSB0aGlzLmNyZWF0ZUhlYWRlcigpOwogICAgdGhpcy5saXN0ID0gdGhpcy5jcmVhdGVMaXN0KCk7CiAgICB0aGlzLnNldHVwQWNjb3JkaW9uKCk7CiAgfQoKICAvKioKICAgKiBDcmVhdGVzIGFuZCByZXR1cm5zIHRoZSBtYWluIGNvbnRhaW5lciBlbGVtZW50IGZvciB0aGUgcXVlcnkgcmVzdWx0cy4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeVJlc3VsdHNWaWV3CiAgICogQGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcgogICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gLSBUaGUgY29udGFpbmVyIGVsZW1lbnQgZm9yIHRoZSByZXN1bHRzLgogICAqIEBwcml2YXRlCiAgICovCiAgY3JlYXRlQ29udGFpbmVyKCkgewogICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnc2VhcmNocXVlcnknKTsKICAgIHJldHVybiBjb250YWluZXI7CiAgfQoKICAvKioKICAgKiBDcmVhdGVzIGFuZCBhcHBlbmRzIGEgaGVhZGVyIHRvIHRoZSBjb250YWluZXIgYmFzZWQgb24gdGhlIHNlYXJjaCB0ZXJtLgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5UmVzdWx0c1ZpZXcKICAgKiBAZnVuY3Rpb24gY3JlYXRlSGVhZGVyCiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSAtIFRoZSBoZWFkZXIgZWxlbWVudCBkaXNwbGF5aW5nIHRoZSBzZWFyY2ggdGVybSBvciBhIGxvYWRpbmcgbWVzc2FnZS4KICAgKiBAcHJpdmF0ZQogICAqLwogIGNyZWF0ZUhlYWRlcigpIHsKICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7CiAgICBsZXQgaGVhZGVyVGV4dDsKCiAgICBpZiAodGhpcy5jb25maXJtZWQpIHsKICAgICAgaGVhZGVyVGV4dCA9IHRoaXMudGVybTsKICAgIH0gZWxzZSB7CiAgICAgIGlmICh0aGlzLnRlcm0ubGVuZ3RoID4gMTYpIHsKICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMudGVybS5zbGljZSgwLCA4KTsKICAgICAgICBjb25zdCBlbmQgPSB0aGlzLnRlcm0uc2xpY2UoLTgpOwogICAgICAgIGhlYWRlclRleHQgPSBgJHtzdGFydH3igKYke2VuZH0gKFJldHVybiB0byBsb2FkIG1vcmUpYDsKICAgICAgfSBlbHNlIHsKICAgICAgICBoZWFkZXJUZXh0ID0gYCR7dGhpcy50ZXJtfSAoUmV0dXJuIHRvIGxvYWQgbW9yZSlgOwogICAgICB9CiAgICB9CgogICAgaGVhZGVyLnRleHRDb250ZW50ID0gaGVhZGVyVGV4dDsKICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRlcik7CiAgICByZXR1cm4gaGVhZGVyOwogIH0KCiAgLyoqCiAgICogQ3JlYXRlcyBhbmQgYXBwZW5kcyBhbiBpbml0aWFsIGxpc3QgZWxlbWVudCB0byBkaXNwbGF5IHRoZSBzZWFyY2ggcmVzdWx0cy4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeVJlc3VsdHNWaWV3CiAgICogQGZ1bmN0aW9uIGNyZWF0ZUxpc3QKICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IC0gVGhlIGxpc3QgZWxlbWVudCBmb3IgZGlzcGxheWluZyB0aGUgcmVzdWx0cy4KICAgKiBAcHJpdmF0ZQogICAqLwogIGNyZWF0ZUxpc3QoKSB7CiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTsKICAgIGNvbnN0IGluaXRpYWxJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgIGluaXRpYWxJdGVtLnRleHRDb250ZW50ID0gdGhpcy5jb25maXJtZWQgPyAnTm8gbG9jYWwgcmVzdWx0cywgc2VhcmNoaW5nIG9ubGluZS4uLicgOiAnTm8gbG9jYWwgcmVzdWx0cy4nOwogICAgbGlzdC5hcHBlbmRDaGlsZChpbml0aWFsSXRlbSk7CiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChsaXN0KTsKICAgIHJldHVybiBsaXN0OwogIH0KCiAgLyoqCiAgICogU2V0cyB1cCB0aGUgYWNjb3JkaW9uIGZ1bmN0aW9uYWxpdHkgZm9yIGV4cGFuZGluZyBhbmQgY29sbGFwc2luZyByZXN1bHRzLgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5UmVzdWx0c1ZpZXcKICAgKiBAZnVuY3Rpb24gc2V0dXBBY2NvcmRpb24KICAgKiBAcHJpdmF0ZQogICAqLwogIHNldHVwQWNjb3JkaW9uKCkgewogICAgdGhpcy5oZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2NvbGxhcHNlZCcpOwogICAgfSk7CiAgfQoKICAvKioKICAgKiBSZW5kZXJzIHRoZSBzZWFyY2ggcmVzdWx0cyB3aXRoaW4gdGhlIGxpc3QgY29udGFpbmVyIGFuZCBzZXRzIHVwIGV2ZW50IGludGVyYWN0aW9ucy4KICAgKgogICAqIEBtZW1iZXJvZiBJSVRDLnNlYXJjaC5RdWVyeVJlc3VsdHNWaWV3CiAgICogQGZ1bmN0aW9uIHJlbmRlclJlc3VsdHMKICAgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IHJlc3VsdHMgLSBBbiBhcnJheSBvZiBzZWFyY2ggcmVzdWx0IG9iamVjdHMgdG8gZGlzcGxheS4KICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlc3VsdEludGVyYWN0aW9uIC0gQSBjYWxsYmFjayBmdW5jdGlvbiBmb3IgaGFuZGxpbmcgaW50ZXJhY3Rpb24gZXZlbnRzIG9uIHJlc3VsdHMuCiAgICovCiAgcmVuZGVyUmVzdWx0cyhyZXN1bHRzLCBvblJlc3VsdEludGVyYWN0aW9uKSB7CiAgICB0aGlzLmNsZWFyTGlzdCgpOwoKICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCkgewogICAgICBjb25zdCBub1Jlc3VsdHNJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTsKICAgICAgbm9SZXN1bHRzSXRlbS50ZXh0Q29udGVudCA9ICdObyByZXN1bHRzIGZvdW5kLic7CiAgICAgIHRoaXMubGlzdC5hcHBlbmRDaGlsZChub1Jlc3VsdHNJdGVtKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0KSA9PiB7CiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY3JlYXRlTGlzdEl0ZW0ocmVzdWx0KTsKICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiBvblJlc3VsdEludGVyYWN0aW9uKHJlc3VsdCwgZXYpKTsKICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgKGV2KSA9PiBvblJlc3VsdEludGVyYWN0aW9uKHJlc3VsdCwgZXYpKTsKICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIChldikgPT4gb25SZXN1bHRJbnRlcmFjdGlvbihyZXN1bHQsIGV2KSk7CiAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIChldikgPT4gb25SZXN1bHRJbnRlcmFjdGlvbihyZXN1bHQsIGV2KSk7CiAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2KSA9PiBvblJlc3VsdEludGVyYWN0aW9uKHJlc3VsdCwgZXYpKTsKICAgICAgICB0aGlzLmxpc3QuYXBwZW5kQ2hpbGQoaXRlbSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgLyoqCiAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGxpc3QgaXRlbSBmb3IgYW4gaW5kaXZpZHVhbCBzZWFyY2ggcmVzdWx0LgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5UmVzdWx0c1ZpZXcKICAgKiBAZnVuY3Rpb24gY3JlYXRlTGlzdEl0ZW0KICAgKiBAcGFyYW0ge09iamVjdH0gcmVzdWx0IC0gVGhlIHNlYXJjaCByZXN1bHQgb2JqZWN0IHdpdGggcHJvcGVydGllcyBzdWNoIGFzIHRpdGxlLCBkZXNjcmlwdGlvbiwgYW5kIGljb24uCiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSAtIFRoZSBsaXN0IGl0ZW0gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIHNlYXJjaCByZXN1bHQuCiAgICogQHByaXZhdGUKICAgKi8KICBjcmVhdGVMaXN0SXRlbShyZXN1bHQpIHsKICAgIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgaXRlbS50YWJJbmRleCA9IDA7CgogICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgIGxpbmsuaW5uZXJIVE1MID0gcmVzdWx0LnRpdGxlOwoKICAgIGlmIChyZXN1bHQuaWNvbikgewogICAgICBsaW5rLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoIiR7cmVzdWx0Lmljb259IilgOwogICAgICBpdGVtLnN0eWxlLmxpc3RTdHlsZSA9ICdub25lJzsKICAgIH0KCiAgICBpdGVtLmFwcGVuZENoaWxkKGxpbmspOwoKICAgIGlmIChyZXN1bHQuZGVzY3JpcHRpb24pIHsKICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlbScpOwogICAgICBkZXNjcmlwdGlvbi5pbm5lckhUTUwgPSByZXN1bHQuZGVzY3JpcHRpb247CiAgICAgIGl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7CiAgICAgIGl0ZW0uYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb24pOwogICAgfQoKICAgIHJldHVybiBpdGVtOwogIH0KCiAgLyoqCiAgICogQXBwZW5kcyB0aGUgcmVzdWx0cyBjb250YWluZXIgdG8gYSBzcGVjaWZpZWQgc2VsZWN0b3Igb24gdGhlIHBhZ2UuCiAgICoKICAgKiBAbWVtYmVyb2YgSUlUQy5zZWFyY2guUXVlcnlSZXN1bHRzVmlldwogICAqIEBmdW5jdGlvbiByZW5kZXJJbgogICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAtIFRoZSBzZWxlY3RvciBzdHJpbmcgZm9yIHRoZSB0YXJnZXQgY29udGFpbmVyLgogICAqLwogIHJlbmRlckluKHNlbGVjdG9yKSB7CiAgICBjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsKICAgIGlmICh0YXJnZXQpIHRhcmdldC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7CiAgfQoKICAvKioKICAgKiBSZW1vdmVzIHRoZSByZXN1bHRzIGNvbnRhaW5lciBmcm9tIHRoZSBwYWdlLgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5UmVzdWx0c1ZpZXcKICAgKiBAZnVuY3Rpb24gcmVtb3ZlCiAgICogQHByaXZhdGUKICAgKi8KICByZW1vdmUoKSB7CiAgICBpZiAodGhpcy5jb250YWluZXIucGFyZW50Tm9kZSkgewogICAgICB0aGlzLmNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY29udGFpbmVyKTsKICAgIH0KICB9CgogIC8qKgogICAqIENsZWFycyBhbGwgaXRlbXMgZnJvbSB0aGUgcmVzdWx0cyBsaXN0LgogICAqCiAgICogQG1lbWJlcm9mIElJVEMuc2VhcmNoLlF1ZXJ5UmVzdWx0c1ZpZXcKICAgKiBAZnVuY3Rpb24gY2xlYXJMaXN0CiAgICogQHByaXZhdGUKICAgKi8KICBjbGVhckxpc3QoKSB7CiAgICB0aGlzLmxpc3QuaW5uZXJIVE1MID0gJyc7CiAgfQp9CgpJSVRDLnNlYXJjaC5RdWVyeVJlc3VsdHNWaWV3ID0gUXVlcnlSZXN1bHRzVmlldzsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHNlbmRfcmVxdWVzdC5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3NlbmRfcmVxdWVzdCcpOwovKioKICogQGZpbGUgVGhpcyBmaWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3Igc2VuZGluZyBBSkFYIHJlcXVlc3RzIHRvIHRoZSBJbmdyZXNzIEFQSS4KICogQG1vZHVsZSBzZW5kX3JlcXVlc3QKICovCgovKioKICogU2VuZHMgYW4gQUpBWCBQT1NUIHJlcXVlc3QgdG8gdGhlIEluZ3Jlc3MgQVBJLgogKgogKiBAZnVuY3Rpb24gcG9zdEFqYXgKICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbiAtIFRoZSBsYXN0IHBhcnQgb2YgdGhlIFVSTCwgYXV0b21hdGljYWxseSBhcHBlbmRlZCB0byB0aGUgSW5ncmVzcyBBUEkgZW5kcG9pbnQuCiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gSlNPTiBkYXRhIHRvIHBvc3QuIFRoZSBtZXRob2QgaXMgZGVyaXZlZCBhdXRvbWF0aWNhbGx5IGZyb20gYWN0aW9uIGJ1dCBtYXkgYmUgb3ZlcnJpZGRlbi4KICogICAgICAgICAgICAgICAgICAgICAgICBFeHBlY3RzIHRvIGJlIGdpdmVuIGEgSGFzaC4gU3RyaW5ncyBhcmUgbm90IHN1cHBvcnRlZC4KICogQHBhcmFtIHtGdW5jdGlvbn0gc3VjY2Vzc0NhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCBvbiBzdWNjZXNzLiBTZWUgalF1ZXJ5IEFQSSBkb2NzIGZvciBhdmFpbGFibGUgYXJndW1lbnRzLgogKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcnJvckNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCBvbiBlcnJvci4gQWRkaXRpb25hbGx5LCBpdCBpcyBsb2dnZWQgaWYgdGhlIHJlcXVlc3QgZmFpbGVkLgogKiBAcmV0dXJucyB7anFYSFJ9IFRoZSBqUXVlcnkgd3JhcHBlZCBYTUxIdHRwUmVxdWVzdCBvYmplY3QuCiAqLwp3aW5kb3cucG9zdEFqYXggPSBmdW5jdGlvbiAoYWN0aW9uLCBkYXRhLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHsKICAvLyBzdGF0ZSBtYW5hZ2VtZW50IGZ1bmN0aW9ucy4uLiBwZXJoYXBzIHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoaXMgZnVuYz8KCiAgLy8gdmFyIHJlbW92ZSA9IGZ1bmN0aW9uKGRhdGEsIHRleHRTdGF0dXMsIGpxWEhSKSB7IHdpbmRvdy5yZXF1ZXN0cy5yZW1vdmUoanFYSFIpOyB9OwogIC8vIHZhciBlcnJDbnQgPSBmdW5jdGlvbihqcVhIUikgeyB3aW5kb3cuZmFpbGVkUmVxdWVzdENvdW50Kys7IHdpbmRvdy5yZXF1ZXN0cy5yZW1vdmUoanFYSFIpOyB9OwoKICBpZiAod2luZG93LmxhdGVzdEZhaWxlZFJlcXVlc3RUaW1lICYmIHdpbmRvdy5sYXRlc3RGYWlsZWRSZXF1ZXN0VGltZSA8IERhdGUubm93KCkgLSAxMjAgKiAxMDAwKSB7CiAgICAvLyBubyBlcnJvcnMgaW4gdGhlIGxhc3QgdHdvIG1pbnV0ZXMgLSBjbGVhciB0aGUgZXJyb3IgY291bnQKICAgIHdpbmRvdy5mYWlsZWRSZXF1ZXN0Q291bnQgPSAwOwogICAgd2luZG93LmxhdGVzdEZhaWxlZFJlcXVlc3RUaW1lID0gdW5kZWZpbmVkOwogIH0KCiAgdmFyIG9uRXJyb3IgPSBmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7CiAgICB3aW5kb3cucmVxdWVzdHMucmVtb3ZlKGpxWEhSKTsKICAgIHdpbmRvdy5mYWlsZWRSZXF1ZXN0Q291bnQrKzsKCiAgICB3aW5kb3cubGF0ZXN0RmFpbGVkUmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpOwoKICAgIC8vIHBhc3MgdGhyb3VnaCB0byB0aGUgdXNlciBlcnJvciBmdW5jLCBpZiBvbmUgZXhpc3RzCiAgICBpZiAoZXJyb3JDYWxsYmFjaykgewogICAgICBlcnJvckNhbGxiYWNrKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7CiAgICB9CiAgfTsKCiAgdmFyIG9uU3VjY2VzcyA9IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikgewogICAgd2luZG93LnJlcXVlc3RzLnJlbW92ZShqcVhIUik7CgogICAgLy8gdGhlIE5pYW50aWMgc2VydmVyIGNhbiByZXR1cm4gYSBIVFRQIHN1Y2Nlc3MsIGJ1dCB0aGUgSlNPTiByZXNwb25zZSBjb250YWlucyBhbiBlcnJvci4gaGFuZGxlIHRoYXQgc2Vuc2libHkKICAgIGlmIChkYXRhICYmIGRhdGEuZXJyb3IgJiYgZGF0YS5lcnJvciA9PT0gJ291dCBvZiBkYXRlJykgewogICAgICB3aW5kb3cuZmFpbGVkUmVxdWVzdENvdW50Kys7CiAgICAgIC8vIGxldCdzIGNhbGwgdGhlIGVycm9yIGNhbGxiYWNrIGluIHRob3MgY2FzZS4uLgogICAgICBpZiAoZXJyb3JDYWxsYmFjaykgewogICAgICAgIGVycm9yQ2FsbGJhY2soanFYSFIsIHRleHRTdGF0dXMsICJkYXRhLmVycm9yID09ICdvdXQgb2YgZGF0ZSciKTsKICAgICAgfQoKICAgICAgd2luZG93Lm91dE9mRGF0ZVVzZXJQcm9tcHQoKTsKICAgIH0gZWxzZSB7CiAgICAgIHN1Y2Nlc3NDYWxsYmFjayhkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUik7CiAgICB9CiAgfTsKCiAgLy8gd2Ugc2V0IHRoaXMgZmxhZyB3aGVuIHdlIHdhbnQgdG8gYmxvY2sgYWxsIHJlcXVlc3RzIGR1ZSB0byBoYXZpbmcgYW4gb3V0IG9mIGRhdGUgQ1VSUkVOVF9WRVJTSU9OCiAgaWYgKHdpbmRvdy5ibG9ja091dE9mRGF0ZVJlcXVlc3RzKSB7CiAgICB3aW5kb3cuZmFpbGVkUmVxdWVzdENvdW50Kys7CiAgICB3aW5kb3cubGF0ZXN0RmFpbGVkUmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpOwoKICAgIC8vIGNhbGwgdGhlIGVycm9yIGNhbGxiYWNrLCBpZiBvbmUgZXhpc3RzCiAgICBpZiAoZXJyb3JDYWxsYmFjaykgewogICAgICAvLyBOT1RFOiBlcnJvciBjYWxsZWQgb24gYSBzZXRUaW1lb3V0IC0gYXMgaXQgd29uJ3QgYmUgZXhwZWN0ZWQgdG8gYmUgc3luY2hyb25vdXMKICAgICAgLy8gZW5zdXJlcyBubyByZWN1cnNpb24gaXNzdWVzIGlmIHRoZSBlcnJvciBoYW5kbGVyIGltbWVkaWF0ZWx5IHJlc2VuZHMgdGhlIHJlcXVlc3QKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgZXJyb3JDYWxsYmFjayhudWxsLCB1bmRlZmluZWQsICd3aW5kb3cuYmxvY2tPdXRPZkRhdGVSZXF1ZXN0cyBpcyBzZXQnKTsKICAgICAgfSwgMTApOwogICAgfQogICAgcmV0dXJuOwogIH0KCiAgdmFyIHZlcnNpb25TdHIgPSB3aW5kb3cubmlhbnRpY19wYXJhbXMuQ1VSUkVOVF9WRVJTSU9OOwogIHZhciBwb3N0X2RhdGEgPSBKU09OLnN0cmluZ2lmeSgkLmV4dGVuZCh7fSwgZGF0YSwgeyB2OiB2ZXJzaW9uU3RyIH0pKTsKCiAgdmFyIHJlc3VsdCA9ICQuYWpheCh7CiAgICB1cmw6ICcvci8nICsgYWN0aW9uLAogICAgdHlwZTogJ1BPU1QnLAogICAgZGF0YTogcG9zdF9kYXRhLAogICAgY29udGV4dDogZGF0YSwKICAgIGRhdGFUeXBlOiAnanNvbicsCiAgICBzdWNjZXNzOiBbb25TdWNjZXNzXSwKICAgIGVycm9yOiBbb25FcnJvcl0sCiAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnLAogICAgYmVmb3JlU2VuZDogZnVuY3Rpb24gKHJlcSkgewogICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGVG9rZW4nLCB3aW5kb3cucmVhZENvb2tpZSgnY3NyZnRva2VuJykpOwogICAgfSwKICB9KTsKCiAgd2luZG93LnJlcXVlc3RzLmFkZChyZXN1bHQpOwoKICByZXR1cm4gcmVzdWx0Owp9OwoKLyoqCiAqIERpc3BsYXlzIGEgZGlhbG9nIHByb21wdCB0byB0aGUgdXNlciB3aGVuIHRoZSBJSVRDIHZlcnNpb24gaXMgb3V0IG9mIGRhdGUuCiAqIEJsb2NrcyBhbGwgcmVxdWVzdHMgd2hpbGUgdGhlIGRpYWxvZyBpcyBvcGVuLgogKgogKiBAZnVuY3Rpb24gb3V0T2ZEYXRlVXNlclByb21wdAogKi8Kd2luZG93Lm91dE9mRGF0ZVVzZXJQcm9tcHQgPSBmdW5jdGlvbiAoKSB7CiAgLy8gd2UgYmxvY2sgYWxsIHJlcXVlc3RzIHdoaWxlIHRoZSBkaWFsb2cgaXMgb3Blbi4KICBpZiAoIXdpbmRvdy5ibG9ja091dE9mRGF0ZVJlcXVlc3RzKSB7CiAgICB3aW5kb3cuYmxvY2tPdXRPZkRhdGVSZXF1ZXN0cyA9IHRydWU7CgogICAgd2luZG93LmRpYWxvZyh7CiAgICAgIHRpdGxlOiAnUmVsb2FkIElJVEMnLAogICAgICBodG1sOgogICAgICAgICc8cD5JSVRDIGlzIHVzaW5nIGFuIG91dGRhdGVkIHZlcnNpb24gY29kZS4gVGhpcyB3aWxsIGhhcHBlbiB3aGVuIE5pYW50aWMgdXBkYXRlcyB0aGUgc3RhbmRhcmQgaW50ZWwgc2l0ZS48L3A+JyArCiAgICAgICAgJzxwPllvdSBuZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSB0byBnZXQgdGhlIHVwZGF0ZWQgY2hhbmdlcy48L3A+JyArCiAgICAgICAgJzxwPklmIHlvdSBoYXZlIGp1c3QgcmVsb2FkZWQgdGhlIHBhZ2UsIHRoZW4gYW4gb2xkIHZlcnNpb24gb2YgdGhlIHN0YW5kYXJkIHNpdGUgc2NyaXB0IGlzIGNhY2hlZCBzb21ld2hlcmUuJyArCiAgICAgICAgJ0luIHRoaXMgY2FzZSwgdHJ5IGNsZWFyaW5nIHlvdXIgY2FjaGUsIG9yIHdhaXRpbmcgMTUtMzAgbWludXRlcyBmb3IgdGhlIHN0YWxlIGRhdGEgdG8gZXhwaXJlLjwvcD4nLAogICAgICBidXR0b25zOiB7CiAgICAgICAgUkVMT0FEOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAod2luZG93LmlzQXBwICYmIHdpbmRvdy5hcHAucmVsb2FkSUlUQykgewogICAgICAgICAgICB3aW5kb3cuYXBwLnJlbG9hZElJVEMoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICB9LAogICAgICBjbG9zZTogZnVuY3Rpb24gKCkgewogICAgICAgIGRlbGV0ZSB3aW5kb3cuYmxvY2tPdXRPZkRhdGVSZXF1ZXN0czsKICAgICAgfSwKICAgIH0pOwogIH0KfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHNpZGViYXIuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCdzaWRlYmFyJyk7Ci8qIGdsb2JhbCBJSVRDIC0tIGVzbGludCAqLwoKLyoqCiAqIEBmaWxlIFRoaXMgZmlsZSBwcm92aWRlcyBmdW5jdGlvbnMgZm9yIHdvcmtpbmcgd2l0aCB0aGUgc2lkZWJhci4KICogQG1vZHVsZSBzaWRlYmFyCiAqLwoKLyoqCiAqIFNldHMgdXAgdGhlIHNpZGViYXIsIGluY2x1ZGluZyBwbGF5ZXIgc3RhdHMsIHRvZ2dsZSBidXR0b24sIGxhcmdlIGltYWdlIHByZXZpZXcsIGV0Yy4KICoKICogQGZ1bmN0aW9uIHNldHVwU2lkZWJhcgogKi8Kd2luZG93LnNldHVwU2lkZWJhciA9IGZ1bmN0aW9uICgpIHsKICB3aW5kb3cuc2V0dXBTdHlsZXMoKTsKICBzZXR1cEljb25zKCk7CiAgd2luZG93LnNldHVwUGxheWVyU3RhdCgpOwogIHNldHVwU2lkZWJhclRvZ2dsZSgpOwogIHNldHVwTGFyZ2VJbWFnZVByZXZpZXcoKTsKICBzZXR1cEFkZG9ucygpOwogICQoJyNzaWRlYmFyJykuc2hvdygpOwogIC8vIHNldHVwIHBvcnRhbCBkZXRhaWwgZGlzcGxheSB1cGRhdGUKICB3aW5kb3cuYWRkSG9vaygncG9ydGFsQWRkZWQnLCBzaWRlYmFyT25Qb3J0YWxBZGRlZCk7CiAgd2luZG93LmFkZEhvb2soJ3BvcnRhbERldGFpbExvYWRlZCcsIHNpZGViYXJPblBvcnRhbERldGFpbExvYWRlZCk7Cn07CgovKioKICogRnVuY3Rpb24gdG8gYXBwZW5kIElJVEMncyBjdXN0b20gQ1NTIHN0eWxlcyB0byB0aGUgYDxoZWFkPmAgZWxlbWVudC4KICogT3ZlcndyaXR0ZW4gaW4gc21hcnRwaG9uZS5qcy4KICoKICogQGZ1bmN0aW9uIHNldHVwU3R5bGVzCiAqLwp3aW5kb3cuc2V0dXBTdHlsZXMgPSBmdW5jdGlvbiAoKSB7CiAgJCgnaGVhZCcpLmFwcGVuZCgKICAgICc8c3R5bGU+JyArCiAgICAgIFsKICAgICAgICAnI2xhcmdlcHJldmlldy5lbmwgaW1nIHsgYm9yZGVyOjJweCBzb2xpZCAnICsgd2luZG93LkNPTE9SU1t3aW5kb3cuVEVBTV9FTkxdICsgJzsgfSAnLAogICAgICAgICcjbGFyZ2VwcmV2aWV3LnJlcyBpbWcgeyBib3JkZXI6MnB4IHNvbGlkICcgKyB3aW5kb3cuQ09MT1JTW3dpbmRvdy5URUFNX1JFU10gKyAnOyB9ICcsCiAgICAgICAgJyNsYXJnZXByZXZpZXcubm9uZSBpbWcgeyBib3JkZXI6MnB4IHNvbGlkICcgKyB3aW5kb3cuQ09MT1JTW3dpbmRvdy5URUFNX05PTkVdICsgJzsgfSAnLAogICAgICAgICcjY2hhdGNvbnRyb2xzIHsgYm90dG9tOiAnICsgKHdpbmRvdy5DSEFUX1NIUklOS0VEICsgMjIpICsgJ3B4OyB9JywKICAgICAgICAnI2NoYXQgeyBoZWlnaHQ6ICcgKyB3aW5kb3cuQ0hBVF9TSFJJTktFRCArICdweDsgfSAnLAogICAgICAgICcubGVhZmxldC1yaWdodCB7IG1hcmdpbi1yaWdodDogJyArICh3aW5kb3cuU0lERUJBUl9XSURUSCArIDEpICsgJ3B4IH0gJywKICAgICAgICAnI3VwZGF0ZXN0YXR1cyB7IHdpZHRoOicgKyAod2luZG93LlNJREVCQVJfV0lEVEggKyAyKSArICdweDsgIH0gJywKICAgICAgICAnI3NpZGViYXIgeyB3aWR0aDonICsgKHdpbmRvdy5TSURFQkFSX1dJRFRIICsgd2luZG93LkhJRERFTl9TQ1JPTExCQVJfQVNTVU1FRF9XSURUSCArIDEpIC8qIGJvcmRlciovICsgJ3B4OyAgfSAnLAogICAgICAgICcjc2lkZWJhcnRvZ2dsZSB7IHJpZ2h0OicgKyAod2luZG93LlNJREVCQVJfV0lEVEggKyAxKSArICdweDsgIH0gJywKICAgICAgICBgI3Njcm9sbHdyYXBwZXIgIHsgd2lkdGg6JHt3aW5kb3cuU0lERUJBUl9XSURUSCArIDIgKiB3aW5kb3cuSElEREVOX1NDUk9MTEJBUl9BU1NVTUVEX1dJRFRIfXB4OyByaWdodDotJHsKICAgICAgICAgIDIgKiB3aW5kb3cuSElEREVOX1NDUk9MTEJBUl9BU1NVTUVEX1dJRFRIIC0gMgogICAgICAgIH1weCB9IGAsCiAgICAgICAgJyNzaWRlYmFyID4gKiB7IHdpZHRoOicgKyAod2luZG93LlNJREVCQVJfV0lEVEggKyAxKSArICdweDsgIH0nLAogICAgICBdLmpvaW4oJ1xuJykgKwogICAgICAnPC9zdHlsZT4nCiAgKTsKfTsKCi8qKgogKiBTZXRzIHVwIGN1c3RvbSBpY29ucyBieSBhcHBlbmRpbmcgU1ZHIGRlZmluaXRpb25zIHRvIHRoZSBET00uCiAqCiAqIEBmdW5jdGlvbiBzZXR1cEljb25zCiAqLwpmdW5jdGlvbiBzZXR1cEljb25zKCkgewogICQoCiAgICBbCiAgICAgICc8c3ZnPicsCiAgICAgIC8vIE1hdGVyaWFsIEljb25zCgogICAgICAvLyBwb3J0YWxfZGV0YWlsX2Rpc3BsYXkuanMKICAgICAgJzxzeW1ib2wgaWQ9ImljX3BsYWNlXzI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCI+JywKICAgICAgJzxwYXRoIGQ9Ik0xMiAyQzguMTMgMiA1IDUuMTMgNSA5YzAgNS4yNSA3IDEzIDcgMTNzNy03Ljc1IDctMTNjMC0zLjg3LTMuMTMtNy03LTd6bTAgOS41YTIuNSAyLjUgMCAwIDEgMC01IDIuNSAyLjUgMCAwIDEgMCA1eiIvPicsCiAgICAgICc8L3N5bWJvbD4nLAogICAgICAnPC9zdmc+JywKICAgIF0uam9pbignXFxuJykKICApLmFwcGVuZFRvKCdib2R5Jyk7Cn0KCi8qKgogKiBSZW5kZXJzIHBsYXllciBkZXRhaWxzIGludG8gdGhlIHdlYnNpdGUuIFNpbmNlIHRoZSBwbGF5ZXIgaW5mbyBpcwogKiBpbmNsdWRlZCBhcyBpbmxpbmUgc2NyaXB0IGluIHRoZSBvcmlnaW5hbCBzaXRlLCB0aGUgZGF0YSBpcyBzdGF0aWMKICogYW5kIGNhbm5vdCBiZSB1cGRhdGVkLgogKgogKiBAZnVuY3Rpb24gc2V0dXBQbGF5ZXJTdGF0CiAqLwp3aW5kb3cuc2V0dXBQbGF5ZXJTdGF0ID0gZnVuY3Rpb24gKCkgewogIC8vIHN0b2NrIHNpdGUgdXBkYXRlZCB0byBzdXBwbHkgdGhlIGFjdHVhbCBwbGF5ZXIgbGV2ZWwsIEFQIHJlcXVpcmVtZW50cyBhbmQgWE0gY2FwYWNpdHkgdmFsdWVzCiAgdmFyIGxldmVsID0gd2luZG93LlBMQVlFUi52ZXJpZmllZF9sZXZlbDsKICB3aW5kb3cuUExBWUVSLmxldmVsID0gbGV2ZWw7IC8vIGZvciBoaXN0b3JpY2FsIHJlYXNvbnMgSUlUQyBleHBlY3RzIFBMQVlFUi5sZXZlbCB0byBjb250YWluIHRoZSBjdXJyZW50IHBsYXllciBsZXZlbAoKICB2YXIgbiA9IHdpbmRvdy5QTEFZRVIubmlja25hbWU7CiAgd2luZG93LlBMQVlFUi5uaWNrTWF0Y2hlciA9IG5ldyBSZWdFeHAoJ1xcYignICsgbiArICcpXFxiJywgJ2lnJyk7CgogIHZhciBhcCA9IHBhcnNlSW50KHdpbmRvdy5QTEFZRVIuYXApOwogIHZhciB0aGlzTHZsQXAgPSBwYXJzZUludCh3aW5kb3cuUExBWUVSLm1pbl9hcF9mb3JfY3VycmVudF9sZXZlbCk7CiAgdmFyIG5leHRMdmxBcCA9IHBhcnNlSW50KHdpbmRvdy5QTEFZRVIubWluX2FwX2Zvcl9uZXh0X2xldmVsKTsKCiAgaWYgKG5leHRMdmxBcCkgewogICAgdmFyIGx2bFVwQXAgPSB3aW5kb3cuZGlnaXRzKG5leHRMdmxBcCAtIGFwKTsKICAgIHZhciBsdmxBcFByb2cgPSBNYXRoLnJvdW5kKCgoYXAgLSB0aGlzTHZsQXApIC8gKG5leHRMdmxBcCAtIHRoaXNMdmxBcCkpICogMTAwKTsKICB9IC8vIGVsc2UgemVybyBuZXh0THZsQXAgLSBzbyBhdCBtYXhpbXVtIGxldmVsKD8pCgogIHZhciB4bU1heCA9IHBhcnNlSW50KHdpbmRvdy5QTEFZRVIueG1fY2FwYWNpdHkpOwogIHZhciB4bVJhdGlvID0gTWF0aC5yb3VuZCgod2luZG93LlBMQVlFUi5lbmVyZ3kgLyB4bU1heCkgKiAxMDApOwoKICB2YXIgY2xzID0gd2luZG93LlBMQVlFUi50ZWFtID09PSAnUkVTSVNUQU5DRScgPyAncmVzJyA6ICdlbmwnOwoKICB2YXIgdCA9CiAgICBgTGV2ZWw6XHQke2xldmVsfVxuYCArCiAgICBgWE06XHQke3dpbmRvdy5QTEFZRVIuZW5lcmd5fSAvICR7eG1NYXh9XG5gICsKICAgIGBBUDpcdCR7d2luZG93LmRpZ2l0cyhhcCl9XG5gICsKICAgIChuZXh0THZsQXAgPiAwID8gYGxldmVsIHVwIGluOlx0JHtsdmxVcEFwfSBBUGAgOiAnTWF4aW11bSBsZXZlbCByZWFjaGVkKCEpJykgKwogICAgYFxuSW52aXRlczpcdCR7d2luZG93LlBMQVlFUi5hdmFpbGFibGVfaW52aXRlc31gICsKICAgIGBcblxuTm90ZTogeW91ciBwbGF5ZXIgc3RhdHMgY2FuIG9ubHkgYmUgdXBkYXRlZCBieSBhIGZ1bGwgcmVsb2FkIChGNSlgOwoKICAkKCcjcGxheWVyc3RhdCcpLmh0bWwoCiAgICBgPGgyIHRpdGxlPSIke3R9Ij4KICAgICAgJHtsZXZlbH0KICAgICAgPGRpdiBpZD0ibmFtZSI+CiAgICAgICAgPHNwYW4gY2xhc3M9InBsYXllcm5hbWUgJHtjbHN9Ij4ke3dpbmRvdy5QTEFZRVIubmlja25hbWV9PC9zcGFuPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vaW50ZWwuaW5ncmVzcy5jb20vbG9nb3V0IiBpZD0ic2lnbm91dCI+c2lnbiBvdXQ8L2E+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGlkPSJzdGF0cyI+CiAgICAgICAgPHN1cD5YTTogJHt4bVJhdGlvfSU8L3N1cD4KICAgICAgICA8c3ViPiR7bmV4dEx2bEFwID4gMCA/ICdsZXZlbDogJyArIGx2bEFwUHJvZyArICclJyA6ICdtYXggbGV2ZWwnfTwvc3ViPgogICAgICA8L2Rpdj4KICAgIDwvaDI+YAogICk7Cn07CgovKioKICogSW5pdGlhbGl6ZXMgdGhlIHNpZGViYXIgdG9nZ2xlIGZ1bmN0aW9uYWxpdHkuCiAqCiAqIEBmdW5jdGlvbiBzZXR1cFNpZGViYXJUb2dnbGUKICovCmZ1bmN0aW9uIHNldHVwU2lkZWJhclRvZ2dsZSgpIHsKICAkKCcjc2lkZWJhcnRvZ2dsZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgIHZhciB0b2dnbGUgPSAkKCcjc2lkZWJhcnRvZ2dsZScpOwogICAgdmFyIHNpZGViYXIgPSAkKCcjc2Nyb2xsd3JhcHBlcicpOwogICAgaWYgKHNpZGViYXIuaXMoJzp2aXNpYmxlJykpIHsKICAgICAgc2lkZWJhci5oaWRlKCk7CiAgICAgICQoJy5sZWFmbGV0LXJpZ2h0JykuY3NzKCdtYXJnaW4tcmlnaHQnLCAnMCcpOwogICAgICB0b2dnbGUuaHRtbCgnPHNwYW4gY2xhc3M9InRvZ2dsZSBvcGVuIj48L3NwYW4+Jyk7CiAgICAgIHRvZ2dsZS5jc3MoJ3JpZ2h0JywgJzAnKTsKICAgIH0gZWxzZSB7CiAgICAgIHNpZGViYXIuc2hvdygpOwogICAgICB3aW5kb3cucmVzZXRTY3JvbGxPbk5ld1BvcnRhbCgpOwogICAgICAkKCcubGVhZmxldC1yaWdodCcpLmNzcygnbWFyZ2luLXJpZ2h0Jywgd2luZG93LlNJREVCQVJfV0lEVEggKyAxICsgJ3B4Jyk7CiAgICAgIHRvZ2dsZS5odG1sKCc8c3BhbiBjbGFzcz0idG9nZ2xlIGNsb3NlIj48L3NwYW4+Jyk7CiAgICAgIHRvZ2dsZS5jc3MoJ3JpZ2h0Jywgd2luZG93LlNJREVCQVJfV0lEVEggKyAxICsgJ3B4Jyk7CiAgICB9CiAgICAkKCcudWktdG9vbHRpcCcpLnJlbW92ZSgpOwogIH0pOwp9CgovKioKICogU2V0cyB1cCBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSBsYXJnZSBwb3J0YWwgaW1hZ2Ugdmlldy4gVGhpcyBkaWFsb2cgaXMgZGlzcGxheWVkCiAqIHdoZW4gYSB1c2VyIGNsaWNrcyBvbiB0aGUgcG9ydGFsIHBob3RvIGluIHRoZSBzaWRlYmFyLiBJdCBjcmVhdGVzIGEgbmV3IGltYWdlCiAqIHByZXZpZXcgaW5zaWRlIGEgZGlhbG9nIGJveC4KICoKICogQGZ1bmN0aW9uIHNldHVwTGFyZ2VJbWFnZVByZXZpZXcKICovCmZ1bmN0aW9uIHNldHVwTGFyZ2VJbWFnZVByZXZpZXcoKSB7CiAgJCgnI3BvcnRhbGRldGFpbHMnKS5vbignY2xpY2snLCAnLmltZ3ByZXZpZXcnLCBmdW5jdGlvbiAoZSkgewogICAgdmFyIGltZyA9IHRoaXMucXVlcnlTZWxlY3RvcignaW1nJyk7CiAgICAvLyBkaWFsb2dzIGhhdmUgMTJweCBwYWRkaW5nIGFyb3VuZCB0aGUgY29udGVudAogICAgdmFyIGRsZ1dpZHRoID0gTWF0aC5tYXgoaW1nLm5hdHVyYWxXaWR0aCArIDI0LCA1MDApOwogICAgLy8gVGhpcyBtaWdodCBiZSBhIGNhc2Ugd2hlcmUgbXVsdGlwbGUgZGlhbG9ncyBtYWtlIHNlbnNlLCBmb3IgZXhhbXBsZQogICAgLy8gc29tZW9uZSBtaWdodCB3YW50IHRvIGNvbXBhcmUgaW1hZ2VzIG9mIG11bHRpcGxlIHBvcnRhbHMuICBCdXQKICAgIC8vIHVzdWFsbHkgd2Ugb25seSB3YW50IHRvIHNob3cgb25lIHZlcnNpb24gb2YgZWFjaCBpbWFnZS4KICAgIC8vIFRvIHN1cHBvcnQgdGhhdCwgd2UnZCBuZWVkIGEgdW5pcXVlIGtleSBwZXIgcG9ydGFsLiAgRXhhbXBsZSwgZ3VpZC4KICAgIC8vIFNvIHRoYXQgd291bGQgaGF2ZSB0byBiZSBpbiB0aGUgaHRtbCBmZXRjaGVkIGludG8gZGV0YWlscy4KCiAgICB2YXIgcHJldmlldyA9IG5ldyBJbWFnZShpbWcud2lkdGgsIGltZy5oZWlnaHQpOwogICAgcHJldmlldy5zcmMgPSBpbWcuc3JjOwogICAgcHJldmlldy5zdHlsZSA9ICdtYXJnaW46IGF1dG87IGRpc3BsYXk6IGJsb2NrJzsKICAgIHZhciB0aXRsZSA9IGUuZGVsZWdhdGVUYXJnZXQucXVlcnlTZWxlY3RvcignLnRpdGxlJykuaW5uZXJUZXh0OwogICAgd2luZG93LmRpYWxvZyh7CiAgICAgIGh0bWw6IHByZXZpZXcsCiAgICAgIHRpdGxlOiB0aXRsZSwKICAgICAgaWQ6ICdpaXRjLXBvcnRhbC1pbWFnZScsCiAgICAgIHdpZHRoOiBkbGdXaWR0aCwKICAgIH0pOwogIH0pOwp9CgovLyBmaXhlZCBBZGRvbnMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKLyoqCiAqIFVwZGF0ZXMgdGhlIHBlcm1hbGluayBocmVmIGF0dHJpYnV0ZSBvbiBtb3VzZW92ZXIgYW5kIGNsaWNrIGV2ZW50cy4KICoKICogQGZ1bmN0aW9uIHNldFBlcm1hTGluawogKi8KZnVuY3Rpb24gc2V0UGVybWFMaW5rKCkgewogIHRoaXMuaHJlZiA9IHdpbmRvdy5tYWtlUGVybWFsaW5rKG51bGwsIHRydWUpOwp9CgovKioKICogU2V0cyB1cCBhZGRpdGlvbmFsIGVsZW1lbnRzIGluIHRoZSBzaWRlYmFyLCBzdWNoIGFzIHBlcm1hbGluayBhbmQgYWJvdXQgZGlhbG9nLgogKgogKiBAZnVuY3Rpb24gc2V0dXBBZGRvbnMKICovCmZ1bmN0aW9uIHNldHVwQWRkb25zKCkgewogIElJVEMudG9vbGJveC5hZGRCdXR0b24oewogICAgaWQ6ICdwZXJtYWxpbmsnLAogICAgbGFiZWw6ICdQZXJtYWxpbmsnLAogICAgdGl0bGU6ICdVUkwgbGluayB0byB0aGlzIG1hcCB2aWV3JywKICAgIGFjdGlvbjogc2V0UGVybWFMaW5rLAogICAgbW91c2VvdmVyOiBzZXRQZXJtYUxpbmssCiAgfSk7CgogIElJVEMudG9vbGJveC5hZGRCdXR0b24oewogICAgaWQ6ICdhYm91dC1paXRjJywKICAgIGxhYmVsOiAnQWJvdXQgSUlUQycsCiAgICBhY3Rpb246IHdpbmRvdy5hYm91dElJVEMsCiAgICBjbGFzczogJ2N1cnNvcl9oZWxwJywKICB9KTsKCiAgd2luZG93LmFydGlmYWN0LnNldHVwKCk7CgogIHdpbmRvdy5SZWdpb25TY29yZWJvYXJkU2V0dXAoKTsKfQoKLyoqCiAqIHBvcnRhbEFkZGVkIGNhbGxiYWNrIHRvIHVwZGF0ZSB0aGUgc2lkZWJhcgogKgogKiBAZnVuY3Rpb24gc2lkZWJhck9uUG9ydGFsQWRkZWQKICovCmZ1bmN0aW9uIHNpZGViYXJPblBvcnRhbEFkZGVkKGRhdGEpIHsKICBpZiAoZGF0YS5wb3J0YWwub3B0aW9ucy5ndWlkID09PSB3aW5kb3cuc2VsZWN0ZWRQb3J0YWwpIHsKICAgIHdpbmRvdy5yZW5kZXJQb3J0YWxEZXRhaWxzKHdpbmRvdy5zZWxlY3RlZFBvcnRhbCk7CiAgfQp9CgovKioKICogcG9ydGFsRGV0YWlsTG9hZGVkIGNhbGxiYWNrIHRvIHVwZGF0ZSB0aGUgc2lkZWJhcgogKgogKiBAZnVuY3Rpb24gc2lkZWJhck9uUG9ydGFsRGV0YWlsTG9hZGVkCiAqLwpmdW5jdGlvbiBzaWRlYmFyT25Qb3J0YWxEZXRhaWxMb2FkZWQoZGF0YSkgewogIGlmIChkYXRhLnN1Y2Nlc3MgJiYgZGF0YS5ndWlkID09PSB3aW5kb3cuc2VsZWN0ZWRQb3J0YWwpIHsKICAgIHdpbmRvdy5yZW5kZXJQb3J0YWxUb1NpZGVCYXIoZGF0YS5wb3J0YWwpOwogIH0KfQoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogc21hcnRwaG9uZS5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3NtYXJ0cGhvbmUnKTsKLyogZ2xvYmFsIGxvZyAtLSBlc2xpbnQgKi8KCi8qKgogKiBAZmlsZSBUaGlzIGZpbGUgcHJvdmlkZXMgZnVuY3Rpb25zIGFuZCB1dGlsaXRpZXMgc3BlY2lmaWNhbGx5IGZvciB0aGUgc21hcnRwaG9uZSBsYXlvdXQgb2YgSUlUQy4KICogQG1vZHVsZSBzbWFydHBob25lCiAqLwoKLyoqCiAqIERldGVybWluZXMgaWYgdGhlIHVzZXIncyBkZXZpY2UgaXMgYSBzbWFydHBob25lLgogKiBOb3RlIGl0IHNob3VsZCBub3QgZGV0ZWN0IHRhYmxldHMgYmVjYXVzZSB0aGVpciBkaXNwbGF5IGlzIGxhcmdlIGVub3VnaCB0byB1c2UgdGhlIGRlc2t0b3AgdmVyc2lvbi4KICogVGhlIHN0b2NrIGludGVsIHNpdGUgYWxsb3dzIGZvcmNpbmcgbW9iaWxlL2Z1bGwgc2l0ZXMgd2l0aCBhIHZwPW0gb3IgdnA9ZiBwYXJhbWV0ZXIuIFRoaXMgZnVuY3Rpb24gc3VwcG9ydHMgdGhlIHNhbWUuCiAqCiAqIEBmdW5jdGlvbiBpc1NtYXJ0cGhvbmUKICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHVzZXIncyBkZXZpY2UgaXMgYSBzbWFydHBob25lLCBmYWxzZSBvdGhlcndpc2UuCiAqLwp3aW5kb3cuaXNTbWFydHBob25lID0gZnVuY3Rpb24gKCkgewogIC8vIHRoaXMgY2hlY2sgaXMgYWxzbyB1c2VkIGluIG1haW4uanMuIE5vdGUgaXQgc2hvdWxkIG5vdCBkZXRlY3QKICAvLyB0YWJsZXRzIGJlY2F1c2UgdGhlaXIgZGlzcGxheSBpcyBsYXJnZSBlbm91Z2ggdG8gdXNlIHRoZSBkZXNrdG9wCiAgLy8gdmVyc2lvbi4KCiAgLy8gVGhlIHN0b2NrIGludGVsIHNpdGUgYWxsb3dzIGZvcmNpbmcgbW9iaWxlL2Z1bGwgc2l0ZXMgd2l0aCBhIHZwPW0gb3IgdnA9ZgogIC8vIHBhcmFtZXRlciAtIGxldCdzIHN1cHBvcnQgdGhlIHNhbWUuIChzdG9jayBvbmx5IGFsbG93cyB0aGlzIGZvciBzb21lCiAgLy8gYnJvd3NlcnMgLSBlLmcuIGFuZHJvaWQgcGhvbmUvdGFibGV0LiBsZXQncyBhbGxvdyBpdCBmb3IgYWxsLCBidXQKICAvLyBubyBwcm9taXNlcyBpdCdsbCB3b3JrIHJpZ2h0KQogIHZhciB2aWV3UGFyYW0gPSB3aW5kb3cuZ2V0VVJMUGFyYW0oJ3ZwJyk7CiAgaWYgKHZpZXdQYXJhbSA9PT0gJ20nKSByZXR1cm4gdHJ1ZTsKICBpZiAodmlld1BhcmFtID09PSAnZicpIHJldHVybiBmYWxzZTsKCiAgcmV0dXJuICEhKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQuKk1vYmlsZS8pIHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZXxpUGFkfGlQb2QvaSkpOwp9OwoKLyoqCiAqIFBsYWNlaG9sZGVyIGZvciBzbWFydHBob25lIHNwZWNpZmljIG1hbmlwdWxhdGlvbnMuCiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaW1wbGVtZW50IGFueSBsb2dpYyBieSBpdHNlbGYuCiAqCiAqIEBmdW5jdGlvbiBzbWFydHBob25lCiAqLwp3aW5kb3cuc21hcnRwaG9uZSA9IGZ1bmN0aW9uICgpIHt9OwoKLyoqCiAqIFBlcmZvcm1zIGluaXRpYWwgc2V0dXAgdGFza3MgZm9yIElJVEMgb24gc21hcnRwaG9uZXMgYmVmb3JlIHRoZSBJSVRDIGJvb3QgcHJvY2Vzcy4KICogVGhpcyBpbmNsdWRlcyBhZGRpbmcgc21hcnRwaG9uZS1zcGVjaWZpYyBzdHlsZXNoZWV0cwogKiBhbmQgbW9kaWZ5aW5nIHNvbWUgb2YgdGhlIHNldHVwIGZ1bmN0aW9ucyBmb3IgbW9iaWxlIGNvbXBhdGliaWxpdHkuCiAqCiAqIEBmdW5jdGlvbiBydW5PblNtYXJ0cGhvbmVzQmVmb3JlQm9vdAogKi8Kd2luZG93LnJ1bk9uU21hcnRwaG9uZXNCZWZvcmVCb290ID0gZnVuY3Rpb24gKCkgewogIGlmICghd2luZG93LmlzU21hcnRwaG9uZSgpKSByZXR1cm47CiAgbG9nLndhcm4oJ3J1bm5pbmcgc21hcnRwaG9uZSBwcmUgYm9vdCBzdHVmZicpOwoKICAvLyBhZGQgc21hcnRwaG9uZSBzdHlsZXNoZWV0CiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJzsKICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXApib2R5IHtcCiAgY29sb3I6ICNmZmY7XAp9XApcCiN1cGRhdGVzdGF0dXMge1wKICBiYWNrZ3JvdW5kOiAjMjYyYzMyO1wKICB3aWR0aDogMTAwJTtcCiAgY29sb3I6ICNkNGQ1ZDY7XAogIGJvcmRlcjogMDtcCiAgcGFkZGluZzogMDtcCn1cClwKI3VwZGF0ZXN0YXR1cyAubWFwIHtcCiAgbWFyZ2luLWxlZnQ6IDRweDtcCn1cClwKI2lubmVyc3RhdHVzIHtcCiAgcGFkZGluZzogNHB4O1wKICBmbG9hdDogcmlnaHQ7XAogIHdpZHRoOiA1MCU7XAogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKICBvdmVyZmxvdzogaGlkZGVuO1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcCn1cClwKI2xvYWRsZXZlbCB7XAogIGJvcmRlci13aWR0aDogMDtcCiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XAogIGNvbG9yOiAjRkZGO1wKfVwKXAojbW9iaWxlaW5mbyB7XAogIGZsb2F0OiBsZWZ0O1wKICB3aWR0aDogNTAlO1wKICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcCiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcCiAgb3ZlcmZsb3c6IGhpZGRlbjtcCiAgcG9zaXRpb246cmVsYXRpdmU7XAogIHBhZGRpbmc6IDRweCAwO1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcCn1cClwKI21vYmlsZWluZm8gLnBvcnRhbGxldmVsIHtcCiAgcGFkZGluZzogMCAwLjI1ZW07XAogIGNvbG9yOiAjRkZGO1wKfVwKXAojbW9iaWxlaW5mbyAucmVzb25hdG9yIHtcCiAgcG9zaXRpb246IGFic29sdXRlO1wKICB3aWR0aDogMTIlOyAvKiBhIGxpdHRsZSBsZXNzIHRoYXQgMS84IHRvIGhhdmUgYSBzbWFsbCBkaXN0YW5jZSAqL1wKICBoZWlnaHQ6IDEwMCU7XAogIHRvcDogMDtcCiAgYm9yZGVyLXRvcDogM3B4IHNvbGlkIHJlZDtcCiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1wKICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAp9XApcCiNtb2JpbGVpbmZvIC5yZXNvbmF0b3Iubm9ydGg6YmVmb3JlIHtcCiAgY29udGVudDogIiI7XAogIGJhY2tncm91bmQtY29sb3I6IHJlZDtcCiAgYm9yZGVyLXJhZGl1czogMTAwJTtcCiAgZGlzcGxheTogYmxvY2s7XAogIGhlaWdodDogNnB4O1wKICB3aWR0aDogNnB4O1wKICBsZWZ0OiA1MCU7XAogIHRvcDogLTNweDtcCiAgbWFyZ2luLWxlZnQ6IC0zcHg7XAogIHBvc2l0aW9uOiBhYnNvbHV0ZTtcCiAgei1pbmRleDogLTE7XAp9XApcCiNtb2JpbGVpbmZvIC5maWxsbGV2ZWwge1wKICBwb3NpdGlvbjogYWJzb2x1dGU7XAogIGJvdHRvbTogMDtcCiAgaGVpZ2h0OiAzcHg7XAp9XApcCiNtb2JpbGVpbmZvIC5lbmwgLmZpbGxsZXZlbCB7XAogIGJhY2tncm91bmQtY29sb3I6ICMwM2ZlMDMgIWltcG9ydGFudDtcCn1cClwKI21vYmlsZWluZm8gLnJlcyAuZmlsbGxldmVsIHtcCiAgYmFja2dyb3VuZC1jb2xvcjogIzAwYzVmZiAhaW1wb3J0YW50O1wKfVwKXAojbW9iaWxlaW5mbyAubWFjIC5maWxsbGV2ZWwge1wKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDI4ICFpbXBvcnRhbnQ7XAp9XApcCiNwbGF5ZXJzdGF0IHtcCiAgaGVpZ2h0OiBpbml0aWFsO1wKfVwKXAojcGxheWVyc3RhdCBoMiB7XAogIGRpc3BsYXk6IGZsZXg7XAogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcCiAgZmxleC13cmFwOiB3cmFwO1wKICBwYWRkaW5nOiA1cHg7XAp9XApcCiNwbGF5ZXJzdGF0IGgyICNuYW1lIHtcCiAgZGlzcGxheTogZmxleDtcCiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcCn1cClwKI3BsYXllcnN0YXQgaDIgI25hbWUgLnBsYXllcm5hbWUsXAojcGxheWVyc3RhdCBoMiAjbmFtZTpob3ZlciAucGxheWVybmFtZXtcCiAgbWF4LXdpZHRoOiA2MHZ3O1wKfVwKXAojcGxheWVyc3RhdCBoMiAjc3RhdHMge1wKICB3aGl0ZS1zcGFjZTogbm93cmFwO1wKICBvdmVyZmxvdzogaW5pdGlhbDtcCn1cClwKI25hbWUgI3NpZ25vdXQgeyAvKiBubyBob3ZlciwgYWx3YXlzIHNob3cgc2lnbm91dCBidXR0b24gKi9cCiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1wKICBwb3NpdGlvbjogaW5pdGlhbDtcCiAgbWFyZ2luLWxlZnQ6IDRweDtcCn1cClwKI3NlYXJjaHdyYXBwZXIgLnVpLWFjY29yZGlvbi1oZWFkZXIge1wKICBwYWRkaW5nOiAwLjNlbSAwO1wKfVwKI3NlYXJjaHdyYXBwZXIgbGkge1wKICBsaW5lLWhlaWdodDogMS4zZW07XAp9XApcCiNjaGF0Y29udHJvbHMge1wKICBoZWlnaHQ6IDM4cHg7XAogIHdpZHRoOiAxMDAlO1wKICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XAp9XApcCi8qIGhpZGUgc2hyaW5rIGJ1dHRvbiAqL1wKI2NoYXRjb250cm9scyBhOmZpcnN0LWNoaWxkIHtcCiAgZGlzcGxheTogbm9uZTtcCn1cClwKI2NoYXRjb250cm9scyBhIHtcCiAgd2lkdGg6IDUwcHg7XAogIGhlaWdodDozNnB4O1wKICBvdmVyZmxvdzogaGlkZGVuO1wKICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1wKICBsaW5lLWhlaWdodDogMzZweDtcCiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1wKICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XAogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcCiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcCn1cClwKI2NoYXQge1wKICBsZWZ0OjA7XAogIHJpZ2h0OjA7XAogIHRvcDogMXB4ICFpbXBvcnRhbnQ7XAogIGJvdHRvbTozMHB4O1wKICB3aWR0aDogYXV0bztcCn1cClwKI2NoYXRpbnB1dCB7XAogIHdpZHRoOiAxMDAlO1wKICBoZWlnaHQ6IDMwcHg7XAp9XApcCiNjaGF0IHRkOm50aC1jaGlsZCgyKSwgI2NoYXRpbnB1dCB0ZDpudGgtY2hpbGQoMikge1wKICB3aWR0aDogNzdweDtcCn1cClwKI2NoYXRjb250cm9scyBhLmFjdGl2ZSB7XAogIGJvcmRlci1jb2xvcjogI0ZGQ0UwMDtcCiAgYm9yZGVyLWJvdHRvbS13aWR0aDowcHg7XAogIGZvbnQtd2VpZ2h0OmJvbGRcCn1cClwKI2NoYXRjb250cm9scyBhLmFjdGl2ZSArIGEge1wKICBib3JkZXItbGVmdC1jb2xvcjogI0ZGQ0UwMFwKfVwKXAojc2lkZWJhcnRvZ2dsZSB7XAogIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcCn1cClwKI3Njcm9sbHdyYXBwZXIge1wKICBib3R0b206IDA7XAogIG1heC1oZWlnaHQ6IG5vbmUgIWltcG9ydGFudDtcCiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcCiAgcmlnaHQ6IDA7XAogIGxlZnQ6MDtcCn1cClwKI3NpZGViYXIge1wKICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1wKICBtaW4taGVpZ2h0OiAxMDAlO1wKICBib3JkZXI6MDtcCn1cClwKI3NpZGViYXIgPiAqIHtcCiAgd2lkdGg6IDEwMCU7XAp9XApcCiNwb3J0YWxkZXRhaWxzIHtcCiAgbWluLWhlaWdodDogMDtcCn1cClwKLmZ1bGxpbWcge1wKICB3aWR0aDogMTAwJTtcCn1cClwKLypcCiAqIGZvciBzb21lIHJlYXNvbiBsZWFmbGV0IHBvcHVwcyBvbiBtb2JpbGUgYXJlIGNvbG9yZWQgd2hpdGUgb24gd2hpdGVcCiAqIHNvIGZvcmNlIHRoZSBwb3B1cCBtc2cgY29sb3IgdG8gYmxhY2tcCiAqL1wKLmxlYWZsZXQtcG9wdXAtY29udGVudHtcCiAgICBjb2xvcjpibGFjaztcCn1cClwKXAovKiBhZGQgZXh0cmEgcGFkZGluZywgYW5kIGEgYnV0dG9uIGVmZmVjdCwgdG8gc2lkZWJhciBsaW5rIGFyZWFzICovXAoubGlua2RldGFpbHMgYXNpZGUgIHtcCiAgcGFkZGluZzogNXB4O1wKICBtYXJnaW4tdG9wOiAzcHg7XAogIG1hcmdpbi1ib3R0b206IDNweDtcCiAgYm9yZGVyOiAycHggb3V0c2V0ICMyMEE4QjE7XAp9XApcCiN0b29sYm94ID4gYSwgI3Rvb2xib3hfY29tcG9uZW50ID4gYSB7XAogIHBhZGRpbmc6IDVweDtcCiAgbWFyZ2luLXRvcDogM3B4O1wKICBtYXJnaW4tYm90dG9tOiAzcHg7XAogIGJvcmRlcjogMnB4IG91dHNldCAjMjBBOEIxO1wKfVwKXAojcG9ydGFsZGV0YWlscyAuY2xvc2Uge1wKICBwYWRkaW5nOiA0cHg7XAogIGJvcmRlcjogMXB4IG91dHNldCAjMjBBOEIxO1wKICBtYXJnaW4tdG9wOiAycHg7XAp9XApcCi8qIEZJWCBNRVwKICAgUXVpY2sgYW5kIGRpcnR5IGhhY2sgdG8gZml4IHNjYWxlLWJhciBwb3NpdGlvblwKICAgUGVybWFuZW50IHNvbHV0aW9uIHNob3VsZCBpbmNsdWRlIGZpeGVzIGZvciBhdHRyaWJ1dGlvbiBjb250cm9sIHRvb1wKICAgaHR0cHM6Ly9naXRodWIuY29tL0lJVEMtQ0UvaW5ncmVzcy1pbnRlbC10b3RhbC1jb252ZXJzaW9uL2lzc3Vlcy84OVwKKi9cCi5sZWFmbGV0LWJvdHRvbSB7IGJvdHRvbTogNXB4OyB9XApcCi8qIENvbnRyb2xzIGZvciBtb2JpbGUgdmlldyB3aXRob3V0IGFuIGFwcCAqL1wKOnJvb3Qge1wKICAtLXRvcC1jb250cm9scy1oZWlnaHQ6IDM4cHg7XAp9XApcCmJvZHkuc2hvd19jb250cm9scyAjY2hhdGNvbnRyb2xzIHtcCiAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1wKICB0b3A6IDA7XAogIG92ZXJmbG93LXg6IGF1dG87XAogIHdpZHRoOiBjYWxjKDEwMCUgLSAxcHgpO1wKfVwKXApib2R5LnNob3dfY29udHJvbHMgI2NoYXRjb250cm9scyBhIHtcCiAgZmxleDogMTtcCiAgbWluLXdpZHRoOiBmaXQtY29udGVudDtcCiAgcGFkZGluZzogMCA1cHg7XAp9XApcCmJvZHkuc2hvd19jb250cm9scyAjbWFwIHtcCiAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gdmFyKC0tdG9wLWNvbnRyb2xzLWhlaWdodCkgLSAyNXB4KTtcCiAgbWFyZ2luLXRvcDogdmFyKC0tdG9wLWNvbnRyb2xzLWhlaWdodCk7XAp9XApcCmJvZHkuc2hvd19jb250cm9scyAjc2Nyb2xsd3JhcHBlciB7XAogIG1hcmdpbi10b3A6IHZhcigtLXRvcC1jb250cm9scy1oZWlnaHQpXAp9XApcCmJvZHkuc2hvd19jb250cm9scyAjY2hhdCB7XAogIHRvcDogdmFyKC0tdG9wLWNvbnRyb2xzLWhlaWdodCkgIWltcG9ydGFudDtcCn0nKSk7CiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CgogIC8vIGRvbuKAmXQgbmVlZCBtYW55IG9mIHRob3NlCiAgd2luZG93LnNldHVwU3R5bGVzID0gZnVuY3Rpb24gKCkgewogICAgJCgnaGVhZCcpLmFwcGVuZCgKICAgICAgJzxzdHlsZT4nICsKICAgICAgICBbCiAgICAgICAgICAnI2xhcmdlcHJldmlldy5lbmwgaW1nIHsgYm9yZGVyOjJweCBzb2xpZCAnICsgd2luZG93LkNPTE9SU1t3aW5kb3cuVEVBTV9FTkxdICsgJzsgfSAnLAogICAgICAgICAgJyNsYXJnZXByZXZpZXcucmVzIGltZyB7IGJvcmRlcjoycHggc29saWQgJyArIHdpbmRvdy5DT0xPUlNbd2luZG93LlRFQU1fUkVTXSArICc7IH0gJywKICAgICAgICAgICcjbGFyZ2VwcmV2aWV3Lm5vbmUgaW1nIHsgYm9yZGVyOjJweCBzb2xpZCAnICsgd2luZG93LkNPTE9SU1t3aW5kb3cuVEVBTV9OT05FXSArICc7IH0gJywKICAgICAgICBdLmpvaW4oJ1xuJykgKwogICAgICAgICc8L3N0eWxlPicKICAgICk7CiAgfTsKCiAgd2luZG93LnNtYXJ0cGhvbmUubWFwQnV0dG9uID0gJCgnPGE+bWFwPC9hPicpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5zaG93KCdtYXAnKTsKICAgICQoJyNtYXAnKS5jc3MoeyB2aXNpYmlsaXR5OiAndmlzaWJsZScsIG9wYWNpdHk6ICcxJyB9KTsKICAgICQoJyN1cGRhdGVzdGF0dXMnKS5zaG93KCk7CiAgICAkKCcjY2hhdGNvbnRyb2xzIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpOwogICAgJCgiI2NoYXRjb250cm9scyBhOmNvbnRhaW5zKCdtYXAnKSIpLmFkZENsYXNzKCdhY3RpdmUnKTsKICB9KTsKCiAgd2luZG93LnNtYXJ0cGhvbmUuc2lkZUJ1dHRvbiA9ICQoJzxhPmluZm88L2E+JykuY2xpY2soZnVuY3Rpb24gKCkgewogICAgd2luZG93LnNob3coJ2luZm8nKTsKICAgICQoJyNzY3JvbGx3cmFwcGVyJykuc2hvdygpOwogICAgd2luZG93LnJlc2V0U2Nyb2xsT25OZXdQb3J0YWwoKTsKICAgICQoJyNjaGF0Y29udHJvbHMgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7CiAgICAkKCIjY2hhdGNvbnRyb2xzIGE6Y29udGFpbnMoJ2luZm8nKSIpLmFkZENsYXNzKCdhY3RpdmUnKTsKICB9KTsKCiAgJCgnI2NoYXRjb250cm9scycpLmFwcGVuZCh3aW5kb3cuc21hcnRwaG9uZS5tYXBCdXR0b24pLmFwcGVuZCh3aW5kb3cuc21hcnRwaG9uZS5zaWRlQnV0dG9uKTsKCiAgaWYgKCF3aW5kb3cudXNlQXBwUGFuZXMoKSkgewogICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdzaG93X2NvbnRyb2xzJyk7CiAgfQoKICB3aW5kb3cuYWRkSG9vaygncG9ydGFsRGV0YWlsc1VwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7CiAgICB2YXIgeCA9ICQoJy5pbWdwcmV2aWV3IGltZycpLnJlbW92ZUNsYXNzKCdoaWRlJyk7CgogICAgaWYgKCF4Lmxlbmd0aCkgewogICAgICAkKCcuZnVsbGltZycpLnJlbW92ZSgpOwogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKCQoJy5mdWxsaW1nJykubGVuZ3RoKSB7CiAgICAgICQoJy5mdWxsaW1nJykucmVwbGFjZVdpdGgoeC5hZGRDbGFzcygnZnVsbGltZycpKTsKICAgIH0gZWxzZSB7CiAgICAgIHguYWRkQ2xhc3MoJ2Z1bGxpbWcnKS5hcHBlbmRUbygnI3NpZGViYXInKTsKICAgIH0KICB9KTsKfTsKCi8qKgogKiBVcGRhdGVzIHRoZSBtb2JpbGUgaW5mb3JtYXRpb24gYmFyIHdpdGggcG9ydGFsIGRldGFpbHMgd2hlbiBhIHBvcnRhbCBpcyBzZWxlY3RlZC4KICogVGhpcyBmdW5jdGlvbiBpcyBob29rZWQgdG8gdGhlICdwb3J0YWxTZWxlY3RlZCcgZXZlbnQgYW5kIGlzIHNwZWNpZmljIHRvIHRoZSBzbWFydHBob25lIGxheW91dC4KICoKICogQGZ1bmN0aW9uIHNtYXJ0cGhvbmVJbmZvCiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxlY3RlZFBvcnRhbERhdGEgLSBUaGUgb2JqZWN0IGNvbnRhaW5pbmcgZGV0YWlscyBhYm91dCB0aGUgc2VsZWN0ZWQgcG9ydGFsLgogKi8Kd2luZG93LnNtYXJ0cGhvbmVJbmZvID0gZnVuY3Rpb24gKHNlbGVjdGVkUG9ydGFsRGF0YSkgewogIHZhciBndWlkID0gc2VsZWN0ZWRQb3J0YWxEYXRhLnNlbGVjdGVkUG9ydGFsR3VpZDsKICBpZiAoIXdpbmRvdy5wb3J0YWxzW2d1aWRdKSByZXR1cm47CgogIHZhciBkYXRhID0gd2luZG93LnBvcnRhbHNbd2luZG93LnNlbGVjdGVkUG9ydGFsXS5vcHRpb25zLmRhdGE7CiAgaWYgKHR5cGVvZiBkYXRhLnRpdGxlID09PSAndW5kZWZpbmVkJykgcmV0dXJuOwoKICB2YXIgZGV0YWlscyA9IHdpbmRvdy5wb3J0YWxEZXRhaWwuZ2V0KGd1aWQpOwoKICB2YXIgbHZsID0gZGF0YS5sZXZlbDsKICBsZXQgdDsKICBpZiAoZGF0YS50ZWFtID09PSAnTicgfHwgZGF0YS50ZWFtID09PSAnTkVVVFJBTCcpIHQgPSAnPHNwYW4gY2xhc3M9InBvcnRhbGxldmVsIj5MMDwvc3Bhbj4nOwogIGVsc2UgdCA9ICc8c3BhbiBjbGFzcz0icG9ydGFsbGV2ZWwiIHN0eWxlPSJiYWNrZ3JvdW5kOiAnICsgd2luZG93LkNPTE9SU19MVkxbbHZsXSArICc7Ij5MJyArIGx2bCArICc8L3NwYW4+JzsKCiAgdmFyIHBlcmNlbnRhZ2UgPSBkYXRhLmhlYWx0aDsKICBpZiAoZGV0YWlscykgewogICAgdmFyIHRvdGFsRW5lcmd5ID0gd2luZG93LmdldFRvdGFsUG9ydGFsRW5lcmd5KGRldGFpbHMpOwogICAgaWYgKHdpbmRvdy5nZXRUb3RhbFBvcnRhbEVuZXJneShkZXRhaWxzKSA+IDApIHsKICAgICAgcGVyY2VudGFnZSA9IE1hdGguZmxvb3IoKHdpbmRvdy5nZXRDdXJyZW50UG9ydGFsRW5lcmd5KGRldGFpbHMpIC8gdG90YWxFbmVyZ3kpICogMTAwKTsKICAgIH0KICB9CiAgdCArPSAnICcgKyBwZXJjZW50YWdlICsgJyUgJzsKICB0ICs9IGRhdGEudGl0bGU7CgogIGlmIChkZXRhaWxzKSB7CiAgICB2YXIgbCwgdiwgbWF4LCBwZXJjOwogICAgdmFyIGVhc3RBbnRpY2xvY2t3aXNlVG9Ob3J0aENsb2Nrd2lzZSA9IFsyLCAxLCAwLCA3LCA2LCA1LCA0LCAzXTsKCiAgICBmb3IgKHZhciBpbmQgPSAwOyBpbmQgPCA4OyBpbmQrKykgewogICAgICBsZXQgc2xvdCwgcmVzbzsKICAgICAgaWYgKGRldGFpbHMucmVzb25hdG9ycy5sZW5ndGggPT09IDgpIHsKICAgICAgICBzbG90ID0gZWFzdEFudGljbG9ja3dpc2VUb05vcnRoQ2xvY2t3aXNlW2luZF07CiAgICAgICAgcmVzbyA9IGRldGFpbHMucmVzb25hdG9yc1tzbG90XTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzbG90ID0gbnVsbDsKICAgICAgICByZXNvID0gaW5kIDwgZGV0YWlscy5yZXNvbmF0b3JzLmxlbmd0aCA/IGRldGFpbHMucmVzb25hdG9yc1tpbmRdIDogbnVsbDsKICAgICAgfQoKICAgICAgdmFyIGNsYXNzTmFtZSA9IHdpbmRvdy5URUFNX1RPX0NTU1t3aW5kb3cuZ2V0VGVhbShkZXRhaWxzKV07CiAgICAgIGlmIChzbG90ICE9PSBudWxsICYmIHdpbmRvdy5PQ1RBTlRTW3Nsb3RdID09PSAnTicpIGNsYXNzTmFtZSArPSAnIG5vcnRoJzsKICAgICAgaWYgKHJlc28pIHsKICAgICAgICBsID0gcGFyc2VJbnQocmVzby5sZXZlbCk7CiAgICAgICAgdiA9IHBhcnNlSW50KHJlc28uZW5lcmd5KTsKICAgICAgICBtYXggPSB3aW5kb3cuUkVTT19OUkdbbF07CiAgICAgICAgcGVyYyA9ICh2IC8gbWF4KSAqIDEwMDsKICAgICAgfSBlbHNlIHsKICAgICAgICBsID0gMDsKICAgICAgICB2ID0gMDsKICAgICAgICBtYXggPSAwOwogICAgICAgIHBlcmMgPSAwOwogICAgICB9CgogICAgICB0ICs9ICc8ZGl2IGNsYXNzPSJyZXNvbmF0b3IgJyArIGNsYXNzTmFtZSArICciIHN0eWxlPSJib3JkZXItdG9wLWNvbG9yOiAnICsgd2luZG93LkNPTE9SU19MVkxbbF0gKyAnO2xlZnQ6ICcgKyAoMTAwICogaW5kKSAvIDguMCArICclOyI+JzsKICAgICAgdCArPSAnPGRpdiBjbGFzcz0iZmlsbGxldmVsIiBzdHlsZT0id2lkdGg6JyArIHBlcmMgKyAnJTsiPjwvZGl2Pic7CiAgICAgIHQgKz0gJzwvZGl2Pic7CiAgICB9CiAgfQoKICAkKCcjbW9iaWxlaW5mbycpLmh0bWwodCk7Cn07CgovKioKICogUGVyZm9ybXMgc2V0dXAgdGFza3MgZm9yIElJVEMgb24gc21hcnRwaG9uZXMgYWZ0ZXIgdGhlIElJVEMgYm9vdCBwcm9jZXNzLgogKiBUaGlzIGluY2x1ZGVzIGluaXRpYWxpemluZyBtb2JpbGUgaW5mbyBkaXNwbGF5LCBhZGp1c3RpbmcgVUkgZWxlbWVudHMgZm9yIG1vYmlsZSBjb21wYXRpYmlsaXR5LAogKiBhbmQgc2V0dGluZyBldmVudCBoYW5kbGVycyBmb3IgbW9iaWxlLXNwZWNpZmljIGludGVyYWN0aW9ucy4KICoKICogQGZ1bmN0aW9uIHJ1bk9uU21hcnRwaG9uZXNBZnRlckJvb3QKICovCndpbmRvdy5ydW5PblNtYXJ0cGhvbmVzQWZ0ZXJCb290ID0gZnVuY3Rpb24gKCkgewogIGlmICghd2luZG93LmlzU21hcnRwaG9uZSgpKSByZXR1cm47CiAgbG9nLndhcm4oJ3J1bm5pbmcgc21hcnRwaG9uZSBwb3N0IGJvb3Qgc3R1ZmYnKTsKCiAgd2luZG93LnNob3coJ21hcCcpOwoKICAvLyBhZGQgYSBkaXYvaG9vayBmb3IgdXBkYXRpbmcgbW9iaWxlIGluZm8KICAkKCcjdXBkYXRlc3RhdHVzJykucHJlcGVuZCgnPGRpdiBpZD0ibW9iaWxlaW5mbyIgb25jbGljaz0ic2hvdyhcJ2luZm9cJykiPjwvZGl2PicpOwogIHdpbmRvdy5hZGRIb29rKCdwb3J0YWxTZWxlY3RlZCcsIHdpbmRvdy5zbWFydHBob25lSW5mbyk7CiAgd2luZG93LmFkZEhvb2soJ3BvcnRhbERldGFpbExvYWRlZCcsIChkYXRhKSA9PiB7CiAgICBpZiAoZGF0YS5zdWNjZXNzICYmIGRhdGEuZ3VpZCA9PT0gd2luZG93LnNlbGVjdGVkUG9ydGFsKSB7CiAgICAgIHdpbmRvdy5zbWFydHBob25lSW5mbyh7IHNlbGVjdGVkUG9ydGFsR3VpZDogZGF0YS5ndWlkIH0pOwogICAgfQogIH0pOwoKICAvLyBpbml0IG1zZyBvZiBzdGF0dXMgYmFyLiBoaW50IGZvciB0aGUgdXNlciB0aGF0IGEgdGFwIGxlYWRzIHRvIHRoZSBpbmZvIHNjcmVlbgogICQoJyNtb2JpbGVpbmZvJykuaHRtbCgnPGRpdiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyIj48Yj50YXAgaGVyZSBmb3IgaW5mbyBzY3JlZW48L2I+PC9kaXY+Jyk7CgogIC8vIHJlcGxhY2UgaW1nIGZ1bGwgdmlldyBoYW5kbGVyCiAgJCgnI3BvcnRhbGRldGFpbHMnKQogICAgLm9mZignY2xpY2snLCAnLmltZ3ByZXZpZXcnKQogICAgLm9uKCdjbGljaycsICcuaW1ncHJldmlldycsIGZ1bmN0aW9uIChlKSB7CiAgICAgIGlmIChlLmN1cnJlbnRUYXJnZXQgPT09IGUudGFyZ2V0KSB7CiAgICAgICAgLy8gZG8gbm90IGZpcmUgb24gI2xldmVsCiAgICAgICAgJCgnLnVpLXRvb2x0aXAnKS5yZW1vdmUoKTsKICAgICAgICB2YXIgbmV3VG9wID0gJCgnLmZ1bGxpbWcnKS5wb3NpdGlvbigpLnRvcCArICQoJyNzaWRlYmFyJykuc2Nyb2xsVG9wKCk7CiAgICAgICAgJCgnI3NpZGViYXInKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBuZXdUb3AgfSwgMjAwKTsKICAgICAgfQogICAgfSk7Cn07CgoKfSkoKTsKCgovLyAqKiogbW9kdWxlOiBzdGF0dXNfYmFyLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygnc3RhdHVzX2JhcicpOwovKioKICogQGZpbGUgVGhpcyBmaWxlIGhhbmRsZXMgdGhlIHJlbmRlcmluZyBhbmQgdXBkYXRpbmcgb2YgdGhlIHN0YXR1cyBiYXIgaW4gSUlUQy4KICogQG1vZHVsZSBzdGF0dXNfYmFyCiAqLwoKd2luZG93LnJlbmRlclVwZGF0ZVN0YXR1c1RpbWVyXyA9IHVuZGVmaW5lZDsKCi8qKgogKiBSZW5kZXJzIHRoZSBzdGF0dXMgYmFyLiBUaGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIHN0YXR1cyBiYXIgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudAogKiB6b29tIGxldmVsIChwb3J0YWwgbGV2ZWxzIGFuZCBsaW5rIGxlbmd0aHMpLCBtYXAgZGF0YSBsb2FkaW5nIHByb2dyZXNzLCBhbmQgYW55IHBlbmRpbmcgcmVxdWVzdHMgb3IgZmFpbGVkIHJlcXVlc3RzLgogKiBJdCBzY2hlZHVsZXMgdGhlIHVwZGF0ZSB0byB0aGUgbmV4dCBldmVudCBsb29wIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UgYW5kIGVuc3VyZSBzbW9vdGhlciByZW5kZXJpbmcuCiAqCiAqIEBmdW5jdGlvbiByZW5kZXJVcGRhdGVTdGF0dXMKICovCndpbmRvdy5yZW5kZXJVcGRhdGVTdGF0dXMgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHByb2dyZXNzID0gMTsKCiAgdmFyIHRpbGVQYXJhbXMgPSB3aW5kb3cuZ2V0RGF0YVpvb21UaWxlUGFyYW1ldGVycygpOwoKICB2YXIgdCA9ICc8c3BhbiBjbGFzcz0iaGVscCBwb3J0YWxsZXZlbCIgdGl0bGU9IkluZGljYXRlcyBwb3J0YWwgbGV2ZWxzL2xpbmsgbGVuZ3RocyBkaXNwbGF5ZWQuICBab29tIGluIHRvIGRpc3BsYXkgbW9yZS4iPic7CgogIGlmICh0aWxlUGFyYW1zLmhhc1BvcnRhbHMpIHsKICAgIC8vIHpvb20gbGV2ZWwgaW5jbHVkZXMgcG9ydGFscyAoYW5kIGFsc28gYWxsIGxpbmtzL2ZpZWxkcykKICAgIHQgKz0gJzxzcGFuIGlkPSJsb2FkbGV2ZWwiPnBvcnRhbHM8L3NwYW4+JzsKICB9IGVsc2UgewogICAgaWYgKCF3aW5kb3cuaXNTbWFydHBob25lKCkpCiAgICAgIC8vIHNwYWNlIGlzIHZhbHVhYmxlCiAgICAgIHQgKz0gJzxiPmxpbmtzPC9iPjogJzsKCiAgICBpZiAodGlsZVBhcmFtcy5taW5MaW5rTGVuZ3RoID4gMCkKICAgICAgdCArPQogICAgICAgICc8c3BhbiBpZD0ibG9hZGxldmVsIj4mZ3Q7JyArICh0aWxlUGFyYW1zLm1pbkxpbmtMZW5ndGggPiAxMDAwID8gdGlsZVBhcmFtcy5taW5MaW5rTGVuZ3RoIC8gMTAwMCArICdrbScgOiB0aWxlUGFyYW1zLm1pbkxpbmtMZW5ndGggKyAnbScpICsgJzwvc3Bhbj4nOwogICAgZWxzZSB0ICs9ICc8c3BhbiBpZD0ibG9hZGxldmVsIj5hbGwgbGlua3M8L3NwYW4+JzsKICB9CgogIHQgKz0gJzwvc3Bhbj4nOwoKICAvLyBtYXAgc3RhdHVzIGRpc3BsYXkKICB0ICs9ICcgPHNwYW4gY2xhc3M9Im1hcCI+PGI+bWFwPC9iPjogJzsKCiAgaWYgKHdpbmRvdy5tYXBEYXRhUmVxdWVzdCkgewogICAgdmFyIHN0YXR1cyA9IHdpbmRvdy5tYXBEYXRhUmVxdWVzdC5nZXRTdGF0dXMoKTsKCiAgICAvLyBzdGF0dXMuc2hvcnQgLSBzaG9ydCBkZXNjcmlwdGlvbiBvZiBzdGF0dXMKICAgIC8vIHN0YXR1cy5sb25nIC0gbG9uZ2VyIGRlc2NyaXB0aW9uLCBmb3IgdG9vbHRpcCAob3B0aW9uYWwpCiAgICAvLyBzdGF0dXMucHJvZ3Jlc3MgLSBmcmFjdGlvbmFsIHByb2dyZXNzIChmcm9tIDAgdG8gMTsgLTEgZm9yIGluZGV0ZXJtaW5hdGUpIG9mIGN1cnJlbnQgc3RhdGUgKG9wdGlvbmFsKQogICAgaWYgKHN0YXR1cy5sb25nKSB0ICs9ICc8c3BhbiBjbGFzcz0iaGVscCIgdGl0bGU9IicgKyBzdGF0dXMubG9uZyArICciPicgKyBzdGF0dXMuc2hvcnQgKyAnPC9zcGFuPic7CiAgICBlbHNlIHQgKz0gJzxzcGFuPicgKyBzdGF0dXMuc2hvcnQgKyAnPC9zcGFuPic7CgogICAgaWYgKHN0YXR1cy5wcm9ncmVzcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmIChzdGF0dXMucHJvZ3Jlc3MgIT09IC0xKSB0ICs9ICcgJyArIE1hdGguZmxvb3Ioc3RhdHVzLnByb2dyZXNzICogMTAwKSArICclJzsKICAgICAgcHJvZ3Jlc3MgPSBzdGF0dXMucHJvZ3Jlc3M7CiAgICB9CiAgfSBlbHNlIHsKICAgIC8vIG5vIG1hcERhdGFSZXF1ZXN0IG9iamVjdCAtIG5vIHN0YXR1cyBrbm93bgogICAgdCArPSAnLi4udW5rbm93bi4uLic7CiAgfQoKICB0ICs9ICc8L3NwYW4+JzsKCiAgLy8gcmVxdWVzdCBzdGF0dXMKICBpZiAod2luZG93LmFjdGl2ZVJlcXVlc3RzLmxlbmd0aCA+IDApIHQgKz0gJyAnICsgd2luZG93LmFjdGl2ZVJlcXVlc3RzLmxlbmd0aCArICcgcmVxdWVzdHMnOwogIGlmICh3aW5kb3cuZmFpbGVkUmVxdWVzdENvdW50ID4gMCkgdCArPSAnIDxzcGFuIHN0eWxlPSJjb2xvcjojZjY2Ij4nICsgd2luZG93LmZhaWxlZFJlcXVlc3RDb3VudCArICcgZmFpbGVkPC9zcGFuPic7CgogIC8vIGl0J3MgcG9zc2libGUgdGhhdCB1cGRhdGluZyB0aGUgc3RhdHVzIGJhciBleGNlc3NpdmVseSBjYXVzZXMgc29tZSBwZXJmb3JtYW5jZSBpc3N1ZXMuIHNvIHJhdGhlciB0aGFuIGRvaW5nIGl0CiAgLy8gaW1tZWRpYXRlbHksIGRlbGF5IGl0IHRvIHRoZSBuZXh0IGphdmFzY3JpcHQgZXZlbnQgbG9vcCwgY2FuY2VsbGluZyBhbnkgcGVuZGluZyB1cGRhdGUKICAvLyB3aWxsIGFsc28gY2F1c2UgYW55IGJyb3dzZXItcmVsYXRlZCByZW5kZXJpbmcgdG8gb2NjdXIgZmlyc3QsIGJlZm9yZSB0aGUgc3RhdHVzIGFjdHVhbGx5IHVwZGF0ZXMKCiAgaWYgKHdpbmRvdy5yZW5kZXJVcGRhdGVTdGF0dXNUaW1lcl8pIGNsZWFyVGltZW91dCh3aW5kb3cucmVuZGVyVXBkYXRlU3RhdHVzVGltZXJfKTsKCiAgd2luZG93LnJlbmRlclVwZGF0ZVN0YXR1c1RpbWVyXyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgd2luZG93LnJlbmRlclVwZGF0ZVN0YXR1c1RpbWVyXyA9IHVuZGVmaW5lZDsKCiAgICAkKCcjaW5uZXJzdGF0dXMnKS5odG1sKHQpOwogICAgLy8gJCgnI3VwZGF0ZXN0YXR1cycpLmNsaWNrKGZ1bmN0aW9uKCkgeyBzdGFydFJlZnJlc2hUaW1lb3V0KDEwKTsgfSk7CiAgICAvLyAuIDxhIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXIiIG9uY2xpY2s9InN0YXJ0UmVmcmVzaFRpbWVvdXQoMTApIiB0aXRsZT0iUmVmcmVzaCI+4p+zPC9hPic7CgogICAgaWYgKHByb2dyZXNzID09PSAxICYmIHdpbmRvdy5hY3RpdmVSZXF1ZXN0cy5sZW5ndGggPiAwKSB7CiAgICAgIC8vIHdlIGRvbid0IGtub3cgdGhlIGV4YWN0IHByb2dyZXNzLCBidXQgd2UgaGF2ZSByZXF1ZXN0cyAoZS5nLiBjaGF0KSBydW5uaW5nLCBzbyBzaG93IGl0IGFzIGluZGV0ZXJtaW5hdGUuCiAgICAgIHByb2dyZXNzID0gLTE7CiAgICB9CgogICAgaWYgKHdpbmRvdy5pc0FwcCAmJiB3aW5kb3cuYXBwLnNldFByb2dyZXNzKSB7CiAgICAgIHdpbmRvdy5hcHAuc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MpOwogICAgfQogIH0sIDApOwp9OwoKCn0pKCk7CgoKLy8gKioqIG1vZHVsZTogdG9vbGJveC5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3Rvb2xib3gnKTsKLyogZ2xvYmFsIElJVEMgKi8KCi8qKgogKiBUb29sYm94IEFQSQogKgogKiBAbWVtYmVyb2YgSUlUQwogKiBAbmFtZXNwYWNlIHRvb2xib3gKICovCgovKioKICogQHR5cGVkZWYge09iamVjdH0gQnV0dG9uQXJncwogKiBAcHJvcGVydHkge3N0cmluZ30gW2lkXSAtIE9wdGlvbmFsLiBUaGUgSUQgb2YgdGhlIGJ1dHRvbi4KICogQHByb3BlcnR5IHtzdHJpbmd8dW5kZWZpbmVkfSBsYWJlbCAtIFRoZSBsYWJlbCB0ZXh0IG9mIHRoZSBidXR0b24uCiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb258dW5kZWZpbmVkfSBhY3Rpb24gLSBUaGUgb25jbGljayBhY3Rpb24gZm9yIHRoZSBidXR0b24uCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtjbGFzc10gLSBPcHRpb25hbC4gVGhlIGNsYXNzKGVzKSBmb3IgdGhlIGJ1dHRvbi4KICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3RpdGxlXSAtIE9wdGlvbmFsLiBUaGUgdGl0bGUgKHRvb2x0aXApIGZvciB0aGUgYnV0dG9uLgogKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbYWNjZXNzS2V5XSAtIE9wdGlvbmFsLiBUaGUgYWNjZXNzIGtleSBmb3IgdGhlIGJ1dHRvbi4KICogQHByb3BlcnR5IHtGdW5jdGlvbnxudWxsfSBbbW91c2VvdmVyXSAtIE9wdGlvbmFsLiBUaGUgbW91c2VvdmVyIGV2ZW50IGZvciB0aGUgYnV0dG9uLgogKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbaWNvbl0gLSBPcHRpb25hbC4gSWNvbiBuYW1lIGZyb20gRm9udEF3ZXNvbWUgZm9yIHRoZSBidXR0b24uCiAqLwoKSUlUQy50b29sYm94ID0gewogIGJ1dHRvbnM6IHt9LAogIF9kZWZhdWx0U29ydE1ldGhvZDogKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKSwKICBzb3J0TWV0aG9kOiAoLi4uYXJncykgPT4gSUlUQy50b29sYm94Ll9kZWZhdWx0U29ydE1ldGhvZCguLi5hcmdzKSwKCiAgLyoqCiAgICogQWRkcyBhIGJ1dHRvbiB0byB0aGUgdG9vbGJveC4KICAgKgogICAqIEBwYXJhbSB7QnV0dG9uQXJnc30gYnV0dG9uQXJncyAtIFRoZSBhcmd1bWVudHMgZm9yIHRoZSBidXR0b24uCiAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUaGUgSUQgb2YgdGhlIGFkZGVkIGJ1dHRvbiBvciBudWxsIGlmIHJlcXVpcmVkIHBhcmFtZXRlcnMgYXJlIG1pc3NpbmcuCiAgICoKICAgKiBAZXhhbXBsZQogICAqIGNvbnN0IGJ1dHRvbklkID0gSUlUQy50b29sYm94LmFkZEJ1dHRvbih7CiAgICogICBsYWJlbDogJ0Fib3V0SUlUQycsCiAgICogICBhY3Rpb246IHdpbmRvdy5BYm91dElJVEMKICAgKiB9KTsKICAgKgogICAqIEBleGFtcGxlCiAgICogY29uc3QgYnV0dG9uSWQgPSBJSVRDLnRvb2xib3guYWRkQnV0dG9uKHsKICAgKiAgIGxhYmVsOiAnVGVzdCBCdXR0b24nLAogICAqICAgYWN0aW9uOiAoKSA9PiBhbGVydCgnQ2xpY2tlZCEnKQogICAqIH0pOwogICAqLwogIGFkZEJ1dHRvbihidXR0b25BcmdzKSB7CiAgICBpZiAoIWJ1dHRvbkFyZ3MubGFiZWwpIHsKICAgICAgY29uc29sZS53YXJuKCdSZXF1aXJlZCBwYXJhbWV0ZXIgImxhYmVsIiBhcmUgbWlzc2luZy4nKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgaWYgKCFidXR0b25BcmdzLmFjdGlvbikgewogICAgICBjb25zb2xlLndhcm4oJ1JlcXVpcmVkIHBhcmFtZXRlciAiYWN0aW9uIiBhcmUgbWlzc2luZy4nKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgbGV0IGlkID0gYnV0dG9uQXJncy5pZCB8fCBgdG9vbGJveC1idG4tJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMSl9YDsKICAgIHRoaXMuYnV0dG9uc1tpZF0gPSBidXR0b25BcmdzOwoKICAgIHRoaXMuX3JlbmRlckJ1dHRvbihpZCk7CiAgICB0aGlzLl9hcHBseVNvcnQoKTsKCiAgICByZXR1cm4gaWQ7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlcyBhbiBleGlzdGluZyBidXR0b24gaW4gdGhlIHRvb2xib3guCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30gYnV0dG9uSWQgLSBUaGUgSUQgb2YgdGhlIGJ1dHRvbiB0byB1cGRhdGUuCiAgICogQHBhcmFtIHtCdXR0b25BcmdzfSBuZXdCdXR0b25BcmdzIC0gVGhlIG5ldyBhcmd1bWVudHMgZm9yIHRoZSBidXR0b24uCiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGJ1dHRvbiBpcyBzdWNjZXNzZnVsbHkgdXBkYXRlZCwgZmFsc2Ugb3RoZXJ3aXNlLgogICAqCiAgICogQGV4YW1wbGUKICAgKiBjb25zdCBpc1VwZGF0ZWQgPSBJSVRDLnRvb2xib3gudXBkYXRlQnV0dG9uKGJ1dHRvbklkLCB7IGxhYmVsOiAnVXBkYXRlZCBCdXR0b24nLCBhY3Rpb246ICgpID0+IGNvbnNvbGUubG9nKCdOZXcgQWN0aW9uJykgfSk7CiAgICovCiAgdXBkYXRlQnV0dG9uKGJ1dHRvbklkLCBuZXdCdXR0b25BcmdzKSB7CiAgICBpZiAodGhpcy5idXR0b25zW2J1dHRvbklkXSkgewogICAgICBPYmplY3QuYXNzaWduKHRoaXMuYnV0dG9uc1tidXR0b25JZF0sIG5ld0J1dHRvbkFyZ3MpOwogICAgICB0aGlzLl9yZW5kZXJCdXR0b24oYnV0dG9uSWQpOwogICAgICB0aGlzLl9hcHBseVNvcnQoKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLndhcm4oYEJ1dHRvbiB3aXRoIElEICR7YnV0dG9uSWR9IG5vdCBmb3VuZC5gKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlbW92ZXMgYSBidXR0b24gZnJvbSB0aGUgdG9vbGJveC4KICAgKgogICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25JZCAtIFRoZSBJRCBvZiB0aGUgYnV0dG9uIHRvIHJlbW92ZS4KICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYnV0dG9uIGlzIHN1Y2Nlc3NmdWxseSByZW1vdmVkLCBmYWxzZSBvdGhlcndpc2UuCiAgICoKICAgKiBAZXhhbXBsZQogICAqIGNvbnN0IGlzUmVtb3ZlZCA9IElJVEMudG9vbGJveC5yZW1vdmVCdXR0b24oYnV0dG9uSWQpOwogICAqLwogIHJlbW92ZUJ1dHRvbihidXR0b25JZCkgewogICAgaWYgKHRoaXMuYnV0dG9uc1tidXR0b25JZF0pIHsKICAgICAgZGVsZXRlIHRoaXMuYnV0dG9uc1tidXR0b25JZF07CiAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChidXR0b25JZCk7CiAgICAgIGlmIChidXR0b25FbGVtZW50KSB7CiAgICAgICAgYnV0dG9uRWxlbWVudC5yZW1vdmUoKTsKICAgICAgfQogICAgICB0aGlzLl9hcHBseVNvcnQoKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLndhcm4oYEJ1dHRvbiB3aXRoIElEICR7YnV0dG9uSWR9IG5vdCBmb3VuZCBmb3IgcmVtb3ZhbC5gKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0sCgogIC8qKgogICAqIEludGVybmFsIG1ldGhvZCB0byByZW5kZXIgYSBidXR0b24uCiAgICoKICAgKiBAcHJpdmF0ZQogICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25JZCAtIFRoZSBJRCBvZiB0aGUgYnV0dG9uIHRvIHJlbmRlci4KICAgKi8KICBfcmVuZGVyQnV0dG9uKGJ1dHRvbklkKSB7CiAgICBjb25zdCBidXR0b25EYXRhID0gdGhpcy5idXR0b25zW2J1dHRvbklkXTsKICAgIGlmICghYnV0dG9uRGF0YSkgcmV0dXJuOyAvLyBUaGUgYnV0dG9uIHdpdGggdGhlIGdpdmVuIElEIHdhcyBub3QgZm91bmQKCiAgICBsZXQgYnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ1dHRvbklkKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICBidXR0b25FbGVtZW50LmlkID0gYnV0dG9uSWQ7CiAgICBidXR0b25FbGVtZW50LnRleHRDb250ZW50ID0gYnV0dG9uRGF0YS5sYWJlbDsKICAgIGJ1dHRvbkVsZW1lbnQub25jbGljayA9IGJ1dHRvbkRhdGEuYWN0aW9uOwoKICAgIGlmICh0eXBlb2YgYnV0dG9uRGF0YS50aXRsZSA9PT0gJ3N0cmluZycpIGJ1dHRvbkVsZW1lbnQudGl0bGUgPSBidXR0b25EYXRhLnRpdGxlOwogICAgaWYgKHR5cGVvZiBidXR0b25EYXRhLmNsYXNzID09PSAnc3RyaW5nJykgYnV0dG9uRWxlbWVudC5jbGFzc05hbWUgPSBidXR0b25EYXRhLmNsYXNzOwogICAgaWYgKHR5cGVvZiBidXR0b25EYXRhLmFjY2Vzc19rZXkgPT09ICdzdHJpbmcnKSBidXR0b25FbGVtZW50LmFjY2Vzc0tleSA9IGJ1dHRvbkRhdGEuYWNjZXNzX2tleTsKICAgIGlmICh0eXBlb2YgYnV0dG9uRGF0YS5hY2Nlc3NrZXkgPT09ICdzdHJpbmcnKSBidXR0b25FbGVtZW50LmFjY2Vzc0tleSA9IGJ1dHRvbkRhdGEuYWNjZXNza2V5OwogICAgaWYgKHR5cGVvZiBidXR0b25EYXRhLmFjY2Vzc0tleSA9PT0gJ3N0cmluZycpIGJ1dHRvbkVsZW1lbnQuYWNjZXNzS2V5ID0gYnV0dG9uRGF0YS5hY2Nlc3NLZXk7CiAgICBpZiAodHlwZW9mIGJ1dHRvbkRhdGEubW91c2VvdmVyID09PSAnZnVuY3Rpb24nKSBidXR0b25FbGVtZW50Lm9ubW91c2VvdmVyID0gYnV0dG9uRGF0YS5tb3VzZW92ZXI7CgogICAgaWYgKHR5cGVvZiBidXR0b25EYXRhLmljb24gPT09ICdzdHJpbmcnKSB7CiAgICAgIGNvbnN0IGljb25IVE1MID0gYDxpIGNsYXNzPSJmYSAke2J1dHRvbkRhdGEuaWNvbn0iPjwvaT5gOwogICAgICBidXR0b25FbGVtZW50LmlubmVySFRNTCA9IGljb25IVE1MICsgYnV0dG9uRWxlbWVudC5pbm5lckhUTUw7CiAgICB9CgogICAgY29uc3QgdG9vbGJveF9jb21wb25lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9vbGJveF9jb21wb25lbnQnKTsKICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYnV0dG9uSWQpKSB7CiAgICAgIHRvb2xib3hfY29tcG9uZW50LmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpOwogICAgfQogIH0sCgogIC8qKgogICAqIEludGVybmFsIG1ldGhvZCB0byBhcHBseSBzb3J0aW5nIHRvIHRoZSBidXR0b25zLgogICAqCiAgICogQHByaXZhdGUKICAgKi8KICBfYXBwbHlTb3J0KCkgewogICAgY29uc3QgdG9vbGJveF9jb21wb25lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9vbGJveF9jb21wb25lbnQnKTsKICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnRzID0gQXJyYXkuZnJvbSh0b29sYm94X2NvbXBvbmVudC5jaGlsZHJlbik7CgogICAgdHJ5IHsKICAgICAgYnV0dG9uRWxlbWVudHMuc29ydCgoYSwgYikgPT4gdGhpcy5zb3J0TWV0aG9kKHRoaXMuYnV0dG9uc1thLmlkXSwgdGhpcy5idXR0b25zW2IuaWRdKSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ1NvcnRpbmcgZnVuY3Rpb24gcHJvZHVjZWQgZXJyb3InLCBlKTsKICAgICAgYnV0dG9uRWxlbWVudHMuc29ydCgoYSwgYikgPT4gdGhpcy5fZGVmYXVsdFNvcnRNZXRob2QodGhpcy5idXR0b25zW2EuaWRdLCB0aGlzLmJ1dHRvbnNbYi5pZF0pKTsKICAgIH0KICAgIGJ1dHRvbkVsZW1lbnRzLmZvckVhY2goKGJ1dHRvbkVsZW1lbnQpID0+IHRvb2xib3hfY29tcG9uZW50LmFwcGVuZENoaWxkKGJ1dHRvbkVsZW1lbnQpKTsKICB9LAoKICAvKioKICAgKiBTZXRzIHRoZSBzb3J0aW5nIG1ldGhvZCBmb3IgdGhlIHRvb2xib3ggYnV0dG9ucy4KICAgKgogICAqIEBwYXJhbSB7RnVuY3Rpb259IHNvcnRNZXRob2QgLSBUaGUgc29ydGluZyBtZXRob2QgdG8gYmUgdXNlZC4KICAgKiBAcmV0dXJucyB7dm9pZH0KICAgKgogICAqIEBleGFtcGxlCiAgICogSUlUQy50b29sYm94LnNldFNvcnRNZXRob2QoKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKSk7CiAgICovCiAgc2V0U29ydE1ldGhvZChzb3J0TWV0aG9kKSB7CiAgICB0aGlzLnNvcnRNZXRob2QgPSBzb3J0TWV0aG9kOwogICAgdGhpcy5fYXBwbHlTb3J0KCk7CiAgfSwKCiAgLyoqCiAgICogSW50ZXJuYWwgbWV0aG9kIHRvIHN5bmNocm9uaXplIHRoZSB0b29sYm94IHdpdGggdGhlIGxlZ2FjeSB0b29sYm94LgogICAqCiAgICogQHByaXZhdGUKICAgKiBAcmV0dXJucyB7dm9pZH0KICAgKi8KICBfc3luY1dpdGhMZWdhY3lUb29sYm94KCkgewogICAgLy8gU2VsZWN0IHRoZSBvbGQgdG9vbGJveCBlbGVtZW50CiAgICBjb25zdCBvbGRUb29sYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Rvb2xib3gnKTsKCiAgICAvLyBGdW5jdGlvbiB0byBwcm9jZXNzIGFuIGluZGl2aWR1YWwgYnV0dG9uCiAgICBjb25zdCBwcm9jZXNzQnV0dG9uID0gKG5vZGUpID0+IHsKICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5vZGUgaXMgYW4gJ0EnIHRhZyAoYW5jaG9yL2xpbmssIHdoaWNoIHJlcHJlc2VudHMgYSBidXR0b24pCiAgICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdBJykgewogICAgICAgIGxldCBpY29uQ2xhc3MgPSBudWxsOwogICAgICAgIC8vIEZpbmQgYW4gaWNvbiBlbGVtZW50IHdpdGhpbiB0aGUgYnV0dG9uLCBpZiBpdCBleGlzdHMKICAgICAgICBjb25zdCBpY29uRWxlbWVudCA9IG5vZGUucXVlcnlTZWxlY3RvcignaS5mYScpOwogICAgICAgIGlmIChpY29uRWxlbWVudCkgewogICAgICAgICAgLy8gRXh0cmFjdCB0aGUgaWNvbiBjbGFzcwogICAgICAgICAgY29uc3QgaWNvbkNsYXNzZXMgPSBBcnJheS5mcm9tKGljb25FbGVtZW50LmNsYXNzTGlzdCkuZmlsdGVyKChjbHMpID0+IGNscy5zdGFydHNXaXRoKCdmYS0nKSk7CiAgICAgICAgICBpZiAoaWNvbkNsYXNzZXMubGVuZ3RoID4gMCkgaWNvbkNsYXNzID0gaWNvbkNsYXNzZXNbMF07CiAgICAgICAgfQoKICAgICAgICAvLyBQcmVwYXJlIHRoZSBidXR0b24gYXJndW1lbnRzIGZvciBlaXRoZXIgdXBkYXRpbmcgb3IgYWRkaW5nIHRoZSBidXR0b24KICAgICAgICBjb25zdCBidXR0b25BcmdzID0gewogICAgICAgICAgaWQ6IG5vZGUuaWQsCiAgICAgICAgICBsYWJlbDogbm9kZS50ZXh0Q29udGVudC50cmltKCksCiAgICAgICAgICBhY3Rpb246ICgpID0+IG5vZGUuY2xpY2soKSwKICAgICAgICAgIGNsYXNzOiBub2RlLmNsYXNzTmFtZSwKICAgICAgICAgIHRpdGxlOiBub2RlLnRpdGxlLAogICAgICAgICAgYWNjZXNzS2V5OiBub2RlLmFjY2Vzc0tleSwKICAgICAgICAgIG1vdXNlb3Zlcjogbm9kZS5tb3VzZW92ZXIsCiAgICAgICAgICBpY29uOiBpY29uQ2xhc3MsCiAgICAgICAgfTsKCiAgICAgICAgLy8gVXBkYXRlIGFuIGV4aXN0aW5nIGJ1dHRvbiBvciBhZGQgYSBuZXcgb25lCiAgICAgICAgYnV0dG9uQXJnc1snaWQnXSA9IGBsZWdhY3ktdG9vbGJveC1idG4tJHtidXR0b25BcmdzLmlkIHx8IGJ1dHRvbkFyZ3MubGFiZWx9YDsKICAgICAgICBpZiAodGhpcy5idXR0b25zW2J1dHRvbkFyZ3MuaWRdKSB7CiAgICAgICAgICB0aGlzLnVwZGF0ZUJ1dHRvbihidXR0b25BcmdzLmlkLCBidXR0b25BcmdzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5hZGRCdXR0b24oYnV0dG9uQXJncyk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIC8vIEluaXRpYWxpemUgZm9yIGV4aXN0aW5nIGJ1dHRvbnMgaW4gdGhlIHRvb2xib3gKICAgIG9sZFRvb2xib3gucXVlcnlTZWxlY3RvckFsbCgnYScpLmZvckVhY2gocHJvY2Vzc0J1dHRvbik7CgogICAgLy8gTXV0YXRpb24gb2JzZXJ2ZXIgdG8gd2F0Y2ggZm9yIGNoYW5nZXMgaW4gdGhlIHRvb2xib3gKICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4gewogICAgICAvLyBJdGVyYXRlIHRocm91Z2ggbXV0YXRpb25zCiAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4gewogICAgICAgIC8vIFByb2Nlc3MgZWFjaCBhZGRlZCBub2RlIGFuZCBhdHRyaWJ1dGUgY2hhbmdlcwogICAgICAgIG11dGF0aW9uLmFkZGVkTm9kZXMuZm9yRWFjaChwcm9jZXNzQnV0dG9uKTsKICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7CiAgICAgICAgICBwcm9jZXNzQnV0dG9uKG11dGF0aW9uLnRhcmdldCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwoKICAgIC8vIFN0YXJ0IG9ic2VydmluZyB0aGUgdG9vbGJveCBmb3IgY2hhbmdlcwogICAgb2JzZXJ2ZXIub2JzZXJ2ZShvbGRUb29sYm94LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZSB9KTsKICB9LAp9OwoKSUlUQy50b29sYm94Ll9zeW5jV2l0aExlZ2FjeVRvb2xib3goKTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHV0aWxzLmpzICoqKgooZnVuY3Rpb24gKCkgewp2YXIgbG9nID0gdWxvZygndXRpbHMnKTsKLyogZ2xvYmFsIElJVEMsIEwgLS0gZXNsaW50ICovCgovKioKICogTmFtZXNwYWNlIGZvciBJSVRDIHV0aWxzCiAqCiAqIEBtZW1iZXJvZiBJSVRDCiAqIEBuYW1lc3BhY2UgdXRpbHMKICovCgovLyBUaGUgc3YtU0UgbG9jYWxlIGlzIG9uZSBvZiB0aGUgY2xvc2VzdCB0byB0aGUgSVNPIGZvcm1hdCBhbW9uZyBhbGwgbG9jYWxlcwpjb25zdCB0aW1lV2l0aFNlY29uZHNGb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnc3YtU0UnLCB7CiAgaG91cjogJzItZGlnaXQnLAogIG1pbnV0ZTogJzItZGlnaXQnLAogIHNlY29uZDogJzItZGlnaXQnLAp9KTsKCmNvbnN0IHRpbWVGb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnc3YtU0UnLCB7CiAgaG91cjogJzItZGlnaXQnLAogIG1pbnV0ZTogJzItZGlnaXQnLAp9KTsKCmNvbnN0IGRhdGVGb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnc3YtU0UnLCB7CiAgeWVhcjogJ251bWVyaWMnLAogIG1vbnRoOiAnMi1kaWdpdCcsCiAgZGF5OiAnMi1kaWdpdCcsCn0pOwoKLyoqCiAqIFJldHJpZXZlcyBhIHBhcmFtZXRlciBmcm9tIHRoZSBVUkwgcXVlcnkgc3RyaW5nLgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAZnVuY3Rpb24gZ2V0VVJMUGFyYW0KICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtIC0gVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlciB0byByZXRyaWV2ZS4KICogQHJldHVybnMge3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIsIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBub3QgZm91bmQuCiAqLwpjb25zdCBnZXRVUkxQYXJhbSA9IChwYXJhbSkgPT4gewogIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7CiAgcmV0dXJuIHVybFBhcmFtcy5nZXQocGFyYW0pIHx8ICcnOwp9OwoKLyoqCiAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYSBjb29raWUgYnkgbmFtZS4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGdldENvb2tpZQogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb29raWUgdG8gcmV0cmlldmUuCiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBUaGUgdmFsdWUgb2YgdGhlIGNvb2tpZSwgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZC4KICovCmNvbnN0IGdldENvb2tpZSA9IChuYW1lKSA9PiB7CiAgY29uc3QgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKS5yZWR1Y2UoKGFjYywgY29va2llKSA9PiB7CiAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBjb29raWUuc3BsaXQoJz0nKTsKICAgIGFjY1trZXldID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICAgIHJldHVybiBhY2M7CiAgfSwge30pOwoKICByZXR1cm4gY29va2llc1tuYW1lXTsKfTsKCi8qKgogKiBTZXRzIGEgY29va2llIHdpdGggYSBzcGVjaWZpZWQgbmFtZSBhbmQgdmFsdWUsIHdpdGggYSBkZWZhdWx0IGV4cGlyYXRpb24gb2YgMTAgeWVhcnMuCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnV0aWxzCiAqIEBmdW5jdGlvbiBzZXRDb29raWUKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgY29va2llLgogKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhlIGNvb2tpZS4KICogQHBhcmFtIHtudW1iZXJ9IFtkYXlzPTM2NTBdIC0gT3B0aW9uYWw6IHRoZSBudW1iZXIgb2YgZGF5cyB1bnRpbCB0aGUgY29va2llIGV4cGlyZXMgKGRlZmF1bHQgaXMgMTAgeWVhcnMpLgogKi8KY29uc3Qgc2V0Q29va2llID0gKG5hbWUsIHZhbHVlLCBkYXlzID0gMzY1MCkgPT4gewogIGNvbnN0IGV4cGlyZXMgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvVVRDU3RyaW5nKCk7CiAgZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfTsgZXhwaXJlcz0ke2V4cGlyZXN9OyBwYXRoPS9gOwp9OwoKLyoqCiAqIERlbGV0ZXMgYSBjb29raWUgYnkgbmFtZS4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGRlbGV0ZUNvb2tpZQogKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjb29raWUgdG8gZGVsZXRlLgogKi8KY29uc3QgZGVsZXRlQ29va2llID0gKG5hbWUpID0+IHsKICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT07IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQ7IHBhdGg9L2A7Cn07CgovKioKICogRm9ybWF0cyBhIG51bWJlciB3aXRoIHRob3VzYW5kIHNlcGFyYXRvcnMgKHRoaW4gc3BhY2VzKS4KICogc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwYWNlXyhwdW5jdHVhdGlvbikjVGFibGVfb2Zfc3BhY2VzCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnV0aWxzCiAqIEBmdW5jdGlvbiBmb3JtYXROdW1iZXIKICogQHBhcmFtIHtudW1iZXJ9IG51bSAtIFRoZSBudW1iZXIgdG8gZm9ybWF0LgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIG51bWJlciB3aXRoIHRob3VzYW5kIHNlcGFyYXRvcnMuCiAqLwpjb25zdCBmb3JtYXROdW1iZXIgPSAobnVtKSA9PiB7CiAgaWYgKG51bSA9PT0gbnVsbCB8fCBudW0gPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnOwogIC8vIENvbnZlcnQgbnVtYmVyIHRvIHN0cmluZyBhbmQgdXNlIGEgdGhpbiBzcGFjZSAoVSsyMDA5KSBhcyB0aG91c2FuZCBzZXBhcmF0b3IKICByZXR1cm4gU3RyaW5nKG51bSkucmVwbGFjZSgvXEIoPz0oXGR7M30pKyg/IVxkKSkvZywgJ1x1MjAwOScpOwp9OwoKLyoqCiAqIFBhZHMgYSBudW1iZXIgd2l0aCB6ZXJvcyB1cCB0byBhIHNwZWNpZmllZCBsZW5ndGguCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnV0aWxzCiAqIEBmdW5jdGlvbiB6ZXJvUGFkCiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgLSBUaGUgbnVtYmVyIHRvIHBhZC4KICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBkZXNpcmVkIGxlbmd0aCBvZiB0aGUgb3V0cHV0IHN0cmluZy4KICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhZGRlZCBudW1iZXIgYXMgYSBzdHJpbmcuCiAqLwpjb25zdCB6ZXJvUGFkID0gKG51bWJlciwgbGVuZ3RoKSA9PiBudW1iZXIudG9TdHJpbmcoKS5wYWRTdGFydChsZW5ndGgsICcwJyk7CgovKioKICogQ29udmVydHMgYSBVTklYIHRpbWVzdGFtcCB0byBhIGh1bWFuLXJlYWRhYmxlIHN0cmluZy4KICogSWYgdGhlIHRpbWVzdGFtcCBpcyBmcm9tIHRvZGF5LCByZXR1cm5zIHRoZSB0aW1lIChISDptbTpzcyBmb3JtYXQpOyBvdGhlcndpc2UsIHJldHVybnMgdGhlIGRhdGUgKFlZWVktTU0tREQpLgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAZnVuY3Rpb24gdW5peFRpbWVUb1N0cmluZwogKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHRpbWVzdGFtcCAtIFRoZSBVTklYIHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMgdG8gY29udmVydC4KICogQHBhcmFtIHtib29sZWFufSBbZnVsbD1mYWxzZV0gLSBJZiB0cnVlLCByZXR1cm5zIGJvdGggZGF0ZSBhbmQgdGltZSBpbiAiWVlZWS1NTS1ERCA8bG9jYWxlIHRpbWU+IiBmb3JtYXQuCiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gVGhlIGZvcm1hdHRlZCBkYXRlIGFuZC9vciB0aW1lIHN0cmluZywgb3IgbnVsbCBpZiBubyB0aW1lc3RhbXAgcHJvdmlkZWQuCiAqLwpjb25zdCB1bml4VGltZVRvU3RyaW5nID0gKHRpbWVzdGFtcCwgZnVsbCA9IGZhbHNlKSA9PiB7CiAgaWYgKCF0aW1lc3RhbXApIHJldHVybiBudWxsOwoKICBjb25zdCBkYXRlT2JqID0gbmV3IERhdGUoTnVtYmVyKHRpbWVzdGFtcCkpOwogIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTsKCiAgLy8gQ2hlY2sgaWYgdGhlIGRhdGUgaXMgdG9kYXkKICBjb25zdCBpc1RvZGF5ID0gZGF0ZU9iai5nZXRGdWxsWWVhcigpID09PSB0b2RheS5nZXRGdWxsWWVhcigpICYmIGRhdGVPYmouZ2V0TW9udGgoKSA9PT0gdG9kYXkuZ2V0TW9udGgoKSAmJiBkYXRlT2JqLmdldERhdGUoKSA9PT0gdG9kYXkuZ2V0RGF0ZSgpOwoKICBjb25zdCB0aW1lID0gdGltZVdpdGhTZWNvbmRzRm9ybWF0dGVyLmZvcm1hdChkYXRlT2JqKTsKICBjb25zdCBkYXRlID0gZGF0ZUZvcm1hdHRlci5mb3JtYXQoZGF0ZU9iaik7CgogIGlmIChmdWxsKSByZXR1cm4gYCR7ZGF0ZX0gJHt0aW1lfWA7CiAgcmV0dXJuIGlzVG9kYXkgPyB0aW1lIDogZGF0ZTsKfTsKCi8qKgogKiBDb252ZXJ0cyBhIFVOSVggdGltZXN0YW1wIHRvIGEgcHJlY2lzZSBkYXRlIGFuZCB0aW1lIHN0cmluZyBpbiB0aGUgbG9jYWwgdGltZXpvbmUuCiAqIEZvcm1hdHRlZCBpbiBJU08tc3R5bGUgWVlZWS1NTS1ERCBoaDptbTpzcy5tbW0gLSBidXQgdXNpbmcgbG9jYWwgdGltZXpvbmUuCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnV0aWxzCiAqIEBmdW5jdGlvbiB1bml4VGltZVRvRGF0ZVRpbWVTdHJpbmcKICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBUaGUgVU5JWCB0aW1lc3RhbXAgdG8gY29udmVydC4KICogQHBhcmFtIHtib29sZWFufSBbbWlsbGlzZWNvbmRdIC0gV2hldGhlciB0byBpbmNsdWRlIG1pbGxpc2Vjb25kIHByZWNpc2lvbi4KICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUaGUgZm9ybWF0dGVkIGRhdGUgYW5kIHRpbWUgc3RyaW5nLgogKi8KY29uc3QgdW5peFRpbWVUb0RhdGVUaW1lU3RyaW5nID0gKHRpbWUsIG1pbGxpc2Vjb25kKSA9PiB7CiAgaWYgKCF0aW1lKSByZXR1cm4gbnVsbDsKICBjb25zdCBkYXRlID0gbmV3IERhdGUoTnVtYmVyKHRpbWUpKTsKICBjb25zdCBwYWQgPSAobnVtKSA9PiBJSVRDLnV0aWxzLnplcm9QYWQobnVtLCAyKTsKCiAgY29uc3QgZGF0ZVN0cmluZyA9IGAke2RhdGUuZ2V0RnVsbFllYXIoKX0tJHtwYWQoZGF0ZS5nZXRNb250aCgpICsgMSl9LSR7cGFkKGRhdGUuZ2V0RGF0ZSgpKX1gOwogIGNvbnN0IHRpbWVTdHJpbmcgPSBgJHtwYWQoZGF0ZS5nZXRIb3VycygpKX06JHtwYWQoZGF0ZS5nZXRNaW51dGVzKCkpfToke3BhZChkYXRlLmdldFNlY29uZHMoKSl9YDsKICBjb25zdCBkYXRlVGltZVN0cmluZyA9IGAke2RhdGVTdHJpbmd9ICR7dGltZVN0cmluZ31gOwogIHJldHVybiBtaWxsaXNlY29uZCA/IGAke2RhdGVUaW1lU3RyaW5nfS4ke0lJVEMudXRpbHMuemVyb1BhZChkYXRlLmdldE1pbGxpc2Vjb25kcygpLCAzKX1gIDogZGF0ZVRpbWVTdHJpbmc7Cn07CgovKioKICogQ29udmVydHMgYSBVTklYIHRpbWVzdGFtcCB0byBhIHRpbWUgc3RyaW5nIGZvcm1hdHRlZCBhcyBISDptbS4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIHVuaXhUaW1lVG9ISG1tCiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdGltZSAtIFRoZSBVTklYIHRpbWVzdGFtcCB0byBjb252ZXJ0LgogKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IEZvcm1hdHRlZCB0aW1lIGFzIEhIOm1tLgogKi8KY29uc3QgdW5peFRpbWVUb0hIbW0gPSAodGltZSkgPT4gewogIGlmICghdGltZSkgcmV0dXJuIG51bGw7CiAgcmV0dXJuIHRpbWVGb3JtYXR0ZXIuZm9ybWF0KG5ldyBEYXRlKE51bWJlcih0aW1lKSkpOwp9OwoKLyoqCiAqIEZvcm1hdHMgYW4gaW50ZXJ2YWwgb2YgdGltZSBnaXZlbiBpbiBzZWNvbmRzIGludG8gYSBodW1hbi1yZWFkYWJsZSBzdHJpbmcuCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnV0aWxzCiAqIEBmdW5jdGlvbiBmb3JtYXRJbnRlcnZhbAogKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kcyAtIFRoZSBpbnRlcnZhbCBpbiBzZWNvbmRzLgogKiBAcGFyYW0ge251bWJlcn0gW21heFRlcm1zXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0aW1lIHVuaXRzIHRvIGluY2x1ZGUuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdGltZSBpbnRlcnZhbC4KICovCmNvbnN0IGZvcm1hdEludGVydmFsID0gKHNlY29uZHMsIG1heFRlcm1zKSA9PiB7CiAgY29uc3QgZGF5cyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDg2NDAwKTsKICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IoKHNlY29uZHMgJSA4NjQwMCkgLyAzNjAwKTsKICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigoc2Vjb25kcyAlIDM2MDApIC8gNjApOwogIGNvbnN0IHNlY3MgPSBzZWNvbmRzICUgNjA7CgogIC8vIENvbGxlY3QgdGVybXMgaWYgdGhleSBoYXZlIGEgbm9uLXplcm8gdmFsdWUKICBjb25zdCB0ZXJtcyA9IFtkYXlzID8gYCR7ZGF5c31kYCA6IG51bGwsIGhvdXJzID8gYCR7aG91cnN9aGAgOiBudWxsLCBtaW51dGVzID8gYCR7bWludXRlc31tYCA6IG51bGwsIHNlY3MgPyBgJHtzZWNzfXNgIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pOwoKICAvLyBMaW1pdCB0ZXJtcyB0byBtYXhUZXJtcyBpZiBzcGVjaWZpZWQKICByZXR1cm4gKG1heFRlcm1zID8gdGVybXMuc2xpY2UoMCwgbWF4VGVybXMpIDogdGVybXMpLmpvaW4oJyAnKSB8fCAnMHMnOwp9OwoKLyoqCiAqIEZvcm1hdHMgYSBkaXN0YW5jZSBpbiBtZXRlcnMsIGNvbnZlcnRpbmcgdG8ga2lsb21ldGVycyB3aXRoIGFwcHJvcHJpYXRlIHByZWNpc2lvbgogKiBiYXNlZCBvbiB0aGUgZGlzdGFuY2UgcmFuZ2UuCiAqCiAqIEZvciBkaXN0YW5jZXM6CiAqIC0gVW5kZXIgMTAwMG06IHNob3dzIGluIG1ldGVycywgcm91bmRlZCB0byB3aG9sZSBudW1iZXJzCiAqIC0gMTAwMG0gdG8gOTk5OW06IHNob3dzIGluIGtpbG9tZXRlcnMgd2l0aCAxIGRlY2ltYWwgcGxhY2UKICogLSAxMDAwMG0gYW5kIGFib3ZlOiBzaG93cyBpbiB3aG9sZSBraWxvbWV0ZXJzCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnV0aWxzCiAqIEBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZQogKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgLSBUaGUgZGlzdGFuY2UgaW4gbWV0ZXJzLgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIGRpc3RhbmNlLgogKi8KY29uc3QgZm9ybWF0RGlzdGFuY2UgPSAoZGlzdGFuY2UpID0+IHsKICBpZiAoZGlzdGFuY2UgPT09IG51bGwgfHwgZGlzdGFuY2UgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnOwogIGxldCB2YWx1ZSwgdW5pdDsKCiAgaWYgKGRpc3RhbmNlID49IDEwMDAwKSB7CiAgICAvLyBGb3IgMTBrbSBhbmQgYWJvdmU6IHNob3cgd2hvbGUga2lsb21ldGVycwogICAgdmFsdWUgPSBNYXRoLnJvdW5kKGRpc3RhbmNlIC8gMTAwMCk7CiAgICB1bml0ID0gJ2ttJzsKICB9IGVsc2UgaWYgKGRpc3RhbmNlID49IDEwMDApIHsKICAgIC8vIEZvciAxa20gdG8gOS45a206IHNob3cga2lsb21ldGVycyB3aXRoIG9uZSBkZWNpbWFsCiAgICB2YWx1ZSA9IE1hdGgucm91bmQoZGlzdGFuY2UgLyAxMDApIC8gMTA7CiAgICB1bml0ID0gJ2ttJzsKICB9IGVsc2UgewogICAgLy8gRm9yIHVuZGVyIDFrbTogc2hvdyBpbiBtZXRlcnMKICAgIHZhbHVlID0gTWF0aC5yb3VuZChkaXN0YW5jZSk7CiAgICB1bml0ID0gJ20nOwogIH0KCiAgcmV0dXJuIGAke0lJVEMudXRpbHMuZm9ybWF0TnVtYmVyKHZhbHVlKX0ke3VuaXR9YDsKfTsKCi8qKgogKiBGb3JtYXRzIHRoZSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gdGltZXN0YW1wcyAoaW4gbWlsbGlzZWNvbmRzKSBhcyBhIHN0cmluZy4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGZvcm1hdEFnbwogKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIFRoZSBwYXN0IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMuCiAqIEBwYXJhbSB7bnVtYmVyfSBub3cgLSBUaGUgY3VycmVudCB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzLgogKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9ucyBmb3IgZm9ybWF0dGluZy4KICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zaG93U2Vjb25kcz1mYWxzZV0gLSBXaGV0aGVyIHRvIGluY2x1ZGUgc2Vjb25kcyBpbiB0aGUgcmVzdWx0LgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHRpbWUgZGlmZmVyZW5jZSAoZS5nLiwgIjQ1cyIsICI1bSIsICIyaCA0NW0iLCAiMWQgM2ggNDVtIikKICovCmNvbnN0IGZvcm1hdEFnbyA9ICh0aW1lLCBub3csIG9wdGlvbnMgPSB7IHNob3dTZWNvbmRzOiBmYWxzZSB9KSA9PiB7CiAgY29uc3Qgc2Vjb25kc1RvdGFsID0gTWF0aC5mbG9vcihNYXRoLm1heCgwLCAobm93IC0gdGltZSkgLyAxMDAwKSk7CgogIC8vIENhbGN1bGF0ZSB0aW1lIHVuaXRzCiAgY29uc3QgZGF5cyA9IE1hdGguZmxvb3Ioc2Vjb25kc1RvdGFsIC8gODY0MDApOwogIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcigoc2Vjb25kc1RvdGFsICUgODY0MDApIC8gMzYwMCk7CiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHNlY29uZHNUb3RhbCAlIDM2MDApIC8gNjApOwogIGNvbnN0IHNlY29uZHMgPSBzZWNvbmRzVG90YWwgJSA2MDsKCiAgY29uc3QgcmVzdWx0ID0gW107CgogIC8vIEluY2x1ZGUgdW5pdHMgY29uZGl0aW9uYWxseSBiYXNlZCBvbiBub24temVybyB2YWx1ZXMKICBpZiAoZGF5cyA+IDApIHJlc3VsdC5wdXNoKGAke2RheXN9ZGApOwogIGlmIChob3VycyA+IDAgfHwgcmVzdWx0Lmxlbmd0aCAhPT0gMCkgcmVzdWx0LnB1c2goYCR7aG91cnN9aGApOwogIGlmIChtaW51dGVzID4gMCB8fCByZXN1bHQubGVuZ3RoICE9PSAwKSByZXN1bHQucHVzaChgJHttaW51dGVzfW1gKTsKICBpZiAob3B0aW9ucy5zaG93U2Vjb25kcyAmJiAocmVzdWx0Lmxlbmd0aCA9PT0gMCB8fCBzZWNvbmRzID4gMCkpIHJlc3VsdC5wdXNoKGAke3NlY29uZHN9c2ApOwoKICAvLyBJZiBubyB1bml0cyB3ZXJlIGFkZGVkLCBzaG93ICIwIiB3aXRoIHRoZSBzbWFsbGVzdCBhdmFpbGFibGUgdW5pdAogIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gb3B0aW9ucy5zaG93U2Vjb25kcyA/ICcwcycgOiAnMG0nOwogIH0KCiAgcmV0dXJuIHJlc3VsdC5qb2luKCcgJyk7Cn07CgovKioKICogQ2hlY2tzIGlmIHRoZSBkZXZpY2UgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZS4KICogQWxpYXMgZm9yIGBMLkJyb3dzZXIudG91Y2goKWAKICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGlzVG91Y2hEZXZpY2UKICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGRldmljZSBpcyB0b3VjaC1lbmFibGVkLCBvdGhlcndpc2UgZmFsc2UuCiAqLwpjb25zdCBpc1RvdWNoRGV2aWNlID0gKCkgPT4gTC5Ccm93c2VyLnRvdWNoOwoKLyoqCiAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBwaXhlbHMgbGVmdCB0byBzY3JvbGwgZG93biBiZWZvcmUgcmVhY2hpbmcgdGhlIGJvdHRvbSBvZiBhbiBlbGVtZW50LgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAZnVuY3Rpb24gc2Nyb2xsQm90dG9tCiAqIEBwYXJhbSB7c3RyaW5nfEhUTUxFbGVtZW50fGpRdWVyeX0gZWxtIC0gVGhlIGVsZW1lbnQgb3Igc2VsZWN0b3IgdG8gY2FsY3VsYXRlIHRoZSBzY3JvbGwgYm90dG9tIGZvci4KICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBwaXhlbHMgZnJvbSB0aGUgYm90dG9tLgogKi8KY29uc3Qgc2Nyb2xsQm90dG9tID0gKGVsbSkgPT4gewogIC8vIEVuc3VyZSBlbG0gaXMgYW4gSFRNTEVsZW1lbnQ6IHJlc29sdmUgc2VsZWN0b3Igc3RyaW5ncyBvciBleHRyYWN0IERPTSBlbGVtZW50IGZyb20galF1ZXJ5IG9iamVjdAogIGNvbnN0IGVsZW1lbnQgPSB0eXBlb2YgZWxtID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxtKSA6IGVsbSBpbnN0YW5jZW9mIGpRdWVyeSA/IGVsbVswXSA6IGVsbTsKICByZXR1cm4gZWxlbWVudC5zY3JvbGxIZWlnaHQgLSBlbGVtZW50LmNsaWVudEhlaWdodCAtIGVsZW1lbnQuc2Nyb2xsVG9wOwp9OwoKLyoqCiAqIEVzY2FwZXMgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nIGZvciB1c2UgaW4gSmF2YVNjcmlwdC4KICogKGZvciBzdHJpbmdzIHBhc3NlZCBhcyBwYXJhbWV0ZXJzIHRvIGh0bWwgb25jbGljaz0iLi4uIiBmb3IgZXhhbXBsZSkKICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGVzY2FwZUpTCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVzY2FwZS4KICogQHJldHVybnMge3N0cmluZ30gVGhlIGVzY2FwZWQgc3RyaW5nLgogKi8KY29uc3QgZXNjYXBlSlMgPSBmdW5jdGlvbiAoc3RyKSB7CiAgcmV0dXJuIChzdHIgKyAnJykucmVwbGFjZSgvW1xcIiddL2csICdcXCQmJyk7Cn07CgovKioKICogRXNjYXBlcyBIVE1MIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBhIHN0cmluZy4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGVzY2FwZUh0bWwKICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZXNjYXBlLgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZXNjYXBlZCBzdHJpbmcuCiAqLwpjb25zdCBlc2NhcGVIdG1sID0gZnVuY3Rpb24gKHN0cikgewogIGNvbnN0IGVzY2FwZU1hcCA9IHsKICAgICcmJzogJyZhbXA7JywKICAgICc8JzogJyZsdDsnLAogICAgJz4nOiAnJmd0OycsCiAgICAnIic6ICcmcXVvdDsnLAogICAgIiciOiAnJiMzOTsnLAogIH07CiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bJjw+IiddL2csIChjaGFyKSA9PiBlc2NhcGVNYXBbY2hhcl0pOwp9OwoKLyoqCiAqIEZvcm1hdHMgdGhlIGVuZXJneSBvZiBhIHBvcnRhbCwgY29udmVydGluZyB0byAiayIgdW5pdHMgaWYgb3ZlciAxMDAwLgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAZnVuY3Rpb24gcHJldHR5RW5lcmd5CiAqIEBwYXJhbSB7bnVtYmVyfSBucmcgLSBUaGUgZW5lcmd5IHZhbHVlIHRvIGZvcm1hdC4KICogQHJldHVybnMge3N0cmluZ3xudW1iZXJ9IFRoZSBmb3JtYXR0ZWQgZW5lcmd5IHZhbHVlLgogKi8KY29uc3QgcHJldHR5RW5lcmd5ID0gKG5yZykgPT4gKG5yZyA+IDEwMDAgPyBgJHtNYXRoLnJvdW5kKG5yZyAvIDEwMDApfWtgIDogbnJnKTsKCi8qKgogKiBDb252ZXJ0cyBhIGxpc3Qgb2YgaXRlbXMgaW50byBhIHVuaXF1ZSBhcnJheSwgcmVtb3ZpbmcgZHVwbGljYXRlcy4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIHVuaXF1ZUFycmF5CiAqIEBwYXJhbSB7QXJyYXl9IGFyciAtIFRoZSBhcnJheSB0byBwcm9jZXNzLgogKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgb25seSB1bmlxdWUgZWxlbWVudHMuCiAqLwpjb25zdCB1bmlxdWVBcnJheSA9IGZ1bmN0aW9uIChhcnIpIHsKICByZXR1cm4gWy4uLm5ldyBTZXQoYXJyKV07Cn07CgovKioKICogR2VuZXJhdGVzIGEgZm91ci1jb2x1bW4gSFRNTCB0YWJsZSBmcm9tIGFuIGFycmF5IG9mIGRhdGEgYmxvY2tzLgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAcGFyYW0ge0FycmF5fSBibG9ja3MgLSBBcnJheSBvZiBkYXRhIGJsb2Nrcywgd2hlcmUgZWFjaCBibG9jayBpcyBhbiBhcnJheSB3aXRoIGRldGFpbHMgZm9yIG9uZSByb3cuCiAqIEByZXR1cm5zIHtzdHJpbmd9IEhUTUwgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29uc3RydWN0ZWQgdGFibGUuCiAqLwpjb25zdCBnZW5Gb3VyQ29sdW1uVGFibGUgPSBmdW5jdGlvbiAoYmxvY2tzKSB7CiAgY29uc3Qgcm93cyA9IGJsb2NrcwogICAgLm1hcCgoZGV0YWlsLCBpbmRleCkgPT4gewogICAgICBpZiAoIWRldGFpbCkgcmV0dXJuICcnOwogICAgICBjb25zdCB0aXRsZSA9IGRldGFpbFsyXSA/IGAgdGl0bGU9IiR7SUlUQy51dGlscy5lc2NhcGVIdG1sKGRldGFpbFsyXSl9ImAgOiAnJzsKCiAgICAgIGlmIChpbmRleCAlIDIgPT09IDApIHsKICAgICAgICAvLyBJZiBpbmRleCBpcyBldmVuLCBzdGFydCBhIG5ldyByb3cgYW5kIGFkZCA8dGQ+IGZvciBkYXRhIGFuZCA8dGg+IGZvciBoZWFkZXIKICAgICAgICByZXR1cm4gYDx0cj48dGQke3RpdGxlfT4ke2RldGFpbFsxXX08L3RkPjx0aCR7dGl0bGV9PiR7ZGV0YWlsWzBdfTwvdGg+YDsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBJZiBpbmRleCBpcyBvZGQsIGNvbXBsZXRlIHRoZSByb3cgd2l0aCA8dGg+IGZvciBoZWFkZXIgYW5kIDx0ZD4gZm9yIGRhdGEsIHRoZW4gY2xvc2UgPC90cj4KICAgICAgICByZXR1cm4gYDx0aCR7dGl0bGV9PiR7ZGV0YWlsWzBdfTwvdGg+PHRkJHt0aXRsZX0+JHtkZXRhaWxbMV19PC90ZD48L3RyPmA7CiAgICAgIH0KICAgIH0pCiAgICAuam9pbignJyk7CgogIC8vIElmIHRvdGFsIG51bWJlciBvZiBibG9ja3MgaXMgb2RkLCBhZGQgZW1wdHkgY2VsbHMgdG8gY29tcGxldGUgdGhlIGxhc3Qgcm93CiAgY29uc3QgaXNPZGQgPSBibG9ja3MubGVuZ3RoICUgMiA9PT0gMTsKICByZXR1cm4gaXNPZGQgPyByb3dzICsgJzx0ZD48L3RkPjx0ZD48L3RkPjwvdHI+JyA6IHJvd3M7Cn07CgovKioKICogQ29udmVydHMgdGV4dCB3aXRoIG5ld2xpbmVzIChgXG5gKSBhbmQgdGFicyAoYFx0YCkgaW50byBhbiBIVE1MIHRhYmxlLgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAZnVuY3Rpb24gdGV4dFRvVGFibGUKICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgdGV4dCB0byBjb252ZXJ0LgogKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcmVzdWx0aW5nIEhUTUwgdGFibGUuCiAqLwpjb25zdCB0ZXh0VG9UYWJsZSA9IGZ1bmN0aW9uICh0ZXh0KSB7CiAgLy8gSWYgbm8gdGFicyBhcmUgcHJlc2VudCwgcmVwbGFjZSBuZXdsaW5lcyB3aXRoIDxicj4gYW5kIHJldHVybgogIGlmICghdGV4dC5pbmNsdWRlcygnXHQnKSkgcmV0dXJuIHRleHQucmVwbGFjZSgvXG4vZywgJzxicj4nKTsKCiAgLy8gU3BsaXQgdGV4dCBpbnRvIHJvd3MgYW5kIGNvbHVtbnMsIHRyYWNraW5nIHRoZSBtYXggY29sdW1uIGNvdW50CiAgY29uc3Qgcm93cyA9IHRleHQuc3BsaXQoJ1xuJykubWFwKChyb3cpID0+IHJvdy5zcGxpdCgnXHQnKSk7CiAgY29uc3QgY29sdW1uQ291bnQgPSBNYXRoLm1heCguLi5yb3dzLm1hcCgocm93KSA9PiByb3cubGVuZ3RoKSk7CgogIC8vIEJ1aWxkIHRoZSB0YWJsZSByb3dzCiAgY29uc3QgdGFibGVSb3dzID0gW107CiAgZm9yIChjb25zdCByb3cgb2Ygcm93cykgewogICAgbGV0IHJvd0h0bWwgPSAnPHRyPic7CiAgICBmb3IgKGxldCBrID0gMDsgayA8IHJvdy5sZW5ndGg7IGsrKykgewogICAgICBjb25zdCBjZWxsID0gSUlUQy51dGlscy5lc2NhcGVIdG1sKHJvd1trXSk7CiAgICAgIGNvbnN0IGNvbHNwYW4gPSBrID09PSAwICYmIHJvdy5sZW5ndGggPCBjb2x1bW5Db3VudCA/IGAgY29sc3Bhbj0iJHtjb2x1bW5Db3VudCAtIHJvdy5sZW5ndGggKyAxfSJgIDogJyc7CiAgICAgIHJvd0h0bWwgKz0gYDx0ZCR7Y29sc3Bhbn0+JHtjZWxsfTwvdGQ+YDsKICAgIH0KICAgIHJvd0h0bWwgKz0gJzwvdHI+JzsKICAgIHRhYmxlUm93cy5wdXNoKHJvd0h0bWwpOwogIH0KCiAgLy8gQ29tYmluZSBhbGwgcm93cyBpbnRvIGEgc2luZ2xlIHRhYmxlIEhUTUwKICByZXR1cm4gYDx0YWJsZT4ke3RhYmxlUm93cy5qb2luKCcnKX08L3RhYmxlPmA7Cn07CgovKioKICogQ2xhbXBzIGEgZ2l2ZW4gdmFsdWUgYmV0d2VlbiBhIG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWUuCiAqIFNpbXBsZSBpbXBsZW1lbnRhdGlvbiBmb3IgaW50ZXJuYWwgdXNlLgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAcHJpdmF0ZQogKiBAZnVuY3Rpb24gY2xhbXAKICogQHBhcmFtIHtudW1iZXJ9IG4gLSBUaGUgdmFsdWUgdG8gY2xhbXAuCiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBUaGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlLgogKiBAcGFyYW0ge251bWJlcn0gbWluIC0gVGhlIG1pbmltdW0gYWxsb3dlZCB2YWx1ZS4KICogQHJldHVybnMge251bWJlcn0gVGhlIGNsYW1wZWQgdmFsdWUuCiAqLwpjb25zdCBjbGFtcCA9IGZ1bmN0aW9uIChuLCBtYXgsIG1pbikgewogIGlmIChuID09PSAwKSByZXR1cm4gMDsKICByZXR1cm4gbiA+IDAgPyBNYXRoLm1pbihuLCBtYXgpIDogTWF0aC5tYXgobiwgbWluKTsKfTsKCi8qKgogKiBUaGUgbWF4aW11bSBhYnNvbHV0ZSBsYXRpdHVkZSB0aGF0IGNhbiBiZSByZXByZXNlbnRlZCBpbiBXZWIgTWVyY2F0b3IgcHJvamVjdGlvbiAoRVBTRzozODU3KS4KICogVGhpcyB2YWx1ZSBpcyB0YWtlbiBmcm9tIEwuUHJvamVjdGlvbi5TcGhlcmljYWxNZXJjYXRvci5NQVhfTEFUSVRVREUKICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGNvbnN0YW50IHtOdW1iZXJ9CiAqLwpjb25zdCBNQVhfTEFUSVRVREUgPSA4NS4wNTExMjg7CgovKioKICogQ2xhbXBzIGEgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSB0byB0aGUgbWF4aW11bSBhbmQgbWluaW11bSB2YWxpZCB2YWx1ZXMuCiAqCiAqIEBtZW1iZXJvZiBJSVRDLnV0aWxzCiAqIEBmdW5jdGlvbiBjbGFtcExhdExuZwogKiBAcGFyYW0ge0wuTGF0TG5nfSBsYXRsbmcgLSBUaGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSB0byBjbGFtcC4KICogQHJldHVybnMge0FycmF5PG51bWJlcj59IFRoZSBjbGFtcGVkIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUuCiAqLwpjb25zdCBjbGFtcExhdExuZyA9IGZ1bmN0aW9uIChsYXRsbmcpIHsKICAvLyBJbmdyZXNzIGFjY2VwdHMgcmVxdWVzdHMgb25seSBmb3IgdGhpcyByYW5nZQogIHJldHVybiBbY2xhbXAobGF0bG5nLmxhdCwgTUFYX0xBVElUVURFLCAtTUFYX0xBVElUVURFKSwgY2xhbXAobGF0bG5nLmxuZywgMTc5Ljk5OTk5OSwgLTE4MCldOwp9OwoKLyoqCiAqIENsYW1wcyBhIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgYm91bmRzIHRvIHRoZSBtYXhpbXVtIGFuZCBtaW5pbXVtIHZhbGlkIHZhbHVlcy4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGNsYW1wTGF0TG5nQm91bmRzCiAqIEBwYXJhbSB7TC5MYXRMbmdCb3VuZHN9IGJvdW5kcyAtIFRoZSBib3VuZHMgdG8gY2xhbXAuCiAqIEByZXR1cm5zIHtMLkxhdExuZ0JvdW5kc30gVGhlIGNsYW1wZWQgYm91bmRzLgogKi8KY29uc3QgY2xhbXBMYXRMbmdCb3VuZHMgPSBmdW5jdGlvbiAoYm91bmRzKSB7CiAgdmFyIFNXID0gYm91bmRzLmdldFNvdXRoV2VzdCgpLAogICAgTkUgPSBib3VuZHMuZ2V0Tm9ydGhFYXN0KCk7CiAgcmV0dXJuIEwubGF0TG5nQm91bmRzKHdpbmRvdy5jbGFtcExhdExuZyhTVyksIHdpbmRvdy5jbGFtcExhdExuZyhORSkpOwp9OwoKLyoqCiAqIERldGVybWluZXMgaWYgYSBwb2ludCBpcyBpbnNpZGUgYSBwb2x5Z29uLgogKgogKiBAbWVtYmVyb2YgSUlUQy51dGlscwogKiBAcGFyYW0ge0FycmF5PEwuTGF0TG5nPn0gcG9seWdvbiAtIFRoZSB2ZXJ0aWNlcyBvZiB0aGUgcG9seWdvbi4KICogQHBhcmFtIHtMLkxhdExuZ30gcG9pbnQgLSBUaGUgcG9pbnQgdG8gdGVzdC4KICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgcG9seWdvbiwgZmFsc2Ugb3RoZXJ3aXNlLgogKi8KY29uc3QgaXNQb2ludEluUG9seWdvbiA9IChwb2x5Z29uLCBwb2ludCkgPT4gewogIGxldCBpbnNpZGUgPSAwOwogIC8vIGogcmVjb3JkcyBwcmV2aW91cyB2YWx1ZS4gQWxzbyBoYW5kbGVzIHdyYXBwaW5nIGFyb3VuZC4KICBmb3IgKGxldCBpID0gMCwgaiA9IHBvbHlnb24ubGVuZ3RoIC0gMTsgaSA8IHBvbHlnb24ubGVuZ3RoOyBqID0gaSsrKSB7CiAgICBpbnNpZGUgXj0KICAgICAgcG9seWdvbltpXS55ID4gcG9pbnQueSAhPT0gcG9seWdvbltqXS55ID4gcG9pbnQueSAmJgogICAgICBwb2ludC54IC0gcG9seWdvbltpXS54IDwgKChwb2x5Z29uW2pdLnggLSBwb2x5Z29uW2ldLngpICogKHBvaW50LnkgLSBwb2x5Z29uW2ldLnkpKSAvIChwb2x5Z29uW2pdLnkgLSBwb2x5Z29uW2ldLnkpOwogIH0KICAvLyBMZXQncyBtYWtlIGpzIGFzIG1hZ2ljYWwgYXMgQy4gWWF5LgogIHJldHVybiAhIWluc2lkZTsKfTsKCi8qKgogKiBDb252ZXJ0cyBhIHRlYW0gc3RyaW5nIG9yIG9iamVjdCB0byBhIHRlYW0gSUQuCiAqIEFjY2VwdHMgZWl0aGVyIHRlYW0gc3RyaW5nIGRpcmVjdGx5IChlLmcuICJSRVNJU1RBTkNFIiwgIlIiKSBvciBhbiBvYmplY3Qgd2l0aCB0ZWFtIHByb3BlcnR5LgogKiBSZXR1cm5zIFRFQU1fTk9ORSBpZiBubyBtYXRjaCBmb3VuZC4KICoKICogQG1lbWJlcm9mIElJVEMudXRpbHMKICogQGZ1bmN0aW9uIGdldFRlYW1JZAogKiBAcGFyYW0geyhPYmplY3R8c3RyaW5nKX0gaW5wdXQgLSBJbnB1dCB0byBjb252ZXJ0IHRvIHRlYW0gSUQKICogQHBhcmFtIHtzdHJpbmd9IFtpbnB1dC50ZWFtXSAtIFRlYW0gc3RyaW5nIHdoZW4gaW5wdXQgaXMgYW4gb2JqZWN0CiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB0ZWFtIElEIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHRlYW0gc3RyaW5nLgogKi8KY29uc3QgZ2V0VGVhbUlkID0gKGlucHV0KSA9PiB7CiAgY29uc3QgdGVhbVN0ciA9IHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgPyBpbnB1dCA6IGlucHV0Py50ZWFtOwogIGlmICh3aW5kb3cuVEVBTV9DT0RFTkFNRVMuaW5jbHVkZXModGVhbVN0cikpIHsKICAgIHJldHVybiB3aW5kb3cuVEVBTV9DT0RFTkFNRVMuaW5kZXhPZih0ZWFtU3RyKTsKICB9CiAgaWYgKHdpbmRvdy5URUFNX0NPREVTLmluY2x1ZGVzKHRlYW1TdHIpKSB7CiAgICByZXR1cm4gd2luZG93LlRFQU1fQ09ERVMuaW5kZXhPZih0ZWFtU3RyKTsKICB9CiAgcmV0dXJuIHdpbmRvdy5URUFNX05PTkU7Cn07CgpJSVRDLnV0aWxzID0gewogIGdldFVSTFBhcmFtLAogIGdldENvb2tpZSwKICBzZXRDb29raWUsCiAgZGVsZXRlQ29va2llLAogIGZvcm1hdE51bWJlciwKICB6ZXJvUGFkLAogIHVuaXhUaW1lVG9TdHJpbmcsCiAgdW5peFRpbWVUb0RhdGVUaW1lU3RyaW5nLAogIHVuaXhUaW1lVG9ISG1tLAogIGZvcm1hdEludGVydmFsLAogIGZvcm1hdERpc3RhbmNlLAogIGZvcm1hdEFnbywKICBpc1RvdWNoRGV2aWNlLAogIHNjcm9sbEJvdHRvbSwKICBlc2NhcGVKUywKICBlc2NhcGVIdG1sLAogIHByZXR0eUVuZXJneSwKICB1bmlxdWVBcnJheSwKICBnZW5Gb3VyQ29sdW1uVGFibGUsCiAgdGV4dFRvVGFibGUsCiAgY2xhbXAsCiAgY2xhbXBMYXRMbmcsCiAgY2xhbXBMYXRMbmdCb3VuZHMsCiAgaXNQb2ludEluUG9seWdvbiwKICBnZXRUZWFtSWQsCn07CgovLyBNYXAgb2YgbGVnYWN5IGZ1bmN0aW9uIG5hbWVzIHRvIHRoZWlyIG5ldyBuYW1lcyAob3IgdGhlIHNhbWUgbmFtZSBpZiBub3QgcmVuYW1lZCkKY29uc3QgbGVnYWN5RnVuY3Rpb25NYXBwaW5ncyA9IHsKICBnZXRVUkxQYXJhbTogJ2dldFVSTFBhcmFtJywKICByZWFkQ29va2llOiAnZ2V0Q29va2llJywKICB3cml0ZUNvb2tpZTogJ3NldENvb2tpZScsCiAgZXJhc2VDb29raWU6ICdkZWxldGVDb29raWUnLAogIGRpZ2l0czogJ2Zvcm1hdE51bWJlcicsCiAgemVyb1BhZDogJ3plcm9QYWQnLAogIHVuaXhUaW1lVG9TdHJpbmc6ICd1bml4VGltZVRvU3RyaW5nJywKICB1bml4VGltZVRvRGF0ZVRpbWVTdHJpbmc6ICd1bml4VGltZVRvRGF0ZVRpbWVTdHJpbmcnLAogIHVuaXhUaW1lVG9ISG1tOiAndW5peFRpbWVUb0hIbW0nLAogIGZvcm1hdEludGVydmFsOiAnZm9ybWF0SW50ZXJ2YWwnLAogIGZvcm1hdERpc3RhbmNlOiAnZm9ybWF0RGlzdGFuY2UnLAogIGlzVG91Y2hEZXZpY2U6ICdpc1RvdWNoRGV2aWNlJywKICBzY3JvbGxCb3R0b206ICdzY3JvbGxCb3R0b20nLAogIGVzY2FwZUphdmFzY3JpcHRTdHJpbmc6ICdlc2NhcGVKUycsCiAgZXNjYXBlSHRtbFNwZWNpYWxDaGFyczogJ2VzY2FwZUh0bWwnLAogIHByZXR0eUVuZXJneTogJ3ByZXR0eUVuZXJneScsCiAgdW5pcXVlQXJyYXk6ICd1bmlxdWVBcnJheScsCiAgZ2VuRm91ckNvbHVtblRhYmxlOiAnZ2VuRm91ckNvbHVtblRhYmxlJywKICBjb252ZXJ0VGV4dFRvVGFibGVNYWdpYzogJ3RleHRUb1RhYmxlJywKICBjbGFtcDogJ2NsYW1wJywKICBjbGFtcExhdExuZzogJ2NsYW1wTGF0TG5nJywKICBjbGFtcExhdExuZ0JvdW5kczogJ2NsYW1wTGF0TG5nQm91bmRzJywKICBwbnBvbHk6ICdpc1BvaW50SW5Qb2x5Z29uJywKICB0ZWFtU3RyaW5nVG9JZDogJ2dldFRlYW1JZCcsCn07CgovLyBTZXQgdXAgc3luY2hyb25pemF0aW9uIGJldHdlZW4gYHdpbmRvd2AgYW5kIGBJSVRDLnV0aWxzYCB3aXRoIG5ldyBuYW1lcwpPYmplY3QuZW50cmllcyhsZWdhY3lGdW5jdGlvbk1hcHBpbmdzKS5mb3JFYWNoKChbb2xkTmFtZSwgbmV3TmFtZV0pID0+IHsKICAvLyBJbml0aWFsaXplIElJVEMudXRpbHNbbmV3TmFtZV0gaWYgbm90IGFscmVhZHkgZGVmaW5lZAogIHdpbmRvdy5JSVRDLnV0aWxzW25ld05hbWVdID0gd2luZG93LklJVEMudXRpbHNbbmV3TmFtZV0gfHwgZnVuY3Rpb24gKCkge307CgogIC8vIERlZmluZSBhIGdldHRlci9zZXR0ZXIgb24gYHdpbmRvd2AgdG8gc3luY2hyb25pemUgd2l0aCBgSUlUQy51dGlsc2AKICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCBvbGROYW1lLCB7CiAgICBnZXQoKSB7CiAgICAgIHJldHVybiB3aW5kb3cuSUlUQy51dGlsc1tuZXdOYW1lXTsKICAgIH0sCiAgICBzZXQobmV3RnVuYykgewogICAgICB3aW5kb3cuSUlUQy51dGlsc1tuZXdOYW1lXSA9IG5ld0Z1bmM7CiAgICB9LAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogIH0pOwp9KTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHV0aWxzX2ZpbGUuanMgKioqCihmdW5jdGlvbiAoKSB7CnZhciBsb2cgPSB1bG9nKCd1dGlsc19maWxlJyk7Ci8qIGdsb2JhbCBMLCBsb2cgLS0gZXNsaW50ICovCgovKioKICogQGZpbGUgVGhpcyBmaWxlIHByb3ZpZGVzIHV0aWxpdGllcyBmb3IgaGFuZGxpbmcgZmlsZXMgaW4gYW4gZW52aXJvbm1lbnQtaW5kZXBlbmRlbnQgd2F5LCBpbmNsdWRpbmcKICogZnVuY3Rpb25zIHRvIHNhdmUgZmlsZXMgYW5kIHdyYXBwZXJzIGFyb3VuZCB0aGUgRmlsZVJlYWRlciBBUEkgdG8gaW50ZWdyYXRlIHdpdGggTGVhZmxldCdzIGV2ZW50IHN5c3RlbS4KICoKICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vSUlUQy1DRS9pbmdyZXNzLWludGVsLXRvdGFsLWNvbnZlcnNpb24vaXNzdWVzLzI0NAogKiBAbW9kdWxlIHV0aWxzX2ZpbGUKICovCgovKioKICogU2F2ZXMgZGF0YSBhcyBhIGZpbGUgd2l0aCBhIHNwZWNpZmllZCBmaWxlbmFtZSBhbmQgZGF0YSB0eXBlLgogKgogKiBAcHJpdmF0ZQogKiBAZnVuY3Rpb24gc2F2ZUFzCiAqIEBwYXJhbSB7c3RyaW5nfEJsb2J8QmxvYlBhcnR8QXJyYXk8QmxvYlBhcnQ+fSBkYXRhIC0gVGhlIGRhdGEgdG8gYmUgc2F2ZWQuCiAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZW5hbWVdIC0gVGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gc2F2ZS4KICogQHBhcmFtIHtzdHJpbmd9IFtkYXRhVHlwZV0gLSBUaGUgTUlNRSB0eXBlIG9mIHRoZSBmaWxlLCB1c2VkIHRvIHNwZWNpZnkgdGhlIGZpbGUgZm9ybWF0LgogKi8KZnVuY3Rpb24gc2F2ZUFzKGRhdGEsIGZpbGVuYW1lLCBkYXRhVHlwZSkgewogIGlmICghKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkpIHsKICAgIGRhdGEgPSBbZGF0YV07CiAgfQogIHZhciBmaWxlID0gbmV3IEJsb2IoZGF0YSwgeyB0eXBlOiBkYXRhVHlwZSB9KTsKICB2YXIgb2JqZWN0VVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTsKCiAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgbGluay5ocmVmID0gb2JqZWN0VVJMOwogIGxpbmsuZG93bmxvYWQgPSBmaWxlbmFtZTsKICBsaW5rLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTsKICBsaW5rLmNsaWNrKCk7CiAgbGluay5yZW1vdmUoKTsKCiAgVVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVUkwpOwp9IC8vIGFsdGVybmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9GaWxlU2F2ZXIuanMvYmxvYi9tYXN0ZXIvc3JjL0ZpbGVTYXZlci5qcwoKLyoqCiAqIFNhdmVzIGRhdGEgdG8gYSBmaWxlIHdpdGggdGhlIGdpdmVuIGZpbGVuYW1lLiBUaGlzIGZ1bmN0aW9uIGlzIGFuIGFsaWFzIHRvIHRoZSBgc2F2ZUFzYCBmdW5jdGlvbi4KICogb3IgaXQgY2FuIHVzZSB0aGUgSUlUQyBNb2JpbGUgZmlsZSBjaG9vc2VyIChvdmVyd3JpdHRlbiBpbiBhcHAuanMpLiBUaGUgYGRhdGFUeXBlYCBwYXJhbWV0ZXIgY2FuIGJlIHVzZWQgdG8gZmlsdGVyCiAqIGZpbGUgdHlwZXMgaW4gdGhlIElJVENtIGZpbGUgY2hvb3Nlci4KICoKICogQGZ1bmN0aW9uIHNhdmVGaWxlCiAqIEBwYXJhbSB7c3RyaW5nfEJsb2JQYXJ0fEJsb2JQYXJ0W119IGRhdGEgLSBUaGUgZGF0YSB0byBiZSBzYXZlZC4KICogQHBhcmFtIHtzdHJpbmd9IFtmaWxlbmFtZV0gLSBUaGUgbmFtZSBvZiB0aGUgZmlsZSB0byBzYXZlLgogKiBAcGFyYW0ge3N0cmluZ30gW2RhdGFUeXBlXSAtIFRoZSBNSU1FIHR5cGUgb2YgdGhlIGZpbGUsIHVzZWQgdG8gc3BlY2lmeSB0aGUgZmlsZSBmb3JtYXQuCiAqLwp3aW5kb3cuc2F2ZUZpbGUgPSBzYXZlQXM7CgovKioKICogTGVhZmxldCB3cmFwcGVyIG92ZXIgW0ZpbGVSZWFkZXJdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNBUElBU3luY2gpIFdlYiBBUEksCiAqIG1ha2luZyBpdCBjb21wYXRpYmxlIHdpdGggdGhlIExlYWZsZXQgZXZlbnQgc3lzdGVtLgogKiBUaGlzIGNsYXNzIGV4dGVuZHMgYEwuRXZlbnRlZGAuCiAqCiAqIEBtZW1iZXJvZiBMCiAqIEBjbGFzcyBGaWxlUmVhZGVyCiAqIEBleHRlbmRzIEwuRXZlbnRlZAogKi8KTC5GaWxlUmVhZGVyID0gTC5FdmVudGVkLmV4dGVuZCh7CiAgb3B0aW9uczogewogICAgLy8gZW5jb2Rpbmc6ICd1dGYtOCcgLy8gdG9kbwoKICAgIC8vIEBvcHRpb24gcmVhZEFzOiBTdHJpbmcgPSAncmVhZEFzVGV4dCcKICAgIC8vIFtGdW5jdGlvbl0oaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ZpbGVBUEkvI3JlYWRpbmctYS1maWxlKSB0byB1c2UgZm9yIGZpbGUgcmVhZGluZy4KICAgIHJlYWRBczogJ3JlYWRBc1RleHQnLAogIH0sCgogIGluaXRpYWxpemU6IGZ1bmN0aW9uIChmaWxlLCBvcHRpb25zKSB7CiAgICB0aGlzLl9zZXRPcHRpb25zKG9wdGlvbnMpOwogICAgaWYgKGZpbGUpIHsKICAgICAgdGhpcy5yZWFkKGZpbGUpOwogICAgfQogIH0sCgogIF9zZXRPcHRpb25zOiBmdW5jdGlvbiAob3B0aW9ucykgewogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgewogICAgICBvcHRpb25zID0geyByZWFkQXM6IG9wdGlvbnMgfTsKICAgIH0KICAgIHJldHVybiBMLlV0aWwuc2V0T3B0aW9ucyh0aGlzLCBvcHRpb25zKTsKICB9LAoKICAvLyBfZXZlbnRzID0ge30sIC8vIHRoaXMgcHJvcGVydHkgY2FuIGJlIHVzZWZ1bCB3aGVuIGV4dGVuZGluZyBjbGFzcwoKICBfc2V0dXBSZWFkZXI6IGZ1bmN0aW9uICgpIHsKICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgdGhpcy5fZXZlbnRUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXMuX2ZpcmUuYmluZCh0aGlzLCB0eXBlKSk7CiAgICB9LCB0aGlzKTsKICAgIGlmICh0aGlzLl9ldmVudHMpIHsKICAgICAgdGhpcy5vbih0aGlzLl9ldmVudHMpOwogICAgfQogICAgaWYgKHRoaXMuX29uZXJyb3IpIHsKICAgICAgdGhpcy5vbmNlKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbnMoJ2Vycm9yJywgdHJ1ZSkpIHsKICAgICAgICAgIHRoaXMub24oJ2Vycm9yJywgdGhpcy5fb25lcnJvcik7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIHJldHVybiByZWFkZXI7CiAgfSwKCiAgLyoqCiAgICogU3RhcnRzIHJlYWRpbmcgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZQogICAqIHVzaW5nIFtyZWFkZXIgbWV0aG9kXShodHRwczovL3czYy5naXRodWIuaW8vRmlsZUFQSS8jcmVhZGluZy1hLWZpbGUpIHNwZWNpZmllZCBpbiBgb3B0aW9uc2AuCiAgICogTm90ZTogYWxsICdpbml0KicgZXZlbnQgaGFuZGxlcnMgZXhwZWN0ZWQgdG8gYmUgYWxyZWFkeSBhdHRhY2hlZCAqKmJlZm9yZSoqIHRoaXMgbWV0aG9kIGNhbGwuCiAgICoKICAgKiBAbWV0aG9kCiAgICogQG1lbWJlcm9mIEwuRmlsZVJlYWRlcgogICAqIEBwYXJhbSB7QmxvYn0gW2ZpbGVdIC0gVGhlIGZpbGUgb3IgYmxvYiB0byBiZSByZWFkLiBPcHRpb25hbCBpZiBhbHJlYWR5IHNldC4KICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIGZpbGUgcmVhZGluZy4gU2FtZSBhcyBpbiBjb25zdHJ1Y3Rvci4KICAgKiBAcmV0dXJucyB7TC5GaWxlUmVhZGVyfSBSZXR1cm5zIHRoZSBgTC5GaWxlUmVhZGVyYCBpbnN0YW5jZSBmb3IgY2hhaW5pbmcuCiAgICovCiAgcmVhZDogZnVuY3Rpb24gKGZpbGUsIG9wdGlvbnMpIHsKICAgIGlmIChvcHRpb25zKSB7CiAgICAgIHRoaXMuX3NldE9wdGlvbnMob3B0aW9ucyk7CiAgICB9CiAgICBpZiAoZmlsZSkgewogICAgICB0aGlzLmZpbGUgPSBmaWxlOwogICAgICB0cnkgewogICAgICAgIC8vIEBldmVudCBpbml0OiBFdmVudAogICAgICAgIC8vIEZpcmVkIGJlZm9yZSByZWFkaW5nIGEgZmlsZS4KICAgICAgICAvLyBgRXZlbnRgIG9iamVjdCBoYXMgYWRkaXRpb25hbCBwcm9wZXJ0eSBgZmlsZWAgd2l0aCBbYEZpbGVgXShodHRwczovL3czYy5naXRodWIuaW8vRmlsZUFQSS8jZGZuLWZpbGUpIG9iamVjdC4KICAgICAgICAvLyBOb3RlOiBpbiBvcmRlciB0byBzdG9wIGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiB0aGUgZmlsZQogICAgICAgIC8vIGhhbmRsZXIgbWF5IHRocm93IGVycm9yIChpcydzIHNhZmUgYXMgZXJyb3JzIGFyZSBjYXVnaHQpCiAgICAgICAgdGhpcy5maXJlKCdpbml0JywgeyBmaWxlOiBmaWxlIH0sIHRydWUpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgLy8gQGV2ZW50IGluaXQ6ZXJyb3I6IEV2ZW50CiAgICAgICAgLy8gRmlyZWQgb24gZXJyb3JzIGFyaXNlZCBpbiAnaW5pdCcgaGFuZGxlcihzKS4KICAgICAgICAvLyBgRXZlbnRgIG9iamVjdCBoYXMgZm9sbG93aW5nIGFkZGl0aW9uYWwgcHJvcGVydGllczoKICAgICAgICAvLyBgZmlsZWA6IFtgRmlsZWBdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNkZm4tZmlsZSkgb2JqZWN0LgogICAgICAgIC8vIGBlcnJvcmA6IGBFcnJvcmAgb2JqZWN0LgogICAgICAgIC8vIE5vdGU6IGlmIG5vIGhhbmRsZXJzIGZvdW5kIGZvciBgZXJyb3I6aW5pdGAgdGhlbiBkZWZhdWx0IG9uZSB3aWxsIGJlIGF0dGFjaGVkIChgY29uc29sZS53YXJuYCkKICAgICAgICB2YXIgZGF0YSA9IHsgZmlsZTogZmlsZSwgZXJyb3I6IGUgfTsKICAgICAgICBpZiAodGhpcy5fb25lcnJvciAmJiAhdGhpcy5saXN0ZW5zKCdpbml0OmVycm9yJywgdHJ1ZSkpIHsKICAgICAgICAgIHRoaXMuX29uZXJyb3IoZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuZmlyZSgnaW5pdDplcnJvcicsIGRhdGEsIHRydWUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQogICAgfSBlbHNlIGlmICghdGhpcy5maWxlKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbGVgIGFyZyByZXF1aXJlZCcpOwogICAgfQogICAgdGhpcy5yZWFkZXIgPSB0aGlzLnJlYWRlciB8fCB0aGlzLl9zZXR1cFJlYWRlcigpOwogICAgdGhpcy5yZWFkZXJbdGhpcy5vcHRpb25zLnJlYWRBc10odGhpcy5maWxlKTsKICAgIHJldHVybiB0aGlzOwogIH0sCgogIF9vbmVycm9yOiBmdW5jdGlvbiAoZSkgewogICAgbG9nLndhcm4oJ0Vycm9yIGxvYWRpbmcgZmlsZTogJywgZS5maWxlLm5hbWUsICdcbicsIGUuZXJyb3IgfHwgZS5yZWFkZXIuZXJyb3IubWVzc2FnZSk7CiAgfSwKCiAgLy8gQGV2ZW50IFthYm9ydCwgZXJyb3IsIGxvYWQsIGxvYWRzdGFydCwgbG9hZGVuZCwgcHJvZ3Jlc3NdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNldmVudHMpOiBFdmVudAogIC8vIGBFdmVudGAgb2JqZWN0IGhhcyBmb2xsb3dpbmcgYWRkaXRpb25hbCBwcm9wZXJ0aWVzOgogIC8vIGByZWFkZXJgOiByYXcgaW5zdGFuY2Ugb2YgW2BGaWxlUmVhZGVyYF0oaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ZpbGVBUEkvI0FQSUFTeW5jaCkgaW50ZXJmYWNlCiAgLy8gYGZpbGVgOiByYXcgaW5zdGFuY2Ugb2YgW2BGaWxlYC9gQmxvYmBdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNkZm4tZmlsZSkKICAvLyBgb3JpZ2luYWxFdmVudGA6IHJhdyBbZXZlbnRdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNldmVudHMpCiAgLy8gTm90ZTogaWYgbm8gaGFuZGxlcnMgZm91bmQgZm9yIGBlcnJvcmAgdGhlbiBkZWZhdWx0IG9uZSB3aWxsIGJlIGF0dGFjaGVkIChgY29uc29sZS53YXJuYCkKICBfZXZlbnRUeXBlczogWydhYm9ydCcsICdlcnJvcicsICdsb2FkJywgJ2xvYWRzdGFydCcsICdsb2FkZW5kJywgJ3Byb2dyZXNzJ10sCgogIF9maXJlOiBmdW5jdGlvbiAodHlwZSwgZXZlbnQpIHsKICAgIGlmICghdGhpcy5saXN0ZW5zKHR5cGUsIHRydWUpKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMuZmlyZSh0eXBlLCBPYmplY3QuYXNzaWduKHsgb3JpZ2luYWxFdmVudDogZXZlbnQgfSwgdGhpcyksIHRydWUpOwogIH0sCn0pOwoKLyoqCiAqIEZhY3RvcnkgZnVuY3Rpb24gdG8gaW5zdGFudGlhdGUgYSBgTC5GaWxlUmVhZGVyYCBvYmplY3QuCiAqIEluc3RhbnRpYXRlcyBhIGBMLkZpbGVSZWFkZXJgIG9iamVjdCBnaXZlbiB0aGUgW2BGaWxlYC9gQmxvYmBdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyNkZm4tZmlsZSkKICogYW5kIG9wdGlvbmFsbHkgYW4gb2JqZWN0IGxpdGVyYWwgd2l0aCBgb3B0aW9uc2AuCiAqIE5vdGU6IGl0J3MgcG9zc2libGUgdG8gc3BlY2lmeSBgcmVhZEFzYCBkaXJlY3RseSBpbnN0ZWFkIG9mIGZ1bGwgYG9wdGlvbnNgIG9iamVjdC4KICoKICogQG1lbWJlcm9mIEwKICogQGZ1bmN0aW9uIGZpbGVSZWFkZXIKICogQHBhcmFtIHtCbG9ifSBbZmlsZV0gLSBUaGUgZmlsZSBvciBibG9iIHRvIGJlIHJlYWQuIE9wdGlvbmFsLgogKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIGZpbGUgcmVhZGluZyBvciBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJlYWQgbWV0aG9kLgogKiBAcmV0dXJucyB7TC5GaWxlUmVhZGVyfSBBIG5ldyBpbnN0YW5jZSBvZiBgTC5GaWxlUmVhZGVyYC4KICogQGV4YW1wbGUKICogdmFyIHJlYWRlciA9IEwuZmlsZVJlYWRlcihmaWxlLCB7IHJlYWRBczogJ3JlYWRBc1RleHQnIH0pOwogKi8KTC5maWxlUmVhZGVyID0gZnVuY3Rpb24gKGZpbGUsIG9wdGlvbnMpIHsKICByZXR1cm4gbmV3IEwuRmlsZVJlYWRlcihmaWxlLCBvcHRpb25zKTsKfTsKCkwuRmlsZVJlYWRlci5fY2hvb3NlRmlsZXMgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIG9wdGlvbnMpIHsKICAvLyBhc3NlcnQgY2FsbGJhY2sKICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogIGlucHV0LnR5cGUgPSAnZmlsZSc7CiAgaW5wdXQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICBMLmV4dGVuZChpbnB1dCwgb3B0aW9ucyk7IC8vIG9wdGlvbmFsIGF0dHJpYnV0ZXM6IGFjY2VwdCwgbXVsdGlwbGUsIGNhcHR1cmUKICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKAogICAgJ2NoYW5nZScsCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgIGNhbGxiYWNrKHRoaXMuZmlsZXMpOwogICAgfSwKICAgIGZhbHNlCiAgKTsKICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlucHV0KTsKICBpbnB1dC5jbGljaygpOwogIGlucHV0LnJlbW92ZSgpOwp9OwoKLyoqCiAqIEluc3RhbnRpYXRlcyBhIGBMLkZpbGVSZWFkZXJgIG9iamVjdCBhbmQgaW5pdGlhdGVzIGEgZmlsZSBjaG9vc2VyIGRpYWxvZy4KICogVGhpcyBmdW5jdGlvbiBzaW11bGF0ZXMgYSBjbGljayBvbiBhIGhpZGRlbiBmaWxlIGlucHV0IGVsZW1lbnQgY3JlYXRlZCB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLgogKiBUaGUgYHJlYWRgIG1ldGhvZCBpcyBjYWxsZWQgd2l0aCB0aGUgZmlsZSBjaG9zZW4gYnkgdGhlIHVzZXIuCiAqCiAqIEBmdW5jdGlvbiBsb2FkRmlsZQogKiBAbWVtYmVyb2YgTC5GaWxlUmVhZGVyCiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgZmlsZSBpbnB1dCBlbGVtZW50LgogKiBAcmV0dXJucyB7TC5GaWxlUmVhZGVyfSBBIG5ldyBpbnN0YW5jZSBvZiBgTC5GaWxlUmVhZGVyYCB3aXRoIHRoZSBmaWxlIHRvIGJlIHJlYWQuCiAqLwpMLkZpbGVSZWFkZXIubG9hZEZpbGUgPSBmdW5jdGlvbiAob3B0aW9ucykgewogIHZhciByZWFkZXIgPSBuZXcgdGhpcygpOwogIHRoaXMuX2Nob29zZUZpbGVzKGZ1bmN0aW9uIChmaWxlTGlzdCkgewogICAgcmVhZGVyLnJlYWQoZmlsZUxpc3RbMF0pOwogIH0sIG9wdGlvbnMpOwogIHJldHVybiByZWFkZXI7Cn07CgovKioKICogQSBjbGFzcyBmb3IgaGFuZGxpbmcgYSBsaXN0IG9mIGZpbGVzIChgRmlsZUxpc3RgKSwgcHJvY2Vzc2luZyBlYWNoIGZpbGUgd2l0aCBgTC5GaWxlUmVhZGVyYC4KICogSXQgZXh0ZW5kcyBgTC5FdmVudGVkYCB0byB1c2UgZXZlbnQgaGFuZGxpbmcuCiAqCiAqIEBjbGFzcyBMLkZpbGVMaXN0TG9hZGVyCiAqIEBleHRlbmRzIEwuRXZlbnRlZAogKiBAcGFyYW0ge0ZpbGVMaXN0fSBmaWxlTGlzdCAtIFRoZSBsaXN0IG9mIGZpbGVzIHRvIGJlIHByb2Nlc3NlZC4KICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbnMgZm9yIGZpbGUgcmVhZGluZy4KICogQGV4YW1wbGUKICogTC5GaWxlTGlzdExvYWRlcihmaWxlTGlzdCkKICogICAub24oJ2xvYWQnLCBmdW5jdGlvbihlKSB7CiAqICAgICBjb25zb2xlLmxvZyhlLmZpbGUubmFtZSwgZS5yZWFkZXIucmVzdWx0KTsKICogICB9KQogKiAgIC5vbignbG9hZGVkJywgZnVuY3Rpb24oKSB7CiAqICAgICBjb25zb2xlLmxvZygnQWxsIGZpbGVzIHByb2Nlc3NlZCcpOwogKiAgIH0pCiAqICAgLmxvYWQoKTsKICovCkwuRmlsZUxpc3RMb2FkZXIgPSBMLkV2ZW50ZWQuZXh0ZW5kKHsKICBvcHRpb25zOiB7CiAgICAvLyBAb3B0aW9uIHJlYWRBczogU3RyaW5nID0gJ3JlYWRBc1RleHQnCiAgICAvLyBGdW5jdGlvbiB0byB1c2UgZm9yIGZpbGUgcmVhZGluZy4KICAgIHJlYWRBczogJ3JlYWRBc1RleHQnLAogIH0sCgogIGluaXRpYWxpemU6IGZ1bmN0aW9uIChmaWxlTGlzdCwgb3B0aW9ucykgewogICAgTC5VdGlsLnNldE9wdGlvbnModGhpcywgb3B0aW9ucyk7CiAgICB0aGlzLm9uY2UoJ2xvYWRzdGFydCcsIGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMubGlzdGVucygnbG9hZGVkJykpIHsKICAgICAgICB0aGlzLm9uKCdsb2FkZW5kJywgdGhpcy5fbG9hZGVkKTsKICAgICAgfQogICAgfSk7CiAgICB0aGlzLm9uY2UoJ2luaXQnLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICh0aGlzLmxpc3RlbnMoJ2luaXQnKSkgewogICAgICAgIHRoaXMub24oJ2luaXQ6ZXJyb3InLCB0aGlzLl9sb2FkZWQpOwogICAgICB9CiAgICB9KTsKICAgIGlmIChmaWxlTGlzdCkgewogICAgICB0aGlzLmxvYWQoZmlsZUxpc3QpOwogICAgfQogIH0sCgogIF9yZWFkZXJDb25zdHJ1Y3RvcjogTC5GaWxlUmVhZGVyLAoKICAvLyBAbWV0aG9kIGxvYWQoZmlsZUxpc3Q6IEZpbGVMaXN0KQogIC8vIFN0YXJ0cyBsb2FkaW5nIGZpbGVzIGxpc3RlZCBpbiBgZmlsZUxpc3RgIGFyZ3VtZW50LgogIC8vIE5vdGU6IGFsbCAnaW5pdConIGV2ZW50IGhhbmRsZXJzIGV4cGVjdGVkIHRvIGJlIGFscmVhZHkgYXR0YWNoZWQgKipiZWZvcmUqKiB0aGlzIG1ldGhvZCBjYWxsLgogIGxvYWQ6IGZ1bmN0aW9uIChmaWxlTGlzdCkgewogICAgaWYgKCFmaWxlTGlzdCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmaWxlTGlzdGAgYXJnIHJlcXVpcmVkJyk7CiAgICB9CiAgICB0aGlzLl90b2xvYWQgPSBmaWxlTGlzdC5sZW5ndGg7CiAgICB0aGlzLl9yZWFkZXJzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKAogICAgICBmaWxlTGlzdCwKICAgICAgZnVuY3Rpb24gKGZpbGUpIHsKICAgICAgICByZXR1cm4gbmV3IHRoaXMuX3JlYWRlckNvbnN0cnVjdG9yKCkuYWRkRXZlbnRQYXJlbnQodGhpcykucmVhZChmaWxlLCB0aGlzLm9wdGlvbnMpOwogICAgICB9LAogICAgICB0aGlzCiAgICApOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLy8gQGV2ZW50IGxvYWRlZDogRXZlbnQKICAvLyBGaXJlZCBhZnRlciBhbGwgZmlsZXMgYXJlIHByb2Nlc3NlZCAoZWl0aGVyIHdpdGggc3VjY2VzcyBvciB3aXRoIGVycm9yKS4KICBfbG9hZGVkOiBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLl90b2xvYWQtLTsKICAgIGlmICh0aGlzLl90b2xvYWQgPT09IDApIHsKICAgICAgdGhpcy5maXJlKCdsb2FkZWQnKTsKICAgIH0KICB9LAp9KTsKCi8qKgogKiBBIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCBpbnN0YW50aWF0ZXMgYSBgRmlsZUxpc3RMb2FkZXJgIG9iamVjdCBnaXZlbiB0aGUgYEZpbGVMaXN0YCBhbmQgb3B0aW9ucy4KICoKICogQG1lbWJlcm9mIEwKICogQGZ1bmN0aW9uIGZpbGVMaXN0TG9hZGVyCiAqIEBwYXJhbSB7RmlsZUxpc3R9IFtmaWxlTGlzdF0gLSBUaGUgbGlzdCBvZiBmaWxlcyB0byBsb2FkLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlIFtGaWxlTGlzdF0oaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ZpbGVBUEkvI2ZpbGVsaXN0LXNlY3Rpb24pLgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgYGZpbGVMaXN0YCBhcmd1bWVudCBpcyBzcGVjaWZpZWQsIHRoZW4gYGxvYWRgIG1ldGhvZCBpcyBjYWxsZWQgaW1tZWRpYXRlbHkuCiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciBmaWxlIHJlYWRpbmcuCiAqIEByZXR1cm5zIHtMLkZpbGVMaXN0TG9hZGVyfSBBIG5ldyBGaWxlTGlzdExvYWRlciBpbnN0YW5jZS4KICovCkwuZmlsZUxpc3RMb2FkZXIgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIG9wdGlvbnMpIHsKICByZXR1cm4gbmV3IEwuRmlsZUxpc3RMb2FkZXIoZmlsZUxpc3QsIG9wdGlvbnMpOwp9OwoKLyoqCiAqIEluc3RhbnRpYXRlcyBhIGBMLkZpbGVMaXN0TG9hZGVyYCBvYmplY3QgYW5kIGluaXRpYXRlcyBhIGZpbGUgY2hvb3NlciBkaWFsb2cuCiAqIFRoaXMgc2ltdWxhdGVzIGEgY2xpY2sgb24gYSBoaWRkZW4gYGlucHV0YCBIVE1MIGVsZW1lbnQgY3JlYXRlZCB1c2luZyB0aGUgc3BlY2lmaWVkIGBvcHRpb25zYC4KICogSXQgdGhlbiBjYWxscyB0aGUgYGxvYWRgIG1ldGhvZCB3aXRoIHRoZSBsaXN0IG9mIGZpbGVzIGNob3NlbiBieSB0aGUgdXNlci4KICoKICogQG1lbWJlcm9mIEwuRmlsZUxpc3RMb2FkZXIKICogQGZ1bmN0aW9uIGxvYWRGaWxlcwogKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9ucyBmb3IgdGhlIGZpbGUgaW5wdXQsIGxpa2UgYGFjY2VwdGAsIGBtdWx0aXBsZWAsIGBjYXB0dXJlYC4KICogQHJldHVybnMge0wuRmlsZUxpc3RMb2FkZXJ9IEEgbmV3IGluc3RhbmNlIG9mIGBMLkZpbGVMaXN0TG9hZGVyYC4KICovCkwuRmlsZUxpc3RMb2FkZXIubG9hZEZpbGVzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICB2YXIgbG9hZGVyID0gbmV3IHRoaXMoKTsKICBMLkZpbGVSZWFkZXIuX2Nob29zZUZpbGVzKGxvYWRlci5sb2FkLmJpbmQobG9hZGVyKSwgb3B0aW9ucyk7CiAgcmV0dXJuIGxvYWRlcjsKfTsKCgp9KSgpOwoKCi8vICoqKiBtb2R1bGU6IHV0aWxzX3BvbHlmaWxscy5qcyAqKioKKGZ1bmN0aW9uICgpIHsKdmFyIGxvZyA9IHVsb2coJ3V0aWxzX3BvbHlmaWxscycpOwovKioKICogQGZpbGUgTWlzYyBwb2x5ZmlsbHMKICoKICogQG1vZHVsZSB1dGlsc19wb2x5ZmlsbHMKICovCgppZiAoIVN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCAnY2FwaXRhbGl6ZScsIHsKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zbGljZSgxKS50b0xvd2VyQ2FzZSgpOwogICAgfSwKICB9KTsKfQoKLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3N0YXJ0c1dpdGgjcG9seWZpbGwKaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnLCB7CiAgICB2YWx1ZTogZnVuY3Rpb24gKHNlYXJjaCwgcmF3UG9zKSB7CiAgICAgIHZhciBwb3MgPSByYXdQb3MgPiAwID8gcmF3UG9zIHwgMCA6IDA7CiAgICAgIHJldHVybiB0aGlzLnN1YnN0cmluZyhwb3MsIHBvcyArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7CiAgICB9LAogIH0pOwp9CgovLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3RydW5jI3BvbHlmaWxsCi8vIChyZXF1aXJlZCBmb3IgS2l0S2F0IHN1cHBvcnQpCmlmICghTWF0aC50cnVuYykgewogIE1hdGgudHJ1bmMgPSBmdW5jdGlvbiAodikgewogICAgcmV0dXJuIHYgPCAwID8gTWF0aC5jZWlsKHYpIDogTWF0aC5mbG9vcih2KTsKICB9Owp9CgovLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maW5kI3BvbHlmaWxsCi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kCmlmICghQXJyYXkucHJvdG90eXBlLmZpbmQpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnZmluZCcsIHsKICAgIHZhbHVlOiBmdW5jdGlvbiAocHJlZGljYXRlKSB7CiAgICAgIC8vIDEuIExldCBPIGJlID8gVG9PYmplY3QodGhpcyB2YWx1ZSkuCiAgICAgIGlmICh0aGlzID09PSBudWxsKSB7CiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCcidGhpcyIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpOwogICAgICB9CgogICAgICB2YXIgbyA9IE9iamVjdCh0aGlzKTsKCiAgICAgIC8vIDIuIExldCBsZW4gYmUgPyBUb0xlbmd0aCg/IEdldChPLCAibGVuZ3RoIikpLgogICAgICB2YXIgbGVuID0gby5sZW5ndGggPj4+IDA7CgogICAgICAvLyAzLiBJZiBJc0NhbGxhYmxlKHByZWRpY2F0ZSkgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi4KICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgfQoKICAgICAgLy8gNC4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLgogICAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTsKCiAgICAgIC8vIDUuIExldCBrIGJlIDAuCiAgICAgIHZhciBrID0gMDsKCiAgICAgIC8vIDYuIFJlcGVhdCwgd2hpbGUgayA8IGxlbgogICAgICB3aGlsZSAoayA8IGxlbikgewogICAgICAgIC8vIGEuIExldCBQayBiZSAhIFRvU3RyaW5nKGspLgogICAgICAgIC8vIGIuIExldCBrVmFsdWUgYmUgPyBHZXQoTywgUGspLgogICAgICAgIC8vIGMuIExldCB0ZXN0UmVzdWx0IGJlIFRvQm9vbGVhbig/IENhbGwocHJlZGljYXRlLCBULCDCqyBrVmFsdWUsIGssIE8gwrspKS4KICAgICAgICAvLyBkLiBJZiB0ZXN0UmVzdWx0IGlzIHRydWUsIHJldHVybiBrVmFsdWUuCiAgICAgICAgdmFyIGtWYWx1ZSA9IG9ba107CiAgICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIGtWYWx1ZSwgaywgbykpIHsKICAgICAgICAgIHJldHVybiBrVmFsdWU7CiAgICAgICAgfQogICAgICAgIC8vIGUuIEluY3JlYXNlIGsgYnkgMS4KICAgICAgICBrKys7CiAgICAgIH0KCiAgICAgIC8vIDcuIFJldHVybiB1bmRlZmluZWQuCiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9LAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgd3JpdGFibGU6IHRydWUsCiAgfSk7Cn0KCi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2Nsb3Nlc3QjcG9seWZpbGwKaWYgKCFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7CiAgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvcjsKfQoKaWYgKCFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7CiAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uIChzKSB7CiAgICB2YXIgZWwgPSB0aGlzOwoKICAgIGRvIHsKICAgICAgaWYgKEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMuY2FsbChlbCwgcykpIHJldHVybiBlbDsKICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGU7CiAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7CiAgICByZXR1cm4gbnVsbDsKICB9Owp9CgovLyBodHRwczovL2dpdGh1Yi5jb20vS2hhbGVkRWxBbnNhcmkvU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydC9ibG9iL21hc3Rlci9pbmRleC5qcwppZiAoIVN0cmluZy5wcm90b3R5cGUucGFkU3RhcnQpIHsKICBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0ID0gZnVuY3Rpb24gKHRhcmdldExlbmd0aCwgcGFkU3RyaW5nKSB7CiAgICB0YXJnZXRMZW5ndGggPSBNYXRoLmZsb29yKHRhcmdldExlbmd0aCkgfHwgMDsKICAgIGlmICh0YXJnZXRMZW5ndGggPCB0aGlzLmxlbmd0aCkgcmV0dXJuIFN0cmluZyh0aGlzKTsKCiAgICBwYWRTdHJpbmcgPSBwYWRTdHJpbmcgPyBTdHJpbmcocGFkU3RyaW5nKSA6ICcgJzsKCiAgICB2YXIgcGFkID0gJyc7CiAgICB2YXIgbGVuID0gdGFyZ2V0TGVuZ3RoIC0gdGhpcy5sZW5ndGg7CiAgICB2YXIgaSA9IDA7CiAgICB3aGlsZSAocGFkLmxlbmd0aCA8IGxlbikgewogICAgICBpZiAoIXBhZFN0cmluZ1tpXSkgewogICAgICAgIGkgPSAwOwogICAgICB9CiAgICAgIHBhZCArPSBwYWRTdHJpbmdbaV07CiAgICAgIGkrKzsKICAgIH0KCiAgICByZXR1cm4gcGFkICsgU3RyaW5nKHRoaXMpLnNsaWNlKDApOwogIH07Cn0KCgp9KSgpOwoKCi8qIGV4cG9ydGVkIHVsb2cgLS0gZXNsaW50ICovCgp9IC8vIHdyYXBwZXIgZW5kCi8vIGluamVjdCBjb2RlIGludG8gc2l0ZSBjb250ZXh0CnZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKdmFyIGluZm8gPSB7fTsKaWYgKHR5cGVvZiBHTV9pbmZvICE9PSAndW5kZWZpbmVkJyAmJiBHTV9pbmZvICYmIEdNX2luZm8uc2NyaXB0KSBpbmZvLnNjcmlwdCA9IHsgdmVyc2lvbjogR01faW5mby5zY3JpcHQudmVyc2lvbiwgbmFtZTogR01faW5mby5zY3JpcHQubmFtZSwgZGVzY3JpcHRpb246IEdNX2luZm8uc2NyaXB0LmRlc2NyaXB0aW9uIH07CnNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnKCcrIHdyYXBwZXIgKycpKCcrSlNPTi5zdHJpbmdpZnkoaW5mbykrJyk7JykpOwooZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKCg=="},{"name":"IITC plugin: Cache viewed portals on map","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556910765,"data":{}},"enabled":true,"position":2,"file_url":"https://iitc.app/build/release/plugins/cache-portals-on-map.user.js","uuid":"ce0e1272-a051-4d17-9a40-dfa6edfeb897","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGF1dGhvciAgICAgICAgIGpvbmF0a2lucwovLyBAbmFtZSAgICAgICAgICAgSUlUQyBwbHVnaW46IENhY2hlIHZpZXdlZCBwb3J0YWxzIG9uIG1hcAovLyBAY2F0ZWdvcnkgICAgICAgQ2FjaGUKLy8gQHZlcnNpb24gICAgICAgIDAuMS4zCi8vIEBkZXNjcmlwdGlvbiAgICBDYWNoZSB0aGUgZGV0YWlscyBvZiByZWNlbnRseSB2aWV3ZWQgcG9ydGFscyBhbmQgdXNlIHRoaXMgdG8gcG9wdWxhdGUgdGhlIG1hcCB3aGVuIHBvc3NpYmxlCi8vIEBpZCAgICAgICAgICAgICBjYWNoZS1wb3J0YWxzLW9uLW1hcAovLyBAbmFtZXNwYWNlICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0lJVEMtQ0UvaW5ncmVzcy1pbnRlbC10b3RhbC1jb252ZXJzaW9uCi8vIEB1cGRhdGVVUkwgICAgICBodHRwczovL2lpdGMuYXBwL2J1aWxkL3JlbGVhc2UvcGx1Z2lucy9jYWNoZS1wb3J0YWxzLW9uLW1hcC5tZXRhLmpzCi8vIEBkb3dubG9hZFVSTCAgICBodHRwczovL2lpdGMuYXBwL2J1aWxkL3JlbGVhc2UvcGx1Z2lucy9jYWNoZS1wb3J0YWxzLW9uLW1hcC51c2VyLmpzCi8vIEBtYXRjaCAgICAgICAgICBodHRwczovL2ludGVsLmluZ3Jlc3MuY29tLyoKLy8gQG1hdGNoICAgICAgICAgIGh0dHBzOi8vaW50ZWwteC5pbmdyZXNzLmNvbS8qCi8vIEBpY29uICAgICAgICAgICBodHRwczovL2lpdGMuYXBwL2V4dHJhcy9wbHVnaW4taWNvbnMvY2FjaGUtcG9ydGFscy1vbi1tYXAuc3ZnCi8vIEBncmFudCAgICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gd3JhcHBlcihwbHVnaW5faW5mbykgewovLyBlbnN1cmUgcGx1Z2luIGZyYW1ld29yayBpcyB0aGVyZSwgZXZlbiBpZiBpaXRjIGlzIG5vdCB5ZXQgbG9hZGVkCmlmKHR5cGVvZiB3aW5kb3cucGx1Z2luICE9PSAnZnVuY3Rpb24nKSB3aW5kb3cucGx1Z2luID0gZnVuY3Rpb24oKSB7fTsKCi8vUExVR0lOIEFVVEhPUlM6IHdyaXRpbmcgYSBwbHVnaW4gb3V0c2lkZSBvZiB0aGUgSUlUQyBidWlsZCBlbnZpcm9ubWVudD8gaWYgc28sIGRlbGV0ZSB0aGVzZSBsaW5lcyEhCi8vKGxlYXZpbmcgdGhlbSBpbiBwbGFjZSBtaWdodCBicmVhayB0aGUgJ0Fib3V0IElJVEMnIHBhZ2Ugb3IgYnJlYWsgdXBkYXRlIGNoZWNrcykKcGx1Z2luX2luZm8uYnVpbGROYW1lID0gJ3JlbGVhc2UnOwpwbHVnaW5faW5mby5kYXRlVGltZVZlcnNpb24gPSAnMjAyNS0wNC0xOS0xMjQ1NTMnOwpwbHVnaW5faW5mby5wbHVnaW5JZCA9ICdjYWNoZS1wb3J0YWxzLW9uLW1hcCc7Ci8vRU5EIFBMVUdJTiBBVVRIT1JTIE5PVEUKCi8qIGV4cG9ydGVkIHNldHVwLCBjaGFuZ2Vsb2cgLS1lc2xpbnQgKi8KCnZhciBjaGFuZ2Vsb2cgPSBbCiAgewogICAgdmVyc2lvbjogJzAuMS4zJywKICAgIGNoYW5nZXM6IFsnUmVmYWN0b3Jpbmc6IGZpeCBlc2xpbnQnXSwKICB9LAogIHsKICAgIHZlcnNpb246ICcwLjEuMicsCiAgICBjaGFuZ2VzOiBbJ1ZlcnNpb24gdXBncmFkZSBkdWUgdG8gYSBjaGFuZ2UgaW4gdGhlIHdyYXBwZXI6IHBsdWdpbiBpY29ucyBhcmUgbm93IHZlY3Rvcml6ZWQnXSwKICB9LAogIHsKICAgIHZlcnNpb246ICcwLjEuMScsCiAgICBjaGFuZ2VzOiBbJ1ZlcnNpb24gdXBncmFkZSBkdWUgdG8gYSBjaGFuZ2UgaW4gdGhlIHdyYXBwZXI6IGFkZGVkIHBsdWdpbiBpY29uJ10sCiAgfSwKXTsKCi8vIHVzZSBvd24gbmFtZXNwYWNlIGZvciBwbHVnaW4Kd2luZG93LnBsdWdpbi5jYWNoZVBvcnRhbERldGFpbHNPbk1hcCA9IGZ1bmN0aW9uICgpIHt9OwoKd2luZG93LnBsdWdpbi5jYWNoZVBvcnRhbERldGFpbHNPbk1hcC5NQVhfQUdFID0gMTIgKiA2MCAqIDYwOyAvLyAxMiBob3VycyBtYXggYWdlIGZvciBjYWNoZWQgZGF0YQoKd2luZG93LnBsdWdpbi5jYWNoZVBvcnRhbERldGFpbHNPbk1hcC5wb3J0YWxEZXRhaWxMb2FkZWQgPSBmdW5jdGlvbiAoZGF0YSkgewogIGlmIChkYXRhLnN1Y2Nlc3MpIHsKICAgIHdpbmRvdy5wbHVnaW4uY2FjaGVQb3J0YWxEZXRhaWxzT25NYXAuY2FjaGVbZGF0YS5ndWlkXSA9IHsgbG9hZHRpbWU6IERhdGUubm93KCksIGVudDogZGF0YS5lbnQgfTsKICB9Cn07Cgp3aW5kb3cucGx1Z2luLmNhY2hlUG9ydGFsRGV0YWlsc09uTWFwLmVudGl0eUluamVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgdmFyIG1heEFnZSA9IERhdGUubm93KCkgLSB3aW5kb3cucGx1Z2luLmNhY2hlUG9ydGFsRGV0YWlsc09uTWFwLk1BWF9BR0UgKiAxMDAwOwoKICB2YXIgZW50cyA9IFtdOwogIGZvciAodmFyIGd1aWQgaW4gd2luZG93LnBsdWdpbi5jYWNoZVBvcnRhbERldGFpbHNPbk1hcC5jYWNoZSkgewogICAgaWYgKHdpbmRvdy5wbHVnaW4uY2FjaGVQb3J0YWxEZXRhaWxzT25NYXAuY2FjaGVbZ3VpZF0ubG9hZHRpbWUgPCBtYXhBZ2UpIHsKICAgICAgZGVsZXRlIHdpbmRvdy5wbHVnaW4uY2FjaGVQb3J0YWxEZXRhaWxzT25NYXAuY2FjaGVbZ3VpZF07CiAgICB9IGVsc2UgewogICAgICBlbnRzLnB1c2god2luZG93LnBsdWdpbi5jYWNoZVBvcnRhbERldGFpbHNPbk1hcC5jYWNoZVtndWlkXS5lbnQpOwogICAgfQogIH0KICBkYXRhLmNhbGxiYWNrKGVudHMsICdkZXRhaWxlZCcpOwp9OwoKd2luZG93LnBsdWdpbi5jYWNoZVBvcnRhbERldGFpbHNPbk1hcC5zZXR1cCA9IGZ1bmN0aW9uICgpIHsKICB3aW5kb3cucGx1Z2luLmNhY2hlUG9ydGFsRGV0YWlsc09uTWFwLmNhY2hlID0ge307CgogIHdpbmRvdy5hZGRIb29rKCdwb3J0YWxEZXRhaWxMb2FkZWQnLCB3aW5kb3cucGx1Z2luLmNhY2hlUG9ydGFsRGV0YWlsc09uTWFwLnBvcnRhbERldGFpbExvYWRlZCk7CiAgd2luZG93LmFkZEhvb2soJ21hcERhdGFFbnRpdHlJbmplY3QnLCB3aW5kb3cucGx1Z2luLmNhY2hlUG9ydGFsRGV0YWlsc09uTWFwLmVudGl0eUluamVjdCk7Cn07Cgp2YXIgc2V0dXAgPSB3aW5kb3cucGx1Z2luLmNhY2hlUG9ydGFsRGV0YWlsc09uTWFwLnNldHVwOwoKc2V0dXAuaW5mbyA9IHBsdWdpbl9pbmZvOyAvL2FkZCB0aGUgc2NyaXB0IGluZm8gZGF0YSB0byB0aGUgZnVuY3Rpb24gYXMgYSBwcm9wZXJ0eQppZiAodHlwZW9mIGNoYW5nZWxvZyAhPT0gJ3VuZGVmaW5lZCcpIHNldHVwLmluZm8uY2hhbmdlbG9nID0gY2hhbmdlbG9nOwppZighd2luZG93LmJvb3RQbHVnaW5zKSB3aW5kb3cuYm9vdFBsdWdpbnMgPSBbXTsKd2luZG93LmJvb3RQbHVnaW5zLnB1c2goc2V0dXApOwovLyBpZiBJSVRDIGhhcyBhbHJlYWR5IGJvb3RlZCwgaW1tZWRpYXRlbHkgcnVuIHRoZSAnc2V0dXAnIGZ1bmN0aW9uCmlmKHdpbmRvdy5paXRjTG9hZGVkICYmIHR5cGVvZiBzZXR1cCA9PT0gJ2Z1bmN0aW9uJykgc2V0dXAoKTsKfSAvLyB3cmFwcGVyIGVuZAovLyBpbmplY3QgY29kZSBpbnRvIHNpdGUgY29udGV4dAp2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CnZhciBpbmZvID0ge307CmlmICh0eXBlb2YgR01faW5mbyAhPT0gJ3VuZGVmaW5lZCcgJiYgR01faW5mbyAmJiBHTV9pbmZvLnNjcmlwdCkgaW5mby5zY3JpcHQgPSB7IHZlcnNpb246IEdNX2luZm8uc2NyaXB0LnZlcnNpb24sIG5hbWU6IEdNX2luZm8uc2NyaXB0Lm5hbWUsIGRlc2NyaXB0aW9uOiBHTV9pbmZvLnNjcmlwdC5kZXNjcmlwdGlvbiB9OwpzY3JpcHQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJygnKyB3cmFwcGVyICsnKSgnK0pTT04uc3RyaW5naWZ5KGluZm8pKycpOycpKTsKKGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFwcGVuZENoaWxkKHNjcmlwdCk7Cgo="},{"name":"IITC plugin: Done links","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556925356,"data":{}},"enabled":true,"position":3,"file_url":"https://iitc.app/build/release/plugins/done-links.user.js","uuid":"5fa25057-37fc-49b7-9fef-99c15dc40f8b","source":""},{"name":"IITC plugin: Cross links","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556930435,"data":{}},"enabled":true,"position":4,"file_url":"https://iitc.app/build/release/plugins/cross-links.user.js","uuid":"06bb0f7b-584e-4a2c-9fb8-b348434218dc","source":""},{"name":"IITC plugin: Draw tools","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556936255,"data":{}},"enabled":true,"position":5,"file_url":"https://iitc.app/build/release/plugins/draw-tools.user.js","uuid":"c07ae5f4-78f2-460b-86b3-38638856fa41","source":""},{"name":"IITC plugin: Tidy Links","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556942426,"data":{}},"enabled":true,"position":6,"file_url":"https://iitc.app/build/release/plugins/tidy-links.user.js","uuid":"fd0c11b5-0305-4ebb-838f-c9ae2652ccb6","source":""},{"name":"IITC plugin: Fly Links","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556948986,"data":{}},"enabled":true,"position":7,"file_url":"https://iitc.app/build/release/plugins/fly-links.user.js","uuid":"6b01f95a-807b-4a63-8c20-e997fa9dec51","source":""},{"name":"IITC plugin: Layer count","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556971942,"data":{}},"enabled":true,"position":8,"file_url":"https://iitc.app/build/release/plugins/layer-count.user.js","uuid":"e162516f-7d08-4b25-b4f5-7f2d93d93c69","source":""},{"name":"IITC plugin: Player activity tracker","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753556981168,"data":{}},"enabled":true,"position":9,"file_url":"https://iitc.app/build/release/plugins/player-activity-tracker.user.js","uuid":"d2c3ebc7-b86e-4c1f-a8b7-1a76803a38fd","source":""},{"name":"IITC plugin: Linked portals","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753557008494,"data":{}},"enabled":true,"position":10,"file_url":"https://iitc.app/build/release/plugins/linked-portals-show.user.js","uuid":"14f7ac76-f301-4307-8f32-e72730d9bf70","source":""},{"name":"IITC plugin: Bookmarks for maps and portals","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753898156053,"data":{}},"enabled":true,"position":11,"file_url":"https://iitc.app/build/release/plugins/bookmarks.user.js","uuid":"04aaeb1e-e208-4b9b-b766-0f564fab7938","source":""},{"name":"IITC plugin: Direction of links on map","options":{"check_for_updates":true,"user_modified":null,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"run_in":null,"tags":[],"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://intel.ingress.com/*","https://intel-x.ingress.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_run_in":[],"orig_noframes":null,"orig_tags":[]}},"storage":{"ts":1753903409579,"data":{}},"enabled":true,"position":12,"file_url":"https://iitc.app/build/release/plugins/link-show-direction.user.js","uuid":"f15163e2-a0e8-47be-a0d2-15b3594833e7","source":""}]}